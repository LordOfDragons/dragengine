diff -rupN dragonscript-1.4-org/src/dsi/test_scripts/stringTests.ds dragonscript-1.4-new/src/dsi/test_scripts/stringTests.ds
--- dragonscript-1.4-org/src/dsi/test_scripts/stringTests.ds	2023-01-28 23:41:53.000000000 +0100
+++ dragonscript-1.4-new/src/dsi/test_scripts/stringTests.ds	2023-10-22 18:31:44.968116867 +0200
@@ -37,16 +37,12 @@ class StringTests extends Application
 		System.print( "replaceString: should 'HollaHollaHolla' is '" + "aaa".replaceString( "a", "Holla" ) + "'\n" )
 		System.print( "replaceString: should 'HollaHollaa' is '" + "ababa".replaceString( "ab", "Holla" ) + "'\n" )
 		
-		System.print( "split: should [this,is,a,test] is " + str1.split( ' ' ) + "\n" )
-		var String str2 = "this_is-aXtest"
-		System.print( "split: should [this,is,a,test] is " + str2.split( "X-_" ) + "\n" )
-		var String str3 = "this_--X_is-_-aXXXXtest__-X"
-		System.print( "split: should [this,is,a,test] is " + str2.split( "X-_" ) + "\n" )
-		
+		this.testSplit()
 		this.testStartsWith()
 		this.testEndsWith()
 		this.testGetAt()
 		this.testFormat()
+		this.testEquals()
 		
 		return 0
 	end
@@ -157,5 +153,36 @@ class StringTests extends Application
 		System.print( "format: should 'this is a test' is: " + "this {:s} test".format(Array.newWith("is a")) + "\n" )
 		System.print( "format: should 'this (null) test' is: " + "this {:s} test".format(Array.newWith(null)) + "\n" )
 	end
+	
+	protected func void testEquals()
+		System.print( "equals(a,null): should false: " + "a".equals(null) + "\n" )
+		System.print( "equals(a,a): should true: " + "a".equals("a") + "\n" )
+		System.print( "equals(a,b): should false: " + "a".equals("b") + "\n" )
+	end
+	
+	protected func void testSplit()
+		var String str1 = "this is a test"
+		System.print( "split: should [this,is,a,test] is " + str1.split( ' ' ) + "\n" )
+		System.print( "splitExact: should [this,is,a,test] is " + str1.splitExact( ' ' ) + "\n" )
+		
+		str1 = " this is   a test "
+		System.print( "split: should [this,is,a,test] is " + str1.split( ' ' ) + "\n" )
+		System.print( "splitExact: should [,this,is,,,a,test,] is " + str1.splitExact( ' ' ) + "\n" )
+		
+		str1 = "this_is-aXtest"
+		System.print( "split: should [this,is,a,test] is " + str1.split( "X-_" ) + "\n" )
+		System.print( "splitExact: should [this,is,a,test] is " + str1.splitExact( "X-_" ) + "\n" )
+		
+		str1 = "-Xthis_--X_is-_-aXXXXtest__-X"
+		System.print( "split: should [this,is,a,test] is " + str1.split( "X-_" ) + "\n" )
+		System.print( "splitExact: should [,,this,,,,,is,,,a,,,,test,,,,] is " + str1.splitExact( "X-_" ) + "\n" )
+		
+		str1 = ""
+		System.print( "split: should 0 is " + str1.split( '.' ).getCount() + "\n" )
+		System.print( "splitExact: should 1 [] is " + str1.splitExact( '.' ).getCount() + " " + str1.splitExact( '.' ) + "\n" )
+		
+		str1 = "..."
+		System.print( "split: should 0 is " + str1.split( '.' ).getCount() + "\n" )
+		System.print( "splitExact: should [,,,] is " + str1.splitExact( '.' ) + "\n" )
+	end
 end
-
diff -rupN dragonscript-1.4-org/src/scriptengine/packages/default/dsClassString.cpp dragonscript-1.4-new/src/scriptengine/packages/default/dsClassString.cpp
--- dragonscript-1.4-org/src/scriptengine/packages/default/dsClassString.cpp	2023-01-28 23:41:53.000000000 +0100
+++ dragonscript-1.4-new/src/scriptengine/packages/default/dsClassString.cpp	2023-10-22 18:20:31.555353909 +0200
@@ -1148,6 +1148,132 @@ void dsClassString::nfSplit2::RunFunctio
 	}
 }
 
+// public func Array splitExact( byte character )
+dsClassString::nfSplitExact::nfSplitExact( const sInitData &init ) : dsFunction( init.clsStr,
+"splitExact", DSFT_FUNCTION, DSTM_PUBLIC | DSTM_NATIVE, init.clsArr ){
+	p_AddParameter( init.clsByte ); // character
+}
+void dsClassString::nfSplitExact::RunFunction( dsRunTime *rt, dsValue *myself ){
+	dsClassString * const clsString = ( dsClassString* )GetOwnerClass();
+	dsClassArray * const clsArray = ( dsClassArray* )rt->GetEngine()->GetClassArray();
+	const char * const str = ( ( sStrNatData* )p_GetNativeData( myself ) )->str;
+	const byte character = rt->GetValue( 0 )->GetByte();
+	const int len = ( int )strlen( str );
+	const char *splitstr = NULL;
+	dsValue *valsplitstr = NULL;
+	dsValue *vallist = NULL;
+	int i, start = 0;
+	
+	try{
+		vallist = clsArray->CreateArray( rt );
+		valsplitstr = rt->CreateValue( clsString );
+		
+		for( i=0; i<len; i++ ){
+			if( str[ i ] == character ){
+				splitstr = substring( str, start, i );
+				rt->SetString( valsplitstr, splitstr );
+				delete [] splitstr;
+				splitstr = NULL;
+				
+				clsArray->AddObject( rt, vallist->GetRealObject(), valsplitstr );
+				
+				start = i + 1;
+			}
+		}
+		
+		splitstr = substring( str, start, len );
+		rt->SetString( valsplitstr, splitstr );
+		delete [] splitstr;
+		splitstr = NULL;
+		
+		clsArray->AddObject( rt, vallist->GetRealObject(), valsplitstr );
+		
+		// push the result and clean up
+		rt->FreeValue( valsplitstr );
+		valsplitstr = NULL;
+		
+		rt->PushValue( vallist );
+		rt->FreeValue( vallist );
+		
+	}catch( ... ){
+		if( splitstr ){
+			delete [] splitstr;
+		}
+		if( valsplitstr ){
+			rt->FreeValue( valsplitstr );
+		}
+		if( vallist ){
+			rt->FreeValue( vallist );
+		}
+		throw;
+	}
+}
+
+// public func Array splitExact( String characters )
+dsClassString::nfSplitExact2::nfSplitExact2( const sInitData &init ) : dsFunction( init.clsStr,
+"splitExact", DSFT_FUNCTION, DSTM_PUBLIC | DSTM_NATIVE, init.clsArr ){
+	p_AddParameter( init.clsStr ); // characters
+}
+void dsClassString::nfSplitExact2::RunFunction( dsRunTime *rt, dsValue *myself ){
+	dsClassString * const clsString = ( dsClassString* )GetOwnerClass();
+	dsClassArray * const clsArray = ( dsClassArray* )rt->GetEngine()->GetClassArray();
+	const char * const str = ( ( sStrNatData* )p_GetNativeData( myself ) )->str;
+	const char * const characters = rt->GetValue( 0 )->GetString();
+	const int clen = ( int )strlen( characters );
+	const int len = ( int )strlen( str );
+	const char *splitstr = NULL;
+	dsValue *valsplitstr = NULL;
+	dsValue *vallist = NULL;
+	int i, j, start = 0;
+	
+	try{
+		vallist = clsArray->CreateArray( rt );
+		valsplitstr = rt->CreateValue( clsString );
+		
+		for( i=0; i<len; i++ ){
+			for( j=0; j<clen; j++ ){
+				if( str[ i ] == characters[ j ] ){
+					splitstr = substring( str, start, i );
+					rt->SetString( valsplitstr, splitstr );
+					delete [] splitstr;
+					splitstr = NULL;
+					
+					clsArray->AddObject( rt, vallist->GetRealObject(), valsplitstr );
+					
+					start = i + 1;
+					break;
+				}
+			}
+		}
+		
+		splitstr = substring( str, start, len );
+		rt->SetString( valsplitstr, splitstr );
+		delete [] splitstr;
+		splitstr = NULL;
+		
+		clsArray->AddObject( rt, vallist->GetRealObject(), valsplitstr );
+		
+		// push the result and clean up
+		rt->FreeValue( valsplitstr );
+		valsplitstr = NULL;
+		
+		rt->PushValue( vallist );
+		rt->FreeValue( vallist );
+		
+	}catch( ... ){
+		if( splitstr ){
+			delete [] splitstr;
+		}
+		if( valsplitstr ){
+			rt->FreeValue( valsplitstr );
+		}
+		if( vallist ){
+			rt->FreeValue( vallist );
+		}
+		throw;
+	}
+}
+
 // public func String replace( byte replace, byte with )
 dsClassString::nfReplace::nfReplace( const sInitData &init ) : dsFunction( init.clsStr,
 "replace", DSFT_FUNCTION, DSTM_PUBLIC | DSTM_NATIVE, init.clsStr ){
@@ -1972,6 +2098,8 @@ void dsClassString::CreateClassMembers(
 	AddFunction( new nfReverse( init ) );
 	AddFunction( new nfSplit( init ) );
 	AddFunction( new nfSplit2( init ) );
+	AddFunction( new nfSplitExact( init ) );
+	AddFunction( new nfSplitExact2( init ) );
 	AddFunction( new nfReplace( init ) );
 	AddFunction( new nfReplace2( init ) );
 	AddFunction( new nfReplaceString( init ) );
diff -rupN dragonscript-1.4-org/src/scriptengine/packages/default/dsClassString.h dragonscript-1.4-new/src/scriptengine/packages/default/dsClassString.h
--- dragonscript-1.4-org/src/scriptengine/packages/default/dsClassString.h	2023-01-28 23:41:53.000000000 +0100
+++ dragonscript-1.4-new/src/scriptengine/packages/default/dsClassString.h	2023-10-22 18:14:25.239306973 +0200
@@ -104,6 +104,8 @@ private:
 	DEF_NATFUNC( nfReverse );
 	DEF_NATFUNC( nfSplit );
 	DEF_NATFUNC( nfSplit2 );
+	DEF_NATFUNC( nfSplitExact );
+	DEF_NATFUNC( nfSplitExact2 );
 	DEF_NATFUNC( nfReplace );
 	DEF_NATFUNC( nfReplace2 );
 	DEF_NATFUNC( nfReplaceString );
