import os
import sys
import SCons

from SConsCommon import *
from SConsExternCommon import *

Import('parent_env parent_targets parent_report')

if parent_env['platform_android'] != 'no':
	Return() # libudev not supported on android

envLibrary = parent_env.Clone()

if envLibrary['OSWindows']:
	Return()

# switch
buildStaticLinking = True

# parameters
srcdir = 'libusb-1.0.22'

libLinkName = 'usb-1.0'

if envLibrary['OSWindows']:
	libFileName = 'bin/lib{}.dll'.format(libLinkName)
	staticFileName = 'lib/lib{}.a'.format(libLinkName)
	includeDirName = libLinkName
else:
	libFileName = envLibrary.subst('lib/${{SHLIBPREFIX}}{}${{SHLIBSUFFIX}}'.format(libLinkName))
	staticFileName = envLibrary.subst('lib/${{LIBPREFIX}}{}${{LIBSUFFIX}}'.format(libLinkName))
	includeDirName = envLibrary.subst('${{SHLIBPREFIX}}{}'.format(libLinkName))

# check if system libusb is present
hasSystemLibUsb = False
conf = envLibrary.Configure()
if envLibrary['with_system_libusb'] != TernaryVariableNo:
	hasSystemLibUsb = conf.CheckLibWithHeader(libLinkName,
		'{}/libusb.h'.format(includeDirName), 'c++', 'libusb_init(0);')
conf.Finish()

if not hasSystemLibUsb and envLibrary['with_system_libusb'] == TernaryVariableYes:
	Exit('Requested to use system libusb but no usable libusb found.')

libs = [libLinkName]

parent_report['use system libusb'] = 'yes' if hasSystemLibUsb else 'no'

if hasSystemLibUsb:
	parent_targets['lib_libusb'] = {
		'name' : 'Internal libusb library',
		'cpppath' : [],
		'libpath' : [],
		'pkgconfig' : [],
		'libs' : libs,
		'runtimelibs' : [],
		'depends' : [] }
	Return()

libs = [libLinkName]

# build animated libusb
def libusbBuild(target, source, env):
	buildDir = target[0].get_dir().up()
	
	untarArchive(buildDir.abspath, source[0].abspath)
	
	script = createScriptHeader(env, deps=[])
	
	script.append('cd "{}" || exit 1'.format(buildDir.Dir(srcdir).abspath))
	
	if not buildStaticLinking:
		for p in env['PATCHES']:
			script.append('patch -p1 <{} || exit 1'.format(p.srcnode().abspath))
	
	cmdline = ['./configure --prefix="{}"'.format(buildDir.abspath)]
	cmdline.append('--enable-silent-rules')
	if buildStaticLinking:
		cmdline.append('--enable-shared=no')
		cmdline.append('--enable-static=yes')
		cmdline.append('--with-pic=yes')
	else:
		cmdline.append('--enable-shared=yes')
		cmdline.append('--enable-static=no')
	
	if 'CROSSCOMPILE_HOST' in env:
		cmdline.append('--host={}'.format(env['CROSSCOMPILE_HOST']))
	
	script.append('{} || exit 1'.format(' '.join(cmdline)))
	
	script.append('make -j {} install || exit 1'.format(env['with_threads']))
	
	if not env.RunIsolatedSystem(script):
		raise Exception('Failed building libusb')

if not buildStaticLinking:
	patches = [] # create with 'diff -rupN original_sources patches_sources'
	globFiles(envLibrary, 'patches', '*.patch', patches, recursive=False)
	envLibrary.Append(PATCHES = [envLibrary.File(x) for x in sorted(patches)])

if buildStaticLinking:
	targets = [staticFileName]
else:
	targets = [libFileName]
targets.extend(['include/{}/libusb.h'.format(includeDirName)])

library = envLibrary.Command(targets, '{}.tar.bz2'.format(srcdir),
	envLibrary.Action(libusbBuild, 'Build libusb'))

if not buildStaticLinking:
	envLibrary.Depends(library, envLibrary['PATCHES'])

depends = parent_env.Alias('lib_libusb', library)

envLibrary.Clean(library, ['include', 'lib', srcdir])

cpppath = [envLibrary.Dir('include')]
libpath = [envLibrary.Dir('lib')]
pkgconfig = [envLibrary.Dir('lib/pkgconfig')]

if buildStaticLinking:
	libs = [library[0]]
	runtimelibs = []
else:
	runtimelibs = [library[0]]

parent_targets['lib_libusb'] = {
	'name' : 'Internal libusb library',
	'cpppath' : cpppath,
	'libpath' : libpath,
	'pkgconfig' : pkgconfig,
	'libs' : libs,
	'runtimelibs' : runtimelibs,
	'depends' : depends}
