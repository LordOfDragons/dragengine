import os
import sys
import SCons

from SConsCommon import *
from SConsExternCommon import *

Import('parent_env parent_targets parent_report')

envLibrary = parent_env.Clone()

# switch
buildStaticLinking = True

# parameters
openxrVersion = '1.1.46'

srcdir = 'OpenXR-SDK-release-{}'.format(openxrVersion)

if envLibrary['OSWindows']:
	staticFileName = envLibrary.subst('lib/libopenxr_loader.a')
	libLinkName = 'libopenxr_loader'
	libpath = [envLibrary.Dir('lib')]
	
	# openxr reacts badly to these
	if '-Wl,--nxcompat' in envLibrary['CROSSCOMPILE_LINKFLAGS']:
		envLibrary['CROSSCOMPILE_LINKFLAGS'].remove('-Wl,--nxcompat')
	
	if '-Wl,--dynamicbase' in envLibrary['CROSSCOMPILE_LINKFLAGS']:
		envLibrary['CROSSCOMPILE_LINKFLAGS'].remove('-Wl,--dynamicbase')
	
elif envLibrary['OSBeOS']:
	Return()
else:
	staticFileName = envLibrary.subst('lib/${LIBPREFIX}openxr_loader${LIBSUFFIX}')
	libLinkName = 'libopenxr_loader'
	libpath = [envLibrary.Dir('lib')]

# check if system openxr is present
hasSystemOpenXR = False

conf = envLibrary.Configure()
if envLibrary['with_system_openxr'] != TernaryVariableNo:
	hasSystemOpenXR = conf.CheckLibWithHeader(libLinkName,
		'openxr/openxr.h', 'c++', call='xrCreateInstance(nullptr,nullptr);')
conf.Finish()

if not hasSystemOpenXR and envLibrary['with_system_openxr'] == TernaryVariableYes:
	Exit('Requested to use system OpenXR but no usable OpenXR found.')

parent_report['use system OpenXR'] = 'yes' if hasSystemOpenXR else 'no'

if hasSystemOpenXR:
	parent_targets['lib_openxr'] = {
		'name' : 'Internal openxr library',
		'cpppath' : [],
		'cppflags' : [],
		'libpath' : [],
		'libs' : [libLinkName],
		'runtimelibs' : [],
		'depends' : []}
	Return()

# build openxr
nodeArtifacts = envLibrary.DownloadArtifactHelper('{}.tar.xz'.format(srcdir), 'openxr', 'lib_openxr_fetch')

def openxrBuild(target, source, env):
	buildDir = target[0].get_dir().up()
	
	untarArchive(buildDir.abspath, source[ 0 ].abspath)
	#untarArchive(buildDir.Dir(srcdir).abspath,
	#	env.File('#extern/mingw/mingw_stdthreads.tar.bz2').abspath)
	
	script = createScriptHeader(env, deps=[parent_targets['lib_jsoncpp']])
	script.append('cd "{}" || exit 1'.format(buildDir.Dir(srcdir).abspath))
	
	for p in env['PATCHES']:
		script.append('patch -p1 <{} || exit 1'.format(p.srcnode().abspath))
	
	cmdline = ['cmake']
	cmdline.append('-DCMAKE_INSTALL_PREFIX="{}"'.format(buildDir.abspath))
	
	# this is required to force output into the lib-dir we want. otherwise on some platforms the library
	# is written to 'lib' directory, on others to 'lib64'. this makes it impossible to write an SConscript
	# that properly tracks this library. using --libdir we force the 'lib' directory name and all is fine
	cmdline.append('-DCMAKE_INSTALL_LIBDIR="{}"'.format(buildDir.Dir('lib').abspath))
	
	for x in env.Flatten(env['EXTERN_CMAKE_FLAGS']):
		cmdline.append(x)
	
	cmakeCFlags = env.Flatten(env['EXTERN_CMAKE_C_FLAGS'])
	if cmakeCFlags:
		cmdline.append('-DCMAKE_C_FLAGS="{}"'.format(' '.join(cmakeCFlags)))
	
	if env['OSWindows'] and not env['CROSSCOMPILE_CLANG']:
		cmdline.append('-DMINGW_STDTHREADS_GENERATE_STDHEADERS=ON')
	
	if env['with_debug']:
		#cmdline.append('-DCMAKE_BUILD_TYPE=Debug') # for some strange reason this fails to compile
		cmdline.append('-DCMAKE_BUILD_TYPE=Release')
	else:
		cmdline.append('-DCMAKE_BUILD_TYPE=Release')
	
	if env['platform_android'] != 'no':
		cmdline.append('-DANDROID_ABI="{}"'.format(env['ANDROID_ABI']))
		cmdline.append('-DANDROID_ARM_MODE="{}"'.format(env['ANDROID_ARCH']))
		cmdline.append('-DANDROID_PLATFORM=android-{}'.format(env['ANDROID_APILEVEL']))
		cmdline.append('-DANDROID_TOOLCHAIN=clang')
		cmdline.append('-DCMAKE_ASM_FLAGS="--target={}"'.format(env['ANDROID_COMPILER']))
		cmdline.append('-DCMAKE_TOOLCHAIN_FILE="{}"'.format(env['ANDROID_CMAKETOOLCHAIN']))
	elif 'CROSSCOMPILE_HOST' in env:
		cmdline.append('-DCMAKE_SYSTEM_NAME="{}"'.format(env['CROSSCOMPILE_HOST']))
	
	if env['OSWindows']:
		cmdline.append('-DCMAKE_TOOLCHAIN_FILE="{}"'.format(
			env.File('#extern/mingw/mingw-w64-x86_64.cmake').abspath))
	
	#cmdline.append('-DBUILD_ALL_EXTENSIONS=Yes')
	cmdline.append('-DBUILD_API_LAYERS=No')
	cmdline.append('-DBUILD_TESTS=No')
	cmdline.append('-DBUILD_WITH_STD_FILESYSTEM=No')
	cmdline.append('-DBUILD_WITH_WAYLAND_HEADERS=No')
	cmdline.append('-DBUILD_WITH_XCB_HEADERS=No')
	
	# cmdline.append('-DBUILD_WITH_SYSTEM_JSONCPP=Yes') # bugged
	cmdline.append('-DBUILD_WITH_SYSTEM_JSONCPP=No')
	
	cmdline.append('-DDYNAMIC_LOADER={}'.format('No' if buildStaticLinking else 'Yes'))
	
	cmdline.append('-Wno-dev')  # silence a warning not important for us
	
	cmdline.append('../{}'.format(srcdir))
	script.append('{} || exit 1'.format(' '.join(cmdline)))
	
	if env['platform_android'] != 'no':
		# fix bug in build system
		script.append('sed -i -e \'s@DESTINATION "/openxr"@DESTINATION "${{CMAKE_INSTALL_PREFIX}}/include/openxr"@\' "{}"'.format(
			 buildDir.Dir(srcdir).Dir("include").Dir("openxr").File("cmake_install.cmake").abspath))
	
	script.append('make -j {} install || exit 1'.format(env['with_threads']))
	
	if not env.RunExternalCommand(script):
		raise Exception('Failed building OpenXR')

patches = [] # create with 'diff -rupN original_sources patches_sources'
globFiles(envLibrary, 'patches/{}'.format(openxrVersion), '*.patch', patches, recursive=False)
envLibrary.Append(PATCHES = [envLibrary.File(x) for x in sorted(patches)])

if buildStaticLinking:
	targets = [staticFileName]
else:
	targets = [libFileName]

targets.extend([
	'include/openxr/openxr_platform_defines.h',
	'include/openxr/openxr_platform.h',
	'include/openxr/openxr_reflection.h',
	'include/openxr/openxr.h'])

library = envLibrary.Command(targets, nodeArtifacts, envLibrary.Action(openxrBuild, 'Build OpenXR'))

if parent_targets['lib_jsoncpp']['depends']:
	envLibrary.Depends(library, parent_targets['lib_jsoncpp']['depends'])

envLibrary.SideEffect('#notParallelCMake', library)

depends = parent_env.Alias('lib_openxr', library)

cpppath = [envLibrary.Dir('include')]
cpppath.extend(parent_targets['lib_jsoncpp']['cpppath'])

libpath.extend(parent_targets['lib_jsoncpp']['libpath'])

libs = []
runtimelibs = []

if buildStaticLinking:
	libs.append(library[0])
	libs.extend(parent_targets['lib_jsoncpp']['libs'])
else:
	libs.append(libLinkName)
	runtimelibs.append(library[0])

runtimelibs.extend(parent_targets['lib_jsoncpp']['runtimelibs'])

cppflags = []

parent_targets['lib_openxr'] = {
	'name' : 'Internal openxr library',
	'cpppath' : cpppath,
	'cppflags' : cppflags,
	'libpath' : libpath,
	'libs' : libs,
	'runtimelibs' : runtimelibs,
	'depends' : depends }
