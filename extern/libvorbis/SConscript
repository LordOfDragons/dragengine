import os
import sys
import SCons

from SConsCommon import *
from SConsExternCommon import *

Import( 'parent_env parent_targets parent_report' )

envLibrary = parent_env.Clone()

# switch
buildStaticLinking = True

# parameters
srcdir = 'libvorbis-1.3.5'

libLinkVersion = [ '2', '3', '0' ]
libLinkName = [ 'vorbisenc', 'vorbisfile', 'vorbis' ]

if envLibrary[ 'OSWindows' ]:
	libFileName = [ 'bin/lib{}-{}.dll'.format( libLinkName[ x ], libLinkVersion[ x ] )
		for x in range( len( libLinkName ) ) ]
	staticFileName = [ 'lib/lib{}.a'.format( libLinkName[ x ] )
		for x in range( len( libLinkName ) ) ]
else:
	libFileName = [ envLibrary.subst( 'lib/${{SHLIBPREFIX}}{}${{SHLIBSUFFIX}}.{}'.
		format( libLinkName[ x ], libLinkVersion[ x ] ) )
			for x in range( len( libLinkName ) ) ]
	staticFileName = [ envLibrary.subst( 'lib/${{LIBPREFIX}}{}${{LIBSUFFIX}}'.
		format( libLinkName[ x ] ) )
			for x in range( len( libLinkName ) ) ]

# check if system libvorbis is present
hasSystemVorbis = False
conf = envLibrary.Configure()
if envLibrary[ 'with_system_libvorbis' ] != TernaryVariableNo:
	hasSystemVorbis = conf.CheckLibWithHeader( libLinkName,
		'vorbis/vorbisfile.h', 'c++', 'ov_info(0, -1);' )
conf.Finish()

if not hasSystemVorbis and envLibrary[ 'with_system_libvorbis' ] == TernaryVariableYes:
	Exit( 'Requested to use system libvorbis but no usable libvorbis found.' )

libs = libLinkName[:]
libs.extend( parent_targets[ 'lib_libogg' ][ 'libs' ] )

parent_report[ 'use system libvorbis' ] = 'yes' if hasSystemVorbis else 'no'

if hasSystemVorbis:
	parent_targets[ 'lib_libvorbis' ] = {
		'name' : 'Internal libvorbis library',
		'cpppath' : [],
		'libpath' : [],
		'libs' : libs,
		'runtimelibs' : [],
		'depends' : [] }
	Return()

# build libvorbis
def libvorbisBuild( target, source, env ):
	buildDir = target[ 0 ].get_dir().up()
	
	untarArchive( buildDir.abspath, source[ 0 ].abspath )
	
	script = createScriptHeader( env, deps=[ parent_targets[ 'lib_libogg' ] ] )
	
	script.append( 'cd "{}" || exit 1'.format( buildDir.Dir( srcdir ).abspath ) )
	
	"""if env[ 'OSBeOS' ]:
		script.append( 'libtoolize --force --copy --install' )
		script.append( 'aclocal -I m4' )
		script.append( 'autoconf' )"""
	
	cmdline = [ './configure --prefix="{}"'.format( buildDir.abspath ) ]
	cmdline.append( '--enable-silent-rules' )
	if buildStaticLinking:
		cmdline.append( '--enable-shared=no' )
		cmdline.append( '--enable-static=yes' )
		cmdline.append( '--with-pic=yes' )
	else:
		cmdline.append( '--enable-shared=yes' )
		cmdline.append( '--enable-static=no' )
	
	if 'CROSSCOMPILE_HOST' in env:
		cmdline.append('--host={}'.format(env['CROSSCOMPILE_HOST']))
	
	script.append( '{} || exit 1'.format( ' '.join( cmdline ) ) )
	
	script.append( 'cd lib' )
	script.append( 'make -j {} install-libLTLIBRARIES || exit 1'.format(env['with_threads']) )
	
	script.append( 'cd ../include' )
	script.append( 'make -j {} install || exit 1'.format(env['with_threads']) )
	
	if not env.RunExternalCommand(script):
		raise Exception('Failed building libvorbis')

if buildStaticLinking:
	targets = staticFileName[:]
else:
	targets = libFileName[:]
targets.append( 'include/vorbis/vorbisenc.h' )
targets.append( 'include/vorbis/vorbisfile.h' )
targets.append( 'include/vorbis/codec.h' )
library = envLibrary.Command( targets, '{}.tar.bz2'.format( srcdir ),
	envLibrary.Action(libvorbisBuild, 'Build libvorbis' ) )

if parent_targets[ 'lib_libogg' ][ 'depends' ]:
	envLibrary.Depends( library, parent_targets[ 'lib_libogg' ][ 'depends' ] )

envLibrary.SideEffect('#notParallelCMake', library)

depends = parent_env.Alias( 'lib_libvorbis', library )

envLibrary.Clean( library, [ 'bin', 'include', 'lib', srcdir ] )

cpppath = [ envLibrary.Dir( 'include' ) ]
cpppath.extend( parent_targets[ 'lib_libogg' ][ 'cpppath' ] )

libpath = [ envLibrary.Dir( 'lib' ) ]
libpath.extend( parent_targets[ 'lib_libogg' ][ 'libpath' ] )

if buildStaticLinking:
	libs = library[ 0:3 ]
	libs.extend( parent_targets[ 'lib_libogg' ][ 'libs' ] )
	runtimelibs = []
else:
	runtimelibs = library[ 0:3 ]
runtimelibs.extend( parent_targets[ 'lib_libogg' ][ 'runtimelibs' ] )

parent_targets[ 'lib_libvorbis' ] = {
	'name' : 'Internal libvorbis library',
	'cpppath' : cpppath,
	'libpath' : libpath,
	'libs' : libs,
	'runtimelibs' : runtimelibs,
	'depends' : depends }
