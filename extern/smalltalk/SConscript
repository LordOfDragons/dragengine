import os
import sys
import SCons

from SConsCommon import *
from SConsExternCommon import *

Import( 'parent_env parent_targets parent_report' )

envLibrary = parent_env.Clone()

# switch
buildStaticLinking = True

# parameters
srcdir = 'smalltalk-3.2.5'

libLinkVersion = '7'
libLinkName = 'gst'

if envLibrary[ 'OSWindows' ]:
	libFileName = 'bin/lib{}-{}.dll'.format( libLinkName, libLinkVersion )
	staticFileName = 'lib/lib{}.a'.format( libLinkName )
else:
	libFileName = envLibrary.subst( 'lib/${{SHLIBPREFIX}}{}${{SHLIBSUFFIX}}.{}'.format( libLinkName, libLinkVersion ) )
	staticFileName = envLibrary.subst( 'lib/${{LIBPREFIX}}{}${{LIBSUFFIX}}'.format( libLinkName ) )

# check if system smalltalk is present
hasSystemSmalltalk = False
conf = envLibrary.Configure()
if envLibrary[ 'with_system_smalltalk' ] != TernaryVariableNo:
	hasSystemSmalltalk = conf.CheckLibWithHeader( libLinkName,
		'gstpub.h', 'c++', 'gst_set_var( GST_VERBOSITY, 1 );' )
conf.Finish()

if not hasSystemSmalltalk and envLibrary[ 'with_system_smalltalk' ] == TernaryVariableYes:
	Exit( 'Requested to use system Smalltalk but no usable Smalltalk found.' )

libs = [ libLinkName ]
libs.extend( parent_targets[ 'lib_libffi' ][ 'libs' ] )
libs.extend( parent_targets[ 'lib_libltdl' ][ 'libs' ] )
if envLibrary[ 'OSPosix' ]:
	libs.extend( parent_targets[ 'lib_libsigsegv' ][ 'libs' ] )

parent_report[ 'use system smalltalk' ] = 'yes' if hasSystemSmalltalk else 'no'

if hasSystemSmalltalk:
	parent_targets[ 'lib_smalltalk' ] = {
		'name' : 'Internal Smalltalk library',
		'cpppath' : [],
		'libpath' : [],
		'libs' : libs,
		'runtimelibs' : [],
		'depends' : [] }
	Return()

# build smalltalk
def smalltalkBuild( target, source, env ):
	buildDir = target[ 0 ].get_dir().up()
	
	untarArchive( buildDir.abspath, source[ 0 ].abspath )
	
	if env['UPDATE_GNU_CONFIG']:
		untarArchive(buildDir.Dir(srcdir).abspath, env['UPDATE_GNU_CONFIG'].abspath)
		untarArchive(buildDir.Dir(srcdir).Dir('build-aux').abspath, env['UPDATE_GNU_CONFIG'].abspath)
	
	cppflags = []
	if envLibrary[ 'OSWindows' ]:
		# smalltalk fails to react to WIN64 set
		cppflags.extend( [ '-DWIN32', '-D_WIN32' ] )
		# smalltalk re-implements socket functionaly but totally fucks up while
		# doing so. disable this huge scale mess altogether
		cppflags.append( '-DDISABLE_BROKEN_GETADDRINFO' )
	
	if env[ 'platform_android' ] != 'no':
		cppflags.append( '-DDE_ANDROID' )
	
	deps = [ parent_targets[ 'lib_libffi' ], parent_targets[ 'lib_libltdl' ] ]
	if env[ 'OSPosix' ]:
		deps.append( parent_targets[ 'lib_libsigsegv' ] )
	
	script = createScriptHeader( env, cppflags=cppflags, deps=deps )
	
	script.append( 'cd "{}" || exit 1'.format( buildDir.Dir( srcdir ).abspath ) )
	
	for p in env[ 'PATCHES' ]:
		script.append( 'patch -p1 <{} || exit 1'.format( p.srcnode().abspath ) )
	
	if envLibrary[ 'OSWindows' ]:
		# deal with annoying libtool fail to find ws2_32
		script.append( 'export lt_cv_deplibs_check_method=pass_all' )
	
	cmdline = [ './configure --prefix="{}"'.format( buildDir.abspath ) ]
	cmdline.append( '--enable-gtk=no' )
	cmdline.append( '--disable-glibtest' )
	cmdline.append( '--disable-gtktest' )
	cmdline.append( '--disable-rpath' )
	#cmdline.append( '--enable-jit' )
	cmdline.append( '--enable-relocatable' )
	cmdline.append( '--disable-dld' )
	cmdline.append( '--without-emacs' )
	cmdline.append( '--without-gmp' )
	cmdline.append( '--without-readline' )
	cmdline.append( '--without-x' )
	cmdline.append( '--with-system-libffi' )
	cmdline.append( '--with-system-libltdl' )
	if env[ 'OSPosix' ]:
		cmdline.append( '--with-system-libsigsegv' )
	
	if buildStaticLinking:
		cmdline.append( '--enable-shared=no' )
		cmdline.append( '--enable-static=yes' )
		cmdline.append( '--with-pic=yes' )
	else:
		cmdline.append( '--enable-shared=yes' )
		cmdline.append( '--enable-static=no' )
	
	if 'CROSSCOMPILE_HOST' in env:
		cmdline.append( '--host={}'.format( env[ 'CROSSCOMPILE_HOST' ] ) )
	
	script.append( '{} || exit 1'.format( ' '.join( cmdline ) ) )
	
	subdirs = [ 'snprintfv', 'sigsegv', 'lib-src', 'libgst' ]
	for subdir in subdirs:
		script.append( 'if [ -f {}/Makefile ]; then'.format( subdir ) )
		script.append( '  cd {} || exit 1'.format( subdir ) )
		script.append( '  make -j {} install || exit 1'.format(env['with_threads']) )
		script.append( '  cd ..' )
		script.append( 'fi' )
	
	#script.append( 'cd ..; make -j {} install-data-hook || exit 1'.format(env['with_threads']) ) # kernel image
	
	if not env.RunExternalCommand(script):
		raise Exception('Failed building smalltalk')

patches = [] # create with 'diff -rupN original_sources patches_sources'
globFiles( envLibrary, 'patches', '*.patch', patches, recursive=False )
if envLibrary['OSBeOS']:
	globFiles(envLibrary, 'patches_beos', '*.patch', patches, recursive=False)
envLibrary.Append( PATCHES = [ envLibrary.File( x ) for x in sorted( patches ) ] )

gnuConfigUpdate = None
if envLibrary['OSBeOS']:
	# beos needs updated config files for this build to work. they are found under:
	gnuConfigUpdate = envLibrary.File('#extern/shared/gnuconfig.tar.bz2')
envLibrary.Replace(UPDATE_GNU_CONFIG=gnuConfigUpdate)

if buildStaticLinking:
	targets = [ staticFileName ]
else:
	targets = [ libFileName ]
targets.extend( [ 'include/gst.h', 'include/gstpub.h' ] )
library = envLibrary.Command( targets, '{}.tar.bz2'.format( srcdir ),
	envLibrary.Action(smalltalkBuild, 'Build Smalltalk' ) )
envLibrary.Depends( library, envLibrary[ 'PATCHES' ] )
if gnuConfigUpdate:
	envLibrary.Depends(library, gnuConfigUpdate)
envLibrary.Depends( library, parent_targets[ 'lib_libffi' ][ 'depends' ] )
envLibrary.Depends( library, parent_targets[ 'lib_libltdl' ][ 'depends' ] )
if envLibrary[ 'OSPosix' ]:
	envLibrary.Depends( library, parent_targets[ 'lib_libsigsegv' ][ 'depends' ] )

#envLibrary.SideEffect('#notParallelCMake', library)

depends = parent_env.Alias( 'lib_smalltalk', library )

envLibrary.Clean( library, [ 'bin', 'include', 'lib', srcdir ] )

cpppath = [ envLibrary.Dir( 'include' ) ]
cpppath.extend( parent_targets[ 'lib_libffi' ][ 'cpppath' ] )
cpppath.extend( parent_targets[ 'lib_libltdl' ][ 'cpppath' ] )
if envLibrary[ 'OSPosix' ]:
	cpppath.extend( parent_targets[ 'lib_libsigsegv' ][ 'cpppath' ] )

libpath = [ envLibrary.Dir( 'lib' ) ]
libpath.extend( parent_targets[ 'lib_libffi' ][ 'libpath' ] )
libpath.extend( parent_targets[ 'lib_libltdl' ][ 'libpath' ] )
if envLibrary[ 'OSPosix' ]:
	libpath.extend( parent_targets[ 'lib_libsigsegv' ][ 'libpath' ] )

if buildStaticLinking:
	libs = [ library[ 0 ] ]
	libs.extend( parent_targets[ 'lib_libffi' ][ 'libs' ] )
	libs.extend( parent_targets[ 'lib_libltdl' ][ 'libs' ] )
	
	if envLibrary[ 'OSPosix' ]:
		libs.extend( parent_targets[ 'lib_libsigsegv' ][ 'libs' ] )
	
	if envLibrary['OSWindows']:
		libs.extend(['ws2_32'])
	elif envLibrary['OSBeOS']:
		libs.extend(['network'])
	elif envLibrary['OSMacOS']:
		pass
	elif envLibrary['OSPosix'] and envLibrary['platform_android'] == 'no':
		libs.extend(['rt'])
	runtimelibs = []
else:
	runtimelibs = [ library[ 0 ] ]
runtimelibs.extend( parent_targets[ 'lib_libffi' ][ 'runtimelibs' ] )
runtimelibs.extend( parent_targets[ 'lib_libltdl' ][ 'runtimelibs' ] )
if envLibrary[ 'OSPosix' ]:
	runtimelibs.extend( parent_targets[ 'lib_libsigsegv' ][ 'runtimelibs' ] )

parent_targets[ 'lib_smalltalk' ] = {
	'name' : 'Internal Smalltalk library',
	'cpppath' : cpppath,
	'libpath' : libpath,
	'libs' : libs,
	'runtimelibs' : runtimelibs,
	'depends' : depends }
