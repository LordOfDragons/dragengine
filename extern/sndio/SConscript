import os
import sys
import SCons

from SConsCommon import *
from SConsExternCommon import *

Import( 'parent_env parent_targets parent_report' )

envLibrary = parent_env.Clone()

# switch
buildStaticLinking = True

# parameters
srcdir = 'sndio-1.6.0'

libLinkVersion = '0'
libLinkName = 'ogg'

if envLibrary[ 'OSWindows' ]:
	libFileName = 'bin/lib{}-{}.dll'.format( libLinkName, libLinkVersion )
	staticFileName = 'lib/lib{}.a'.format( libLinkName )
else:
	libFileName = envLibrary.subst( 'lib/${{SHLIBPREFIX}}{}${{SHLIBSUFFIX}}.{}'.format( libLinkName, libLinkVersion ) )
	staticFileName = envLibrary.subst( 'lib/${{LIBPREFIX}}{}${{LIBSUFFIX}}'.format( libLinkName ) )

# check if system sndio is present
hasSystemOGG = False
conf = envLibrary.Configure()
if envLibrary[ 'with_system_sndio' ] != TernaryVariableNo:
	hasSystemOGG = conf.CheckLibWithHeader( libLinkName, 'sndio.h', 'c++', 'sio_initpar(0);' )
conf.Finish()

if not hasSystemOGG and envLibrary[ 'with_system_sndio' ] == TernaryVariableYes:
	Exit( 'Requested to use system sndio but no usable sndio found.' )

libs = [ libLinkName ]

parent_report[ 'use system sndio' ] = 'yes' if hasSystemOGG else 'no'

if hasSystemOGG:
	parent_targets[ 'lib_sndio' ] = {
		'name' : 'Internal sndio library',
		'cpppath' : [],
		'libpath' : [],
		'libs' : libs,
		'runtimelibs' : [],
		'depends' : [] }
	Return()

# build sndio
def sndioBuild( target, source, env ):
	buildDir = target[ 0 ].get_dir().up()
	
	untarArchive( buildDir.abspath, source[ 0 ].abspath )
	
	script = createScriptHeader( env )
	
	script.append( 'cd "{}" || exit 1'.format( buildDir.Dir( srcdir ).abspath ) )
	
	cmdline = [ './configure --prefix="{}"'.format( buildDir.abspath ) ]
	
	if 'CROSSCOMPILE_HOST' in env:
		cmdline.append('--host={}'.format(env['CROSSCOMPILE_HOST']))
	
	script.append( '{} || exit 1'.format( ' '.join( cmdline ) ) )
	
	script.append( 'make -j {} install || exit 1'.format(env['with_threads']) )
	
	if not env.RunExternalCommand(script):
		raise Exception('Failed building sndio')

if buildStaticLinking:
	targets = [ staticFileName ]
else:
	targets = [ libFileName ]
targets.extend(['include/sndio.h'])
library = envLibrary.Command( targets, '{}.tar.bz2'.format( srcdir ),
	envLibrary.Action(sndioBuild, 'Build sndio' ) )

#envLibrary.SideEffect('#notParallelCMake', library)

depends = parent_env.Alias( 'lib_sndio', library )

envLibrary.Clean( library, [ 'bin', 'include', 'lib', srcdir ] )

if buildStaticLinking:
	libs = [ library[ 0 ] ]
	runtimelibs = []
else:
	runtimelibs = [ library[ 0 ] ]

parent_targets[ 'lib_sndio' ] = {
	'name' : 'Internal sndio library',
	'cpppath' : [ envLibrary.Dir( 'include' ) ],
	'libpath' : [ envLibrary.Dir( 'lib' ) ],
	'libs' : libs,
	'runtimelibs' : runtimelibs,
	'depends' : depends }
