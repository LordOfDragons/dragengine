import os
import sys
import SCons

from SConsCommon import *
from SConsExternCommon import *

Import('parent_env parent_targets parent_report')

envLibrary = parent_env.Clone()

# switch
buildStaticLinking = True

# parameters
srcdir = 'libwebp-1.2.1'

libLinkVersion = '7' # 7.1.2
libLinkName = 'webp'

if envLibrary['OSWindows']:
	libFileName = 'bin/lib{}-{}.dll'.format(libLinkName, libLinkVersion)
	staticFileName = 'lib/lib{}.a'.format(libLinkName)
else:
	libFileName = envLibrary.subst('lib/${{SHLIBPREFIX}}{}${{SHLIBSUFFIX}}.{}'.format(libLinkName, libLinkVersion))
	staticFileName = envLibrary.subst('lib/${{LIBPREFIX}}{}${{LIBSUFFIX}}'.format(libLinkName))

# check if system libwebp is present
hasSystemwebp = False
conf = envLibrary.Configure()
if envLibrary['with_system_libwebp'] != TernaryVariableNo:
	hasSystemwebp = conf.CheckLibWithHeader(libLinkName,
		'webp/decode.h', 'c++', 'WebPGetDecoderVersion();')
conf.Finish()

if not hasSystemwebp and envLibrary['with_system_libwebp'] == TernaryVariableYes:
	Exit('Requested to use system libwebp but no usable libwebp found.')

libs = [libLinkName]

parent_report['use system libwebp'] = 'yes' if hasSystemwebp else 'no'

if hasSystemwebp:
	parent_targets['lib_libwebp'] = {
		'name' : 'Internal libwebp library',
		'cpppath' : [],
		'libpath' : [],
		'libs' : libs,
		'runtimelibs' : [],
		'depends' : [] }
	Return()

# build libwebp
def libwebpBuild(target, source, env):
	buildDir = target[0].get_dir().up()
	
	untarArchive(buildDir.abspath, source[0].abspath)
	
	script = createScriptHeader(env)
	
	script.append('cd "{}" || exit 1'.format(buildDir.Dir(srcdir).abspath))
	
	cmdline = ['./configure --prefix="{}"'.format(buildDir.abspath)]
	cmdline.append('--enable-silent-rules')
	cmdline.append('--disable-libwebpmux')
	cmdline.append('--disable-libwebpdemux')
	cmdline.append('--disable-libwebpdecoder')
	cmdline.append('--disable-libwebpextras')
	cmdline.append('--disable-png')
	cmdline.append('--disable-jpeg')
	cmdline.append('--disable-tiff')
	cmdline.append('--disable-gif')
	cmdline.append('--disable-wic')
	if buildStaticLinking:
		cmdline.append('--enable-shared=no')
		cmdline.append('--enable-static=yes')
		cmdline.append('--with-pic=yes')
	else:
		cmdline.append('--enable-shared=yes')
		cmdline.append('--enable-static=no')
	
	if 'CROSSCOMPILE_HOST' in env:
		cmdline.append('--host={}'.format(env['CROSSCOMPILE_HOST']))
	
	script.append('{} || exit 1'.format(' '.join(cmdline)))
	
	script.append('make -j {} install || exit 1'.format(env['with_threads']))
	
	if not env.RunExternalCommand(script):
		raise Exception('Failed building libwebp')

if buildStaticLinking:
	targets = [staticFileName]
else:
	targets = [libFileName]
targets.append('include/webp/decode.h')
targets.append('include/webp/encode.h')
targets.append('include/webp/types.h')
library = envLibrary.Command(targets, '{}.tar.bz2'.format(srcdir),
	envLibrary.Action(libwebpBuild, 'Build libwebp'))

depends = parent_env.Alias('lib_libwebp', library)

envLibrary.Clean(library, ['bin', 'include', 'lib', 'share', srcdir])

cpppath = [envLibrary.Dir('include')]
cpppath.extend(parent_targets['lib_libogg']['cpppath'])

libpath = [envLibrary.Dir('lib')]
libpath.extend(parent_targets['lib_libogg']['libpath'])

if buildStaticLinking:
	libs = library[0]
	runtimelibs = []
else:
	runtimelibs = library[0]

parent_targets['lib_libwebp'] = {
	'name' : 'Internal libwebp library',
	'cpppath' : cpppath,
	'libpath' : libpath,
	'libs' : libs,
	'runtimelibs' : runtimelibs,
	'depends' : depends }
