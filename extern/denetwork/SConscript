import os
import SCons

from SConsCommon import *
from SConsExternCommon import *

Import('parent_env parent_targets parent_report')

envLibrary = parent_env.Clone()

srcVersion = 'nightly'
if envLibrary['platform_android'] != 'no':
	sysarch = 'android-{}'.format(envLibrary['platform_android'])
else:
	sysarch = 'unix-x64'
srcdir = 'denetworkcpp-{}-{}'.format(sysarch, srcVersion)

libLinkName = 'denetwork'

libFileName = envLibrary.subst('{}/lib/${{LIBPREFIX}}{}${{LIBSUFFIX}}'.format(srcdir, libLinkName))

baseUrl = 'https://github.com/LordOfDragons/denetwork/releases/download'

nodeArtifacts = envLibrary.DownloadArtifactHelper('{}.tar.bz2'.format(srcdir),
	srcVersion, 'lib_denetwork_fetch', baseUrl=baseUrl)

if 'with_denetwork_inc' in envLibrary and envLibrary['with_denetwork_inc']:
	envLibrary.Append(CPPPATH = [envLibrary['with_denetwork_inc']])

if 'with_denetwork_lib' in envLibrary and envLibrary['with_denetwork_lib']:
	envLibrary.Append(LIBPATH = [envLibrary['with_denetwork_lib']])

hasSystemLib = False
conf = envLibrary.Configure()
hasSystemLib = conf.CheckLibWithHeader(libLinkName, 'denetwork/denProtocolEnums.h', 'c++')
conf.Finish()

targets = [libFileName]
library = []
cpppath = []
libpath = []

if hasSystemLib:
	if 'with_denetwork_inc' in envLibrary and envLibrary['with_denetwork_inc']:
		cpppath.append(envLibrary['with_denetwork_inc'])
	if 'with_denetwork_lib' in envLibrary and envLibrary['with_denetwork_lib']:
		libpath.append(envLibrary['with_denetwork_lib'])
	library.append(libLinkName)
else:
	def denetworkUnpack(target, source, env):
		untarArchive(target[0].get_dir().up().up().abspath, source[0].abspath)

	with open(envLibrary.File('header_file_list/denetwork').srcnode().abspath, 'r') as f:
		for x in f.readlines():
			x = x[:-1]
			x = x.replace('{version}', srcVersion)
			x = x.replace('{sysarch}', sysarch)
			targets.append(x)

	library = envLibrary.Command(targets, nodeArtifacts,
		envLibrary.Action(denetworkUnpack, 'Unpack DENetwork'))[0:1]

	envLibrary.Clean(library, [srcdir])

	cpppath.append(envLibrary.Dir(os.path.join(srcdir, 'include')))
	libpath.append(envLibrary.Dir(os.path.join(srcdir, 'lib')))

parent_targets['lib_denetwork'] = {
	'name' : 'Internal DENetwork library',
	'cpppath' : cpppath,
	'libpath' : libpath,
	'libs' : library,
	'runtimelibs' : [],
	'runtimedata' : [],
	'depends' : parent_env.Alias('lib_denetwork', library)}
