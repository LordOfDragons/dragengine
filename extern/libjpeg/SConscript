import os
import sys
import SCons

from SConsCommon import *
from SConsExternCommon import *

Import('parent_env parent_targets parent_report')

envLibrary = parent_env.Clone()

# switch
buildStaticLinking = True

# parameters
srcdir = 'libjpeg-turbo-2.0.3'

libLinkVersion = '62'
libLinkName = 'jpeg'

if envLibrary['OSWindows']:
	libFileName = 'bin/lib{}-{}.dll'.format(libLinkName, libLinkVersion)
	staticFileName = 'lib/lib{}.a'.format(libLinkName)
	
	# libjpeg reacts badly to these
	if '-Wl,--nxcompat' in envLibrary['CROSSCOMPILE_LINKFLAGS']:
		envLibrary['CROSSCOMPILE_LINKFLAGS'].remove('-Wl,--nxcompat')
	
	if '-Wl,--dynamicbase' in envLibrary['CROSSCOMPILE_LINKFLAGS']:
		envLibrary['CROSSCOMPILE_LINKFLAGS'].remove('-Wl,--dynamicbase')
	
else:
	libFileName = envLibrary.subst('lib/${{SHLIBPREFIX}}{}${{SHLIBSUFFIX}}.{}'.format(libLinkName, libLinkVersion))
	staticFileName = envLibrary.subst('lib/${{LIBPREFIX}}{}${{LIBSUFFIX}}'.format(libLinkName))

# check if system libjpeg is present.
# NOTE some OS have compilers causing errors on the check below because "true" is used.
#      the error looks like "cannot convert bool to boolean". to prevent this "TRUE" is
#      used instead
hasSystemJPEG = False
conf = envLibrary.Configure()
if envLibrary['with_system_libjpeg'] != TernaryVariableNo:
	hasSystemJPEG = conf.CheckLibWithHeader(libLinkName,
		['stdio.h', 'stdlib.h', 'jpeglib.h'], 'c++',
		'jpeg_read_header(NULL, TRUE);')
conf.Finish()

if not hasSystemJPEG and envLibrary['with_system_libjpeg'] == TernaryVariableYes:
	Exit('Requested to use system libjpeg but no usable libjpeg found.')

libs = [libLinkName]

parent_report['use system libjpeg'] = 'yes' if hasSystemJPEG else 'no'

if hasSystemJPEG:
	parent_targets['lib_libjpeg'] = {
		'name' : 'Internal JPEG library',
		'cpppath' : [],
		'libpath' : [],
		'libs' : libs,
		'runtimelibs' : [],
		'depends' : []}
	Return()

# build jpeg
def jpegBuild(target, source, env):
	buildDir = target[0].get_dir().up()
	untarArchive(buildDir.abspath, source[0].abspath)
	
	cmakeBuildDir = buildDir.Dir('build').abspath
	if not os.path.isdir(cmakeBuildDir):
		os.mkdir(cmakeBuildDir)
	
	cppflags = []
	if env['platform_android'] != 'no' and int(env['apilevel']) < 21:
		cppflags.extend(['-DSIZE_MAX=4294967295U'])  # defined in stdint.h but android somehow messes this up
	
	script = createScriptHeader(env, cppflags=cppflags)
	
	script.append('cd "{}" || exit 1'.format(cmakeBuildDir))
	
	if env['platform_android'] != 'no':
		# fix for android ndk 27+ breaking cmake
		script.append('sed -i -e "s/cmake_minimum_required(VERSION 2.8.12)/cmake_minimum_required(VERSION 3.5)/" ../libjpeg-turbo-2.0.3/CMakeLists.txt')
	
	cmdline = []
	cmdline.append('cmake')
	cmdline.append('-G"Unix Makefiles"')
	cmdline.append('-DENABLE_SHARED=Off')
	cmdline.append('-DENABLE_STATIC=On')
	cmdline.append('-DWITH_TURBOJPEG=Off')
	
	if env['OSWindows']:
		# libjpeg fails if system name is not this value
		cmdline.append('-DCMAKE_SYSTEM_NAME=Windows')
		cmdline.append('-DCMAKE_SYSTEM_PROCESSOR=AMD64')
	elif env['platform_android'] != 'no':
		cmdline.append('-DANDROID_ABI="{}"'.format(env['ANDROID_ABI']))
		cmdline.append('-DANDROID_ARM_MODE="{}"'.format(env['ANDROID_ARCH']))
		cmdline.append('-DANDROID_PLATFORM=android-{}'.format(env['ANDROID_APILEVEL']))
		cmdline.append('-DANDROID_TOOLCHAIN=clang')
		cmdline.append('-DCMAKE_ASM_FLAGS="--target={}"'.format(env['ANDROID_COMPILER']))
		cmdline.append('-DCMAKE_C_FLAGS="-Wall"')
		cmdline.append('-DCMAKE_TOOLCHAIN_FILE="{}"'.format(env['ANDROID_CMAKETOOLCHAIN']))
		cmdline.append('-DWITH_JAVA=0')
		cmdline.append('-DREQUIRE_SIMD=1')
		cmdline.append('-DWITH_SIMD=1')
	elif 'CROSSCOMPILE_HOST' in env:
		cmdline.append('-DCMAKE_SYSTEM_NAME="{}"'.format(env['CROSSCOMPILE_HOST']))
		cmdline.append('-DCMAKE_SYSTEM_PROCESSOR=AMD64')
	
	#cmdline.append('-DWITH_SIMD=0')
	if env['OSBeOS']:
		pass
		#cmdline.append('-DWITH_SIMD=0') # otherwise fails to compile on 64-bit
	
	if env['with_debug']:
		cmdline.append('-DCMAKE_BUILD_TYPE=Debug')
		cmdline.append('-DCMAKE_POSITION_INDEPENDENT_CODE=True')
	else:
		cmdline.append('-DCMAKE_BUILD_TYPE=Release')
	
	cmdline.append('-DCMAKE_INSTALL_PREFIX="{}"'.format(buildDir.abspath))
	
	# this is required otherwise depending on the platform the install
	# directory is sometimes 'lib' and sometimes 'lib64' causing problems
	cmdline.append('-DCMAKE_INSTALL_LIBDIR="{}"'.format(buildDir.Dir('lib').abspath))
	
	cmdline.append('"{}"'.format(buildDir.Dir(srcdir).abspath))
	script.append('{} || exit 1'.format(' '.join(cmdline)))
	
	script.append('make -j {} install || exit 1'.format(env['with_threads']))
	
	if not env.RunExternalCommand(script):
		raise Exception('Failed building libjpeg')

if buildStaticLinking:
	targets = [staticFileName]
else:
	targets = [libFileName]
targets.extend(['include/jconfig.h', 'include/jerror.h', 'include/jmorecfg.h', 'include/jpeglib.h'])

library = envLibrary.Command(targets, '{}.tar.bz2'.format(srcdir),
	envLibrary.Action(jpegBuild, 'Build JPEG library'))

envLibrary.SideEffect('#notParallelCMake', library)

depends = parent_env.Alias('lib_libjpeg', library)

envLibrary.Clean(library, ['bin', 'include', 'lib', 'build', srcdir])

if buildStaticLinking:
	libs = [library[0]]
	runtimelibs = []
else:
	runtimelibs = [library[0]]

parent_targets['lib_libjpeg'] = {
	'name' : 'Internal JPEG library',
	'cpppath' : [envLibrary.Dir('include')],
	'libpath' : [envLibrary.Dir('lib')],
	'libs' : libs,
	'runtimelibs' : runtimelibs,
	'depends' : depends}
