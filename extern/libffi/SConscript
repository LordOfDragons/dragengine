import os
import sys
import SCons

from SConsCommon import *
from SConsExternCommon import *

Import( 'parent_env parent_targets parent_report' )

envLibrary = parent_env.Clone()

# switch
buildStaticLinking = True

# parameters
srcdir = 'libffi-3.3-rc0'

libLinkVersion = '6'
libLinkName = 'ffi'
libDirPath = 'lib'

if envLibrary['OSBeOS']:
	libDirPath = 'lib'

if envLibrary[ 'OSWindows' ]:
	libFileName = 'bin/lib{}-{}.dll'.format( libLinkName, libLinkVersion )
	staticFileName = 'lib/lib{}.a'.format( libLinkName )
else:
	libFileName = envLibrary.subst( '{}/${{SHLIBPREFIX}}{}${{SHLIBSUFFIX}}.{}'.format( libDirPath, libLinkName, libLinkVersion ) )
	staticFileName = envLibrary.subst( '{}/${{LIBPREFIX}}{}${{LIBSUFFIX}}'.format( libDirPath, libLinkName ) )

# check if system libffi is present
hasSystemFFI = False
cpppath = []

conf = envLibrary.Configure()
if envLibrary[ 'with_system_libffi' ] != TernaryVariableNo:
	hasSystemFFI = conf.CheckLibWithHeader( libLinkName, 'ffi.h', 'c++' )
	
	# the makefile of libffi is broken and if not fixed the headers are installed
	# in the wrong place. check also these wrong places
	if not hasSystemFFI:
		places = []
		places.append( '/usr/lib/libffi-3.3-rc0/include' )
		places.append( '/usr/local/lib/libffi-3.3-rc0/include' )
		places.append( '/usr/lib/libffi-3.2.1/include' )
		places.append( '/usr/local/lib/libffi-3.2.1/include' )
		
		for p in places:
			envLibrary.Append( CPPPATH = [ p ] )
			hasSystemFFI = conf.CheckLibWithHeader( libLinkName, 'ffi.h', 'c++' )
			if 'CPPPATH' in parent_env:
				envLibrary.Replace( CPPPATH = parent_env[ 'CPPPATH' ] )
			if hasSystemFFI:
				cpppath.append( p )
				break

conf.Finish()

if not hasSystemFFI and envLibrary[ 'with_system_libffi' ] == TernaryVariableYes:
	Exit( 'Requested to use system libffi but no usable libffi found.' )

libs = [ libLinkName ]

parent_report[ 'use system libffi' ] = 'yes' if hasSystemFFI else 'no'

if hasSystemFFI:
	parent_targets[ 'lib_libffi' ] = {
		'name' : 'Internal libffi library',
		'cpppath' : cpppath,
		'libpath' : [],
		'libs' : libs,
		'runtimelibs' : [],
		'depends' : [] }
	Return()

# build libffi
def libffiBuild( target, source, env ):
	buildDir = target[ 0 ].get_dir().up()
	
	untarArchive( buildDir.abspath, source[ 0 ].abspath )
	
	script = createScriptHeader( env )
	
	script.append( 'cd "{}" || exit 1'.format( buildDir.Dir( srcdir ).abspath ) )
	
	for p in env[ 'PATCHES' ]:
		script.append( 'patch -p1 <{} || exit 1'.format( p.srcnode().abspath ) )
	
	cmdline = [ './configure --prefix="{}"'.format( buildDir.abspath ) ]
	
	# this is required to force output into the lib-dir we want. otherwise on some platforms the library
	# is written to 'lib' directory, on others to 'lib64'. this makes it impossible to write an SConscript
	# that properly tracks this library. using --libdir we force the 'lib' directory name and all is fine
	cmdline.append('--libdir="{}"'.format(buildDir.Dir('lib').abspath))
	
	cmdline.append( '--enable-silent-rules' )
	if buildStaticLinking:
		cmdline.append( '--enable-shared=no' )
		cmdline.append( '--enable-static=yes' )
		cmdline.append( '--with-pic=yes' )
	else:
		cmdline.append( '--enable-shared=yes' )
		cmdline.append( '--enable-static=no' )
	
	if 'CROSSCOMPILE_HOST' in env:
		cmdline.append('--host={}'.format(env['CROSSCOMPILE_HOST']))
	
	script.append( '{} || exit 1'.format( ' '.join( cmdline ) ) )
	
	script.append( 'make -j {} install || exit 1'.format(env['with_threads']) )
	
	if env['OSPosix']:
		# some distro even manage to mess up this fix from above. one final strike at it
		script.append('cd "{}"'.format(buildDir.Dir('lib').abspath))
		script.append('if [ ! -f lib{}.a ]; then'.format(libLinkName))
		script.append('   cp ../lib64/lib{}.a .'.format(libLinkName))
		script.append('   cp ../lib64/lib{}.la .'.format(libLinkName))
		script.append('fi')
	
	if not env.RunExternalCommand(script):
		raise Exception('Failed building libffi')

patches = [] # create with 'diff -rupN original_sources patches_sources'
globFiles( envLibrary, 'patches', '*.patch', patches, recursive=False )
envLibrary.Append( PATCHES = [ envLibrary.File( x ) for x in sorted( patches ) ] )

if buildStaticLinking:
	targets = [ staticFileName ]
else:
	targets = [ libFileName ]
targets.extend( [ 'include/ffi.h', 'include/ffitarget.h' ] )
library = envLibrary.Command( targets, '{}.tar.bz2'.format( srcdir ),
	envLibrary.Action(libffiBuild, 'Build libffi' ) )
envLibrary.Depends( library, envLibrary[ 'PATCHES' ] )

#envLibrary.SideEffect('#notParallelCMake', library)

depends = parent_env.Alias( 'lib_libffi', library )

envLibrary.Clean( library, [ 'bin', 'include', libDirPath, srcdir ] )

if buildStaticLinking:
	libs = [ library[ 0 ] ]
	runtimelibs = []
else:
	runtimelibs = [ library[ 0 ] ]

parent_targets[ 'lib_libffi' ] = {
	'name' : 'Internal libffi library',
	'cpppath' : [ envLibrary.Dir( 'include' ) ],
	'libpath' : [ envLibrary.Dir( libDirPath ) ],
	'libs' : libs,
	'runtimelibs' : runtimelibs,
	'depends' : depends }
