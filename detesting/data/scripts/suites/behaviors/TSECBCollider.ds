/* 
 * Drag[en]gine Testing
 *
 * Copyright (C) 2022, Roland Pl√ºss (roland@rptd.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

namespace DETesting

pin Dragengine.Gui
pin Dragengine.Scenery
pin Dragengine.Preloading
pin Dragengine.TestSystem


/**
 * Test Suite for ECBehaviorCollider.
 */
class TSECBCollider extends TestSuite
	static fixed public var CollisionFilter collisionFilter = CollisionFilter.new(\
		LayerMask.newWith(BaseGameApp.CollisionFilterBit.geometry),\
		LayerMask.newWith(BaseGameApp.CollisionFilterBit.dynamic,\
			BaseGameApp.CollisionFilterBit.actor,\
			BaseGameApp.CollisionFilterBit.actorAI,\
			BaseGameApp.CollisionFilterBit.particle))
	
	/** Bare behavior without any resources set. */
	class Empty extends TestCaseECBehavior
		public func new() super("empty", UnicodeString.newFromUTF8("Empty"))
		end
		
		private var ECBehaviorCollider behavior
		
		protected func void addBehaviors()
			var BehaviorElementClass ec = getElementClass()
			behavior = ECBehaviorCollider.new(ec, null)
			assertEquals(ECBehaviorCollider.getBehaviorIn(ec), behavior)
		end
		
		protected func bool testBehaviors(TestSuite testSuite)
			assertEquals(behavior.getID(), "")
			assertNotNull(behavior.getCollider())
			assertNull(behavior.getComponent())
			
			assertEnumProperty(behavior.getCollider().getPhysicsType(), CollisionResponse.none, CollisionResponse.all())
			assertNull(behavior.getCollider().getLocalGravity().getVector())
			assertFloatProperty(behavior.getCollider().getWeight(), 1, 0)
			assertTrue(behavior.getCollider().getEnabled().getValue())
			assertTrue(behavior.getCollider().getShape().getShapeList().empty())
			assertNull(behavior.getCollider().getRig().getPath())
			assertEquals(behavior.getCollider().getCollisionFilter(), TSECBCollider.collisionFilter)
			
			assertHasProperty("collider.physicsType")
			assertHasProperty("collider.localGravity")
			assertHasProperty("collider.weight")
			assertHasProperty("collider.enabled")
			assertHasProperty("collider.shape")
			assertHasProperty("collider.rig")
			
			var BehaviorElement e = getElement()
			var ECBehaviorCollider.Instance collider = behavior.instance(e)
			assertNotNull(collider)
			assertEquals(collider.getECBehavior(), behavior)
			
			var ColliderVolume c = collider.getCollider() cast ColliderVolume
			assertNotNull(c)
			
			assertEquals(ECBehaviorCollider.getInstanceIn(e), collider)
			
			return false
		end
	end
	
	/** Collider with rig set. */
	class Basic extends TestCaseECBehavior
		public func new() super("basic", UnicodeString.newFromUTF8("Basic"))
		end
		
		private var ECBehaviorCollider behavior
		
		protected func void addBehaviors()
			behavior = ECBehaviorCollider.new(getElementClass(), null)
			
			var ECComposeCollider cc = behavior.getCollider()
			cc.getRig().setPath("/content/model/box/box.derig")
		end
		
		protected func void setStubProperties()
			var StubElement s = getStubElement()
			s.setPosition(DVector.new(2, 1, 3))
			s.setRotation(Vector.new(20, 10, 30))
		end
		
		protected func bool testBehaviors(TestSuite testSuite)
			var ECBehaviorCollider.Instance collider = behavior.instance(getElement())
			var ColliderRig c = collider.getCollider() cast ColliderRig
			assertNotNull(c)
			assertNotNull(c.getRig())
			assertEquals(c.getCollisionFilter(), TSECBCollider.collisionFilter)
			assertDVector(c.getPosition(), DVector.new(2, 1, 3))
			assertQuaternion(c.getOrientation(), Quaternion.newFromEuler(20, 10, 30))
			assertEquals(c.getResponseType(), CollisionResponse.none)
			assertFalse(c.getUseLocalGravity())
			assertEquals(c.getMass(), 1)
			assertTrue(c.getEnabled())
			assertEquals(c.getCollisionFilter(), TSECBCollider.collisionFilter)
			
			return false
		end
	end
	
	/** Ghost collider. */
	class Ghost extends TestCaseECBehavior
		public func new() super("ghost", UnicodeString.newFromUTF8("Ghost"))
		end
		
		private var ECBehaviorCollider behavior
		
		protected func void addBehaviors()
			behavior = ECBehaviorCollider.new(getElementClass(), null)
			
			var ECComposeCollider cc = behavior.getCollider()
			cc.getRig().setPath("/content/model/box/box.derig")
			
			cc.getPhysicsType().setEnumeration(CollisionResponse.dynamic)
			cc.getLocalGravity().setVector(null)
			cc.getWeight().setValue(8)
			cc.setCollisionFilter(CollisionFilter.new(LayerMask.newWith(10)))
			
			behavior.setGhost()
			
			assertEquals(cc.getPhysicsType().getEnumeration(), CollisionResponse.kinematic)
			assertEquals(cc.getLocalGravity().getVector(), Vector.new())
			assertEquals(cc.getWeight().getValue(), 1)
			assertEquals(cc.getCollisionFilter(), CollisionFilter.new())
		end
		
		protected func bool testBehaviors(TestSuite testSuite)
			var ECBehaviorCollider.Instance collider = behavior.instance(getElement())
			var ColliderRig c = collider.getCollider() cast ColliderRig
			assertNotNull(c)
			assertNotNull(c.getRig())
			assertEquals(c.getCollisionFilter(), CollisionFilter.new())
			assertEquals(c.getResponseType(), CollisionResponse.kinematic)
			assertTrue(c.getUseLocalGravity())
			assertEquals(c.getGravity(), Vector.new())
			assertEquals(c.getMass(), 1)
			assertEquals(c.getCollisionFilter(), CollisionFilter.new())
			return false
		end
	end
		
	/** UseComponent collider. */
	class UseComponent extends TestCaseECBehavior
		public func new() super("useComponent", UnicodeString.newFromUTF8("UseComponent"))
		end
		
		private var ECBehaviorComponent behaviorComponent
		private var ECBehaviorCollider behavior
		
		protected func void addBehaviors()
			behaviorComponent = ECBehaviorComponent.new(getElementClass(), null)
			behaviorComponent.setCommonPath("/content/model/box", "box.demodel", "box.deskin", "box.derig")
			
			behavior = ECBehaviorCollider.new(getElementClass(), behaviorComponent)
			assertEquals(behavior.getComponent(), behaviorComponent)
		end
		
		protected func void setStubProperties()
			var StubElement s = getStubElement()
			s.setPosition(DVector.new(2, 1, 3))
			s.setRotation(Vector.new(20, 10, 30))
		end
		
		protected func bool testBehaviors(TestSuite testSuite)
			getGameWorld().update(0.01) // required to make physics update attachments
			
			var ECBehaviorComponent.Instance component = behaviorComponent.instance(getElement())
			var ECBehaviorCollider.Instance collider = behavior.instance(getElement())
			
			var ColliderComponent c = collider.getCollider() cast ColliderComponent
			var Component comp = component.getComponent()
			
			assertNotNull(c)
			assertEquals(c.getComponent(), comp)
			assertEquals(c.getCollisionFilter(), TSECBCollider.collisionFilter)
			assertDVector(c.getPosition(), DVector.new(2, 1, 3))
			assertDVector(comp.getPosition(), DVector.new(2, 1, 3))
			assertQuaternion(c.getOrientation(), Quaternion.newFromEuler(20, 10, 30))
			assertQuaternion(comp.getOrientation(), Quaternion.newFromEuler(20, 10, 30))
			assertEquals(c.getResponseType(), CollisionResponse.none)
			assertFalse(c.getUseLocalGravity())
			assertEquals(c.getMass(), 1)
			assertTrue(c.getEnabled())
			assertEquals(c.getCollisionFilter(), TSECBCollider.collisionFilter)
			
			assertEquals(collider.getRigShapeProperty(-1, 0), "rigShape1Property")
			// TODO test for bone shapes. needs a rig with bones
			// NOTE test using CollisionInfo can not be done here since this is native only
			
			return false
		end
	end

	
	/** Create test suite. */
	public func new() super("ecbehaviorCollider", UnicodeString.newFromUTF8("ECBehaviorCollider"))
		addTestCase(Empty.new())
		addTestCase(Basic.new())
		addTestCase(Ghost.new())
		addTestCase(UseComponent.new())
	end
end
