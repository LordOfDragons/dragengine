/* 
 * Drag[en]gine Testing
 *
 * Copyright (C) 2020, Roland Pl√ºss (roland@rptd.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

namespace DETesting

pin Dragengine.Gui
pin Dragengine.Scenery
pin Dragengine.Preloading
pin Dragengine.TestSystem


/**
 * Test Suite for ECBehaviorEnvMapProbe.
 */
class TSECBEnvMapProbe extends TestSuite
	/** Bare behavior without any resources set. */
	class Empty extends TestCaseECBehavior
		public func new() super("empty", UnicodeString.newFromUTF8("Empty"))
		end
		
		private var ECBehaviorEnvMapProbe behavior
		
		protected func void addBehaviors()
			var BehaviorElementClass ec = getElementClass()
			behavior = ECBehaviorEnvMapProbe.new(ec, null)
			assertEquals(ECBehaviorEnvMapProbe.getBehaviorIn(ec), behavior)
			assertEquals(ECBehaviorEnvMapProbe.getBehaviorIn(ec, ""), behavior)
			assertEquals(ECBehaviorEnvMapProbe.getAllBehaviorsIn(ec), Array.newWith(behavior))
		end
		
		protected func bool testBehaviors(TestSuite testSuite)
			assertEquals(behavior.getID(), "")
			assertNotNull(behavior.getEnvMapProbe())
			assertNull(behavior.getCollider())
			
			assertEquals(behavior.getEnvMapProbe().getPrefix(), "envMapProbe.")
			
			assertTrue(behavior.getEnvMapProbe().getInfluenceArea().getShapeList().empty())
			assertFloatProperty(behavior.getEnvMapProbe().getInfluenceBorderSize(), 0.1, 0)
			assertIntegerProperty(behavior.getEnvMapProbe().getInfluencePriority(), 0)
			assertTrue(behavior.getEnvMapProbe().getReflectionShape().getShapeList().empty())
			assertTrue(behavior.getEnvMapProbe().getReflectionMask().getShapeList().empty())
			assertEquals(behavior.getEnvMapProbe().getLayerMask(), LayerMask.newWith(BaseGameApp.WorldLayerBit.envmap))
			
			assertEquals(behavior.getAttach().getPrefix(), "envMapProbe.")
			assertEquals(behavior.getAttach().getPosition().getVector(), Vector.new())
			assertEquals(behavior.getAttach().getOrientation().getVector(), Vector.new())
			assertEquals(behavior.getAttach().getBone().getValue(), "")
			
			assertHasProperty("envMapProbe.influenceArea")
			assertHasProperty("envMapProbe.influenceBorderSize")
			assertHasProperty("envMapProbe.influencePriority")
			assertHasProperty("envMapProbe.reflectionShape")
			assertHasProperty("envMapProbe.reflectionMask")
			assertHasProperty("envMapProbe.position")
			assertHasProperty("envMapProbe.orientation")
			assertHasProperty("envMapProbe.bone")
			
			var BehaviorElement e = getElement()
			var ECBehaviorEnvMapProbe.Instance envMapProbe = behavior.instance(e)
			assertNotNull(envMapProbe)
			assertEquals(envMapProbe.getECBehavior(), behavior)
			
			var EnvMapProbe c = envMapProbe.getEnvMapProbe()
			assertNotNull(c)
			assertEquals(c.getLayerMask(), LayerMask.newWith(BaseGameApp.WorldLayerBit.envmap))
			assertEquals(c.getInfluenceBorderSize(), 0.1)
			assertEquals(c.getInfluencePriority(), 0)
			
			assertEquals(ECBehaviorEnvMapProbe.getInstanceIn(e), envMapProbe)
			
			assertEquals(ECBehaviorEnvMapProbe.getAllInstancesIn(e), Array.newWith(envMapProbe))
			
			return false
		end
	end
	
	/** EnvMapProbe with model, skin and rig resource set. */
	class Basic extends TestCaseECBehavior
		public func new() super("basic", UnicodeString.newFromUTF8("Basic"))
		end
		
		private var ECBehaviorEnvMapProbe behavior
		
		protected func void addBehaviors()
			var BehaviorElementClass eclass = getElementClass()
			var ECBehaviorCollider collider = ECBehaviorCollider.new(eclass, null)
			collider.setGhost()
			
			behavior = ECBehaviorEnvMapProbe.new(eclass, collider)
		end
		
		protected func void setStubProperties()
			var StubElement s = getStubElement()
			s.setPosition(DVector.new(2, 1, 3))
			s.setRotation(Vector.new(20, 10, 30))
			s.setPropertyValueFor("envMapProbe.position", "0.2 0.5 0.7")
			s.setPropertyValueFor("envMapProbe.orientation", "10 25 8")
		end
		
		protected func bool testBehaviors(TestSuite testSuite)
			getGameWorld().update(0.01) // required to make physics update attachments
			
			var DMatrix matrix = DMatrix.newRT(DVector.new(10, 25, 8), DVector.new(0.2, 0.5, 0.7))\
				* DMatrix.newRT(DVector.new(20, 10, 30), DVector.new(2, 1, 3))
			
			var ECBehaviorEnvMapProbe.Instance envMapProbe = behavior.instance(getElement())
			var EnvMapProbe probe = envMapProbe.getEnvMapProbe()
			assertNotNull(probe)
			assertDVector(probe.getPosition(), matrix.getPosition())
			assertQuaternion(probe.getOrientation(), matrix.toQuaternion())
			return false
		end
	end
	
	/** Multiple behaviors with different identifiers. */
	class Multiple extends TestCaseECBehavior
		public func new() super("multiple", UnicodeString.newFromUTF8("Multiple"))
		end
		
		private var ECBehaviorEnvMapProbe behavior
		private var ECBehaviorEnvMapProbe behavior2
		private var ECBehaviorEnvMapProbe behavior3
		
		protected func void addBehaviors()
			var BehaviorElementClass ec = getElementClass()
			behavior = ECBehaviorEnvMapProbe.new(ec, null)
			behavior2 = ECBehaviorEnvMapProbe.new(ec, null, "sub1")
			behavior3 = ECBehaviorEnvMapProbe.new(ec, null, "sub2")
			assertEquals(ECBehaviorEnvMapProbe.getBehaviorIn(ec), behavior)
			assertEquals(ECBehaviorEnvMapProbe.getBehaviorIn(ec, ""), behavior)
			assertEquals(ECBehaviorEnvMapProbe.getBehaviorIn(ec, "sub1"), behavior2)
			assertEquals(ECBehaviorEnvMapProbe.getBehaviorIn(ec, "sub2"), behavior3)
			assertEquals(ECBehaviorEnvMapProbe.getAllBehaviorsIn(ec), Array.newWith(behavior, behavior2, behavior3))
		end
		
		protected func bool testBehaviors(TestSuite testSuite)
			assertEquals(behavior.getID(), "")
			assertEquals(behavior2.getID(), "sub1")
			assertEquals(behavior3.getID(), "sub2")
			
			var BehaviorElement e = getElement()
			var ECBehaviorEnvMapProbe.Instance envMapProbe = behavior.instance(e)
			var ECBehaviorEnvMapProbe.Instance envMapProbe2 = behavior2.instance(e)
			var ECBehaviorEnvMapProbe.Instance envMapProbe3 = behavior3.instance(e)
			assertNotNull(envMapProbe)
			assertNotNull(envMapProbe2)
			assertNotNull(envMapProbe3)
			assertEquals(envMapProbe.getECBehavior(), behavior)
			assertEquals(envMapProbe2.getECBehavior(), behavior2)
			assertEquals(envMapProbe3.getECBehavior(), behavior3)
			
			assertEquals(ECBehaviorEnvMapProbe.getInstanceIn(e), envMapProbe)
			assertEquals(ECBehaviorEnvMapProbe.getInstanceIn(e, "sub1"), envMapProbe2)
			assertEquals(ECBehaviorEnvMapProbe.getInstanceIn(e, "sub2"), envMapProbe3)
			
			assertNull(ECBehaviorEnvMapProbe.getInstanceIn(e, "nope"))
			
			assertEquals(ECBehaviorEnvMapProbe.getAllInstancesIn(e), Array.newWith(envMapProbe, envMapProbe2, envMapProbe3))
			
			assertEquals(behavior.getEnvMapProbe().getPrefix(), "envMapProbe.")
			assertEquals(behavior2.getEnvMapProbe().getPrefix(), "envMapProbe(sub1).")
			assertEquals(behavior3.getEnvMapProbe().getPrefix(), "envMapProbe(sub2).")
			
			assertHasProperty("envMapProbe.influenceArea")
			assertHasProperty("envMapProbe.influenceBorderSize")
			assertHasProperty("envMapProbe.influencePriority")
			assertHasProperty("envMapProbe.reflectionShape")
			assertHasProperty("envMapProbe.reflectionMask")
			assertHasProperty("envMapProbe.position")
			assertHasProperty("envMapProbe.orientation")
			assertHasProperty("envMapProbe.bone")
			
			assertHasProperty("envMapProbe(sub1).influenceArea")
			assertHasProperty("envMapProbe(sub1).influenceBorderSize")
			assertHasProperty("envMapProbe(sub1).influencePriority")
			assertHasProperty("envMapProbe(sub1).reflectionShape")
			assertHasProperty("envMapProbe(sub1).reflectionMask")
			assertHasProperty("envMapProbe(sub1).position")
			assertHasProperty("envMapProbe(sub1).orientation")
			assertHasProperty("envMapProbe(sub1).bone")
			
			assertHasProperty("envMapProbe(sub2).influenceArea")
			assertHasProperty("envMapProbe(sub2).influenceBorderSize")
			assertHasProperty("envMapProbe(sub2).influencePriority")
			assertHasProperty("envMapProbe(sub2).reflectionShape")
			assertHasProperty("envMapProbe(sub2).reflectionMask")
			assertHasProperty("envMapProbe(sub2).position")
			assertHasProperty("envMapProbe(sub2).orientation")
			assertHasProperty("envMapProbe(sub2).bone")
			
			return false
		end
	end
	
	
	/** Create test suite. */
	public func new() super("ecbehaviorEnvMapProbe", UnicodeString.newFromUTF8("ECBehaviorEnvMapProbe"))
		addTestCase(Empty.new())
		addTestCase(Basic.new())
		addTestCase(Multiple.new())
	end
end
