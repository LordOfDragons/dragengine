/* 
 * Drag[en]gine Testing
 *
 * Copyright (C) 2022, Roland Pl√ºss (roland@rptd.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

namespace DETesting

pin Dragengine.Gui
pin Dragengine.Scenery
pin Dragengine.Preloading
pin Dragengine.TestSystem


/**
 * Test Suite for ECBehaviorCamera.
 */
class TSECBCamera extends TestSuite
	/** Bare behavior without any resources set. */
	class Empty extends TestCaseECBehavior
		public func new() super("empty", UnicodeString.newFromUTF8("Empty"))
		end
		
		private var ECBehaviorCamera behavior
		
		protected func void addBehaviors()
			var BehaviorElementClass ec = getElementClass()
			behavior = ECBehaviorCamera.new(ec, null)
			assertEquals(ECBehaviorCamera.getBehaviorIn(ec), behavior)
			assertEquals(ECBehaviorCamera.getBehaviorIn(ec, ""), behavior)
			assertEquals(ECBehaviorCamera.getAllBehaviorsIn(ec), Array.newWith(behavior))
		end
		
		protected func bool testBehaviors(TestSuite testSuite)
			assertEquals(behavior.getID(), "")
			assertNotNull(behavior.getAttach())
			assertNull(behavior.getCollider())
			assertFloatProperty(behavior.getFov(), 39.60, 0, 180)
			assertFloatProperty(behavior.getFovRatio(), 1, 0.01)
			assertFloatProperty(behavior.getImageDistance(), 0.01, 0.001)
			assertFloatProperty(behavior.getViewDistance(), 200, 0.01)
			assertTrue(behavior.getEnableHDRR().getValue())
			assertFloatProperty(behavior.getExposure(), 1, 0)
			assertFloatProperty(behavior.getLowestIntensity(), 1, 0)
			assertFloatProperty(behavior.getHighestIntensity(), 20, 0)
			assertFloatProperty(behavior.getAdaptionTime(), 0.1, 0)
			
			assertTrue(not Engine.getDefaultEnableGI())
			assertTrue(behavior.getEnableGI().getValue())
			
			assertEquals(behavior.getAttach().getPrefix(), "camera.")
			assertEquals(behavior.getAttach().getPosition().getVector(), Vector.new())
			assertEquals(behavior.getAttach().getOrientation().getVector(), Vector.new())
			assertEquals(behavior.getAttach().getBone().getValue(), "")
			
			assertHasProperty("camera.fov")
			assertHasProperty("camera.fovRatio")
			assertHasProperty("camera.imageDistance")
			assertHasProperty("camera.viewDistance")
			assertHasProperty("camera.enableHDRR")
			assertHasProperty("camera.exposure")
			assertHasProperty("camera.lowestIntensity")
			assertHasProperty("camera.highestIntensity")
			assertHasProperty("camera.adaptionTime")
			assertHasProperty("camera.enableGI")
			assertHasProperty("camera.position")
			assertHasProperty("camera.orientation")
			assertHasProperty("camera.bone")
			
			var BehaviorElement e = getElement()
			var ECBehaviorCamera.Instance camera = behavior.instance(e)
			assertNotNull(camera)
			assertEquals(camera.getECBehavior(), behavior)
			
			var Camera c = camera.getCamera()
			assertNotNull(c)
			assertEquals(c.getFov(), 39.60)
			assertEquals(c.getFovRatio(), 1)
			assertEquals(c.getImageDistance(), 0.01)
			assertEquals(c.getViewDistance(), 200)
			assertTrue(c.getEnableHDRR())
			assertEquals(c.getExposure(), 1)
			assertEquals(c.getLowestIntensity(), 1)
			assertEquals(c.getHighestIntensity(), 20)
			assertEquals(c.getAdaptionTime(), 0.1)
			assertTrue(c.getEnableGI())
			
			assertEquals(ECBehaviorCamera.getInstanceIn(e), camera)
			
			assertEquals(ECBehaviorCamera.getAllInstancesIn(e), Array.newWith(camera))
			
			return false
		end
	end
	
	/** Camera with parameters set. */
	class Basic extends TestCaseECBehavior
		public func new() super("basic", UnicodeString.newFromUTF8("Basic"))
		end
		
		private var ECBehaviorCamera behavior
		
		protected func void addBehaviors()
			behavior = ECBehaviorCamera.new(getElementClass(), null)
		end
		
		protected func void setStubProperties()
			var StubElement s = getStubElement()
			s.setPosition(DVector.new(2, 1, 3))
			s.setRotation(Vector.new(20, 10, 30))
		end
		
		protected func bool testBehaviors(TestSuite testSuite)
			var ECBehaviorCamera.Instance camera = behavior.instance(getElement())
			var Camera c = camera.getCamera()
			assertDVector(c.getPosition(), DVector.new(2, 1, 3))
			assertQuaternion(c.getOrientation(), Quaternion.newFromEuler(20, 10, 30))
			
			return false
		end
	end
	
	/** Multiple behaviors with different identifiers. */
	class Multiple extends TestCaseECBehavior
		public func new() super("multiple", UnicodeString.newFromUTF8("Multiple"))
		end
		
		private var ECBehaviorCamera behavior
		private var ECBehaviorCamera behavior2
		private var ECBehaviorCamera behavior3
		
		protected func void addBehaviors()
			var BehaviorElementClass ec = getElementClass()
			behavior = ECBehaviorCamera.new(ec, null)
			behavior2 = ECBehaviorCamera.new(ec, null, "sub1")
			behavior3 = ECBehaviorCamera.new(ec, null, "sub2")
			assertEquals(ECBehaviorCamera.getBehaviorIn(ec), behavior)
			assertEquals(ECBehaviorCamera.getBehaviorIn(ec, ""), behavior)
			assertEquals(ECBehaviorCamera.getBehaviorIn(ec, "sub1"), behavior2)
			assertEquals(ECBehaviorCamera.getBehaviorIn(ec, "sub2"), behavior3)
			assertEquals(ECBehaviorCamera.getAllBehaviorsIn(ec), Array.newWith(behavior, behavior2, behavior3))
		end
		
		protected func bool testBehaviors(TestSuite testSuite)
			assertEquals(behavior.getID(), "")
			assertEquals(behavior2.getID(), "sub1")
			assertEquals(behavior3.getID(), "sub2")
			
			var BehaviorElement e = getElement()
			var ECBehaviorCamera.Instance camera = behavior.instance(e)
			var ECBehaviorCamera.Instance camera2 = behavior2.instance(e)
			var ECBehaviorCamera.Instance camera3 = behavior3.instance(e)
			assertNotNull(camera)
			assertNotNull(camera2)
			assertNotNull(camera3)
			assertEquals(camera.getECBehavior(), behavior)
			assertEquals(camera2.getECBehavior(), behavior2)
			assertEquals(camera3.getECBehavior(), behavior3)
			
			assertEquals(ECBehaviorCamera.getInstanceIn(e), camera)
			assertEquals(ECBehaviorCamera.getInstanceIn(e, "sub1"), camera2)
			assertEquals(ECBehaviorCamera.getInstanceIn(e, "sub2"), camera3)
			
			assertNull(ECBehaviorCamera.getInstanceIn(e, "nope"))
			
			assertEquals(ECBehaviorCamera.getAllInstancesIn(e), Array.newWith(camera, camera2, camera3))
			
			assertEquals(behavior.getAttach().getPrefix(), "camera.")
			assertEquals(behavior2.getAttach().getPrefix(), "camera(sub1).")
			assertEquals(behavior3.getAttach().getPrefix(), "camera(sub2).")
			
			assertHasProperty("camera.fov")
			assertHasProperty("camera.fovRatio")
			assertHasProperty("camera.imageDistance")
			assertHasProperty("camera.viewDistance")
			assertHasProperty("camera.enableHDRR")
			assertHasProperty("camera.exposure")
			assertHasProperty("camera.lowestIntensity")
			assertHasProperty("camera.highestIntensity")
			assertHasProperty("camera.adaptionTime")
			assertHasProperty("camera.enableGI")
			assertHasProperty("camera.position")
			assertHasProperty("camera.orientation")
			assertHasProperty("camera.bone")
			
			assertHasProperty("camera(sub1).fov")
			assertHasProperty("camera(sub1).fovRatio")
			assertHasProperty("camera(sub1).imageDistance")
			assertHasProperty("camera(sub1).viewDistance")
			assertHasProperty("camera(sub1).enableHDRR")
			assertHasProperty("camera(sub1).exposure")
			assertHasProperty("camera(sub1).lowestIntensity")
			assertHasProperty("camera(sub1).highestIntensity")
			assertHasProperty("camera(sub1).adaptionTime")
			assertHasProperty("camera(sub1).enableGI")
			assertHasProperty("camera(sub1).position")
			assertHasProperty("camera(sub1).orientation")
			assertHasProperty("camera(sub1).bone")
			
			assertHasProperty("camera(sub2).fov")
			assertHasProperty("camera(sub2).fovRatio")
			assertHasProperty("camera(sub2).imageDistance")
			assertHasProperty("camera(sub2).viewDistance")
			assertHasProperty("camera(sub2).enableHDRR")
			assertHasProperty("camera(sub2).exposure")
			assertHasProperty("camera(sub2).lowestIntensity")
			assertHasProperty("camera(sub2).highestIntensity")
			assertHasProperty("camera(sub2).adaptionTime")
			assertHasProperty("camera(sub2).enableGI")
			assertHasProperty("camera(sub2).position")
			assertHasProperty("camera(sub2).orientation")
			assertHasProperty("camera(sub2).bone")
			
			return false
		end
	end
	
	/** Camera with attaching. */
	class Attached extends TestCaseECBehavior
		public func new() super("attached", UnicodeString.newFromUTF8("Attached"))
		end
		
		private var ECBehaviorCamera behavior
		
		protected func void addBehaviors()
			var ECBehaviorCollider collider = ECBehaviorCollider.new(getElementClass(), null)
			var ShapeList shape = ShapeList.new()
			shape.addSphere(Vector.new(), 0.1)
			collider.getCollider().getShape().setShapeList(shape)
			collider.setGhost()
			
			behavior = ECBehaviorCamera.new(getElementClass(), collider)
			behavior.getAttach().getPosition().setVector(Vector.new(0.1, 0.2, 0.3))
			behavior.getAttach().getOrientation().setVector(Vector.new(50, 60, 70))
		end
		
		protected func void setStubProperties()
			var StubElement s = getStubElement()
			s.setPosition(DVector.new(2, 1, 3))
			s.setRotation(Vector.new(20, 10, 30))
		end
		
		protected func bool testBehaviors(TestSuite testSuite)
			getGameWorld().update(0.01) // required to make physics update attachments
			
			var ECBehaviorCamera.Instance camera = behavior.instance(getElement())
			var Camera c = camera.getCamera()
			var DMatrix m = DMatrix.newRT(DVector.new(50, 60, 70), DVector.new(0.1, 0.2, 0.3))\
				* DMatrix.newRT(DVector.new(20, 10, 30), DVector.new(2, 1, 3))
			assertDVector(c.getPosition(), m.getPosition())
			assertQuaternion(c.getOrientation(), m.toQuaternion())
			
			return false
		end
	end
	
	
	
	/** Create test suite. */
	public func new() super("ecbehaviorCamera", UnicodeString.newFromUTF8("ECBehaviorCamera"))
		addTestCase(Empty.new())
		addTestCase(Basic.new())
		addTestCase(Multiple.new())
		addTestCase(Attached.new())
	end
end
