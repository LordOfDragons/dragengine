name: Build Linux CI

on:
  workflow_call:
    inputs:
      branch:
        required: false
        type: string
        default: master
      releaseVersion:
        required: true
        type: string
      buildVersion:
        required: true
        type: string
      artifactArchive:
        required: true
        type: string
      artifactInstaller:
        required: true
        type: string
      lfscache:
        required: false
        default: true
        type: boolean
  
  workflow_dispatch:
    inputs:
      branch:
        description: 'Branch'
        required: false
        type: string
        default: master
      releaseVersion:
        description: 'Release Version'
        required: true
        type: string
        default: development
      buildVersion:
        description: 'Build Version'
        required: true
        type: string
        default: "9999"
      artifactArchive:
        description: 'Artifact Archive'
        required: true
        type: string
        default: "archives-linux"
      artifactInstaller:
        description: 'Artifact Installer'
        required: true
        type: string
        default: "installers-linux"
      lfscache:
        required: false
        default: true
        type: boolean

jobs:
  build:
    runs-on: ubuntu-22.04
    
    steps:
      - uses: actions/checkout@v4
        with:
          lfs: ${{ !inputs.lfscache }}
          submodules: 'recursive'
          ref: ${{ inputs.branch }}
      
      - name: Create LFS file hash list
        if: ${{ inputs.lfscache }}
        run: git lfs ls-files -l | cut -d' ' -f1 | sort > .lfs-objects-id

      - name: Restore LFS Cache
        uses: actions/cache@v4
        id: lfs-cache
        if: ${{ inputs.lfscache }}
        with:
          path: .git/lfs
          key: lfs-cache-${{ hashFiles('.lfs-objects-id') }}
          restore-keys: lfs-cache-

      - name: Git LFS Pull
        if: ${{ inputs.lfscache }}
        run: |
          git lfs pull 2>&1 | tee lfs.log
          if grep -q "error:" "lfs.log" ; then
            git lfs logs last
            exit 1
          fi
      
      - name: Install required packages
        run: |
          sudo apt -y update
          sudo apt -y install build-essential scons cmake autoconf libtool nasm \
            patchelf libasound2-dev extra-cmake-modules flex bison gettext doxygen
      
      - name: Install GLSL Tools
        run: |
          wget https://github.com/KhronosGroup/glslang/releases/download/main-tot/glslang-main-linux-Release.zip -o "${{ github.workspace }}/glslang.zip"
          unzip -d "${{ github.workspace }}/glslang" "${{ github.workspace }}/glslang.zip"
          echo "PATH=${{ github.workspace }}/glslang/bin:$PATH" >> $GITHUB_ENV
      
      - name: Init custom.py
        run: |
          cp ${{ github.workspace }}/.github/workflows/custom_linux_ci.py custom.py
          sed -i -e 's/{ReleaseVersion}/${{ inputs.releaseVersion }}/g' custom.py
          sed -i -e 's/{BuildVersion}/${{ inputs.buildVersion }}/g' custom.py
      
      - name: Build
        # CMake based projects are problem children that like to get stuck forever in CMake
        # on Ubuntu and GitHub. build them first without parallel to avoid hangups
        run: |
          scons -j 1 lib_openxr lib_openvr lib_libjpeg lib_libwebm lib_modio
          scons -j 14 archive installer
      
      - name: Debug Symbols
        run: |
          ./separateDebugSymbols.sh \
            archive/build/dragengine-ci-${{ inputs.releaseVersion }}-linux64.tar.bz2 \
            archive/build/dragengine-ci-dbg-${{ inputs.releaseVersion }}-linux64.tar.bz2
          
          ./separateDebugSymbols.sh \
            archive/build/deigde-ci-${{ inputs.releaseVersion }}-linux64.tar.bz2 \
            archive/build/deigde-ci-dbg-${{ inputs.releaseVersion }}-linux64.tar.bz2
      
      - name: Get current date
        id: date
        run: echo "date=$(date +'%Y-%m-%d')" >> $GITHUB_OUTPUT
        
      - name: Store Archives
        uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.artifactArchive }}
          path: |
            archive/build/dragengine-ci-${{ inputs.releaseVersion }}-linux64.tar.bz2
            archive/build/dragengine-ci-dbg-${{ inputs.releaseVersion }}-linux64.tar.bz2
            archive/build/deigde-ci-${{ inputs.releaseVersion }}-linux64.tar.bz2
            archive/build/deigde-ci-dbg-${{ inputs.releaseVersion }}-linux64.tar.bz2
          if-no-files-found: error
        
      - name: Store Installers
        uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.artifactInstaller }}
          path: |
            installer/build/install-dragengine-ci-${{ inputs.releaseVersion }}-linux64.sh
            installer/build/install-deigde-ci-${{ inputs.releaseVersion }}-linux64.sh
          if-no-files-found: error
