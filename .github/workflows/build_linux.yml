name: Build Linux

on:
  workflow_call:
    inputs:
      branch:
        required: false
        type: string
        default: master
      releaseVersion:
        required: true
        type: string
      buildVersion:
        required: true
        type: string
      artifactArchive:
        required: true
        type: string
      artifactInstaller:
        required: true
        type: string
      artifactTools:
        required: true
        type: string
      debugBuild:
        type: boolean
        required: false
        default: false
      lfscache:
        required: false
        default: true
        type: boolean
      codeql:
        required: false
        default: false
        type: boolean
  
  workflow_dispatch:
    inputs:
      branch:
        description: 'Branch'
        required: false
        type: string
        default: master
      releaseVersion:
        description: 'Release Version'
        required: true
        type: string
        default: nightly
      buildVersion:
        description: 'Build Version'
        required: true
        type: string
        default: "9999"
      artifactArchive:
        description: 'Artifact Archive'
        required: true
        type: string
        default: "archives-linux"
      artifactInstaller:
        description: 'Artifact Installer'
        required: true
        type: string
        default: "installers-linux"
      artifactTools:
        description: 'Artifact Tools'
        required: true
        type: string
        default: "tools-crossplatform"
      debugBuild:
        description: 'Debug Build'
        type: boolean
        required: false
        default: false
      lfscache:
        required: false
        default: true
        type: boolean
      codeql:
        required: false
        default: false
        type: boolean
      
jobs:
  build:
    runs-on: ubuntu-22.04
    
    steps:
      - uses: actions/checkout@v4
        with:
          lfs: ${{ !inputs.lfscache }}
          submodules: 'recursive'
          ref: ${{ inputs.branch }}
      
      - name: Create LFS file hash list
        if: ${{ inputs.lfscache }}
        run: git lfs ls-files -l | cut -d' ' -f1 | sort > .lfs-objects-id
      
      - name: Restore LFS Cache
        uses: actions/cache@v4
        id: lfs-cache
        if: ${{ inputs.lfscache }}
        with:
          path: .git/lfs
          key: lfs-cache-${{ hashFiles('.lfs-objects-id') }}
          restore-keys: lfs-cache-

      - name: Git LFS Pull
        if: ${{ inputs.lfscache }}
        run: |
          git lfs pull 2>&1 | tee lfs.log
          if grep -q "error:" "lfs.log" ; then
            git lfs logs last
            exit 1
          fi
      
      - name: Install required packages
        run: |
          sudo apt -y update
          sudo apt -y install build-essential scons cmake autoconf libtool nasm \
            patchelf libx11-dev libxrandr-dev libgl-dev libxi-dev libpulse-dev \
            libasound2-dev portaudio19-dev libxft-dev extra-cmake-modules \
            flex bison gettext doxygen glslang-tools
      
      - name: Init custom.py
        run: |
          cp ${{ github.workspace }}/.github/workflows/custom_linux.py custom.py
          sed -i -e 's/{ReleaseVersion}/${{ inputs.releaseVersion }}/g' custom.py
          sed -i -e 's/{BuildVersion}/${{ inputs.buildVersion }}/g' custom.py
          sed -i -e 's/{DebugBuild}/${{ inputs.debugBuild }}/g' custom.py
      
      - name: Build external
        # Build first all external libraries. Aboids avoid running CodeQL on them.
        # CMake based projects are problem children that like to get stuck forever in CMake
        # on Ubuntu and GitHub. build them first without parallel to avoid hangups
        run: |
          scons -j 1 \
            lib_openxr \
            lib_openvr \
            lib_libjpeg \
            lib_libwebm \
            lib_modio
          scons -j 14 \
            lib_dragonscript \
            lib_fox \
            lib_libapng \
            lib_libevdev \
            lib_libogg \
            lib_libpng \
            lib_liburing \
            lib_libtheora \
            lib_libvorbis \
            lib_libvpx \
            lib_libwebp \
            lib_openal \
            lib_soundtouch \
            lib_steamsdk \
            lib_zlib
        # lib_sndio
      
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        if: ${{ inputs.codeql }}
        with:
          languages: c-cpp
          build-mode: manual
      
      - name: Build
        run: |
          # modio service is build ahead with reduced parallel building due to modio sdk
          # being so hard on the RAM it can cause the build to fail due to memory problems
          scons -j 4 srv_modio_build
          
          # the rest can be build full throttle
          scons -j 14 archive installer
      
      - name: Debug Symbols
        if: ${{ ! inputs.debugBuild }}
        run: |
          ./separateDebugSymbols.sh \
            archive/build/dragengine-${{ inputs.releaseVersion }}-linux64.tar.bz2 \
            archive/build/dragengine-dbg-${{ inputs.releaseVersion }}-linux64.tar.bz2
          
          ./separateDebugSymbols.sh \
            archive/build/deigde-${{ inputs.releaseVersion }}-linux64.tar.bz2 \
            archive/build/deigde-dbg-${{ inputs.releaseVersion }}-linux64.tar.bz2
      
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        if: ${{ inputs.codeql }}
        with:
          category: "/language:c-cpp"
      
      - name: Get current date
        id: date
        run: echo "date=$(date +'%Y-%m-%d')" >> $GITHUB_OUTPUT
        
      - name: Store Archives
        uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.artifactArchive }}
          path: |
            archive/build/dragengine-${{ inputs.releaseVersion }}-linux64.tar.bz2
            archive/build/dragengine-dbg-${{ inputs.releaseVersion }}-linux64.tar.bz2
            archive/build/dragengine-dev-${{ inputs.releaseVersion }}-linux64.tar.bz2
            archive/build/deigde-${{ inputs.releaseVersion }}-linux64.tar.bz2
            archive/build/deigde-dbg-${{ inputs.releaseVersion }}-linux64.tar.bz2
            archive/build/deigde-dev-${{ inputs.releaseVersion }}-linux64.tar.bz2
            archive/build/despecial-${{ inputs.releaseVersion }}-linux64.tar.bz2
          if-no-files-found: error
        
      - name: Store Installers
        uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.artifactInstaller }}
          path: |
            installer/build/install-dragengine-${{ inputs.releaseVersion }}-linux64.sh
            installer/build/install-dragengine-dev-${{ inputs.releaseVersion }}-linux64.sh
            installer/build/install-deigde-${{ inputs.releaseVersion }}-linux64.sh
            installer/build/install-deigde-dev-${{ inputs.releaseVersion }}-linux64.sh
          if-no-files-found: error
        
      - name: Store Tools
        uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.artifactTools }}
          path: |
            src/tools/blender/build/blender-addon-dragengine-${{ inputs.buildVersion }}.zip
          if-no-files-found: error
