name: Build Android

on:
  workflow_call:
    inputs:
      branch:
        required: false
        type: string
        default: master
      releaseVersion:
        required: true
        type: string
      buildVersion:
        required: true
        type: string
      androidArch:
        required: true
        type: string
        default: 'armv8'
      androidApiLevel:
        required: true
        type: string
        default: '26'
      artifactArchive:
        required: true
        type: string
      lfscache:
        required: false
        default: true
        type: boolean
        
  workflow_dispatch:
    inputs:
      branch:
        description: 'Branch'
        required: false
        type: string
        default: master
      releaseVersion:
        description: 'Release Version'
        required: true
        type: string
        default: nightly
      buildVersion:
        description: 'Build Version'
        required: true
        type: string
        default: '9999'
      androidArch:
        description: 'Android Architecture'
        required: true
        type: string
        default: 'armv8'
      androidApiLevel:
        description: 'Android API Level'
        required: true
        type: string
        default: '26'
      artifactArchive:
        description: 'Artifact Archive'
        required: true
        type: string
        default: "archives-android64"
      debugBuild:
        description: 'Debug Build'
        type: boolean
        required: false
        default: false
      lfscache:
        required: false
        default: true
        type: boolean

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
        with:
          lfs: ${{ !inputs.lfscache }}
          submodules: 'recursive'
          ref: ${{ inputs.branch }}
      
      - name: Create LFS file hash list
        if: ${{ inputs.lfscache }}
        run: git lfs ls-files -l | cut -d' ' -f1 | sort > .lfs-objects-id

      - name: Restore LFS Cache
        uses: actions/cache@v4
        id: lfs-cache
        if: ${{ inputs.lfscache }}
        with:
          path: .git/lfs
          key: lfs-cache-${{ hashFiles('.lfs-objects-id') }}
          restore-keys: lfs-cache-

      - name: Git LFS Pull
        if: ${{ inputs.lfscache }}
        run: |
          git lfs pull 2>&1 | tee lfs.log
          if grep -q "error:" "lfs.log" ; then
            git lfs logs last
            exit 1
          fi
      
      - name: Install required packages
        run: |
          sudo apt -y update
          sudo apt -y install build-essential scons cmake autoconf libtool nasm \
            patchelf libx11-dev libxrandr-dev libgl-dev libxi-dev libpulse-dev \
            libasound2-dev portaudio19-dev libxft-dev extra-cmake-modules \
            flex bison gettext doxygen
      
      - name: Init custom.py
        run: |
          cp ${{ github.workspace }}/.github/workflows/custom_android.py custom.py
          sed -i -e 's/{ReleaseVersion}/${{ inputs.releaseVersion }}/g' custom.py
          sed -i -e 's/{BuildVersion}/${{ inputs.buildVersion }}/g' custom.py
          sed -i -e "s@{NdkRoot}@$ANDROID_NDK_ROOT@g" custom.py
          sed -i -e 's/{AndroidArch}/${{ inputs.androidArch }}/g' custom.py
          sed -i -e 's/{AndroidApiLevel}/${{ inputs.androidApiLevel }}/g' custom.py
          sed -i -e 's/{AndroidVersionCode}/${{ github.run_number }}/g' custom.py
      
      - name: Build
        # CMake based projects are problem children that like to get stuck forever in CMake
        # on Ubuntu and GitHub. build them first without parallel to avoid hangups
        run: |
          scons -j 1 lib_openxr lib_libjpeg lib_libwebm
          scons -j 14 archive launcher_android_build
      
      - name: Get current date
        id: date
        run: echo "date=$(date +'%Y-%m-%d')" >> $GITHUB_OUTPUT
        
      - name: Store Archives
        uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.artifactArchive }}
          path: |
            archive/build/dragengine-${{ inputs.releaseVersion }}-android-${{ inputs.androidArch }}.tar.bz2
            archive/build/dragengine-dev-${{ inputs.releaseVersion }}-android-${{ inputs.androidArch }}.tar.bz2
            archive/build/despecial-${{ inputs.releaseVersion }}-android-${{ inputs.androidArch }}.tar.bz2
            src/launcher/android/build/DELauncher-${{ inputs.releaseVersion }}-${{ inputs.androidArch }}.apk
            src/launcher/android/build/DELauncher-${{ inputs.releaseVersion }}-${{ inputs.androidArch }}.aab
          if-no-files-found: error
