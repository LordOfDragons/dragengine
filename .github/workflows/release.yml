name: Release

on:
  workflow_dispatch:
    inputs:
      branch:
        description: 'Branch'
        required: true
        type: string
        default: 'master'
      version:
        description: 'Version'
        required: true
        type: string
        default: 'X.Y{.Z}'
      changelogPageNumber:
        description: 'Changelog Page Number'
        required: true
        type: string
        default: 'X-Y{-Z}'

env:
  # Android API level:
  # Android 10: 29
  # Android 8: 26
  ANDROID_API_LEVEL: 26
        
jobs:
  generate_buildnumbers:
    runs-on: ubuntu-latest
    outputs:
      build_number: ${{ steps.buildnumber.outputs.build_number }}
    steps:
      - name: Generate build number
        id: buildnumber
        uses: onyxmueller/build-tag-number@v1
        with:
          token: ${{ secrets.github_token }}
          prefix: github
  
  build_linux:
    needs: [generate_buildnumbers]
    uses: ./.github/workflows/build_linux.yml
    with:
      branch: ${{ github.event.inputs.branch }}
      releaseVersion: ${{ github.event.inputs.version }}
      buildVersion: ${{ github.event.inputs.version }}
      artifactArchive: archives-linux
      artifactInstaller: installers-linux
      artifactTools: tools-crossplatform
  
  build_windows:
    needs: [generate_buildnumbers]
    uses: ./.github/workflows/build_windows_vs.yml
    with:
      branch: ${{ github.event.inputs.branch }}
      releaseVersion: ${{ github.event.inputs.version }}
      buildVersion: ${{ github.event.inputs.version }}
      artifactArchive: archives-windows
  
  build_windows_installer:
    needs: [build_windows]
    uses: ./.github/workflows/build_windows_installer.yml
    with:
      branch: ${{ github.event.inputs.branch }}
      releaseVersion: ${{ github.event.inputs.version }}
      artifactArchive: archives-windows
      artifactInstaller: installers-windows

  build_msix:
    needs: [build_windows]
    uses: ./.github/workflows/build_msix.yml
    with:
      branch: ${{ github.event.inputs.branch }}
      releaseVersion: ${{ github.event.inputs.version }}
      artifactArchive: archives-windows
      artifactMsix: msix-windows
  
  build_linux_ci:
    needs: [generate_buildnumbers]
    uses: ./.github/workflows/build_linux_ci.yml
    with:
      branch: ${{ github.event.inputs.branch }}
      releaseVersion: ${{ github.event.inputs.version }}
      buildVersion: ${{ github.event.inputs.version }}
      artifactInstaller: installers-linux-ci
  
  build_android_armv8:
    needs: [generate_buildnumbers]
    uses: ./.github/workflows/build_android.yml
    with:
      releaseVersion: nightly
      buildVersion: ${{ github.event.inputs.version }}
      androidArch: 'armv8'
      # not working: ${{ env.ANDROID_API_LEVEL }}
      androidApiLevel: 26
      artifactArchive: archives-android-armv8
      buildNumber: ${{ needs.generate_buildnumbers.outputs.build_number }}
  
  build_android_armv7:
    needs: [generate_buildnumbers]
    uses: ./.github/workflows/build_android.yml
    with:
      releaseVersion: nightly
      buildVersion: ${{ github.event.inputs.version }}
      androidArch: 'armv7'
      # not working: ${{ env.ANDROID_API_LEVEL }}
      androidApiLevel: 26
      artifactArchive: archives-android-armv7
      buildNumber: ${{ needs.generate_buildnumbers.outputs.build_number }}
  
  build_live:
    needs: [build_linux, build_windows]
    uses: ./.github/workflows/build_live.yml
    with:
      releaseVersion: ${{ github.event.inputs.version }}
      artifactLinux: archives-linux
      artifactWindows: archives-windows
      artifactLauncher: archive-livelauncher
    
  build_testing:
    needs: [build_linux_ci]
    uses: ./.github/workflows/build_testing.yml
    with:
      branch: ${{ github.event.inputs.branch }}
      releaseVersion: ${{ github.event.inputs.version }}
      artifactInstallerCI: installers-linux-ci
      artifactTesting: archive-testing
    
  testing:
    needs: [build_linux, build_testing]
    uses: ./.github/workflows/testing.yml
    with:
      branch: ${{ github.event.inputs.branch }}
      releaseVersion: ${{ github.event.inputs.version }}
      artifactArchive: installers-linux
      artifactTesting: archive-testing
      artifactResults: testing-results

  upload:
    needs: [
      build_linux,
      build_windows,
      build_windows_installer,
      build_linux_ci,
      build_android_armv8,
      build_android_armv7,
      build_live,
      testing]
    
    runs-on: ubuntu-20.04
    
    steps:
      - name: Get Linux Archives
        uses: actions/download-artifact@v4
        with:
          name: archives-linux
      
      - name: Get Windows Archives
        uses: actions/download-artifact@v4
        with:
          name: archives-windows
      
      - name: Get Linux Installers
        uses: actions/download-artifact@v4
        with:
          name: installers-linux
      
      - name: Get Windows Installers
        uses: actions/download-artifact@v4
        with:
          name: installers-windows
      
      - name: Get Crossplatform Tools
        uses: actions/download-artifact@v4
        with:
          name: tools-crossplatform
      
      - name: Get Linux CI Installers
        uses: actions/download-artifact@v4
        with:
          name: installers-linux-ci
      
      - name: Get Live Launcher
        uses: actions/download-artifact@v4
        with:
          name: archive-livelauncher
      
      - name: Repackage archives
        run: |
          mkdir repackage
          cd repackage

          tar -xjf ../dragengine-dev-${{ github.event.inputs.version }}-linux64.tar.bz2
          mv usr dragengine-sdk
          rm ../dragengine-dev-${{ github.event.inputs.version }}-linux64.tar.bz2
          tar -cjf ../dragengine-dev-${{ github.event.inputs.version }}-linux64.tar.bz2 dragengine-sdk
          rm -rf dragengine-sdk

          tar -xjf ../deigde-dev-${{ github.event.inputs.version }}-linux64.tar.bz2
          mv usr deigde-sdk
          rm ../deigde-dev-${{ github.event.inputs.version }}-linux64.tar.bz2
          tar -cjf ../deigde-dev-${{ github.event.inputs.version }}-linux64.tar.bz2 deigde-sdk
          rm -rf deigde-sdk

          unzip -q ../dragengine-sdk-${{ github.event.inputs.version }}-windows64.zip
          mv @ProgramFiles/Dragengine/SDK DragengineSDK
          rm ../dragengine-sdk-${{ github.event.inputs.version }}-windows64.zip
          zip -qr ../dragengine-sdk-${{ github.event.inputs.version }}-windows64.zip DragengineSDK
          rm -rf DragengineSDK

          unzip -q ../deigde-sdk-${{ github.event.inputs.version }}-windows64.zip
          mv @ProgramFiles/DEIGDE/SDK DEIGDESDK
          rm ../deigde-sdk-${{ github.event.inputs.version }}-windows64.zip
          zip -qr ../deigde-sdk-${{ github.event.inputs.version }}-windows64.zip DEIGDESDK
          rm -rf DEIGDESDK

          cd ..
          rm -rf repackage
      
      - name: Upload Artifacts
        uses: ncipollo/release-action@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          allowUpdates: false
          artifactErrorsFailBuild: true
          draft: false
          prerelease: false
          commit: ${{ github.event.inputs.branch }}
          tag: 'v${{ github.event.inputs.version }}'
          name: 'Drag[en]gine Game Engine Release ${{ github.event.inputs.version }}'
          body: |
            ${{ github.event.inputs.version }} release of the Drag[en]gine Game Engine.
            
            Contains installers for End-Users (gamers) as well as Development tools for Game developers.
            
            See https://dragondreams.ch/index.php/changelog-release-${{ github.event.inputs.changelogPageNumber }} for the full listing.
            
            For End-Users and Game Developers:
            - install-dragengine-${{ github.event.inputs.version }}-linux64.sh
            - install-dragengine-${{ github.event.inputs.version }}-windows64.exe
            - dragengine-live-${{ github.event.inputs.version }}.zip (live-build suitable for running games without installing the game engine or demo-sessions on exhibitions)
            - dragengine-${{ github.event.inputs.version }}-linux64.tar.bz2
            
            For Game Developers (you do NOT need source code nor compiling to develop games, just the engine and the IGDE):
            - install-deigde-${{ github.event.inputs.version }}-linux64.sh
            - install-deigde-${{ github.event.inputs.version }}-windows64.exe
            - deigde-${{ github.event.inputs.version }}-linux64.tar.bz2
            
            For Continuous Integration (Build Servers):
            - install-dragengine-ci-${{ github.event.inputs.version }}-linux64.sh
            - install-deigde-ci-${{ github.event.inputs.version }}-linux64.sh
            
            For Engine Module developers:
            - install-dragengine-dev-${{ github.event.inputs.version }}-linux64.sh
            - dragengine-dev-${{ github.event.inputs.version }}-linux64.tar.bz2
            - install-dragengine-dev-${{ github.event.inputs.version }}-windows64.exe
            - dragengine-sdk-${{ github.event.inputs.version }}-windows64.zip
            
            For IGDE Editor developers:
            - install-deigde-dev-${{ github.event.inputs.version }}-linux64.sh
            - deigde-dev-${{ github.event.inputs.version }}-linux64.tar.bz2
            - install-deigde-dev-${{ github.event.inputs.version }}-windows64.exe
            - deigde-sdk-${{ github.event.inputs.version }}-windows64.zip
            
            Example projects to learn developing with the Drag[en]gine Game Engine can be found on the Wiki (https://developer.dragondreams.ch/wiki/doku.php/gamedev:deigde:exampleprojects) and in the DEExamples repository (https://github.com/LordOfDragons/deexamples).
          artifacts: >
            install-dragengine-${{ github.event.inputs.version }}-linux64.sh,
            install-dragengine-dev-${{ github.event.inputs.version }}-linux64.sh,
            dragengine-${{ github.event.inputs.version }}-linux64.tar.bz2,
            dragengine-dev-${{ github.event.inputs.version }}-linux64.tar.bz2,
            install-deigde-${{ github.event.inputs.version }}-linux64.sh,
            install-deigde-dev-${{ github.event.inputs.version }}-linux64.sh,
            deigde-${{ github.event.inputs.version }}-linux64.tar.bz2,
            deigde-dev-${{ github.event.inputs.version }}-linux64.tar.bz2,
            install-dragengine-${{ github.event.inputs.version }}-windows64.exe,
            install-dragengine-sdk-${{ github.event.inputs.version }}-windows64.exe,
            dragengine-sdk-${{ github.event.inputs.version }}-windows64.zip,
            install-deigde-${{ github.event.inputs.version }}-windows64.exe,
            install-deigde-sdk-${{ github.event.inputs.version }}-windows64.exe,
            deigde-sdk-${{ github.event.inputs.version }}-windows64.zip,
            blender-addon-dragengine-${{ github.event.inputs.version }}.zip,
            dragengine-live-${{ github.event.inputs.version }}.zip,
            install-dragengine-ci-${{ github.event.inputs.version }}-linux64.sh,
            install-deigde-ci-${{ github.event.inputs.version }}-linux64.sh
    
  upgrade_stable:
    needs: [upload]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    
    steps:
      - uses: actions/checkout@v4
        with:
          ref: master
          lfs: true
        
      - uses: devmasx/merge-branch@v1.4.0
        with:
          type: now
          target_branch: stable
          github_token: ${{ github.token }}

  build_doc:
    needs: [upload]
    uses: ./.github/workflows/build_ghpages.yml

  distribute:
    needs: [upload]
    runs-on: ubuntu-20.04
    
    steps:
      - name: Distribute Build
        run: |
          curl -X POST https://api.github.com/repos/LordOfDragons/dedistribute/dispatches \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${{ secrets.ACTION_KEY }}" \
            --data '{"event_type": "Release", "client_payload": { "version": "${{ github.event.inputs.version }}" }}'
