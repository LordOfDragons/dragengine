from SConsCommon import *

import tarfile
import zipfile
import os
import re

Import('parent_env parent_targets parent_report')

envArchive = parent_env.Clone()

# archive all targets

# create builder collecting all archive targets. we need this only so scons knows
# the dependencies. the actual copy uses the full definition which we place in
# the environment

# collect files to archive
filesEngine = {}
filesEngineDev = {}
filesIGDE = {}
filesIGDEDev = {}
filesSpecial = {}

for target in parent_targets.values():
	if 'archive-engine' in target:
		filesEngine.update(target['archive-engine'])
	if 'archive-engine-develop' in target:
		filesEngineDev.update(target['archive-engine-develop'])
	if 'archive-launcher' in target:
		filesEngine.update(target['archive-launcher'])
	if 'archive-launcher-develop' in target:
		filesEngineDev.update(target['archive-launcher-develop'])
	if 'archive-igde' in target:
		filesIGDE.update(target['archive-igde'])
	if 'archive-igde-develop' in target:
		filesIGDEDev.update(target['archive-igde-develop'])
	if 'archive-special' in target:
		filesSpecial.update(target['archive-special'])

# create builders
archive = []
archiveEngine = None
archiveEngineDev = None
archiveIgde = None
archiveIgdeDev = None
archiveSpecial = None

if envArchive['archive_format'] == 'tarbz2':
	archiveSuffix = '.tar.bz2'
	archiveMethod = ArchiveTarBz2
elif envArchive['archive_format'] == 'zip':
	archiveSuffix = '.zip'
	archiveMethod = ArchiveZip

if envArchive['archive_name_engine']:
	filename = '{}{}'.format(envArchive['archive_name_engine'], archiveSuffix)
	archiveEngine = envArchive.Command(filename, filesEngine.values(),
		envArchive.Action(archiveMethod, 'Archiving {}'.format(filename)),
		ArchiveFiles = filesEngine)
	archive.append(archiveEngine)

if envArchive['archive_name_engine_dev']:
	filename = '{}{}'.format(envArchive['archive_name_engine_dev'], archiveSuffix)
	archiveEngineDev = envArchive.Command(filename, filesEngineDev.values(),
		envArchive.Action(archiveMethod, 'Archiving {}'.format(filename)),
		ArchiveFiles = filesEngineDev)
	archive.append(archiveEngineDev)

if envArchive['archive_name_igde']:
	filename = '{}{}'.format(envArchive['archive_name_igde'], archiveSuffix)
	archiveIgde = envArchive.Command(filename, filesIGDE.values(),
		envArchive.Action(archiveMethod, 'Archiving {}'.format(filename)),
		ArchiveFiles = filesIGDE)
	archive.append(archiveIgde)

if envArchive['archive_name_igde_dev']:
	filename = '{}{}'.format(envArchive['archive_name_igde_dev'], archiveSuffix)
	archiveIgdeDev = envArchive.Command(filename, filesIGDEDev.values(),
		envArchive.Action(archiveMethod, 'Archiving {}'.format(filename)),
		ArchiveFiles = filesIGDEDev)
	archive.append(archiveIgdeDev)

if envArchive['archive_name_special']:
	filename = '{}{}'.format(envArchive['archive_name_special'], archiveSuffix)
	archiveSpecial = envArchive.Command(filename, filesSpecial.values(),
		envArchive.Action(archiveMethod, 'Archiving {}'.format(filename)),
		ArchiveFiles = filesSpecial)
	archive.append(archiveSpecial)

for target in parent_targets.values():
	if 'archive' in target:
		envArchive.Depends(archive, target['build'])

envArchive.Alias('archive', archive)

parent_targets['archive'] = {
	'name': 'Archive Drag[en]gine Game Engine',
	'archiveEngine': archiveEngine,
	'archiveEngineDev': archiveEngineDev,
	'archiveIgde': archiveIgde,
	'archiveIgdeDev': archiveIgdeDev,
	'archiveSpecial': archiveSpecial}
