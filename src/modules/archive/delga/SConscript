from SConsCommon import *

Import('parent_env parent_targets parent_report')

envModule = parent_env.Clone()

buildModule = envModule['build_archive_delga'] != TernaryVariableNo
internalModule = envModule['build_archive_delga_internal']
parent_report['build DELGA Archive Module'] = ('yes (internal)' if internalModule else 'yes') if buildModule else 'no'

if not buildModule:
	Return()

libs = []
appendLibrary(envModule, parent_targets['dragengine'], libs, internalModule=internalModule)
appendLibrary(envModule, parent_targets['lib_zlib'], libs)

# fetch values in expanded form for later use
versionString = '1.16'
if envModule['force_version']:
	versionString = envModule['force_version']

pathConfig = '{}/modules/archive/delga/{}'.format(envModule.subst(envModule['path_de_config']), versionString)
pathModule = '{}/modules/archive/delga/{}'.format(envModule.subst(envModule['path_de_data']), versionString)

envModule.Append(CPPFLAGS = parent_env['MODULE_CPPFLAGS'])
envModule.Append(LINKFLAGS = parent_env['MODULE_LINKFLAGS'])

# minizip special environment
envMiniZip = envModule.Clone()
envMiniZip.Append(CPPFLAGS = ['-DUSE_FILE32API'])
envMiniZip.Append(CPPFLAGS = ['-Wno-all', '-Wno-error'])

envModule.Append(CPPPATH = [envModule.Dir('minizip').srcnode().abspath])

# setup the builders
sources = []
headers = []
globFiles(envModule, 'src', '*.cpp', sources)
globFiles(envModule, 'src', '*.h', headers)

install = []
archive = {}

if internalModule:
	envModule.Append(CPPFLAGS = ['-DWITH_INTERNAL_MODULE'])
	envModule.Append(CPPFLAGS = ['-DMODULE_VERSION=\\"{}\\"'.format(versionString)])
	
	objects = [envModule.SharedObject(s) for s in sources]
	objects.append(envMiniZip.SharedObject('minizip/unzip.c'))
	objects.append(envMiniZip.SharedObject('minizip/ioapi.c'))
	envModule.Depends(objects, parent_targets['dragengine']['headers'])
	
	library = envModule.StaticLibrary(target='arcdelga', source=objects, LIBS=libs)
	targetBuild = parent_env.Alias('arc_delga_build', library)
	install.extend(targetBuild)
	
	parent_targets['dragengine']['add internal module'](
		envModule, library, ['lib_zlib'], 'deadRegisterInternalModule')
	
else:
	objects = [envModule.SharedObject(s) for s in sources]
	objects.append(envMiniZip.SharedObject('minizip/unzip.c'))
	objects.append(envMiniZip.SharedObject('minizip/ioapi.c'))
	
	library = envModule.LoadableModule(target='arcdelga', source=objects, LIBS=libs)
	targetBuild = envModule.Alias('arc_delga_build', library)
	
	for l in library:
		if l.name.endswith(envModule['SHLIBSUFFIX']):
			install.append(envModule.Install(pathModule, l))
			archive[os.path.join(pathModule, l.name)] = l
	
	if envModule['OSWindows'] and envModule['CROSSCOMPILE_CLANG'] and envModule['with_install_pdb']:
		pathPdb = os.path.join(envModule.subst(envModule['path_pdb']), 'EngineModules')
		install.append(envModule.Install(pathPdb, 'arcdelga.pdb'))
		archive['{}/arcdelga.pdb'.format(pathPdb)] = envModule.File('arcdelga.pdb')
	
	manifestUpdates = [
		{ 'action': 'filename', 'name': library[0].name, 'keyword': 'FILENAME' },
		{ 'action': 'filesize', 'path': library[0].abspath, 'keyword': 'FILESIZE' },
		{ 'action': 'filehash', 'path': library[0].abspath, 'keyword': 'SHA1SUM' },
		{'action': 'text', 'value': versionString, 'keyword': 'VERSION'}]
	
	for l in reversed( parent_targets[ 'lib_zlib' ][ 'runtimelibs' ] ):
		manifestUpdates.append( { 'action': 'preloadLibrary', 'path': l.name } )
		install.append( envModule.Install( pathModule, l ) )
		archive[ os.path.join( pathModule, l.name ) ] = l
	
	manifest = envModule.File('src/module.xml')
	updateManifest = envModule.Command(manifest, manifest.srcnode(),
		Action(UpdateModuleManifest), ManifestUpdates=manifestUpdates)
	Depends(updateManifest, library)
	Depends(updateManifest, 'SConscript')
	Depends( updateManifest, parent_targets[ 'lib_zlib' ][ 'runtimelibs' ] )
	
	install.append(envModule.Install(pathModule, updateManifest))
	archive[os.path.join(pathModule, 'module.xml')] = updateManifest[0]

targetInstall = envModule.Alias('arc_delga', install)

# source directory required for special commands
srcdir = Dir('.').srcnode().abspath

# cloc
buildClocBare = BuildCLOC(envModule, ['{}/src'.format(srcdir)], '{}/clocreport.csv'.format(srcdir), ['doc'])
Depends(buildClocBare, sources)
Depends(buildClocBare, headers)
buildCloc = envModule.Alias('arc_delga_cloc', buildClocBare)

# add the targets to the targets list
parent_targets['arc_delga'] = {
	'name' : 'DELGA Archive Module',
	'build' : targetBuild,
	'install' : targetInstall,
	'install-engine-runtime' : targetInstall,
	'archive-engine' : archive,
	'cloc' : buildCloc,
	'clocReport' : '{}/clocreport.csv'.format(srcdir) }
