from SConsCommon import *
import xml.etree.ElementTree as ET

# import whatever is given by the parent builder
Import('parent_env parent_targets parent_report')

# setup the environment matching the OS
envModule = parent_env.Clone()

libs = []

if envModule['OSBeOS']:
	libs.extend(['be', 'game'])

# do configure stuff
hasOpenGL = False
buildModule = False

if envModule['build_graphics_opengl'] != TernaryVariableNo:
	conf = envModule.Configure()
	
	if envModule['with_opengl'] != TernaryVariableNo:
		hasOpenGL = conf.CheckLibWithHeader('GL', 'GL/gl.h', 'c++', 'glEnable(0);')
		if hasOpenGL:
			buildModule = True
			envModule.Append(CXXFLAGS = '-DHAS_LIB_OPENGL')
			libs.append('GL')
		if not hasOpenGL and envModule['platform_android'] != 'no':
			hasOpenGL = True
			buildModule = True
		
		if not hasOpenGL:
			hasOpenGL = conf.CheckLibWithHeader('opengl32', 'GL/gl.h', 'c++', 'glEnable(0);')
			if hasOpenGL:
				buildModule = True
				envModule.Append(CXXFLAGS = '-DHAS_LIB_OPENGL')
				libs.append('opengl32')
		
		if envModule['OSMacOS']:
			hasOpenGL = True
			buildModule = True
		
		if hasOpenGL:
			if envModule['OSPosix'] or envModule['OSMacOS']:
				hasFuncProc = conf.CheckLibWithHeader('GL', 'GL/glx.h', 'c++', 'glXGetProcAddress(NULL);')
				if hasFuncProc:
					envModule.Append(CXXFLAGS = '-DHAS_OGL_GETPROC')
		
		if not hasOpenGL and envModule['with_opengl'] == TernaryVariableYes:
			Exit('Requested to use OpenGL but gl.h or libGL could not be found or is not usable.')
	
	conf.Finish()

if envModule['build_graphics_opengl'] == TernaryVariableYes and not hasOpenGL:
	Exit('Requested to build OpenGL Graphics Module but OpenGL could not be found or is not usable.')

# build module if requested
internalModule = envModule['build_graphic_opengl_internal']
parent_report['build OpenGL Graphics Module'] = ('yes (internal)' if internalModule else 'yes') if buildModule else 'no'

if not buildModule:
	Return()

if envModule['OSWindows']:
	libs.append('gdi32')
	#envModule.Append(CXXFLAGS = '-g')

if envModule['platform_android'] != 'no':
	libs.extend(envModule['ANDROID_LIBS'])
	#libs.extend(['dl'])
	libs.extend(['GLESv3', 'GLESv2', 'GLESv1_CM', 'EGL'])

if envModule['OSBeOS']:
	pass
	# beos has a strange compiler bug. without debug flags compiled binary is faulty
	#envModule.Append(CXXFLAGS = ['-g'])

if envModule['OSMacOS']:
	envModule.Append(FRAMEWORKS = ['Cocoa', 'OpenGL'])
	# OpenGL deprecation. for the time being silence until Vulkan is done
	envModule.Append(CPPFLAGS = ['-DGL_SILENCE_DEPRECATION'])
	# Silence more deprecated warnings. Looking at them later
	envModule.Append(CPPFLAGS = ['-Wno-deprecated-declarations'])

if envModule['with_debug']:
	envModule.Append(CPPFLAGS = ['-DWITH_DEBUG'])

syslibs = libs[:]

appendLibrary(envModule, parent_targets['shared_vulkan'], libs)

envModule.Append(CPPFLAGS = ['-DBACKEND_OPENGL'])

if envModule['platform_android'] != 'no' or envModule['platform_webwasm']:
	envModule.Append(CPPFLAGS = ['-DWITH_OPENGLES'])

if envModule['platform_webwasm']:
	envModule.Append(LINKFLAGS = ['-sMIN_WEBGL_VERSION=2'])
	envModule.Append(LINKFLAGS = ['-sOFFSCREENCANVAS_SUPPORT'])
	envModule.Append(LINKFLAGS = ['-sOFFSCREEN_FRAMEBUFFER'])
	envModule.Append(LINKFLAGS = ['-sFULL_ES3'])

# fetch values in expanded form for later use
versionString = '1.26'
if envModule['force_version']:
	versionString = envModule['force_version']

pathConfig = '{}/modules/graphic/opengl/{}'.format(envModule.subst(envModule['path_de_config']), versionString)
pathModule = '{}/modules/graphic/opengl/{}'.format(envModule.subst(envModule['path_de_data']), versionString)
pathShares = '{}/modules/graphic/opengl/{}'.format(envModule.subst(envModule['path_de_share']), versionString)
pathAsset = 'modules/graphic/opengl/{}'.format(versionString)
withEngineDeal = envModule['with_engine_deal']

envModule.Append(CPPFLAGS = parent_env['MODULE_CPPFLAGS'])
envModule.Append(LINKFLAGS = parent_env['MODULE_LINKFLAGS'])

# setup the builders
sources = []
globFiles(envModule, 'src', '*.cpp', sources)
globFiles(envModule, 'squish', '*.cpp', sources)

headers = []
globFiles(envModule, 'src', '*.h', headers)
globFiles(envModule, 'squish', '*.h', headers)

data = []
globFiles(envModule, 'data', '*', data)

shaderSources = []
globFiles(envModule, 'data/shaderSources', '*.shaderSource.xml', shaderSources)

if envModule['OSMacOS']:
	globFiles(envModule, 'src', '*.mm', sources)

appendLibrary(envModule, parent_targets['dragengine'], libs, internalModule=internalModule)

install = []
archive = {}
assetEngine = {}

if internalModule:
	envModule.Append(CPPFLAGS = ['-DWITH_INTERNAL_MODULE'])
	envModule.Append(CPPFLAGS = ['-DMODULE_VERSION=\\"{}\\"'.format(versionString)])
	
	objects = [envModule.SharedObject(s) for s in sources]
	envModule.Depends(objects, parent_targets['dragengine']['headers'])
	
	library = envModule.StaticLibrary(target='graopengl', source=objects, LIBS=libs)
	targetBuild = parent_env.Alias('gra_opengl_build', library)
	install.extend(targetBuild)
	
	parent_targets['dragengine']['add internal module'](envModule, library,
		['shared_vulkan'], 'deoglRegisterInternalModule', syslibs=syslibs)
	
else:
	objects = [envModule.SharedObject(s) for s in sources]
	
	library = envModule.LoadableModule(target='graopengl', source=objects, LIBS=libs)
	targetBuild = envModule.Alias('gra_opengl_build', library)
	
	for l in library:
		if l.name.endswith(envModule['SHLIBSUFFIX']):
			install.append(envModule.Install(pathModule, l))
			archive[os.path.join(pathModule, l.name)] = l
	
	if envModule['OSWindows'] and envModule['CROSSCOMPILE_CLANG'] and envModule['with_install_pdb']:
		pathPdb = os.path.join(envModule.subst(envModule['path_pdb']), 'EngineModules')
		install.append(envModule.Install(pathPdb, 'graopengl.pdb'))
		archive['{}/graopengl.pdb'.format(pathPdb)] = envModule.File('graopengl.pdb')
	
	manifestUpdates = [
		{ 'action': 'filename', 'name': library[0].name, 'keyword': 'FILENAME' },
		{ 'action': 'filesize', 'path': library[0].abspath, 'keyword': 'FILESIZE' },
		{ 'action': 'filehash', 'path': library[0].abspath, 'keyword': 'SHA1SUM' },
		{'action': 'text', 'value': versionString, 'keyword': 'VERSION'}]
	
	manifest = envModule.File('src/module.xml')
	updateManifest = envModule.Command(manifest, manifest.srcnode(),
		Action(UpdateModuleManifest), ManifestUpdates=manifestUpdates)
	Depends(updateManifest, library)
	Depends(updateManifest, 'SConscript')
	
	install.append(envModule.Install(pathModule, updateManifest))
	archive[os.path.join(pathModule, 'module.xml')] = updateManifest[0]

for f in data:
	if withEngineDeal:
		filename = os.path.join(pathAsset, f[5:])
		assetEngine[filename] = envModule.File(f).srcnode()
	else:
		filename = os.path.join(pathShares, f[5:])
		install.append(envModule.InstallAs(filename, f))
		archive[filename] = envModule.File(f).srcnode()


# transpile OpenGL Spir-V
def transpileOpenGLSpirV(env):
	def buildTranspileOpenGLSpirV(target, source, env):
		script = []
		script.append('mkdir -p "{}" || exit 1'.format(target[0].get_dir().abspath))
		
		parts = []
		parts.append('glslangValidator')
		parts.append('-G')
		parts.extend(['--glsl-version', '430'])
		parts.append('-P"#extension GL_ARB_shading_language_include : require"')
		parts.append('-DWITH_SPIRV_OPENGL=1')
		parts.append('--enhanced-msgs')
		parts.append('--error-column')
		for p in env['GLSL_INCPATH']:
			parts.append('-I"{}"'.format(p.abspath))
		parts.append(source[0].abspath)
		parts.extend(['-o', target[0].abspath])
		script.append('{} || exit 1'.format(' '.join(parts)))
		return 1 if os.system('\n'.join(script)) else None
	
	dataPath = 'shaderSources/spirv/opengl'
	basePathTranspiled = env.Dir('data').Dir(dataPath)
	basePathShaderSources = env.Dir('data/shaderSources').srcnode()
	
	env.Append(GLSL_INCPATH=[env.Dir('data/shaderSources').srcnode()])
	
	sharedShaderSources = []
	globFiles(envModule, 'data/shaderSources/shared', '*.glsl', sharedShaderSources)
	
	shaderSources = [
		'data/shaderSources/fragment/2d/solidcolor.shaderSource.xml',
		'data/shaderSources/fragment/2d/textured.shaderSource.xml',
		'data/shaderSources/fragment/bugtest/gs_layer.shaderSource.xml',
		'data/shaderSources/fragment/bugtest/intpacking.shaderSource.xml',
		'data/shaderSources/fragment/bugtest/ubo_idmataccess_bug.shaderSource.xml'
	]
	globFiles(envModule, 'data/shaderSources/compute', '*.shaderSource.xml', shaderSources)
	
	for s in shaderSources:
		shaderSourceFile = env.File(s)
		tree = ET.parse(shaderSourceFile.srcnode().abspath)
		root = tree.getroot()
		
		filename = root.find('source').text
		glslFile = shaderSourceFile.srcnode().get_dir().File(filename)
		relativePath = basePathShaderSources.rel_path(glslFile).replace('.glsl', '.spv')
		spirvFile = basePathTranspiled.File(relativePath)
		env.Depends(spirvFile, [shaderSourceFile, glslFile, sharedShaderSources])
		
		transpiled = env.Command(spirvFile, glslFile, env.Action(
			buildTranspileOpenGLSpirV, 'Transpile Spir-V (GLSL): {}'.format(relativePath)))
		
		if withEngineDeal:
			filename = os.path.join(pathAsset, dataPath, relativePath)
			assetEngine[filename] = spirvFile
		else:
			filename = os.path.join(pathShares, dataPath, relativePath)
			install.append(env.InstallAs(filename, spirvFile))
			archive[filename] = spirvFile

if envModule['OSWindows']:
	transpileOpenGLSpirV(envModule.Clone())
elif envModule['platform_android'] != 'no':
	# transpileOpenGLSpirV(envModule.Clone())
	pass
elif envModule['OSBeOS']:
	pass
elif envModule['OSMacOS']:
	pass
else:
	transpileOpenGLSpirV(envModule.Clone())


targetInstall = envModule.Alias('gra_opengl', install)

# source directory required for special commands
srcdir = Dir('.').srcnode().abspath

# cloc
buildClocBare = BuildCLOC(envModule,
	['{}/src'.format(srcdir), '{}/shaders'.format(srcdir), '{}/shaderSources'.format(srcdir)],
	'{}/clocreport.csv'.format(srcdir), ['doc'])
Depends(buildClocBare, sources)
Depends(buildClocBare, headers)
Depends(buildClocBare, data)
buildCloc = envModule.Alias('gra_opengl_cloc', buildClocBare)

# add the targets to the targets list
parent_targets['gra_opengl'] =  {
	'name' : 'OpenGL Graphic Module',
	'build' : targetBuild,
	'install' : targetInstall,
	'install-engine-runtime' : targetInstall,
	'archive-engine' : archive,
	'asset-engine' : assetEngine,
	'cloc' : buildCloc,
	'clocReport' : '{}/clocreport.csv'.format(srcdir) }
