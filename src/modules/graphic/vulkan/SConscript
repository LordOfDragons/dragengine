from SConsCommon import *

Import('parent_env parent_targets parent_report')

envModule = parent_env.Clone()

if envModule['OSBeOS'] or envModule['OSMacOS']:
	Return()

buildModule = envModule['build_graphics_vulkan'] != TernaryVariableNo

parent_report['build Vulkan Graphics Module'] = 'yes' if buildModule else 'no'

if not buildModule:
	Return()

libs = []

if envModule['platform_android'] != 'no':
	libs.extend(envModule['ANDROID_LIBS'])

if envModule['with_debug']:
	envModule.Append(CPPFLAGS = ['-DWITH_DEBUG'])

appendLibrary(envModule, parent_targets['shared_vulkan'], libs)

envModule.Append(CPPFLAGS = ['-DBACKEND_VULKAN'])

# get parameters
versionString = '1.25'
if envModule['force_version']:
	versionString = envModule['force_version']

pathConfig = '{}/modules/graphic/vulkan/{}'.format(envModule.subst(envModule['path_de_config']), versionString)
pathModule = '{}/modules/graphic/vulkan/{}'.format(envModule.subst(envModule['path_de_data']), versionString)
pathShares = '{}/modules/graphic/vulkan/{}'.format(envModule.subst(envModule['path_de_share']), versionString)

envModule.Append(CPPFLAGS = parent_env['MODULE_CPPFLAGS'])
envModule.Append(LINKFLAGS = parent_env['MODULE_LINKFLAGS'])

# setup the builders
sources = []
globFiles(envModule, 'src', '*.cpp', sources)
globFiles(envModule, 'squish', '*.cpp', sources)

headers = []
globFiles(envModule, 'src', '*.h', headers)
globFiles(envModule, 'squish', '*.h', headers)

data = []
globFiles(envModule, 'data', '*', data)

if envModule['OSMacOS']:
	globFiles(envModule, 'src', '*.mm', sources)

objects = [envModule.SharedObject(s) for s in sources]

appendLibrary(envModule, parent_targets['dragengine'], libs)

library = envModule.LoadableModule(target='gravulkan', source=objects, LIBS=libs)
targetBuild = envModule.Alias('gra_vulkan_build', library)

install = []
archive = {}
for l in library:
	if l.name.endswith(envModule['SHLIBSUFFIX']):
		install.append(envModule.Install(pathModule, l))
		archive[os.path.join(pathModule, l.name)] = l

if envModule['OSWindows'] and envModule['CROSSCOMPILE_CLANG'] and envModule['with_install_pdb']:
	pathPdb = os.path.join(envModule.subst(envModule['path_pdb']), 'EngineModules')
	install.append(envModule.Install(pathPdb, 'gravulkan.pdb'))
	archive['{}/gravulkan.pdb'.format(pathPdb)] = envModule.File('gravulkan.pdb')

manifestUpdates = [
	{'action': 'filename', 'name': library[0].name, 'keyword': 'FILENAME'},
	{'action': 'filesize', 'path': library[0].abspath, 'keyword': 'FILESIZE'},
	{'action': 'filehash', 'path': library[0].abspath, 'keyword': 'SHA1SUM'},
	{'action': 'text', 'value': versionString, 'keyword': 'VERSION'}]

manifest = envModule.File('src/module.xml')
updateManifest = envModule.Command(manifest,
	[manifest.srcnode(), library, 'SConscript'],
	Action(UpdateModuleManifest), ManifestUpdates=manifestUpdates)

install.append(envModule.Install(pathModule, updateManifest))
archive[os.path.join(pathModule, 'module.xml')] = updateManifest[0]

for f in data:
	filename = os.path.join(pathShares, f[5:])
	install.append(envModule.InstallAs(filename, f))
	archive[filename] = envModule.File(f).srcnode()

targetInstall = envModule.Alias('gra_vulkan', install)

# source directory required for special commands
srcdir = Dir('.').srcnode().abspath

# cloc
buildClocBare = BuildCLOC(envModule,
	['{}/src'.format(srcdir), '{}/shaders'.format(srcdir), '{}/shaderSources'.format(srcdir)],
	'{}/clocreport.csv'.format(srcdir), ['doc'])
buildCloc = envModule.Alias('gra_vulkan_cloc', buildClocBare)

# add the targets to the targets list
parent_targets['gra_vulkan'] =  {
	'name' : 'Vulkan Graphic Module',
	'build' : targetBuild,
	'install' : targetInstall,
	'install-engine-runtime' : targetInstall,
	'archive-engine' : archive,
	'cloc' : buildCloc,
	'clocReport' : '{}/clocreport.csv'.format(srcdir) }
