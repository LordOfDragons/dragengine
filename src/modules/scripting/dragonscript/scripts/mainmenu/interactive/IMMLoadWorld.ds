/* 
 * Drag[en]gine DragonScript Script Module
 *
 * Copyright (C) 2020, Roland Pl√ºss (roland@rptd.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */


namespace Dragengine.Gui.MainMenus.Interactive

pin Dragengine.Gui.Events
pin Dragengine.Gui.Layouts
pin Dragengine.LoadSave
pin Dragengine.Preloading
pin Dragengine.Scenery
pin Dragengine.Utils
pin Dragengine.Debugging


/**
 * \brief Load world for nteractive main menu.
 * 
 * Loads a world file using it as the menu the user can interact with. The elements placed
 * in the world are special element classes providing the menu interaction support. This
 * makes the world file fully conclusive not requiring anything else than the world file
 * path to create the menu.
 * 
 * The main camera spot is named "main". The world is required to have one camera spot
 * with this name for the interactive main menu to work correctly.
 */
class IMMLoadWorld
	private var InteractiveMainMenu pMainMenu
	private var GameWorld pWorld
	private var PreloadManager pPreloadManager
	private var StubGameWorld pStubWorld
	
	private var DebugVerifyStubProperties pDebugVerifyStubProperties
	
	
	
	/** \brief Create load world for interactive main menu. */
	public func new(InteractiveMainMenu mainMenu)
		if mainMenu == null
			throw EInvalidParam.new()
		end
		
		pMainMenu = mainMenu
	end
	
	/** \brief Dispose of widget. */
	public func void dispose()
		if pWorld != null
			pWorld.dispose()
			pWorld = null
		end
		pMainMenu = null
		pDebugVerifyStubProperties = null
	end
	
	
	
	/** \brief Interactive main menu. */
	public func InteractiveMainMenu getMainMenu()
		return pMainMenu
	end
	
	/** \brief World or \em null. */
	public func GameWorld getWorld()
		return pWorld
	end
	
	/** \brief Preload manager. */
	public func PreloadManager getPreloadManager()
		return pPreloadManager
	end
	
	/** \brief World stub. */
	public func StubGameWorld getStubWorld()
		return pStubWorld
	end
	
	
	
	/** \brief Debug verify stub properties while loading or null if not used. */
	public func DebugVerifyStubProperties getDebugVerifyStubProperties()
		return pDebugVerifyStubProperties
	end
	
	/** \brief Set debug verify stub properties while loading or null if not used. */
	public func void setDebugVerifyStubProperties(DebugVerifyStubProperties debug)
		pDebugVerifyStubProperties = debug
	end
	
	
	
	/**
	 * \brief Start loading world.
	 * 
	 * \throws EInvalidParam Loading in progress.
	 */
	public func void loadWorld(String path)
		if path == null or pStubWorld != null
			throw EInvalidParam.new()
		end
		
		try
			pPreloadManager = PreloadManager.new()
			
			pWorld = GameWorld.new()
			pStubWorld = StubGameWorld.new(pWorld, pPreloadManager.getCounter())
			pMainMenu.getLoaders().getWorld().loadFromFile(pStubWorld, path, false)
			
			// one solution is to use preloadAll to preload all element classes including
			// xml ones if present. another solution is to preload only actually used
			// classes. for a gmae it is often better to preload all element classes.
			// for a simple main menu world file it is better to preload only what is used.
			// this reduces loading time especially if multiple world files are present
			//pMainMenu.getElementClasses().preloadAll(pPreloadManager)
			pStubWorld.addElementClassesTo(pPreloadManager)
			
			pPreloadManager.addElementClassDependencies()
			pPreloadManager.preloadElementClasses()
			pStubWorld.beginPreloading()
			
		catch Exception e
			pPreloadManager = null
			pStubWorld = null
			if pWorld != null
				pWorld.dispose()
				pWorld = null
			end
			throw
		end
	end
	
	/**
	 * \brief Update loading.
	 * 
	 * If loading fails an exception is thrown and the all temporary instances cleaned up.
	 * 
	 * \returns loaded world instance or \em null if still loading.
	 */
	public func GameWorld update(float elapsed)
		var bool preloadProblemsReported = false
		
		try
			if not pStubWorld.updatePreloading()
				return null
			end
			
			preloadProblemsReported = true
			if reportPreloadProblems()
				throw EInvalidParam.new()
			end
			finishLoading()
			
			pStubWorld = null
			pPreloadManager = null
			
			var GameWorld world = pWorld
			pWorld = null
			return world 
			
		catch Exception e
			if not preloadProblemsReported
				reportPreloadProblems()
			end
			pPreloadManager = null
			pStubWorld = null
			if pWorld != null
				pWorld.dispose()
				pWorld = null
			end
			throw
		end
	end
	
	
	
	/** \brief Finish preloading. */
	protected func void finishLoading()
		var Console console = pMainMenu.getConsole()
		var DecalBuilder decalBuilder = DecalBuilder.new()
		
		try
			pStubWorld.verifyPreloading(console)
			if pDebugVerifyStubProperties != null
				pDebugVerifyStubProperties.verifyWorld(pStubWorld)
			end
			pStubWorld.createAndAddElements(console)
			pStubWorld.createWorldDecals(decalBuilder, console)
			
			// TODO add a world property to define the sky to use. right now just use nothing
			var String value = pStubWorld.getPropertyValueFor("sky", null)
			if value != null
				var Sky sky = pMainMenu.getLoaders().getSky().loadFromFile(value)
				
				var SkyInstance skyInstance = SkyInstance.new()
				skyInstance.setSky(sky)
				pWorld.getWorld().addSky(skyInstance)
				
			end
			
			decalBuilder.dispose()
			
		catch Exception e
			reportPreloadProblems()
			decalBuilder.dispose()
			throw
		end
			
		pMainMenu.setMenuFadeInTime(pStubWorld.getPropertyFloatFor(\
			"menuFadeInTime", pMainMenu.getMenuFadeInTime()))
	end
	
	/** \brief Report preload problems. */
	protected func bool reportPreloadProblems()
		return pMainMenu.getElementClasses().logPreloadProblems(pMainMenu.getConsole())
	end
end
