/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */


namespace Dragengine.Gui.MainMenus.Interactive

pin Dragengine.Preloading
pin Dragengine.Scenery
pin Dragengine.Utils



/**
 * \brief Non-interactive prop for InteractiveMainMenu.
 * 
 * Shows a simple element with optional animator. If animator is used it can have up
 * to one controller.
 * 
 * If first controller is present it has to be non-clamped controller and is incremented
 * by the elapsed time to provide a continous idle animation.
 */
class IMMProp extends BehaviorElement
	private var ECBehaviorTwoStateAnimated.Instance pTwoStateAnimated
	
	
	
	/** \brief Create element. */
	public func new( IMMPropClass eclass ) super( eclass )
		this.pTwoStateAnimated = eclass.getTwoStateAnimated().instance( this )
	end
	
	
	
	/** \brief Main menu. */
	public func InteractiveMainMenu getMainMenu()
		return ( this.getClass() cast IMMPropClass ).getMainMenu()
	end
	
	/** \brief Two state animated. */
	public func ECBehaviorTwoStateAnimated.Instance getTwoStateAnimated()
		return this.pTwoStateAnimated
	end
	
	
	
	/** \brief Start playing back activation part of animator if present. */
	public func void activate()
		this.pTwoStateAnimated.activate()
	end
	
	/** \brief Start playing back deactivate part of animator if present. */
	public func void deactivate()
		this.pTwoStateAnimated.deactivate()
	end
	
	/** \brief Reset initial state immediately. */
	public func void reset()
		this.pTwoStateAnimated.setDeactivated()
	end
	
	/** \brief Set activated immediately. */
	public func void setActivated()
		this.pTwoStateAnimated.setActivated()
	end
	
	
	
	/** \brief Visit element. */
	public func void visit( ElementVisitor visitor )
		( visitor cast IMMElementVisitor ).visitProp( this )
	end
end
