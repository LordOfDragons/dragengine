/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */


namespace Dragengine.Gui.MainMenus.Interactive

pin Dragengine.Scenery
pin Dragengine.Preloading
pin Dragengine.Utils



/**
 * \brief Non-interactive prop for InteractiveMainMenu.
 * 
 * Shows a simple element with optional animator. If animator is used it can have up to one
 * controller. If present the controller has to be non-clamped and is incremented by the
 * elapsed time to provide a continous idle animation.
 */
class IMMPropClass extends BehaviorElementClass
	private var InteractiveMainMenu pMainMenu
	private var ECBehaviorComponent pComponent
	private var ECBehaviorCollider pCollider
	private var ECBehaviorTwoStateAnimated pTwoStateAnimated
	
	
	
	/** \brief Create element class. */
	public func new( InteractiveMainMenu mainMenu ) this( mainMenu, "DE_IMM_Prop" )
	end
	
	/** \brief Create element class. */
	public func new( InteractiveMainMenu mainMenu, String name ) super( name, mainMenu.getLoaders() )
		this.pMainMenu = mainMenu
		this.pComponent = ECBehaviorComponent.new( this, null )
		this.pCollider = ECBehaviorCollider.new( this, this.pComponent )
		this.pTwoStateAnimated = ECBehaviorTwoStateAnimated.new( this, \
			this.pComponent, mainMenu.getLoaders(), mainMenu.getTriggerTable() )
	end
	
	
	
	/** \brief Main menu. */
	public func InteractiveMainMenu getMainMenu()
		return this.pMainMenu
	end
	
	/** \brief Component behavior. */
	public func ECBehaviorComponent getComponent()
		return this.pComponent
	end
	
	/** \brief Collider behavior. */
	public func ECBehaviorCollider getCollider()
		return this.pCollider
	end
	
	/** \brief Two-State animated behavior. */
	public func ECBehaviorTwoStateAnimated getTwoStateAnimated()
		return this.pTwoStateAnimated
	end
	
	
	
	/** \brief Create IMMPropClass with different name. */
	public func ElementClass duplicateNamed( String name )
		return IMMPropClass.new( this.pMainMenu, name )
	end
	
	/** \brief Create element instance. */
	protected func Element createElement()
		return IMMProp.new( this )
	end
end
