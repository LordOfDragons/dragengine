/* 
 * Drag[en]gine DragonScript Script Module
 *
 * Copyright (C) 2020, Roland PlÃ¼ss (roland@rptd.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */


namespace Dragengine.Gui.MainMenus.Interactive

pin Dragengine.Gui.Layouts
pin Dragengine.Scenery
pin Dragengine.Utils


/**
 * \brief Display text for interactive main menu.
 * 
 * Shows a label at the bottom side of the main menu window overlaying the render panel
 * displaying the display text of active hot spots. Other text can be shown too. A full
 * screen panel is placed over the render window with BorderLayout. A smaller panel is
 * placed in the bottom area of this layout with CentrizedBoxLayout. The label is located
 * inside. The panel is styled using "Panel.IMMTextDisplay". This is mainly used to add
 * the desired padding from the screen border. The label only is styled using
 * "Label.IMMTextDisplay". The main panel is shown if the text to display is not empty.
 * If empty the panel is hidden.
 */
class IMMTextDisplay extends Panel
	/** \brief States. */
	public enum State
		/** \brief Text hidden. */
		hidden
		
		/** \brief Fading in. */
		fadeIn
		
		/** \brief Text shown. */
		shown
		
		/** \brief Fade out. */
		fadeOut
	end
	
	
	
	private var InteractiveMainMenu pMainMenu
	private var TranslationManager pTranslationManager
	private var String pText
	private var String pRealText
	private var Label pLabel
	private var float pFadeTime
	private var float pElapsedTime
	private var State pState
	
	
	
	/** \brief Create text display for interactive main menu. */
	public func new(InteractiveMainMenu mainMenu)
		if mainMenu == null
			throw EInvalidParam.new()
		end
		
		pMainMenu = mainMenu
		pText = ""
		pRealText = ""
		pFadeTime = 0.3
		pElapsedTime = 0
		pState = State.hidden
		
		setDesignerSelector("Panel.IMMTextDisplay")
		setLayout(BorderLayout.new())
		
		var Panel panel = Panel.new()
		panel.setLayout(CentrizedBoxLayout.new(LayoutAxis.y))
		
		pLabel = Label.new("")
		pLabel.setDesignerSelector("Label.IMMTextDisplay")
		panel.addWidget(pLabel)
		addWidget(panel, BorderLayout.Area.bottom)
		mainMenu.addWidget(this)
		
		//setVisible(false)
		setTransparency(0.0)
		
		var BaseGameApp app = BaseGameApp.getApp()
		if app != null
			pTranslationManager = app.getTranslationManager()
		end
	end
	
	/** \brief Dispose of widget. */
	public func void dispose()
		super.dispose()
		pLabel = null
	end
	
	
	
	/** \brief Interactive main menu. */
	public func InteractiveMainMenu getMainMenu()
		return pMainMenu
	end
	
	/** \brief Text to display. */
	public func String getText()
		return pText
	end
	
	/** \brief Set text to display. */
	public func void setText(String text)
		if text.equals(pText)
			return
		end
		
		pText = text
		
		if not text.empty()
			pRealText = text  // avoid empty text while fading
		end
		
		onTextChanged()
	end
	
	/** \brief Clear text to display. */
	public func void clearText()
		setText("")
	end
	
	/** \brief Fade time. */
	public func float getFadeTime()
		return pFadeTime
	end
	
	/** \brief Set fade time. */
	public func void setFadeTime(float time)
		pFadeTime = DEMath.max(time, 0.0)
	end
	
	/** \brief Elapsed fade time. */
	public func float getElapsedTime()
		return pElapsedTime
	end
	
	/** \brief Set elapsed fade time. */
	protected func void setElapsedTime(float time)
		pElapsedTime = time
	end
	
	/** \brief State. */
	public func State getState()
		return pState
	end
	
	/** \brief Set state. */
	protected func void setState(State state)
		pState = state
	end
	
	/** \brief Reset. */
	public func void reset()
		pText = ""
		pRealText = ""
		pElapsedTime = 0
		pState = State.hidden
	end
	
	/**
	 * \brief Translation manager or null.
	 * \version 1.16
	 */
	public func TranslationManager getTranslationManager()
		return pTranslationManager
	end
	
	/**
	 * \brief Set translation manager or null.
	 * \version 1.16
	 */
	public func void setTranslationManager(TranslationManager translationManager)
		pTranslationManager = translationManager
	end
	
	
	
	/** \brief Update camera. */
	public func void update(float elapsed)
		select pState
		case State.fadeIn
			pElapsedTime += elapsed
			updateFading()
			if pElapsedTime >= pFadeTime
				pState = State.shown
			end
			
		case State.fadeOut
			pElapsedTime += elapsed
			updateFading()
			if pElapsedTime >= pFadeTime
				pState = State.hidden
			end
		end
	end
	
	
	
	/** \brief Text changed. */
	protected func void onTextChanged()
		pLabel.setText(pRealText)
		
		if pText.empty()
			select pState
			case State.shown
				pState = State.fadeOut
				pElapsedTime = 0
				
			case State.fadeIn
				pState = State.fadeOut
				pElapsedTime = pFadeTime - pElapsedTime
			end
			
		else
			select pState
			case State.hidden
				pState = State.fadeIn
				pElapsedTime = 0
				
			case State.fadeOut
				pState = State.fadeIn
				pElapsedTime = pFadeTime - pElapsedTime
			end
		end
		
		//setVisible(not pText.empty())
	end
	
	/** \brief Update fading. */
	protected func void updateFading()
		select pState
		case State.fadeIn
			setTransparency(DEMath.linearStep(pElapsedTime, 0.0, pFadeTime, 0.0, 1.0))
			
		case State.fadeOut
			setTransparency(DEMath.linearStep(pElapsedTime, 0.0, pFadeTime, 1.0, 0.0))
		end
	end
	
	
	
	/** \brief Label. */
	public func Label getLabel()
		return pLabel
	end
end
