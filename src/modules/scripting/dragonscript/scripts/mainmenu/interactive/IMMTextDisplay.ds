/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */


namespace Dragengine.Gui.MainMenus.Interactive

pin Dragengine.Gui.Layouts
pin Dragengine.Scenery
pin Dragengine.Utils


/**
 * \brief Display text for interactive main menu.
 * 
 * Shows a label at the bottom side of the main menu window overlaying the render panel
 * displaying the display text of active hot spots. Other text can be shown too. A full
 * screen panel is placed over the render window with BorderLayout. A smaller panel is
 * placed in the bottom area of this layout with CentrizedBoxLayout. The label is located
 * inside. The panel is styled using "Panel.IMMTextDisplay". This is mainly used to add
 * the desired padding from the screen border. The label only is styled using
 * "Label.IMMTextDisplay". The main panel is shown if the text to display is not empty.
 * If empty the panel is hidden.
 */
class IMMTextDisplay extends Panel
	/** \brief States. */
	enum State
		/** \brief Text hidden. */
		hidden
		
		/** \brief Fading in. */
		fadeIn
		
		/** \brief Text shown. */
		shown
		
		/** \brief Fade out. */
		fadeOut
	end
	
	
	
	var InteractiveMainMenu pMainMenu
	var String pText
	var String pRealText
	var Label pLabel
	var float pFadeTime
	var float pElapsedTime
	var State pState
	
	
	
	/** \brief Create text display for interactive main menu. */
	func new(InteractiveMainMenu mainMenu)
		if mainMenu == null
			throw EInvalidParam.new()
		end
		
		pMainMenu = mainMenu
		pText = ""
		pRealText = ""
		pFadeTime = 0.3
		pElapsedTime = 0
		pState = State.hidden
		
		setDesignerSelector("Panel.IMMTextDisplay")
		setLayout(BorderLayout.new())
		
		var Panel panel = Panel.new()
		panel.setLayout(CentrizedBoxLayout.new(LayoutAxis.y))
		
		pLabel = Label.new("")
		pLabel.setDesignerSelector("Label.IMMTextDisplay")
		panel.addWidget(pLabel)
		addWidget(panel, BorderLayout.Area.bottom)
		mainMenu.addWidget(this)
		
		//setVisible(false)
		setTransparency(0.0)
	end
	
	/** \brief Dispose of widget. */
	func void dispose()
		super.dispose()
		pLabel = null
	end
	
	
	
	/** \brief Interactive main menu. */
	func InteractiveMainMenu getMainMenu()
		return pMainMenu
	end
	
	/** \brief Text to display. */
	func String getText()
		return pText
	end
	
	/** \brief Set text to display. */
	func void setText(String text)
		if text.equals(pText)
			return
		end
		
		pText = text
		
		if not text.empty()
			pRealText = text  // avoid empty text while fading
		end
		
		onTextChanged()
	end
	
	/** \brief Clear text to display. */
	func void clearText()
		setText("")
	end
	
	/** \brief Fade time. */
	func float getFadeTime()
		return pFadeTime
	end
	
	/** \brief Set fade time. */
	func void setFadeTime(float time)
		pFadeTime = DEMath.max(time, 0.0)
	end
	
	/** \brief Elapsed fade time. */
	func float getElapsedTime()
		return pElapsedTime
	end
	
	/** \brief Set elapsed fade time. */
	protected func void setElapsedTime(float time)
		pElapsedTime = time
	end
	
	/** \brief State. */
	func State getState()
		return pState
	end
	
	/** \brief Set state. */
	protected func void setState(State state)
		pState = state
	end
	
	/** \brief Reset. */
	func void reset()
		pText = ""
		pRealText = ""
		pElapsedTime = 0
		pState = State.hidden
	end
	
	
	
	/** \brief Update camera. */
	func void update(float elapsed)
		select pState
		case State.fadeIn
			pElapsedTime += elapsed
			updateFading()
			if pElapsedTime >= pFadeTime
				pState = State.shown
			end
			
		case State.fadeOut
			pElapsedTime += elapsed
			updateFading()
			if pElapsedTime >= pFadeTime
				pState = State.hidden
			end
		end
	end
	
	
	
	/** \brief Text changed. */
	protected func void onTextChanged()
		pLabel.setText(pRealText)
		
		if pText.empty()
			select pState
			case State.shown
				pState = State.fadeOut
				pElapsedTime = 0
				
			case State.fadeIn
				pState = State.fadeOut
				pElapsedTime = pFadeTime - pElapsedTime
			end
			
		else
			select pState
			case State.hidden
				pState = State.fadeIn
				pElapsedTime = 0
				
			case State.fadeOut
				pState = State.fadeIn
				pElapsedTime = pFadeTime - pElapsedTime
			end
		end
		
		//setVisible(not pText.empty())
	end
	
	/** \brief Update fading. */
	protected func void updateFading()
		select pState
		case State.fadeIn
			setTransparency(DEMath.linearStep(pElapsedTime, 0.0, pFadeTime, 0.0, 1.0))
			
		case State.fadeOut
			setTransparency(DEMath.linearStep(pElapsedTime, 0.0, pFadeTime, 1.0, 0.0))
		end
	end
	
	
	
	/** \brief Label. */
	func Label getLabel()
		return pLabel
	end
end
