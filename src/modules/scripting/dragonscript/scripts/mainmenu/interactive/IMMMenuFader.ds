/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */


namespace Dragengine.Gui.MainMenus.Interactive

pin Dragengine.Gui.MousePointers
pin Dragengine.Utils


/**
 * \brief Menu fader for interactive main menu.
 * 
 * Fades menu over black.
 */
class IMMMenuFader
	private var InteractiveMainMenu pMainMenu
	private var float pCurTransparency
	private var float pTargetTransparency
	private var float pFadeTime
	private var float pElapsed
	
	
	
	/** \brief Create widget fader for interactive main menu. */
	public func new(InteractiveMainMenu mainMenu)
		if mainMenu == null
			throw ENullPointer.new("mainMenu")
		end
		
		pMainMenu = mainMenu
		pCurTransparency = 1
		pTargetTransparency = 1
	end
	
	/** \brief Dispose of widget. */
	public func void dispose()
		pMainMenu = null
	end
	
	
	
	/** \brief Interactive main menu. */
	public func InteractiveMainMenu getMainMenu()
		return pMainMenu
	end
	
	/** \brief Current transparency. */
	public func float getCurTransparency()
		return pCurTransparency
	end
	
	/**
	 * \brief Set current transparency.
	 * 
	 * Stops fading if running.
	 */
	public func void setCurTransparency(float transparency)
		pCurTransparency = transparency
		pTargetTransparency = transparency
		pFadeTime = 0
		pElapsed = 0
		
		updateMenuFade()
	end
	
	/** \brief Camera transparency to fade to or null. */
	public func float getTargetTransparency()
		return pTargetTransparency
	end
	
	/** \brief Fade time. */
	public func float getFadeTime()
		return pFadeTime
	end
	
	/** \brief Elapsed fade time. */
	public func float getElapsed()
		return pElapsed
	end
	
	
	
	/** \brief Widget is fading. */
	public func bool isFading()
		return pFadeTime > 0
	end
	
	/**
	 * \brief Fade to transparency.
	 * 
	 * Starts fading.
	 */
	public func void fadeTo(float transparency, float fadeTime)
		fadeTime = DEMath.max(fadeTime, 0.0)
		if fadeTime < 0.01
			setCurTransparency(transparency)
			return
		end
		
		pTargetTransparency = transparency
		pFadeTime = fadeTime
		pElapsed = 0
	end
	
	/** \brief Update fading.
	 */
	public func void update(float elapsed)
		if pFadeTime == 0
			return
		end
		
		// fade
		pElapsed += elapsed
		if pElapsed < pFadeTime
			updateMenuFade()
			
		else
			setCurTransparency(pTargetTransparency)
		end
	end
	
	
	
	/** \brief Update menu fade. */
	protected func void updateMenuFade()
		var float transparency = DEMath.smoothStep(pElapsed, 0, pFadeTime, pCurTransparency, pTargetTransparency)
		
		pMainMenu.getWorldRenderer().setTransparency(transparency)
		pMainMenu.getMicrophone().setVolume(transparency)
		setMousePointerFade(transparency)
	end
	
	/** \brief Set mouse pointer fade if possible. */
	protected func void setMousePointerFade(float transparency)
		var Desktop desktop = pMainMenu.getDesktop()
		if desktop == null
			return  // in case this update is triggered during construction time
		end
		
		var MousePointer mousePointer = desktop.getMousePointerInstance()
		if mousePointer != null
			mousePointer.getCanvas().setTransparency(transparency)
		end
	end
end
