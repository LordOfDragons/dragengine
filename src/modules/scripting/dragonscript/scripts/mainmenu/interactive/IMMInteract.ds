/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */


namespace Dragengine.Gui.MainMenus.Interactive

pin Dragengine.Gui.Events
pin Dragengine.Scenery
pin Dragengine.Utils


/**
 * \brief Interact handler for interactive main menu.
 * 
 * Checks for hot-spot the mouse cursor is hovering above and triggers actions if primary
 * mouse button is pressed.
 */
class IMMInteract implements ColliderListener
	/** \brief Interactive main menu. */
	private var InteractiveMainMenu pMainMenu
	
	/** \brief Collision filter. */
	private var CollisionFilter pCollisionFilter
	
	/** \brief Hot-spot under cursor or null. */
	private var IMMBehaviorHotSpot.Instance pHoverHotSpot
	
	
	
	/** \brief Create interact handler for interactive main menu. */
	public func new(InteractiveMainMenu mainMenu)
		if mainMenu == null
			throw EInvalidParam.new()
		end
		
		pMainMenu = mainMenu
		pCollisionFilter = createCollisionFilter()
	end
	
	/** \brief Dispose of widget. */
	public func void dispose()
		pHoverHotSpot = null
		pMainMenu = null
	end
	
	
	
	/** \brief Interactive main menu. */
	public func InteractiveMainMenu getMainMenu()
		return pMainMenu
	end
	
	/** \brief Hot-spot under cursor or null. */
	public func IMMBehaviorHotSpot.Instance getHoverHotSpot()
		return pHoverHotSpot
	end
	
	
	
	/** \brief Update camera. */
	public func void update(float elapsed)
		// hovering over hot-spot is only enabled if no hot-spot is active, activating
		// or deactivating. basically only in pure main menu mode
		if pMainMenu.getActiveHotSpot() == null
			hotSpotFromMouseCursor()
			
		else
			clearHotSpot()
		end
	end
	
	/** \brief Mouse button pressed. */
	public func void onButtonPress(MouseEvent event)
		select event.getButton()
		case InputEventMouseButton.left
			if pHoverHotSpot != null and pMainMenu.getActiveHotSpot() == null
				pMainMenu.activateHotSpot(pHoverHotSpot)
			end
			
		case InputEventMouseButton.right, InputEventMouseButton.middle
			if pMainMenu.getActiveHotSpot() != null
				pMainMenu.deactivateHotSpot()
			end
		end
	end
	
	/** \brief Key pressed. */
	public func void onKeyPress(KeyEvent event)
		select event.getKeyCode()
		case InputEventKey.escape
			if pMainMenu.getActiveHotSpot() != null
				pMainMenu.deactivateHotSpot()
			end
		end
	end
	
	
	
	/** \brief Create collision filter. */
	protected func CollisionFilter createCollisionFilter()
		var LayerMask layerMask = LayerMask.new()
		layerMask.setBit(BaseGameApp.CollisionFilterBit.geometry)
		layerMask.setBit(BaseGameApp.CollisionFilterBit.dynamic)
		layerMask.setBit(BaseGameApp.CollisionFilterBit.actorAI) // used by IMMBehaviorColliderInteract
		return CollisionFilter.new(layerMask)
	end
	
	/** \brief Update hotspot from mouse cursor position. */
	protected func void hotSpotFromMouseCursor()
		var DVector rayOrigin = pMainMenu.getCamera().getPosition()
		var WorldRenderer worldRenderer = pMainMenu.getWorldRenderer()
		var Vector rayDirection = worldRenderer.backProject(\
			pMainMenu.getDesktop().getMouseLocation() - worldRenderer.getScreenPosition())
		
		var IMMBehaviorHotSpot.Instance lastHotSpot = pHoverHotSpot
		pHoverHotSpot = null
		
		pMainMenu.getWorld().getWorld().rayHitsClosest(rayOrigin, \
			rayDirection * 300.0, this, pCollisionFilter)
		
		if pHoverHotSpot == lastHotSpot
			return
		end
		
		if lastHotSpot != null
			lastHotSpot.onHotSpotHoverExit()
		end
		
		if pHoverHotSpot != null
			pHoverHotSpot.onHotSpotHoverEnter()
		end
	end
	
	/** \brief Clear hotspot. */
	protected func void clearHotSpot()
		if pHoverHotSpot == null
			return
		end
		
		if pHoverHotSpot != null
			pHoverHotSpot.onHotSpotHoverExit()
		end
		pHoverHotSpot = null
	end
	
	
	
	/** \brief Store hot-spot if hit collider is a hot-spot. */
	public func void collisionResponse(Collider owner, CollisionInfo info)
		if not info.isCollider()
			return
		end
		
		var Object hitOwner = info.getCollider().getOwner()
		if hitOwner == null
			return
		end
		
		if not hitOwner castable BehaviorElement
			return
		end
		
		var IMMBehaviorHotSpot.Instance behavior = IMMBehaviorHotSpot.getInstanceIn(hitOwner cast BehaviorElement)
		if behavior != null
			pHoverHotSpot = behavior
		end
	end
	
	/** \brief All colliders can be hit. */
	public func bool canHitCollider(Collider owner, Collider collider)
		return true
	end
	
	/** \brief Not used. */
	public func void colliderChanged(Collider owner)
	end
end
