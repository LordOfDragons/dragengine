/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */


namespace Dragengine.Gui.MainMenus.Interactive

pin Dragengine.Gui.Events
pin Dragengine.Gui.Layouts
pin Dragengine.LoadSave
pin Dragengine.Preloading
pin Dragengine.Scenery
pin Dragengine.TriggerSystem
pin Dragengine.Utils


/**
 * \brief Interactive main menu using world.
 * 
 * Loads a world file using it as the menu the user can interact with. The elements placed
 * in the world are special element classes providing the menu interaction support. This
 * makes the world file fully conclusive not requiring anything else than the world file
 * path to create the menu.
 * 
 * The main camera spot is named "main". The world is required to have one camera spot
 * with this name for the interactive main menu to work correctly.
 */
class InteractiveMainMenu extends Window
	/** \brief Deactivate hotspot on window close listener. */
	class WindowCloseDeactivateHotSpot extends DefaultWindowListener
		/** \brief Main menu. */
		var InteractiveMainMenu pMainMenu
		
		/** \brief Create listener. */
		func new(InteractiveMainMenu mainMenu)
			pMainMenu = mainMenu
		end
		
		/** \brief Window is closing. */
		func void onWindowClosing(WindowEvent event)
			if pMainMenu.getActiveHotSpot() != null
				pMainMenu.deactivateHotSpot()
			end
		end
	end
	
	/**
	 * \brief \ref BehaviorFactoryHelper modified for use with \ref InteractiveMainMenu.
	 * \version 1.28
	 */
	private class ModifiedBehaviorFactoryHelper extends BehaviorFactoryHelper
		var InteractiveMainMenu pMainMenu
		
		func new(InteractiveMainMenu mainMenu)
			pMainMenu = mainMenu
		end
		
		func TSTriggerTable defaultTriggerTable()
			return pMainMenu.getTriggerTable()
		end
		
		func Loaders defaultLoaders()
			return pMainMenu.getLoaders()
		end
		
		func MutableID defaultIDGenerator()
			return pMainMenu.getIDGenerator()
		end
		
		func Console defaultConsole()
			return pMainMenu.getConsole()
		end
		
		func ElementClassList defaultElementClassList()
			return pMainMenu.getElementClasses()
		end
	end
	
	
	/** \brief States. */
	public enum State
		/** \brief Constructed but no world loaded yet. */
		constructed
		
		/** \brief Loading world. */
		loadingWorld
		
		/** \brief Fade in main menu. */
		mainMenuFadeIn
		
		/** \brief Idle in main menu. */
		mainMenuIdle
		
		/** \brief Activating a hot-spot. */
		hotSpotActive
		
		/** \brief Idling in hot-spot. */
		hotSpotIdle
		
		/** \brief Deactivating hot-spot. */
		hotSpotDeactivate
	end
	
	
	
	var Console pConsole
	var Loaders pLoaders
	var String pDirXmlElementClasses
	var IMMLoadWorld pLoadWorld
	var IMMAnimateCamera pAnimateCamera
	var IMMTextDisplay pTextDisplay
	var IMMMenuFader pMenuFader
	var IMMInteract pInteract
	var float pMenuFadeInTime
	
	var String pPathWorld
	var GameWorld pWorld
	var Camera pCamera
	var Microphone pMicrophone
	var ElementClassList pElementClasses
	var MutableID pIDGenerator
	var WorldRenderer pWorldRenderer
	var Dictionary pActions
	var String pMainCameraSpot
	var IMMBehaviorHotSpot.Instance pActiveHotSpot
	var State pState
	var TSTriggerTable pTriggerTable
	var BehaviorFactoryList pBehaviorFactories
	var ECBehaviorPlayerControllable.Tracker pPlayerControlledActor
	
	
	
	/**
	 * \brief Create interactive main menu.
	 * 
	 * The window covers the entire desktop size. Starts out as black empty window. After
	 * creating the window you can do customizations. Once ready call loadWorld() to start
	 * loading the world file. Once the world finished loading fades in from black.
	 * 
	 * \param console Console to output messages to
	 */
	func new(Console console)
		if console == null
			throw EInvalidParam.new()
		end
		
		pConsole = console
		pLoadWorld = IMMLoadWorld.new(this)
		
		pBehaviorFactories = BehaviorFactoryList.new()
		createAndAddBehaviorFactories()
		
		pPlayerControlledActor = ECBehaviorPlayerControllable.Tracker.new()
		pAnimateCamera = IMMAnimateCamera.new(this)
		pElementClasses = ElementClassList.new()
		pIDGenerator = MutableID.new(1)
		pActions = Dictionary.new()
		pMainCameraSpot = "main"
		pState = State.constructed
		pMenuFadeInTime = 3
		pTriggerTable = TSTriggerTable.new()
		
		pLoaders = Loaders.new(console)
		pLoaders.getWorld().setElementClassList(pElementClasses)
		
		setTitle("") // no title
		setWindowState(Window.WindowState.maximized)
		setCanClose(false)
		setCanMaximize(false)
		setCanMinimize(false)
		setCanResize(false)
		setDesignerSelector("InteractiveMainMenu")
		
		setLayout(StackLayout.new())
		
		pWorldRenderer = WorldRenderer.new()
		addWidget(pWorldRenderer)
		
		pTextDisplay = IMMTextDisplay.new(this)
		
		pInteract = IMMInteract.new(this)
		
		addElementClasses()
		
		pCamera = createCamera()
		pMicrophone = Microphone.new()
		pMicrophone.setLayerMask(LayerMask.newWith(BaseGameApp.WorldLayerBit.audio))
		
		pMenuFader = IMMMenuFader.new(this)
		pMenuFader.setCurTransparency(0)
		
		resume()
	end
	
	/** \brief Dispose of widget. */
	func void dispose()
		pause()
		
		pMicrophone = null
		pCamera = null
		if pWorld != null
			pWorld.dispose()
			pWorld = null
		end
		
		if pElementClasses != null
			pElementClasses.dispose()
			pElementClasses = null
		end
		pBehaviorFactories = null
		
		if pTriggerTable != null
			pTriggerTable.dispose()
			pTriggerTable = null
		end
		
		pInteract = null
		
		if pMenuFader != null
			pMenuFader.dispose()
			pMenuFader = null
		end
		
		pPlayerControlledActor = null
		pWorldRenderer = null
		pActions = null
		
		pActiveHotSpot = null
		pAnimateCamera = null
		pTextDisplay = null
		pLoadWorld = null
		pLoaders = null
		pConsole = null
		
		super.dispose()
	end
	
	
	
	/** \brief Console. */
	func Console getConsole()
		return pConsole
	end
	
	/** \brief Loaders. */
	func Loaders getLoaders()
		return pLoaders
	end
	
	/**
	 * \brief Behavior factories.
	 * \version 1.28
	 */
	func BehaviorFactoryList getBehaviorFactories()
		return pBehaviorFactories
	end
	
	/** \brief XML element directory. */
	func String getDirXmlElementClasses()
		return pDirXmlElementClasses
	end
	
	/** \brief Set XML element directory. */
	func void setDirXmlElementClasses(String pathDir)
		pDirXmlElementClasses = pathDir
	end
	
	/** \brief World loader. */
	func IMMLoadWorld getLoadWorld()
		return pLoadWorld
	end
	
	/** \brief Set world loader. */
	func void setLoadWorld(IMMLoadWorld loadWorld)
		if loadWorld == null
			throw EInvalidParam.new()
		end
		pLoadWorld = loadWorld
	end
	
	/** \brief Animate camera. */
	func IMMAnimateCamera getAnimateCamera()
		return pAnimateCamera
	end
	
	/** \brief Set animate camera. */
	func void setAnimateCamera(IMMAnimateCamera animateCamera)
		if animateCamera == null
			throw EInvalidParam.new()
		end
		pAnimateCamera = animateCamera
	end
	
	/** \brief Menu fader. */
	func IMMMenuFader getWorldRendererFader()
		return pMenuFader
	end
	
	/** \brief Set menu fader. */
	func void setMenuFader(IMMMenuFader fader)
		pMenuFader = fader
	end
	
	/** \brief Text display. */
	func IMMTextDisplay getTextDisplay()
		return pTextDisplay
	end
	
	/** \brief Set text display. */
	func void setTextDisplay(IMMTextDisplay textDisplay)
		if textDisplay == null
			throw EInvalidParam.new()
		end
		
		if textDisplay == pTextDisplay
			return
		end
		
		pTextDisplay.safeDispose()
		pTextDisplay = textDisplay
	end
	
	/** \brief Interact. */
	func IMMInteract getInteract()
		return pInteract
	end
	
	/** \brief Set interact. */
	func void setInteract(IMMInteract interact)
		pInteract = interact
	end
	
	/** \brief Main menu fade in time. */
	func float getMenuFadeInTime()
		return pMenuFadeInTime
	end
	
	/** \brief Set main menu fade in time. */
	func void setMenuFadeInTime(float time)
		pMenuFadeInTime = DEMath.max(time, 0.0)
	end
	
	/**
	 * \brief Player controlled actor tracker.
	 * \version 1.28
	 */
	func ECBehaviorPlayerControllable.Tracker getPlayerControlledActor()
		return pPlayerControlledActor
	end
	
	
	
	/** \brief World filename or \em null if none loaded yet. */
	func String getPathWorld()
		return pPathWorld
	end
	
	/** \brief World or \em null. */
	func GameWorld getWorld()
		return pWorld
	end
	
	/** \brief Camera or \em null. */
	func Camera getCamera()
		return pCamera
	end
	
	/** \brief Microphone or \em null. */
	func Microphone getMicrophone()
		return pMicrophone
	end
	
	/** \brief Element classes. */
	func ElementClassList getElementClasses()
		return pElementClasses
	end
	
	/**
	 * \brief ID Generator.
	 * \version 1.28
	 */
	func MutableID getIDGenerator()
		return pIDGenerator
	end
	
	/** \brief World renderer. */
	func WorldRenderer getWorldRenderer()
		return pWorldRenderer
	end
	
	/** \brief Name of main camera spot is no hot-spot is active. */
	func String getMainCameraSpot()
		return pMainCameraSpot
	end
	
	/** \brief Set name of main camera spot is no hot-spot is active. */
	func void setMainCameraSpot(String name)
		pMainCameraSpot = name
	end
	
	/** \brief State. */
	func State getState()
		return pState
	end
	
	/** \brief Set state. */
	protected func void setState(State state)
		pState = state
	end
	
	/** \brief Trigger table. */
	func TSTriggerTable getTriggerTable()
		return pTriggerTable
	end
	
	/** \brief Main menu is loading and is not ready to be used. */
	func bool isNotReady()
		return pState == State.constructed or pState == State.loadingWorld
	end
	
	/** \brief Main menu is loaded and ready to be used. */
	func bool isReady()
		return pState != State.constructed and pState != State.loadingWorld
	end
	
	
	
	/** \brief Active hot-spot or null. */
	func IMMBehaviorHotSpot.Instance getActiveHotSpot()
		return pActiveHotSpot
	end
	
	/** \brief Activate hot-spot with transition. */
	func void activateHotSpot(IMMBehaviorHotSpot.Instance hotSpot)
		if pState == State.constructed
			throw EInvalidParam.new("Not allowed in constructed state")
		end
		if hotSpot == null
			throw EInvalidParam.new("hotSpot is null")
		end
		
		if hotSpot == pActiveHotSpot
			return
		end
		
		if pActiveHotSpot != null
			pActiveHotSpot.onHotSpotDeactivated()
		end
		
		pActiveHotSpot = hotSpot
		
		hotSpot.onHotSpotActivated()
		
		var String cameraSpot = pMainCameraSpot
		if hotSpot.getCameraSpot() != null
			cameraSpot = hotSpot.getCameraSpot()
		end
		pAnimateCamera.transitionTo(getCameraSpotNamed(cameraSpot), hotSpot.getTransitionTime())
		
		pState = State.hotSpotActive
	end
	
	/** \brief Deactivate hot-spot with transition. */
	func void deactivateHotSpot()
		if pState == State.constructed
			throw EInvalidParam.new("Not allowed in constructed state")
		end
		if pActiveHotSpot == null
			throw EInvalidParam.new("Hot spot is null")
		end
		
		var float transitionTime = pActiveHotSpot.getTransitionTime()
		
		pActiveHotSpot.onHotSpotDeactivated()
		pActiveHotSpot = null
		
		pAnimateCamera.transitionTo(\
			getCameraSpotNamed(pMainCameraSpot), transitionTime)
		
		pState = State.hotSpotDeactivate
	end
	
	/**
	 * \brief Set active hot-spot now.
	 * 
	 * \param hotSpot Hot-Spot to activate. Can be null to reset to main.
	 */
	func void setActiveHotSpot(IMMBehaviorHotSpot.Instance hotSpot)
		if pState == State.constructed
			throw EInvalidParam.new("Not allowed in constructed state")
		end
		
		if pActiveHotSpot != null
			pActiveHotSpot.reset()
			pActiveHotSpot = null
		end
		
		pTextDisplay.reset()
		
		if hotSpot != null
			pActiveHotSpot = hotSpot
			hotSpot.setActivated()
		end
		
		var String cameraSpot = pMainCameraSpot
		if hotSpot != null and hotSpot.getCameraSpot() != null
			cameraSpot = hotSpot.getCameraSpot()
		end
		pAnimateCamera.setCurSpot(getCameraSpotNamed(cameraSpot))
		
		if hotSpot != null
			pState = State.hotSpotIdle
			var ActionListener action = getActionAt(hotSpot.getAction())
			if action != null
				action.onAction(ActionEvent.new(this, ActionEvent.idAction, 0))
			end
			
		else
			pState = State.mainMenuIdle
		end
		
		Engine.resetTimers()
	end
	
	/** \brief Get hot spot with action or \em null if absent. */
	func IMMBehaviorHotSpot.Instance getHotSpotWithAction(String action)
		var IMMBehaviorHotSpot.Instance behavior
		var BehaviorElement element = pWorld.findElement(block Element each
			if each castable BehaviorElement
				behavior = IMMBehaviorHotSpot.getInstanceIn(each cast BehaviorElement)
				if behavior != null
					return behavior.getAction().equals(action)
				end
			end
			return false
		end) cast BehaviorElement
		return element != null if IMMBehaviorHotSpot.getInstanceIn(element) else null
	end
	
	
	
	/** \brief Action or \em null if absent. */
	func ActionListener getActionAt(String name)
		return pActions.getAt(name, null) cast ActionListener
	end
	
	/** \brief Set action. */
	func void setActionAt(String name, ActionListener listener)
		if name == null or listener == null
			throw EInvalidParam.new()
		end
		
		pActions.setAt(name, listener)
	end
	
	
	
	/** \brief Named camera spot or \em null if absent. */
	func IMMCameraSpot getCameraSpotNamed(String name)
		return pWorld.findElement(block Element each
			return each castable IMMCameraSpot \
				and (each cast IMMCameraSpot).getName().equals(name)
		end) cast IMMCameraSpot
	end
	
	
	
	/**
	 * \brief Resume main menu.
	 * 
	 * Call after returning from in-game. Starts updating the main menu at regular
	 * interval. It is safe to call multiple times. Also sets the main menu microphone
	 * as the active microphone.
	 */
	func void resume()
		AudioSystem.setActiveMicrophone(pMicrophone)
		startFrameUpdater()
	end
	
	/**
	 * \brief Pause main menu.
	 * 
	 * Call when switching to in-game. Stops processing the main menu to not consume
	 * processing time. It is safe to call multiple times.
	 */
	func void pause()
		stopFrameUpdater()
	end
	
	/**
	 * \brief Start loading world.
	 * 
	 * \throws EInvalidParam loadWorld has been called already.
	 */
	func void loadWorld(String path)
		if pState != State.constructed
			throw EInvalidParam.new("Not allowed in constructed state")
		end
		if path == null
			throw EInvalidParam.new("path is null")
		end
		
		try
			pLoadWorld.loadWorld(path)
			
			pState = State.loadingWorld
			pPathWorld = path
			
		catch Exception e
			loadWorldFailed(e)
		end
	end
	
	/**
	 * \brief Reset main menu to entry point.
	 * 
	 * Call for example when returning to the main menu from game. Sets the camera to
	 * the main camera spot without transition.
	 */
	func void reset()
		if isNotReady()
			return
		end
		
		pAnimateCamera.setCurSpot(getCameraSpotNamed(pMainCameraSpot))
		
		pActiveHotSpot = null
		
		pWorld.forEachElement(block Element each
			if each castable IMMProp
				(each cast IMMProp).reset()
			end
		end)
		
		pTextDisplay.reset()
		
		pState = State.mainMenuIdle
		Engine.resetTimers()
	end
	
	
	
	/** \brief Parent changed. */
	func void setParent(Container parent)
		super.setParent(parent)
		
		if getDesktop() != null // dispose protection
			onFrameUpdate(0)
		end
	end
	
	/** \brief Temporary hack until class is working then remove. */
	func void onKeyPress(KeyEvent event)
		super.onKeyPress(event)
		
		select pState
		case State.mainMenuIdle, State.hotSpotIdle
			pInteract.onKeyPress(event)
		end
	end
	
	/** \brief Mouse button pressed. */
	func void onButtonPress(MouseEvent event)
		super.onButtonPress(event)
		
		select pState
		case State.mainMenuIdle, State.hotSpotIdle
			pInteract.onButtonPress(event)
		end
	end
	
	/**
	 * \brief Update frame.
	 * 
	 * \param elapsed Elapsed time as reported by Engine.getElapsedTime().
	 */
	func void onFrameUpdate(float elapsed)
		select pState
		case State.loadingWorld
			pMenuFader.setCurTransparency(0)
			updateLoadWorld(elapsed)
			
		case State.mainMenuFadeIn
			pMenuFader.update(elapsed)
			if not pMenuFader.isFading()
				pState = State.mainMenuIdle
			end
			pAnimateCamera.update(elapsed)
			pTextDisplay.update(elapsed)
			pWorld.update(elapsed)
			pInteract.update(elapsed)
			
		case State.mainMenuIdle, State.hotSpotIdle
			pAnimateCamera.update(elapsed)
			pTextDisplay.update(elapsed)
			pWorld.update(elapsed)
			pInteract.update(elapsed)
			
		case State.hotSpotActive
			pAnimateCamera.update(elapsed)
			pTextDisplay.update(elapsed)
			pWorld.update(elapsed)
			pInteract.update(elapsed)
			
			if not pAnimateCamera.inTransition()
				pState = State.hotSpotIdle
				var ActionListener action = getActionAt(pActiveHotSpot.getAction())
				if action != null
					action.onAction(ActionEvent.new(this, ActionEvent.idAction, 0))
				end
			end
			
		case State.hotSpotDeactivate
			pAnimateCamera.update(elapsed)
			pTextDisplay.update(elapsed)
			pWorld.update(elapsed)
			pInteract.update(elapsed)
			
			if not pAnimateCamera.inTransition()
				pState = State.mainMenuIdle
			end
		end
	end
	
	
	
	/** \brief Print exception to console. */
	func void printExceptionToConsole(String action, Exception e)
		pConsole.addError("InteractiveMainMenu " + action, e)
	end
	
	
	
	/**
	 * \brief Add element classes.
	 * 
	 * Adds the same element classes as BaseGameApp.createAndAddElementClasses().
	 * In addition adds IMM*Class element classes.
	 */
	protected func void addElementClasses()
		var BehaviorFactoryHelper restoreHelper = BehaviorElementClass.sharedFactoryHelper
		BehaviorElementClass.sharedFactoryHelper = ModifiedBehaviorFactoryHelper.new(this)
		
		// from BaseGameApp.createAndAddElementClasses()
		pElementClasses.add(IgnoreElementClass.new("VirtualElement"))
		pElementClasses.add(IgnoreElementClass.new("MapperNote"))
		pElementClasses.add(createGenericBehaviorElementClass())
		pElementClasses.add(SimpleElementClass.new(pLoaders))
		pElementClasses.add(PhysicsElementClass.new())
		pElementClasses.add(AnimatedElementClass.new(pLoaders, pTriggerTable))
		pElementClasses.add(TwoStateAnimatedElementClass.new(pLoaders, pTriggerTable))
		pElementClasses.add(HiddenElementClass.new(pLoaders, pTriggerTable))
		pElementClasses.add(RandomElementClass.new(pElementClasses))
		pElementClasses.add(BaseLightClass.new(pTriggerTable))
		pElementClasses.add(BaseSpeakerClass.new(pLoaders, pTriggerTable))
		pElementClasses.add(BaseParticleEmitterClass.new(pLoaders, pTriggerTable))
		pElementClasses.add(BaseSkyClass.new(pLoaders))
		pElementClasses.add(BaseForceFieldClass.new(pTriggerTable))
		pElementClasses.add(BaseBillboardClass.new())
		pElementClasses.add(BaseWorldClass.new(pLoaders, pIDGenerator))
		pElementClasses.add(AttachableBaseLightClass.new(pTriggerTable))
		pElementClasses.add(AttachableBaseSpeakerClass.new(pLoaders, pTriggerTable))
		pElementClasses.add(AttachableBaseParticleEmitterClass.new(pLoaders, pTriggerTable))
		pElementClasses.add(AttachableBaseForceFieldClass.new(pTriggerTable))
		pElementClasses.add(AttachableBaseBillboardClass.new())
		pElementClasses.add(AttachSlotClass.new())
		pElementClasses.add(SpawnPointClass.new())
		pElementClasses.add(BaseActorClass.new(pLoaders, pPlayerControlledActor))
		pElementClasses.add(BaseVRActorClass.new(pLoaders, pPlayerControlledActor))
		pElementClasses.add(EnvironmentMapClass.new())
		pElementClasses.add(TriggerEvaluateClass.new(pTriggerTable))
		pElementClasses.add(TriggerTimerClass.new(pTriggerTable))
		pElementClasses.add(TriggerToggleClass.new(pTriggerTable))
		pElementClasses.add(TriggerTouchClass.new(pTriggerTable))
		pElementClasses.add(TriggerShoutClass.new(pTriggerTable, pConsole))
		pElementClasses.add(TriggerConversationClass.new(pTriggerTable, pLoaders, pPlayerControlledActor))
		pElementClasses.add(RailCornerClass.new())
		pElementClasses.add(SimpleElementOnRailClass.new(pLoaders, pTriggerTable))
		pElementClasses.add(InfoConvoCoordSystemClass.new())
		
		// main menu specific
		pElementClasses.add(IMMPropClass.new(this))
		pElementClasses.add(IMMHotSpotClass.new(this))
		pElementClasses.add(IMMCameraSpotClass.new(this))
		
		// deprecated classes kept for compatibility
		pElementClasses.add(IMMLightClass.new(this))
		pElementClasses.add(IMMSpeakerClass.new(this))
		pElementClasses.add(IMMParticleEmitterClass.new(this))
		pElementClasses.add(IMMEnvironmentMapClass.new(this))
		pElementClasses.add(TriggerEvaluateClass.new("DE_IMM_TriggerEvaluate", pTriggerTable))
		pElementClasses.add(TriggerTimerClass.new("DE_IMM_TriggerTimer", pTriggerTable))
		pElementClasses.add(TriggerToggleClass.new("DE_IMM_TriggerToggle", pTriggerTable))
		
		// load xml classes
		if pDirXmlElementClasses != null
			pLoaders.getElementClass().addXmlElementClasses(\
				pElementClasses, pDirXmlElementClasses, true)
		end
		
		BehaviorElementClass.sharedFactoryHelper = restoreHelper
	end
	
	/** \brief Loading world failed. */
	protected func void loadWorldFailed(Exception e)
		printExceptionToConsole("Load world", e)
		
		pState = State.constructed
		
		// just stop otherwise user is stuck in a black menu. a subclass can decide to
		// do something else here for example revert to an emergeny main menu. but if
		// loading world fails like this chances are the rest of the game is not going
		// to run any better either
		Engine.quit()
	end
	
	/** \brief Update loading world. */
	protected func void updateLoadWorld(float elapsed)
		try
			pWorld = pLoadWorld.update(elapsed)
			
			if pWorld != null
				// finished preloading
				launchMainMenu()
			end
			
		catch Exception e
			loadWorldFailed(e)
		end
	end
	
	/** \brief Finish preloading and launch main menu. */
	protected func void launchMainMenu()
		pWorld.getWorld().addCamera(pCamera)
		pWorld.getWorld().addMicrophone(pMicrophone)
		pWorldRenderer.setCamera(pCamera)
		
		pAnimateCamera.setCurSpot(getCameraSpotNamed(pMainCameraSpot))
		
		pMenuFader.fadeTo(1, pMenuFadeInTime)
		
		AudioSystem.setActiveMicrophone(pMicrophone)
		
		pState = State.mainMenuFadeIn
		Engine.resetTimers()
	end
	
	/** \brief Create camera. */
	protected func Camera createCamera()
		var Camera camera = Camera.new()
		camera.setFov(80)
		camera.setImageDistance(0.1)
		camera.setViewDistance(300)
		camera.setExposure(1)
		camera.setLowestIntensity(1)
		camera.setHighestIntensity(1)
		camera.setAdaptionTime(0)
		// see CameraDirector for explanation of the layer mask used here
		camera.setLayerMask(LayerMask.newWith(\
			BaseGameApp.WorldLayerBit.default, BaseGameApp.WorldLayerBit.envmap))
		return camera
	end
	
	/**
	 * \brief Create generic behavior element class.
	 * \version 1.28
	 * 
	 * Creates instance of \ref GenericBehaviorElementClass and replaces all factories
	 * with \ref #getBehaviorFactories().
	 */
	protected func GenericBehaviorElementClass createGenericBehaviorElementClass()
		var GenericBehaviorElementClass eclass = GenericBehaviorElementClass.new()
		eclass.removeAllBehaviorFactories()
		eclass.addBehaviorFactories(getBehaviorFactories())
		return eclass
	end
	
	/**
	 * \brief Create behavior factories adding them to the factory list.
	 * \version 1.28
	 * 
	 * Behavior factories allow generic \ref BehaviorElementClass to be created using XML element
	 * class files (*.deeclass) where not only element class properties can be defined but
	 * also behaviors added. \ref #getBehaviorFactories() is used by
	 * \ref GenericBehaviorElementClass to set the initial list of allowed factories.
	 * Default uses \ref BehaviorFactoryHelper#addAllFactories() to populate the list.
	 */
	protected func void createAndAddBehaviorFactories()
		BehaviorElementClass.sharedFactoryHelper.addAllFactories(pBehaviorFactories)
	end
end
