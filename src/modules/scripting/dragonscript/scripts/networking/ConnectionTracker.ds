/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */


namespace Dragengine.Networking

pin Dragengine.Utils


/**
 * \brief List of connections to create network states for.
 * 
 * Used by behaviors to track connections for which network states have to be created.
 * The behaviros register a listener to be notified if connections are added and removed.
 */
class ConnectionTracker
	private var Array pConnections
	private var Array pListeners
	
	
	
	/** \brief Create connection tracker. */
	public func new()
		this.pConnections = Array.new()
		this.pListeners = Array.new()
	end
	
	
	
	/** \brief Count of connections. */
	public func int getCount()
		return this.pConnections.getCount()
	end
	
	/** \brief Connection at index. */
	public func Connection getAt( int index )
		return this.pConnections.getAt( index ) cast Connection
	end
	
	/** \brief Connection is present. */
	public func bool has( Connection connection )
		return this.pConnections.has( connection )
	end
	
	/** \brief Add connection. */
	public func void add( Connection connection )
		if connection == null or this.pConnections.has( connection )
			throw EInvalidParam.new()
		end
		
		this.pConnections.add( connection )
		
		this.pListeners.forEach( block ConnectionTrackerListener each
			each.connectionAdded( this, connection )
		end )
	end
	
	/** \brief Remove connection. */
	public func void remove( Connection connection )
		this.pConnections.remove( connection )
		
		this.pListeners.forEach( block ConnectionTrackerListener each
			each.connectionRemoved( this, connection )
		end )
	end
	
	/** \brief Remove all connections. */
	public func void removeAll()
		while this.pConnections.getCount() > 0
			var Connection connection = this.pConnections.getAt( 0 ) cast Connection
			this.pConnections.removeFrom( 0 )
			
			this.pListeners.forEach( block ConnectionTrackerListener each
				each.connectionRemoved( this, connection )
			end )
		end
	end
	
	/**
	 * \brief Visit connections with block.
	 * 
	 * Block receives as argument connection of type Connection.
	 */
	public func void forEach( Block ablock )
		this.pConnections.forEach( ablock )
	end
	
	/**
	 * \brief Find connection with block.
	 * 
	 * Block receives as argument connection of type Connection and returns true if found.
	 */
	public func Connection find( Block ablock )
		return this.pConnections.find( ablock ) cast Connection
	end
	
	
	
	/** \brief Add listener. */
	public func void addListener( ConnectionTrackerListener listener )
		if listener == null
			throw EInvalidParam.new()
		end
		this.pListeners.add( listener )
	end
	
	/** \brief Remove listener. */
	public func void removeListener( ConnectionTrackerListener listener )
		this.pListeners.remove( listener )
	end
end
