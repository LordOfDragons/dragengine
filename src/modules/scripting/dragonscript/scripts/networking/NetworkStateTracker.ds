/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */


namespace Dragengine.Networking

pin Dragengine.Scenery
pin Dragengine.Utils


/**
 * \brief List of ECBehaviorNetworkState to send messages to.
 * 
 * Used by ECBehaviorNetworkState supporting behaviors to send and receive messages linked to
 * their owner element. This registration is application wide since network states exist
 * outside game worlds. Requires each element to have a unique identifier.
 */
class NetworkStateTracker
	private var Dictionary pNetworkStates
	
	
	
	/** \brief Create connection tracker. */
	public func new()
		this.pNetworkStates = Dictionary.new()
	end
	
	
	
	/** \brief Count of network states. */
	public func int getCount()
		return this.pNetworkStates.getCount()
	end
	
	/** \brief Behavior instance with unique identifier or null if absent. */
	public func ECBehaviorNetworkState.Instance getAt( UniqueID id )
		return this.pNetworkStates.getAt( id, null ) cast ECBehaviorNetworkState.Instance
	end
	
	/** \brief Behavior instance with unique identifier is present. */
	public func bool has( UniqueID id )
		return this.pNetworkStates.has( id )
	end
	
	/**
	 * \brief Add behavior instance.
	 * \throws EInvalidParam Behavior instance with identifier is present.
	 */
	public func void add( ECBehaviorNetworkState.Instance instance )
		var UniqueID id = instance.getElement().getID()
		if this.pNetworkStates.has( id )
			throw EInvalidParam.new()
		end
		
		this.pNetworkStates.setAt( id, instance )
	end
	
	/** \brief Remove behavior instance. */
	public func void remove( ECBehaviorNetworkState.Instance instance )
		this.pNetworkStates.remove( instance.getElement().getID() )
	end
	
	/**
	 * \brief Visit behavior instance with block.
	 * 
	 * Block receives as first argument UniqueID identifier and as second argument
	 * ECBehaviorNetworkState.Instance instance.
	 */
	public func void forEach( Block ablock )
		this.pNetworkStates.forEach( ablock )
	end
	
	
	
	/**
	 * \brief Receive message send using ECBehaviorNetworkState.getMessageCode() .
	 * 
	 * Reads UniqueID from message sending the remainder of the message to the matching
	 * behavior instance in getNetworkStateTracker() .
	 */
	public func void receiveMessage( Connection connection, FileReader message )
		var UniqueID id = UniqueID.readFromFile( message )
		var ECBehaviorNetworkState.Instance instance = this.getAt( id )
		if instance == null
			throw EInvalidParam.new( "Message for ID " + id + " but ID is not tracked" )
		end
		instance.messageReceived( connection, message )
	end
end
