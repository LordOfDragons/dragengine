/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

namespace Dragengine.Services

pin Dragengine.Services.Mods
pin Dragengine.Utils
pin Dragengine.Gui
pin Dragengine.Services.User
pin Dragengine.Scenery


/**
 * \brief Service providing access to Mod.io functionality if supported.
 * \version 1.23
 * 
 * Provides access to these functionalities:
 * - Mod browsing
 * - Mod installing
 * - Mod deinstalling
 */
class ServiceModio extends BaseGameService implements ServiceListener, ServiceMods, ServiceUser
	/**
	 * \brief Store portal for use with ServiceModio.
	 * \version 1.23
	 * 
	 * If not know use null.
	 */
	enum Portal
		/**
		 * \brief Apple store.
		 */
		apple
		
		/**
		 * \brief Epic games store.
		 */
		epicGamesStore
		
		/**
		 * \brief GoG store.
		 */
		gog
		
		/**
		 * \brief Google store.
		 */
		google
		
		/**
		 * \brief ItchIO store.
		 */
		itchio
		
		/**
		 * \brief Nintendo store.
		 */
		nintendo
		
		/**
		 * \brief Playstation store.
		 */
		psn
		
		/**
		 * \brief Steam store.
		 */
		steam
		
		/**
		 * \brief XBox live.
		 */
		xboxLive
	end
	
	/**
	 * \brief Service initialization parameters.
	 */
	class InitParameters
		/**
		 * \brief Application key.
		 */
		public var String apiKey
		
		/**
		 * \brief Game identifier.
		 * 
		 * Number in string form.
		 */
		public var String gameId
		
		/**
		 * \brief User identifier.
		 * 
		 * Called "Local platform user" in ModIO.
		 */
		public var String userId
		
		/**
		 * \brief Optional portal indicator.
		 * 
		 * Can be null if not known.
		 */
		public var Portal portal
		
		
		/**
		 * \brief Create new instance of class InitOptions.
		 */
		func new()
		end
	end
	
	
	
	var InitParameters pInitParameters
	var Portal pPortal
	var ServiceInitListener pInitListener
	var Boolean pIsInitialized
	var bool pPauseManagement
	var bool pIsManagementBusy
	var SafeArray pModsListeners, pUserListeners
	
	
	
	/**
	 * \brief Create service ServiceModIO.
	 * 
	 * The service is asynchronously initialized. Once initialization finished
	 * the provided listener is called with success or failure outcome. If the
	 * outcome is success the service can be used. If the outcome is failure
	 * the service can not be used and should be disposed.
	 * 
	 * \param params Init parameters.
	 * \param listener Listener called if initialization finished. Can be null.
	 * \throws EInvalidParam ModIO service module is not present.
	 * \throws EInvalidParam One or more of the provided parameters is not valid.
	 */
	func new(InitParameters params, ServiceInitListener listener)
		pInitParameters = InitParameters.new()
		pInitParameters.apiKey = params.apiKey
		pInitParameters.gameId = params.gameId
		pInitParameters.userId = params.userId
		pInitParameters.portal = params.portal
		pInitListener = listener
		pModsListeners = SafeArray.new()
		pUserListeners = SafeArray.new()
		
		var ServiceObject so = ServiceObject.new()
		so.setStringChildAt("apiKey", params.apiKey)
		so.setStringChildAt("gameId", params.gameId)
		so.setStringChildAt("userId", params.userId)
		if params.portal != null
			so.setStringChildAt("portal", params.portal.name())
		end
		
		service = Service.new("Mod.io", so)
		service.setListener(this)
	end
	
	/**
	 * \brief Dispose of ModIO service.
	 */
	func void dispose()
		pInitListener = null
		pModsListeners.removeAll()
		pUserListeners.removeAll()
		
		super.dispose()
	end
	
	
	
	/**
	 * \brief Checks if ModIO service is supported.
	 * 
	 * Service is reported supported if the ModIO Service Module is present.
	 * Creating the service can still fail.
	 */
	static func bool isServiceSupported()
		return Engine.getSupportedServices().has("Mod.io")
	end
	
	
	
	/**
	 * \brief Determines if service is initialized and ready to be used.
	 * 
	 * If null is returned the service is still initializing. If returned object has true
	 * value the service is initialized and ready to be used. If returned object has false
	 * value the service failed to initialized and has to be disposed.
	 */
	func Boolean isInitialized()
		return pIsInitialized
	end
	
	
	
	/**
	 * \brief Features supported by this service.
	 */
	func ServiceModsFeatures getModsFeatures()
		var ServiceModsFeatures features = ServiceModsFeatures.new()
		features.modRatingCount = 2
		features.userCanRateMods = true
		return features
	end
	
	/**
	 * \brief Add modification listener.
	 * \param listener Listener to add
	 */
	func void addModsListener(ServiceModsListener listener)
		if listener == null
			throw ENullPointer.new("listener")
		end
		pModsListeners.add(listener)
	end
	
	/**
	 * \brief Remove modification listener.
	 * \param listener Listener to remove.
	 */
	func void removeModsListener(ServiceModsListener listener)
		pModsListeners.remove(listener)
	end
	
	/**
	 * \brief Filtered list of available game modifications.
	 * 
	 * Requests a list of game modifications using the provided filters. All filter
	 * parameters set to null cause default values to be used as defined by the
	 * service provider. Filters not supported by the service provider are ignored.
	 * 
	 * Once finished \ref ServiceModsListener#onListMods(ServiceMods,Array,Exception)
	 * is called. The returned request identifier can be used in the listener methods to
	 * identify which request the received response belongs to.
	 * 
	 * Receiving the results can take considerable amount of time depending on the
	 * load of the service provider.
	 * 
	 * \param filter Filter to use.
	 * \param listener If not null called once in addition to added listeners.
	 */
	func void listAllMods(ServiceModFilter filter, ServiceModsListener listener)
		var ServiceObject so = ServiceObject.new()
		so.setStringChildAt("function", "listAllMods")
		
		pFilterAddEnum(so, "sortField", filter.sortField)
		pFilterAddStringSet(so, "nameContains", filter.matchingName)
		pFilterAddStringSet(so, "matchingAuthor", filter.matchingAuthor)
		pFilterAddStringSet(so, "matchingIds", filter.withIds)
		pFilterAddDate(so, "markedLiveAfter", filter.releasedAfter)
		pFilterAddDate(so, "markedLiveBefore", filter.releasedBefore)
		pFilterAddStringSet(so, "withTags", filter.withTags)
		pFilterAddStringSet(so, "withoutTags", filter.withoutTags)
		if filter.metadataLike != null
			so.setStringChildAt("metadataLike", filter.metadataLike)
		end
		pFilterAddEnum(so, "revenueType", filter.revenueType)
		so.setBoolChildAt("disallowMatureContent", filter.disallowMatureContent)
		pFilterAddEnumSet(so, "withMatureContentFlags", filter.withMatureContentFlags)
		
		so.setIntChildAt("startIndex", filter.startIndex)
		
		if filter.resultCount != 0
			so.setIntChildAt("resultCount", filter.resultCount)
		end
		
		runRequest(so, listener)
	end
	
	/**
	 * \brief Load resource asynchronously.
	 * 
	 * Loaded resources are cached for faster retrieval. Once the resource is cached locally
	 * \ref ServiceModsListener#onLoadModResource(ServiceMods,String,Object,Exception) is called
	 * with the same URL as used in this function call.
	 * 
	 * \param url URL of image to load.
	 * \param listener If not null called once in addition to added listeners.
	 */
	func void loadModResource(String url, ServiceModsListener listener)
		var ServiceObject so = ServiceObject.new()
		so.setStringChildAt("function", "loadModResource")
		so.setStringChildAt("url", url)
		
		runRequest(so, listener)
	end
	
	/**
	 * \brief Mod management is paused.
	 */
	func bool getPauseModManagement()
		return pPauseManagement
	end
	
	/**
	 * \brief Pause mod management.
	 * 
	 * By default the service automatically downloads, installs and uninstalls mods
	 * depending on the settings stored in the user profile on the service provider.
	 * This process can be temporarily paused for example during game play.
	 */
	func void setPauseModManagement(bool pause)
		if pause == pPauseManagement
			return
		end
		
		pPauseManagement = pause
		
		var ServiceObject so = ServiceObject.new()
		so.setStringChildAt("function", "pauseModManagement")
		so.setBoolChildAt("pause", pause)
		service.startRequest(so)
	end
	
	/**
	 * \brief Service is busy managing modifications.
	 * 
	 * Returns true if the service is performing one of these actions:
	 * - Installing modification
	 * - Uninstalling modification
	 * - Updating modification to latest version
	 * - Uploading modification
	 * 
	 * While this method returns true certain functions will fail.
	 */
	func bool isModManagementBusy()
		return pIsManagementBusy
	end
	
	/**
	 * \brief Activate subscribed and installed modifications.
	 * 
	 * Installing modifications does not automatically activate them. This avoids
	 * interrupting a running game flow while modifications are beeing installed.
	 * A typical use case is calling activateMods() upon leaving the modification
	 * management dialog. This ensures modifications start affecting the game at
	 * a well known point in time.
	 * 
	 * Unsubscribing from a modification calls activateMods() to avoid the game
	 * potentially accessing to be deleted modification files.
	 * 
	 * Disabling and re-enabling modifications does not trigger activateMods().
	 * 
	 * Activating modifications runs immediately.
	 * 
	 * Starting a game automatically calls activateMods().
	 */
	func void activateMods()
		var ServiceObject so = ServiceObject.new()
		so.setStringChildAt("function", "activateMods")
		service.runAction(so)
	end
	
	/**
	 * \brief Subscribe to modification.
	 * 
	 * The user can also subscribe to a modification from outside the game using different means.
	 * In both situationsn modifications are installed automatically the next time possible if at
	 * least one user is subscribed to them. Hence subscribing and installing are different actions.
	 * 
	 * Once subscribing finished \ref ServiceModsListener#onSubscribeMod(ServiceMods,String,Exception)
	 * is called. At this point in time the modification is potentially not yet installed.
	 * Mod management installs mods as soon as possible if necessary. Listen to
	 * \ref ServiceModsListener#onModManagement(ServiceMods,ManagementEvent,String,ServiceModProgress,Exception)
	 * events to know when the modification started and finished installing.
	 * 
	 * \param token Authentication token.
	 * \param id Identifier of modification to subscribe to.
	 * \param listener If not null called once in addition to added listeners.
	 */
	func void subscribeMod(String id, ServiceModsListener listener)
		var ServiceObject so = ServiceObject.new()
		so.setStringChildAt("function", "subscribeToMod")
		so.setStringChildAt("modId", id)
		so.setBoolChildAt("dependencies", true)
		
		runRequest(so, listener)
	end
	
	/**
	 * \brief Unsubscribe from modification.
	 * 
	 * The user can also unsubscribe from a modification from outside the game using different means.
	 * In both situationsn modifications are uninstalled automatically the next time possible if
	 * no user is subscribed to them. Hence unsubscribing and uninstalling are different actions.
	 * 
	 * Once unsubscribing finished \ref ServiceModsListener#onUnsubscribeMod(ServiceMods,String,Exception)
	 * is called. At this point in time the modification is still installed. Mod management
	 * uninstalls mods as soon as possible if necessary. Listen to
	 * \ref ServiceModsListener#onModManagement(ServiceMods,ManagementEvent,String,ServiceModProgress,Exception)
	 * events to know when the modification started and finished uninstalling.
	 * 
	 * \param token Authentication token.
	 * \param id Identifier of modification to unsubscribe from.
	 * \param listener If not null called once in addition to added listeners.
	 */
	func void unsubscribeMod(String id, ServiceModsListener listener)
		var ServiceObject so = ServiceObject.new()
		so.setStringChildAt("function", "unsubscribeFromMod")
		so.setStringChildAt("modId", id)
		
		runRequest(so, listener)
	end
	
	/**
	 * \brief Current mod install or update progress information.
	 * 
	 * If no suitable mod management action is in progress null is returned.
	 */
	func ServiceModProgress getCurrentModUpdate()
		var ServiceObject so = ServiceObject.new()
		so.setStringChildAt("function", "queryCurrentModUpdate")
		
		so = service.runAction(so)
		return so != null if pConvModProgress(so) else null
	end
	
	/**
	 * \brief User subscribed mods.
	 * 
	 * Returns modifications are potentially not installed. Use \ref ServiceModStatus#status
	 * to filter modifications of interest. Returns dictionary with String modification
	 * identifier and ServiceModStatus value.
	 */
	func Dictionary getSubscribedMods()
		var ServiceObject so = ServiceObject.new()
		so.setStringChildAt("function", "queryUserSubscriptions")
		so = service.runAction(so)
		
		var Dictionary dict = Dictionary.new()
		var int i, count = so.getChildCount()
		var ServiceModStatus status
		
		for i = 0 to count
			status = pConvModStatus(so.getChildAt(i))
			dict.setAt(status.id, status)
		end
		
		return dict
	end
	
	/**
	 * \brief System mods.
	 * 
	 * Returns all modifications installed on the system by all users. Returns dictionary
	 * with String modification identifier and ServiceModStatus value.
	 */
	func Dictionary getSystemMods()
		var ServiceObject so = ServiceObject.new()
		so.setStringChildAt("function", "querySystemInstallations")
		so = service.runAction(so)
		
		var Dictionary dict = Dictionary.new()
		var int i, count = so.getChildCount()
		var ServiceModStatus status
		
		for i = 0 to count
			status = pConvModStatus(so.getChildAt(i))
			dict.setAt(status.id, status)
		end
		
		return dict
	end
	
	/**
	 * \brief Active mods.
	 * 
	 * Returns Set of String identifiers of all active modifications. Active modifications
	 * are changed when \ref #activateMods() is called. This call is useful to know if a
	 * game save state has been created with the same set of active modifications.
	 */
	func Set getActiveMods()
		var ServiceObject so = ServiceObject.new()
		so.setStringChildAt("function", "getActiveMods")
		so = service.runAction(so)
		
		var int i, count = so.getChildCount()
		var Set set = Set.new()
		for i = 0 to count
			set.add(so.getChildAt(i).getString())
		end
		return set
	end
	
	/**
	 * \brief Retrieve information about game modification.
	 * 
	 * Once finished \ref ServiceModsListener#onGetModInfo(ServiceMods,String,ServiceModInfo,Exception)
	 * is called.
	 * 
	 * \param modId Identifier of modification to retrieve.
	 * \param listener If not null called once in addition to added listeners.
	 */
	func void getModInfo(String id, ServiceModsListener listener)
		var ServiceObject so = ServiceObject.new()
		so.setStringChildAt("function", "getModInfo")
		so.setStringChildAt("modId", id)
		
		runRequest(so, listener)
	end
	
	/**
	 * \brief Submit rating for modification.
	 * 
	 * Once finished \ref ServiceModsListener#onSubmitModRating(ServiceMods,String,Exception)
	 * is called.
	 * 
	 * \param modId Identifier of modification to submit rating for.
	 * \param rating Rating to submit.
	 * \param listener If not null called once in addition to added listeners.
	 */
	func void submitModRating(String id, int rating, ServiceModsListener listener)
		var ServiceObject so = ServiceObject.new()
		so.setStringChildAt("function", "submitModRating")
		so.setStringChildAt("modId", id)
		so.setIntChildAt("rating", rating)
		
		runRequest(so, listener)
	end
	
	/**
	 * \brief Revoke rating for modification.
	 * 
	 * Once finished \ref ServiceModsListener#onRevokeModRating(ServiceMods,String,Exception)
	 * is called.
	 * 
	 * \param modId Identifier of modification to revoke rating for.
	 * \param listener If not null called once in addition to added listeners.
	 */
	func void revokeModRating(String id, ServiceModsListener listener)
		var ServiceObject so = ServiceObject.new()
		so.setStringChildAt("function", "revokeModRating")
		so.setStringChildAt("modId", id)
		
		runRequest(so, listener)
	end
	
	/**
	 * \brief Disable modification.
	 * 
	 * Modifications can be disabled by the user or the game if a modification
	 * is missbehaving or preventing the game from running. To get the disabled
	 * state of a modification use \ref #getSubscribedMods().
	 * 
	 * If modification is not found nothing is done.
	 * 
	 * \param modId Identifier of modification to revoke rating for.
	 * \param disabled Disabled state.
	 * \param listener If not null called once in addition to added listeners.
	 */
	func void setModDisabled(String id, bool disabled, ServiceModsListener listener)
		var ServiceObject so = ServiceObject.new()
		so.setStringChildAt("function", "setModDisabled")
		so.setStringChildAt("modId", id)
		so.setBoolChildAt("disabled", disabled)
		
		try
			service.runAction(so)
			
		catch Exception e
			pModsListeners.forEach(block ServiceModsListener each
				each.onSetModDisabled(this, id, disabled, e)
			end)
			if listener != null
				listener.onSetModDisabled(this, id, disabled, e)
			end
			return
		end
		
		pModsListeners.forEach(block ServiceModsListener each
			each.onSetModDisabled(this, id, disabled, null)
		end)
		if listener != null
			listener.onSetModDisabled(this, id, disabled, null)
		end
	end
	
	/**
	 * \brief Modification has files matching one or more patterns.
	 * 
	 * Typically used to determine if an installed modification contains specific files.
	 * For example if a modification contains script code \ref Engine#restart(String) has
	 * to be called to restart the game to re-parse the script. Another example is
	 * reloading cached game data if files are touched that have been cached before.
	 * 
	 * \param id Identifier of installed and enabled modification to scan for files.
	 * \param directory Root directory to start searching in.
	 * \param recursive Recursively scan directories for matching files.
	 * \param patterns Set of String file patterns without directories.
	 * \throws EInvalidAction Modification does not exist or is not installed.
	 */
	func bool modHasMatchingFiles(String id, String directory, bool recursive, Set patterns)
		var ServiceObject so = ServiceObject.new()
		so.setStringChildAt("function", "modHasMatchingFiles")
		so.setStringChildAt("modId", id)
		so.setStringChildAt("directory", directory)
		so.setBoolChildAt("recursive", recursive)
		
		var ServiceObject soPatterns = ServiceObject.newList()
		patterns.forEach(block String each
			soPatterns.addStringChild(each)
		end)
		so.setChildAt("patterns", soPatterns)
		
		return service.runAction(so).getBoolean()
	end
	
	/**
	 * \brief Tags that can be used for ServiceModFilter.
	 * 
	 * Once finished \ref ServiceModsListener#onGetTags(ServiceMods,Array,Exception)
	 * is called with the list of ServiceModTagCategory. Each category contains a list
	 * of tags usable for this category.
	 * 
	 * \param listener If not null called once in addition to added listeners.
	 */
	func void getTags(ServiceModsListener listener)
		var ServiceObject so = ServiceObject.new()
		so.setStringChildAt("function", "getModTagOptions")
		runRequest(so, listener)
	end
	
	
	
	/**
	 * \brief Add user listener.
	 * \param listener Listener to add
	 */
	func void addUserListener(ServiceUserListener listener)
		if listener == null
			throw ENullPointer.new("listener")
		end
		pUserListeners.add(listener)
	end
	
	/**
	 * \brief Remove user listener.
	 * \param listener Listener to remove.
	 */
	func void removeUserListener(ServiceUserListener listener)
		pUserListeners.remove(listener)
	end
	
	/**
	 * \brief Features supported by this service.
	 */
	func ServiceUserFeatures getUserFeatures()
		var ServiceObject so = ServiceObject.new()
		so.setStringChildAt("function", "getUserFeatures")
		return pConvUserFeatures(service.runAction(so))
	end
	
	/**
	 * \brief Log in user.
	 * 
	 * Supports only authentication using a supported authentication provider:
	 * - ServiceSteamSdk
	 * - ServiceEosSdk
	 * 
	 * To authenticate call \ref ServiceUser#getAuthToken(ServiceUserListener).
	 * Upon receiving the authentication token create a ServiceuserCredentials
	 * and call loginUser with it.
	 * 
	 * Once logging in finished \ref ServiceUserListener#onLoginUser(ServiceUser,Exception)
	 * is called.
	 * 
	 * \param credentials Has to be null or an exception is thrown.
	 * \param listener If not null called once in addition to added listeners.
	 */
	func void loginUser(ServiceUserCredentials credentials, ServiceUserListener listener)
		var ServiceObject so = ServiceObject.new()
		so.setStringChildAt("function", "authenticateUserExternal")
		so.setStringChildAt("provider", credentials.authToken.provider)
		so.setStringChildAt("token", credentials.authToken.token)
		so.setBoolChildAt("termsAccepted", false) // true
		
		if credentials.parameters != null
			so.setBoolChildAt("termsAccepted", credentials.parameters.getAt("termsAccepted", "").equals("1"))
		end
		
		if credentials.authToken.parameters != null
			var ServiceObject so2 = ServiceObject.new()
			credentials.authToken.parameters.forEach(block String key, String value
				so2.setStringChildAt(key, value)
			end)
			so.setChildAt("parameters", so2)
		end
		
		runRequest(so, listener)
	end
	
	/**
	 * \brief Log out user.
	 * 
	 * Logging out deletes local user data.
	 * 
	 * \param listener If not null called once in addition to added listeners.
	 */
	func void logoutUser(ServiceUserListener listener)
		var ServiceObject so = ServiceObject.new()
		so.setStringChildAt("function", "clearUserData")
		
		runRequest(so, listener)
	end
	
	/**
	 * \brief User is logged in.
	 */
	func bool isUserLoggedIn()
		var ServiceObject so = ServiceObject.new()
		so.setStringChildAt("function", "isAuthenticated")
		return service.runAction(so).getBoolean()
	end
	
	/**
	 * \brief Request authentification token.
	 * 
	 * Not supported.
	 */
	func void getAuthToken(ServiceUserListener listener)
		throw EInvalidAction.new("Not supported")
	end
	
	/**
	 * \brief Retrieve user information.
	 * 
	 * \param listener If not null called once in addition to added listeners.
	 */
	func void getUserInfo(ServiceUserListener listener)
		var ServiceObject so = ServiceObject.new()
		so.setStringChildAt("function", "queryUserProfile")
		so = service.runAction(so)
		
		var ServiceUserInfo info
		if so != null
			info = pConvUser(so)
		end
		
		TimerBlock.new(0, false, block
			var ServiceException exception
			if info == null
				exception = ServiceException.new(service, "No user logged in", null, null, null)
			end
			
			pUserListeners.forEach(block ServiceUserListener each
				each.onGetUserInfo(this, info, exception)
			end)
			if listener != null
				listener.onGetUserInfo(this, info, exception)
			end
		end)
		
		service.nextId()
	end
	
	/**
	 * \brief Load resource asynchronously.
	 * 
	 * Loaded resources are cached for faster retrieval. Once the resource is cached locally
	 * \ref ServiceUserListener#onLoadUserResource(ServiceUser,String,Object,Exception) is called
	 * with the same URL as used in this function call.
	 * 
	 * \param url URL of image to load.
	 * \param listener If not null called once in addition to added listeners.
	 */
	func void loadUserResource(String url, ServiceUserListener listener)
		var ServiceObject so = ServiceObject.new()
		so.setStringChildAt("function", "loadUserResource")
		so.setStringChildAt("url", url)
		
		runRequest(so, listener)
	end
	
	
	
	/**
	 * \brief Service request response received.
	 */
	func void requestResponse(Service service, UniqueID id, ServiceObject response, bool finished)
		var String function = response.getChildAt("function").getString()
		var Object onceListener = getOnceListener(id)
		
		if function.equals("listAllMods")
			var ServiceObject somods = response.getChildAt("mods")
			var Array mods = Array.new()
			var int i, count = somods.getChildCount()
			for i = 0 to count
				mods.add(pConvModInfo(somods.getChildAt(i)))
			end
			
			pModsListeners.forEach(block ServiceModsListener each
				each.onListMods(this, mods, null)
			end)
			if onceListener != null
				(onceListener cast ServiceModsListener).onListMods(this, mods, null)
			end
			
		elif function.equals("loadModResource")
			var String url = response.getChildAt("url").getString()
			var Object resource = response.getChildAt("resource").getResource()
			// String "resourceType": "image"
			
			pModsListeners.forEach(block ServiceModsListener each
				each.onLoadModResource(this, url, resource, null)
			end)
			if onceListener != null
				(onceListener cast ServiceModsListener).onLoadModResource(this, url, resource, null)
			end
			
		elif function.equals("authenticateUserExternal")
			pUserListeners.forEach(block ServiceUserListener each
				each.onLoginUser(this, null)
			end)
			if onceListener != null
				(onceListener cast ServiceUserListener).onLoginUser(this, null)
			end
			
		elif function.equals("clearUserData")
			pUserListeners.forEach(block ServiceUserListener each
				each.onLogoutUser(this, null)
			end)
			if onceListener != null
				(onceListener cast ServiceUserListener).onLogoutUser(this, null)
			end
			
		elif function.equals("getModInfo")
			var ServiceModInfo info = pConvModInfo(response.getChildAt("info"))
			
			pModsListeners.forEach(block ServiceModsListener each
				each.onGetModInfo(this, info.id, info, null)
			end)
			if onceListener != null
				(onceListener cast ServiceModsListener).onGetModInfo(this, info.id, info, null)
			end
			
		elif function.equals("subscribeToMod")
			var String modId = response.getChildAt("modId").getString()
			
			pModsListeners.forEach(block ServiceModsListener each
				each.onSubscribeMod(this, modId, null)
			end)
			if onceListener != null
				(onceListener cast ServiceModsListener).onSubscribeMod(this, modId, null)
			end
			
		elif function.equals("unsubscribeFromMod")
			var String modId = response.getChildAt("modId").getString()
			
			pModsListeners.forEach(block ServiceModsListener each
				each.onUnsubscribeMod(this, modId, null)
			end)
			if onceListener != null
				(onceListener cast ServiceModsListener).onUnsubscribeMod(this, modId, null)
			end
			
		elif function.equals("submitModRating")
			var String modId = response.getChildAt("modId").getString()
			
			pModsListeners.forEach(block ServiceModsListener each
				each.onSubmitModRating(this, modId, null)
			end)
			if onceListener != null
				(onceListener cast ServiceModsListener).onSubmitModRating(this, modId, null)
			end
			
		elif function.equals("revokeModRating")
			var String modId = response.getChildAt("modId").getString()
			
			pModsListeners.forEach(block ServiceModsListener each
				each.onSubmitModRating(this, modId, null)
			end)
			if onceListener != null
				(onceListener cast ServiceModsListener).onSubmitModRating(this, modId, null)
			end
			
		elif function.equals("getModTagOptions")
			var Array categories = pConvTagCategoryList(response.getChildAt("categories"))
			
			pModsListeners.forEach(block ServiceModsListener each
				each.onGetTags(this, categories, null)
			end)
			if onceListener != null
				(onceListener cast ServiceModsListener).onGetTags(this, categories, null)
			end
			
		elif function.equals("loadUserResource")
			var String url = response.getChildAt("url").getString()
			var Object resource = response.getChildAt("resource").getResource()
			// String "resourceType": "image"
			
			pUserListeners.forEach(block ServiceUserListener each
				each.onLoadUserResource(this, url, resource, null)
			end)
			if onceListener != null
				(onceListener cast ServiceUserListener).onLoadUserResource(this, url, resource, null)
			end
		end
	end
	
	/**
	 * \brief Service request failed.
	 */
	func void requestFailed(Service service, UniqueID id, ServiceObject error)
		var String function = error.getChildAt("function").getString()
		var ServiceException exception = createException(error)
		var Object onceListener = getOnceListener(id)
		
		if function.equals("listAllMods")
			pModsListeners.forEach(block ServiceModsListener each
				each.onListMods(this, null, exception)
			end)
			if onceListener != null
				(onceListener cast ServiceModsListener).onListMods(this, null, exception)
			end
			
		elif function.equals("loadModResource")
			var String url = error.getChildAt("url").getString()
			
			pModsListeners.forEach(block ServiceModsListener each
				each.onLoadModResource(this, url, null, exception)
			end)
			if onceListener != null
				(onceListener cast ServiceModsListener).onLoadModResource(this, url, null, exception)
			end
			
		elif function.equals("authenticateUserExternal")
			pUserListeners.forEach(block ServiceUserListener each
				each.onLoginUser(this, exception)
			end)
			if onceListener != null
				(onceListener cast ServiceUserListener).onLoginUser(this, exception)
			end
			
		elif function.equals("clearUserData")
			pUserListeners.forEach(block ServiceUserListener each
				each.onLogoutUser(this, exception)
			end)
			if onceListener != null
				(onceListener cast ServiceUserListener).onLogoutUser(this, exception)
			end
			
		elif function.equals("getModInfo")
			pModsListeners.forEach(block ServiceModsListener each
				each.onGetModInfo(this, null, null, exception)
			end)
			if onceListener != null
				(onceListener cast ServiceModsListener).onGetModInfo(this, null, null, exception)
			end
			
		elif function.equals("subscribeToMod")
			var String modId = error.getChildAt("modId").getString()
			
			pModsListeners.forEach(block ServiceModsListener each
				each.onSubscribeMod(this, modId, exception)
			end)
			if onceListener != null
				(onceListener cast ServiceModsListener).onSubscribeMod(this, modId, exception)
			end
			
		elif function.equals("unsubscribeFromMod")
			var String modId = error.getChildAt("modId").getString()
			
			pModsListeners.forEach(block ServiceModsListener each
				each.onUnsubscribeMod(this, modId, exception)
			end)
			if onceListener != null
				(onceListener cast ServiceModsListener).onUnsubscribeMod(this, modId, exception)
			end
			
		elif function.equals("submitModRating")
			var String modId = error.getChildAt("modId").getString()
			
			pModsListeners.forEach(block ServiceModsListener each
				each.onSubmitModRating(this, modId, exception)
			end)
			if onceListener != null
				(onceListener cast ServiceModsListener).onSubmitModRating(this, modId, exception)
			end
			
		elif function.equals("revokeModRating")
			var String modId = error.getChildAt("modId").getString()
			
			pModsListeners.forEach(block ServiceModsListener each
				each.onSubmitModRating(this, modId, exception)
			end)
			if onceListener != null
				(onceListener cast ServiceModsListener).onSubmitModRating(this, modId, exception)
			end
			
		elif function.equals("getModTagOptions")
			pModsListeners.forEach(block ServiceModsListener each
				each.onGetTags(this, null, exception)
			end)
			if onceListener != null
				(onceListener cast ServiceModsListener).onGetTags(this, null, exception)
			end
			
		elif function.equals("loadUserResource")
			var String url = error.getChildAt("url").getString()
			
			pUserListeners.forEach(block ServiceUserListener each
				each.onLoadUserResource(this, url, null, exception)
			end)
			if onceListener != null
				(onceListener cast ServiceUserListener).onLoadUserResource(this, url, null, exception)
			end
		end
	end
	
	/**
	 * \brief Service notification received.
	 */
	func void eventReceived(Service service, ServiceObject event)
		var String eventName = event.getChildAt("event").getString()
		var bool success = event.getChildAt("success").getBoolean()
		var ServiceException exception
		
		if not success
			exception = createException(event)
		end
		
		if eventName.equals("initialized")
			pIsInitialized = Boolean.new(success)
			
			if pInitListener != null
				pInitListener.onServiceInit(this, exception)
			end
			pInitListener = null
			
		elif eventName.equals("modManagement")
			var ServiceMods.ManagementEvent mev = ServiceMods.ManagementEvent.named(event.getChildAt("subEvent").getString())
			var String modId = event.getChildAt("modId").getString()
			var ServiceModProgress progress = pConvModProgress(event.getChildAt("progress"))
			
			pIsManagementBusy = event.getChildAt("busy").getBoolean()
			
			pModsListeners.forEach(block ServiceModsListener each
				each.onModManagement(this, mev, modId, progress, exception)
			end)
		end
	end
	
	
	
	/**
	 * \brief Create exception from response.
	 */
	func ServiceException createException(ServiceObject error)
		var String message = convString(error, "message", "Unknown error")
		var int errorCode = convInt(error, "code", -1)
		var Enumeration enumErrorCode, enumErrorCategory
		var Object additionalData
		
		select errorCode
		case 11074
			additionalData = pConvErrorTerms(error.getChildAt("needAcceptTerms"))
			if additionalData != null
				enumErrorCode = ServiceUser.Errors.NeedAcceptTos
			end
		end
		
		return ServiceException.new(service, message, enumErrorCode, enumErrorCategory, additionalData)
	end
	
	
	
	private func void pFilterAddEnum(ServiceObject so, String key, Enumeration value)
		if value != null
			so.setStringChildAt(key, value.name())
		end
	end
	
	private func void pFilterAddStringSet(ServiceObject so, String key, Set values)
		if values != null
			var ServiceObject so2 = ServiceObject.newList()
			values.forEach(block String each
				so2.addStringChild(each)
			end)
			so.setChildAt(key, so2)
		end
	end
	
	private func void pFilterAddEnumSet(ServiceObject so, String key, Set values)
		if values != null
			var ServiceObject so2 = ServiceObject.newList()
			values.forEach(block Enumeration each
				so2.addStringChild(each.name())
			end)
			so.setChildAt(key, so2)
		end
	end
	
	private func void pFilterAddDate(ServiceObject so, String key, TimeDate date)
		if date != null
			var ServiceObject so2 = ServiceObject.new()
			so2.setIntChildAt("year", date.getYear())
			so2.setIntChildAt("month", date.getMonth())
			so2.setIntChildAt("day", date.getDay())
			so.setChildAt(key, so2)
		end
	end
	
	private func Dictionary pConvTagList(ServiceObject so, String key)
		var ServiceObject so2 = so.getChildAt(key)
		if so2 == null
			return null
		end
		
		var int i, count = so2.getChildCount()
		var Dictionary dict = Dictionary.new()
		var ServiceObject so3
		
		for i = 0 to count
			so3 = so2.getChildAt(i)
			dict.setAt(so3.getChildAt("tag").getString(), so3.getChildAt("tagLocalized").getString())
		end
		
		return dict
	end
	
	private func ServiceModInfo pConvModInfo(ServiceObject so)
		if so == null
			return null
		end
		
		var ServiceObject so2
		var int i, count
		
		var ServiceModInfo info = ServiceModInfo.new()
		info.id = convString(so, "modId")
		info.name = convString(so, "profileName")
		info.summary = convString(so, "profileSummary")
		info.descriptionHtml = convString(so, "profileDescription")
		info.descriptionText = convString(so, "profileDescriptionPlaintext")
		info.profileUrl = convString(so, "profileURL")
		info.dateAdded = convTimeDate(so, "profileDateAdded")
		info.dateUpdated = convTimeDate(so, "profileDateUpdated")
		info.dateReleased = convTimeDate(so, "profileDateLive")
		info.metadata = convString(so, "metadataBlob")
		info.metadataMap = convStringDict(so, "metadataKvp")
		info.version = convString(so, "version")
		info.price = convInt(so, "price", 0).toString()
		info.hasDependencies = convBool(so, "dependencies", false)
		
		so2 = so.getChildAt("userRating")
		if so2 != null
			info.userRating = Integer.new(so2.getInteger())
		end
		
		info.submittedBy = pConvUser(so.getChildAt("profileSubmittedBy"))
		info.logo = pConvImage(so.getChildAt("modLogo"))
		info.latestRelease = pConvRelease(so.getChildAt("fileInfo"))
		info.stats = pConvModStats(so.getChildAt("stats"))
		info.tags = pConvTagList(so, "tags")
		
		so2 = so.getChildAt("profileMaturityOption")
		if so2 != null
			info.maturityOptions = Set.new()
			count = so2.getChildCount()
			for i = 0 to count
				info.maturityOptions.add(ServiceModFilter.MatureContent.named(so2.getChildAt(i).getString()))
			end
		end
		
		so2 = so.getChildAt("galleryImages")
		if so2 != null
			info.galleryImages = Array.new()
			count = so2.getChildCount()
			for i = 0 to count
				info.galleryImages.add(pConvImage(so2.getChildAt(i)))
			end
		end
		
		var Array youtubeUrls = convStringList(so, "youtubeUrls")
		var Array sketchfabUrls = convStringList(so, "sketchfabUrls")
		
		if youtubeUrls != null or sketchfabUrls != null
			var ServiceModInfo.ExternalLink link
			
			info.externalLinks = Array.new()
			
			if youtubeUrls != null
				youtubeUrls.forEach(block String url
					link = ServiceModInfo.ExternalLink.new()
					link.description = "YouTube"
					link.url = url
					info.externalLinks.add(link)
				end)
			end
			
			if sketchfabUrls != null
				sketchfabUrls.forEach(block String url
					link = ServiceModInfo.ExternalLink.new()
					link.description = "Sketchfab"
					link.url = url
					info.externalLinks.add(link)
				end)
			end
		end
		
		return info
	end
	
	private func ServiceUserInfo pConvUser(ServiceObject so)
		if so == null
			return null
		end
		
		var ServiceUserInfo user = ServiceUserInfo.new()
		user.id = convString(so, "userId")
		user.name = convString(so, "username")
		user.displayName = convString(so, "displayNamePortal")
		if user.displayName == null
			user.displayName = user.name
		end
		user.profileUrl = convString(so, "profileUrl")
		//pConvString(so, "authToken")
		user.dateOnline = convTimeDate(so, "dateOnline")
		user.avatar = pConvImage(so.getChildAt("avatar"))
		return user
	end
	
	private func ServiceImage pConvImage(ServiceObject so)
		var ServiceImage image = ServiceImage.new()
		image.filename = convString(so, "filename")
		image.url = convString(so, "original")
		
		// a=avatar, g=gallery-images l=logo
		pConvAddThumbnail(image, so, "thumb50x50", Point.new(50, 50)) // a
		pConvAddThumbnail(image, so, "thumb100x100", Point.new(100, 100)) // a
		pConvAddThumbnail(image, so, "thumb320x180", Point.new(320, 180)) // g,l
		pConvAddThumbnail(image, so, "thumb640x360", Point.new(640, 360)) // l
		pConvAddThumbnail(image, so, "thumb1280x720", Point.new(1280, 720)) // g,l
		return image
	end
	
	private func void pConvAddThumbnail(ServiceImage image, ServiceObject so, String key, Point size)
		var ServiceObject so2 = so.getChildAt(key)
		if so2 == null
			return
		end
		
		var ServiceImage.Thumbnail thumbnail = ServiceImage.Thumbnail.new()
		thumbnail.size = size
		thumbnail.url = so2.getString()
		image.thumbnails.add(thumbnail)
	end
	
	private func ServiceModRelease pConvRelease(ServiceObject so)
		if so == null
			return null
		end
		
		var ServiceModRelease release = ServiceModRelease.new()
		var ServiceObject so2
		
		release.id = convString(so, "metadataId")
		release.modId = convString(so, "modId")
		release.dateAdded = convTimeDate(so, "dateAdded")
		release.filesize = convFloat(so, "filesize", 0)
		release.filesizeUncompressed = convFloat(so, "filesizeUncompressed", 0)
		release.filename = convString(so, "filename")
		release.version = convString(so, "version")
		release.changelog = convString(so, "changelog")
		release.metadata = convString(so, "metadataBlob")
		release.downloadUrl = convString(so, "downloadBinaryURL")
		release.downloadExpiryDate = convTimeDate(so, "downloadExpiryDate")
		
		so2 = so.getChildAt("currentVirusScanStatus")
		if so2 != null
			release.virusScanStatus = ServiceModRelease.VirusScanStatus.named(so2.getString())
		end
		
		so2 = so.getChildAt("currentVirusStatus")
		if so2 != null
			release.virusStatus = ServiceModRelease.VirusStatus.named(so2.getString())
		end
		
		return release
	end
	
	private func ServiceModInfo.ExternalLink pConvExternalLink(ServiceObject so)
		var ServiceModInfo.ExternalLink link = ServiceModInfo.ExternalLink.new()
		link.description = convString(so, "filename")
		link.url = convString(so, "original")
		return link
	end
	
	private func ServiceModStats pConvModStats(ServiceObject so)
		if so == null
			return null
		end
		
		var ServiceModStats stats = ServiceModStats.new()
		stats.rankPosition = convFloat(so, "popularityRankPosition", 0)
		stats.rankCount = convFloat(so, "popularityRankTotalMods", 0)
		stats.downloadCount = convFloat(so, "downloadsTotal", 0)
		stats.subscriberCount = convFloat(so, "subscribersTotal", 0)
		stats.ratingCount = convFloat(so, "ratingTotal", 0)
		stats.ratingCountPerType.setAt(0, convFloat(so, "ratingNegative", 0))
		stats.ratingCountPerType.setAt(1, convFloat(so, "ratingPositive", 0))
		stats.ratingAverage = convFloat(so, "ratingPercentagePositive", 0)
		stats.ratingWeighted = convFloat(so, "ratingWeightedAggregate", 0)
		stats.ratingDisplayText = convString(so, "ratingDisplayText")
		
		return stats
	end
	
	private func ServiceModProgress pConvModProgress(ServiceObject so)
		if so == null
			return null
		end
		
		var ServiceModProgress progress = ServiceModProgress.new()
		progress.modId = so.getChildAt("id").getString()
		progress.state = ServiceModProgress.State.named(so.getChildAt("state").getString())
		progress.total = convFloat(so, "total", 1)
		progress.current = convFloat(so, "current", 0)
		progress.progress = convFloat(so, "progress", 0)
		progress.remainingTime = convFloatOptional(so, "remainingTime")
		return progress
	end
	
	private func ServiceModStatus pConvModStatus(ServiceObject so)
		if so == null
			return null
		end
		
		var ServiceModStatus status = ServiceModStatus.new()
		status.id = so.getChildAt("id").getString()
		status.status = ServiceModStatus.Status.named(so.getChildAt("state").getString())
		status.info = pConvModInfo(so.getChildAt("info"))
		status.sizeOnDisk = convFloat(so, "sizeOnDisk", 0)
		status.disabled = convBool(so, "disabled", false)
		return status
	end
	
	private func Array pConvTagCategoryList(ServiceObject so)
		if so == null
			return Array.new()
		end
		
		var int i, count = so.getChildCount()
		var Array categories = Array.new()
		for i = 0 to count
			categories.add(pConvTagCategory(so.getChildAt(i)))
		end
		return categories
	end
	
	private func ServiceModTagCategory pConvTagCategory(ServiceObject so)
		var ServiceModTagCategory category = ServiceModTagCategory.new()
		category.id = category.name = so.getChildAt("name").getString()
		category.nameTranslations = convStringDict(so, "nameTranslations")
		category.multiSelection = convBool(so, "allowMultipleSelection", false)
		category.tags = pConvTagCategoryTagList(so.getChildAt("tags"))
		return category
	end
	
	private func Array pConvTagCategoryTagList(ServiceObject so)
		var int i, count = so.getChildCount()
		var Array tags = Array.new()
		for i = 0 to count
			tags.add(pConvTagCategoryTag(so.getChildAt(i)))
		end
		return tags
	end
	
	private func ServiceModTagCategory.Tag pConvTagCategoryTag(ServiceObject so)
		var ServiceModTagCategory.Tag tag = ServiceModTagCategory.Tag.new()
		tag.id = tag.name = so.getChildAt("name").getString()
		tag.nameTranslations = convStringDict(so, "nameTranslations")
		return tag
	end
	
	private func ServiceUserErrorNeedAcceptTos pConvErrorTerms(ServiceObject so)
		if so == null
			return null
		end
		
		var ServiceUserErrorNeedAcceptTos terms = ServiceUserErrorNeedAcceptTos.new()
		terms.terms = convString(so, "terms")
		terms.buttonAccept = convString(so, "buttonAccept")
		terms.buttonDecline = convString(so, "buttonDecline")
		terms.credentialParameters = convStringDict(so, "credentialParameters")
		
		var ServiceObject soLinks = so.getChildAt("links")
		var int i, count = soLinks.getChildCount()
		for i = 0 to count
			terms.links.add(pConvErrorTermsLink(soLinks.getChildAt(i)))
		end
		
		return terms
	end
	
	private func ServiceUserErrorNeedAcceptTos.Link pConvErrorTermsLink(ServiceObject so)
		var ServiceUserErrorNeedAcceptTos.Link link = ServiceUserErrorNeedAcceptTos.Link.new()
		link.label = convString(so, "label")
		link.url = convString(so, "url")
		link.required = convBool(so, "required", true)
		return link
	end
end
