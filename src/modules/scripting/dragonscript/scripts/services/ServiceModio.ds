/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

namespace Dragengine.Services

pin Dragengine.Services.Mods
pin Dragengine.Utils
pin Dragengine.Gui
pin Dragengine.Services.User


/**
 * \brief Service providing access to Mod.io functionality if supported.
 * \version 1.23
 * 
 * Provides access to these functionalities:
 * - Mod browsing
 * - Mod installing
 * - Mod deinstalling
 */
class ServiceModio implements ServiceListener, ServiceMods
	/**
	 * \brief Store portal for use with ServiceModio.
	 * \version 1.23
	 * 
	 * If not know use null.
	 */
	enum Portal
		/**
		 * \brief Apple store.
		 */
		apple
		
		/**
		 * \brief Epic games store.
		 */
		epicGamesStore
		
		/**
		 * \brief GoG store.
		 */
		gog
		
		/**
		 * \brief Google store.
		 */
		google
		
		/**
		 * \brief ItchIO store.
		 */
		itchio
		
		/**
		 * \brief Nintendo store.
		 */
		nintendo
		
		/**
		 * \brief Playstation store.
		 */
		psn
		
		/**
		 * \brief Steam store.
		 */
		steam
		
		/**
		 * \brief XBox live.
		 */
		xboxLive
	end
	
	
	
	var String pApiKey, pGameId, pUserId
	var Portal pPortal
	var Service pService
	var ServiceInitListener pInitListener
	var Boolean pIsInitialized
	var bool pPauseManagement
	var bool pIsManagementBusy
	var SafeArray pModsListeners
	var Dictionary pOnceListeners
	
	
	
	/**
	 * \brief Create service ServiceModIO.
	 * 
	 * The service is asynchronously initialized. Once initialization finished
	 * the provided listener is called with success or failure outcome. If the
	 * outcome is success the service can be used. If the outcome is failure
	 * the service can not be used and should be disposed.
	 * 
	 * \param apiKey Application key.
	 * \param gameId Game identifier. Number in string form.
	 * \param userId User identifier. Called "Local platform user" in ModIO.
	 * \param portal Optional portal indicator. Can be null if not known.
	 * \param listener Listener called if initialization finished. Can be null.
	 * \throws EInvalidParam ModIO service module is not present.
	 * \throws EInvalidParam One or more of the provided parameters is not valid.
	 */
	func new(String apiKey, String gameId, String userId, Portal portal, ServiceInitListener listener)
		pApiKey = apiKey
		pGameId = gameId
		pUserId = userId
		pPortal = portal
		pInitListener = listener
		pModsListeners = SafeArray.new()
		pOnceListeners = Dictionary.new()
		
		var ServiceObject so = ServiceObject.new()
		so.setStringChildAt("apiKey", apiKey)
		so.setStringChildAt("gameId", gameId)
		so.setStringChildAt("userId", userId)
		if portal != null
			so.setStringChildAt("portal", portal.name())
		end
		
		pService = Service.new("Mod.io", so)
		
		pService.setListener(this)
	end
	
	/**
	 * \brief Dispose of ModIO service.
	 */
	func void dispose()
		pInitListener = null
		pModsListeners.removeAll()
		pOnceListeners.removeAll()
		
		if pService != null
			pService.setListener(null)
		end
		pService = null
	end
	
	
	
	/**
	 * \brief Checks if ModIO service is supported.
	 * 
	 * Service is reported supported if the ModIO Service Module is present.
	 * Creating the service can still fail.
	 */
	static func bool isServiceSupported()
		return Engine.getSupportedServices().has("Mod.io")
	end
	
	
	
	/**
	 * \brief Application key.
	 */
	func String getApikey()
		return pApiKey
	end
	
	/**
	 * \brief Game identifier.
	 */
	func String getGameId()
		return pGameId
	end
	
	/**
	 * \brief User identifier. Called "Local platform user" in ModIO.
	 */
	func String getUserId()
		return pUserId
	end
	
	/**
	 * \brief Store portal or null if unknown.
	 */
	func Portal getPortal()
		return pPortal
	end
	
	
	
	/**
	 * \brief Determines if service is initialized and ready to be used.
	 * 
	 * If null is returned the service is still initializing. If returned object has true
	 * value the service is initialized and ready to be used. If returned object has false
	 * value the service failed to initialized and has to be disposed.
	 */
	func Boolean isInitialized()
		return pIsInitialized
	end
	
	
	
	/**
	 * \brief Add modification listener.
	 * \param listener Listener to add
	 */
	func void addModsListener(ServiceModsListener listener)
		if listener == null
			throw ENullPointer.new("listener")
		end
		pModsListeners.add(listener)
	end
	
	/**
	 * \brief Remove modification listener.
	 * \param listener Listener to remove.
	 */
	func void removeModsListener(ServiceModsListener listener)
		pModsListeners.remove(listener)
	end
	
	
	
	/**
	 * \brief Filtered list of available game modifications.
	 * 
	 * Requests a list of game modifications using the provided filters. All filter
	 * parameters set to null cause default values to be used as defined by the
	 * service provider. Filters not supported by the service provider are ignored.
	 * 
	 * Once the results are retrieved the service calls
	 * \ref ServiceModsListener#listModsFinished(ServiceMods,UniqueID,Array) or
	 * \ref ServiceModsListener#listModsFailed(ServiceMods,UniqueID,String).
	 * The returned request identifier can be used in the listener methods to identify
	 * which request the received response belongs to.
	 * 
	 * Receiving the results can take considerable amount of time depending on the
	 * load of the service provider.
	 * 
	 * \param filter Filter to use.
	 * \param listener If not null called once in addition to added listeners.
	 */
	func UniqueID listAllMods(ServiceModFilter filter, ServiceModsListener listener)
		var ServiceObject so = ServiceObject.new()
		so.setStringChildAt("function", "listAllMods")
		
		pFilterAddEnum(so, "sortField", filter.sortField)
		pFilterAddEnum(so, "sortDirection", filter.sortDirection)
		pFilterAddStringSet(so, "nameContains", filter.matchingName)
		pFilterAddStringSet(so, "matchingAuthor", filter.matchingAuthor)
		pFilterAddStringSet(so, "matchingIds", filter.withIds)
		pFilterAddDate(so, "markedLiveAfter", filter.releasedAfter)
		pFilterAddDate(so, "markedLiveBefore", filter.releasedBefore)
		pFilterAddStringSet(so, "withTags", filter.withTags)
		pFilterAddStringSet(so, "withoutTags", filter.withoutTags)
		if filter.metadataLike != null
			so.setStringChildAt("metadataLike", filter.metadataLike)
		end
		pFilterAddEnum(so, "revenueType", filter.revenueType)
		so.setBoolChildAt("disallowMatureContent", filter.disallowMatureContent)
		pFilterAddEnumSet(so, "withMatureContentFlags", filter.withMatureContentFlags)
		
		so.setIntChildAt("startIndex", filter.startIndex)
		
		if filter.resultCount != 0
			so.setIntChildAt("resultCount", filter.resultCount)
		end
		
		return pRunRequest(so, listener)
	end
	
	/**
	 * \brief Load resource asynchronously.
	 * 
	 * Loaded resources are cached for faster retrieval. Once the resource is cached locally
	 * \ref ServiceModsListener#loadResourceFinished(ServiceMods,String,Object) is called
	 * with the same URL as used in this function call. If loading the image failed
	 * \ref ServiceModsListener#loadResourceFailed(ServiceMods,String,Exception) is called
	 * with the same URL as used in this function call.
	 * 
	 * \param url URL of image to load.
	 * \param listener If not null called once in addition to added listeners.
	 */
	func void loadResource(String url, ServiceModsListener listener)
		var ServiceObject so = ServiceObject.new()
		so.setStringChildAt("function", "loadResource")
		so.setStringChildAt("url", url)
		
		pRunRequest(so, listener)
	end
	
	/**
	 * \brief Mod management is paused.
	 */
	func bool getPauseManagement()
		return pPauseManagement
	end
	
	/**
	 * \brief Pause mod management.
	 * 
	 * By default the service automatically downloads, installs and uninstalls mods
	 * depending on the settings stored in the user profile on the service provider.
	 * This process can be temporarily paused for example during game play.
	 */
	func void setPauseManagement(bool pause)
		if pause == pPauseManagement
			return
		end
		
		pPauseManagement = pause
		
		var ServiceObject so = ServiceObject.new()
		so.setStringChildAt("function", "pauseModManagement")
		so.setBoolChildAt("pause", pause)
		pService.startRequest(so)
	end
	
	/**
	 * \brief Service is busy managing modifications.
	 * 
	 * Returns true if the service is performing one of these actions:
	 * - Installing modification
	 * - Uninstalling modification
	 * - Updating modification to latest version
	 * - Uploading modification
	 * 
	 * While this method returns true certain functions will fail.
	 */
	func bool isManagementBusy()
		return pIsManagementBusy
	end
	
	/**
	 * \brief Determines if the user is authenticated.
	 * 
	 * Managing mods typically requires the user to be authenticated to the service provider.
	 * If the service does not require a remove service provider authenticating is potentially
	 * not required. See the service documentation for these requirements.
	 */
	func bool isAuthenticated()
		var ServiceObject so = ServiceObject.new()
		so.setStringChildAt("function", "isAuthenticated")
		return pService.runAction(so).getBoolean()
	end
	
	/**
	 * \brief Authenticate user.
	 * 
	 * Managing mods typically requires the user to be authenticated to the service provider.
	 * If the service does not require a remove service provider authenticating is potentially
	 * not required. See the service documentation for these requirements.
	 * 
	 * Authentication tokens are typically obtained from services supporting ServiceUser
	 * interface by calling \ref ServiceUser#getAuthToken(ServiceUserListener).
	 * 
	 * If user has been successfully authenticated
	 * \ref ServiceModsListener#authenticateFinished(ServiceMods) is called. If authentication
	 * failed \ref ServiceModsListener#authenticateFailed(ServiceMods,Exception) is called.
	 * 
	 * \param token Authentication token.
	 * \param listener If not null called once in addition to added listeners.
	 */
	func void authenticate(ServiceUserAuthToken token, ServiceModsListener listener)
		var ServiceObject so = ServiceObject.new()
		so.setStringChildAt("function", "authenticateUserExternal")
		so.setStringChildAt("provider", token.provider)
		so.setStringChildAt("token", token.token)
		so.setBoolChildAt("termsAccepted", false)
		if token.parameters != null
			var ServiceObject so2 = ServiceObject.new()
			token.parameters.forEach(block String key, String value
				so2.setStringChildAt(key, value)
			end)
			so.setChildAt("parameters", so2)
		end
		
		pRunRequest(so, listener)
	end
	
	/**
	 * \brief Deauthenticate user.
	 * 
	 * Managing mods typically requires the user to be authenticated to the service provider.
	 * If the service does not require a remove service provider authenticating is potentially
	 * not required. See the service documentation for these requirements.
	 * 
	 * Deauthentication potentially deletes local user data. See the service documentation
	 * for side effects of using this call.
	 * 
	 * \param token Authentication token.
	 * \param listener If not null called once in addition to added listeners.
	 */
	func void deauthenticate(ServiceModsListener listener)
		var ServiceObject so = ServiceObject.new()
		so.setStringChildAt("function", "clearUserData")
		
		pRunRequest(so, listener)
	end
	
	
	
	/**
	 * \brief Cancel request.
	 * 
	 * Safe to be called if request has been already cancelled or does not exist.
	 * 
	 * \param id Identifier of request to cancel.
	 */
	func void cancelRequest(UniqueID id)
		pService.cancelRequest(id)
	end
	
	
	
	/**
	 * \brief Service request response received.
	 */
	func void requestResponse(Service service, UniqueID id, ServiceObject response, bool finished)
		var String function = response.getChildAt("function").getString()
		var Object onceListener = pGetOnceListener(id)
		
		if function.equals("listAllMods")
			// pDebugRequestResponse(id, response)
			var ServiceObject somods = response.getChildAt("mods")
			var Array mods = Array.new()
			var int i, count = somods.getChildCount()
			for i = 0 to count
				mods.add(pConvModInfo(somods.getChildAt(i)))
			end
			
			pModsListeners.forEach(block ServiceModsListener each
				each.listModsFinished(this, id, mods)
			end)
			if onceListener != null
				(onceListener cast ServiceModsListener).listModsFinished(this, id, mods)
			end
			
		elif function.equals("loadResource")
			var String url = response.getChildAt("url").getString()
			var Object resource = response.getChildAt("resource").getResource()
			// String "resourceType": "image"
			
			pModsListeners.forEach(block ServiceModsListener each
				each.loadResourceFinished(this, url, resource)
			end)
			if onceListener != null
				(onceListener cast ServiceModsListener).loadResourceFinished(this, url, resource)
			end
			
		elif function.equals("authenticateUserExternal")
			pModsListeners.forEach(block ServiceModsListener each
				each.authenticateFinished(this)
			end)
			if onceListener != null
				(onceListener cast ServiceModsListener).authenticateFinished(this)
			end
			
		elif function.equals("clearUserData")
			pModsListeners.forEach(block ServiceModsListener each
				each.deauthenticateFinished(this)
			end)
			if onceListener != null
				(onceListener cast ServiceModsListener).deauthenticateFinished(this)
			end
		end
	end
	
	/**
	 * \brief Service request failed.
	 */
	func void requestFailed(Service service, UniqueID id, ServiceObject error)
		var String function = error.getChildAt("function").getString()
		var ServiceException exception = createException(error)
		var Object onceListener = pGetOnceListener(id)
		
		if function.equals("listAllMods")
			pModsListeners.forEach(block ServiceModsListener each
				each.listModsFailed(this, id, exception)
			end)
			if onceListener != null
				(onceListener cast ServiceModsListener).listModsFailed(this, id, exception)
			end
			
		elif function.equals("loadResource")
			var String url = error.getChildAt("url").getString()
			
			pModsListeners.forEach(block ServiceModsListener each
				each.loadResourceFailed(this, url, exception)
			end)
			if onceListener != null
				(onceListener cast ServiceModsListener).loadResourceFailed(this, url, exception)
			end
			
		elif function.equals("authenticateUserExternal")
			pModsListeners.forEach(block ServiceModsListener each
				each.authenticateFailed(this, exception)
			end)
			if onceListener != null
				(onceListener cast ServiceModsListener).authenticateFailed(this, exception)
			end
			
		elif function.equals("clearUserData")
			pModsListeners.forEach(block ServiceModsListener each
				each.deauthenticateFailed(this, exception)
			end)
			if onceListener != null
				(onceListener cast ServiceModsListener).deauthenticateFailed(this, exception)
			end
		end
	end
	
	/**
	 * \brief Service notification received.
	 */
	func void eventReceived(Service service, ServiceObject event)
		var String eventName = event.getChildAt("event").getString()
		
		if eventName.equals("initialized")
			if event.getChildAt("success").getBoolean()
				pIsInitialized = Boolean.new(true)
				
				if pInitListener != null
					pInitListener.initSucceeded(this)
				end
				
			else
				pIsInitialized = Boolean.new(false)
				
				if pInitListener != null
					pInitListener.initFailed(this, ServiceException.new(service, event.getChildAt("message").getString()))
				end
			end
			
			pInitListener = null
			
		elif eventName.equals("modManagement")
			var ServiceMods.ManagementEvent mev = ServiceMods.ManagementEvent.named(event.getChildAt("subEvent").getString())
			var bool success = event.getChildAt("success").getBoolean()
			var String modId = event.getChildAt("modId").getString()
			var ServiceModProgress progress = pConvModProgress(event)
			var ServiceException exception
			
			pIsManagementBusy = event.getChildAt("busy").getBoolean()
			
			if not success
				exception = createException(event)
			end
			
			pModsListeners.forEach(block ServiceModsListener each
				each.managementEvent(this, mev, modId, progress, exception)
			end)
		end
	end
	
	
	
	/**
	 * \brief Service module service instance.
	 */
	protected func Service getService()
		return pService
	end
	
	/**
	 * \brief Create exception from response.
	 */
	func ServiceException createException(ServiceObject error)
		error = error.getChildAt("message")
		return ServiceException.new(pService, error != null if error.getString() else "Unknown error")
	end
	
	
	
	private func void pFilterAddEnum(ServiceObject so, String key, Enumeration value)
		if value != null
			so.setStringChildAt(key, value.name())
		end
	end
	
	private func void pFilterAddStringSet(ServiceObject so, String key, Set values)
		if values != null
			var ServiceObject so2 = ServiceObject.newList()
			values.forEach(block String each
				so2.addStringChild(each)
			end)
			so.setChildAt(key, so2)
		end
	end
	
	private func void pFilterAddEnumSet(ServiceObject so, String key, Set values)
		if values != null
			var ServiceObject so2 = ServiceObject.newList()
			values.forEach(block Enumeration each
				so2.addStringChild(each.name())
			end)
			so.setChildAt(key, so2)
		end
	end
	
	private func void pFilterAddDate(ServiceObject so, String key, TimeDate date)
		if date != null
			var ServiceObject so2 = ServiceObject.new()
			so2.setIntChildAt("year", date.getYear())
			so2.setIntChildAt("month", date.getMonth())
			so2.setIntChildAt("day", date.getDay())
			so.setChildAt(key, so2)
		end
	end
	
	private func String pConvString(ServiceObject so, String key)
		var ServiceObject so2 = so.getChildAt(key)
		return so2 != null if so2.getString() else null
	end
	
	private func int pConvInt(ServiceObject so, String key, int defaultValue)
		var ServiceObject so2 = so.getChildAt(key)
		return so2 != null if so2.getInteger() else defaultValue
	end
	
	private func bool pConvBool(ServiceObject so, String key, bool defaultValue)
		var ServiceObject so2 = so.getChildAt(key)
		return so2 != null if so2.getBoolean() else defaultValue
	end
	
	private func float pConvFloat(ServiceObject so, String key, float defaultValue)
		var ServiceObject so2 = so.getChildAt(key)
		return so2 != null if so2.getFloat() else defaultValue
	end
	
	private func TimeDate pConvTimeDate(ServiceObject so, String key)
		var ServiceObject so2 = so.getChildAt(key)
		return so2 != null if TimeDate.new(\
			pConvInt(so2, "year", 0), pConvInt(so2, "month", 0), pConvInt(so2, "day", 0),\
			pConvInt(so2, "hour", 0), pConvInt(so2, "minute", 0), pConvInt(so2, "second", 0))\
			else null
	end
	
	private func Array pConvStringList(ServiceObject so, String key)
		var ServiceObject so2 = so.getChildAt(key)
		if so2 == null
			return null
		end
		
		var int i, count = so2.getChildCount()
		var Array list = Array.new()
		
		for i = 0 to count
			list.add(so2.getChildAt(i).getString())
		end
		
		return list
	end
	
	private func Set pConvStringSet(ServiceObject so, String key)
		var ServiceObject so2 = so.getChildAt(key)
		if so2 == null
			return null
		end
		
		var int i, count = so2.getChildCount()
		var Set set = Set.new()
		
		for i = 0 to count
			set.add(so2.getChildAt(i).getString())
		end
		
		return set
	end
	
	private func Dictionary pConvStringDict(ServiceObject so, String key)
		var ServiceObject so2 = so.getChildAt(key)
		if so2 == null
			return null
		end
		
		var int i, count = so2.getChildCount()
		var Dictionary dict = Dictionary.new()
		var ServiceObject so3
		
		for i = 0 to count
			so3 = so2.getChildAt(i)
			dict.setAt(so3.getChildAt("key").getString(), so3.getChildAt("value").getString())
		end
		
		return dict
	end
	
	private func Dictionary pConvTagList(ServiceObject so, String key)
		var ServiceObject so2 = so.getChildAt(key)
		if so2 == null
			return null
		end
		
		var int i, count = so2.getChildCount()
		var Dictionary dict = Dictionary.new()
		var ServiceObject so3
		
		for i = 0 to count
			so3 = so2.getChildAt(i)
			dict.setAt(so3.getChildAt("tag").getString(), so3.getChildAt("tagLocalized").getString())
		end
		
		return dict
	end
	
	private func ServiceModInfo pConvModInfo(ServiceObject so)
		var ServiceObject so2
		var int i, count
		
		var ServiceModInfo info = ServiceModInfo.new()
		info.id = pConvString(so, "modId")
		info.name = pConvString(so, "profileName")
		info.summary = pConvString(so, "profileSummary")
		info.descriptionHtml = pConvString(so, "profileDescription")
		info.descriptionText = pConvString(so, "profileDescriptionPlaintext")
		info.profileUrl = pConvString(so, "profileURL")
		info.dateAdded = pConvTimeDate(so, "profileDateAdded")
		info.dateUpdated = pConvTimeDate(so, "profileDateUpdated")
		info.dateReleased = pConvTimeDate(so, "profileDateLive")
		info.metadata = pConvString(so, "metadataBlob")
		info.metadataMap = pConvStringDict(so, "metadataKvp")
		info.version = pConvString(so, "version")
		info.price = pConvInt(so, "price", 0).toString()
		info.hasDependencies = pConvBool(so, "dependencies", false)
		info.publicVisible = pConvBool(so, "publicVisible", true)
		
		so2 = so.getChildAt("modStatus")
		if so2 != null
			info.status = ServiceModInfo.Status.named(so2.getString())
		end
		
		info.submittedBy = pConvUser(so.getChildAt("profileSubmittedBy"))
		info.logo = pConvImage(so.getChildAt("modLogo"))
		info.latestRelease = pConvRelease(so.getChildAt("fileInfo"))
		info.stats = pConvModStats(so.getChildAt("stats"))
		info.tags = pConvTagList(so, "tags")
		
		so2 = so.getChildAt("profileMaturityOption")
		if so2 != null
			info.maturityOptions = Set.new()
			count = so2.getChildCount()
			for i = 0 to count
				info.maturityOptions.add(ServiceModFilter.MatureContent.named(so2.getChildAt(i).getString()))
			end
		end
		
		so2 = so.getChildAt("galleryImages")
		if so2 != null
			info.galleryImages = Array.new()
			count = so2.getChildCount()
			for i = 0 to count
				info.galleryImages.add(pConvImage(so2.getChildAt(i)))
			end
		end
		
		var Array youtubeUrls = pConvStringList(so, "youtubeUrls")
		var Array sketchfabUrls = pConvStringList(so, "sketchfabUrls")
		
		if youtubeUrls != null or sketchfabUrls != null
			var ServiceModInfo.ExternalLink link
			
			info.externalLinks = Array.new()
			
			if youtubeUrls != null
				youtubeUrls.forEach(block String url
					link = ServiceModInfo.ExternalLink.new()
					link.description = "YouTube"
					link.url = url
					info.externalLinks.add(link)
				end)
			end
			
			if sketchfabUrls != null
				sketchfabUrls.forEach(block String url
					link = ServiceModInfo.ExternalLink.new()
					link.description = "Sketchfab"
					link.url = url
					info.externalLinks.add(link)
				end)
			end
		end
		
		/*
	
	so->SetChildAt( "stats", ModStats( info.Stats ) );
		*/
		return info
	end
	
	private func ServiceUserInfo pConvUser(ServiceObject so)
		if so == null
			return null
		end
		
		var ServiceUserInfo user = ServiceUserInfo.new()
		user.id = pConvString(so, "userId")
		user.name = pConvString(so, "username")
		user.displayName = pConvString(so, "displayNamePortal")
		user.profileUrl = pConvString(so, "profileUrl")
		//pConvString(so, "authToken")
		user.dateOnline = pConvTimeDate(so, "dateOnline")
		user.avatar = pConvImage(so.getChildAt("avatar"))
		return user
	end
	
	private func ServiceImage pConvImage(ServiceObject so)
		var ServiceImage image = ServiceImage.new()
		image.filename = pConvString(so, "filename")
		image.url = pConvString(so, "original")
		
		// a=avatar, g=gallery-images l=logo
		pConvAddThumbnail(image, so, "thumb50x50", Point.new(50, 50)) // a
		pConvAddThumbnail(image, so, "thumb100x100", Point.new(100, 100)) // a
		pConvAddThumbnail(image, so, "thumb320x180", Point.new(320, 180)) // g,l
		pConvAddThumbnail(image, so, "thumb640x360", Point.new(640, 360)) // l
		pConvAddThumbnail(image, so, "thumb1280x720", Point.new(1280, 720)) // g,l
		return image
	end
	
	private func void pConvAddThumbnail(ServiceImage image, ServiceObject so, String key, Point size)
		var ServiceObject so2 = so.getChildAt(key)
		if so2 == null
			return
		end
		
		var ServiceImage.Thumbnail thumbnail = ServiceImage.Thumbnail.new()
		thumbnail.size = size
		thumbnail.url = so2.getString()
		image.thumbnails.add(thumbnail)
	end
	
	private func ServiceModRelease pConvRelease(ServiceObject so)
		if so == null
			return null
		end
		
		var ServiceModRelease release = ServiceModRelease.new()
		var ServiceObject so2
		
		release.id = pConvString(so, "metadataId")
		release.modId = pConvString(so, "modId")
		release.dateAdded = pConvTimeDate(so, "dateAdded")
		release.filesize = pConvFloat(so, "filesize", 0)
		release.filesizeUncompressed = pConvFloat(so, "filesizeUncompressed", 0)
		release.filename = pConvString(so, "filename")
		release.version = pConvString(so, "version")
		release.changelog = pConvString(so, "changelog")
		release.metadata = pConvString(so, "metadataBlob")
		release.downloadUrl = pConvString(so, "downloadBinaryURL")
		release.downloadExpiryDate = pConvTimeDate(so, "downloadExpiryDate")
		
		so2 = so.getChildAt("currentVirusScanStatus")
		if so2 != null
			release.virusScanStatus = ServiceModRelease.VirusScanStatus.named(so2.getString())
		end
		
		so2 = so.getChildAt("currentVirusStatus")
		if so2 != null
			release.virusStatus = ServiceModRelease.VirusStatus.named(so2.getString())
		end
		
		return release
	end
	
	private func ServiceModInfo.ExternalLink pConvExternalLink(ServiceObject so)
		var ServiceModInfo.ExternalLink link = ServiceModInfo.ExternalLink.new()
		link.description = pConvString(so, "filename")
		link.url = pConvString(so, "original")
		return link
	end
	
	private func ServiceModStats pConvModStats(ServiceObject so)
		if so == null
			return null
		end
		
		var ServiceModStats stats = ServiceModStats.new()
		stats.rankPosition = pConvFloat(so, "popularityRankPosition", 0)
		stats.rankCount = pConvFloat(so, "popularityRankTotalMods", 0)
		stats.downloadCount = pConvFloat(so, "downloadsTotal", 0)
		stats.subscriberCount = pConvFloat(so, "subscribersTotal", 0)
		stats.ratingCount = pConvFloat(so, "ratingTotal", 0)
		stats.ratingCountPositive = pConvFloat(so, "ratingPositive", 0)
		stats.ratingCountNegative = pConvFloat(so, "ratingNegative", 0)
		stats.ratingWeighted = pConvFloat(so, "ratingWeightedAggregate", 0)
		stats.ratingDisplayText = pConvString(so, "ratingDisplayText")
		
		return stats
	end
	
	private func ServiceModProgress pConvModProgress(ServiceObject so)
		if so == null
			return null
		end
		
		var ServiceModProgress progress = ServiceModProgress.new()
		progress.status = ServiceModProgress.Status.named(so.getChildAt("status").getString())
		progress.total = pConvFloat(so, "total", 1)
		progress.current = pConvFloat(so, "current", 0)
		progress.progress = pConvFloat(so, "progress", 0)
		return progress
	end
	
	private func Object pGetOnceListener(UniqueID id)
		var Object listener = pOnceListeners.getAt(id, null)
		if listener != null
			pOnceListeners.remove(id)
		end
		return listener
	end
	
	private func UniqueID pRunRequest(ServiceObject request, Object listener)
		var UniqueID id = pService.nextId()
		pService.startRequest(id, request)
		if listener != null
			pOnceListeners.setAt(id, listener)
		end
		return id
	end
end
