/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

namespace Dragengine.Services


/**
 * \brief Service providing access to Mod.io functionality if supported.
 * \version 1.23
 * 
 * Provides access to these functionalities:
 * - Mod browsing
 * - Mod installing
 * - Mod deinstalling
 */
class ServiceModio implements ServiceListener
	var String pApiKey, pGameId, pUserId
	var ModioEnvironment pEnvironment
	var ModioPortal pPortal
	var Service pService
	var ServiceInitListener pInitListener
	var Boolean pIsInitialized
	
	
	
	/**
	 * \brief Create service ServiceModIO.
	 * 
	 * The service is asynchronously initialized. Once initialization finished
	 * the provided listener is called with success or failure outcome. If the
	 * outcome is success the service can be used. If the outcome is failure
	 * the service can not be used and should be disposed.
	 * 
	 * \param apiKey Application key.
	 * \param gameId Game identifier. Number in string form.
	 * \param userId User identifier. Called "Local platform user" in ModIO.
	 * \param environment Environment to use.
	 * \param portal Optional portal indicator. Can be null if not known.
	 * \param listener Listener called if initialization finished. Can be null.
	 * \throws EInvalidParam ModIO service module is not present.
	 * \throws EInvalidParam One or more of the provided parameters is not valid.
	 */
	func new(String apiKey, String gameId, String userId, ModioEnvironment environment,\
	ModioPortal portal, ServiceInitListener listener)
		pApiKey = apiKey
		pGameId = gameId
		pUserId = userId
		pEnvironment = environment
		pPortal = portal
		pInitListener = listener
		
		var ServiceObject so = ServiceObject.new()
		so.setStringChildAt("apiKey", apiKey)
		so.setStringChildAt("gameId", gameId)
		so.setStringChildAt("userId", userId)
		so.setStringChildAt("environment", environment.name())
		if portal != null
			so.setStringChildAt("portal", portal.name())
		end
		
		pService = Service.new("Mod.io", so)
		
		pService.setListener(this)
	end
	
	/**
	 * \brief Dispose of ModIO service.
	 */
	func void dispose()
		pInitListener = null
		
		if pService != null
			pService.setListener(null)
		end
		pService = null
	end
	
	
	
	/**
	 * \brief Checks if ModIO service is supported.
	 * 
	 * Service is reported supported if the ModIO Service Module is present.
	 * Creating the service can still fail.
	 */
	static func bool isServiceSupported()
		return Engine.getSupportedServices().has("Mod.io")
	end
	
	
	
	/**
	 * Application key.
	 */
	func String getApikey()
		return pApiKey
	end
	
	/**
	 * Game identifier.
	 */
	func String getGameId()
		return pGameId
	end
	
	/**
	 * User identifier. Called "Local platform user" in ModIO.
	 */
	func String getUserId()
		return pUserId
	end
	
	/**
	 * Game environment.
	 */
	func ModioEnvironment getEnvironment()
		return pEnvironment
	end
	
	/**
	 * Store portal or null if unknown.
	 */
	func ModioPortal getPortal()
		return pPortal
	end
	
	
	
	/**
	 * Determines if service is initialized and ready to be used. If null is returned the
	 * service is still initializing. If returned object has true value the service is
	 * initialized and ready to be used. If returned object has false value the service
	 * failed to initialized and has to be disposed.
	 */
	func Boolean isInitialized()
		return pIsInitialized
	end
	
	
	
	/**
	 * \brief Service request response received.
	 */
	func void requestResponse(Service service, UniqueID id, ServiceObject response, bool finished)
		var String function = response.getChildAt("function").getString()
		
		if function.equals("dummy")
		end
	end
	
	/**
	 * \brief Service request failed.
	 */
	func void requestFailed(Service service, UniqueID id, ServiceObject error)
		var String function = error.getChildAt("function").getString()
		
		if function.equals("dummy")
		end
	end
	
	/**
	 * \brief Service notification received.
	 */
	func void eventReceived(Service service, ServiceObject event)
		var String eventName = event.getChildAt("event").getString()
		
		if eventName.equals("initialized")
			if event.getChildAt("success").getBoolean()
				pIsInitialized = Boolean.new(true)
				
				if pInitListener != null
					pInitListener.initSucceeded(this)
				end
				
			else
				pIsInitialized = Boolean.new(false)
				
				if pInitListener != null
					pInitListener.initFailed(this, event.getChildAt("code").getInteger(),\
						event.getChildAt("message").getString())
				end
			end
			
			pInitListener = null
		end
	end
	
	
	
	/**
	 * \brief Service module service instance.
	 */
	protected func Service getService()
		return pService
	end
	
	/**
	 * \brief Get error message from response.
	 */
	func String getErrorMessage(ServiceObject error)
		error = error.getChildAt("message")
		return error != null if error.getString() else "Unknown error"
	end
end
