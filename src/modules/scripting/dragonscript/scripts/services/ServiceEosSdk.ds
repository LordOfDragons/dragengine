/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

namespace Dragengine.Services

pin Dragengine.Services.Stats


/**
 * \brief Service providing access to EOS SDK functionality if supported.
 * \version 1.23
 * 
 * Provides access to these functionalities:
 * - Stats/Achievements
 * - User
 */
class ServiceEosSdk implements ServiceStats
	var String pProductName
	var String pProductVersion
	var String pProductId
	var String pSandboxId
	var String pDeploymentId
	var String pClientId
	var String pClientSecret
	
	var Service pService
	
	var SafeArray pStatsListeners
	var Dictionary pOnceListeners
	
	
	/**
	 * \brief Create service ServiceSteamSdk.
	 * \param productName Name of the product using the Epic Online Services SDK.
	 *        Name is required to be non-empty and at maximum of 64 bytes long.
	 *        Name can consist of the following characters:
	 *        A-Z, a-z, 0-9, dot, underscore, space, exclamation mark, question mark,
	 *        and sign, hyphen, parenthesis, plus, minus, colon.
	 * \param productVersion Product version of the running application. Version is
	 *        required to be non-empty and at maximum of 64 bytes long.
	 *        Versionn can consist of the following characters:
	 *        A-Z, a-z, 0-9, dot, underscore, space, exclamation mark, question mark,
	 *        and sign, hyphen, parenthesis, plus, minus, colon.
	 * \param productId Product ID, found on the dev portal. Max length is 64.
	 * \param sandboxId Sandbox ID, found on the dev portal. Max length is 64.
	 * \param deploymentId Deployment ID, found on the dev portal. Max length is 64.
	 * \param clientId Client ID of service permissions entry. Use null if no service
	 *        permissions are used. Max length is 64.
	 * \param clientSecret Client secret for accessing the set of permissions. Use null
	 *        if no service permissions are used. Max length is 64.
	 * 
	 * \throws EInvalidParam EOS SDK service module is not present.
	 * \throws EInvalidAction EOS SDK can not be initialized.
	 */
	func new(String productName, String productVersion, String productId,\
	String sandboxId, String deploymentId, String clientId, String clientSecret)
		if productName == null
			throw ENullPointer.new("productName")
		end
		if productVersion == null
			throw ENullPointer.new("productVersion")
		end
		if productId == null
			throw ENullPointer.new("productId")
		end
		if sandboxId == null
			throw ENullPointer.new("sandboxId")
		end
		if deploymentId == null
			throw ENullPointer.new("deploymentId")
		end
		
		pProductName = productName
		pProductVersion = productVersion
		pProductId = productId
		pSandboxId = sandboxId
		pDeploymentId = deploymentId
		pClientId = clientId
		pClientSecret = clientSecret
		
		pStatsListeners = SafeArray.new()
		pOnceListeners = Dictionary.new()
		
		var ServiceObject so = ServiceObject.new()
		so.setStringChildAt("productName", productName)
		so.setStringChildAt("productVersion", productVersion)
		so.setStringChildAt("productId", productId)
		so.setStringChildAt("sandboxId", sandboxId)
		so.setStringChildAt("deploymentId", deploymentId)
		if clientId != null
			so.setStringChildAt("clientId", clientId)
		end
		if clientSecret != null
			so.setStringChildAt("clientSecret", clientSecret)
		end
		pService = Service.new("EOSSDK", so)
	end
	
	/**
	 * \brief Dispose of Steam SDK service.
	 */
	func void dispose()
		pStatsListeners.removeAll()
		pOnceListeners.removeAll()
		
		if pService != null
			pService.setListener(null)
		end
		pService = null
	end
	
	
	
	/**
	 * \brief Checks if EOS SDK service is supported.
	 * 
	 * Service is reported supported if the EOS SDK Service Module is present.
	 */
	static func bool isServiceSupported()
		return Engine.getSupportedServices().has("EOSSDK")
	end
	
	/**
	 * \brief Authentification provider identifier.
	 */
	static fixed var String authProviderId = "epic"
	
	
	
	/**
	 * \brief Add stats and achievements listener.
	 * \param listener Listener to add
	 */
	func void addStatListener(ServiceStatsListener listener)
		if listener == null
			throw ENullPointer.new("listener")
		end
		pStatsListeners.add(listener)
	end
	
	/**
	 * \brief Remove stats and achievements listener.
	 * \param listener Listener to remove.
	 */
	func void removeStatsListener(ServiceStatsListener listener)
		pStatsListeners.remove(listener)
	end
	
	/**
	 * \brief Get stats and achievements.
	 * 
	 * Requests from the steam server the set of stats and achievements with the matching
	 * api names. Once retrieved calls
	 * \ref ServiceStatsListener#statsReceived(Object,Dictionary,Dictionary) or
	 * \ref ServiceStatsListener#statsReceivedFailed(Object,String).
	 * 
	 * \param stats Stats.
	 * \param achievements Achievements.
	 * \param listener If not null called once in addition to added listeners.
	 */
	func void getStatsAndAchievements(Set stats, Set achievements, ServiceStatsListener listener)
	end
	
	/**
	 * \brief Set stats and achievements.
	 * 
	 * Stores stats and achievements to steam server. Once stored calls
	 * \ref ServiceStatsListener#statsStored(Object,Set,Set) or
	 * \ref ServiceStatsListener#statsStoredFailed(Object,String).
	 * 
	 * \param stats Dictionary of stats to store. Key is api name as String. Values is
	 * either an int or float value depending on the stat type.
	 * 
	 * \param achievements Dictionary of achievements to store. Key is api name as String.
	 * Value is true or false to set or clear the achievement.
	 * 
	 * \param listener If not null called once in addition to added listeners.
	 */
	func void setStatsAndAchievements(Dictionary stats, Dictionary achievements, ServiceStatsListener listener)
	end
	
	/**
	 * \brief Reset all stats on steam server.
	 * 
	 * This is mainly for development purpose to test stats and achievements.
	 * For this reason this call does not send events to listeners.
	 * 
	 * \param resetAchievements Reset also achievements not just stats.
	 */
	func void resetAllStats(bool resetAchievements)
	end
	
	
	
	/**
	 * \brief Service request response received.
	 */
	func void requestResponse(Service service, UniqueID id, ServiceObject response, bool finished)
		var String function = response.getChildAt("function").getString()
		var Object onceListener = pGetOnceListener(id)
		
		if function.equals("requestCurrentStats")
		end
	end
	
	/**
	 * \brief Service request failed.
	 */
	func void requestFailed(Service service, UniqueID id, ServiceObject error)
		var String function = error.getChildAt("function").getString()
		var ServiceException exception = createException(error)
		var Object onceListener = pGetOnceListener(id)
		
		if function.equals("requestCurrentStats")
		end
	end
	
	/**
	 * \brief Service notification received.
	 */
	func void eventReceived(Service service, ServiceObject event)
	end
	
	
	
	/**
	 * \brief Service module service instance.
	 */
	protected func Service getService()
		return pService
	end
	
	/**
	 * \brief Create exception from response.
	 */
	func ServiceException createException(ServiceObject error)
		error = error.getChildAt("message")
		return ServiceException.new(pService, error != null if error.getString() else "Unknown error")
	end
	
	private func Object pGetOnceListener(UniqueID id)
		var Object listener = pOnceListeners.getAt(id, null)
		if listener != null
			pOnceListeners.remove(id)
		end
		return listener
	end
	
	private func UniqueID pRunRequest(ServiceObject request, Object listener)
		var UniqueID id = pService.nextId()
		pService.startRequest(id, request)
		if listener != null
			pOnceListeners.setAt(id, listener)
		end
		return id
	end
end

