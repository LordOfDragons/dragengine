/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

namespace Dragengine.Services.Mods
pin Dragengine.Services.User


/**
 * \brief Interface for services supporting managing game modifications.
 * \version 1.23
 * 
 * This interface is designed for services using a remote host to store modifications and
 * user profiles with the installed and active mods. For this reason the majority of calls
 * are asynchronous. This does not prevent local host only services to use this interface.
 */
interface ServiceMods
	/**
	 * \bief Mod management event.
	 */
	enum ManagementEvent
		/**
		 * \brief Begin installing modification.
		 */
		beginInstall
		
		/**
		 * \brief Finished installing modification.
		 * 
		 * Modification is now allowed to be activated.
		 */
		installed
		
		/**
		 * \brief Begin uninstalling modification.
		 * 
		 * Allowed only if the modification is deactivated.
		 */
		beginUninstall
		
		/**
		 * \brief Finished uninstalling modification.
		 */
		uninstalled
		
		/**
		 * \brief Begin updating modification to latest version.
		 */
		beginUpdate
		
		/**
		 * \brief Finished updating modification to latest version.
		 */
		updated
		
		/**
		 * \brief Begin uploading modification.
		 */
		beginUpload
		
		/**
		 * \brief Finished uploading modification.
		 */
		uploaded
		
		/**
		 * \brief Progress information.
		 */
		progress
	end
	
	
	
	/**
	 * \brief Features supported by this service.
	 */
	func ServiceModsFeatures getModsFeatures()
	
	/**
	 * \brief Add modification listener.
	 * \param listener Listener to add
	 */
	func void addModsListener(ServiceModsListener listener)
	
	/**
	 * \brief Remove modification listener.
	 * \param listener Listener to remove.
	 */
	func void removeModsListener(ServiceModsListener listener)
	
	
	
	/**
	 * \brief Filtered list of available game modifications.
	 * 
	 * Requests a list of game modifications using the provided filters. All filter
	 * parameters set to null cause default values to be used as defined by the
	 * service provider. Filters not supported by the service provider are ignored.
	 * 
	 * Once finished \ref ServiceModsListener#onListMods(ServiceMods,Array,Exception)
	 * is called.
	 * 
	 * Receiving the results can take considerable amount of time depending on the
	 * load of the service provider.
	 * 
	 * \param filter Filter to use.
	 * \param listener If not null called once in addition to added listeners.
	 */
	func void listAllMods(ServiceModFilter filter, ServiceModsListener listener)
	
	/**
	 * \brief Load resource asynchronously.
	 * 
	 * Loaded resources are cached for faster retrieval. Once the resource is cached locally
	 * \ref ServiceModsListener#onLoadResource(ServiceMods,String,Object,Exception) is called
	 * with the same URL as used in this function call.
	 * 
	 * \param url URL of image to load.
	 * \param listener If not null called once in addition to added listeners.
	 */
	func void loadResource(String url, ServiceModsListener listener)
	
	/**
	 * \brief Determines if the user is authenticated.
	 * 
	 * Managing mods typically requires the user to be authenticated to the service provider.
	 * If the service does not require a remove service provider authenticating is potentially
	 * not required. See the service documentation for these requirements.
	 */
	func bool isAuthenticated()
	
	/**
	 * \brief Authenticate user.
	 * 
	 * Managing mods typically requires the user to be authenticated to the service provider.
	 * If the service does not require a remove service provider authenticating is potentially
	 * not required. See the service documentation for these requirements.
	 * 
	 * Authentication tokens are typically obtained from services supporting ServiceUser
	 * interface by calling \ref ServiceUser#getAuthToken(ServiceUserListener).
	 * 
	 * If user has been successfully authenticated
	 * \ref ServiceModsListener#onAuthenticate(ServiceMods,Exception) is called.
	 * 
	 * \param token Authentication token.
	 * \param listener If not null called once in addition to added listeners.
	 */
	func void authenticate(ServiceUserAuthToken token, ServiceModsListener listener)
	
	/**
	 * \brief Deauthenticate user.
	 * 
	 * Managing mods typically requires the user to be authenticated to the service provider.
	 * If the service does not require a remove service provider authenticating is potentially
	 * not required. See the service documentation for these requirements.
	 * 
	 * Deauthentication potentially deletes local user data. See the service documentation
	 * for side effects of using this call.
	 * 
	 * If user has been successfully deauthenticated
	 * \ref ServiceModsListener#onDeauthenticate(ServiceMods,Exception) is called.
	 * 
	 * \param token Authentication token.
	 * \param listener If not null called once in addition to added listeners.
	 */
	func void deauthenticate(ServiceModsListener listener)
	
	/**
	 * \brief Mod management is paused.
	 */
	func bool getPauseManagement()
	
	/**
	 * \brief Pause mod management.
	 * 
	 * By default the service automatically downloads, installs and uninstalls mods.
	 * This process can be temporarily paused for example during game play.
	 */
	func void setPauseManagement(bool pause)
	
	/**
	 * \brief Cancel request.
	 * 
	 * Safe to be called if request has been already cancelled or does not exist.
	 * 
	 * \param id Identifier of request to cancel.
	 */
	func void cancelRequest(UniqueID id)
	
	/**
	 * \brief Service is busy managing modifications.
	 * 
	 * Typical actions causing true to be returned are (non conclusive list):
	 * - Installing modification
	 * - Uninstalling modification
	 * - Updating modification to latest version
	 * - Uploading modification
	 * 
	 * While this method returns true certain functions will fail.
	 */
	func bool isManagementBusy()
	
	/**
	 * \brief Subscribe to modification.
	 * 
	 * The user can also subscribe to a modification from outside the game using different means.
	 * In both situationsn modifications are installed automatically the next time possible if at
	 * least one user is subscribed to them. Hence subscribing and installing are different actions.
	 * 
	 * Once subscribing finished \ref ServiceModsListener#onSubscribeMod(ServiceMods,String,Exception)
	 * is called. At this point in time the modification is potentially not yet installed.
	 * Mod management installs mods as soon as possible if necessary. Listen to
	 * \ref ServiceModsListener#onModManagement(ServiceMods,ManagementEvent,String,ServiceModProgress,Exception)
	 * events to know when the modification started and finished installing.
	 * 
	 * \param token Authentication token.
	 * \param id Identifier of modification to subscribe to.
	 * \param listener If not null called once in addition to added listeners.
	 */
	func void subscribeMod(String id, ServiceModsListener listener)
	
	/**
	 * \brief Unsubscribe from modification.
	 * 
	 * The user can also unsubscribe from a modification from outside the game using different means.
	 * In both situationsn modifications are uninstalled automatically the next time possible if
	 * no user is subscribed to them. Hence unsubscribing and uninstalling are different actions.
	 * 
	 * Once unsubscribing finished \ref ServiceModsListener#onUnsubscribeMod(ServiceMods,String,Exception)
	 * is called. At this point in time the modification is still installed. Mod management
	 * uninstalls mods as soon as possible if necessary. Listen to
	 * \ref ServiceModsListener#onModManagement(ServiceMods,ManagementEvent,String,ServiceModProgress,Exception)
	 * events to know when the modification started and finished uninstalling.
	 * 
	 * \param token Authentication token.
	 * \param id Identifier of modification to unsubscribe from.
	 * \param listener If not null called once in addition to added listeners.
	 */
	func void unsubscribeMod(String id, ServiceModsListener listener)
	
	/**
	 * \brief Current mod install or update progress information.
	 * 
	 * If no suitable mod management action is in progress null is returned.
	 */
	func ServiceModProgress getCurrentModUpdate()
	
	/**
	 * \brief User subscribed mods.
	 * 
	 * Returns modifications are potentially not installed. Use \ref ServiceModStatus#status
	 * to filter modifications of interest. Returns dictionary with String modification
	 * identifier and ServiceModStatus value.
	 */
	func Dictionary getSubscribedMods()
	
	/**
	 * \brief System mods.
	 * 
	 * Returns all modifications installed on the system by all users. Returns dictionary
	 * with String modification identifier and ServiceModStatus value.
	 */
	func Dictionary getSystemMods()
	
	/**
	 * \brief User information or null if not know.
	 * 
	 * User information is present if the user is authenticated.
	 */
	func ServiceUserInfo getUserInfo()
	
	/**
	 * \brief Retrieve information about game modification.
	 * 
	 * Once finished \ref ServiceModsListener#onGetModInfo(ServiceMods,String,ServiceModInfo,Exception)
	 * is called.
	 * 
	 * \param modId Identifier of modification to retrieve.
	 * \param listener If not null called once in addition to added listeners.
	 */
	func void getModInfo(String id, ServiceModsListener listener)
	
	/**
	 * \brief Submit rating for modification.
	 * 
	 * Once finished \ref ServiceModsListener#onSubmitModRating(ServiceMods,String,Exception)
	 * is called.
	 * 
	 * \param modId Identifier of modification to submit rating for.
	 * \param rating Rating to submit.
	 * \param listener If not null called once in addition to added listeners.
	 */
	func void submitModRating(String id, int rating, ServiceModsListener listener)
	
	/**
	 * \brief Revoke rating for modification.
	 * 
	 * Once finished \ref ServiceModsListener#onRevokeModRating(ServiceMods,String,Exception)
	 * is called.
	 * 
	 * \param modId Identifier of modification to revoke rating for.
	 * \param listener If not null called once in addition to added listeners.
	 */
	func void revokeModRating(String id, ServiceModsListener listener)
end
