/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

namespace Dragengine.Services.User


/**
 * \brief Interface for services supporting user information and management.
 * \version 1.23
 */
interface ServiceUser
	/**
	 * \brief Add user listener.
	 * \param listener Listener to add
	 */
	func void addUserListener(ServiceUserListener listener)
	
	/**
	 * \brief Remove user listener.
	 * \param listener Listener to remove.
	 */
	func void removeUserListener(ServiceUserListener listener)
	
	
	
	/**
	 * \brief Features supported by this service.
	 */
	func ServiceUserFeatures getUserFeatures()
	
	/**
	 * \brief Log in user.
	 * 
	 * User can be logged in automatically or manually. Examine the service features.
	 * to know if a particular service supports one or both of these methods.
	 * 
	 * Automatic logging in is used for example Steam where the user has to log into the
	 * platform before the game can be launched. Automatic logging in can trigger platform
	 * specific log in procedure and terms acknowledge process. Typically this has to be
	 * done once and then logging in is automatic.
	 * 
	 * Manual logging in requires the game to obtain the credentials from the user.
	 * This can be useful for developers to not enter credentials each time they launch
	 * the game. Production games usually do not require manual logging in unless the
	 * service in question does not support automatic logging in.
	 * 
	 * Once logging in finished \ref ServiceUserListener#onLoginUser(ServiceUser,Exception)
	 * is called.
	 * 
	 * \param credentials Credentials for manual logging in. Use null for automatic logging in.
	 * \param listener If not null called once in addition to added listeners.
	 * \returns Request ID. Can be used to cancel request.
	 */
	func UniqueID loginUser(ServiceUserCredentials credentials, ServiceUserListener listener)
	
	/**
	 * \brief Log out user.
	 * 
	 * Once logging out finished \ref ServiceUserListener#onLogoutUser(ServiceUser,Exception)
	 * is called.
	 * 
	 * \param listener If not null called once in addition to added listeners.
	 * \returns Request ID. Can be used to cancel request.
	 */
	func UniqueID logoutUser(ServiceUserListener listener)
	
	/**
	 * \brief User is logged in.
	 */
	func bool isUserLoggedIn()
	
	/**
	 * \brief Request authentification token.
	 * 
	 * Requests an encrypted appplication ticket. If one is cached it is returned.
	 * The received ticket is Base64 encoded.
	 * 
	 * \param listener If not null called once in addition to added listeners.
	 * \returns Request ID. Can be used to cancel request.
	 */
	func UniqueID getAuthToken(ServiceUserListener listener)
	
	/**
	 * \brief Retrieve user information.
	 * 
	 * \param listener If not null called once in addition to added listeners.
	 * \returns Request ID. Can be used to cancel request.
	 */
	func UniqueID getUserInfo(ServiceUserListener listener)
	
	/**
	 * \brief Cancel request.
	 * 
	 * Safe to be called if request has been already cancelled or does not exist.
	 * 
	 * \param id Identifier of request to cancel.
	 */
	func void cancelRequest(UniqueID id)
end
