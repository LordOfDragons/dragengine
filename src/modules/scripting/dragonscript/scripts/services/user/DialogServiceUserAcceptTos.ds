/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

namespace Dragengine.Services.User
pin Dragengine.Gui
pin Dragengine.Gui.Layouts

/**
 * \brief Dialog showing terms of service to user for acceptance.
 * 
 * For use with \ref ServiceUserErrorNeedAcceptTos.
 */
class DialogServiceUserAcceptTos extends WindowDialog
	var ServiceUserErrorNeedAcceptTos pTerms
	
	
	/** \brief Create dialog */
	func new(ServiceUserErrorNeedAcceptTos terms) super(0, 0, 400, 200)
		pTerms = terms
		runWhileBlockingLayout(block
			createContent()
		end)
	end
	
	
	
	/** \brief Terms. */
	func ServiceUserErrorNeedAcceptTos getTerms()
		return pTerms
	end
	
	
	
	/**
	 * \brief Show terms of service dialog.
	 * \param window Window to block while dialog window is shown.
	 * \param terms Terms object.
	 * \param listener Listener to call closing dialog. Result is true if accepted otherwise false.
	 */
	public static func DialogServiceUserAcceptTos showTermsOfService(\
	Window window, ServiceUserErrorNeedAcceptTos terms, ResultListener listener)
		var DialogServiceUserAcceptTos dialog = DialogServiceUserAcceptTos.new(terms)
		dialog.setGuiTheme(window.getGuiTheme())
		dialog.setResultListener(listener)
		dialog.show(window, true, WindowModal.Placement.window)
		return dialog
	end
	
	
	
	/** \brief Create content. */
	protected func void createContent()
		setLayout(BorderLayout.new())
		setCanResize(true)
		setTitle("@UI.TermsOfService")
		setDesignerSelector("Window.Dialog.UserAcceptTos")
		setResult(false)
		
		var TextArea textArea = TextArea.new(pTerms.terms)
		textArea.setReadOnly(true)
		textArea.setMaximalWidth(400)
		textArea.setRowCount(20)
		textArea.setDesignerSelector("TextArea.WindowDialog.UserAcceptTos")
		addWidget(ScrollPanel.new(textArea, ScrollPanel.Policy.hidden,\
			ScrollPanel.Policy.visible), BorderLayout.Area.content)
		
		addWidget(Panel.new(FlowLayout.new(LayoutAxis.y), block Panel p
			p.addWidget(Panel.new(GridLayout.new(2, 0), block Panel p2
				pTerms.links.forEach(block ServiceUserErrorNeedAcceptTos.Link each
					p2.addWidget(Panel.new(CentrizedBoxLayout.new(LayoutAxis.x), block Panel p3
						p3.setDesignerSelector("Panel.WindowDialog.UserAcceptTos.Link")
						p3.addWidget(createLabelUrlLink(each.label, each.url))
					end))
				end)
			end))
			
			p.addWidget(Panel.new(GridLayout.new(2, 1), block Panel p2
				p2.setDesignerSelector("Panel.WindowDialogButtons.UserAcceptTos")
				
				var Button button = Button.new(pTerms.buttonAccept, CloseDialog.new(this, true))
				button.setDesignerSelector("Button.WindowDialog.UserAcceptTos.Accept")
				p2.addWidget(button)
				
				button = Button.new(pTerms.buttonDecline, CloseDialog.new(this, false))
				button.setDesignerSelector("Button.WindowDialog.UserAcceptTos.Decline")
				p2.addWidget(button)
			end))
		end), BorderLayout.Area.bottom)
	end
	
	/** \brief Create url link label. */
	protected func Label createLabelUrlLink(String text, String url)
		var Label label = Label.new(text, "Label.WindowDialog.UserAcceptTos.Link")
		label.addMouseListener(ClickedOpenLink.new(url))
		return label
	end
end
