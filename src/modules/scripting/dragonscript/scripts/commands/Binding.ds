/* 
 * Drag[en]gine DragonScript Script Module
 *
 * Copyright (C) 2020, Roland Pl√ºss (roland@rptd.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */


namespace Dragengine.Commands


/**
 * \brief Binding of command to input event on device.
 * 
 * Bindings are identified by device and either axis or button identifier.
 * For quicker access the device and button index are used.
 */
class Binding
	var String pDeviceID
	var String pSourceID
	var Command pCommand
	var bool pInverseAxis
	var InputEventSource pSystem
	var int pDeviceIndex
	var int pSourceIndex
	var bool pSimulateAxisPressed
	
	
	
	/** \brief Create binding. */
	func new(String deviceID, String sourceID, Command command, bool inverseAxis)
		if deviceID == null or sourceID == null or command == null
			throw EInvalidParam.new()
		end
		
		pDeviceID = deviceID
		pSourceID = sourceID
		pCommand = command
		pInverseAxis = inverseAxis
		pSystem = null
		pDeviceIndex = -1
		pSourceIndex = -1
		pSimulateAxisPressed = false
	end
	
	/** \brief Create copy of binding. */
	func new(Binding binding)
		pDeviceID = binding.pDeviceID
		pSourceID = binding.pSourceID
		pCommand = binding.pCommand
		pInverseAxis = binding.pInverseAxis
		pSystem = binding.pSystem
		pDeviceIndex = binding.pDeviceIndex
		pSourceIndex = binding.pSourceIndex
		pSimulateAxisPressed = false
	end
	
	/** \brief Create copy of binding with different command. */
	func new(Binding binding, Command command) this(binding)
		if command == null
			throw EInvalidParam.new()
		end
		pCommand = command
	end
	
	
	
	/** \brief Input device identifier*/
	func String getDeviceID()
		return pDeviceID
	end
	
	/** \brief Axis or button identifier. */
	func String getSourceID()
		return pSourceID
	end
	
	/** \brief Bound command. */
	func Command getCommand()
		return pCommand
	end
	
	/** \brief Inverse axis. */
	func bool getInverseAxis()
		return pInverseAxis
	end
	
	
	
	/**
	 * \brief System or null if not set.
	 * \version 1.6
	 */
	func InputEventSource getSystem()
		return pSystem
	end
	
	/**
	 * \brief Set system or null if not set.
	 * \version 1.6
	 */
	func void setSystem(InputEventSource system)
		pSystem = system
	end
	
	/** \brief Device index or -1 if not set. */
	func int getDeviceIndex()
		return pDeviceIndex
	end
	
	/** \brief Set device index or -1 if not set. */
	func void setDeviceIndex(int index)
		pDeviceIndex = index
	end
	
	/** \brief Source index or -1 if not set. */
	func int getSourceIndex()
		return pSourceIndex
	end
	
	/** \brief Set source index or -1 if not set. */
	func void setSourceIndex(int index)
		pSourceIndex = index
	end
	
	
	
	/**
	 * \brief Device or null if not set.
	 * \version 1.6
	 */
	func InputDevice getInputDevice()
		if pDeviceIndex == -1
			return null
		end
		
		select pSystem
		case InputEventSource.input
			return InputSystem.getDeviceAt(pDeviceIndex)
			
		case InputEventSource.vr
			return VRSystem.getDeviceAt(pDeviceIndex)
		end
		
		return null
	end
	
	/**
	 * \brief Device axis or null if not set.
	 * \version 1.6
	 */
	func InputDeviceAxis getInputDeviceAxis()
		if pSourceIndex != -1
			var InputDevice device = getInputDevice()
			if device != null
				return device.getAxisAt(pSourceIndex)
			end
		end
		return null
	end
	
	/**
	 * \brief Device button or null if not set.
	 * \version 1.6
	 */
	func InputDeviceButton getInputDeviceButton()
		if pSourceIndex != -1
			var InputDevice device = getInputDevice()
			if device != null
				return device.getButtonAt(pSourceIndex)
			end
		end
		return null
	end
	
	/**
	 * \brief Device feedback or null if not set.
	 * \version 1.6
	 */
	func InputDeviceFeedback getInputDeviceFeedback()
		if pSourceIndex != -1
			var InputDevice device = getInputDevice()
			if device != null
				return device.getFeedbackAt(pSourceIndex)
			end
		end
		return null
	end
	
	
	
	/** \brief Axis pressed simulation state. */
	func bool getSimulateAxisPressed()
		return pSimulateAxisPressed
	end
	
	/** \brief Set axis pressed simulation state. */
	func void setSimulateAxisPressed(bool pressed)
		pSimulateAxisPressed = pressed
	end
	
	
	
	/** \brief Bindings are equal. */
	func bool equals(Object other)
		if other castable Binding
			var Binding binding = other cast Binding
			return pDeviceID.equals(binding.pDeviceID) \
				and pSourceID.equals(binding.pSourceID) \
				and pInverseAxis == binding.pInverseAxis
			
		else
			return false
		end
	end
end
