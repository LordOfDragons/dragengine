/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */


namespace Dragengine.Commands

pin Dragengine.Scenery


/**
 * \brief Commands for player controlled BaseActor with BAAInteract action.
 * 
 * Contains various commands as sub classes. A static helper method adds instances of each
 * command to the command manager of a BaseGameApp.
 */
class CommandsBAAInteract
	/**
	 * \brief Bridge from BAAInteract to BAAStateMachineEvent.
	 * \version 1.26
	 * 
	 * Send events match BAAInteract function named with prefix "interact.".
	 */
	class StateMachineEventBridge implements BAAInteract
		var BAAStateMachineEvent pTarget
		
		func new(BAAStateMachineEvent target)
			pTarget = target
		end
		
		func void primaryActionStart()
			pTarget.sendInputAsEvent("interact.primaryActionStart", null)
		end
		
		func void primaryActionStop()
			pTarget.sendInputAsEvent("interact.primaryActionStop", null)
		end
		
		func void secondaryActionStart()
			pTarget.sendInputAsEvent("interact.secondaryActionStart", null)
		end
		
		func void secondaryActionStop()
			pTarget.sendInputAsEvent("interact.secondaryActionStop", null)
		end
	end
	
	/** \brief Base class operating only on actors with BAAInteract action. */
	class Base extends Command
		var ECBehaviorPlayerControllable.Tracker pTracker
		
		func new(ECBehaviorPlayerControllable.Tracker tracker, String name, \
		String description) super(name, description)
			if tracker == null
				throw ENullPointer.new()
			end
			pTracker = tracker
		end
		
		protected func ECBehaviorPlayerControllable.Tracker getTracker()
			return pTracker
		end
		
		protected func BAAInteract getInteract()
			var ECBehaviorPlayerControllable.Instance actor = pTracker.getActor()
			if actor == null
				return null
			end
			
			var ECBehaviorActorAIAction.Instance aiAction = \
				ECBehaviorActorAIAction.getInstanceIn(actor.getElement())
			if aiAction != null
				var BaseActorAction action = aiAction.getAction()
				if action castable BAAInteract
					return action cast BAAInteract
					
				elif action castable BAAStateMachineEvent
					return StateMachineEventBridge.new(action cast BAAStateMachineEvent)
				end
			end
			return null
		end
		
		func void start()
			var BAAInteract interact = getInteract()
			if interact != null
				start(interact)
			end
		end
		
		func void stop()
			var BAAInteract interact = getInteract()
			if interact != null
				stop(interact)
			end
		end
		
		
		
		/** \brief Start command on action. */
		func void start(BAAInteract action)
		end
		
		/** \brief Start command on action. */
		func void stop(BAAInteract action)
		end
	end
	
	
	
	/** \brief Primary action. */
	class PrimaryAction extends Base
		func new(ECBehaviorPlayerControllable.Tracker tracker) this(tracker, "primaryAction")
		end
		
		func new(ECBehaviorPlayerControllable.Tracker tracker, String name) \
		super(tracker, name, "Primary action")
			setTranslateDescription("UI.Command.PrimaryAction.Description")
			setTranslateDisplayName("UI.Command.PrimaryAction.DisplayName")
		end
		
		func void start(BAAInteract action)
			action.primaryActionStart()
		end
		
		func void stop(BAAInteract action)
			action.primaryActionStop()
		end
	end
	
	/** \brief Secondary action. */
	class SecondaryAction extends Base
		func new(ECBehaviorPlayerControllable.Tracker tracker) this(tracker, "secondaryAction")
		end
		
		func new(ECBehaviorPlayerControllable.Tracker tracker, String name) \
		super(tracker, name, "Secondary action")
			setTranslateDescription("UI.Command.SecondaryAction.Description")
			setTranslateDisplayName("UI.Command.SecondaryAction.DisplayName")
		end
		
		func void start(BAAInteract action)
			action.secondaryActionStart()
		end
		
		/** \brief Start command on action. */
		func void stop(BAAInteract action)
			action.secondaryActionStop()
		end
	end
	
	
	
	/** \brief Add commands to command manager. */
	static func void addCommands(CommandManager commands, ECBehaviorPlayerControllable.Tracker tracker)
		commands.add(PrimaryAction.new(tracker))
		commands.add(SecondaryAction.new(tracker))
	end
	
	
	
	/**
	 * \brief Add default bindings for commands.
	 * 
	 * Adds bindings for these commands:
	 * - "primaryAction"
	 * - "secondaryAction"
	 */
	static func void addDefaultBindings(DefaultBindingHelper helper)
		if helper.hasMouse()
			helper.mouseBindLMR("primaryAction", null, "secondaryAction")
		end
		
		if helper.hasGamepad()
			if helper.gamepadBindTrigger(1, "primaryAction")
				helper.gamepadBindTrigger(0, "secondaryAction")
				
			else
				helper.gamepadBindTrigger(0, "primaryAction")
			end
			
			if helper.gamepadBindButton(0, InputDeviceButtonType.action, "primaryAction")
				helper.gamepadBindButton(1, InputDeviceButtonType.action, "secondaryAction")
				
			else
				helper.gamepadBindButton(0, "primaryAction")
				helper.gamepadBindButton(1, "secondaryAction")
			end
		end
		
		if helper.hasVRHand(true)
			helper.vrHandBindButton(true, 0, "primaryAction")
			helper.vrHandBindButton(true, 1, "secondaryAction")
		end
		
		if helper.hasVRHand(false)
			helper.vrHandBindButton(false, 0, "primaryAction")
			helper.vrHandBindButton(false, 1, "secondaryAction")
		end
	end
end
