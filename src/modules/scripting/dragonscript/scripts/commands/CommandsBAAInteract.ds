/* 
 * Drag[en]gine DragonScript Script Module
 *
 * Copyright (C) 2020, Roland Pl√ºss (roland@rptd.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */


namespace Dragengine.Commands

pin Dragengine.Scenery


/**
 * \brief Commands for player controlled BaseActor with BAAInteract action.
 * 
 * Contains various commands as sub classes. A static helper method adds instances of each
 * command to the command manager of a BaseGameApp.
 */
class CommandsBAAInteract
	/** \brief Base class operating only on actors with BAAInteract action. */
	class Base extends Command
		var ECBehaviorPlayerControllable.Tracker pTracker
		
		func new(ECBehaviorPlayerControllable.Tracker tracker, String name, \
		String description) super(name, description)
			if tracker == null
				throw ENullPointer.new()
			end
			pTracker = tracker
		end
		
		protected func ECBehaviorPlayerControllable.Tracker getTracker()
			return pTracker
		end
		
		protected func BAAInteract getInteract()
			var ECBehaviorPlayerControllable.Instance actor = pTracker.getActor()
			if actor == null
				return null
			end
			
			var ECBehaviorActorAIAction.Instance aiAction = \
				ECBehaviorActorAIAction.getInstanceIn(actor.getElement())
			if aiAction != null and aiAction.getAction() castable BAAInteract
				return aiAction.getAction() cast BAAInteract
				
			else
				return null
			end
		end
		
		func void start()
			var BAAInteract interact = getInteract()
			if interact != null
				start(interact)
			end
		end
		
		func void stop()
			var BAAInteract interact = getInteract()
			if interact != null
				stop(interact)
			end
		end
		
		
		
		/** \brief Start command on action. */
		func void start(BAAInteract action)
		end
		
		/** \brief Start command on action. */
		func void stop(BAAInteract action)
		end
	end
	
	
	
	/** \brief Primary action. */
	class PrimaryAction extends Base
		func new(ECBehaviorPlayerControllable.Tracker tracker) this(tracker, "primaryAction")
		end
		
		func new(ECBehaviorPlayerControllable.Tracker tracker, String name) \
		super(tracker, name, "Primary action")
			setTranslateDescription("UI.Command.PrimaryAction.Description")
			setTranslateDisplayName("UI.Command.PrimaryAction.DisplayName")
		end
		
		func void start(BAAInteract action)
			action.primaryActionStart()
		end
		
		func void stop(BAAInteract action)
			action.primaryActionStop()
		end
	end
	
	/** \brief Secondary action. */
	class SecondaryAction extends Base
		func new(ECBehaviorPlayerControllable.Tracker tracker) this(tracker, "secondaryAction")
		end
		
		func new(ECBehaviorPlayerControllable.Tracker tracker, String name) \
		super(tracker, name, "Secondary action")
			setTranslateDescription("UI.Command.SecondaryAction.Description")
			setTranslateDisplayName("UI.Command.SecondaryAction.DisplayName")
		end
		
		func void start(BAAInteract action)
			action.secondaryActionStart()
		end
		
		/** \brief Start command on action. */
		func void stop(BAAInteract action)
			action.secondaryActionStop()
		end
	end
	
	
	
	/** \brief Add commands to command manager. */
	static func void addCommands(CommandManager commands, ECBehaviorPlayerControllable.Tracker tracker)
		commands.add(PrimaryAction.new(tracker))
		commands.add(SecondaryAction.new(tracker))
	end
	
	
	
	/**
	 * \brief Add default bindings for commands.
	 * 
	 * Adds bindings for these commands:
	 * - "primaryAction"
	 * - "secondaryAction"
	 */
	static func void addDefaultBindings(DefaultBindingHelper helper)
		if helper.hasMouse()
			helper.mouseBindLMR("primaryAction", null, "secondaryAction")
		end
		
		if helper.hasGamepad()
			if helper.gamepadBindTrigger(1, "primaryAction")
				helper.gamepadBindTrigger(0, "secondaryAction")
				
			elif helper.gamepadBindTrigger(0, "primaryAction")
				helper.gamepadBindButton(0, InputDeviceButtonType.action, "secondaryAction")
				
			elif helper.gamepadBindButton(0, InputDeviceButtonType.action, "primaryAction")
				helper.gamepadBindButton(1, InputDeviceButtonType.action, "secondaryAction")
				
			else
				helper.gamepadBindButton(0, "primaryAction")
				helper.gamepadBindButton(1, "secondaryAction")
			end
		end
		
		if helper.hasVRHand(true)
			helper.vrHandBindButton(true, 0, "primaryAction")
			helper.vrHandBindButton(true, 1, "secondaryAction")
		end
		
		if helper.hasVRHand(false)
			helper.vrHandBindButton(false, 0, "primaryAction")
			helper.vrHandBindButton(false, 1, "secondaryAction")
		end
	end
end
