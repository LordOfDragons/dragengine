/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */


namespace Dragengine.Commands

pin Dragengine.Scenery


/**
 * \brief Commands for player controlled BaseActor with BAAMovement action.
 * 
 * Contains various commands as sub classes. A static helper method adds instances of each
 * command to the command manager of a BaseGameApp.
 */
class CommandsBAAMovement
	/** \brief Base class operating only on actors with BAAMovement action. */
	class Base extends Command
		var ECBehaviorPlayerControllable.Tracker pTracker
		
		func new(ECBehaviorPlayerControllable.Tracker tracker, String name, \
		String description) super(name, description)
			if tracker == null
				throw ENullPointer.new()
			end
			pTracker = tracker
		end
		
		protected func ECBehaviorPlayerControllable.Tracker getTracker()
			return pTracker
		end
		
		protected func BAAMovement getMovement()
			var ECBehaviorPlayerControllable.Instance actor = pTracker.getActor()
			if actor == null
				return null
			end
			
			var ECBehaviorActorAIAction.Instance aiAction = \
				ECBehaviorActorAIAction.getInstanceIn(actor.getElement())
			if aiAction != null and aiAction.getAction() castable BAAMovement
				return aiAction.getAction() cast BAAMovement
				
			else
				return null
			end
		end
		
		func void start()
			var BAAMovement movement = getMovement()
			if movement != null
				start(movement)
			end
		end
		
		func void stop()
			var BAAMovement movement = getMovement()
			if movement != null
				stop(movement)
			end
		end
		
		func void analogRelative(float value)
			var BAAMovement movement = getMovement()
			if movement != null
				analogRelative(movement, value)
			end
		end
		
		func void analogAbsolute(float value)
			var BAAMovement movement = getMovement()
			if movement != null
				analogAbsolute(movement, value)
			end
		end
		
		
		
		/** \brief Start command on action. */
		func void start(BAAMovement action)
		end
		
		/** \brief Start command on action. */
		func void stop(BAAMovement action)
		end
		
		/**
		 * \brief Relative input device axis position changed.
		 * 
		 * Value is the change in the relative axis. It is reset to 0 right after sending the
		 * event. No event is sent for the reset. A typical device is mouse movement resulting
		 * in this method to be called.
		 * 
		 * \param value Relative axis position change in axis units. Caller is responsible to
		 *              adjust the range to make different input devices match in magnitude.
		 */
		func void analogRelative(BAAMovement action, float value)
		end
		
		/**
		 * \brief Absolute input device axis position changed.
		 * 
		 * Axis keeps position until next event. Gamepad events typically send this method
		 * when the stick is pushed to a new position.
		 * 
		 * \param value New axis position in the range -1 to 1.
		 */
		func void analogAbsolute(BAAMovement action, float value)
		end
	end
	
	
	
	/** \brief Move forward. */
	class MoveForward extends Base
		func new(ECBehaviorPlayerControllable.Tracker tracker) this(tracker, "moveForward")
		end
		
		func new(ECBehaviorPlayerControllable.Tracker tracker, String name) \
		super(tracker, name, "Move forward")
			setTranslateDescription("UI.Command.MoveForward.Description")
			setTranslateDisplayName("UI.Command.MoveForward.DisplayName")
		end
		
		func void start(BAAMovement action)
			action.moveForwardStart()
		end
		
		func void stop(BAAMovement action)
			action.moveForwardStop()
		end
	end
	
	/** \brief Move backward. */
	class MoveBackward extends Base
		func new(ECBehaviorPlayerControllable.Tracker tracker) this(tracker, "moveBackward")
		end
		
		func new(ECBehaviorPlayerControllable.Tracker tracker, String name) \
		super(tracker, name, "Move backward")
			setTranslateDescription("UI.Command.MoveBackward.Description")
			setTranslateDisplayName("UI.Command.MoveBackward.DisplayName")
		end
		
		func void start(BAAMovement action)
			action.moveBackwardStart()
		end
		
		/** \brief Start command on action. */
		func void stop(BAAMovement action)
			action.moveBackwardStop()
		end
	end
	
	/** \brief Move left. */
	class MoveLeft extends Base
		func new(ECBehaviorPlayerControllable.Tracker tracker) this(tracker, "moveLeft")
		end
		
		func new(ECBehaviorPlayerControllable.Tracker tracker, String name) \
		super(tracker, name, "Move left")
			setTranslateDescription("UI.Command.MoveLeft.Description")
			setTranslateDisplayName("UI.Command.MoveLeft.DisplayName")
		end
		
		func void start(BAAMovement action)
			action.moveLeftStart()
		end
		
		func void stop(BAAMovement action)
			action.moveLeftStop()
		end
	end
	
	/** \brief Move right. */
	class MoveRight extends Base
		func new(ECBehaviorPlayerControllable.Tracker tracker) this(tracker, "moveRight")
		end
		
		func new(ECBehaviorPlayerControllable.Tracker tracker, String name) \
		super(tracker, name, "Move right")
			setTranslateDescription("UI.Command.MoveRight.Description")
			setTranslateDisplayName("UI.Command.MoveRight.DisplayName")
		end
		
		func void start(BAAMovement action)
			action.moveRightStart()
		end
		
		func void stop(BAAMovement action)
			action.moveRightStop()
		end
	end
	
	
	
	/** \brief Look left. */
	class LookLeft extends Base
		func new(ECBehaviorPlayerControllable.Tracker tracker) this(tracker, "lookLeft")
		end
		
		func new(ECBehaviorPlayerControllable.Tracker tracker, String name) \
		super(tracker, name, "Look left")
			setTranslateDescription("UI.Command.LookLeft.Description")
			setTranslateDisplayName("UI.Command.LookLeft.DisplayName")
		end
		
		func void start(BAAMovement action)
			action.lookLeftStart()
		end
		
		func void stop(BAAMovement action)
			action.lookLeftStop()
		end
	end
	
	/** \brief Look right. */
	class LookRight extends Base
		func new(ECBehaviorPlayerControllable.Tracker tracker) this(tracker, "lookRight")
		end
		
		func new(ECBehaviorPlayerControllable.Tracker tracker, String name) \
		super(tracker, name, "Look right")
			setTranslateDescription("UI.Command.LookRight.Description")
			setTranslateDisplayName("UI.Command.LookRight.DisplayName")
		end
		
		func void start(BAAMovement action)
			action.lookRightStart()
		end
		
		func void stop(BAAMovement action)
			action.lookRightStop()
		end
	end
	
	/** \brief Look up. */
	class LookUp extends Base
		func new(ECBehaviorPlayerControllable.Tracker tracker) this(tracker, "lookUp")
		end
		
		func new(ECBehaviorPlayerControllable.Tracker tracker, String name) \
		super(tracker, name, "Look up")
			setTranslateDescription("UI.Command.LookUp.Description")
			setTranslateDisplayName("UI.Command.LookUp.DisplayName")
		end
		
		func void start(BAAMovement action)
			action.lookUpStart()
		end
		
		func void stop(BAAMovement action)
			action.lookUpStop()
		end
	end
	
	/** \brief Look down. */
	class LookDown extends Base
		func new(ECBehaviorPlayerControllable.Tracker tracker) this(tracker, "lookDown")
		end
		
		func new(ECBehaviorPlayerControllable.Tracker tracker, String name) \
		super(tracker, name, "Look down")
			setTranslateDescription("UI.Command.LookDown.Description")
			setTranslateDisplayName("UI.Command.LookDown.DisplayName")
		end
		
		func void start(BAAMovement action)
			action.lookDownStart()
		end
		
		func void stop(BAAMovement action)
			action.lookDownStop()
		end
	end
	
	
	
	/** \brief Analog movement forward/backward. */
	class AnalogMoveFB extends Base
		func new(ECBehaviorPlayerControllable.Tracker tracker) this(tracker, "analogMoveFB")
		end
		
		func new(ECBehaviorPlayerControllable.Tracker tracker, String name) \
		super(tracker, name, "Analog move forward/backward")
			setTranslateDescription("UI.Command.AnalogMoveFB.Description")
			setTranslateDisplayName("UI.Command.AnalogMoveFB.DisplayName")
		end
		
		func void analogRelative(BAAMovement action, float value)
			action.analogMoveFB(value, false)
		end
		
		func void analogAbsolute(BAAMovement action, float value)
			action.analogMoveFB(value, true)
		end
	end
	
	/** \brief Analog movement left/right. */
	class AnalogMoveLR extends Base
		func new(ECBehaviorPlayerControllable.Tracker tracker) this(tracker, "analogMoveLR")
		end
		
		func new(ECBehaviorPlayerControllable.Tracker tracker, String name) \
		super(tracker, name, "Analog move left/right")
			setTranslateDescription("UI.Command.AnalogMoveLR.Description")
			setTranslateDisplayName("UI.Command.AnalogMoveLR.DisplayName")
		end
		
		func void analogRelative(BAAMovement action, float value)
			action.analogMoveLR(value, false)
		end
		
		func void analogAbsolute(BAAMovement action, float value)
			action.analogMoveLR(value, true)
		end
	end
	
	/** \brief Analog lookment left/right. */
	class AnalogLookLR extends Base
		func new(ECBehaviorPlayerControllable.Tracker tracker) this(tracker, "analogLookLR")
		end
		
		func new(ECBehaviorPlayerControllable.Tracker tracker, String name) \
		super(tracker, name, "Analog look left/right")
			setTranslateDescription("UI.Command.AnalogLookLR.Description")
			setTranslateDisplayName("UI.Command.AnalogLookLR.DisplayName")
		end
		
		func void analogRelative(BAAMovement action, float value)
			action.analogLookLR(value, false)
		end
		
		func void analogAbsolute(BAAMovement action, float value)
			action.analogLookLR(value, true)
		end
	end
	
	/** \brief Analog lookment up/down. */
	class AnalogLookUD extends Base
		func new(ECBehaviorPlayerControllable.Tracker tracker) this(tracker, "analogLookUD")
		end
		
		func new(ECBehaviorPlayerControllable.Tracker tracker, String name) \
		super(tracker, name, "Analog look up/down")
			setTranslateDescription("UI.Command.AnalogLookUD.Description")
			setTranslateDisplayName("UI.Command.AnalogLookUD.DisplayName")
		end
		
		func void analogRelative(BAAMovement action, float value)
			action.analogLookUD(value, false)
		end
		
		func void analogAbsolute(BAAMovement action, float value)
			action.analogLookUD(value, true)
		end
	end
	
	
	
	/** \brief Crouching. */
	class Crouch extends Base
		func new(ECBehaviorPlayerControllable.Tracker tracker) this(tracker, "crouch")
		end
		
		func new(ECBehaviorPlayerControllable.Tracker tracker, String name) \
		super(tracker, name, "Crouching")
			setTranslateDescription("UI.Command.Crouch.Description")
			setTranslateDisplayName("UI.Command.Crouch.DisplayName")
		end
		
		func void start(BAAMovement action)
			action.crouchStart()
		end
		
		func void stop(BAAMovement action)
			action.crouchStop()
		end
	end
	
	/** \brief Toggle crouching. */
	class ToggleCrouch extends Base
		func new(ECBehaviorPlayerControllable.Tracker tracker) this(tracker, "toggleCrouch")
		end
		
		func new(ECBehaviorPlayerControllable.Tracker tracker, String name) \
		super(tracker, name, "Toggle crouching")
			setTranslateDescription("UI.Command.ToggleCrouch.Description")
			setTranslateDisplayName("UI.Command.ToggleCrouch.DisplayName")
		end
		
		func void start(BAAMovement action)
			action.crouchToggle()
		end
	end
	
	/** \brief Running. */
	class Run extends Base
		func new(ECBehaviorPlayerControllable.Tracker tracker) this(tracker, "run")
		end
		
		func new(ECBehaviorPlayerControllable.Tracker tracker, String name) \
		super(tracker, name, "Running")
			setTranslateDescription("UI.Command.Run.Description")
			setTranslateDisplayName("UI.Command.Run.DisplayName")
		end
		
		func void start(BAAMovement action)
			action.runStart()
		end
		
		func void stop(BAAMovement action)
			action.runStop()
		end
	end
	
	/** \brief Toggle running. */
	class ToggleRun extends Base
		func new(ECBehaviorPlayerControllable.Tracker tracker) this(tracker, "toggleRun")
		end
		
		func new(ECBehaviorPlayerControllable.Tracker tracker, String name) \
		super(tracker, name, "Toggle running")
			setTranslateDescription("UI.Command.ToggleRun.Description")
			setTranslateDisplayName("UI.Command.ToggleRun.DisplayName")
		end
		
		func void start(BAAMovement action)
			action.runToggle()
		end
	end
	
	
	
	/** \brief Add commands to command manager. */
	public static func void addCommands(CommandManager commands, ECBehaviorPlayerControllable.Tracker tracker)
		commands.add(MoveForward.new(tracker))
		commands.add(MoveBackward.new(tracker))
		commands.add(MoveLeft.new(tracker))
		commands.add(MoveRight.new(tracker))
		
		commands.add(LookLeft.new(tracker))
		commands.add(LookRight.new(tracker))
		commands.add(LookUp.new(tracker))
		commands.add(LookDown.new(tracker))
		
		commands.add(AnalogMoveFB.new(tracker))
		commands.add(AnalogMoveLR.new(tracker))
		commands.add(AnalogLookLR.new(tracker))
		commands.add(AnalogLookUD.new(tracker))
		
		commands.add(Crouch.new(tracker))
		commands.add(ToggleCrouch.new(tracker))
		commands.add(Run.new(tracker))
		commands.add(ToggleRun.new(tracker))
	end
	
	
	
	/** \brief Input scheme to use for adding default bindings. */
	public enum InputScheme
		/** \brief DYXC. */
		dyxc
		
		/** \brief WASD. */
		wasd
	end
	
	/**
	 * \brief Add default bindings for commands.
	 * 
	 * Adds bindings for these commands:
	 * - "moveForward"
	 * - "moveBackward"
	 * - "moveLeft"
	 * - "moveRight"
	 * - "lookLeft"
	 * - "lookRight"
	 * - "lookUp"
	 * - "lookDown"
	 * - "analogMoveFB"
	 * - "analogMoveLR"
	 * - "analogLookLR"
	 * - "analogLookUD"
	 * - "toggleCrouch"
	 * - "toggleRun"
	 * 
	 * These commands are not added as bindings:
	 * - "crouch"
	 * - "run"
	 */
	public static func void addDefaultBindings(DefaultBindingHelper helper, InputScheme scheme)
		select scheme
		case InputScheme.dyxc
			if helper.hasMouse()
				helper.mouseBindMove("analogLookLR", "analogLookUD")
			end
			
			if helper.hasKeyboard()
				helper.keyboardBindKeyCode(InputEventKey.d, "moveForward")
				helper.keyboardBindKeyCode(InputEventKey.c, "moveBackward")
				helper.keyboardBindKeyCode(InputEventKey.y, "moveLeft")
				helper.keyboardBindKeyCode(InputEventKey.v, "moveRight")
				helper.keyboardBindKeyCode(InputEventKey.arrowLeft, "lookLeft")
				helper.keyboardBindKeyCode(InputEventKey.arrowRight, "lookRight")
				helper.keyboardBindKeyCode(InputEventKey.arrowUp, "lookUp")
				helper.keyboardBindKeyCode(InputEventKey.arrowDown, "lookDown")
				helper.keyboardBindKeyCode(InputEventKey.x, "toggleCrouch")
				helper.keyboardBindKeyCode(InputEventKey.s, "toggleRun")
			end
			
		case InputScheme.wasd
			if helper.hasMouse()
				helper.mouseBindMove("analogLookLR", "analogLookUD")
			end
			
			if helper.hasKeyboard()
				helper.keyboardBindKeyCode(InputEventKey.w, "moveForward")
				helper.keyboardBindKeyCode(InputEventKey.s, "moveBackward")
				helper.keyboardBindKeyCode(InputEventKey.a, "moveLeft")
				helper.keyboardBindKeyCode(InputEventKey.d, "moveRight")
				helper.keyboardBindKeyCode(InputEventKey.arrowLeft, "lookLeft")
				helper.keyboardBindKeyCode(InputEventKey.arrowRight, "lookRight")
				helper.keyboardBindKeyCode(InputEventKey.arrowUp, "lookUp")
				helper.keyboardBindKeyCode(InputEventKey.arrowDown, "lookDown")
				helper.keyboardBindKeyCode(InputEventKey.c, "toggleCrouch") // or control
				helper.keyboardBindKeyCode(InputEventKey.shift, InputEventKeyLocation.left, "toggleRun")
			end
			
		else
			throw EInvalidParam.new()
		end
		
		if helper.hasGamepad()
			if helper.gamepadBindStick(0, "analogMoveLR", "analogMoveFB")
				helper.gamepadBindStick(1, "analogLookLR", "analogLookUD")
				
			else
				helper.bindAxis(helper.getGamepad(), 0, "analogMoveLR")
				helper.bindAxis(helper.getGamepad(), 1, "analogMoveFB")
				helper.bindAxis(helper.getGamepad(), 2, "analogLookLR")
				helper.bindAxis(helper.getGamepad(), 3, "analogLookUD")
			end
		end
		
		if helper.hasVRHand(true)
			helper.vrHandBindStick(true, InputDeviceAxisType.stick, 0, "analogLookLR", "")
		end
		
		if helper.hasVRHand(false)
			helper.vrHandBindStick(false, InputDeviceAxisType.stick, 0, "analogMoveLR", "analogMoveFB")
		end
	end
end
