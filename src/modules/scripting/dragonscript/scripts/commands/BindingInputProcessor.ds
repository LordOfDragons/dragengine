/* 
 * Drag[en]gine DragonScript Script Module
 *
 * Copyright (C) 2020, Roland PlÃ¼ss (roland@rptd.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */


namespace Dragengine.Commands

pin Dragengine.Gui
pin Dragengine.Utils


/**
 * \brief Run command matching binding from binding manager.
 * 
 * The binding input processor supports scaling the mouse axis and mouse wheel movement.
 * This is a game play specific scaling value between the mouse movement and the input
 * value passed on to the bindings. This is not the same as mouse sensitivity. The binding
 * supports mouse sensitivity using BaseGameApp.settingInputMouseSensitivity setting.
 */
class BindingInputProcessor extends DefaultInputProcessor
	private var BindingManager pBindingManager
	private var float pScaleMouseAxis
	private var float pScaleMouseWheel
	
	
	
	/** \brief Create input processor. */
	public func new(BindingManager bindingManager)
		if bindingManager == null
			throw EInvalidParam.new()
		end
		
		pBindingManager = bindingManager
		pScaleMouseAxis = 0.2
		pScaleMouseWheel = 0.2
	end
	
	
	
	/** \brief Binding manager */
	public func BindingManager getBindingManager()
		return pBindingManager
	end
	
	/** \brief Mouse axis scaling factor. */
	public func float getScaleMouseAxis()
		return pScaleMouseAxis
	end
	
	/**
	 * \brief Set mouse axis scaling factor.
	 * 
	 * Default value is 0.2
	 */
	public func void setScaleMouseAxis(float scale)
		pScaleMouseAxis = DEMath.max(scale, 0.0)
	end
	
	/** \brief Mouse wheel scaling factor. */
	public func float getScaleMouseWheel()
		return pScaleMouseWheel
	end
	
	/**
	 * \brief Set mouse wheel scaling factor.
	 * 
	 * Default value is 0.2
	 */
	public func void setScaleMouseWheel(float scale)
		pScaleMouseWheel = DEMath.max(scale, 0.0)
	end
	
	/**
	 * \brief Mouse sensitivity.
	 * \version 1.18
	 * 
	 * If BaseGameApp exists returns BaseGameApp.getApp().getMouseSensitivity() otherwise 1.
	 * If you do not use BaseGameApp overwrite this method to return the appropriate value.
	 */
	public func float getMouseSensitivity()
		var BaseGameApp app = BaseGameApp.getApp()
		return app != null if app.getMouseSensitivity() else 1
	end
	
	
	
	/**
	 * \brief Activate binding command.
	 * 
	 * Default implementation calls Command.start() .
	 */
	protected func void activate(Binding binding)
		binding.getCommand().start()
	end
	
	/**
	 * \brief Deactivate binding command.
	 * 
	 * Default implementation calls Command.stop() .
	 */
	protected func void deactivate(Binding binding)
		binding.getCommand().stop()
	end
	
	/**
	 * \brief Relative analog input to binding command.
	 * 
	 * Default implementation calls Command.analogRelative() .
	 */
	protected func void analogRelative(Binding binding, float value)
		binding.getCommand().analogRelative(value)
	end
	
	/**
	 * \brief Absolute analog input to binding command.
	 * 
	 * Default implementation calls Command.analogRelative() .
	 */
	protected func void analogAbsolute(Binding binding, float value)
		binding.getCommand().analogAbsolute(value)
	end
	
	/**
	 * \brief Touch binding command.
	 * 
	 * Default implementation calls Command.touch() .
	 */
	protected func void touch(Binding binding)
		binding.getCommand().touch()
	end
	
	/**
	 * \brief Untouch binding command.
	 * 
	 * Default implementation calls Command.untouch() .
	 */
	protected func void untouch(Binding binding)
		binding.getCommand().untouch()
	end
	
	
	
	/** \brief Process input event. */
	public func void inputEvent(InputEvent event)
		select event.getType()
		case InputEventType.keyPress, \
			InputEventType.mousePress, \
			InputEventType.buttonPress
				var Binding binding = pBindingManager.findButtonBinding(\
					event.getSource(), event.getDevice(), event.getCode())
				if binding != null
					activate(binding)
				end
			
		case InputEventType.keyRelease, \
			InputEventType.mouseRelease, \
			InputEventType.buttonRelease
				var Binding binding = pBindingManager.findButtonBinding(\
					event.getSource(), event.getDevice(), event.getCode())
				if binding != null
					deactivate(binding)
				end
			
		case InputEventType.mouseMove
			var float scale = pScaleMouseAxis * getMouseSensitivity()
			
			// first axis is X axis or horizontal axis
			var Binding binding = pBindingManager.findAxisBinding(\
				event.getSource(), event.getDevice(), event.getCode())
			if binding != null
				if binding.getInverseAxis()
					analogRelative(binding, scale * -event.getX())
					
				else
					analogRelative(binding, scale * event.getX())
				end
			end
			
			// second axis is Y axis or vertical axis
			binding = pBindingManager.findAxisBinding(\
				event.getSource(), event.getDevice(), event.getCode() + 1)
			if binding != null
				if binding.getInverseAxis()
					analogRelative(binding, scale * -event.getY())
					
				else
					analogRelative(binding, scale * event.getY())
				end
			end
			
		case InputEventType.mouseWheel
			var float scale = pScaleMouseWheel * getMouseSensitivity()
			
			var Binding bindingPositive = pBindingManager.findAxisBinding(\
				event.getSource(), event.getDevice(), event.getCode(), false)
			var Binding bindingNegative = pBindingManager.findAxisBinding(\
				event.getSource(), event.getDevice(), event.getCode(), true)
			if bindingPositive == null and bindingNegative == null
				break
			end
			
			// analog input
			var int value = event.getX() + event.getY()
			
			if bindingPositive != null
				analogRelative(bindingPositive, scale * value)
				
			else
				analogRelative(bindingNegative, scale * -value)
			end
			
			// simulate button presses
			if value > 0
				if bindingPositive != null
					while value-- > 0
						activate(bindingPositive)
						deactivate(bindingPositive)
					end
				end
				
			elif value < 0
				if bindingNegative != null
					while value++ < 0
						activate(bindingNegative)
						deactivate(bindingNegative)
					end
				end
			end
			
		case InputEventType.axisMove
			// axis can be used for buttons too. in this case the value is important to decide
			// the right command to use. to support this properly first check if a binding
			// exists with the right value range. if this is not the case try the axis
			// without value range.
			var Binding bindingPositive = pBindingManager.findAxisBinding(\
				event.getSource(), event.getDevice(), event.getCode(), false)
			var Binding bindingNegative = pBindingManager.findAxisBinding(\
				event.getSource(), event.getDevice(), event.getCode(), true)
			if bindingPositive == null and bindingNegative == null
				break
			end
			
			// for axis input there should exist only one binding
			var float value = event.getValue()
			
			if bindingPositive != null
				analogAbsolute(bindingPositive, value)
				
			else
				analogAbsolute(bindingNegative, -value)
			end
			
			// simulate button presses
			if bindingPositive != null
				var bool simulatePressed = value > 0.5
				
				if simulatePressed != bindingPositive.getSimulateAxisPressed()
					if simulatePressed
						activate(bindingPositive)
						
					else
						deactivate(bindingPositive)
					end
					
					bindingPositive.setSimulateAxisPressed(simulatePressed)
				end
			end
			
			if bindingNegative != null
				var bool simulatePressed = value < -0.5
				
				if simulatePressed != bindingNegative.getSimulateAxisPressed()
					if simulatePressed
						activate(bindingNegative)
						
					else
						deactivate(bindingNegative)
					end
					
					bindingNegative.setSimulateAxisPressed(simulatePressed)
				end
			end
			
		case InputEventType.buttonTouch
			var Binding binding = pBindingManager.findButtonBinding(\
				event.getSource(), event.getDevice(), event.getCode())
			if binding != null
				touch(binding)
			end
			
		case InputEventType.buttonUntouch
			var Binding binding = pBindingManager.findButtonBinding(\
				event.getSource(), event.getDevice(), event.getCode())
			if binding != null
				untouch(binding)
			end
		end
	end
end
