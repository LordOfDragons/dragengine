/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */


namespace Dragengine.Commands

pin Dragengine.Scenery


/**
 * \brief Commands for player controlled BaseActor with BAAVRGrab action.
 * 
 * Contains various commands as sub classes. A static helper method adds instances of each
 * command to the command manager of a BaseGameApp.
 */
class CommandsBAAVRGrab
	/**
	 * \brief Bridge from BAAVRGrab to BAAStateMachineEvent.
	 * \version 1.26
	 * 
	 * Send events match BAAVRGrab function named with prefix "vrGrab.".
	 */
	class StateMachineEventBridge implements BAAVRGrab
		var BAAStateMachineEvent pTarget
		
		func new(BAAStateMachineEvent target)
			pTarget = target
		end
		
		func void grab()
			pTarget.sendInputAsEvent("vrGrab.grab", null)
		end
		
		func void ungrab()
			pTarget.sendInputAsEvent("vrGrab.ungrab", null)
		end
		
		func void grabAnalog(float value)
			pTarget.sendInputAsEvent("vrGrab.grab.analog", value)
		end
		
		func void squeeze(float value)
			pTarget.sendInputAsEvent("vrGrab.squeeze", value)
		end
	end
	
	/** \brief Base class operating only on actors with BAAVRGrab action. */
	public class Base extends Command
		protected var ECBehaviorPlayerControllable.Tracker pTracker
		protected var bool pRightHand
		
		public func new(ECBehaviorPlayerControllable.Tracker tracker, String name, \
		String description, bool rightHand) super(name, description)
			if tracker == null
				throw ENullPointer.new("tracker")
			end
			pTracker = tracker
			pRightHand = rightHand
		end
		
		protected func ECBehaviorPlayerControllable.Tracker getTracker()
			return pTracker
		end
		
		protected func BAAVRGrab getGrab()
			var ECBehaviorPlayerControllable.Instance actor = pTracker.getActor()
			if actor == null
				return null
			end
			
			var ECBehaviorVRHandAction.Instance vrHandAction
			
			if pRightHand
				vrHandAction = ECBehaviorVRHandAction.getInstanceIn(\
					actor.getElement(), BaseVRActorClass.idVRRightHand)
				
			else
				vrHandAction = ECBehaviorVRHandAction.getInstanceIn(\
					actor.getElement(), BaseVRActorClass.idVRLeftHand)
			end
			
			if vrHandAction != null
				var BaseVRHandAction action = vrHandAction.getAction()
				if action castable BAAVRGrab
					return action cast BAAVRGrab
					
				elif action castable BAAStateMachineEvent
					return StateMachineEventBridge.new(action cast BAAStateMachineEvent)
				end
			end
			return null
		end
		
		public func void start()
			var BAAVRGrab cinput = getGrab()
			if cinput != null
				press(cinput)
			end
		end
		
		public func void stop()
			var BAAVRGrab cinput = getGrab()
			if cinput != null
				release(cinput)
			end
		end
		
		public func void analogAbsolute(float value)
			var BAAVRGrab cinput = getGrab()
			if cinput != null
				analogAbsolute(cinput, value)
			end
		end
		
		
		/** \brief Pressed. */
		public func void press(BAAVRGrab action)
		end
		
		/** \brief Released. */
		public func void release(BAAVRGrab action)
		end
		
		/** \brief Analog absolute. */
		public func void analogAbsolute(BAAVRGrab action, float value)
		end
	end
	
	
	
	/** \brief Grab action. */
	public class GrabAction extends Base
		public func new(ECBehaviorPlayerControllable.Tracker tracker, String name, \
		String description, bool rightHand) super(tracker, name, description, rightHand)
		end
		
		public func void press(BAAVRGrab action)
			action.grab()
		end
		
		public func void release(BAAVRGrab action)
			action.ungrab()
		end
		
		public func void analogAbsolute(BAAVRGrab action, float value)
			action.grabAnalog(value)
		end
	end
	
	/** \brief Squeeze action. */
	public class SqueezeAction extends Base
		public func new(ECBehaviorPlayerControllable.Tracker tracker, String name, \
		String description, bool rightHand) super(tracker, name, description, rightHand)
		end
		
		public func void analogAbsolute(BAAVRGrab action, float value)
			action.squeeze(value)
		end
	end
	
	
	
	/**
	 * \brief Add commands to command manager.
	 * 
	 * Adds these commands:
	 * - grabRight: Grab using right hand
	 * - grabLeft: Grab using left hand
	 * - squeezeRight: Squeeze right hand
	 * - squeezeLeft: Squeeze left hand
	 */
	public static func void addCommands(CommandManager commands, ECBehaviorPlayerControllable.Tracker tracker)
		var GrabAction grab
		var SqueezeAction squeeze
		
		grab = GrabAction.new(tracker, "grabRight", "Grab Right Hand", true)
		grab.setTranslateDescription("UI.Command.GrabRight.Description")
		grab.setTranslateDisplayName("UI.Command.GrabRight.DisplayName")
		commands.add(grab)
		
		squeeze = SqueezeAction.new(tracker, "squeezeRight", "Squeeze Right Hand", true)
		squeeze.setTranslateDescription("UI.Command.SqueezeRight.Description")
		squeeze.setTranslateDisplayName("UI.Command.SqueezeRight.DisplayName")
		commands.add(squeeze)
		
		grab = GrabAction.new(tracker, "grabLeft", "Grab Left Hand", false)
		grab.setTranslateDescription("UI.Command.GrabLeft.Description")
		grab.setTranslateDisplayName("UI.Command.GrabLeft.DisplayName")
		commands.add(grab)
		
		squeeze = SqueezeAction.new(tracker, "squeezeLeft", "Squeeze Left Hand", false)
		squeeze.setTranslateDescription("UI.Command.SqueezeLeft.Description")
		squeeze.setTranslateDisplayName("UI.Command.SqueezeLeft.DisplayName")
		commands.add(squeeze)
	end
	
	
	
	/**
	 * \brief Add default bindings for commands.
	 * 
	 * Adds bindings for these commands if present in binding manager:
	 * - "grabRight"
	 * - "grabLeft"
	 * - "squeezeRight"
	 * - "squeezeLeft"
	 */
	public static func void addDefaultBindings(DefaultBindingHelper helper)
		if helper.hasVRHand(true)
			helper.vrHandBindTrigger(true, InputDeviceAxisType.gripGrab, 0, "grabRight")
			helper.vrHandBindTrigger(true, InputDeviceAxisType.gripSqueeze, 0, "squeezeRight")
		end
		
		if helper.hasVRHand(false)
			helper.vrHandBindTrigger(false, InputDeviceAxisType.gripGrab, 0, "grabLeft")
			helper.vrHandBindTrigger(false, InputDeviceAxisType.gripSqueeze, 0, "squeezeLeft")
		end
	end
end
