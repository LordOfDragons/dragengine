/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */


namespace Dragengine.Commands

pin Dragengine.Utils.Text


/**
 * \brief Command carrying out a specific task.
 * 
 * Can be bound to player input events or used in widgets.
 */
class Command
	var String pName, pDescription, pTranslateDescription, pDisplayName, pTranslateDisplayName
	
	
	
	/** \brief Create command. */
	func new()
		pName = "unnamed"
		pDescription = ""
	end
	
	/** \brief Create command. */
	func new(String name, String description)
		setName(name)
		setDescription(description)
	end
	
	
	
	/** \brief Unique name. */
	func String getName()
		return pName
	end
	
	/**
	 * \brief Set unique name of the command.
	 * 
	 * Allowed are only upper and lower case letters, numbers and underscores.
	 */
	func void setName(String name)
		if name == null
			throw EInvalidParam.new()
		end
		pName = name
	end
	
	/** \brief Description. */
	func String getDescription()
		return pDescription
	end
	
	/** \brief Set description. */
	func void setDescription(String description)
		if description == null
			throw EInvalidParam.new()
		end
		pDescription = description
	end
	
	/**
	 * \brief Translation description or null.
	 * \version 1.16
	 * 
	 * If not null use TranslationManager to get description. If null or no translation
	 * can be found getDescription() has to be used.
	 */
	func String getTranslateDescription()
		return pTranslateDescription
	end
	
	/**
	 * \brief Set translate description or null.
	 * \version 1.16
	 * 
	 * If not null use TranslationManager to get display name. If null or no translation
	 * can be found getDescription() has to be used.
	 */
	func void setTranslateDescription(String translateName)
		pTranslateDescription = translateName
	end
	
	/**
	 * \brief Display name or null.
	 * \version 1.16
	 * 
	 * Display name is used for EditBindingsPanel and other placers where commands
	 * have to be shown to the user in a UI. If null getName() has to be used.
	 */
	func String getDisplayName()
		return pDisplayName
	end
	
	/**
	 * \brief Set display name or null.
	 * \version 1.16
	 * 
	 * Display name is used for EditBindingsPanel and other placers where commands
	 * have to be shown to the user in a UI. If null getName() has to be used.
	 */
	func void setDisplayName(String displayName)
		pDisplayName = displayName
	end
	
	/**
	 * \brief Translation display name or null.
	 * \version 1.16
	 * 
	 * If not null use TranslationManager to get display name. If null or no translation
	 * can be found getDisplayName() has to be used.
	 */
	func String getTranslateDisplayName()
		return pTranslateDisplayName
	end
	
	/**
	 * \brief Set translate display name or null.
	 * \version 1.16
	 * 
	 * If not null use TranslationManager to get display name. If null or no translation
	 * can be found getDisplayName() has to be used.
	 */
	func void setTranslateDisplayName(String translateName)
		pTranslateDisplayName = translateName
	end
	
	
	
	/**
	 * \brief Translated display name.
	 * \version 1.16
	 * 
	 * Tries first to translate using translationManager. If translationManager is null
	 * or the transation can not be found tries translate using EngineTranslations.
	 * If this does not provide a translation returns getDisplayName(). If getDisplayName()
	 * is null returns getName().
	 * 
	 * Returns UTF-8 string.
	 * 
	 * \param translationManager TranslationManager to use or null.
	 */
	func String translateDisplayName(TranslationManager translationManager)
		var UnicodeString text
		
		if pTranslateDisplayName != null
			if translationManager != null
				text = translationManager.translate(pTranslateDisplayName, null)
			end
			if text == null
				text = EngineTranslations.get().translate(pTranslateDisplayName, null)
			end
		end
		
		if text != null
			return text.toUTF8()
			
		elif pDisplayName != null
			return pDisplayName
			
		else
			return pName
		end
	end
	
	/**
	 * \brief Translated display name using default TranslationManager.
	 * \version 1.16
	 * 
	 * Same as translateDisplayName(TranslationManager) using TranslationManager.get() .
	 */
	func String translateDisplayName()
		return translateDisplayName(TranslationManager.get())
	end
	
	/**
	 * \brief Translated command description.
	 * \version 1.16
	 * 
	 * Tries first to translate using translationManager. If translationManager is null
	 * or no translation is found tries translate using EngineTranslations. If no translation
	 * is found returns getDescription().
	 * 
	 * Returns UTF-8 string.
	 * 
	 * \param translationManager TranslationManager to use or null.
	 */
	func String translateDescription(TranslationManager translationManager)
		var UnicodeString t
		
		if pTranslateDescription != null
			if translationManager != null
				t = translationManager.translate(pTranslateDescription, null)
			end
			if t == null
				t = EngineTranslations.get().translate(pTranslateDescription, null)
			end
		end
		
		return t != null if t.toUTF8() else pDescription
	end
	
	/**
	 * \brief Translated command description using default TranslationManager.
	 * \version 1.16
	 * 
	 * Same as translateDescription(TranslationManager) using TranslationManager.get() .
	 */
	func String translateDescription()
		return translateDescription(TranslationManager.get())
	end
	
	
	
	/** \brief Input device key or button has been pressed. */
	func void start()
	end
	
	/** \brief Input device key or button has been released. */
	func void stop()
	end
	
	/**
	 * \brief Convenience method calling start() and stop() in succession.
	 * 
	 * Used for example to run the command for different reasons than input handling.
	 */
	func void pulse()
		start()
		stop()
	end
	
	/**
	 * \brief Relative input device axis position changed.
	 * 
	 * Value is the change in the relative axis. It is reset to 0 right after sending the
	 * event. No event is sent for the reset. A typical device is mouse movement resulting
	 * in this method to be called.
	 * 
	 * \param value Relative axis position change in axis units. Caller is responsible to
	 *              adjust the range to make different input devices match in magnitude.
	 */
	func void analogRelative(float value)
	end
	
	/**
	 * \brief Absolute input device axis position changed.
	 * 
	 * Axis keeps position until next event. Gamepad events typically send this method
	 * when the stick is pushed to a new position.
	 * 
	 * \param value New axis position in the range -1 to 1.
	 */
	func void analogAbsolute(float value)
	end
	
	/**
	 * \brief Input device button has been touched.
	 * \version 1.6
	 */
	func void touch()
	end
	
	/**
	 * \brief Input device button has been untouched.
	 * \version 1.6
	 */
	func void untouch()
	end
	
	/**
	 * \brief User finger approached device button.
	 * \version 1.28
	 */
	func void approach()
	end
	
	/**
	 * \brief User finger withdrew from device button.
	 * \version 1.28
	 */
	func void withdraw()
	end
end
