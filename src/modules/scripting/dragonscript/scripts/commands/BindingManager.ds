/* 
 * Drag[en]gine DragonScript Script Module
 *
 * Copyright (C) 2020, Roland Pl√ºss (roland@rptd.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */


namespace Dragengine.Commands


/**
 * \brief Manage input bindings.
 * 
 * Bindings are identified by device and either axis modifier or button modifier. For
 * quicker access the device, axis and button index are used. Upon receiving
 * InputEventType.deviceAttached, InputEventType.deviceDetached or
 * InputEventType.deviceParamsChanged the internal data structures have to be updated.
 * Game scripts have to send received events to the binding manager using checkInputEvent().
 * This method knows what events are important avoiding the game scripts requiring to know.
 * 
 * After creating the binding manager has updated the internal data structures already.
 */
class BindingManager
	/** \brief Axis bindings as array of Binding. */
	private var Array pAxisBindings
	
	/** \brief Button bindings as array of Binding. */
	private var Array pButtonBindings
	
	/** \brief Input device information as array of InputDevice. */
	private var Array pDevices
	
	/** \brief Listeners. */
	private var Array pListeners
	
	
	
	/** \brief Create binding manager. */
	public func new()
		pAxisBindings = Array.new()
		pButtonBindings = Array.new()
		pDevices = Array.new()
		pListeners = Array.new()
		
		reloadDevices()
	end
	
	/** \brief Create copy of binding manager. */
	public func new(BindingManager bindingManager)
		pAxisBindings = bindingManager.pAxisBindings.map(block Binding each
			return Binding.new(each)
		end)
		pButtonBindings = bindingManager.pButtonBindings.map(block Binding each
			return Binding.new(each)
		end)
		pDevices = Array.new(bindingManager.pDevices)
	end
	
	
	
	/**
	 * \brief Check input event for device changes.
	 * 
	 * Call after receiving input events of any kind. Updates internal data structures
	 * if certain input events arrive.
	 */
	public func void checkInputEvent(InputEvent event)
		select event.getType()
		case InputEventType.deviceAttached
			reloadDevices()
			
			var InputDevice device = findDevice(block InputDevice each
				return each.getSource() == event.getSource() and each.getIndex() == event.getDevice()
			end)
			
			if device != null
				pListeners.forEach(block BindingManagerListener each
					each.deviceAttached(this, device)
				end)
			end
			
		case InputEventType.deviceDetached
			var InputDevice device = findDevice(block InputDevice each
				return each.getSource() == event.getSource() and each.getIndex() == event.getDevice()
			end)
			
			reloadDevices()
			
			if device != null
				pListeners.forEach(block BindingManagerListener each
					each.deviceDetached(this, device)
				end)
			end
			
		case InputEventType.deviceParamsChanged
			reloadDevices()
		end
	end
	
	
	
	/** \brief Number of axis bindings. */
	public func int getAxisBindingCount()
		return pAxisBindings.getCount()
	end
	
	/** \brief Axis binding at index. */
	public func Binding getAxisBindingAt(int index)
		return pAxisBindings.getAt(index) cast Binding
	end
	
	/** \brief Add axis binding. */
	public func void addAxisBinding(Binding binding)
		if binding == null
			throw EInvalidParam.new()
		end
		
		pAxisBindings.add(binding)
		
		updateAxisBindingIndices(binding)
		
		pListeners.forEach(block BindingManagerListener each
			each.axisBindingAdded(this, binding)
		end)
	end
	
	/** \brief Remove axis binding. */
	public func void removeAxisBinding(Binding binding)
		pAxisBindings.remove(binding)
		
		pListeners.forEach(block BindingManagerListener each
			each.axisBindingRemoved(this, binding)
		end)
	end
	
	/** \brief Remove all axis bindings. */
	public func void removeAllAxisBindings()
		if pAxisBindings.getCount() == 0
			return
		end
		
		pAxisBindings.removeAll()
		
		pListeners.forEach(block BindingManagerListener each
			each.allAxisBindingsRemoved(this)
		end)
	end
	
	/** \brief Visit axis bindings with block with parameter Binding. */
	public func void forEachAxisBinding(Block ablock)
		pAxisBindings.forEach(ablock)
	end
	
	/**
	 * \brief Find axis binding matching device and source.
	 * \deprecated Use findAxisBinding(InputEventSource,int,int).
	 */
	public func Binding findAxisBinding(int device, int axis)
		return findAxisBinding(InputEventSource.input, device, axis)
	end
	
	/**
	 * \brief Find axis binding matching device and source.
	 * \version 1.6
	 */
	public func Binding findAxisBinding(InputEventSource source, int device, int axis)
		return pAxisBindings.find(block Binding each
			return each.getSystem() == source and each.getDeviceIndex() == device \
				and each.getSourceIndex() == axis
		end) cast Binding
	end
	
	/**
	 * \brief Find axis binding matching device and source.
	 * \deprecated Use findAxisBinding(InputEventSource,int,int,bool)
	 */
	public func Binding findAxisBinding(int device, int axis, bool inverseAxis)
		return findAxisBinding(InputEventSource.input, device, axis, inverseAxis)
	end
	
	/**
	 * \brief Find axis binding matching device and source.
	 * \version 1.6
	 */
	public func Binding findAxisBinding(InputEventSource source, int device, int axis, bool inverseAxis)
		return pAxisBindings.find(block Binding each
			return each.getSystem() == source and each.getDeviceIndex() == device \
				and each.getSourceIndex() == axis and each.getInverseAxis() == inverseAxis
		end) cast Binding
	end
	
	/** \brief Find axis binding matching device and source. */
	public func Binding findAxisBinding(String deviceID, String axisID)
		return pAxisBindings.find(block Binding each
			return each.getDeviceID().equals(deviceID) \
				and each.getSourceID().equals(axisID)
		end) cast Binding
	end
	
	/** \brief Find axis binding matching device and source. */
	public func Binding findAxisBinding(String deviceID, String axisID, bool inverseAxis)
		return pAxisBindings.find(block Binding each
			return each.getDeviceID().equals(deviceID) \
				and each.getSourceID().equals(axisID) \
				and each.getInverseAxis() == inverseAxis
		end) cast Binding
	end
	
	/** \brief Find axis binding matching block with parameter Binding. */
	public func Binding findAxisBinding(Block ablock)
		return pAxisBindings.find(ablock) cast Binding
	end
	
	/**
	 * \brief Collect axis binding matching block with parameter Binding as Array of Binding.
	 * \version 1.10
	 */
	public func Array collectAxisBinding(Block ablock)
		return pAxisBindings.collect(ablock)
	end
	
	
	
	/** \brief Number of button bindings. */
	public func int getButtonBindingCount()
		return pButtonBindings.getCount()
	end
	
	/** \brief Button binding at index. */
	public func Binding getButtonBindingAt(int index)
		return pButtonBindings.getAt(index) cast Binding
	end
	
	/** \brief Add button binding. */
	public func void addButtonBinding(Binding binding)
		if binding == null
			throw EInvalidParam.new()
		end
		
		pButtonBindings.add(binding)
		
		updateButtonBindingIndices(binding)
		
		pListeners.forEach(block BindingManagerListener each
			each.buttonBindingAdded(this, binding)
		end)
	end
	
	/** \brief Remove button binding. */
	public func void removeButtonBinding(Binding binding)
		pButtonBindings.remove(binding)
		
		pListeners.forEach(block BindingManagerListener each
			each.buttonBindingRemoved(this, binding)
		end)
	end
	
	/** \brief Remove all button bindings. */
	public func void removeAllButtonBindings()
		if pButtonBindings.getCount() == 0
			return
		end
		
		pButtonBindings.removeAll()
		
		pListeners.forEach(block BindingManagerListener each
			each.allButtonBindingsRemoved(this)
		end)
	end
	
	/** \brief Visit button bindings with block with parameter Binding. */
	public func void forEachButtonBinding(Block ablock)
		pButtonBindings.forEach(ablock)
	end
	
	/**
	 * \brief Find button binding matching device and source.
	 * \deprecated Use findButtonBinding(InputEventSource,int,int)
	 */
	public func Binding findButtonBinding(int device, int button)
		return findButtonBinding(InputEventSource.input, device, button)
	end
	
	/**
	 * \brief Find button binding matching device and source.
	 * \version 1.6
	 */
	public func Binding findButtonBinding(InputEventSource source, int device, int button)
		return pButtonBindings.find(block Binding each
			return each.getSystem() == source and each.getDeviceIndex() == device \
				and each.getSourceIndex() == button
		end) cast Binding
	end
	
	/** \brief Find button binding matching device and source. */
	public func Binding findButtonBinding(String deviceID, String buttonID)
		return pButtonBindings.find(block Binding each
			return each.getDeviceID().equals(deviceID) and each.getSourceID().equals(buttonID)
		end) cast Binding
	end
	
	/** \brief Find button binding matching block with parameter Binding. */
	public func Binding findButtonBinding(Block ablock)
		return pButtonBindings.find(ablock) cast Binding
	end
	
	/**
	 * \brief Collect button binding matching block with parameter Binding as Array of Binding.
	 * \version 1.10
	 */
	public func Array collectButtonBinding(Block ablock)
		return pButtonBindings.collect(ablock)
	end
	
	
	
	/** \brief Remove all bindings with command. */
	public func void removeBindingsWithCommand(Command command)
		pAxisBindings.collect(block Binding each
			return each.getCommand() == command
		end).forEach(block Binding each
			removeAxisBinding(each)
		end)
		
		pButtonBindings.collect(block Binding each
			return each.getCommand() == command
		end).forEach(block Binding each
			removeButtonBinding(each)
		end)
	end
	
	
	
	/** \brief Number of input devices. */
	public func int getDeviceCount()
		return pDevices.getCount()
	end
	
	/** \brief Device at index. */
	public func InputDevice getDeviceAt(int index)
		return pDevices.getAt(index) cast InputDevice
	end
	
	/** \brief Visit devices with block with parameter InputDevice. */
	public func void forEachDevice(Block ablock)
		pDevices.forEach(ablock)
	end
	
	/**
	 * \brief Find device with block with parameter InputDevice.
	 * 
	 * \returns \em null if no device matches.
	 */
	public func InputDevice findDevice(Block ablock)
		return pDevices.find(ablock) cast InputDevice
	end
	
	/**
	 * \brief Collect devices with block with parameter InputDevice as Array of InputDevice.
	 * \version 1.10
	 */
	public func Array collectDevices(Block ablock)
		return pDevices.collect(ablock)
	end
	
	
	
	/**
	 * \brief Update axis binding indices.
	 * 
	 * Call if you made changes to the binding affecting device and source id.
	 * You do not need to call this if you added or removed the binding.
	 */
	public func void updateAxisBindingIndices(Binding binding)
		var int deviceIndex = -1
		var int sourceIndex = -1
		
		deviceIndex = InputSystem.indexOfDeviceWithID(binding.getDeviceID())
		if deviceIndex != -1
			sourceIndex = InputSystem.indexOfAxisWithID(deviceIndex, binding.getSourceID())
			if sourceIndex != -1
				binding.setSystem(InputEventSource.input)
				binding.setDeviceIndex(deviceIndex)
				binding.setSourceIndex(sourceIndex)
				return
			end
			
		else
			deviceIndex = VRSystem.indexOfDeviceWithID(binding.getDeviceID())
			if deviceIndex != -1
				sourceIndex = VRSystem.indexOfAxisWithID(deviceIndex, binding.getSourceID())
				if sourceIndex != -1
					binding.setSystem(InputEventSource.vr)
					binding.setDeviceIndex(deviceIndex)
					binding.setSourceIndex(sourceIndex)
					return
				end
			end
		end
		
		binding.setSystem(null)
		binding.setDeviceIndex(-1)
		binding.setSourceIndex(-1)
	end
	
	/**
	 * \brief Update button binding indices.
	 * 
	 * Call if you made changes to the binding affecting device and source id.
	 * You do not need to call this if you added or removed the binding.
	 */
	public func void updateButtonBindingIndices(Binding binding)
		var int deviceIndex = -1
		var int sourceIndex = -1
		
		deviceIndex = InputSystem.indexOfDeviceWithID(binding.getDeviceID())
		if deviceIndex != -1
			sourceIndex = InputSystem.indexOfButtonWithID(deviceIndex, binding.getSourceID())
			if sourceIndex != -1
				binding.setSystem(InputEventSource.input)
				binding.setDeviceIndex(deviceIndex)
				binding.setSourceIndex(sourceIndex)
				return
			end
			
		else
			deviceIndex = VRSystem.indexOfDeviceWithID(binding.getDeviceID())
			if deviceIndex != -1
				sourceIndex = VRSystem.indexOfButtonWithID(deviceIndex, binding.getSourceID())
				if sourceIndex != -1
					binding.setSystem(InputEventSource.vr)
					binding.setDeviceIndex(deviceIndex)
					binding.setSourceIndex(sourceIndex)
					return
				end
			end
		end
		
		binding.setSystem(null)
		binding.setDeviceIndex(-1)
		binding.setSourceIndex(-1)
	end
	
	/**
	 * \brief Update all binding indices.
	 * 
	 * Call if you made changes to many bindings affecting device and source ids.
	 * You do not need to call this if you just added or removed bindings.
	 */
	public func void updateAllBindingIndices()
		pAxisBindings.forEach(block Binding each
			updateAxisBindingIndices(each)
		end)
		
		pButtonBindings.forEach(block Binding each
			updateButtonBindingIndices(each)
		end)
	end
	
	/** \brief Update input devices and all binding indices. */
	public func void reloadDevices()
		var int i, deviceCount
		
		pDevices.removeAll()
		
		deviceCount = InputSystem.getDeviceCount()
		for i = 0 to deviceCount
			pDevices.add(InputSystem.getDeviceAt(i))
		end
		
		deviceCount = VRSystem.getDeviceCount()
		for i = 0 to deviceCount
			pDevices.add(VRSystem.getDeviceAt(i))
		end
		
		updateAllBindingIndices()
		
		pListeners.forEach(block BindingManagerListener each
			each.devicesReloaded(this)
		end)
	end
	
	
	
	/**
	 * \brief Add listener.
	 * \version 1.6
	 */
	public func void addListener(BindingManagerListener listener)
		if listener == null
			throw ENullPointer.new("listener")
		end
		pListeners.add(listener)
	end
	
	/**
	 * \brief Remove listener.
	 * \version 1.6
	 */
	public func void removeListener(BindingManagerListener listener)
		pListeners.remove(listener)
	end
end
