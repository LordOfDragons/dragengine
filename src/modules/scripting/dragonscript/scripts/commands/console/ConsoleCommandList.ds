/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */


namespace Dragengine.Commands


/**
 * \brief List of console commands.
 */
class ConsoleCommandList
	/** \brief Commands. */
	private var Array pCommands
	
	
	
	/** \brief Create command list. */
	public func new()
		this.pCommands = Array.new()
	end
	
	
	
	/** \brief Number of commands. */
	public func int getCount()
		return this.pCommands.getCount()
	end
	
	/**
	 * \brief Command at index.
	 * \throws EOutOfBOundary \em index is less than 0 or larger than or equal to getCount().
	 */
	public func ConsoleCommand getAt( int index )
		return this.pCommands.getAt(index) cast ConsoleCommand
	end
	
	/** \brief Named command or \em null if not found. */
	public func ConsoleCommand getNamed( String name )
		return this.pCommands.find( block ConsoleCommand each
			return each.getName().equals( name )
		end ) cast ConsoleCommand
	end
	
	/** \brief Named command is present. */
	public func bool has( String name )
		return this.pCommands.find( block ConsoleCommand each
			return each.getName().equals( name )
		end ) != null
	end
	
	/**
	 * \brief Add console command.
	 * \throws EInvalidParam Command name is not valid.
	 * \throws EInvalidParam Command with name is present.
	 */
	public func void add( ConsoleCommand command )
		if not CommandManager.isValidName( command.getName() ) or this.has( command.getName() )
			throw EInvalidParam.new()
		end
		this.pCommands.add( command )
	end
	
	/**
	 * \brief Remove console command.
	 * \throws EInvalidParam Command with name is absent.
	 */
	public func void remove( ConsoleCommand command )
		this.pCommands.remove( command )
	end
	
	/** \brief Remove all commands. */
	public func void removeAll()
		this.pCommands.removeAll()
	end
	
	/** \brief Visit commands with a block. */
	public func void forEach( Block ablock )
		this.pCommands.forEach( ablock )
	end
end
