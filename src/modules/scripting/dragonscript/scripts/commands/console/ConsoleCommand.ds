/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */


namespace Dragengine.Commands

pin Dragengine.Utils


/**
 * \brief Console command.
 * 
 * Console commands are special commands taking parameters. They supposed to be used
 * with a game console window or panel where the user can specify these parameters.
 * These commands can not be bound to input events directly except using a wrapper.
 */
class ConsoleCommand
	/** \brief Unique command name. */
	private var String pName
	
	/** \brief Description to display to user. */
	private var String pDescription
	
	/** \brief Command syntax. */
	private var String pSyntax
	
	
	
	/** \brief Create console command. */
	public func new()
		this.pName = "unnamed"
		this.pDescription = ""
		this.pSyntax = ""
	end
	
	
	
	/**
	 * \brief Unique name of command.
	 * \details Allowed are upper and lower case letters, numbers and underscore.
	 */
	public func String getName()
		return this.pName
	end
	
	/**
	 * \brief Set unique name of command.
	 * \details Allowed are upper and lower case letters, numbers and underscore.
	 */
	public func void setName( String name )
		if name == null
			throw EInvalidParam.new()
		end
		this.pName = name
	end
	
	/** \brief Description to display to user. */
	public func String getDescription()
		return this.pDescription
	end
	
	/** Set description to display to user. */
	public func void setDescription( String description )
		if description == null
			throw EInvalidParam.new()
		end
		this.pDescription = description
	end
	
	/** \brief Command syntax. */
	public func String getSyntax()
		return this.pSyntax
	end
	
	/** \brief Set command syntax. */
	public func void setSyntax( String syntax )
		if syntax == null
			throw EInvalidParam.new()
		end
		this.pSyntax = syntax
	end
	
	
	
	/**
	 * \brief Execute command.
	 * \details Default implementation prints syntax to console.
	 * \param console Console to send output to.
	 * \param params List of parameters. Has to match command syntax.
	 */
	public func void execute( Console console, Array params )
		console.addMessage( this.pSyntax )
	end
end
