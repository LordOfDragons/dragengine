/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */


namespace Dragengine.Commands

pin Dragengine.Utils


/**
 * \brief Console command showing information about commands.
 * 
 * Displays either all supported commands or detailed information about a specific command.
 */
class HelpConsoleCommand extends ConsoleCommand
	/** \brief Console command list. */
	private var ConsoleCommandList pConsoleCommands
	
	/** \brief Command manager. */
	private var CommandManager pCommandManager
	
	
	
	/**
	 * \brief Create console command.
	 *
	 * Both \em consoleCommands and \em commandManager can be \em null.
	 */
	public func new( ConsoleCommandList consoleCommands, CommandManager commandManager )
		this.pConsoleCommands = consoleCommands
		this.pCommandManager = commandManager
		
		this.setName( "help" )
		this.setDescription( "Display help about commands." )
		this.setSyntax( "help <command>\n" + \
			"   command => command to display help for" )
	end
	
	
	
	/** \brief Console command list. */
	public func ConsoleCommandList getConsoleCommands()
		return this.pConsoleCommands
	end
	
	/** \brief Set console command list. */
	public func void setConsoleCommands( ConsoleCommandList consoleCommands )
		this.pConsoleCommands = consoleCommands
	end
	
	/** \brief Command manager. */
	public func CommandManager getCommandManager()
		return this.pCommandManager
	end
	
	/** \brief Set command manager. */
	public func void setCommandManager( CommandManager commandManager )
		this.pCommandManager = commandManager
	end
	
	
	
	/**
	 * \brief Execute command.
	 * \param console Console to send output to.
	 * \param params List of parameters. Has to match command syntax.
	 */
	public func void execute( Console console, Array params )
		if params.getCount() > 0
			if not ( params.getAt( 0 ) castable String )
				console.addMessage( "invalid command " + params.getAt( 0 ) )
				return
			end
			
			var String name = params.getAt( 0 ) cast String
			
			var Command command
			if this.pCommandManager != null
				command = this.pCommandManager.getNamed( name )
				if command != null
					console.addMessage( command.getName() \
						+ " => " + command.getDescription() )
					return
				end
			end
			
			var ConsoleCommand consoleCommand
			if this.pConsoleCommands != null
				consoleCommand = this.pConsoleCommands.getNamed( name )
				if consoleCommand != null
					console.addMessage( consoleCommand.getName() \
						+ " => " + consoleCommand.getDescription() )
					console.addMessage( consoleCommand.getSyntax() )
				end
			end
			
			console.addMessage( "invalid command " + name )
			
		else
			var Array commands = Array.new()
			
			if this.pCommandManager != null
				this.pCommandManager.forEach( block Command each
					commands.add( each.getName() )
				end )
			end
			
			if this.pConsoleCommands != null
				this.pConsoleCommands.forEach( block ConsoleCommand each
					commands.add( each.getName() )
				end )
			end
			
			if commands.getCount() > 0
				console.addMessage( commands.sorted().fold( block String a, String b
					return a + ", " + b
				end ).toString() )
				
			else
				console.addMessage( "< no commands >" )
			end
		end
	end
end
