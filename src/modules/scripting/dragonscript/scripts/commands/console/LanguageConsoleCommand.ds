/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */


namespace Dragengine.Commands

pin Dragengine.Utils


/**
 * \brief Console command shows available languages and changing active language.
 */
class LanguageConsoleCommand extends ConsoleCommand
	var TranslationManager pTranslationManager
	var bool pChangeEngineTranslations
	
	
	
	/** \brief Create console command. */
	func new(TranslationManager translationManager)
		if translationManager == null
			throw EInvalidParam.new()
		end
		
		pTranslationManager = translationManager
		pChangeEngineTranslations = true
		
		setName("language")
		setDescription("Shows languages and set active language.")
		setSyntax("language { list | active { <id> }\n" + \
			"   list => display list of all available languages\n" + \
			"   active => display active language\n" + \
			"   active <name> => set active language")
	end
	
	
	
	/** \brief Translation manager. */
	func TranslationManager getTranslationManager()
		return pTranslationManager
	end
	
	/** \brief Set translation manager. */
	func void setTranslationManager(TranslationManager translationManager)
		if translationManager == null
			throw EInvalidParam.new()
		end
		pTranslationManager = translationManager
	end
	
	/**
	 * \brief Change also engine translations.
	 * \version 1.20
	 * 
	 * Enabled by default.
	 */
	func bool getChangeEngineTranslations()
		return pChangeEngineTranslations
	end
	
	/**
	 * \brief Set to change also engine translations.
	 * \version 1.20
	 */
	func void setChangeEngineTranslations(bool change)
		pChangeEngineTranslations = change
	end
	
	
	
	/**
	 * \brief Execute command.
	 * \param console Console to send output to.
	 * \param params List of parameters. Has to match command syntax.
	 */
	func void execute(Console console, Array params)
		if params.getCount() == 0
			console.addMessage(getSyntax())
			return
		end
		
		var LanguagePack languagePack
		
		if params.getAt(0).equals("list")
			if pTranslationManager.getCount() > 0
				pTranslationManager.forEach(block LanguagePack each
					console.addMessage("- {}: {}".format(Array.newWith(\
						each.getIdentifier(), each.getName())))
				end)
				
			else
				console.addMessage("< no languages >")
			end
			
		elif params.getAt(0).equals("active")
			if params.getCount() == 1
				languagePack = pTranslationManager.getActive()
				if languagePack != null
					console.addMessage("{}: {}".format(Array.newWith(\
						languagePack.getIdentifier(), languagePack.getName())))
				end
				
			else
				languagePack = pTranslationManager.getWithId(params.getAt(1).toString())
				
				if languagePack == null
					languagePack = pTranslationManager.getNamed(\
						UnicodeString.newFromUTF8(params.getAt(1).toString()))
				end
				
				if languagePack == null
					console.addMessage("Language not found: " + params.getAt(1))
					
				else
					pTranslationManager.setActive(languagePack)
					EngineTranslations.get().setActiveWithIdIfPresent(languagePack.getIdentifier())
					
					console.addMessage("Activated language: {} ({})".format(Array.newWith(\
						languagePack.getIdentifier(), languagePack.getName())))
				end
			end
			
		else
			console.addMessage("invalid command: " + params.getAt(0))
		end
	end
end
