/* 
 * Drag[en]gine DragonScript Script Module
 *
 * Copyright (C) 2020, Roland Pl√ºss (roland@rptd.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */


namespace Dragengine.Commands

pin Dragengine.Utils


/**
 * \brief Console command shows available languages and changing active language.
 */
class LanguageConsoleCommand extends ConsoleCommand
	var TranslationManager pTranslationManager
	var bool pChangeEngineTranslations
	
	
	
	/** \brief Create console command. */
	func new(TranslationManager translationManager)
		if translationManager == null
			throw EInvalidParam.new()
		end
		
		pTranslationManager = translationManager
		pChangeEngineTranslations = true
		
		setName("language")
		setDescription("Shows languages and set active language.")
		setSyntax("language { list | active { <id> }\n" + \
			"   list => display list of all available languages\n" + \
			"   active => display active language\n" + \
			"   active <name> => set active language")
	end
	
	
	
	/** \brief Translation manager. */
	func TranslationManager getTranslationManager()
		return pTranslationManager
	end
	
	/** \brief Set translation manager. */
	func void setTranslationManager(TranslationManager translationManager)
		if translationManager == null
			throw EInvalidParam.new()
		end
		pTranslationManager = translationManager
	end
	
	/**
	 * \brief Change also engine translations.
	 * \version 1.20
	 * 
	 * Enabled by default.
	 */
	func bool getChangeEngineTranslations()
		return pChangeEngineTranslations
	end
	
	/**
	 * \brief Set to change also engine translations.
	 * \version 1.20
	 */
	func void setChangeEngineTranslations(bool change)
		pChangeEngineTranslations = change
	end
	
	
	
	/**
	 * \brief Execute command.
	 * \param console Console to send output to.
	 * \param params List of parameters. Has to match command syntax.
	 */
	func void execute(Console console, Array params)
		if params.getCount() == 0
			console.addMessage(getSyntax())
			return
		end
		
		var LanguagePack languagePack
		
		if params.getAt(0).equals("list")
			if pTranslationManager.getCount() > 0
				pTranslationManager.forEach(block LanguagePack each
					console.addMessage("- {}: {}".format(Array.newWith(\
						each.getIdentifier(), each.getName())))
				end)
				
			else
				console.addMessage("< no languages >")
			end
			
		elif params.getAt(0).equals("active")
			if params.getCount() == 1
				languagePack = pTranslationManager.getActive()
				console.addMessage("{}: {}".format(Array.newWith(\
					languagePack.getIdentifier(), languagePack.getName())))
				
			else
				languagePack = pTranslationManager.getWithId(params.getAt(1).toString())
				
				if languagePack == null
					languagePack = pTranslationManager.getNamed(\
						UnicodeString.newFromUTF8(params.getAt(1).toString()))
				end
				
				if languagePack == null
					console.addMessage("Language not found: " + params.getAt(1))
					
				else
					pTranslationManager.setActive(languagePack)
					EngineTranslations.get().setActiveWithIdIfPresent(languagePack.getIdentifier())
					
					console.addMessage("Activated language: {} ({})".format(Array.newWith(\
						languagePack.getIdentifier(), languagePack.getName())))
				end
			end
			
		else
			console.addMessage("invalid command: " + params.getAt(0))
		end
	end
end
