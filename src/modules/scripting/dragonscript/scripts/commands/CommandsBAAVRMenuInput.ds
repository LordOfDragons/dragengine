/* 
 * Drag[en]gine DragonScript Script Module
 *
 * Copyright (C) 2022, Roland Pl√ºss (roland@rptd.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */


namespace Dragengine.Commands

pin Dragengine.Scenery


/**
 * \brief Commands for player controlled BaseActor with BAAVRMenuInput action.
 * \version 1.12
 * 
 * Contains various commands as sub classes. A static helper method adds instances of each
 * command to the command manager of a BaseGameApp.
 */
class CommandsBAAVRMenuInput
	/** \brief Base class operating only on actors with BAAVRMenuInput action. */
	public class MenuAction extends Command
		protected var ECBehaviorPlayerControllable.Tracker pTracker
		protected var bool pRightHand
		
		public func new(ECBehaviorPlayerControllable.Tracker tracker, String name, \
		String description, bool rightHand) super(name, description)
			if tracker == null
				throw ENullPointer.new("tracker")
			end
			pTracker = tracker
			pRightHand = rightHand
		end
		
		protected func ECBehaviorPlayerControllable.Tracker getTracker()
			return pTracker
		end
		
		protected func BAAVRMenuInput getInterface()
			var ECBehaviorPlayerControllable.Instance actor = pTracker.getActor()
			if actor == null
				return null
			end
			
			var ECBehaviorVRHandAction.Instance action
			
			if pRightHand
				action = ECBehaviorVRHandAction.getInstanceIn(actor.getElement(), BaseVRActorClass.idVRRightHand)
				
			else
				action = ECBehaviorVRHandAction.getInstanceIn(actor.getElement(), BaseVRActorClass.idVRLeftHand)
			end
			
			if action != null and action.getAction() castable BAAVRMenuInput
				return action.getAction() cast BAAVRMenuInput
				
			else
				return null
			end
		end
		
		public func void touch()
			var BAAVRMenuInput iface = getInterface()
			if iface != null
				iface.menuTouch()
			end
		end
		
		public func void untouch()
			var BAAVRMenuInput iface = getInterface()
			if iface != null
				iface.menuUntouch()
			end
		end
		
		public func void start()
			var BAAVRMenuInput iface = getInterface()
			if iface != null
				iface.menuPress()
			end
		end
		
		public func void stop()
			var BAAVRMenuInput iface = getInterface()
			if iface != null
				iface.menuRelease()
			end
		end
	end
	
	
	
	/**
	 * \brief Add commands to command manager.
	 * 
	 * Adds these commands:
	 * - menuRight: Right hand menu
	 * - menuLeft: Left hand menu
	 */
	public static func void addCommands(CommandManager commands, ECBehaviorPlayerControllable.Tracker tracker)
		var MenuAction menuAction
		
		menuAction = MenuAction.new(tracker, "menuRight", "Menu Right Hand", true)
		menuAction.setTranslateDescription("UI.Command.MenuRight.Description")
		menuAction.setTranslateDisplayName("UI.Command.MenuRight.DisplayName")
		commands.add(menuAction)
		
		menuAction = MenuAction.new(tracker, "menuLeft", "Menu Left Hand", false)
		menuAction.setTranslateDescription("UI.Command.MenuLeft.Description")
		menuAction.setTranslateDisplayName("UI.Command.MenuLeft.DisplayName")
		commands.add(menuAction)
	end
	
	
	
	/**
	 * \brief Add default bindings for commands.
	 * 
	 * Adds bindings for these commands if present in binding manager:
	 * - "menuRight"
	 * - "menuLeft"
	 */
	public static func void addDefaultBindings(DefaultBindingHelper helper)
		if helper.hasVRHand(true)
			helper.vrHandBindButton(true, 1, "menuRight")
		end
		
		if helper.hasVRHand(false)
			helper.vrHandBindButton(false, 1, "menuLeft")
		end
	end
end
