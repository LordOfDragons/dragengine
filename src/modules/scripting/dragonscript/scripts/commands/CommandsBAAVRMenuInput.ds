/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */


namespace Dragengine.Commands

pin Dragengine.Scenery


/**
 * \brief Commands for player controlled BaseActor with BAAVRMenuInput action.
 * \version 1.12
 * 
 * Contains various commands as sub classes. A static helper method adds instances of each
 * command to the command manager of a BaseGameApp.
 */
class CommandsBAAVRMenuInput
	/**
	 * \brief Bridge from BAAVRMenuInput to BAAStateMachineEvent.
	 * \version 1.26
	 * 
	 * Send events match BAAVRMenuInput function named with prefix "vrMenuInput.".
	 */
	class StateMachineEventBridge implements BAAVRMenuInput
		var BAAStateMachineEvent pTarget
		
		func new(BAAStateMachineEvent target)
			pTarget = target
		end
		
		func void menuTouch()
			pTarget.sendInputAsEvent("vrMenuInput.touch", null)
		end
		
		func void menuUntouch()
			pTarget.sendInputAsEvent("vrMenuInput.untouch", null)
		end
		
		func void menuPress()
			pTarget.sendInputAsEvent("vrMenuInput.press", null)
		end
		
		func void menuRelease()
			pTarget.sendInputAsEvent("vrMenuInput.release", null)
		end
	end
	
	/** \brief Base class operating only on actors with BAAVRMenuInput action. */
	public class MenuAction extends Command
		protected var ECBehaviorPlayerControllable.Tracker pTracker
		protected var bool pRightHand
		
		public func new(ECBehaviorPlayerControllable.Tracker tracker, String name, \
		String description, bool rightHand) super(name, description)
			if tracker == null
				throw ENullPointer.new("tracker")
			end
			pTracker = tracker
			pRightHand = rightHand
		end
		
		protected func ECBehaviorPlayerControllable.Tracker getTracker()
			return pTracker
		end
		
		protected func BAAVRMenuInput getInterface()
			var ECBehaviorPlayerControllable.Instance actor = pTracker.getActor()
			if actor == null
				return null
			end
			
			var ECBehaviorVRHandAction.Instance vrHandAction
			
			if pRightHand
				vrHandAction = ECBehaviorVRHandAction.getInstanceIn(actor.getElement(), BaseVRActorClass.idVRRightHand)
				
			else
				vrHandAction = ECBehaviorVRHandAction.getInstanceIn(actor.getElement(), BaseVRActorClass.idVRLeftHand)
			end
			
			if vrHandAction != null
				var BaseVRHandAction action = vrHandAction.getAction()
				if action castable BAAVRMenuInput
					return action cast BAAVRMenuInput
					
				elif action castable BAAStateMachineEvent
					return StateMachineEventBridge.new(action cast BAAStateMachineEvent)
				end
			end
			return null
		end
		
		public func void touch()
			var BAAVRMenuInput iface = getInterface()
			if iface != null
				iface.menuTouch()
			end
		end
		
		public func void untouch()
			var BAAVRMenuInput iface = getInterface()
			if iface != null
				iface.menuUntouch()
			end
		end
		
		public func void start()
			var BAAVRMenuInput iface = getInterface()
			if iface != null
				iface.menuPress()
			end
		end
		
		public func void stop()
			var BAAVRMenuInput iface = getInterface()
			if iface != null
				iface.menuRelease()
			end
		end
	end
	
	
	
	/**
	 * \brief Add commands to command manager.
	 * 
	 * Adds these commands:
	 * - menuRight: Right hand menu
	 * - menuLeft: Left hand menu
	 */
	public static func void addCommands(CommandManager commands, ECBehaviorPlayerControllable.Tracker tracker)
		var MenuAction menuAction
		
		menuAction = MenuAction.new(tracker, "menuRight", "Menu Right Hand", true)
		menuAction.setTranslateDescription("UI.Command.MenuRight.Description")
		menuAction.setTranslateDisplayName("UI.Command.MenuRight.DisplayName")
		commands.add(menuAction)
		
		menuAction = MenuAction.new(tracker, "menuLeft", "Menu Left Hand", false)
		menuAction.setTranslateDescription("UI.Command.MenuLeft.Description")
		menuAction.setTranslateDisplayName("UI.Command.MenuLeft.DisplayName")
		commands.add(menuAction)
	end
	
	
	
	/**
	 * \brief Add default bindings for commands.
	 * 
	 * Adds bindings for these commands if present in binding manager:
	 * - "menuRight"
	 * - "menuLeft"
	 */
	public static func void addDefaultBindings(DefaultBindingHelper helper)
		if helper.hasVRHand(true)
			helper.vrHandBindButton(true, 1, "menuRight")
		end
		
		if helper.hasVRHand(false)
			helper.vrHandBindButton(false, 1, "menuLeft")
		end
	end
end
