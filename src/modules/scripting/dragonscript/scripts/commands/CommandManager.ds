/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */


namespace Dragengine.Commands


/**
 * \brief Game commands.
 */
class CommandManager
	/** \brief Commands */
	private var Array pCommands
	
	
	
	/** \brief Create command manager. */
	public func new()
		this.pCommands = Array.new()
	end
	
	
	
	/** \brief Number of commands. */
	public func int getCount()
		return this.pCommands.getCount()
	end
	
	/** \brief Command at index. */
	public func Command getAt( int index )
		return this.pCommands.getAt( index ) cast Command
	end
	
	/** \brief Named command or \em null if absent. */
	public func Command getNamed( String name )
		return this.pCommands.find( block Command each
			return each.getName().equals( name )
		end ) cast Command
	end
	
	/** \brief Named command is present. */
	public func bool hasNamed( String name )
		return this.getNamed( name ) != null
	end
	
	/** \brief Add command. */
	public func void add( Command command )
		if not isValidName( command.getName() ) or this.hasNamed( command.getName() )
			throw EInvalidParam.new()
		end
		this.pCommands.add( command )
	end
	
	/** \brief Remove command. */
	public func void remove( Command command )
		this.pCommands.remove( command )
	end
	
	/** \brief Removes all commands. */
	public func void removeAll()
		this.pCommands.removeAll()
	end
	
	/** \brief Visit commands with a block. */
	public func void forEach( Block ablock )
		this.pCommands.forEach( ablock )
	end
	
	
	
	/** \brief Command name is valid. */
	public static func bool isValidName( String name )
		var int i, count = name.getLength()
		var int character
		var bool valid
		
		for i = 0 to count
			character = name.getAt( i )
			valid = false
			valid = valid or (character >= 'A' and character <= 'Z')
			valid = valid or (character >= 'a' and character <= 'z')
			valid = valid or character == '_'
			if i > 0
				valid = valid or (character >= '0' and character <= '9')
			end
			if not valid
				return false
			end
		end
		
		return true
	end
end
