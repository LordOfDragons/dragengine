/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */


namespace Dragengine.BehaviorTreeSystem

pin Dragengine.Scenery
pin Dragengine.Utils



/**
 * \brief Behavior tree run away exception.
 * 
 * Thrown if the number of steps run in BTContext.stepBehaviorTree() exceeds the run away
 * limit. As additional information the sequence of BTRules resulting in the exception is
 * provided.
 */
class BTRunAwayException extends Exception
	var Array pRunAwayList
	
	
	
	/**
	 * \brief Create exception.
	 * 
	 * \param list Array of BTRule. A copy of the list is stored.
	 */
	func new(Array list) super("Behavior Tree Run-Away")
		if list == null
			throw EInvalidParam.new()
		end
		pRunAwayList = Array.new(list)
	end
	
	
	
	/** \brief Number of entries in run away list. */
	func int getEntryCount()
		return pRunAwayList.getCount()
	end
	
	/** \brief Entry at index. */
	func BTRule getEntryAt(int index)
		return pRunAwayList.getAt(index) cast BTRule
	end
	
	/** \brief Visit entries using block with parameter BTRule. */
	func void forEachEntry(Block ablock)
		pRunAwayList.forEach(ablock)
	end
	
	
	
	/** \brief Run away back-trace in string format. */
	func String getRunAwayBacktrace()
		var int i, count = pRunAwayList.getCount()
		var String string = ""
		
		for i = 0 to count
			if i > 0
				string = string + "\n"
			end
			string = string + (i + 1) + ") " + (pRunAwayList.getAt(i) cast BTRule).getID()
		end
		
		return string
	end
end
