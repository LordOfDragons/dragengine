/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */


namespace Dragengine.BehaviorTreeSystem

pin Dragengine.Scenery
pin Dragengine.TriggerSystem
pin Dragengine.Utils



/**
 * \brief Behavior tree condition evaluating trigger expression.
 */
class BTConditionTrigger implements BTCondition
	/** \brief Test mode. */
	public enum TestMode
		/** \brief True if the trigger is in the fired state. */
		fired
		
		/** \brief True if the trigger is in the reset state. */
		notFired
		
		/** \brief True if the trigger has ever been fired. */
		everFired
		
		/** \brief True if the trigger has never been fired. */
		neverFired
	end
	
	
	
	var TSTriggerTable pTriggerTable
	var StringID pName
	var TSTriggerTarget pTriggerTarget
	var TestMode pTestMode
	
	
	
	/** \brief Create condition. */
	func new(StringID name, TestMode testMode) \
	this(BaseGameApp.getApp().getTriggerTable(), name, testMode)
	end
	
	/** \brief Create condition. */
	func new(TSTriggerTable triggerTable, StringID name, TestMode testMode)
		if triggerTable == null
			throw ENullPointer.new("triggerTable")
		end
		if name == null
			throw ENullPointer.new("name")
		end
		if testMode == null
			throw ENullPointer.new("testMode")
		end
		
		pTriggerTable = triggerTable
		pName = name
		pTestMode = testMode
	end
	
	
	
	/** \brief Trigger table. */
	func TSTriggerTable getTriggerTable()
		return pTriggerTable
	end
	
	/** \brief Set trigger table. */
	protected func void setTriggerTable(TSTriggerTable triggerTable)
		pTriggerTable = triggerTable
		pTriggerTarget = null
	end
	
	/** \brief Name of the trigger to evaluate. */
	func StringID getName()
		return pName
	end
	
	/** \brief Set name of the trigger to evaluate. */
	func void setName(StringID name)
		pName = name
		pTriggerTarget = null
	end
	
	/** \brief Cached trigger target. */
	func TSTriggerTarget getTriggerTarget()
		if pTriggerTarget == null
			pTriggerTarget = pTriggerTable.getOrAddNamed(pName)
		end
		return pTriggerTarget
	end
	
	/** \brief TestMode. */
	func TestMode getTestMode()
		return pTestMode
	end
	
	/** \brief Set action. */
	func void setTestMode(TestMode testMode)
		pTestMode = testMode
	end
	
	
	
	/** \brief Create condition testing the exact opposite. */
	func BTConditionTrigger negated()
		var TestMode testMode = pTestMode
		
		select testMode
		case TestMode.fired
			testMode = TestMode.notFired
			
		case TestMode.notFired
			testMode = TestMode.fired
			
		case TestMode.everFired
			testMode = TestMode.neverFired
			
		case TestMode.neverFired
			testMode = TestMode.everFired
		end
		
		return BTConditionTrigger.new(pTriggerTable, pName, testMode)
	end
	
	
	
	/**
	 * \brief Evaluate condition.
	 * \param parameters Dictionary with parameters of type String key and String value.
	 *                   Do not change the content of the dictionary as it is shared.
	 */
	func bool evaluateCondition(BTContext context, Dictionary parameters)
		select pTestMode
		case TestMode.fired
			return getTriggerTarget().getFired()
			
		case TestMode.notFired
			return not getTriggerTarget().getFired()
			
		case TestMode.everFired
			return getTriggerTarget().getHasFired()
			
		case TestMode.neverFired
			return not getTriggerTarget().getHasFired()
			
		else
			return false
		end
	end
end
