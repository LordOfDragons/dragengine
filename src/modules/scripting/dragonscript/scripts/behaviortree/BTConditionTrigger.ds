/* 
 * Drag[en]gine DragonScript Script Module
 *
 * Copyright (C) 2020, Roland Pl√ºss (roland@rptd.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */


namespace Dragengine.BehaviorTreeSystem

pin Dragengine.Scenery
pin Dragengine.TriggerSystem
pin Dragengine.Utils



/**
 * \brief Behavior tree condition evaluating trigger expression.
 */
class BTConditionTrigger implements BTCondition
	/** \brief Test mode. */
	public enum TestMode
		/** \brief True if the trigger is in the fired state. */
		fired
		
		/** \brief True if the trigger is in the reset state. */
		notFired
		
		/** \brief True if the trigger has ever been fired. */
		everFired
		
		/** \brief True if the trigger has never been fired. */
		neverFired
	end
	
	
	
	/** \brief Trigger table. */
	var TSTriggerTable pTriggerTable
	
	/** \brief Trigger target name. */
	var StringID pName
	
	/** \brief Cached trigger target. */
	var TSTriggerTarget pTriggerTarget
	
	/** \brief Trigger test mode. */
	var TestMode pTestMode
	
	
	
	/** \brief Create condition. */
	public func new( StringID name, TestMode testMode ) \
	this( BaseGameApp.getApp().getTriggerTable(), name, testMode )
	end
	
	/** \brief Create condition. */
	public func new( TSTriggerTable triggerTable, StringID name, TestMode testMode )
		if triggerTable == null
			throw ENullPointer.new( "triggerTable" )
		end
		if name == null
			throw ENullPointer.new( "name" )
		end
		if testMode == null
			throw ENullPointer.new( "testMode" )
		end
		
		this.pTriggerTable = triggerTable
		this.pName = name
		this.pTestMode = testMode
	end
	
	
	
	/** \brief Trigger table. */
	public func TSTriggerTable getTriggerTable()
		return this.pTriggerTable
	end
	
	/** \brief Set trigger table. */
	protected func void setTriggerTable( TSTriggerTable triggerTable )
		this.pTriggerTable = triggerTable
		this.pTriggerTarget = null
	end
	
	/** \brief Name of the trigger to evaluate. */
	public func StringID getName()
		return this.pName
	end
	
	/** \brief Set name of the trigger to evaluate. */
	public func void setName( StringID name )
		this.pName = name
		this.pTriggerTarget = null
	end
	
	/** \brief Cached trigger target. */
	public func TSTriggerTarget getTriggerTarget()
		if this.pTriggerTarget == null
			this.pTriggerTarget = pTriggerTable.getOrAddNamed( this.pName )
		end
		return this.pTriggerTarget
	end
	
	/** \brief TestMode. */
	public func TestMode getTestMode()
		return this.pTestMode
	end
	
	/** \brief Set action. */
	public func void setTestMode( TestMode testMode )
		this.pTestMode = testMode
	end
	
	
	
	/** \brief Create condition testing the exact opposite. */
	public func BTConditionTrigger negated()
		var TestMode testMode = this.pTestMode
		
		select testMode
		case TestMode.fired
			testMode = TestMode.notFired
			
		case TestMode.notFired
			testMode = TestMode.fired
			
		case TestMode.everFired
			testMode = TestMode.neverFired
			
		case TestMode.neverFired
			testMode = TestMode.everFired
		end
		
		return BTConditionTrigger.new( this.pTriggerTable, this.pName, testMode )
	end
	
	
	
	/**
	 * \brief Evaluate condition.
	 * \param parameters Dictionary with parameters of type String key and String value.
	 *                   Do not change the content of the dictionary as it is shared.
	 */
	public func bool evaluateCondition( BTContext context, Dictionary parameters )
		select this.pTestMode
		case TestMode.fired
			return this.getTriggerTarget().getFired()
			
		case TestMode.notFired
			return not this.getTriggerTarget().getFired()
			
		case TestMode.everFired
			return this.getTriggerTarget().getHasFired()
			
		case TestMode.neverFired
			return not this.getTriggerTarget().getHasFired()
			
		else
			return false
		end
	end
end
