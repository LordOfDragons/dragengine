/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */


namespace Dragengine.BehaviorTreeSystem

pin Dragengine.Scenery
pin Dragengine.Utils



/**
 * \brief Base class for behavior tree rules using child rules.
 */
abstract class BTRuleList extends BTRule
	var Array pRules
	
	
	
	/** \brief Create behavior tree rule. */
	func new(String id) super(id)
		pRules = Array.new()
	end
	
	
	
	/** \brief Number of rules. */
	func int getRuleCount()
		return pRules.getCount()
	end
	
	/** \brief Get rule at index. */
	func BTRule getRuleAt(int index)
		return pRules.getAt(index) cast BTRule
	end
	
	/** \brief Index of rule or -1 if absent. */
	func int indexOfRule(BTRule rule)
		return pRules.indexOf(rule)
	end
	
	/** \brief Add rule. */
	func void addRule(BTRule rule)
		if rule == null or rule.getParent() != null
			throw EInvalidParam.new()
		end
		
		pRules.add(rule)
		rule.setParent(this)
	end
	
	/** \brief Remove rule. */
	func void removeRule(BTRule rule)
		pRules.remove(rule)
	end
	
	/** \brief Remove all rules. */
	func void removeAllRules()
		pRules.removeAll()
	end
	
	/** \brief Visit rules with block with parameter BTRule. */
	func void forEach(Block ablock)
		pRules.forEach(ablock)
	end
	
	/** \brief Find rule with block with parameter BTRule. */
	func BTRule find(Block ablock)
		return pRules.find(ablock) cast BTRule
	end
end
