/* 
 * Drag[en]gine DragonScript Script Module
 *
 * Copyright (C) 2020, Roland Pl√ºss (roland@rptd.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */


namespace Dragengine.BehaviorTreeSystem

pin Dragengine.Scenery
pin Dragengine.Utils



/**
 * \brief Base class for behavior tree rules using child rules.
 */
abstract class BTRuleList extends BTRule
	var Array pRules
	
	
	
	/** \brief Create behavior tree rule. */
	func new(String id) super(id)
		pRules = Array.new()
	end
	
	
	
	/** \brief Number of rules. */
	func int getRuleCount()
		return pRules.getCount()
	end
	
	/** \brief Get rule at index. */
	func BTRule getRuleAt(int index)
		return pRules.getAt(index) cast BTRule
	end
	
	/** \brief Index of rule or -1 if absent. */
	func int indexOfRule(BTRule rule)
		return pRules.indexOf(rule)
	end
	
	/** \brief Add rule. */
	func void addRule(BTRule rule)
		if rule == null or rule.getParent() != null
			throw EInvalidParam.new()
		end
		
		pRules.add(rule)
		rule.setParent(this)
	end
	
	/** \brief Remove rule. */
	func void removeRule(BTRule rule)
		pRules.remove(rule)
	end
	
	/** \brief Remove all rules. */
	func void removeAllRules()
		pRules.removeAll()
	end
	
	/** \brief Visit rules with block with parameter BTRule. */
	func void forEach(Block ablock)
		pRules.forEach(ablock)
	end
	
	/** \brief Find rule with block with parameter BTRule. */
	func BTRule find(Block ablock)
		return pRules.find(ablock) cast BTRule
	end
end
