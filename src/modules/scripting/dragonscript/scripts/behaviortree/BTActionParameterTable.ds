/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */


namespace Dragengine.BehaviorTreeSystem

pin Dragengine.Scenery
pin Dragengine.Utils



/**
 * \brief Behavior tree action updating parameter table entry.
 * 
 * This action always returns BTResult.success.
 */
class BTActionParameterTable implements BTAction
	/** \brief Update operator. */
	public enum Operator
		/** \brief Set value. */
		set
		
		/** \brief Add value. */
		add
		
		/** \brief Multiply value. */
		multiply
	end
	
	
	
	var ParameterTableEntry pEntry
	var float pDefaultValue
	var Operator pOperator
	var ParameterTableEntry pEntryUpdateValue
	var float pUpdateValue
	var String pParameterNameUpdateValue
	
	
	
	/** \brief Create action. */
	func new(ParameterTableEntry entry, float defaultValue, Operator operator, float updateValue) \
	this(entry, defaultValue, operator, null, updateValue, null)
	end
	
	/** \brief Create action. */
	func new(ParameterTableEntry entry, float defaultValue, Operator operator, \
	float updateValue, String parameterNameUpdateValue) \
	this(entry, defaultValue, operator, null, updateValue, parameterNameUpdateValue)
	end
	
	/** \brief Create action. */
	func new(ParameterTableEntry entry, float defaultValue, Operator operator, \
	ParameterTableEntry entryUpdateValue, float updateValue, String parameterNameUpdateValue)
		if entry == null
			throw EInvalidParam.new()
		end
		pEntry = entry
		pDefaultValue = defaultValue
		pOperator = operator
		pEntryUpdateValue = entryUpdateValue
		pUpdateValue = updateValue
		pParameterNameUpdateValue = parameterNameUpdateValue
	end
	
	
	
	/** \brief Parameter table entry to update. */
	func ParameterTableEntry getEntry()
		return pEntry
	end
	
	/** \brief Set parameter table entry to update. */
	func void setEntry(ParameterTableEntry entry)
		if entry == null
			throw EInvalidParam.new()
		end
		pEntry = entry
	end
	
	/** \brief Default value if entry is not null. */
	func float getDefaultValue()
		return pDefaultValue
	end
	
	/** \brief Set default value if entry is not null. */
	func void setDefaultValue(float defaultValue)
		pDefaultValue = defaultValue
	end
	
	/** \brief Update operator from eOperators. */
	func Operator getOperator()
		return pOperator
	end
	
	/** \brief Set update operator from eOperators. */
	func void setOperator(Operator operator)
		pOperator = operator
	end
	
	/** \brief Parameter table entry to use as update value. */
	func ParameterTableEntry getEntryUpdateValue()
		return pEntryUpdateValue
	end
	
	/** \brief Set parameter table entry to use as update value. */
	func void setEntryUpdateValue(ParameterTableEntry entry)
		pEntryUpdateValue = entry
	end
	
	/** \brief Default update value. */
	func float getUpdateValue()
		return pUpdateValue
	end
	
	/** \brief Set default update value. */
	func void setUpdateValue(float updateValue)
		pUpdateValue = updateValue
	end
	
	/** \brief Use named parameter as source of update value if not null. */
	func String getParameterNameUpdateValue()
		return pParameterNameUpdateValue
	end
	
	/** \brief Use named parameter as source of update value if not null. */
	func void setParameterNameUpdateValue(String name)
		pParameterNameUpdateValue = name
	end
	
	
	
	/**
	 * \brief Run action.
	 * \param parameters Dictionary with parameters of type String key and String value.
	 *                   Do not change the content of the dictionary as it is shared.
	 */
	func BTResult runAction(BTContext context, Dictionary parameters)
		var float updateValue = pUpdateValue
		if pEntryUpdateValue != null
			updateValue = pEntryUpdateValue.getValue(updateValue)
		end
		if pParameterNameUpdateValue != null
			var String value = parameters.getAt(pParameterNameUpdateValue, null) cast String
			if value != null
				updateValue = value.toFloat()
			end
		end
		
		select pOperator
		case Operator.set
			pEntry.setValue(updateValue)
			
		case Operator.add
			pEntry.setValue(pEntry.getValue(pDefaultValue) + updateValue)
			
		case Operator.multiply
			pEntry.setValue(pEntry.getValue(pDefaultValue) * updateValue)
		end
		
		return BTResult.success
	end
end
