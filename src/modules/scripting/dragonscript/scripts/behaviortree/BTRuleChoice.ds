/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */


namespace Dragengine.BehaviorTreeSystem

pin Dragengine.Scenery
pin Dragengine.Utils



/**
 * \brief Behavior tree choice rule.
 * 
 * Runs all actions in sequence. Returns BTResult.failure if all actions returned
 * BTResult.failure . If an action returns BTResult.success processing of the rule stops
 * and BTResult.success is returned. If no actions are present BTResult.failure is returned.
 * 
 * If looping is set to true the choice restarts at the beginning if the first action returns
 * BTResult.success . This allows to keep looping a choice until the first time all actions
 * return BTResult.failure .
 */
class BTRuleChoice extends BTRuleList
	var bool pLooping
	var bool pDoNotFail
	
	
	/** \brief Create behavior tree rule. */
	func new(String id) super(id)
	end
	
	
	
	/** \brief Looping. */
	func bool getLooping()
		return pLooping
	end
	
	/** \brief Set looping. */
	func void setLooping(bool looping)
		pLooping = looping
	end
	
	/**
	 * \brief Return success if all child actions fail.
	 * \version 1.19
	 */
	func bool getDoNotFail()
		return pDoNotFail
	end
	
	/**
	 * \brief Set to return success if all child actions fail.
	 * \version 1.19
	 */
	func void setDoNotFail(bool doNotFail)
		pDoNotFail = doNotFail
	end
	
	
	
	/**
	 * \brief Run action.
	 * 
	 * \returns Value from BTAction.eReturnValues .
	 */
	func BTResult run(BTContext context)
		var BTRule rule = context.getCurrentRule()
		
		if rule == this
			// first time the rule is run
			if getRuleCount() == 0 or not evaluateConditions(context)
				return pDoNotFail if BTResult.success else BTResult.failure  // context does another step
			end
			
			context.setCurrentRule(getRuleAt(0))
			return BTResult.success  // context does another step
			
		else
			// child rule has run. check last result
			var int index = indexOfRule(rule)
			
			select context.getLastResult()
			case BTResult.running
				return BTResult.running  // context stops stepping
				
			case BTResult.failure
				if index < getRuleCount() - 1
					// more actions to run
					if evaluateConditions(context)
						context.setCurrentRule(getRuleAt(index + 1))
						
					else
						// condition failed. pass up to parent
						context.setCurrentRule(this)
					end
					
				else
					// finished all actions with failure. pass up to parent
					context.setCurrentRule(this)
				end
				return pDoNotFail if BTResult.success else BTResult.failure  // context does another step
				
			case BTResult.success
				// choice finished. pass up to parent unless looping
				if pLooping
					if evaluateConditions(context)
						context.setCurrentRule(getRuleAt(0))
						
					else
						// condition failed. pass up to parent
						context.setCurrentRule(this)
						return pDoNotFail if BTResult.success else BTResult.failure
					end
					
				else
					context.setCurrentRule(this)
				end
				return BTResult.success  // context does another step
				
			else
				throw EInvalidParam.new()
			end
		end
	end
	
	
	
	/** String representation of object. */
	func String toString()
		return "BTRuleChoice(id='{}')".format(Array.newWith(getID()))
	end
end
