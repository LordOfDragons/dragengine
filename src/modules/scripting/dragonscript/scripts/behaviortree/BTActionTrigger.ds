/* 
 * Drag[en]gine DragonScript Script Module
 *
 * Copyright (C) 2020, Roland Pl√ºss (roland@rptd.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */


namespace Dragengine.BehaviorTreeSystem

pin Dragengine.Scenery
pin Dragengine.TriggerSystem
pin Dragengine.Utils



/**
 * \brief Behavior tree action manipulating trigger target.
 * 
 * This action always returns BTResult.success.
 */
class BTActionTrigger implements BTAction
	/** \brief Actions. */
	public enum Action
		/** \brief Fire the trigger. */
		fire
		
		/** \brief Reset the trigger. */
		reset
		
		/** \brief Fire and immediately reset the trigger. */
		pulse
		
		/** \brief Fully resets the trigger. */
		fullReset
	end
	
	
	
	/** \brief Trigger table. */
	var TSTriggerTable pTriggerTable
	
	/** \brief Name of trigger target to manipulate. */
	var StringID pName
	
	/** \brief Cached trigger target. */
	var TSTriggerTarget pTriggerTarget
	
	/** \brief Action to apply to trigger target. */
	var Action pAction
	
	
	
	/** \brief Create action using BaseGameApp trigger table. */
	public func new( StringID name, Action action ) \
	this( BaseGameApp.getApp().getTriggerTable(), name, action )
	end
	
	/** \brief Create action. */
	public func new( TSTriggerTable triggerTable, StringID name, Action action )
		if triggerTable == null
			throw ENullPointer.new( "triggerTable" )
		end
		if name == null
			throw ENullPointer.new( "name" )
		end
		if action == null
			throw ENullPointer.new( "action" )
		end
		
		this.pTriggerTable = triggerTable
		this.pName = name
		this.pAction = action
	end
	
	/** \brief Create copy of action. */
	public func new( BTActionTrigger action )
		this.pTriggerTable = action.pTriggerTable
		this.pName = action.pName
		this.pAction = action.pAction
	end
	
	
	
	/** \brief Trigger table. */
	public func TSTriggerTable getTriggerTable()
		return this.pTriggerTable
	end
	
	/** \brief Set trigger table. */
	protected func void setTriggerTable( TSTriggerTable triggerTable )
		this.pTriggerTable = triggerTable
		this.pTriggerTarget = null
	end
	
	/** \brief Name of the trigger to set. */
	public func StringID getName()
		return this.pName
	end
	
	/** \brief Set name of the trigger to set. */
	public func void setName( StringID name )
		this.pName = name
		this.pTriggerTarget = null
	end
	
	/** \brief Cached trigger target. */
	public func TSTriggerTarget getTriggerTarget()
		if this.pTriggerTarget == null
			this.pTriggerTarget = pTriggerTable.getOrAddNamed( this.pName )
		end
		return this.pTriggerTarget
	end
	
	/** \brief Action. */
	public func Action getAction()
		return this.pAction
	end
	
	/** \brief Set action. */
	public func void setAction( Action action )
		this.pAction = action
	end
	
	
	
	/**
	 * \brief Run action.
	 * \param parameters Dictionary with parameters of type String key and String value.
	 *                   Do not change the content of the dictionary as it is shared.
	 */
	public func BTResult runAction( BTContext context, Dictionary parameters )
		var TSTriggerTarget target = this.getTriggerTarget()
		
		select this.pAction
		case Action.fire
			target.fire()
			
		case Action.reset
			target.reset()
			
		case Action.pulse
			target.fire()
			target.reset()
			
		case Action.fullReset
			target.fullReset()
		end
		
		return BTResult.success
	end
end
