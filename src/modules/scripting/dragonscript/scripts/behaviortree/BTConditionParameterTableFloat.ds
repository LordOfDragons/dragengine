/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */


namespace Dragengine.BehaviorTreeSystem

pin Dragengine.Scenery
pin Dragengine.Utils



/**
 * \brief Behavior tree condition evaluating a floating point parameter table entry.
 * 
 * Compares the value of a parameter table entry against a static value or another parameter
 * table entry. A threshold is used for the compare operations defaulting to 0.0001.
 */
class BTConditionParameterTableFloat implements BTCondition
	/** \brief Compare operator. */
	public enum Operator
		/** \brief Entry is equal to value inside threshold. */
		equal
		
		/** \brief Entry is not equal to value inside threshold. */
		notEqual
		
		/** \brief Entry is less than value including threshold. */
		lessThan
		
		/** \brief Entry is less than or equal to value including threshold. */
		lessThanOrEqual
		
		/** \brief Entry is greater than value including threshold. */
		greaterThan
		
		/** \brief Entry is greater than or equal to value including threshold. */
		greaterThanOrEqual
	end
	
	
	
	var ParameterTableEntry pEntry
	var float pDefaultValue
	var Operator pOperator
	var float pThreshold
	var ParameterTableEntry pEntryCompareValue
	var float pCompareValue
	var String pParameterNameCompareValue
	
	
	
	/** \brief Create condition. */
	func new(ParameterTableEntry entry, float defaultValue, Operator operator, float compareValue) \
	this(entry, defaultValue, operator, null, compareValue, null)
	end
	
	/** \brief Create condition. */
	func new(ParameterTableEntry entry, float defaultValue, Operator operator, \
	float compareValue, String parameterNameCompareValue) \
	this(entry, defaultValue, operator, null, compareValue, parameterNameCompareValue)
	end
	
	/** \brief Create condition. */
	func new(ParameterTableEntry entry, float defaultValue, Operator operator, \
	ParameterTableEntry entryCompareValue, float compareValue, String parameterNameCompareValue)
		if entry == null
			throw EInvalidParam.new()
		end
		pEntry = entry
		pDefaultValue = defaultValue
		pOperator = operator
		pThreshold = 0.0001
		pEntryCompareValue = entryCompareValue
		pCompareValue = compareValue
		pParameterNameCompareValue = parameterNameCompareValue
	end
	
	
	
	/** \brief Parameter table entry to compare. */
	func ParameterTableEntry getEntry()
		return pEntry
	end
	
	/** \brief Set parameter table entry to compare. */
	func void setEntry(ParameterTableEntry entry)
		if entry == null
			throw EInvalidParam.new()
		end
		pEntry = entry
	end
	
	/** \brief Default value if entry to compare is not null. */
	func float getDefaultValue()
		return pDefaultValue
	end
	
	/** \brief Set default value if entry to compare is not null. */
	func void setDefaultValue(float defaultValue)
		pDefaultValue = defaultValue
	end
	
	/** \brief Compare operator from eOperators. */
	func Operator getOperator()
		return pOperator
	end
	
	/** \brief Set compare operator from eOperators. */
	func void setOperator(Operator operator)
		pOperator = operator
	end
	
	/** \brief Threshold value. */
	func float getThreshold()
		return pThreshold
	end
	
	/** \brief Set threshold value. */
	func void setThreshold(float threshold)
		pThreshold = threshold
	end
	
	/** \brief Parameter table entry to compare against. */
	func ParameterTableEntry getEntryCompareValue()
		return pEntryCompareValue
	end
	
	/** \brief Set parameter table entry to compare against. */
	func void setEntryCompareValue(ParameterTableEntry entry)
		pEntryCompareValue = entry
	end
	
	/** \brief Default compare against value. */
	func float getCompareValue()
		return pCompareValue
	end
	
	/** \brief Set default compare against value. */
	func void setCompareValue(float compareValue)
		pCompareValue = compareValue
	end
	
	/** \brief Use named parameter as source of compare value if not null. */
	func String getParameterNameCompareValue()
		return pParameterNameCompareValue
	end
	
	/** \brief Use named parameter as source of compare value if not null. */
	func void setParameterNameCompareValue(String name)
		pParameterNameCompareValue = name
	end
	
	
	
	/** \brief Create condition testing the exact opposite. */
	func BTConditionParameterTableFloat negated()
		var Operator operator = pOperator
		
		select operator
		case Operator.equal
			operator = Operator.notEqual
			
		case Operator.notEqual
			operator = Operator.equal
			
		case Operator.lessThan
			operator = Operator.greaterThanOrEqual
			
		case Operator.lessThanOrEqual
			operator = Operator.greaterThan
			
		case Operator.greaterThan
			operator = Operator.lessThanOrEqual
			
		case Operator.greaterThanOrEqual
			operator = Operator.lessThan
		end
		
		var BTConditionParameterTableFloat condition = BTConditionParameterTableFloat.new(\
			pEntry, pDefaultValue, operator, pEntryCompareValue, \
			pCompareValue, pParameterNameCompareValue)
		condition.pThreshold = pThreshold
		return condition
	end
	
	
	
	/**
	 * \brief Evaluate condition.
	 * \param parameters Dictionary with parameters of type String key and String value.
	 *                   Do not change the content of the dictionary as it is shared.
	 */
	func bool evaluateCondition(BTContext context, Dictionary parameters)
		var float compareValue = pCompareValue
		if pEntryCompareValue != null
			compareValue = pEntryCompareValue.getValue(compareValue)
		end
		if pParameterNameCompareValue != null
			var String value = parameters.getAt(pParameterNameCompareValue, null) cast String
			if value != null
				compareValue = value.toFloat()
			end
		end
		
		select pOperator
		case Operator.equal
			return DEMath.fabs(pEntry.getValue(pDefaultValue) - compareValue) <= pThreshold
			
		case Operator.notEqual
			return DEMath.fabs(pEntry.getValue(pDefaultValue) - compareValue) > pThreshold
			
		case Operator.lessThan
			return pEntry.getValue(pDefaultValue) < compareValue - pThreshold
			
		case Operator.lessThanOrEqual
			return pEntry.getValue(pDefaultValue) <= compareValue + pThreshold
			
		case Operator.greaterThan
			return pEntry.getValue(pDefaultValue) > compareValue + pThreshold
			
		case Operator.greaterThanOrEqual
			return pEntry.getValue(pDefaultValue) >= compareValue - pThreshold
			
		else
			return false
		end
	end
end
