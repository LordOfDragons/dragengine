/* 
 * Drag[en]gine DragonScript Script Module
 *
 * Copyright (C) 2020, Roland Pl√ºss (roland@rptd.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */


namespace Dragengine.BehaviorTreeSystem

pin Dragengine.Scenery
pin Dragengine.Utils



/**
 * \brief Behavior tree action sending a global event.
 * 
 * This action always returns BTResult.success.
 */
class BTActionSendGlobalEvent implements BTAction
	var GlobalEvents pGlobalEvents
	var String pEvent
	var Object pSource
	var Object pData
	
	
	
	/** \brief Create action using BaseGameApp global events. */
	func new(String event) this(BaseGameApp.getApp().getGlobalEvents(), event)
	end
	
	/** \brief Create action using BaseGameApp global events. */
	func new(String event, Object source, Object data) this(\
	BaseGameApp.getApp().getGlobalEvents(), event, source, data)
	end
	
	/** \brief Create action. */
	func new(GlobalEvents globalEvents, String event) this(globalEvents, event, null, null)
	end
	
	/** \brief Create action. */
	func new(GlobalEvents globalEvents, String event, Object source, Object data)
		if globalEvents == null
			throw ENullPointer.new("globalEvents")
		end
		if event == null
			throw ENullPointer.new("event")
		end
		
		pGlobalEvents = globalEvents
		pEvent = event
		pSource = source
		pData = data
	end
	
	
	
	/** \brief Global event instance to send event to. */
	func GlobalEvents getGlobalEvents()
		return pGlobalEvents
	end
	
	/** \brief Set global event instance to send event to. */
	func void setGlobalEvents(GlobalEvents globalEvents)
		if globalEvents == null
			throw ENullPointer.new()
		end
		pGlobalEvents = globalEvents
	end
	
	/** \brief Event to send. */
	func String getEvent()
		return pEvent
	end
	
	/** \brief Set event to send. */
	func void setEvent(String event)
		if event == null
			throw ENullPointer.new()
		end
		pEvent = event
	end
	
	/** \brief Optional source of event. */
	func Object getSource()
		return pSource
	end
	
	/** \brief Set optional source of event. */
	func void setSource(Object source)
		pSource = source
	end
	
	/** \brief Optional parameter to send with event. */
	func Object getData()
		return pData
	end
	
	/** \brief Set optional parameter to send with event. */
	func void setData(Object data)
		pData = data
	end
	
	
	
	/**
	 * \brief Run action.
	 * \param parameters Dictionary with parameters of type String key and String value.
	 *                   Do not change the content of the dictionary as it is shared.
	 */
	func BTResult runAction(BTContext context, Dictionary parameters)
		pGlobalEvents.sendEvent(pEvent, pSource, pData)
		return BTResult.success
	end
end
