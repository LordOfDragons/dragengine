/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */


namespace Dragengine.BehaviorTreeSystem

pin Dragengine.Scenery
pin Dragengine.Utils



/**
 * \brief Condition behavior tree action.
 * 
 * Convenience implementation of an action returning BTResult.success if the
 * evaluate() method returns \em true otherwise BTResult.failure is returned.
 */
abstract class BTConditionAction implements BTAction
	/** \brief Create action. */
	func new()
	end
	
	
	
	/**
	 * \brief Evaluate condition.
	 * \param parameters Dictionary with parameters of type String key and String value.
	 *                   Do not change the content of the dictionary as it is shared.
	 */
	abstract func bool evaluate(BTContext context, Dictionary parameters)
	
	
	
	/**
	 * \brief Run action.
	 * \param parameters Dictionary with parameters of type String key and String value.
	 *                   Do not change the content of the dictionary as it is shared.
	 */
	func BTResult runAction(BTContext context, Dictionary parameters)
		if evaluate(context, parameters)
			return BTResult.success
			
		else
			return BTResult.failure
		end
	end
end
