/* 
 * Drag[en]gine DragonScript Script Module
 *
 * Copyright (C) 2020, Roland Pl√ºss (roland@rptd.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */


namespace Dragengine.BehaviorTreeSystem

pin Dragengine.Scenery
pin Dragengine.Utils



/**
 * \brief Behavior tree rule.
 * 
 * Rules defines the behavior of the behavior tree. They can call BTActions to do game specific
 * actions. Both rules and actions use the same return value.
 * 
 * Rules are assigned a unique identifier. This identifier can be saved to restore the
 * behavior tree state later on. Strings are used instead of a number to make the
 * behavior tree more portable across changing save state revisions.
 * 
 * Rules can be further befitted with conditions. The rule is only run if all conditions
 * evaluate to true. This allows to prevent rules from being run or to interrupt a running
 * rule. If the condition is false the rule is considered to return BTResult.failure .
 */
abstract class BTRule
	/** \brief Condition modes. */
	public enum ConditionMode
		/** \brief All conditions have to evaluate to true. */
		allTrue
		
		/** \brief At least one condition has to evaluate to true. */
		anyTrue
		
		/** \brief At least one condition has to evaluate to false. */
		anyFalse
		
		/** \brief All conditions have to evaluate to false. */
		allFalse
	end
	
	
	
	/** \brief Unique rule identifier or \em null. */
	var String pID
	
	/** \brief Parent rule or \em null if this is the root rule in a behavior tree. */
	var WeakReference pParent
	
	/** \brief Conditions as Array of String identifiers. */
	var Array pConditions
	
	/** \brief Resolved conditions as Array of BTCondition. */
	var Array pResolvedConditions
	
	/** \brief Condition mode from eConditionModes. */
	var ConditionMode pConditionMode
	
	/** \brief Parameters as Dictionary of type String key and String value. */
	var Dictionary pParameters
	
	
	
	/**
	 * \brief Create behavior tree rule.
	 * \param id Identifier or \em null.
	 * \throws EInvalidParam \em id is empty string.
	 */
	func new(String id)
		if id != null and id.empty()
			throw EInvalidParam.new()
		end
		
		pID = id
		pParent = WeakReference.new()
		pConditions = Array.new()
		pConditionMode = ConditionMode.allTrue
		pParameters = Dictionary.new()
	end
	
	
	
	/** \brief Unique rule identifier or \em null. */
	func String getID()
		return pID
	end
	
	/** \brief Parent rule or \em null if this is the root rule in a behavior tree. */
	func BTRule getParent()
		return pParent.get() cast BTRule
	end
	
	/** \brief Set parent rule or \em null if this is the root rule in a behavior tree. */
	func void setParent(BTRule rule)
		pParent.set(rule)
	end
	
	/**
	 * \brief Parameters as Dictionary of type String key and String value.
	 * \warning Do not change the content of the dictionary as it is shared.
	 */
	func Dictionary getParameters()
		return pParameters
	end
	
	
	
	/** \brief Number of conditions. */
	func int getConditionCount()
		return pConditions.getCount()
	end
	
	/** \brief Get condition at index. */
	func String getConditionAt(int index)
		return pConditions.getAt(index) cast String
	end
	
	/** \brief Index of condition or -1 if absent. */
	func int indexOfCondition(String condition)
		return pConditions.indexOf(condition)
	end
	
	/** \brief Add condition. */
	func void addCondition(String condition)
		if condition == null
			throw EInvalidParam.new()
		end
		pConditions.add(condition)
		pResolvedConditions = null
	end
	
	/** \brief Remove condition. */
	func void removeCondition(String condition)
		pConditions.remove(condition)
		pResolvedConditions = null
	end
	
	/** \brief Remove all conditions. */
	func void removeAllConditions()
		pConditions.removeAll()
		pResolvedConditions = null
	end
	
	/** \brief Visit conditions with block with parameter String. */
	func void forEachCondition(Block ablock)
		pConditions.forEach(ablock)
	end
	
	/** \brief Find condition with block with parameter String. */
	func String findCondition(Block ablock)
		return pConditions.find(ablock) cast String
	end
	
	/** \brief Condition mode from eConditionModes. */
	func ConditionMode getConditionMode()
		return pConditionMode
	end
	
	/** \brief Set condition mode from eConditionModes. */
	func void setConditionMode(ConditionMode mode)
		pConditionMode = mode
	end
	
	/**
	 * \brief Evaluate all conditions.
	 * 
	 * If no condition is present \em true is returned.
	 * 
	 * \param parameters Dictionary with parameters of type String key and String value.
	 *                   Do not change the content of the dictionary as it is shared.
	 */
	func bool evaluateConditions(BTContext context)
		if pResolvedConditions == null
			pResolvedConditions = pConditions.map(block String each
				return context.getCondition(each)
			end)
		end
		
		if pResolvedConditions.getCount() == 0
			return true
		end
		
		select pConditionMode
		case ConditionMode.allTrue
			return pResolvedConditions.find(block BTCondition each
				return each == null or not each.evaluateCondition(context, pParameters)
			end) == null
			
		case ConditionMode.anyTrue
			return pResolvedConditions.find(block BTCondition each
				return each != null and each.evaluateCondition(context, pParameters)
			end) != null
			
		case ConditionMode.anyFalse
			return pResolvedConditions.find(block BTCondition each
				return each == null or not each.evaluateCondition(context, pParameters)
			end) != null
			
		case ConditionMode.allFalse
			return pResolvedConditions.find(block BTCondition each
				return each != null and each.evaluateCondition(context, pParameters)
			end) == null
			
		else
			return false
		end
	end
	
	
	
	/**
	 * \brief Run rule.
	 * 
	 * \returns Value from BTAction.eReturnValues .
	 */
	abstract func BTResult run(BTContext context)
end
