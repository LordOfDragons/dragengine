/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */


namespace Dragengine.BehaviorTreeSystem

pin Dragengine.LoadSave
pin Dragengine.Utils
pin Dragengine.Scenery



/**
 * \brief Behavior tree context.
 * 
 * Used to run a behavior tree instance. The behavior tree itself is shared across contexts
 * while the individual state is stored in the context. Context has to provide the BTAction
 * instances for the behavior tree rules to call. Subclass the context to provide the
 * required data for your BTAction subclasses to work properly.
 * 
 * The context can be written to and restored from file readers. This class saves only the
 * current rule identifier. Subclass has to save its own states by overwriting readFromFile()
 * and writeToFile().
 * 
 * Since version 1.19 the behavior tree can be changed after creating the context. If you
 * change the behavior tree during runtime you have to make sure it is also set before
 * readFromFile() is called otherwise an exception can be thrown.
 */
class BTContext
	var BehaviorTree pBehaviorTree
	var Dictionary pConditions
	var Dictionary pActions
	var BTRule pCurrentRule
	var bool pActionFirstRun
	var BTResult pLastResult
	var Array pRunAwayList
	
	var Console pConsole
	var String pLoggingName
	var bool pLogSteps
	var bool pLogRuleChanges
	
	
	
	/** \brief Create behavior tree context. */
	func new(BehaviorTree behaviorTree)
		if behaviorTree == null
			throw EInvalidParam.new()
		end
		
		pBehaviorTree = behaviorTree
		pConditions = Dictionary.new()
		pActions = Dictionary.new()
		pCurrentRule = behaviorTree.getRootRule()
		pActionFirstRun = true
		pRunAwayList = Array.new(100, null)
		pLoggingName = "BehaviorTree"
		pLogSteps = false
		pLogRuleChanges = false
	end
	
	/**
	 * \brief Create copy of behavior tree context.
	 * 
	 * Actions are copied as shallow copy. If you need a deep set all actions anew. The state
	 * of the context is the same as without creating a copy.
	 */
	func new(BTContext context) this(context, context.pBehaviorTree)
	end
	
	/**
	 * \brief Create copy of behavior tree context but using a different behavior tree.
	 * 
	 * Actions are copied as shallow copy. If you need a deep set all actions anew. The state
	 * of the context is the same as without creating a copy.
	 * 
	 * This method is useful to use an initialized base context with a fallback behavior tree.
	 * Whenever a new context is required the base context is copied. This avoids the need
	 * to assign actions and conditions since they are copied from the base context.
	 */
	func new(BTContext context, BehaviorTree behaviorTree)
		if behaviorTree == null
			throw ENullPointer.new("behaviorTree")
		end
		
		pBehaviorTree = behaviorTree
		pConditions = Dictionary.new(context.pConditions)
		pActions = Dictionary.new(context.pActions)
		pCurrentRule = context.pBehaviorTree.getRootRule()
		pActionFirstRun = context.pActionFirstRun
		pRunAwayList = Array.new(context.pRunAwayList.getCount(), null)
		
		pConsole = context.pConsole
		pLoggingName = context.pLoggingName
		pLogSteps = context.pLogSteps
		pLogRuleChanges = context.pLogRuleChanges
	end
	
	
	
	/** \brief Behavior tree. */
	func BehaviorTree getBehaviorTree()
		return pBehaviorTree
	end
	
	/**
	 * \brief Set behavior tree and reset state.
	 * \version 1.19
	 * 
	 * Sets the behavior tree then calls reset(). If you change the behavior tree during
	 * runtime you have to make sure it is also set before readFromFile() is called
	 * otherwise an exception can be thrown.
	 */
	func void setBehaviorTree(BehaviorTree behaviorTree)
		if behaviorTree == null
			throw ENullPointer.new("behaviorTree")
		end
		
		pBehaviorTree = behaviorTree
		reset()
	end
	
	
	
	/** \brief Number of conditions. */
	func int getConditionCount()
		return pConditions.getCount()
	end
	
	/** \brief Condition for name or null if absent. */
	func BTCondition getCondition(String name)
		return pConditions.getAt(name, null) cast BTCondition
	end
	
	/** \brief Condition is present. */
	func bool hasCondition(String name)
		return pConditions.has(name)
	end
	
	/** \brief Visit conditions using block with parameters String (name and BTCondition (condition). */
	func void forEachCondition(Block ablock)
		pConditions.forEach(ablock)
	end
	
	/** \brief Set condition for name. */
	func void setCondition(String name, BTCondition condition)
		if name == null or condition == null
			throw EInvalidParam.new()
		end
		pConditions.setAt(name, condition)
	end
	
	/** \brief Set condition for name using block. */
	func void setCondition(String name, Block condition)
		if name == null
			throw EInvalidParam.new()
		end
		pConditions.setAt(name, BTBlockCondition.new(condition))
	end
	
	/** \brief Remove condition. */
	func void removeCondition(String name)
		pConditions.remove(name)
	end
	
	/** \brief Remove all conditions. */
	func void removeAllConditions()
		pConditions.removeAll()
	end
	
	
	
	/** \brief Number of actions. */
	func int getActionCount()
		return pActions.getCount()
	end
	
	/** \brief Action for name or null if absent. */
	func BTAction getAction(String name)
		return pActions.getAt(name, null) cast BTAction
	end
	
	/** \brief Action is present. */
	func bool hasAction(String name)
		return pActions.has(name)
	end
	
	/** \brief Visit actions using block with parameters String (name and BTAction (action). */
	func void forEachAction(Block ablock)
		pActions.forEach(ablock)
	end
	
	/** \brief Set action for name. */
	func void setAction(String name, BTAction action)
		if name == null or action == null
			throw EInvalidParam.new()
		end
		pActions.setAt(name, action)
	end
	
	/** \brief Set action for name using block. */
	func void setAction(String name, Block action)
		if name == null
			throw EInvalidParam.new()
		end
		pActions.setAt(name, BTBlockAction.new(action))
	end
	
	/** \brief Remove action. */
	func void removeAction(String name)
		pActions.remove(name)
	end
	
	/** \brief Remove all actions. */
	func void removeAllActions()
		pActions.removeAll()
	end
	
	
	
	/** \brief Current rule. */
	func BTRule getCurrentRule()
		return pCurrentRule
	end
	
	/**
	 * \brief Set current rule.
	 * 
	 * Sets action first run to true and calls onCurrentRuleChanged().
	 */
	func void setCurrentRule(BTRule rule)
		if rule == null
			throw EInvalidParam.new()
		end
		pCurrentRule = rule
		pActionFirstRun = true
		
		if pLogRuleChanges and pConsole != null
			pConsole.addMessage(pLoggingName + ": Rule changed to " + rule)
		end
		
		onCurrentRuleChanged()
	end
	
	/**
	 * \brief Set current rule by identifier.
	 * 
	 * Sets action first run to true and calls onCurrentRuleChanged().
	 * 
	 * \throws EInvalidParam Rule with identifier not found.
	 */
	func void setCurrentRuleByID(String id)
		setCurrentRule(pBehaviorTree.getRuleWithID(id))
	end
	
	/**
	 * \brief Action runs for the first time after the current rule changed.
	 * 
	 * After calling setCurrentRule() this flag is set to true. Whenever an action is run
	 * this flag is set to false. This allows actions to know if they are run for the
	 * first time after the current rule changed. This allows actions to do some setting
	 * up tasks the first time they run and check back on this state as long as they run.
	 */
	func bool getActionFirstRun()
		return pActionFirstRun
	end
	
	/**
	 * \brief Set action runs for the first time after the current rule changed.
	 * 
	 * To be called only by BTRuleAction.run().
	 */
	func void setActionFirstRun(bool firstRun)
		pActionFirstRun = firstRun
	end
	
	/** \brief Last result. */
	func BTResult getLastResult()
		return pLastResult
	end
	
	/** \brief Run away limit. */
	func int getRunAwayLimit()
		return pRunAwayList.getCount()
	end
	
	/** \brief Set run away limit. */
	func void setRunAwayLimit(int limit)
		if limit < 1
			throw EInvalidParam.new()
		end
		pRunAwayList = Array.new(limit, null)
	end
	
	
	
	/** \brief Console or \em null if not wishing to log anything. */
	func Console getConsole()
		return pConsole
	end
	
	/** \brief Set console or \em null if not wishing to log anything. */
	func void setConsole(Console console)
		pConsole = console
	end
	
	/** \brief Logging name to tell apart logs. */
	func String getLoggingName()
		return pLoggingName
	end
	
	/** \brief Set logging name to tell apart logs. */
	func void setLoggingName(String name)
		if name == null
			throw EInvalidParam.new()
		end
		pLoggingName = name
	end
	
	/** \brief Log behavior tree steps. */
	func bool getLogSteps()
		return pLogSteps
	end
	
	/** \brief Set log behavior tree steps. */
	func void setLogSteps(bool logSteps)
		pLogSteps = logSteps
	end
	
	/** \brief Log behavior tree rule changes. */
	func bool getLogRuleChanges()
		return pLogRuleChanges
	end
	
	/** \brief Set log behavior tree rule changes. */
	func void setLogRuleChanges(bool logRuleChanges)
		pLogRuleChanges = logRuleChanges
	end
	
	
	
	/**
	 * \brief Step behavior tree.
	 * 
	 * Multiple actions can run before this method returns.
	 * 
	 * \throws BTRunAwayException Run-away condition detected.
	 * \returns \em true if tree continues running or \em false if root rule
	 *          returned BTResult.failure .
	 */
	func bool stepBehaviorTree()
		var int runAwayLimit = pRunAwayList.getCount()
		var int stepCount = 0
		var BTRule rule
		
		if pLogSteps and pConsole != null
			pConsole.addMessage(pLoggingName + ": Step Behavior Tree")
		end
		
		while pCurrentRule != null
			// run rule
			rule = pCurrentRule
			pRunAwayList.setAt(stepCount++, rule)
			pLastResult = rule.run(this)
			
			if pLogSteps and pConsole != null
				pConsole.addMessage(pLoggingName + ": " + stepCount\
					+ ") Run " + rule + " = " + pLastResult)
			end
			
			if pLastResult == BTResult.running
				return true
			end
			
			if stepCount == runAwayLimit
				var BTRunAwayException exception = BTRunAwayException.new(pRunAwayList)
				if pConsole != null
					pConsole.addMessage(pLoggingName + ": " \
						+ exception.getReason() + "\n" + exception.getRunAwayBacktrace())
				end
				throw exception
			end
			
			// return to parent rule if required
			while pCurrentRule == rule
				rule = rule.getParent()
				if rule == null
					if pLastResult == BTResult.failure
						if pLogSteps and pConsole != null
							pConsole.addMessage(pLoggingName + ": Behavior Tree Failed")
						end
						return false
						
					else
						// returning both success or running is valid to end this step
						return true
					end
				end
				
				pRunAwayList.setAt(stepCount++, rule)
				pLastResult = rule.run(this)
				
				if pLogSteps and pConsole != null
					pConsole.addMessage(pLoggingName + ": " + stepCount\
						+ ") Parent " + rule + "' = " + pLastResult)
				end
				
				if pLastResult == BTResult.running
					return true
				end
				
				if stepCount == runAwayLimit
					var BTRunAwayException exception = BTRunAwayException.new(pRunAwayList)
					if pConsole != null
						pConsole.addMessage(pLoggingName + ": "\
							+ exception.getReason() + "\n" + exception.getRunAwayBacktrace())
					end
					throw exception
				end
			end
		end
		
		if pLogSteps and pConsole != null
			pConsole.addMessage(pLoggingName + ": Behavior Tree Failed")
		end
		return false
	end
	
	/**
	 * \brief Reset to initial state.
	 * 
	 * Sets the behavior tree root rule as current rule.
	 */
	func void reset()
		setCurrentRule(pBehaviorTree.getRootRule())
		pLastResult = BTResult.running
	end
	
	
	
	/**
	 * \brief Hook method called if setCurrentRule() is called.
	 * 
	 * Allows subclasses to react to current rule changes. This might be required for
	 * certain BTAction to reset states if rules change.
	 */
	protected func void onCurrentRuleChanged()
	end
	
	
	
	/** \brief Read state from file. */
	func void readFromFile(PersistencyEnvironment env, FileReader reader)
		select reader.readByte() // version
		case 0
			var PersistencyFlags flags = PersistencyFlags.new(2, reader)
			pActionFirstRun = flags.getAt(1)
			
			if flags.getAt(0)
				pCurrentRule = pBehaviorTree.getRuleWithID(reader.readString8())
			end
			
		else
			throw EInvalidParam.new("unsupported version")
		end
	end
	
	/** \brief Write state to file. */
	func void writeToFile(PersistencyEnvironment env, FileWriter writer)
		writer.writeByte(0) // version
		
		var PersistencyFlags flags = PersistencyFlags.new(2)
		flags.setAt(0, pCurrentRule != null)
		flags.setAt(1, pActionFirstRun)
		flags.writeToFile(writer)
		
		if pCurrentRule != null
			writer.writeString8(pCurrentRule.getID())
		end
	end
end
