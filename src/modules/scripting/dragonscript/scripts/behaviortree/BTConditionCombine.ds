/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */


namespace Dragengine.BehaviorTreeSystem

pin Dragengine.Scenery
pin Dragengine.Utils



/**
 * \brief Behavior tree condition combinding one or more conditions.
 * 
 * Useful to create a complex condition out of group of simple conditions.
 * The conditions are stored as identifiers so they can be reused.
 */
class BTConditionCombine implements BTCondition
	/** \brief Combine modes. */
	public enum Mode
		/** \brief All conditions have to evaluate to true. */
		allTrue
		
		/** \brief At least one condition has to evaluate to true. */
		anyTrue
		
		/** \brief At least one condition has to evaluate to false. */
		anyFalse
		
		/** \brief All conditions have to evaluate to false. */
		allFalse
	end
	
	
	
	var Array pConditions
	var Mode pMode
	
	
	
	/** \brief Create condition. */
	func new(Mode mode)
		pConditions = Array.new()
		pMode = mode
	end
	
	/** \brief Create condition using two conditions. */
	func new(Mode mode, String condition1, String condition2)
		if condition1 == null or condition2 == null
			throw EInvalidParam.new()
		end
		
		pMode = mode
		pConditions = Array.newWith(condition1, condition2)
	end
	
	/** \brief Create condition using three conditions. */
	func new(Mode mode, String condition1, String condition2, String condition3)
		if condition1 == null or condition2 == null or condition3 == null
			throw EInvalidParam.new()
		end
		
		pMode = mode
		pConditions = Array.newWith(condition1, condition2, condition3)
	end
	
	/** \brief Create condition using four conditions. */
	func new(Mode mode, String condition1, String condition2, String condition3, String condition4)
		if condition1 == null or condition2 == null or condition3 == null or condition4 == null
			throw EInvalidParam.new()
		end
		
		pMode = mode
		pConditions = Array.newWith(condition1, condition2, condition3, condition4)
	end
	
	
	
	/** \brief Number of conditions. */
	func int getConditionCount()
		return pConditions.getCount()
	end
	
	/** \brief Get condition at index. */
	func String getConditionAt(int index)
		return pConditions.getAt(index) cast String
	end
	
	/** \brief Index of condition or -1 if absent. */
	func int indexOfCondition(String condition)
		return pConditions.indexOf(condition)
	end
	
	/** \brief Add condition. */
	func void addCondition(String condition)
		if condition == null
			throw EInvalidParam.new()
		end
		pConditions.add(condition)
	end
	
	/** \brief Remove condition. */
	func void removeCondition(String condition)
		pConditions.remove(condition)
	end
	
	/** \brief Remove all conditions. */
	func void removeAllConditions()
		pConditions.removeAll()
	end
	
	/** \brief Visit conditions with block with parameter String. */
	func void forEachCondition(Block ablock)
		pConditions.forEach(ablock)
	end
	
	/** \brief Find condition with block with parameter String. */
	func String findCondition(Block ablock)
		return pConditions.find(ablock) cast String
	end
	
	/** \brief Combine mode from eCombineModes. */
	func Mode getMode()
		return pMode
	end
	
	/** \brief Set combine mode from eCombineModes. */
	func void setMode(Mode mode)
		pMode = mode
	end
	
	
	
	/**
	 * \brief Evaluate condition.
	 * \param parameters Dictionary with parameters of type String key and String value.
	 *                   Do not change the content of the dictionary as it is shared.
	 */
	func bool evaluateCondition(BTContext context, Dictionary parameters)
		if pConditions.getCount() == 0
			return true
		end
		
		select pMode
		case Mode.allTrue
			return pConditions.find(block String each
				var BTCondition condition = context.getCondition(each)
				return condition == null or not condition.evaluateCondition(context, parameters)
			end) == null
			
		case Mode.anyTrue
			return pConditions.find(block String each
				var BTCondition condition = context.getCondition(each)
				return condition != null and condition.evaluateCondition(context, parameters)
			end) != null
			
		case Mode.anyFalse
			return pConditions.find(block String each
				var BTCondition condition = context.getCondition(each)
				return condition == null or not condition.evaluateCondition(context, parameters)
			end) != null
			
		case Mode.allFalse
			return pConditions.find(block String each
				var BTCondition condition = context.getCondition(each)
				return condition != null and condition.evaluateCondition(context, parameters)
			end) == null
			
		else
			return false
		end
	end
end
