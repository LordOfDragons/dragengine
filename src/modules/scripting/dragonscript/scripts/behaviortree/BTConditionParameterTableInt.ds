/* 
 * Drag[en]gine DragonScript Script Module
 *
 * Copyright (C) 2020, Roland Pl√ºss (roland@rptd.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */


namespace Dragengine.BehaviorTreeSystem

pin Dragengine.Scenery
pin Dragengine.Utils



/**
 * \brief Behavior tree condition evaluating an integer parameter table entry.
 * 
 * Compares the value of a parameter table entry against a static value or another parameter
 * table entry.
 */
class BTConditionParameterTableInt implements BTCondition
	/** \brief Compare operator. */
	public enum Operator
		/** \brief Entry is equal to value. */
		equal
		
		/** \brief Entry is not equal to value. */
		notEqual
		
		/** \brief Entry is less than value. */
		lessThan
		
		/** \brief Entry is less than or equal to value. */
		lessThanOrEqual
		
		/** \brief Entry is greater than value. */
		greaterThan
		
		/** \brief Entry is greater than or equal to value. */
		greaterThanOrEqual
	end
	
	
	
	var ParameterTableEntry pEntry
	var int pDefaultValue
	var Operator pOperator
	var ParameterTableEntry pEntryCompareValue
	var int pCompareValue
	var String pParameterNameCompareValue
	
	
	
	/** \brief Create condition. */
	func new(ParameterTableEntry entry, int defaultValue, Operator operator, int compareValue) \
	this(entry, defaultValue, operator, null, compareValue, null)
	end
	
	/** \brief Create condition. */
	func new(ParameterTableEntry entry, int defaultValue, Operator operator, \
	int compareValue, String parameterNameCompareValue) \
	this(entry, defaultValue, operator, null, compareValue, parameterNameCompareValue)
	end
	
	/** \brief Create condition. */
	func new(ParameterTableEntry entry, int defaultValue, Operator operator, \
	ParameterTableEntry entryCompareValue, int compareValue, String parameterNameCompareValue)
		if entry == null
			throw EInvalidParam.new()
		end
		pEntry = entry
		pDefaultValue = defaultValue
		pOperator = operator
		pEntryCompareValue = entryCompareValue
		pCompareValue = compareValue
		pParameterNameCompareValue = parameterNameCompareValue
	end
	
	
	
	/** \brief Parameter table entry to compare. */
	func ParameterTableEntry getEntry()
		return pEntry
	end
	
	/** \brief Set parameter table entry to compare. */
	func void setEntry(ParameterTableEntry entry)
		if entry == null
			throw EInvalidParam.new()
		end
		pEntry = entry
	end
	
	/** \brief Default value if entry to compare is not null. */
	func int getDefaultValue()
		return pDefaultValue
	end
	
	/** \brief Set default value if entry to compare is not null. */
	func void setDefaultValue(int defaultValue)
		pDefaultValue = defaultValue
	end
	
	/** \brief Compare operator from eOperators. */
	func Operator getOperator()
		return pOperator
	end
	
	/** \brief Set compare operator from eOperators. */
	func void setOperator(Operator operator)
		pOperator = operator
	end
	
	/** \brief Parameter table entry to compare against. */
	func ParameterTableEntry getEntryCompareValue()
		return pEntryCompareValue
	end
	
	/** \brief Set parameter table entry to compare against. */
	func void setEntryCompareValue(ParameterTableEntry entry)
		pEntryCompareValue = entry
	end
	
	/** \brief Default compare against value. */
	func int getCompareValue()
		return pCompareValue
	end
	
	/** \brief Set default compare against value. */
	func void setCompareValue(int compareValue)
		pCompareValue = compareValue
	end
	
	/** \brief Use named parameter as source of compare value if not null. */
	func String getParameterNameCompareValue()
		return pParameterNameCompareValue
	end
	
	/** \brief Use named parameter as source of compare value if not null. */
	func void setParameterNameCompareValue(String name)
		pParameterNameCompareValue = name
	end
	
	
	
	/** \brief Create condition testing the exact opposite. */
	func BTConditionParameterTableInt negated()
		var Operator operator = pOperator
		
		select operator
		case Operator.equal
			operator = Operator.notEqual
			
		case Operator.notEqual
			operator = Operator.equal
			
		case Operator.lessThan
			operator = Operator.greaterThanOrEqual
			
		case Operator.lessThanOrEqual
			operator = Operator.greaterThan
			
		case Operator.greaterThan
			operator = Operator.lessThanOrEqual
			
		case Operator.greaterThanOrEqual
			operator = Operator.lessThan
		end
		
		return BTConditionParameterTableInt.new(pEntry, pDefaultValue, \
			operator, pEntryCompareValue, pCompareValue, \
			pParameterNameCompareValue)
	end
	
	
	
	/**
	 * \brief Evaluate condition.
	 * \param parameters Dictionary with parameters of type String key and String value.
	 *                   Do not change the content of the dictionary as it is shared.
	 */
	func bool evaluateCondition(BTContext context, Dictionary parameters)
		var int compareValue = pCompareValue
		if pEntryCompareValue != null
			compareValue = pEntryCompareValue.getValue(compareValue)
		end
		if pParameterNameCompareValue != null
			var String value = parameters.getAt(pParameterNameCompareValue, null) cast String
			if value != null
				compareValue = value.toInt()
			end
		end
		
		select pOperator
		case Operator.equal
			return pEntry.getValue(pDefaultValue) == compareValue
			
		case Operator.notEqual
			return pEntry.getValue(pDefaultValue) != compareValue
			
		case Operator.lessThan
			return pEntry.getValue(pDefaultValue) < compareValue
			
		case Operator.lessThanOrEqual
			return pEntry.getValue(pDefaultValue) <= compareValue
			
		case Operator.greaterThan
			return pEntry.getValue(pDefaultValue) > compareValue
			
		case Operator.greaterThanOrEqual
			return pEntry.getValue(pDefaultValue) >= compareValue
			
		else
			return false
		end
	end
end
