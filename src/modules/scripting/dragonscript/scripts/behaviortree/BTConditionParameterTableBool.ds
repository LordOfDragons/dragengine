/* 
 * Drag[en]gine DragonScript Script Module
 *
 * Copyright (C) 2020, Roland Pl√ºss (roland@rptd.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */


namespace Dragengine.BehaviorTreeSystem

pin Dragengine.Scenery
pin Dragengine.Utils



/**
 * \brief Behavior tree condition evaluating a boolean parameter table entry.
 */
class BTConditionParameterTableBool implements BTCondition
	var ParameterTableEntry pEntry
	var bool pDefaultValue
	var ParameterTableEntry pEntryCompareValue
	var String pParameterNameCompareValue
	var bool pCompareValue
	var bool pEqual
	
	
	
	/** \brief Create condition. */
	func new(ParameterTableEntry entry, bool defaultValue, bool equal, bool compareValue) \
	this(entry, defaultValue, equal, null, compareValue, null)
	end
	
	/** \brief Create condition. */
	func new(ParameterTableEntry entry, bool defaultValue, bool equal, \
	bool compareValue, String parameterNameCompareValue) \
	this(entry, defaultValue, equal, null, compareValue, parameterNameCompareValue)
	end
	
	/** \brief Create condition. */
	func new(ParameterTableEntry entry, bool defaultValue, bool equal, \
	ParameterTableEntry entryCompareValue, bool compareValue, String parameterNameCompareValue)
		if entry == null
			throw EInvalidParam.new()
		end
		pEntry = entry
		pDefaultValue = defaultValue
		pEqual = equal
		pEntryCompareValue = entryCompareValue
		pCompareValue = compareValue
		pParameterNameCompareValue = parameterNameCompareValue
	end
	
	
	
	/** \brief Parameter table entry to compare. */
	func ParameterTableEntry getEntry()
		return pEntry
	end
	
	/** \brief Set parameter table entry to compare. */
	func void setEntry(ParameterTableEntry entry)
		if entry == null
			throw EInvalidParam.new()
		end
		pEntry = entry
	end
	
	/** \brief Default value if entry to compare is not null. */
	func bool getDefaultValue()
		return pDefaultValue
	end
	
	/** \brief Set default value if entry to compare is not null. */
	func void setDefaultValue(bool defaultValue)
		pDefaultValue = defaultValue
	end
	
	/** \brief Evaluates to true if values are equal. */
	func bool getEqual()
		return pEqual
	end
	
	/** \brief Set evaluates to true if values are equal. */
	func void setEqual(bool equal)
		pEqual = equal
	end
	
	/** \brief Parameter table entry to compare against. */
	func ParameterTableEntry getEntryCompareValue()
		return pEntryCompareValue
	end
	
	/** \brief Set parameter table entry to compare against. */
	func void setEntryCompareValue(ParameterTableEntry entry)
		pEntryCompareValue = entry
	end
	
	/** \brief Default compare against value. */
	func bool getCompareValue()
		return pCompareValue
	end
	
	/** \brief Set default compare against value. */
	func void setCompareValue(bool compareValue)
		pCompareValue = compareValue
	end
	
	/** \brief Use named parameter as source of compare value if not null. */
	func String getParameterNameCompareValue()
		return pParameterNameCompareValue
	end
	
	/** \brief Use named parameter as source of compare value if not null. */
	func void setParameterNameCompareValue(String name)
		pParameterNameCompareValue = name
	end
	
	
	
	/** \brief Create condition testing the exact opposite. */
	func BTConditionParameterTableBool negated()
		return BTConditionParameterTableBool.new(pEntry, pDefaultValue, \
			not pEqual, pEntryCompareValue, pCompareValue, \
			pParameterNameCompareValue)
	end
	
	
	
	/**
	 * \brief Evaluate condition.
	 * \param parameters Dictionary with parameters of type String key and String value.
	 *                   Do not change the content of the dictionary as it is shared.
	 */
	func bool evaluateCondition(BTContext context, Dictionary parameters)
		var bool compareValue = pCompareValue
		if pEntryCompareValue != null
			compareValue = pEntryCompareValue.getValue(compareValue)
		end
		if pParameterNameCompareValue != null
			var String value = parameters.getAt(pParameterNameCompareValue, null) cast String
			if value != null
				compareValue = value.equals("true")
			end
		end
		
		if pEqual
			return pEntry.getValue(pDefaultValue) == compareValue
			
		else
			return pEntry.getValue(pDefaultValue) != compareValue
		end
	end
end
