/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */


namespace Dragengine.BehaviorTreeSystem

pin Dragengine.Scenery
pin Dragengine.Utils



/**
 * \brief Behavior tree rule running an action.
 * 
 * This is the main working rule connecting game logic to the behavior tree. BTAction subclasses
 * are created by the game developer and added to the behavior tree. If the rule is run the
 * action is looked up and run. The return value of the action becomes the return value of the
 * rule.
 * 
 * For performance reasons the action is looked up once then stored in the rule. This is
 * correct behavior as long as the rules are not changed at run-time. If you need changing
 * actions at run-time implement a BTAction forwarding to the desired BTAction. This way the
 * cached action stays valid while the actual BTAction called inside can change. This is though
 * an elaborate situation. Usually actions are added to the behavior tree once and then never
 * change.
 */
class BTRuleAction extends BTRule
	var String pActionID
	var bool pDoNoFail
	
	
	
	/** \brief Create behavior tree rule. */
	func new(String id, String actionID) super(id)
		if actionID == null
			throw EInvalidParam.new()
		end
		pActionID = actionID
	end
	
	
	
	/** \brief Action identifier. */
	func String getActionID()
		return pActionID
	end
	
	/** \deprecated Removed without replacement. */
	func BTAction getAction()
		return null
	end
	
	/**
	 * \brief Return success if action fails.
	 * \version 1.26
	 */
	func bool getDoNotFail()
		return pDoNoFail
	end
	
	/**
	 * \brief Set to return success if action fails.
	 * \version 1.26
	 */
	func void setDoNotFail(bool doNotFail)
		pDoNoFail = doNotFail
	end
	
	
	
	/**
	 * \brief Run action.
	 * \returns Action return value if no rule condition evaluates to false and the named
	 *          action is found in the BTContext. Otherwise BTResult.failure is returned.
	 */
	func BTResult run(BTContext context)
		var BTAction action = context.getAction(pActionID)
		
		if action == null or not evaluateConditions(context)
			return pDoNoFail if BTResult.success else BTResult.failure
		end
		
		var BTResult result = action.runAction(context, getParameters())
		context.setActionFirstRun(false)
		return result
	end
	
	
	
	/** String representation of object. */
	func String toString()
		return "BTRuleAction(id='{}' action='{}')".format(Array.newWith(getID(), pActionID))
	end
end
