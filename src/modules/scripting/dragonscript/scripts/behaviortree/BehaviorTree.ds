/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */


namespace Dragengine.BehaviorTreeSystem

pin Dragengine.Scenery
pin Dragengine.Utils



/**
 * \brief Behavior tree.
 * 
 * Default behavior tree contains BTRuleFailure root rule with id "root".
 */
class BehaviorTree
	var BTRule pRootRule
	var Dictionary pRuleMap
	
	
	
	/** \brief Create behavior tree. */
	func new()
		pRootRule = BTRuleFailure.new("root")
		pRuleMap = Dictionary.new()
	end
	
	
	
	/** \brief Root rule. */
	func BTRule getRootRule()
		return pRootRule
	end
	
	/** \brief Set root rule. */
	func void setRootRule(BTRule rule)
		if rule == null
			throw EInvalidParam.new()
		end
		pRootRule = rule
	end
	
	/** \brief Registered rule with identifier is present. */
	func bool hasRuleWithID(String id)
		return pRuleMap.has(id)
	end
	
	/** \brief Registered rule with identifier or \em null if absent. */
	func BTRule getRuleWithID(String id)
		return pRuleMap.getAt(id, null) cast BTRule
	end
	
	/**
	 * \brief Register rule for retrieval by identifier.
	 * \throws EInvalidParam Rule has \em null identifier.
	 * \throws EInvalidParam Another rule with the same ID is already registered.
	 */
	func void registerRule(BTRule rule)
		if rule == null or rule.getID() == null or pRuleMap.has(rule.getID())
			throw EInvalidParam.new()
		end
		pRuleMap.setAt(rule.getID(), rule)
	end
end
