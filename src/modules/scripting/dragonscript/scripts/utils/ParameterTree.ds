/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */


namespace Dragengine.Utils

pin Dragengine.Gui
pin Dragengine.Scenery


/**
 * \brief Nested tree of parameters.
 * 
 * Parameters are retrieved using a path. The value of parameters can be primitive types like
 * string or floating point as well as some basic game engine classes like point or vectors
 * and arrays thereof. Parameter trees can be loaded from and written to XML files. This class
 * is best used to load parameters from XML files without the need to write specific XML loaders
 * and complex parameter storing classes. A typical use case is prototyping, storing small lists
 * of parameters or storing information with structure not known at build time.
 * 
 * This class itself does not enforce a specific path separator. The LoadParameterTree class
 * thought uses '/' as path separator. It is encouraged to use '/' as path separator.
 */
class ParameterTree
	var Dictionary pParameters
	
	
	
	/** \brief Create parameter tree. */
	func new()
		pParameters = Dictionary.new()
	end
	
	/**
	 * \brief Create copy of parameter tree.
	 * 
	 * Arrays and dictionaries are duplicated but no value inside since all values stored in the
	 * parameter tree are considered immutable. Parameter trees are duplicated.
	 */
	func new(ParameterTree tree)
		pParameters = tree.pParameters.map(block String key, Object value
			if value castable Array
				return Array.new(value cast Array)
				
			elif value castable Dictionary
				return Dictionary.new(value cast Dictionary)
				
			elif value castable ParameterTree
				return new(value cast ParameterTree)
				
			else
				return value
			end
		end)
	end
	
	
	
	/** \brief Count of parameters. */
	func int getCount()
		return pParameters.getCount()
	end
	
	/** \brief Parameter path list as Array of String. */
	func Array getPathList()
		return pParameters.getKeys()
	end
	
	/** \brief Parameter keys under path as Array of String using '/' separator. */
	func Array getKeys(String path)
		return getKeys(path, '/')
	end
	
	/** \brief Parameter keys under path as Array of String. */
	func Array getKeys(String path, byte separator)
		var int len = path.getLength()
		if len > 0 and path.getAt(-1) != separator
			path = path + separator
			len++
		end
		
		var Array keys = Array.new()
		var String key
		var int index
		
		pParameters.forEachKey(block String each
			if each.startsWith(path)
				index = each.find(separator, len)
				if index != -1
					key = each.substring(len, index)
				else
					key = each.substring(len)
				end
				if not keys.has(key)
					keys.add(key)
				end
			end
		end)
		
		return keys
	end
	
	/** \brief Parameter is present. */
	func bool has(String path)
		return pParameters.has(path)
	end
	
	/** \brief Remove value if set. */
	func void remove(String path)
		pParameters.removeIfExisting(path)
	end
	
	/** \brief Remove all values. */
	func void removeAll()
		pParameters.removeAll()
	end
	
	/** \brief Visit parameters with block with arguments path(String) and value(Object). */
	func void forEach(Block ablock)
		pParameters.forEach(ablock)
	end
	
	
	
	/** \brief Value of parameter or default value if absent. */
	func Object getAt(String path, Object default)
		return pParameters.getAt(path, default)
	end
	
	/** \brief String value of parameter or default value if absent. */
	func String getStringAt(String path, String default)
		return pParameters.getAt(path, default) cast String
	end
	
	/** \brief Floating point value of parameter or default value if absent. */
	func float getFloatAt(String path, float default)
		return pParameters.getAt(path, default) cast float
	end
	
	/** \brief Integer value of parameter or default value if absent. */
	func int getIntAt(String path, int default)
		return pParameters.getAt(path, default) cast int
	end
	
	/** \brief Boolean value of parameter or default value if absent. */
	func bool getBoolAt(String path, bool default)
		return pParameters.getAt(path, default) cast bool
	end
	
	/** \brief Point value of parameter or default value if absent. */
	func Point getPointAt(String path, Point default)
		return pParameters.getAt(path, default) cast Point
	end
	
	/** \brief Point3 value of parameter or default value if absent. */
	func Point3 getPoint3At(String path, Point3 default)
		return pParameters.getAt(path, default) cast Point3
	end
	
	/** \brief Vector2 value of parameter or default value if absent. */
	func Vector2 getVector2At(String path, Vector2 default)
		return pParameters.getAt(path, default) cast Vector2
	end
	
	/** \brief Vector value of parameter or default value if absent. */
	func Vector getVectorAt(String path, Vector default)
		return pParameters.getAt(path, default) cast Vector
	end
	
	/** \brief Color value of parameter or default value if absent. */
	func Color getColorAt(String path, Color default)
		return pParameters.getAt(path, default) cast Color
	end
	
	/** \brief BorderSize value of parameter or default value if absent. */
	func BorderSize getBorderSizeAt(String path, BorderSize default)
		return pParameters.getAt(path, default) cast BorderSize
	end
	
	/** \brief RectArea value of parameter or default value if absent. */
	func RectArea getRectAreaAt(String path, RectArea default)
		return pParameters.getAt(path, default) cast RectArea
	end
	
	/** \brief FloatRectArea value of parameter or default value if absent. */
	func FloatRectArea getAt(String path, FloatRectArea default)
		return pParameters.getAt(path, default) cast FloatRectArea
	end
	
	/** \brief Array value of parameter or default value if absent. */
	func Array getArrayAt(String path, Array default)
		return pParameters.getAt(path, default) cast Array
	end
	
	/**
	 * \brief Dictionary value of parameter or default value if absent.
	 * \version 1.26
	 */
	func Dictionary getDictionaryAt(String path, Dictionary default)
		return pParameters.getAt(path, default) cast Dictionary
	end
	
	/** \brief Tree value of parameter or default value if absent. */
	func ParameterTree getTreeAt(String path, ParameterTree default)
		return pParameters.getAt(path, default) cast ParameterTree
	end
	
	/**
	 * \brief Set value of parameter.
	 * 
	 * If the parameter tree is not saved all kind of objects can be stored in the parameter tree.
	 * 
	 * If the parameter tree is supposed to be saved it can only contain values of these types:
	 * - \ref String
	 * - \ref float
	 * - \ref int
	 * - \ref bool
	 * - \ref Point
	 * - \ref Point3
	 * - \ref Vector2
	 * - \ref Vector
	 * - \ref Color
	 * - \ref BorderSize
	 * - \ref RectArea
	 * - \ref FloatRectArea
	 * - \ref Array containing only values from this list
	 * - \ref Dictionary with \ref String key and containing only values from this list
	 * - \ref ParameterTree containing only values from this list
	 */
	func void setAt(String path, Object value)
		pParameters.setAt(path, value)
	end
	
	
	
	/** \brief Print parameters to console. */
	func void log(Console console, String name)
		console.addMessage("ParameterTree(" + name + ") " + pParameters.getCount() + " parameters")
		pParameters.forEach(block String path, Object value
			console.addMessage("- '" + path + "' = " + value)
		end)
	end
end
