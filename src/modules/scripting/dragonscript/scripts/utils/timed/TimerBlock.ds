/* 
 * Drag[en]gine DragonScript Script Module
 *
 * Copyright (C) 2020, Roland Pl√ºss (roland@rptd.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */


namespace Dragengine.Utils



/**
 * \brief Timer running block.
 */
class TimerBlock extends Timer
	private var Block pBlock
	
	
	
	/**
	 * \brief Create timer registered at default timer manager.
	 * 
	 * \param triggerTime Seconds to wait before triggering
	 * \param periodic Reschedule trigger once finished.
	 * \param blockFire Block to run. Block has no parameters.
	 */
	public func new(float triggerTime, bool periodic, Block blockFire) super(triggerTime, periodic)
		if blockFire == null
			throw ENullPointer.new("blockFire")
		end
		pBlock = blockFire
	end
	
	/**
	 * \brief Create timer registered at timer manager.
	 * 
	 * \param manager Timer Manager to register timer at
	 * \param triggerTime Seconds to wait before triggering
	 * \param periodic True if this timer is periodic
	 * \param blockFire Block to run. Block has no parameters.
	 */
	public func new(TimerManager manager, float triggerTime, bool periodic, Block blockFire) \
	super(manager, triggerTime, periodic)
		if blockFire == null
			throw ENullPointer.new("blockFire")
		end
		pBlock = blockFire
	end
	
	
	
	/**
	 * \brief Give up timer if registered with a timer manager.
	 * 
	 * Call to give up pending timer. Dropping the reference alone does not give up the timer.
	 */
	public func void giveUp()
		pBlock = null
		super.giveUp()
	end
	
	/** \brief Timer time elapsed. */
	public func void fire()
		if pBlock != null
			pBlock.run()
		end
	end
end
