/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */


namespace Dragengine.Utils



/**
 * \brief Timer running block.
 */
class TimerBlock extends Timer
	private var Block pBlock
	
	
	
	/**
	 * \brief Create timer registered at default timer manager.
	 * 
	 * \param triggerTime Seconds to wait before triggering
	 * \param periodic Reschedule trigger once finished.
	 * \param blockFire Block to run. Block has no parameters.
	 */
	public func new(float triggerTime, bool periodic, Block blockFire) super(triggerTime, periodic)
		if blockFire == null
			throw ENullPointer.new("blockFire")
		end
		pBlock = blockFire
	end
	
	/**
	 * \brief Create timer registered at timer manager.
	 * 
	 * \param manager Timer Manager to register timer at
	 * \param triggerTime Seconds to wait before triggering
	 * \param periodic True if this timer is periodic
	 * \param blockFire Block to run. Block has no parameters.
	 */
	public func new(TimerManager manager, float triggerTime, bool periodic, Block blockFire) \
	super(manager, triggerTime, periodic)
		if blockFire == null
			throw ENullPointer.new("blockFire")
		end
		pBlock = blockFire
	end
	
	
	
	/**
	 * \brief Give up timer if registered with a timer manager.
	 * 
	 * Call to give up pending timer. Dropping the reference alone does not give up the timer.
	 */
	public func void giveUp()
		pBlock = null
		super.giveUp()
	end
	
	/** \brief Timer time elapsed. */
	public func void fire()
		if pBlock != null
			pBlock.run()
		end
	end
end
