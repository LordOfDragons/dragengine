/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */


namespace Dragengine.Utils

pin Dragengine.Scenery



/**
 * \brief Manage frame update listeners.
 * 
 * Provides default frame update manager for simple frame update handling. Individual
 * instances of frame update managers can be created if needed.
 */
class FrameUpdateManager
	/** \brief Default frame update manager. */
	private static var FrameUpdateManager pDefaultManager = null
	
	/** \brief Registered frame update listeners */
	private var SafeArray pListeners
	
	
	
	/** \brief Create frame update manager. */
	public func new()
		this.pListeners = SafeArray.new()
	end
	
	
	
	/** \brief Register frame update listener. */
	public func void addListener( FrameUpdateListener listener )
		if listener == null
			throw EInvalidParam.new()
		end
		this.pListeners.add( listener )
	end
	
	/** \brief Unregister frame update listener. */
	public func void removeListener( FrameUpdateListener listener )
		this.pListeners.removeIfPresent( listener )
	end
	
	
	
	/** \brief Notify all frame update listeners. */
	public func void notifyAll()
		this.notifyAll( Engine.getElapsedTime() )
	end
	
	/** \brief Notify all frame update listeners. */
	public func void notifyAll( float elapsed )
		this.pListeners.forEach( block FrameUpdateListener each
			each.frameUpdate( elapsed )
		end )
	end
	
	
	
	/** \brief Default frame update manager. */
	public static func FrameUpdateManager getDefault()
		if pDefaultManager == null
			pDefaultManager = FrameUpdateManager.new()
		end
		return pDefaultManager
	end
	
	/** \brief Notify all frame update listeners of default frame update manager. */
	public static func void notifyAllDefault()
		getDefault().notifyAll()
	end
end
