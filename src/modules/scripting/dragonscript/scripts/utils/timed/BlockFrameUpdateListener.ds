/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */


namespace Dragengine.Utils



/**
 * \brief Frame update litener running block.
 */
class BlockFrameUpdateListener extends FrameUpdateListener
	/** \brief Block to run. */
	private var Block pBlock
	
	
	
	/** \brief Create frame udpate listener registered at default frame update manager. */
	public func new( Block blockUpdate )
		if blockUpdate == null
			throw EInvalidParam.new()
		end
		this.pBlock = blockUpdate
	end
	
	/** \brief Create frame update listener registered at frame update manager. */
	public func new( FrameUpdateManager manager, Block blockUpdate ) super( manager )
		if blockUpdate == null
			throw EInvalidParam.new()
		end
		this.pBlock = blockUpdate
	end
	
	
	
	/**
	 * \brief Do frame update.
	 * 
	 * \param elapsed Elapsed time since the last frame update. Equals Engine.getElapsedTime().
	 */
	public func void frameUpdate( float elapsed )
		this.pBlock.run( elapsed )
	end
end
