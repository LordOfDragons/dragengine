/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */


namespace Dragengine.Utils

pin Dragengine.Scenery



/**
 * \brief Manage timers.
 * 
 * Provides default timer manager for simple timer creation. Individual instances of
 * timer managers can be created to provide timer handling at different speeds if required.
 * 
 * \par 1.9
 * 
 * If you create a TimerManager besides the default TimerManager make sure to call
 * giveUpAllTimers() to avoid memory leaks.
 */
class TimerManager
	private static var TimerManager pDefaultManager = null
	private var SafeArray pTimers
	
	
	
	/** \brief Create timer manager. */
	public func new()
		pTimers = SafeArray.new()
	end
	
	
	
	/** \brief Register timer. */
	public func void addTimer(Timer timer)
		if timer == null
			throw ENullPointer.new("timer")
		end
		pTimers.add(timer)
	end
	
	/** \brief Unregister timer. */
	public func void removeTimer(Timer timer)
		pTimers.removeIfPresent(timer)
	end
	
	
	
	/**
	 * \brief Advance timers.
	 * 
	 * Timer implementation handles triggering. Ensures all timers are advanced once.
	 */
	public func void advance(float elapsed)
		if elapsed <= 0
			return
		end
		
		pTimers.forEach(block Timer each
			each.advance(elapsed)
		end)
	end
	
	/**
	 * \brief Give up all timers and remove them.
	 * \version 1.9
	 * 
	 * Use this call before exiting the game to cancel registered timers and properly
	 * cleaning them up to avoid memory leaks.
	 */
	public func void giveUpAllTimers()
		var SafeArray timers = pTimers
		pTimers = SafeArray.new()
		
		timers.forEach(block Timer each
			each.giveUp()
		end)
	end
	
	
	
	/** \brief Default timer manager. */
	public static func TimerManager getDefault()
		if pDefaultManager == null
			pDefaultManager = TimerManager.new()
		end
		return pDefaultManager
	end
	
	/**
	 * \brief Advance timers of default timer manager.
	 * 
	 * Timer implementation handles triggering. Ensures all timers are advanced once.
	 */
	public static func void advanceDefault()
		getDefault().advance(Engine.getElapsedTime())
	end
	
	/**
	 * \brief Advance timers of default timer manager.
	 * 
	 * Timer implementation handles triggering. Ensures all timers are advanced once.
	 */
	public static func void advanceDefault(float elapsed)
		getDefault().advance(elapsed)
	end
	
	/**
	 * \brief Give up all timers of default timer manager and remove them.
	 * \version 1.9
	 * 
	 * Use this call before exiting the game to cancel registered timers and properly
	 * cleaning them up to avoid memory leaks.
	 */
	public static func void giveUpAllTimersDefault()
		getDefault().giveUpAllTimers()
	end
end
