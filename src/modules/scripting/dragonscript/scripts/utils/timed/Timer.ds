/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */


namespace Dragengine.Utils



/**
 * \brief Timer triggered after a specific amount of time elapsed.
 * 
 * Can be set as a trigger once timer which will remove itself after having fired or a
 * trigger periodic timer which goes on triggering each time the given amount of time
 * elapsed. A timer always registers with a TimerManager object. If no such object is
 * specified during construction time the default timer manager is used which is a
 * static timer manager.
 */
abstract class Timer
	var TimerManager pTimerManager
	var float pTriggerTime
	var float pElapsedTime
	var bool pIsPeriodic
	
	
	
	/**
	 * \brief Create timer registered at default timer manager.
	 * 
	 * \param triggerTime Seconds to wait before triggering
	 * \param periodic Reschedule trigger once finished.
	 */
	func new(float triggerTime, bool periodic) this(TimerManager.getDefault(), triggerTime, periodic)
	end
	
	/**
	 * \brief Create timer registered at timer manager.
	 * 
	 * \param manager Timer Manager to register timer at
	 * \param triggerTime Seconds to wait before triggering
	 * \param periodic True if this timer is periodic
	 */
	func new(TimerManager manager, float triggerTime, bool periodic)
		if manager == null
			throw ENullPointer.new("manager")
		end
		
		pTimerManager = manager
		pTriggerTime = DEMath.max(triggerTime, 0.0)
		pElapsedTime = 0
		pIsPeriodic = periodic
		
		pTimerManager.addTimer(this)
	end
	
	
	
	/**
	 * \brief Give up timer if registered with a timer manager.
	 * 
	 * Call to give up pending timer. Dropping the reference alone does not give up the timer.
	 */
	func void giveUp()
		if pTimerManager == null
			return
		end
		
		pTimerManager.removeTimer(this)
		pTimerManager = null
	end
	
	
	
	/** \brief Timer manager the timer is registered at. */
	func TimerManager getTimerManager()
		return pTimerManager
	end
	
	/** \brief Seconds until timer elapsed. */
	func float getTriggerTime()
		return pTriggerTime
	end
	
	/** \brief Set seconds until timer elapses. */
	func void setTriggerTime(float triggerTime)
		pTriggerTime = DEMath.max(triggerTime, 0.0)
	end
	
	/** \brief Timer is periodic. */
	func bool getIsPeriodic()
		return pIsPeriodic
	end
	
	/** \brief Set if timer is periodic. */
	func void setIsPeriodic(bool periodic)
		pIsPeriodic = periodic
	end
	
	/** \brief Elapsed seconds. */
	func float getElapsedTime()
		return pElapsedTime
	end
	
	/** \brief Set elapsed seconds. */
	func void setElapsedTime(float elapsedTime)
		pElapsedTime = elapsedTime
	end
	
	/** \brief Remaining seconds until timer elapses. */
	func float getRemainingTime()
		return DEMath.max(pTriggerTime - pElapsedTime, 0.0)
	end
	
	/**
	 * \brief Timer elapsed.
	 * \version 1.21
	 * 
	 * Returns true if timer manager is null.
	 */
	func bool hasElapsed()
		return pTimerManager == null
	end
	
	
	
	/**
	 * \brief Advance timer.
	 * 
	 * If elapsed time reaches 0 fire() is called. If the timer is not periodic it is
	 * unregistered from timer manager. fire() is called after the timer has been removed.
	 * If timer is periodic the timer is rescheduled with the trigger time. This makes
	 * periodic timers not well suited for precise timing purpose at small update intervals.
	 * If you need this kind of precise timing use FrameUpdateListener and track elapsed
	 * time directly.
	 */
	func void advance(float elapsed)
		if elapsed <= 0 or pTimerManager == null
			return
		end
		
		pElapsedTime += elapsed
		if pElapsedTime < pTriggerTime
			return
		end
		
		if pIsPeriodic
			//pElapsedTime = DEMath.normalize(pElapsedTime, pTriggerTime)
			pElapsedTime = 0
			fire()
			
		else
			fire()
			giveUp()
		end
	end
	
	
	
	/** \brief Timer time elapsed. */
	abstract func void fire()
end
