/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */


namespace Dragengine.Utils



/**
 * \brief Console containing system and game messages.
 * 
 * Listeners are resposible to display the console output if required.
 */
class Console
	private var Array pMessages
	private var Array pListeners
	private var int pBufferSize
	
	
	
	/** \brief Create console with initial size. */
	public func new(int size)
		if size < 1
			throw EInvalidParam.new("size < 1")
		end
		
		pBufferSize = size
		pMessages = Array.new(size)
		pListeners = Array.new()
	end
	
	
	
	/** \brief Buffer size. */
	public func int getBufferSize()
		return pBufferSize
	end
	
	/**
	 * \brief Set buffer size.
	 * \version 1.7
	 * 
	 * If buffer size differs clears console then changes buffer size.
	 */
	public func void setBufferSize(int size)
		if size < 1
			throw EInvalidParam.new("size < 1")
		end
		
		clearConsole()
		
		pBufferSize = size
		pMessages.setSize(size)
	end
	
	/** \brief Number of messages. */
	public func int getMessageCount()
		return pMessages.getCount()
	end
	
	/** \brief Message at index. */
	public func ConsoleMessage getMessage(int index)
		return pMessages.getAt(index) cast ConsoleMessage
	end
	
	/** \brief Visit messages with block with parameter ConsoleMessage. */
	public func void forEachMessage(Block ablock)
		pMessages.forEach(ablock)
	end
	
	
	
	/** \brief Add listener. */
	public func void addListener(ConsoleListener listener)
		if listener == null
			throw EInvalidParam.new()
		end
		pListeners.add(listener)
	end
	
	/** \brief Remove listener. */
	public func void removeListener(ConsoleListener listener)
		pListeners.remove(listener)
	end
	
	
	
	/** \brief Add message. */
	public func void addMessage(ConsoleMessage message)
		if message == null
			throw EInvalidParam.new()
		end
		
		var bool removedTop = false
		if pMessages.getCount() == pBufferSize
			pMessages.remove(0)
			removedTop = true
		end
		
		pMessages.add(message)
		
		pListeners.forEach(block ConsoleListener each
			each.messageAdded(this, message, removedTop)
		end)
	end
	
	/** \brief Clear all messages. */
	public func void clearConsole()
		pMessages.removeAll()
		
		pListeners.forEach(block ConsoleListener each
			each.consoleCleared(this)
		end)
	end
	
	
	
	/** \brief Add message.
	 */
	public func void addMessage(String message)
		addMessage(ConsoleMessage.new(message))
	end
	
	/**
	 * \brief Add error message with exception trace.
	 */
	public func void addError(String message, Exception exception)
		if exception == null
			addMessage(ConsoleMessage.new(message + ": <null>"))
			return
		end
		
		var String text = "{}: {}".format(Array.newWith(message, exception.getReason()))
		var int i, count = exception.getTraceCount()
		
		for i = 0 to count
			text = text + "\n{}) {}.{}(): {}".format(Array.newWith(i + 1, \
				exception.getTraceClass(i), exception.getTraceFunction(i), \
				exception.getTraceLine(i)))
		end
		
		addMessage(ConsoleMessage.new(text))
	end
end
