/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */


namespace Dragengine.Utils

pin Dragengine.Scenery


/**
 * \brief List of anchored elements.
 * 
 * Allows registering Element instances using a unique name for example for use with
 * conversations where it is not convenient to locate elements using their UniqueID.
 */
class AnchoredElementList
	var Dictionary pElements
	
	
	
	/** \brief Create anchored element list. */
	func new()
		pElements = Dictionary.new()
	end
	
	/** \brief Dispose of list. */
	func void dispose()
		removeAll()
	end
	
	
	
	/** \brief Number of anchored elements. */
	func int getCount()
		return pElements.getCount()
	end
	
	/** \brief Anchored element is present. */
	func bool has(StringID id)
		return pElements.has(id)
	end
	
	/** \brief Anchored element with identifier or \em null if absent. */
	func Element getAt(StringID id)
		return pElements.getAt(id, null) cast Element
	end
	
	/** \brief Add anchored element. */
	func void add(StringID id, Element element)
		if id == null or pElements.has(id)
			throw EInvalidParam.new()
		end
		pElements.setAt(id, element)
	end
	
	/** \brief Remove anchored element. */
	func void remove(StringID id)
		pElements.remove(id)
	end
	
	/** \brief Remove all anchored elements. */
	func void removeAll()
		pElements.removeAll()
	end
	
	/** \brief Visit anchored elements with block with parameter Element. */
	func void forEach(Block ablock)
		pElements.forEachValue(ablock)
	end
	
	/**
	 * \brief Find anchored elements with block.
	 * 
	 * Block is called with arguments StringID (identifier) and Element. Block has to return
	 * true if the element has been found.
	 */
	func Element find(Block ablock)
		return pElements.find(ablock) cast Element
	end
end
