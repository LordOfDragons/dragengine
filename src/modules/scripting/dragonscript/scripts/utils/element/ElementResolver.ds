/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */


namespace Dragengine.Utils

pin Dragengine.Scenery


/**
 * \brief Resolve element links.
 * 
 * Helper class to resolve element identifiers read from file readers. While
 * loading elements from files the elements referenced by identifiers very
 * well can not be present yet in the game world since they show up in the
 * file at a later time. To support such links the UniqueID of an element is
 * saved. Once read it has to be resolved once all elements are present in
 * the game world. The best time for this is during a call to Element.enterFrame().
 * An instance of this class has to be placed in elements requiring resolving
 * behavior. To resolve an encountered element add a resolve request to the
 * instance of this class with a block to use. The following code example
 * shows how to use this class.
 * 
 * \code{.ds}
 * class MyElement extends Element
 *    var ElementResolver pElementResolver
 *    var Element pElementInHands
 *    
 *    func new()
 *       pElementResolver = ElementResolver.new()
 *    end
 *    
 *    func void readFromFile(FileReader reader)
 *       ...
 *       if hasElementInHands
 *          pElementResolver.add(UniqueID.readFromFile(reader), block Element resolved
 *             pElementInHands = resolved
 *          end)
 *       end
 *    end
 *    
 *    func addToGameWorld()
 *       // request enterFrame() to be called once. works fine for both creating or loading
 *       // elemente. in case of creating new elements there are simply no request to resolve
 *       getGameWorld().addEnterFrameOnce(this)
 *    end
 *    
 *    func void enterFrame()
 *       // resolve all elements. once finished all request are removed. if a resolve request
 *       // fails the block is called with a null element. it is the responsibility of the
 *       // block to handle this situation.
 *       pElementResolver.resolve(getGameWorld())
 *    end
 * end
 * \endcode
 * 
 * 
 * \par BehaviorsElement Behaviors
 * 
 * This class is also able to resolve BehaviorElement behaviors. During saving you have to
 * store both the BehaviorElement UniqueID as well as the behavior instance index. The
 * DefaultECBehavior class provides this information. While resolving the block is called
 * with BehaviorInstance as parameter. In general you will change this to parameter type
 * to match the behavior stored.
 * 
 * \code{.ds}
 * class MyElement extends Element
 *    var ElementResolver pElementResolver
 *    var MyBehavior.Instance pElementInHands
 *    
 *    func new()
 *       pElementResolver = ElementResolver.new()
 *    end
 *    
 *    func void readFromFile(FileReader reader)
 *       ...
 *       if hasElementInHands
 *          var UniqueID id = UniqueID.readFromFile(reader)
 *          var int index = reader.readUShort()
 *          pElementResolver.addBehavior(id, index, block MyBehavior.Instance behavior
 *             pElementInHands = behavior
 *          end)
 *       end
 *    end
 *    
 *    func addToGameWorld()
 *       // request enterFrame() to be called once. works fine for both creating or loading
 *       // elemente. in case of creating new elements there are simply no request to resolve
 *       getGameWorld().addEnterFrameOnce(this)
 *    end
 *    
 *    func void enterFrame()
 *       // resolve all elements. once finished all request are removed. if a resolve request
 *       // fails the block is called with a null element. it is the responsibility of the
 *       // block to handle this situation.
 *       pElementResolver.resolve(getGameWorld())
 *    end
 * end
 * \endcode
 * 
 * \par Allow Failure Support (version 1.24)
 * 
 * Resolving can be now done optionally by using \ref #addAllowFail() and
 * \ref #addBehaviorAllowFail() instead of \ref #add() and \ref #addBehavior().
 * This allows code to be resilient against resolving objects gone missing, for example due
 * to modding or edge cases. If used the block can be called with null if resolving failed
 * instead of throwing an exception.
 */
class ElementResolver
	/** \brief Resolve failure. */
	class ResolveException extends Exception
		var UniqueID pID
		var String pBehaviorId
		
		/** \brief Create exception. */
		func new(UniqueID id) super("Failed resolving " + id)
			pID = id
		end
		
		/**
		 * \brief Create exception.
		 * \version 1.26
		 */
		func new(UniqueID id, String behaviorId)\
		super("Failed resolving {} ({})".format(Array.newWith(pID, pBehaviorId)))
			pID = id
			pBehaviorId = behaviorId
		end
		
		/** \brief Unique ID failed to resolve. */
		func UniqueID getID()
			return pID
		end
		
		/**
		 * \brief Behavior ID failed to resolve or null.
		 * \version 1.26
		 */
		func String getBehaviorId()
			return pBehaviorId
		end
	end
	
	/** \brief Resolve request. */
	class Request
		var UniqueID pID
		var String pBehaviorId
		var Block pBlock
		var bool pAllowFail
		
		/**
		 * \brief Create request.
		 * \version 1.26
		 */
		func new(UniqueID id, String behaviorId, Block ablock, bool allowFail)
			if id == null
				throw ENullPointer.new("id")
			end
			if ablock == null
				throw ENullPointer.new("ablock")
			end
			
			pID = id
			pBehaviorId = behaviorId
			pBlock = ablock
			pAllowFail = allowFail
		end
		
		/** \brief Unique ID to resolve. */
		func UniqueID getID()
			return pID
		end
		
		/**
		 * \brief Behavior identifier to resolve or null.
		 * \version 1.26
		 */
		func String getBehaviorId()
			return pBehaviorId
		end
		
		/** \brief Block to call with resolved element. */
		func Block getBlock()
			return pBlock
		end
		
		/**
		 * \brief Resolving is allowed to fail.
		 * \version 1.24
		 * 
		 * If failed block is called with null instead of throwing an exception.
		 */
		func bool getAllowFail()
			return pAllowFail
		end
	end
	
	
	var Array pRequests
	
	
	/** \brief Create resolver. */
	func new()
		pRequests = Array.new()
	end
	
	
	
	/**
	 * \brief Add resolve request.
	 * 
	 * Add request to resolve element by identifier. Once resolved block is called with resolved
	 * element as parameter. If resolving fails \ref ResolveException is thrown.
	 */
	func void add(UniqueID id, Block ablock)
		pRequests.add(Request.new(id, null, ablock, false))
	end
	
	/**
	 * \brief Add resolve request.
	 * 
	 * Same as \ref #add(UniqueID,Block) but reads the UniqueID from file reader.
	 */
	func void add(FileReader reader, Block ablock)
		pRequests.add(Request.new(UniqueID.readFromFile(reader), null, ablock, false))
	end
	
	/**
	 * \brief Add resolve request which is allowed to fail.
	 * \version 1.24
	 * 
	 * Add request to resolve element by identifier. Once resolved block is called with resolved
	 * element as parameter. If resolving fails block is called with null as parameter.
	 */
	func void addAllowFail(UniqueID id, Block ablock)
		pRequests.add(Request.new(id, null, ablock, true))
	end
	
	/**
	 * \brief Add resolve request which is allowed to fail.
	 * \version 1.24
	 * 
	 * Same as \ref #addAllowFail(UniqueID,Block) but reads the UniqueID from file reader.
	 */
	func void addAllowFail(FileReader reader, Block ablock)
		pRequests.add(Request.new(UniqueID.readFromFile(reader), null, ablock, true))
	end
	
	/**
	 * \brief Write parameters to file suitable for add(UniqueID, Block).
	 * \note Elements with ID 0 will not be restored.
	 */
	static func void writeToFile(FileWriter writer, Element element)
		element.getID().writeToFile(writer)
	end
	
	/** \deprecated Use \ref #addBehavior(FileReader,Block). */
	func void addBehavior(UniqueID id, int behaviorInstanceIndex, Block ablock)
		pRequests.add(Request.new(id, "", ablock, false))
	end
	
	/**
	 * \brief Add resolve request for BehaviorInstance.
	 * 
	 * Same as \ref #addBehavior(UniqueID,int,Block) but reads the parameters from file reader.
	 * Reads first a UniqueID from file reader then a UShort as behavior index.
	 */
	func void addBehavior(FileReader reader, Block ablock)
		var UniqueID id = UniqueID.readFromFile(reader)
		pRequests.add(Request.new(id, reader.readString8(), ablock, false))
	end
	
	/** \deprecated Use \ref #addBehaviorAllowFail(FileReader,Block). */
	func void addBehaviorAllowFail(UniqueID id, int behaviorInstanceIndex, Block ablock)
		pRequests.add(Request.new(id, "", ablock, true))
	end
	
	/**
	 * \brief Add resolve request for BehaviorInstance which is allowed to fail.
	 * \version 1.24
	 * 
	 * Same as \ref #addBehaviorAllowFail(UniqueID,int,Block) but reads the parameters from file
	 * reader. Reads first a UniqueID from file reader then a UShort as behavior index.
	 */
	func void addBehaviorAllowFail(FileReader reader, Block ablock)
		var UniqueID id = UniqueID.readFromFile(reader)
		pRequests.add(Request.new(id, reader.readString8(), ablock, true))
	end
	
	/**
	 * \brief Write parameters to file suitable for addBehavior(UniqueID, int, Block).
	 * \note Elements with ID 0 will not be restored.
	 */
	static func void writeToFileBehavior(FileWriter writer, ECBehaviorInstance behaviorInstance)
		var BehaviorElement element = behaviorInstance.getElement()
		var ECBehavior behavior = (element.getClass() cast BehaviorElementClass).\
			getBehaviorAt(behaviorInstance.getInstanceIndex())
		
		element.getID().writeToFile(writer)
		writer.writeString8((behavior cast BehaviorCompatiblePersistency).getBehaviorID())
	end
	
	
	/**
	 * \brief Resolve elements.
	 * 
	 * Resolves all requests calling request blocks with the resolved element as parameter.
	 * Removes all requests after processing all of them successfully. If an element can not be
	 * resolved a \ref ResolveException is thrown and no request is removed.
	 */
	func void resolve(GameWorld gameWorld)
		if gameWorld == null
			throw EInvalidParam.new()
		end
		
		var ECBehavior behavior
		var String behaviorId
		var Element element
		var UniqueID id
		
		pRequests.forEach(block Request each
			id = each.getID()
			if id.zero()
				return null
			end
			
			element = gameWorld.getElementWithID(id)
			if element != null
				behaviorId = each.getBehaviorId()
				if behaviorId != null
					behavior = (element.getClass() cast BehaviorElementClass).getBehaviorWithId(behaviorId)
					if behavior == null
						if each.getAllowFail()
							each.getBlock().run(null)
							return null
							
						else
							throw ResolveException.new(id, behaviorId)
						end
					end
					
					each.getBlock().run((element cast BehaviorElement).getInstanceAt(behavior.getInstanceIndex()))
					
				else
					each.getBlock().run(element)
				end
				
			else
				if each.getAllowFail()
					each.getBlock().run(null)
					
				else
					throw ResolveException.new(id)
				end
			end
		end)
		
		pRequests.removeAll()
	end
	
	/**
	 * \brief Resolve element.
	 * 
	 * Resolve all requests matching element calling the request blocks with the element
	 * as parameter. Removes all matching requests after processing them. This method is
	 * useful to resolve elements outside a game world.
	 * 
	 * \note If element has 0 ID it will not be resolved.
	 */
	func void resolve(Element element)
		if element == null
			throw ENullPointer.new()
		end
		
		var UniqueID id = element.getID()
		if id.zero()
			return
		end
		
		var ECBehavior behavior
		var String behaviorId
		
		pRequests.removeIf(block Request each
			if not each.getID().equals(id)
				return false
			end
			
			behaviorId = each.getBehaviorId()
			if behaviorId != null
				behavior = (element.getClass() cast BehaviorElementClass).getBehaviorWithId(behaviorId)
				if behavior == null
					if each.getAllowFail()
						each.getBlock().run(null)
						return true
						
					else
						throw ResolveException.new(each.getID(), behaviorId)
					end
				end
				
				each.getBlock().run((element cast BehaviorElement).getInstanceAt(behavior.getInstanceIndex()))
				
			else
				each.getBlock().run(element)
			end
			
			return true
		end)
	end
	
	
	/** \brief Number of pending requests. */
	func int getCount()
		return pRequests.getCount()
	end
	
	/** \brief Pending request at index. */
	func Request getAt(int index)
		return pRequests.getAt(index) cast Request
	end
end
