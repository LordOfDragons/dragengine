/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */


namespace Dragengine.Utils

pin Dragengine.Scenery


/**
 * \brief Collect owners of hit colliders into an array without duplicates.
 * 
 * Collected owners can be any object type. Null owners are not collected.
 */
class CollectElementsListener implements ColliderListener
	/** \brief Array to add hit owners to. */
	private var Array pCollected
	
	
	
	/** \brief Create listener. */
	public func new()
	end
	
	/** \brief Create listener. */
	public func new( Array collected )
		this.pCollected = collected
	end
	
	
	
	/** \brief Array to add collected owners to. */
	public func Array getCollected()
		return this.pCollected
	end
	
	/** \brief Set array to add collected owners to. */
	public func void setCollected( Array collected )
		this.pCollected = collected
	end
	
	
	
	/** \brief Collision response. */
	public func void collisionResponse( Collider owner, CollisionInfo info )
		var Collider hitCollider = info.getCollider()
		if hitCollider == null
			return
		end
		
		var Object hitOwner = hitCollider.getOwner()
		if not this.pCollected.has( hitOwner )
			this.pCollected.add( hitOwner )
		end
	end
	
	/** \brief Collider can collide with another collider. */
	public func bool canHitCollider( Collider owner, Collider collider )
		return true
	end
	
	/** \brief Collider changed not used. */
	public func void colliderChanged( Collider owner )
	end
end
