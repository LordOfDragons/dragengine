/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

namespace Dragengine.Utils

pin Dragengine.Gui
pin Dragengine.Scenery



/**
 * \brief List of box areas.
 */
class BoxAreaList
	/** \brief List of box areas. */
	private var Array pList
	
	/** \brief Bounding box or \em null if not calculated. */
	private var BoxArea pBoundingBox
	
	
	
	/** \brief Create box area list. */
	public func new()
		this.pList = Array.new()
	end
	
	/** \brief Create copy of box area list. */
	public func new( BoxAreaList copy )
		this.pList = copy.pList
		this.pBoundingBox = copy.pBoundingBox
	end
	
	
	
	/** \brief Number of box areas. */
	public func int getCount()
		return this.pList.getCount()
	end
	
	/** \brief Box area at index. */
	public func BoxArea getAt( int index )
		return this.pList.getAt( index ) cast BoxArea
	end
	
	/** \brief Add box area. */
	public func void add( BoxArea boxArea )
		if boxArea == null
			throw EInvalidParam.new()
		end
		this.pList.add( boxArea )
		this.pBoundingBox = null
	end
	
	/** \brief Remove box area. */
	public func void remove( BoxArea boxArea )
		this.pList.remove( boxArea )
		this.pBoundingBox = null
	end
	
	/** \brief Remove all box areas. */
	public func void removeAll()
		this.pList.removeAll()
		this.pBoundingBox = null
	end
	
	/** \brief Visit box areas with block with parameter BoxArea. */
	public func void forEach( Block ablock )
		this.pList.forEach( ablock )
	end
	
	/** \brief Collect box areas with block with parameter BoxArea returning \em true to include box area. */
	public func void collect( Block ablock )
		this.pList.collect( ablock )
	end
	
	/** \brief One or more box areas contains point. */
	public func bool containsPoint( DVector point )
		return this.pList.find( block BoxArea each
			return each.containsPoint( point )
		end ) != null
	end
	
	/** \brief Calculate bounding box. */
	public func BoxArea getBoundingBox()
		if this.pBoundingBox != null
			return this.pBoundingBox
		end
		
		var int i, count = this.pList.getCount()
		var DVector min = DVector.new()
		var DVector max = DVector.new()
		var DVector point, hemin, hemax
		var DMatrix matrix
		var BoxArea area
		
		for i = 0 to count
			area = this.pList.getAt( i ) cast BoxArea
			matrix = DMatrix.newWorld( area.getPosition(), area.getOrientation() )
			hemax = DVector.new( area.getHalfExtends() )
			hemin = -hemax
			
			point = matrix * hemax.combine( hemin, false, false, false )
			min = min.smallest( point )
			max = max.largest( point )
			
			point = matrix * hemax.combine( hemin, true, false, false )
			min = min.smallest( point )
			max = max.largest( point )
			
			point = matrix * hemax.combine( hemin, false, true, false )
			min = min.smallest( point )
			max = max.largest( point )
			
			point = matrix * hemax.combine( hemin, true, true, false )
			min = min.smallest( point )
			max = max.largest( point )
			
			point = matrix * hemax.combine( hemin, false, false, true )
			min = min.smallest( point )
			max = max.largest( point )
			
			point = matrix * hemax.combine( hemin, true, false, true )
			min = min.smallest( point )
			max = max.largest( point )
			
			point = matrix * hemax.combine( hemin, false, true, true )
			min = min.smallest( point )
			max = max.largest( point )
			
			point = matrix * hemax.combine( hemin, true, true, true )
			min = min.smallest( point )
			max = max.largest( point )
		end
		
		this.pBoundingBox = BoxArea.new( ( min + max ) * 0.5, ( max - min ).toVector() * 0.5 )
		return this.pBoundingBox
	end
end
