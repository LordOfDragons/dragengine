/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */


namespace Dragengine.Utils



/**
 * \brief Ordered list of unique StringID.
 */
class StringIDList
	private var Array pIDs
	
	
	
	/** \brief Create list. */
	public func new()
		this.pIDs = Array.new()
	end
	
	/** \brief Create copy of list. */
	public func new( StringIDList list )
		this.pIDs = Array.new( list.pIDs )
	end
	
	
	
	/** \brief Number of IDs. */
	public func int getCount()
		return this.pIDs.getCount()
	end
	
	/** \brief ID at index. */
	public func StringID getAt( int index )
		return this.pIDs.getAt( index ) cast StringID
	end
	
	/** \brief ID is present. */
	public func bool has( StringID id )
		return this.pIDs.has( id )
	end
	
	/**
	 * \brief One or more IDs are present.
	 * 
	 * If list is empty returns false.
	 */
	public func bool hasAny( StringIDList list )
		return list.pIDs.find( block StringID each
			return this.pIDs.has( each )
		end ) != null
	end
	
	/**
	 * \brief All IDs are present.
	 * 
	 * If list is empty returns true.
	 */
	public func bool hasAll( StringIDList list )
		return list.pIDs.find( block StringID each
			return not this.pIDs.has( each )
		end ) == null
	end
	
	/**
	 * \brief One or more IDs are absent.
	 * 
	 * If list is empty returns false.
	 */
	public func bool hasNot( StringIDList list )
		return list.pIDs.find( block StringID each
			return not this.pIDs.has( each )
		end ) != null
	end
	
	/**
	 * \brief All IDs are absent.
	 * 
	 * If list is empty returns true.
	 */
	public func bool hasNone( StringIDList list )
		return list.pIDs.find( block StringID each
			return this.pIDs.has( each )
		end ) == null
	end
	
	/**
	 * \brief Add ID to list.
	 * \throws EInvalidParam ID is null.
	 * \throws EInvalidParam ID is present.
	 */
	public func void add( StringID id )
		if id == null or this.pIDs.has( id )
			throw EInvalidParam.new()
		end
		this.pIDs.add( id )
	end
	
	/**
	 * \brief Add ID to list if absent.
	 * \throws EInvalidParam ID is null.
	 */
	public func void addIfAbsent( StringID id )
		if id == null
			throw EInvalidParam.new()
		end
		if not this.pIDs.has( id )
			this.pIDs.add( id )
		end
	end
	
	/**
	 * \brief Add all IDs to list.
	 * \throws EInvalidParam One or more IDs are present.
	 */
	public func void addAll( StringIDList list )
		if this.hasAny( list )
			throw EInvalidParam.new()
		end
		list.pIDs.forEach( block StringID each
			this.pIDs.add( each )
		end )
	end
	
	/**
	 * \brief Add all absent IDs to list .
	 */
	public func void addAllIfAbsent( StringIDList list )
		list.pIDs.forEach( block StringID each
			if not this.pIDs.has( each )
				this.pIDs.add( each )
			end
		end )
	end
	
	/**
	 * \brief Remove ID.
	 * \throws EInvalidParam ID is absent.
	 */
	public func void remove( StringID id )
		this.pIDs.remove( id )
	end
	
	/** \brief Remove ID if present. */
	public func void removeIfPresent( StringID id )
		if this.pIDs.has( id )
			this.pIDs.remove( id )
		end
	end
	
	/** \brief Remove all IDs. */
	public func void removeAll()
		this.pIDs.removeAll()
	end
	
	/**
	 * \brief Remove all IDs from list.
	 * \throws EInvalidParam One or more IDs are absent.
	 */
	public func void removeAll( StringIDList list )
		if this.hasNot( list )
			throw EInvalidParam.new()
		end
		list.pIDs.forEach( block StringID each
			this.pIDs.remove( each )
		end )
	end
	
	/** \brief Remove present IDs from list. */
	public func void removeAllIfPresent( StringIDList list )
		list.pIDs.forEach( block StringID each
			if this.pIDs.has( each )
				this.pIDs.remove( each )
			end
		end )
	end
	
	/** \brief Visit IDs with block with parameter StringID. */
	public func void forEach( Block ablock )
		this.pIDs.forEach( ablock )
	end
	
	/**
	 * \brief Find ID with block.
	 * 
	 * Block has parameter StringID and returns \em true if ID is found. Returns null if
	 * no ID matches the block.
	 */
	public func StringID find( Block ablock )
		return this.pIDs.find( ablock ) cast StringID
	end
	
	/**
	 * \brief Collect IDs matching block.
	 * 
	 * Block has parameter StringID and returns \em true if ID matches.
	 */
	public func StringIDList collect( Block ablock )
		var StringIDList list
		list.pIDs = this.pIDs.collect( ablock )
		return list
	end
	
	
	
	
	/** \brief Lists are equal. */
	public func bool equals( Object object )
		return object castable StringIDList and this.pIDs.equals( ( object cast StringIDList ).pIDs )
	end
end
