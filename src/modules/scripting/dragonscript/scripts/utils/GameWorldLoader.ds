/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */


namespace Dragengine.Utils

pin Dragengine.LoadSave
pin Dragengine.Gui
pin Dragengine.Scenery
pin Dragengine.Preloading
pin Dragengine.Debugging


/**
 * \brief Load game worlds using a loading screen.
 * 
 * Helps loading game worlds without doing all the heavy lifting yourself.
 * 
 * The loading process starts by calling createLoadingWindow(). The default implementation
 * creates a WindowLoading, shows it on the BaseGameApp desktop and sets an input processor
 * forwarding input to the the desktop. If you are not using BaseGameApp reimplement the
 * method to fit your needs.
 * 
 * Then the world file is loaded using LoadWorld into a StubGameWorld. Subclasses can modify
 * the stubs if required by overwriting loadWorld() and modifying the stub after super call.
 * 
 * Then all element classes from a list of element classes are preloaded. Element class
 * properties are responsible to preload resources only once. Optionally only element classes
 * used by element stubs can be preloaded. Depending on he game structure this can be faster.
 * By default all element classes are loaded.
 * 
 * After all resources to preload have been determined the loadGameWorld() metho returns.
 * This class updates every frame update to show preloading progress in the loading window.
 * 
 * Once all resources are preloaded onLoadWorldFinished() will be called. Before this method is
 * called all preloading problems are reported using reportPreloadProblems(). Preload problems
 * are not considered errors. Exceptions thrown during preloading are logged and preloading
 * continues to not break preload tracking of element classes. If any exceptions have been
 * thrown onLoadWorldFailed() will be called instead.
 * 
 * Afterwards onPreloadingFinished() is called the loading window will be closed. Subclass is
 * only responsible to properly set up the game window and to take over input control.
 * 
 * For creating world decals a DecalBuilder is required. The class creates a DecalBuilder by
 * default and sets the CollisionFilter to have bit 0 enabled. Subclass has to change this to
 * fit their use case. A typical solution is to designate a bit to decals projecting so you
 * can choose for all elements if they can receive a decal or not. The decal build requires
 * an ElementVisitor to actually create decals. This is required since the DecalBuilder visits
 * the world along the projection box with this visitor. The default AddDecalVisitor set
 * visits only SimpleElement instances. Subclass can set an own AddDecalVisitor subclass to
 * add decal creation support to other element classes.
 * 
 * This class is designed as single use with new instances created for each loading process.
 * Only one GameWorldLoader should be active at once. If you need to run multiple instances
 * in parallel you have to carefully manage the loading windows (for example use hidden ones).
 * 
 * \par Version 1.8
 * 
 * Added default handling for loading world using persistency. This requires two additional
 * parameters to be set.
 * 
 * The setIDGenerator(MutableID) sets the ID Generator to use. This initializes the GameWorld
 * with the next object ID while loading and adds an ID Remapper entry to assign world objects
 * unique IDs starting with the next free ID.
 * 
 * The setPersistency(PersistencyEnvironment,FileReader) sets the persistency to load from.
 * If set loading is slightly different loading the world content and restoring persisted
 * states. Use this to load save states.
 */
class GameWorldLoader
	/** \brief Frame update listener. */
	private class FrameUpdater extends FrameUpdateListener
		/** \brief Game world loader. */
		var GameWorldLoader pGameWorldLoader
		
		/** \brief Create frame update listener. */
		func new(GameWorldLoader gameWorldLoader)
			pGameWorldLoader = gameWorldLoader
		end
		
		/** \brief Do frame update. */
		func void frameUpdate(float elapsed)
			pGameWorldLoader.updateLoading()
		end
	end
	
	
	
	var Console pConsole
	var Loaders pLoaders
	var ElementClassList pElementClassList
	var DecalBuilder pDecalBuilder
	var WindowLoading pWindowLoading
	var PreloadManager pPreloadManager
	var bool pIgnorePersistableElements
	var bool pEnableNetworking
	var StubGameWorld pStubWorld
	var bool pCleanUpStubWorld
	var String pPathWorld
	var FrameUpdater pFrameUpdater
	var MutableID pIDGenerator
	var PersistencyEnvironment pPersistEnvironment
	var FileReader pPersistencyReader
	
	var DebugVerifyStubProperties pDebugVerifyStubProperties
	
	
	
	/**
	 * \brief Create game world loader using BaseGameApp parameters.
	 * 
	 * Creates a DecalBuilder and an AddDecalVisitor.
	 */
	func new() this(BaseGameApp.getApp().getConsole(), BaseGameApp.getApp().getLoaders(),\
	BaseGameApp.getApp().getElementClassList(), BaseGameApp.getApp().getIDGenerator())
	end
	
	/**
	 * \brief Create game world loader.
	 * 
	 * Creates a DecalBuilder and an AddDecalVisitor.
	 */
	func new(Console console, Loaders loaders, ElementClassList elementClassList)\
	this(console, loaders, elementClassList, null)
	end
	
	/**
	 * \brief Create game world loader.
	 * \version 1.8
	 * 
	 * Creates a DecalBuilder and an AddDecalVisitor.
	 */
	func new(Console console, Loaders loaders, ElementClassList elementClassList, MutableID idGenerator)
		if console == null or loaders == null or elementClassList == null
			throw ENullPointer.new("console")
		end
		if loaders == null
			throw ENullPointer.new("loaders")
		end
		if elementClassList == null
			throw ENullPointer.new("elementClassList")
		end
		
		pConsole = console
		pLoaders = loaders
		pElementClassList = elementClassList
		pIDGenerator = idGenerator
		
		pDecalBuilder = DecalBuilder.new()
		pIgnorePersistableElements = false
		pEnableNetworking = false
		
		pCleanUpStubWorld = false
		
		pPreloadManager = PreloadManager.new()
	end
	
	/** \brief Dispose of game world loader to break reference loops. */
	func void dispose()
		stopFrameUpdater()
		setWindowLoading(null)
		
		if pDecalBuilder != null
			pDecalBuilder.dispose()
			pDecalBuilder = null
		end
		
		pPreloadManager = null
		pDebugVerifyStubProperties = null
	end
	
	
	
	/** \brief Console console. */
	func Console getConsole()
		return pConsole
	end
	
	/** \brief Loaders. */
	func Loaders getLoaders()
		return pLoaders
	end
	
	/** \brief Element classes list. */
	func ElementClassList getElementClassList()
		return pElementClassList
	end
	
	/** \brief Decal builder used for world decals. */
	func DecalBuilder getDecalBuilder()
		return pDecalBuilder
	end
	
	/**
	 * \brief Set decal builder used for world decals.
	 * 
	 * The old decal builder is disposed of if present.
	 */
	func void setDecalBuilder(DecalBuilder decalBuilder)
		if decalBuilder == pDecalBuilder
			return
		end
		
		if pDecalBuilder != null
			pDecalBuilder.dispose()
		end
		
		pDecalBuilder = decalBuilder
	end
	
	/** \brief Loading window window. */
	func WindowLoading getWindowLoading()
		return pWindowLoading
	end
	
	/** \brief Set loading window. */
	func void setWindowLoading(WindowLoading window)
		if window == pWindowLoading
			return
		end
		
		if pWindowLoading != null
			pWindowLoading.close()
		end
		
		pWindowLoading = window
	end
	
	/** \brief Preload manager. */
	func PreloadManager getPreloadManager()
		return pPreloadManager
	end
	
	/** \brief Ignore persistable elements. */
	func bool getIgnorePersistableElements()
		return pIgnorePersistableElements
	end
	
	/** \brief Set if persistable elements are ignored. */
	func void setIgnorePersistableElements(bool ignorePersistableElements)
		pIgnorePersistableElements = ignorePersistableElements
	end
	
	/** \brief Enable networking. */
	func bool getEnableNetworking()
		return pEnableNetworking
	end
	
	/** \brief Set if networking is enabled. */
	func void setEnableNetworking(bool enable)
		pEnableNetworking = enable
	end
	
	/** \brief Game world stub. */
	func StubGameWorld getStubWorld()
		return pStubWorld
	end
	
	/** \brief World file path. */
	func String getPathWorld()
		return pPathWorld
	end
	
	/** \brief Set world file path. */
	func void setPathWorld(String path)
		pPathWorld = path
	end
	
	/**
	 * \brief ID Generator or null.
	 * \version 1.8
	 */
	func MutableID getIDGenerator()
		return pIDGenerator
	end
	
	/**
	 * \brief Persistency environment or null.
	 * \version 1.8
	 */
	func PersistencyEnvironment getPersistencyEnvironment()
		return pPersistEnvironment
	end
	
	/**
	 * \brief Persistency reader or null.
	 * \version 1.8
	 */
	func FileReader getPersistencyReader()
		return pPersistencyReader
	end
	
	/**
	 * \brief Set persistency environment and reader.
	 * \version 1.8
	 * 
	 * Set both to non-null to enable loading game world using persisted state.
	 * 
	 * \throws EInvalidParam environment or reader is null but not both.
	 */
	func void setPersistency(PersistencyEnvironment environment, FileReader reader)
		if (environment == null) != (reader == null)
			throw EInvalidParam.new("environment or reader is null but not both")
		end
		
		pPersistEnvironment = environment
		pPersistencyReader = reader
	end
	
	
	
	/** \brief Debug verify stub properties while loading or null if not used. */
	func DebugVerifyStubProperties getDebugVerifyStubProperties()
		return pDebugVerifyStubProperties
	end
	
	/** \brief Set debug verify stub properties while loading or null if not used. */
	func void setDebugVerifyStubProperties(DebugVerifyStubProperties debug)
		pDebugVerifyStubProperties = debug
	end
	
	
	
	/**
	 * \brief Start loading game world.
	 * 
	 * Set up all required parameters before calling this method, in particular setPathWorld().
	 */
	func void startLoading()
		if pPathWorld == null
			throw EInvalidParam.new()
		end
		
		pStubWorld = null
		pCleanUpStubWorld = false
		
		try
			createLoadingWindow()
			loadWorld()
			
			preloadResources()
			pStubWorld.beginPreloading()
			
			if pWindowLoading != null
				pWindowLoading.setPreloadManager(pPreloadManager)
			end
			
			startFrameUpdater()
			
		catch Exception e
			pConsole.addError("Failed loading game world '" + pPathWorld + "'", e)
			cleanUp()
			throw
		end
	end
	
	/**
	 * \brief Update loading.
	 * 
	 * For use by FrameUpdater.
	 */
	func void updateLoading()
		var bool preloadProblemsReported = false
		
		try
			pStubWorld.updatePreloading()
			if pPreloadManager.getCounter().isNotZero()
				return
			end
			
			preloadProblemsReported = true
			if reportPreloadProblems()
				throw EInvalidParam.new()
			end
			
			createContentFromStub()
			pCleanUpStubWorld = false
			
		catch Exception e
			pConsole.addError("Failed loading game world '" + pPathWorld + "'", e)
			if not preloadProblemsReported
				reportPreloadProblems()
			end
			cancelLoading()
			return
		end
		
		cleanUp()
		
		try
			onLoadWorldFinished()
			
		catch Exception e
			pConsole.addError("Failed calling onLoadWorldFinished after " \
				+ "loading game world '" + pPathWorld + "'", e)
			
			pCleanUpStubWorld = true
			cancelLoading()
		end
	end
	
	/**
	 * \brief Cancel loading.
	 * 
	 * Call this after loadGameWorld() returned successfully to cancel the loading.
	 * Calls onLoadWorldFailed().
	 * 
	 * \note This method can be called multiple times.
	 */
	func void cancelLoading()
		cleanUp()
		onLoadWorldFailed()
	end
	
	
	
	/** \brief Set game world stub. */
	protected func void setStubWorld(StubGameWorld stub)
		pStubWorld = stub
	end
	
	/** \brief Clean up world stub. */
	protected func bool getCleanUpStubWorld()
		return pCleanUpStubWorld
	end
	
	/** \brief Set clean up world stub. */
	protected func void setCleanUpStubWorld(bool cleanUpStubWorld)
		pCleanUpStubWorld = cleanUpStubWorld
	end
	
	/**
	 * \brief Cleaning up.
	 * \note This method can be called multiple times.
	 */
	protected func void cleanUp()
		stopFrameUpdater()
		setWindowLoading(null)
		pPreloadManager = null
		
		if pStubWorld != null and pCleanUpStubWorld
			pStubWorld.getGameWorld().dispose()
			pStubWorld = null
		end
	end
	
	
	
	/** \brief Start frame updater if not started. */
	protected func void startFrameUpdater()
		if pFrameUpdater == null
			pFrameUpdater = FrameUpdater.new(this)
		end
	end
	
	/** \brief Stop frame updater if running. */
	protected func void stopFrameUpdater()
		if pFrameUpdater != null
			pFrameUpdater.giveUp()
			pFrameUpdater = null
		end
	end
	
	/**
	 * \brief Create loading window.
	 */
	protected func void createLoadingWindow()
		var WindowLoading window = WindowLoading.new()
		//window.setBgStyle("Bg1")
		window.getModelText().setText("Loading...")
		setWindowLoading(window)
		
		BaseGameApp.getApp().getDesktop().addWindow(window)
		window.grabFocus()
		
		BaseGameApp.getApp().setInputProcessorDesktop()
	end
	
	/** \brief Load world. */
	protected func void loadWorld()
		pStubWorld = StubGameWorld.new(createGameWorld(), pPreloadManager.getCounter())
		pCleanUpStubWorld = true
		pLoaders.getWorld().loadFromFile(pStubWorld, pPathWorld, pIgnorePersistableElements, pEnableNetworking)
		worldStoreNextIDAndRemapEntry()
		pStubWorld.getGameWorld().init(pStubWorld)
		persistencyReadWorld()
	end
	
	/**
	 * \brief Set world next object ID and add ID Remapper entry if required.
	 * \version 1.8
	 * 
	 * Set world next object ID is always done.
	 * 
	 * The ID mapper and ID generator is only adjusted if persistency environment and reader
	 * are null. If persistency is present the read and updated during readElementStubsFromFile()
	 * call later on. Make sure ID Generator has been read from persisted state before this
	 * function is called.
	 * 
	 * Remapper entry is added if the ID generator next ID is larger than 1. The ID Generator
	 * is always incremented by the last used object ID (next object ID - 1).
	 * 
	 * If ID Generator or persistency is null only sets the next object ID.
	 * 
	 * Called by loadWorld().
	 */
	protected func void worldStoreNextIDAndRemapEntry()
		var GameWorld gameWorld = pStubWorld.getGameWorld()
		
		var UniqueID nextObjectID = pStubWorld.getNextObjectID()
		gameWorld.setNextObjectID(nextObjectID)
		
		if pIDGenerator != null and pPersistEnvironment == null and pPersistencyReader == null
			var UniqueID firstID = UniqueID.new(1)
			if nextObjectID > firstID
				if pIDGenerator.toUniqueID() > firstID
					gameWorld.getUniqueIDRemapper().add(firstID, nextObjectID, pIDGenerator.toUniqueID())
				end
				pIDGenerator.incrementBy(nextObjectID - firstID)
			end
		end
	end
	
	/**
	 * \brief Read world from persistency reader.
	 * \version 1.8
	 * 
	 * Does nothing if persistency environment, reader or ID Generator is null.
	 * 
	 * Called by loadWorld().
	 */
	protected func void persistencyReadWorld()
		if pPersistEnvironment == null or pPersistencyReader == null or pIDGenerator == null
			return
		end
		
		pStubWorld.getGameWorld().readFromFile(pPersistEnvironment, pPersistencyReader)
		
		// read element stubs from file. this call does a couple of things.
		// 
		// first it reads the next object ID and unique ID remapper.
		// 
		// then it remaps the elements stubs created while loading the world using the unique
		// ID remapper load in the previous step. for this reason this call has to come after
		// the create element calls above.
		// 
		// then the dynamic element stubs are read. this creates the dynamnic elements not
		// present in the game world at the time the world has been designed
		pStubWorld.getGameWorld().readElementStubsFromFile(pPersistEnvironment,\
			pPersistencyReader, pIDGenerator, pElementClassList, pStubWorld)
		
		/*
		pConsole.addMessage("persistencyReadWorld")
		pStubWorld.getGameWorld().getUniqueIDRemapper().forEach(block UniqueIDRemapper.RemapEntry each
			pConsole.addMessage("  - remap " + each.getFirstID() + " : " + each.getLastID() + " offset " + each.getOffset())
		end)
// 		pStubWorld.forEachElement(block StubElement each
// 			pConsole.addMessage("  - " + each.getClass().getClassname() + ": " + each.getID())
// 		end)
		*/
	end
	
	/**
	 * \brief Preload resources.
	 * 
	 * Preloads resources from all elements classes.
	 */
	protected func void preloadResources()
		pElementClassList.preloadAll(pPreloadManager)
		
		/*
		pStubWorld.addElementClassesTo(pPreloadManager)
		
		pPreloadManager.addElementClassDependencies()
		*/
		
		pPreloadManager.preloadElementClasses()
	end
	
	/**
	 * \brief Log preloading problems.
	 * \returns True if problems are present.
	 */
	protected func bool reportPreloadProblems()
		return pElementClassList.logPreloadProblems(pConsole)
	end
	
	/**
	 * \brief Create GameWorld instance.
	 * 
	 * Default implementation creates instance of GameWorld. Overwrite in subclass to create
	 * instance of your own class if used.
	 */
	protected func GameWorld createGameWorld()
		return GameWorld.new()
	end
	
	/**
	 * \brief Create world content from stubs.
	 * 
	 * If persistency environment and reader are not null calls persistencyCreateContentFromStub().
	 * 
	 * Otherwise calls verifyPreloading(), createAndAddElements() and createWorldDecals()
	 * on the world stub.
	 * 
	 * \note If DebugVerifyStubProperties is set verifies stub elements before creating them.
	 */
	protected func void createContentFromStub()
		if pPersistEnvironment != null and pPersistencyReader != null
			persistencyCreateContentFromStub()
			return
		end
		
		pStubWorld.verifyPreloading(pConsole)
		if pDebugVerifyStubProperties != null
			pDebugVerifyStubProperties.verifyWorld(pStubWorld)
		end
		pStubWorld.createAndAddElements(pConsole)
		pStubWorld.createWorldDecals(pDecalBuilder, pConsole)
	end
	
	/**
	 * \brief Create world content from stubs using persistency.
	 * \version 1.8
	 * 
	 * Calls verifyPreloading(), createAndAddNonPersistableElements(),
	 * createAndAddPersistableElements(), loadAndAddPersistableElements and createWorldDecals()
	 * on the world stub.
	 * 
	 * Called by createContentFromStub() if persistency environment and reader is not null.
	 * 
	 * \note If DebugVerifyStubProperties is set verifies stub elements before creating them.
	 * 
	 * \throws EInvalidAction persistency environment or reader is null.
	 */
	protected func void persistencyCreateContentFromStub()
		if pPersistEnvironment == null or pPersistencyReader == null
			throw EInvalidAction.new("persistency environment or reader is null")
		end
		
		pStubWorld.verifyPreloading(pConsole)
		if getDebugVerifyStubProperties() != null
			getDebugVerifyStubProperties().verifyWorld(pStubWorld)
		end
		
		pStubWorld.createAndAddNonPersistableElements(pConsole)
		
		if pStubWorld.getNewElementsRange() != null
			pStubWorld.createAndAddPersistableElements(pConsole, pStubWorld.getNewElementsRange())
		end
		
		pStubWorld.loadAndAddPersistableElements(pConsole, pPersistEnvironment, pPersistencyReader)
		
		pStubWorld.createWorldDecals(pDecalBuilder, pConsole)
		
		/*
		pConsole.addMessage("persistencyCreateContentFromStub")
		pStubWorld.getGameWorld().forEachElement(block Element each
			pConsole.addMessage("  - " + each.getClass().getClassname() + ": " + each.getID())
		end)
		*/
	end
	
	
	
	/**
	 * \brief Loading world finished.
	 * 
	 * Game loader has been cleaned up before calling this method. For this reason the
	 * result of loading is provided as parameters. It is safe to dispose() of the
	 * game loader upon entering this method.
	 * 
	 * Subclasses of BaseGameApp should call
	 * \code{.ds} BaseGameApp.getApp().finishLoadGameWorld() \endcode
	 * at the end of the implementation.
	 */
	func void onLoadWorldFinished()
	end
	
	/**
	 * \brief Loading world failed.
	 * 
	 * Game loader has been cleaned up before calling this method. It is safe to dispose()
	 * of the game loader upon entering this method.
	 * 
	 * Subclasses of BaseGameApp should call
	 * \code{.ds} BaseGameApp.getApp().cancelLoadGameWorld() \endcode
	 * at the end of the implementation.
	 * 
	 * \note This method can be called multiple times.
	 */
	func void onLoadWorldFailed()
	end
end
