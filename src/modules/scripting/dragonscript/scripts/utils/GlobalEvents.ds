/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */


namespace Dragengine.Utils



/**
 * \brief Global events.
 * 
 * Provides support to register events on a global level and add listeners to them. This can be
 * used to add global game events without needing to set up customized listeners for each event.
 * 
 * Global events use a common listener interface with one single method. Optionally code blocks
 * can be assigned as listeners which avoids the need to implement the listener interface.
 * In general though it is recommended to use the interface instead of the block.
 * 
 * Global events are generic by nature. The senders and listeners have to know what optional
 * data can be send along an event as well as who the source might be.
 */
class GlobalEvents
	/** \brief Event listener. */
	interface Listener
		/**
		 * \brief Event fired.
		 * \param source The source object sending the event. Can be null if there is no
		 *               reasonable source object.
		 * \param data Data send with the event. Can be null if the event requires no
		 *             additional parameters.
		 */
		func void onEvent(Object source, Object data)
	end
	
	/** \brief Default implementation of event listener. */
	class DefaultListener implements Listener
		/** \brief Create default listener. */
		public func new()
		end
		
		/**
		 * \brief Event fired.
		 * \param source The source object sending the event. Can be null if there is no
		 *               reasonable source object.
		 * \param data Data send with the event. Can be null if the event requires no
		 *             additional parameters.
		 */
		public func void onEvent(Object source, Object data)
		end
	end
	
	/**
	 * \brief Listener Implementation calling code block.
	 * 
	 * Code block receives two Object type parameters. The first parameter is the source
	 * sending the event and the second parameter the optional event data.
	 */
	class BlockListener implements Listener
		private var Block pBlock
		
		/**
		 * \brief Create block listener.
		 * 
		 * Code block receives two Object type parameters. The first parameter is the source
		 * sending the event and the second parameter the optional event data.
		 */
		public func new(Block ablock)
			setBlock(ablock)
		end
		
		/** \brief Code block. */
		public func Block getBlock()
			return pBlock
		end
		
		/**
		 * \brief Set code block.
		 * 
		 * Code block receives two Object type parameters. The first parameter is the source
		 * sending the event and the second parameter the optional event data.
		 */
		public func void setBlock(Block ablock)
			if ablock == null
				throw ENullPointer.new("ablock")
			end
			pBlock = ablock
		end
		
		/**
		 * \brief Event fired.
		 * \param source The source object sending the event. Can be null if there is no
		 *               reasonable source object.
		 * \param data Data send with the event. Can be null if the event requires no
		 *             additional parameters.
		 */
		public func void onEvent(Object source, Object data)
			pBlock.run(source, data)
		end
	end
	
	
	
	private var Dictionary pEvents
	
	
	
	/** \brief Create global events. */
	public func new()
		pEvents = Dictionary.new()
	end
	
	
	
	/**
	 * \brief Add listener for event.
	 * 
	 * It is save to add listeners while event is in progress of being send.
	 * 
	 * \throws EInvalidParam Listener has been already added to event.
	 */
	public func void addListener(String event, Listener listener)
		if event == null
			throw ENullPointer.new("event")
		end
		if listener == null
			throw ENullPointer.new("listener")
		end
		
		var SafeArray listeners = pEvents.getAt(event, null) cast SafeArray
		if listeners == null
			listeners = SafeArray.new()
			pEvents.setAt(event, listeners)
		end
		
		listeners.add(listener)
	end
	
	/**
	 * \brief Remove listener from event.
	 * 
	 * It is save to remove listeners while event is in progress of being send.
	 * 
	 * \throws EInvalidParam Listener is not present for event.
	 */
	public func void removeListener(String event, Listener listener)
		if event == null
			throw ENullPointer.new("event")
		end
		if listener == null
			throw ENullPointer.new("listener")
		end
		
		(pEvents.getAt(event) cast SafeArray).remove(listener)
	end
	
	/**
	 * \brief Add block as listener for event if not added already.
	 * 
	 * Code block receives two Object type parameters. The first parameter is the source
	 * sending the event and the second parameter the optional event data.
	 * 
	 * Adding a block listener creates an instance of BlockListener internally. For this
	 * reason you can not remove a block listener. If you need to remove block listeners
	 * create an instance of BlockListener yourself and add it.
	 * 
	 * It is save to add listener while event is in progress of being send.
	 */
	public func void addListener(String event, Block ablock)
		addListener(event, BlockListener.new(ablock))
	end
	
	
	
	/**
	 * \brief Send event.
	 * 
	 * If event has no registered listeners this method does nothing.
	 * 
	 * \param source Source object sending the event. Can be null if there is no
	 *               reasonable source object.
	 * \param data Data send with the event. Can be null if the event requires no
	 *             additional parameters.
	 */
	public func void sendEvent(String event, Object source, Object data)
		var SafeArray listeners = pEvents.getAt(event, null) cast SafeArray
		if listeners == null
			return
		end
		
		listeners.forEach(block Listener each
			each.onEvent(source, data)
		end)
	end
	
	/**
	 * \brief Send event.
	 * 
	 * Same as sendEvent(String,Object,Object) but using null as data.
	 */
	public func void sendEvent(String event, Object source)
		sendEvent(event, source, null)
	end
	
	/**
	 * \brief Send event.
	 * 
	 * Same as sendEvent(String,Object,Object) but using null as source and data.
	 */
	public func void sendEvent(String event)
		sendEvent(event, null, null)
	end
end
