/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */


namespace Dragengine.LoadSave

pin Dragengine.Scenery
pin Dragengine.Utils
pin Dragengine.Gui
pin Dragengine.XML



/**
 * \brief Load SkinAnnotations from XML file.
 * 
 * Example file:
 * 
 * \code{.xml}
 * <?xml version='1.0' encoding='ISO-8859-1'?>
 * <skinAnnotations>
 *   <string path='materials/asphalt' key='footstep'>asphalt</string>
 *   <string path='materials/asphalt/wet.deskin' key='footstep'>asphalt-wet</string>
 *   <float path='models/player/player.deskin/body' key='armor'>0.8</float>
 * </skinAnnotations>
 * \endcode
 * 
 * Supported are these tags:
 * - <string></string>: UTF8 encoded string value
 * - <float></float>: Floating point value
 * - <integer></int>: Integer value
 * - <bool></bool>: Boolean value ("true", "false")
 * - <point x='' y=''/>: 2-Component point (integer)
 * - <point3 x='' y='' z=''/>: 3-Component point (integer)
 * - <vector2 x='' y=''/>: 2-Component vector (float)
 * - <vector x='' y='' z=''/>: 3-Component vector (float)
 * - <borderSize left='' top='' right='' bottom=''/>: BorderSize (int)
 * - <rectArea x1='' y1='' x2='' y2=''/>: RectArea (int)
 * - <floatRectArea x1='' y1='' x2='' y2=''/>: FloatRectArea (float)
 * - <list></list>: List of values
 * - <map></map>: Dictionary of key/value pairs
 * - <null/>: null value
 */
class LoadSkinAnnotations extends BaseXmlLoader
	/** \brief Create loader. */
	func new(Console console) this(console, "LoadSkinAnnotations")
	end
	
	/** \brief Create loader. */
	func new(Console console, String name) super(console, name)
	end
	
	
	
	/**
	 * \brief Load element class from file.
	 * 
	 * Loaded content is added to \em skinAnnotations. It is not cleared first.
	 */
	func void loadFromFile(String filename, SkinAnnotations skinAnnotations)
		if skinAnnotations == null
			throw EInvalidParam.new()
		end
		
		logLoadingFromFile(filename)
		
		var EasyXML document = EasyXML.new(filename)
		if document.hasParseFailed()
			logParsingFailed(document.getParseLog() + " in " + filename)
			throw EInvalidParam.new()
		end
		
		var EasyXMLElement root = document.getRootElement()
		if not root.getTagName().equals("skinAnnotations")
			logUnknownTag(root)
			throw EInvalidParam.new()
		end
		
		try
			readSkinAnnotations(root, skinAnnotations, File.new(filename).getParent().getPath())
			
		catch Exception e
			logParsingFailed("Failed parsing " + filename)
			throw
		end
	end
	
	/**
	 * \brief Scan for skin annotation files loading them.
	 * 
	 * Skin annotation files have the extension ".deskinann".
	 * 
	 * \param skinAnnotations Skin annotations to load files into.
	 * \param directory Absolute path to directory to scan for files.
	 * \param recursive If true scans also in all child directories.
	 */
	func void loadFromFiles(SkinAnnotations skinAnnotations, String directory, bool recursive)
		loadFromFiles(skinAnnotations, directory, "*.deskinann", recursive)
	end
	
	/**
	 * \brief Scan for skin annotation files loading them.
	 * 
	 * Skin annotation files have the extension ".deskinann".
	 * 
	 * \param skinAnnotations Skin annotations to load files into.
	 * \param directory Absolute path to directory to scan for files.
	 * \param pattern File pattern to match. Has to be of the form "*.extension"
	 * \param recursive If true scans also in all child directories.
	 */
	func void loadFromFiles(SkinAnnotations skinAnnotations, String directory,\
	String pattern, bool recursive)
		FileSystem.searchFiles(directory, recursive, block String each, FileType type
			if type == FileType.file and FileSystem.pathMatchesPattern(File.new(each).getName(), pattern)
				loadFromFile(each, skinAnnotations)
			end
			return true
		end)
	end
	
	
	
	/** \brief Parse skin annotations tag. */
	protected func void readSkinAnnotations(EasyXMLElement root,\
	SkinAnnotations skinAnnotations, String baseDirectory)
		var Object value
		var String path
		var String key
		
		root.forEachTag(block EasyXMLElement element, String tagName
			if element.hasAttributeNamed("path")
				path = File.absolutePath(element.getAttributeNamed("path"), baseDirectory).getPath()
				
			else
				path = baseDirectory
			end
			
			key = element.getAttributeNamed("key")
			
			if tagName.equals("string")
				value = element.getFirstCData()
				
			elif tagName.equals("float")
				value = element.getFirstCDataFloat()
				
			elif tagName.equals("integer")
				value = element.getFirstCDataInt()
				
			elif tagName.equals("boolean")
				value = element.getFirstCDataBool()
				
			elif tagName.equals("vector")
				value = readVector(element)
				
			elif tagName.equals("vector2")
				value = readVector2(element)
				
			elif tagName.equals("point")
				value = readPoint(element)
				
			elif tagName.equals("point3")
				value = readPoint3(element)
				
			elif tagName.equals("borderSize")
				value = readBorderSize(element)
				
			elif tagName.equals("rectArea")
				value = readRectArea(element)
				
			elif tagName.equals("floatRectArea")
				value = readFloatRectArea(element)
				
			elif tagName.equals("color")
				value = readColor(element)
				
			elif tagName.equals("null")
				value = null
				
			elif tagName.equals("list")
				value = readList(element)
				
			elif tagName.equals("map")
				value = readMap(element)
				
			else
				logUnknownTag(element)
				throw EInvalidParam.new()
			end
			
			skinAnnotations.set(path, key, value)
		end)
	end
	
	/** \brief Parse list tag. */
	protected func Array readList(EasyXMLElement root)
		var Array list = Array.new()
		
		root.forEachTag(block EasyXMLElement element, String tagName
			if tagName.equals("string")
				list.add(element.getFirstCData())
				
			elif tagName.equals("float")
				list.add(element.getFirstCDataFloat())
				
			elif tagName.equals("integer")
				list.add(element.getFirstCDataInt())
				
			elif tagName.equals("boolean")
				list.add(element.getFirstCDataBool())
				
			elif tagName.equals("vector")
				list.add(readVector(element))
				
			elif tagName.equals("vector2")
				list.add(readVector2(element))
				
			elif tagName.equals("point")
				list.add(readPoint(element))
				
			elif tagName.equals("point3")
				list.add(readPoint3(element))
				
			elif tagName.equals("borderSize")
				list.add(readBorderSize(element))
				
			elif tagName.equals("rectArea")
				list.add(readRectArea(element))
				
			elif tagName.equals("floatRectArea")
				list.add(readFloatRectArea(element))
				
			elif tagName.equals("color")
				list.add(readColor(element))
				
			elif tagName.equals("null")
				list.add(null)
				
			elif tagName.equals("list")
				list.add(readList(element))
				
			elif tagName.equals("map")
				list.add(readMap(element))
				
			else
				logUnknownTag(element)
			end
		end)
		
		return list
	end
	
	/** \brief Parse map tag. */
	protected func Dictionary readMap(EasyXMLElement root)
		var Dictionary dict = Dictionary.new()
		var String key
		
		root.forEachTag(block EasyXMLElement element, String tagName
			key = element.getAttributeNamed("key")
			
			if tagName.equals("string")
				dict.setAt(key, element.getFirstCData())
				
			elif tagName.equals("float")
				dict.setAt(key, element.getFirstCDataFloat())
				
			elif tagName.equals("integer")
				dict.setAt(key, element.getFirstCDataInt())
				
			elif tagName.equals("boolean")
				dict.setAt(key, element.getFirstCDataBool())
				
			elif tagName.equals("vector")
				dict.setAt(key, readVector(element))
				
			elif tagName.equals("vector2")
				dict.setAt(key, readVector2(element))
				
			elif tagName.equals("point")
				dict.setAt(key, readPoint(element))
				
			elif tagName.equals("point3")
				dict.setAt(key, readPoint3(element))
				
			elif tagName.equals("borderSize")
				dict.setAt(key, readBorderSize(element))
				
			elif tagName.equals("rectArea")
				dict.setAt(key, readRectArea(element))
				
			elif tagName.equals("floatRectArea")
				dict.setAt(key, readFloatRectArea(element))
				
			elif tagName.equals("color")
				dict.setAt(key, readColor(element))
				
			elif tagName.equals("null")
				dict.setAt(key, null)
				
			elif tagName.equals("list")
				dict.setAt(key, readList(element))
				
			elif tagName.equals("map")
				dict.setAt(key, readMap(element))
				
			else
				logUnknownTag(element)
			end
		end)
		
		return dict
	end
end
