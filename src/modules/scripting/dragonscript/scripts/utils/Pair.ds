/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */


namespace Dragengine.Utils



/**
 * \brief Immutable pair of two objects.
 */
class Pair
	private var Object pFirst
	private var Object pSecond
	
	
	
	/** \brief Create pair. */
	public func new( Object first, Object second )
		this.pFirst = first
		this.pSecond = second
	end
	
	
	
	/** \brief First object. */
	public func Object getFirst()
		return this.pFirst
	end
	
	/** \brief Second object. */
	public func Object getSecond()
		return this.pSecond
	end
	
	/** \brief Pair with first and second object swapped. */
	public func Pair swap()
		return Pair.new( this.pSecond, this.pFirst )
	end
	
	
	
	/** \brief String representation. */
	public func String toString()
		return "(" + this.pFirst + "," + this.pSecond + ")"
	end
	
	/**
	 * \brief Pair equals object.
	 * 
	 * Implements Object.equals(Object).
	 * 
	 * \returns \em true if \em other is of type Pair and first and second object equals.
	 */
	public func bool equals( Object other )
		if other == null or not other castable Pair
			return false
		end
		
		var Pair pair = other cast Pair
		return ( ( this.pFirst == null and pair.pFirst == null ) or this.pFirst.equals( pair.pFirst ) ) \
			and ( ( this.pSecond == null and pair.pSecond == null ) or this.pSecond.equals( pair.pSecond ) )
	end
	
	/**
	 * \brief Hash code for use as dictionary keys.
	 * 
	 * Implements Object.hashCode().
	 */
	public func int hashCode()
		var int first = 0
		if this.pFirst != null
			first = this.pFirst.hashCode()
		end
		
		var int second = 0
		if this.pSecond != null
			second = this.pSecond.hashCode()
		end
		
		return first ^ -second
	end
end
