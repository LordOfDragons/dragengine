/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

namespace Dragengine.Utils

pin Dragengine.Gui
pin Dragengine.Scenery



/**
 * \brief Immutable box area.
 */
class BoxArea
	/** \brief Position. */
	private var DVector pPosition
	
	/** \brief Half extends. */
	private var Vector pHalfExtends
	
	/** \brief Orientation. */
	private var Quaternion pOrientation
	
	
	
	/** \brief Create box area. */
	public func new( DVector position, Vector halfExtends )
		if position == null or halfExtends == null
			throw EInvalidParam.new()
		end
		
		this.pPosition = position
		this.pHalfExtends = halfExtends
		this.pOrientation = Quaternion.new()
	end
	
	/** \brief Create box area. */
	public func new( DVector position, Vector halfExtends, Quaternion orientation )
		if position == null or halfExtends == null or orientation == null
			throw EInvalidParam.new()
		end
		
		this.pPosition = position
		this.pHalfExtends = halfExtends
		this.pOrientation = orientation
	end
	
	
	
	/** \brief Position. */
	public func DVector getPosition()
		return this.pPosition
	end
	
	/** \brief Orientation. */
	public func Quaternion getOrientation()
		return this.pOrientation
	end
	
	/** \brief Half extends. */
	public func Vector getHalfExtends()
		return this.pHalfExtends
	end
	
	/** \brief Box contains point. */
	public func bool containsPoint( DVector point )
		var Vector tp
		
		if this.pOrientation.equals( Quaternion.new() )
			tp = ( point - this.pPosition ).toVector()
			
		else
			tp = ( DMatrix.newWorld( this.pPosition, this.pOrientation ).getInverse() * point ).toVector()
		end
		
		return tp >= -this.pHalfExtends and tp <= this.pHalfExtends
	end
end
