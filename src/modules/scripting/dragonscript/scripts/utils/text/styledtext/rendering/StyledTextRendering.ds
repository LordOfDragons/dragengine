/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

namespace Dragengine.Utils.StyledText.Rendering

pin Dragengine.Gui
pin Dragengine.Scenery
pin Dragengine.Utils.StyledText.Rendering.Elements



/**
 * \brief Render styled text information.
 */
class StyledTextRendering
	private var Array pElements
	private var Color pBackgroundColor
	private var Point pSize
	
	
	
	/** \brief Create styled text rendering object. */
	public func new()
		this.pElements = Array.new()
		this.pSize = Point.new( 350, 500 )
	end
	
	
	
	/** \brief Size in pixels. */
	public func Point getSize()
		return this.pSize
	end
	
	/** \brief Set size in pixels. */
	public func void setSize( Point size )
		this.pSize = size
	end
	
	
	
	/** \brief Number of elements. */
	public func int getElementCount()
		return this.pElements.getCount()
	end
	
	/** \brief Element at index. */
	public func STRElement getElementAt( int index )
		return this.pElements.getAt( index ) cast STRElement
	end
	
	/** \brief Add element. */
	public func void addElement( STRElement element )
		this.pElements.add( element )
	end
	
	/** \brief Remove all elements. */
	public func void removeAllElements()
		this.pElements.removeAll()
	end
	
	/** \brief Visit elements with block with STRElement as parameter. */
	public func void forEachElement( Block ablock )
		this.pElements.forEach( ablock )
	end
	
	
	
	/** \brief Background color. */
	public func Color getBackgroundColor()
		return this.pBackgroundColor
	end
	
	/** \brief Set background color. */
	public func void setBackgroundColor( Color color )
		this.pBackgroundColor = color
	end
	
	
	
	/**
	 * \brief Add canvas for each element.
	 * 
	 * Canvas has to be of type Canvas.VIEW. Caller is responsible to remove all canvas if required.
	 */
	public func void addToCanvas( CanvasView canvas, Point position )
		this.addToCanvas( canvas, position, null )
	end
	
	public func void addToCanvas( CanvasView canvas, Point position, StyledTextDocumentUpdater updater )
		if updater != null
			updater.removeAllUpdater()
		end
		
		// filled rectangle for background if present
		if this.pBackgroundColor != null and this.pBackgroundColor.getAlpha() > 0
			var CanvasPaint bgCanvas = CanvasPaint.new()
			bgCanvas.setShapeType( CanvasPaintShape.rectangle )
			bgCanvas.setFillColor( this.pBackgroundColor )
			bgCanvas.setThickness( 0 )
			bgCanvas.setPosition( position )
			bgCanvas.setSize( this.pSize )
			bgCanvas.setOrder( canvas.getCanvasCount() cast float )
			canvas.addCanvas( bgCanvas )
		end
		
		// add elements
		this.pElements.forEach( block STRElement each
			each.addToCanvas( canvas, position, updater )
		end )
	end
end
