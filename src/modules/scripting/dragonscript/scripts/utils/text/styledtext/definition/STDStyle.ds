/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

namespace Dragengine.Utils.StyledText.Definition

pin Dragengine.Gui.Designers
pin Dragengine.Scenery



/**
 * \brief Styled text definition style.
 *
 * Defines a style for nodes in a styled text definition. The left
 * and right margins are relative to the left and right page margins
 * of the parent styled text definition object. The top margin is
 * relative to the previous node lower position augmented by the
 * previous node bottom margin. Hence the starting position of a
 * node is the lower boundary of the previous node plus a gap equal
 * to the sum of the previous nodes style bottom margin and this
 * styles top margin.
 */
class STDStyle
	/** \brief Text alignment. */
	public enum Align
		/** \brief Left aligned. */
		left
		
		/** \brief Right aligned. */
		right
		
		/** \brief Center aligned. */
		center
		
		/** \brief Block aligned. */
		filled
	end
	
	
	
	var String pName
	var Font pFont
	var Align pAlignment
	var Color pTextColor
	var Color pBackgroundColor
	var RectArea pMargins
	var int pFirstLineIndent
	var int pLineSpacing
	var int pCharacterSpacing
	
	
	
	/** \brief Create style. */
	func new(String name)
		pName = name
		pAlignment = Align.left
		pTextColor = Color.black
		pMargins = RectArea.new()
		pFirstLineIndent = 0
		pLineSpacing = 0
		pCharacterSpacing = 0
	end
	
	/** \brief Create copy of style. */
	func new(STDStyle style) this(style.pName, style)
	end
	
	/** \brief Create copy of style with different name. */
	func new(String name, STDStyle style)
		pName = name
		pFont = style.pFont
		pAlignment = style.pAlignment
		pTextColor = style.pTextColor
		pBackgroundColor = style.pBackgroundColor
		pMargins = RectArea.new(style.pMargins)
		pFirstLineIndent = style.pFirstLineIndent
		pLineSpacing = style.pLineSpacing
		pCharacterSpacing = style.pCharacterSpacing
	end
	
	/**
	 * \brief Create style using parameters from widget designer state design.
	 * 
	 * Allows to derive a style from a designer obtained from a widget.
	 * 
	 * Uses the parameters "padding", "font" and "textColor".
	 * 
	 * \todo Support canvas designer as background. This way the canvas creator
	 *       from the design can be used. Right now Color.transparent is used.
	 */
	func new(String name, DefaultWidgetDesigner.StateDesign design)
		pName = name
		pAlignment = Align.left
		
		pFont = design.getFont()
		
		if design.getTextColor() != null
			pTextColor = design.getTextColor()
			
		else
			pTextColor = Color.black
		end
		
		pBackgroundColor = null
		
		var BorderSize padding = design.getPadding()
		if padding != null
			pMargins = RectArea.new(padding.getLeft(), padding.getTop(), \
				padding.getRight(), padding.getBottom())
			
		else
			pMargins = RectArea.new()
		end
		
		pFirstLineIndent = 0
		pLineSpacing = 0
		pCharacterSpacing = 0
	end
	
	/**
	 * \brief Create style using parameters from label designer state design.
	 * 
	 * Allows to derive a style from a designer obtained from a widget.
	 * 
	 * Uses the parameters "padding", "font", "textColor" and "alignment".
	 * 
	 * \todo Support canvas designer as background. This way the canvas creator
	 *       from the design can be used. Right now Color.transparent is used.
	 */
	func new(String name, DefaultLabelDesigner.LabelStateDesign design)
		pName = name
		
		pFont = design.getFont()
		
		if design.getTextColor() != null
			pTextColor = design.getTextColor()
			
		else
			pTextColor = Color.black
		end
		
		pAlignment = Align.left
		if design.getAlignment() != null
			select design.getAlignment().value()
			case Label.left
				pAlignment = Align.left
				
			case Label.right
				pAlignment = Align.right
				
			case Label.center
				pAlignment = Align.center
			end
		end
		
		pBackgroundColor = null
		
		var BorderSize padding = design.getPadding()
		if padding != null
			pMargins = RectArea.new(padding.getLeft(), padding.getTop(), \
				padding.getRight(), padding.getBottom())
			
		else
			pMargins = RectArea.new()
		end
		
		pFirstLineIndent = 0
		pLineSpacing = 0
		pCharacterSpacing = 0
	end
	
	
	
	/** \brief Name of style. */
	func String getName()
		return pName
	end
	
	/** \brief Font. */
	func Font getFont()
		return pFont
	end
	
	/** \brief Set font. */
	func void setFont(Font font)
		if font == null
			throw EInvalidParam.new()
		end
		pFont = font
	end
	
	/** \brief Align. */
	func Align getAlignment()
		return pAlignment
	end
	
	/** \brief Set alignment. */
	func void setAlignment(Align alignment)
		pAlignment = alignment
	end
	
	/** \brief Text color. */
	func Color getTextColor()
		return pTextColor
	end
	
	/** \brief Set text color. */
	func void setTextColor(Color color)
		if color == null
			throw EInvalidParam.new()
		end
		pTextColor = color
	end
	
	/** \brief Background color. */
	func Color getBackgroundColor()
		return pBackgroundColor
	end
	
	/** \brief Set background color. */
	func void setBackgroundColor(Color color)
		if color == null
			throw EInvalidParam.new()
		end
		pBackgroundColor = color
	end
	
	/** \brief Margins in pixels. */
	func RectArea getMargins()
		return pMargins
	end
	
	/** \brief Set margins in pixels. */
	func void setMargins(RectArea margins)
		if margins == null
			throw EInvalidParam.new()
		end
		pMargins = margins
	end
	
	/** \brief Indention of the first line in pixels. */
	func int getFirstLineIndent()
		return pFirstLineIndent
	end
	
	/** \brief Set indention of the first line in pixels. */
	func void setFirstLineIndent(int indent)
		pFirstLineIndent = indent
	end
	
	/** \brief Spacing between lines in pixels. */
	func int getLineSpacing()
		return pLineSpacing
	end
	
	/** \brief Set spacing between lines in pixels. */
	func void setLineSpacing(int spacing)
		pLineSpacing = spacing
	end
	
	/** \brief Spacing between characters in pixels. */
	func int getCharacterSpacing()
		return pCharacterSpacing
	end
	
	/** \brief Set spacing between characters in pixels. */
	func void setCharacterSpacing(int spacing)
		pCharacterSpacing = spacing
	end
end
