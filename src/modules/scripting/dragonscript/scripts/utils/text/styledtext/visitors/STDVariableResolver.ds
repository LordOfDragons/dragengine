/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

namespace Dragengine.Utils.StyledText

pin Dragengine.Gui
pin Dragengine.Scenery
pin Dragengine.Utils.StyledText.Definition.Nodes



/**
 * \brief Replace variables with resolved content.
 * 
 * Subclass and implement the resolvVariable method to return the requested values.
 * The visited content is added to a new styled text definition to keep the original intact.
 * Tokens are contained between curly brackets like "{binding quit}". The special token "{{"
 * is converted to "{".
 */
class STDVariableResolver extends DefaultSTDNodeVisitor
	private var StyledTextDefinition pDefinition
	
	
	
	/** \brief Create converter. */
	public func new(StyledTextDefinition definition)
		if definition == null
			throw EInvalidParam.new()
		end
		pDefinition = definition
	end
	
	
	
	/** \brief Styled text definition to add the visited content to. */
	public func StyledTextDefinition getDefinition()
		return pDefinition
	end
	
	
	
	/**
	 * \brief Resolve variable returning the value to set in place of the variable.
	 * 
	 * The default implementation returns the variable name in curly brackets.
	 * This can be used as error fallback.
	 */
	public func String resolveVariable(String variableName)
		return "{" + variableName + "}"
	end
	
	
	
	/** \brief Visit node. */
	public func void visitNode(STDNode node)
		pDefinition.addNode(node)
	end
	
	/** \brief Visit text node. */
	public func void visitText(STDNText node)
		var int count = node.getSpanCount()
		var STDNTextSpan span
		var int i
		
		var STDNText resolvedNode = STDNText.new()
		resolvedNode.setStyle(node.getStyle())
		
		for i = 0 to count
			span = node.getSpanAt(i)
			resolvedNode.addSpan(STDNTextSpan.new(resolveVariables(\
				span.getText()), span.getStyle(), span.getImage()))
		end
		
		pDefinition.addNode(resolvedNode)
	end
	
	/** \brief Visit image node. */
	public func void visitImage(STDNImage node)
		pDefinition.addNode(node)
	end
	
	
	
	/**
	 * \brief Resolve variables.
	 */
	protected func String resolveVariables(String text)
		var int variableBegin = text.find('{')
		var int len = text.getLength()
		var String result = ""
		var int position = 0
		var int variableEnd
		
		while variableBegin != -1
			if position < variableBegin
				result = result + text.substring(position, variableBegin)
			end
			
			if text.getAt(variableBegin + 1) == '{'
				variableEnd = variableBegin + 1
				result = result + "{"
				
			else
				variableEnd = text.find('}', variableBegin + 1)
				result = result + resolveVariable(text.substring(variableBegin + 1, variableEnd))
			end
			
			position = variableEnd + 1
			variableBegin = text.find('{', position)
		end
		
		if position < len
			result = result + text.substring(position)
		end
		
		return result
	end
end
