/* 
 * Drag[en]gine DragonScript Script Module
 *
 * Copyright (C) 2020, Roland PlÃ¼ss (roland@rptd.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

namespace Dragengine.Utils.StyledText

pin Dragengine.Gui
pin Dragengine.Scenery
pin Dragengine.Utils.StyledText.Definition
pin Dragengine.Utils.StyledText.Rendering
pin Dragengine.Utils.StyledText.Converter



/**
 * \brief Styled text document.
 *
 * Convenciene class to manage a styled text document. Contains
 * a styled text definition object defining the content of the
 * document, a styled text converter to convert the definition
 * into pages and a list of styled text rendering objects
 * containing the individual pages in render ready form. This
 * class allows to handle such documents in a simple way without
 * having to worry about the individual parts of the whole.
 * You can change the definition at any time. After doing changes
 * you have to rebuild the pages using the rebuildPages method.
 * Afterwards you can render individual pages using the
 * renderPage method.
 */
class StyledTextDocument
	/** \brief Document definition. */
	private var StyledTextDefinition pDefinition
	
	/** \brief Page size in pixels. */
	private var Point pPageSize
	
	/** \brief Pages as list of StyledTextRendering. */
	private var Array pPages
	
	
	
	/** \brief Create styled text document. */
	public func new()
		pDefinition = StyledTextDefinition.new()
		pPageSize = Point.new(400, 400)
		pPages = Array.new()
	end
	
	
	
	/** \brief Styled text definition. */
	public func StyledTextDefinition getDefinition()
		return pDefinition
	end
	
	/** \brief Set styled text definition. */
	public func void setDefinition(StyledTextDefinition definition)
		if definition == null
			throw EInvalidParam.new()
		end
		pDefinition = definition
	end
	
	/** \brief Page size in pixels. */
	public func Point getPageSize()
		return pPageSize
	end
	
	/** \brief Set page size in pixels. */
	public func void setPageSize(Point size)
		if not (size > Point.new())
			throw EInvalidParam.new()
		end
		pPageSize = size
	end
	
	
	
	/** \brief Number of pages. */
	public func int getPageCount()
		return pPages.getCount()
	end
	
	/** \brief Page at number. */
	public func StyledTextRendering getPageAt(int number)
		return pPages.getAt(number) cast StyledTextRendering
	end
	
	/** \brief Add page. */
	public func void addPage(StyledTextRendering page)
		if page == null
			throw EInvalidParam.new()
		end
		pPages.add(page)
	end
	
	/** \brief Remove all pages. */
	public func void removeAllPages()
		pPages.removeAll()
	end
	
	/** \brief Visit pages with block with StyledTextRendering as parameter. */
	public func void forEachPage(Block ablock)
		pPages.forEach(ablock)
	end
	
	
	
	/** \brief Rebuild pages. */
	public func void rebuildPages()
		var StyledTextConverter converter = StyledTextConverter.new(pDefinition)
		
		converter.setPageSize(pPageSize.getX(), pPageSize.getY())
		
		pPages.removeAll()
		
		converter.generatePages()
		converter.forEachPage(block StyledTextRendering each
			addPage(each)
		end)
	end
	
	/**
	 * \brief Add canvas for a page.
	 * 
	 * Canvas has to be of type Canvas.VIEW. Caller is responsible to remove all canvas if required.
	 */
	public func void addToCanvas(CanvasView canvas, int page, Point position)
		addToCanvas(canvas, page, position, null)
	end
	
	public func void addToCanvas(CanvasView canvas, int page, Point position, StyledTextDocumentUpdater updater)
		(pPages.getAt(page) cast StyledTextRendering).addToCanvas(canvas, position, updater)
	end
end
