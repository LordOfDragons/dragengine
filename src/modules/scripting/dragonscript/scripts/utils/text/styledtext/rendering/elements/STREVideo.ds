/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

namespace Dragengine.Utils.StyledText.Rendering.Elements

pin Dragengine.Gui
pin Dragengine.Scenery



/**
 * \brief Styled text render video element.
 */
class STREVideo extends STRElement
	/** \brief Updater. */
	public class VideoUpdater implements StyledTextDocumentUpdater.Updater
		private var VideoPlayer pVideoPlayer
		
		public func new( VideoPlayer videoPlayer )
			this.pVideoPlayer = videoPlayer
		end
		
		public func void update( float elapsed )
			this.pVideoPlayer.update( elapsed )
		end
	end
	
	
	private var Video pVideo
	
	
	
	/** \brief Create styled text render video element. */
	public func new()
	end
	
	
	
	/** \brief Video. */
	public func Video getVideo()
		return this.pVideo
	end
	
	/** \brief Set video. */
	public func void setVideo( Video video )
		this.pVideo = video
	end
	
	
	
	/** \brief Calculate size of element. */
	public func Point calculateSize()
		if this.pVideo == null
			return Point.new()
			
		else
			return this.pVideo.getSize()
		end
	end
	
	
	
	/**
	 * \brief Add canvas for each element.
	 * 
	 * Canvas has to be of type Canvas.VIEW. Caller is responsible to remove all canvas if required.
	 */
	public func void addToCanvas( CanvasView canvas, Point position, StyledTextDocumentUpdater updater )
		if this.pVideo == null
			return
		end
		
		var VideoPlayer videoPlayer = VideoPlayer.new()
		videoPlayer.setVideo( this.pVideo )
		videoPlayer.setLooping( true )
		videoPlayer.play()
		
		var CanvasVideoPlayer videoCanvas = CanvasVideoPlayer.new()
		videoCanvas.setVideoPlayer( videoPlayer )
		videoCanvas.setPosition( position + this.getPosition() )
		videoCanvas.setSize( this.pVideo.getSize() )
		
		videoCanvas.setOrder( canvas.getCanvasCount() cast float )
		canvas.addCanvas( videoCanvas )
		
		if updater != null
			updater.addUpdater( VideoUpdater.new( videoPlayer ) )
		end
	end
end
