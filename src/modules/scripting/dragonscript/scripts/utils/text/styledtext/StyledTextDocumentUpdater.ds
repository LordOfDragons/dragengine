/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

namespace Dragengine.Utils.StyledText

pin Dragengine.Gui
pin Dragengine.Scenery
pin Dragengine.Utils.StyledText.Definition
pin Dragengine.Utils.StyledText.Rendering
pin Dragengine.Utils.StyledText.Converter



/**
 * \brief Styled text document updater.
 *
 * Provides support for dynamic content in styled text documents. Updates certain canvas
 * resources if called. To use dynamic content updating create an instance of this class
 * and use it in a call to StyledTextDocument.addToCanvas(). Call update() on regular basis
 * like for example using FrameUpdater or Element.think() .
 */
class StyledTextDocumentUpdater
	/** \brief Updater. */
	public interface Updater
		/** \brief Update element. */
		func void update( float elapsed )
	end
	
	
	private var Array pUpdaters
	
	
	
	/** \brief Create styled text document. */
	public func new()
		this.pUpdaters = Array.new()
	end
	
	/** \brief Dispose of styled text document updater. */
	public func void dispose()
		this.pUpdaters = null
	end
	
	
	
	/** \brief Add updater. */
	public func void addUpdater( Updater updater )
		if updater == null
			throw EInvalidParam.new()
		end
		if not this.pUpdaters.has( updater )
			this.pUpdaters.add( updater )
		end
	end
	
	/** \brief Remove updater. */
	public func void removeUpdater( Updater updater )
		if this.pUpdaters == null
			return
		end
		if this.pUpdaters.has( updater )
			this.pUpdaters.remove( updater )
		end
	end
	
	/** \brief Remove all updaters. */
	public func void removeAllUpdater()
		this.pUpdaters = Array.new()
	end
	
	
	
	/** \brief Update elements. */
	public func void update( float elapsed )
		this.pUpdaters.forEach( block Updater each
			each.update( elapsed )
		end )
	end
end
