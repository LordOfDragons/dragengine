/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

namespace Dragengine.Utils.StyledText.Definition

pin Dragengine.Gui
pin Dragengine.Scenery
pin Dragengine.Utils.StyledText.Definition.Nodes



/**
 * \brief Styled text definition.
 */
class StyledTextDefinition
	private var Array pNodes
	private var Dictionary pStyles
	private var STDStyle pPageStyle
	private var STDStyle pDefaultStyle
	private var Point pPageSize
	
	
	
	/** \brief Create styled text definition. */
	public func new()
		this.pNodes = Array.new()
		this.pStyles = Dictionary.new()
		this.pPageStyle = STDStyle.new( "" )
		this.pDefaultStyle = STDStyle.new( "" )
		this.pPageSize = Point.new( 350, 500 )
	end
	
	/** \brief Create copy of styled text definition. */
	public func new( StyledTextDefinition definition )
		this.pNodes = definition.pNodes.map( block STDNode each
			return each.copy()
		end )
		this.pPageStyle = STDStyle.new( definition.pPageStyle )
		this.pDefaultStyle = STDStyle.new( definition.pDefaultStyle )
		this.pStyles = definition.pStyles.map( block String name, STDStyle style
			return STDStyle.new( style )
		end )
		this.pPageSize = definition.pPageSize
	end
	
	
	
	/** \brief Number of nodes. */
	public func int getNodeCount()
		return this.pNodes.getCount()
	end
	
	/** \brief Node at index. */
	public func STDNode getNodeAt( int index )
		return this.pNodes.getAt( index ) cast STDNode
	end
	
	/** \brief Add node. */
	public func void addNode( STDNode node )
		this.pNodes.add( node )
	end
	
	/** \brief Remove all nodes. */
	public func void removeAllNodes()
		this.pNodes.removeAll()
	end
	
	/** \brief Visit nodes with block with STDNode as parameter. */
	public func void forEachNode( Block ablock )
		this.pNodes.forEach( ablock )
	end
	
	/** \brief Visit nodes with visitor. */
	public func void visitNodes( STDNodeVisitor visitor )
		this.pNodes.forEach( block STDNode each
			each.visit( visitor )
		end )
	end
	
	
	
	/** \brief Number of styles. */
	public func int getStyleCount()
		return this.pStyles.getCount()
	end
	
	/** \brief Style with name is present. */
	public func bool hasStyleNamed( String name )
		return this.pStyles.has( name )
	end
	
	/** \brief Style with name or \em null if absent. */
	public func STDStyle getStyleNamed( String name )
		return this.pStyles.getAt( name, null ) cast STDStyle
	end
	
	/** \brief Add style replacing style with same name if present. */
	public func void addStyle( STDStyle style )
		this.pStyles.setAt( style.getName(), style )
	end
	
	/** \brief Remove all styles. */
	public func void removeAllStyles()
		this.pStyles.removeAll()
	end
	
	/** \brief Visit styles with block with STDStyle as parameter. */
	public func void forEachStyle( Block ablock )
		this.pStyles.forEachValue( ablock )
	end
	
	
	
	/** \brief Page style. */
	public func STDStyle getPageStyle()
		return this.pPageStyle
	end
	
	/** \brief Set page style. */
	public func void setPageStyle( STDStyle style )
		if style == null
			throw EInvalidParam.new()
		end
		this.pPageStyle = style
	end
	
	/** \brief Style to use for nodes not having a style set. */
	public func STDStyle getDefaultStyle()
		return this.pDefaultStyle
	end
	
	/** \brief Set style to use for nodes not having a style set. */
	public func void setDefaultStyle( STDStyle style )
		if style == null
			throw EInvalidParam.new()
		end
		this.pDefaultStyle = style
	end
	
	/**
	 * \brief Optimal page size in pixels.
	 * \details Using this page size results in an optimal document layout.
	 */
	public func Point getPageSize()
		return this.pPageSize
	end
	
	/**
	 * \brief Set optimal page size in pixels.
	 * \details Using this page size results in an optimal document layout.
	 */
	public func void setPageSize( Point pageSize )
		this.pPageSize = pageSize
	end
end
