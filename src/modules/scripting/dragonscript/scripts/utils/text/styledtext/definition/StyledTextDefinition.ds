/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

namespace Dragengine.Utils.StyledText.Definition

pin Dragengine.Gui
pin Dragengine.Scenery
pin Dragengine.Utils.StyledText.Definition.Nodes


/**
 * \brief Styled text definition.
 */
class StyledTextDefinition
	var Array pNodes
	var Dictionary pStyles
	var STDStyle pPageStyle
	var STDStyle pDefaultStyle
	var Point pPageSize
	
	
	/** \brief Create styled text definition. */
	func new()
		pNodes = Array.new()
		pStyles = Dictionary.new()
		pPageStyle = STDStyle.new("")
		pDefaultStyle = STDStyle.new("")
		pPageSize = Point.new(350, 500)
	end
	
	/** \brief Create copy of styled text definition. */
	func new(StyledTextDefinition definition) this(definition, true)
	end
	
	/**
	 * \brief Create copy of styled text definition.
	 * \version 1.29
	 */
	func new(StyledTextDefinition definition, bool deepCopy)
		pPageSize = definition.pPageSize
		
		if deepCopy
			pStyles = definition.pStyles.map(block String name, STDStyle style
				return STDStyle.new(style)
			end)
			pPageStyle = STDStyle.new(definition.pPageStyle)
			pDefaultStyle = STDStyle.new(definition.pDefaultStyle)
			pNodes = definition.pNodes.map(block STDNode each
				return each.copy()
			end)
			
		else
			pStyles = Dictionary.new(definition.pStyles)
			pPageStyle = definition.pPageStyle
			pDefaultStyle = definition.pDefaultStyle
			pNodes = Array.new(definition.pNodes)
		end
	end
	
	
	/** \brief Number of nodes. */
	func int getNodeCount()
		return pNodes.getCount()
	end
	
	/** \brief Node at index. */
	func STDNode getNodeAt(int index)
		return pNodes.getAt(index) cast STDNode
	end
	
	/** \brief Add node. */
	func void addNode(STDNode node)
		pNodes.add(node)
	end
	
	/** \brief Remove all nodes. */
	func void removeAllNodes()
		pNodes.removeAll()
	end
	
	/** \brief Visit nodes with block with STDNode as parameter. */
	func void forEachNode(Block ablock)
		pNodes.forEach(ablock)
	end
	
	/** \brief Visit nodes with visitor. */
	func void visitNodes(STDNodeVisitor visitor)
		pNodes.forEach(block STDNode each
			each.visit(visitor)
		end)
	end
	
	
	/** \brief Number of styles. */
	func int getStyleCount()
		return pStyles.getCount()
	end
	
	/** \brief Style with name is present. */
	func bool hasStyleNamed(String name)
		return pStyles.has(name)
	end
	
	/** \brief Style with name or \em null if absent. */
	func STDStyle getStyleNamed(String name)
		return pStyles.getAt(name, null) cast STDStyle
	end
	
	/** \brief Add style replacing style with same name if present. */
	func void addStyle(STDStyle style)
		pStyles.setAt(style.getName(), style)
	end
	
	/** \brief Remove all styles. */
	func void removeAllStyles()
		pStyles.removeAll()
	end
	
	/** \brief Visit styles with block with STDStyle as parameter. */
	func void forEachStyle(Block ablock)
		pStyles.forEachValue(ablock)
	end
	
	
	/** \brief Page style. */
	func STDStyle getPageStyle()
		return pPageStyle
	end
	
	/** \brief Set page style. */
	func void setPageStyle(STDStyle style)
		if style == null
			throw EInvalidParam.new()
		end
		pPageStyle = style
	end
	
	/** \brief Style to use for nodes not having a style set. */
	func STDStyle getDefaultStyle()
		return pDefaultStyle
	end
	
	/** \brief Set style to use for nodes not having a style set. */
	func void setDefaultStyle(STDStyle style)
		if style == null
			throw EInvalidParam.new()
		end
		pDefaultStyle = style
	end
	
	/**
	 * \brief Optimal page size in pixels.
	 * \details Using this page size results in an optimal document layout.
	 */
	func Point getPageSize()
		return pPageSize
	end
	
	/**
	 * \brief Set optimal page size in pixels.
	 * \details Using this page size results in an optimal document layout.
	 */
	func void setPageSize(Point pageSize)
		pPageSize = pageSize
	end
	
	
	/**
	 * \brief Import styled text definition content.
	 * \version 1.29
	 * 
	 * Only appends styles and nodes. Appended content is shared.
	 */
	func void import(StyledTextDefinition definition)
		pStyles.setAll(definition.pStyles)
		pNodes.addAll(definition.pNodes)
	end
	
	/**
	 * \brief Import copy of styled text definition content.
	 * \version 1.29
	 * 
	 * Only appends styles and nodes. Appended content is copied.
	 */
	func void importCopy(StyledTextDefinition definition)
		definition.pStyles.forEach(block String name, STDStyle style
			pStyles.setAt(name, STDStyle.new(style))
		end)
		definition.pNodes.forEach(block STDNode each
			pNodes.add(each.copy())
		end)
	end
end
