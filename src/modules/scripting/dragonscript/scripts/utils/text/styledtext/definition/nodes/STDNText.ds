/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

namespace Dragengine.Utils.StyledText.Definition.Nodes

pin Dragengine.Gui
pin Dragengine.Scenery



/**
 * \brief List of spans defining a span of text with potentially different styles.
 */
class STDNText extends STDNode
	/** \brief Spans as list of STDNTextSpan. */
	private var Array pSpans
	
	
	
	/** \brief Create styled text definition text node. */
	public func new()
		this.pSpans = Array.new()
	end
	
	/** \brief Create copy of styled text definition text node. */
	public func new( STDNText node ) super( node )
		this.pSpans = node.pSpans.map( block STDNTextSpan each
			return STDNTextSpan.new( each )
		end )
	end
	
	
	
	/** \brief Number of spans. */
	public func int getSpanCount()
		return this.pSpans.getCount()
	end
	
	/** \brief Span at index. */
	public func STDNTextSpan getSpanAt( int index )
		return this.pSpans.getAt( index ) cast STDNTextSpan
	end
	
	/** \brief Add span. */
	public func void addSpan( STDNTextSpan span )
		if span == null
			throw EInvalidParam.new()
		end
		this.pSpans.add( span )
	end
	
	/** \brief Remove all spans. */
	public func void removeAllSpans()
		this.pSpans.removeAll()
	end
	
	/** \brief Visit spans with block with STDNTextSpan as parameter. */
	public func void forEachSpan( Block ablock )
		this.pSpans.forEach( ablock )
	end
	
	
	
	/** \brief Create copy of styled text definition node. */
	public func STDNode copy()
		return STDNText.new( this )
	end
	
	/** \brief Visit node. */
	public func void visit( STDNodeVisitor visitor )
		visitor.visitText( this )
	end
end
