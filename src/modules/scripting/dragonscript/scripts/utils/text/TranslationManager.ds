/* 
 * Drag[en]gine DragonScript Script Module
 *
 * Copyright (C) 2020, Roland PlÃ¼ss (roland@rptd.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */


namespace Dragengine.Utils



/**
 * \brief Manage language translator and language packs.
 * 
 * Provides support to load language packs into memory and seleting one of them to
 * translate texts with. Upon switching the active language pack users have to call
 * the translation methods again to obtain the new text.
 */
class TranslationManager
	private var Dictionary pLanguagePacks
	private var LanguagePack pActiveLanguagePack
	private var LanguagePack pFallbackLanguagePack
	private var UnicodeString pTextNoLanguagePack
	
	
	
	/** \brief Create translation manager. */
	public func new()
		pLanguagePacks = Dictionary.new()
		pTextNoLanguagePack = UnicodeString.newFromUTF8("Missing Language Pack")
	end
	
	
	
	/**
	 * \brief Get TranslationManager from BaseGameApp.
	 * \version 1.16
	 * 
	 * Convenience method for BaseGameApp.getApp().getTranslationManager() .
	 */
	public static func TranslationManager get()
		return BaseGameApp.getApp().getTranslationManager()
	end
	
	
	
	/** \brief Translation for entry name or missing text if absent. */
	public func UnicodeString translate(String name)
		var UnicodeString text = translate(name, null)
		
		if text != null
			return text
			
		elif pActiveLanguagePack != null
			return pActiveLanguagePack.getMissingText()
			
		elif pFallbackLanguagePack != null
			return pFallbackLanguagePack.getMissingText()
			
		else
			return pTextNoLanguagePack
		end
	end
	
	/** \brief Translation for entry name or default value if absent. */
	public func UnicodeString translate(String name, UnicodeString defaultValue)
		if pActiveLanguagePack != null
			var UnicodeString text = pActiveLanguagePack.translate(name, null)
			if text != null
				return text
			end
		end
		
		if pFallbackLanguagePack != null
			var UnicodeString text = pFallbackLanguagePack.translate(name, null)
			if text != null
				return text
			end
		end
		
		return defaultValue
	end
	
	/**
	 * \brief Translate text if it starts with a translation character.
	 * \version 1.16
	 *
	 * This call can be used for plain text and text prefixed with a marker
	 * character. If text is empty or the first character in text does not
	 * match the translation character the text is returned unmodified.
	 * Otherwise the entire text after the translation character converted to
	 * UTF-8 encoding is used as name in a call to translate(String).
	 * 
	 * Choose the marker character to not be found at the start of any text
	 * you can possibly encounter. A typical choice is '@'.
	 */
	public func UnicodeString translateIf(UnicodeString text, int marker)
		if text.getLength() > 0 and text.getCharacterAt(0) == marker
			return translate(text.getRight(text.getLength() - 1).toUTF8())

		else
			return text
		end
	end
	
	/**
	 * \brief Translation text if it starts with a translation character.
	 * \version 1.16
	 *
	 * This call can be used for plain text and text prefixed with a marker
	 * character. If text is empty or the first character in text does not
	 * match the translation character the text is returned unmodified.
	 * Otherwise the entire text after the translation character converted to
	 * UTF-8 encoding is used as name in a call to translate(String, UnicodeString).
	 * 
	 * Choose the marker character to not be found at the start of any text
	 * you can possibly encounter. A typical choice is '@'.
	 */
	public func UnicodeString translateIf(UnicodeString text, int marker, UnicodeString defaultValue)
		if text.getLength() > 0 and text.getCharacterAt(0) == marker
			return translate(text.getRight(text.getLength() - 1).toUTF8(), defaultValue)

		else
			return text
		end
	end
	
	
	
	/** \brief Missing language pack translation. */
	public func UnicodeString getTextNoLanguagePack()
		return pTextNoLanguagePack
	end
	
	/** \brief Set missing language pack translation. */
	public func void setTextNoLanguagePack(UnicodeString text)
		pTextNoLanguagePack = text
	end
	
	
	
	/** \brief Number of language packs. */
	public func int getCount()
		return pLanguagePacks.getCount()
	end
	
	/**
	 * \brief Named language pack or \em null if absent.
	 * \deprecated Use getWithId.
	 */
	public func LanguagePack getNamed(UnicodeString name)
		return pLanguagePacks.find(block String key, LanguagePack value
			return value.getName().equals(name)
		end) cast LanguagePack
	end
	
	/**
	 * \brief Language pack with identifier or \em null if absent.
	 * \version 1.16
	 */
	public func LanguagePack getWithId(String identifier)
		return pLanguagePacks.getAt(identifier, null) cast LanguagePack
	end
	
	/** \brief Add language pack. */
	public func void add(LanguagePack languagePack)
		if getWithId(languagePack.getIdentifier()) != null
			throw EInvalidParam.new()
		end
		pLanguagePacks.setAt(languagePack.getIdentifier(), languagePack)
	end
	
	/** \brief Remove all language packs. */
	public func void removeAll()
		pLanguagePacks.removeAll()
	end
	
	/**
	 * \brief Get array of language pack names as array of UnicodeString.
	 * \deprecated Use getIdentifiers()
	 */
	public func Array getNames()
		return pLanguagePacks.getValues().map(block LanguagePack each
			return each.getName()
		end)
	end
	
	/**
	 * \brief Get array of language pack identifier as array of String.
	 * \version 1.16
	 */
	public func Array getIdentifiers()
		return pLanguagePacks.getKeys()
	end
	
	/** \brief Visit language packs with block with parameter LanguagePack. */
	public func void forEach(Block ablock)
		pLanguagePacks.forEachValue(ablock)
	end
	
	
	
	/** \brief Active language pack. */
	public func LanguagePack getActive()
		return pActiveLanguagePack
	end
	
	/** \brief Set active language pack. */
	public func void setActive(LanguagePack languagePack)
		pActiveLanguagePack = languagePack
	end
	
	/**
	 * \brief Set active language pack by name.
	 * \deprecated Use setActiveWithId.
	 */
	public func void setActiveNamed(UnicodeString name)
		var LanguagePack languagePack = getNamed(name)
		if languagePack == null
			throw EInvalidParam.new()
		end
		setActive(languagePack)
	end
	
	/**
	 * \brief Set active language pack by identifier.
	 * \version 1.16
	 */
	public func void setActiveWithId(String identifier)
		var LanguagePack languagePack = getWithId(identifier)
		if languagePack == null
			throw EInvalidParam.new()
		end
		setActive(languagePack)
	end
	
	/**
	 * \brief Set active language pack by name if present.
	 * \deprecated Use setActiveWithIdIfPresent.
	 */
	public func void setActiveNamedIfPresent(UnicodeString name)
		var LanguagePack languagePack = getNamed(name)
		if languagePack != null
			setActive(languagePack)
		end
	end
	
	/**
	 * \brief Set active language pack by identifier if present.
	 * \version 1.16
	 */
	public func void setActiveWithIdIfPresent(String identifier)
		var LanguagePack languagePack = getWithId(identifier)
		if languagePack != null
			setActive(languagePack)
		end
	end
	
	
	
	/**
	 * \brief Fallback language pack.
	 * \version 1.16
	 */
	public func LanguagePack getFallback()
		return pFallbackLanguagePack
	end
	
	/**
	 * \brief Set fallback language pack.
	 * \version 1.16
	 */
	public func void setFallback(LanguagePack languagePack)
		pFallbackLanguagePack = languagePack
	end
	
	/**
	 * \brief Set fallback language pack by identifier.
	 * \version 1.16
	 */
	public func void setFallbackWithId(String identifier)
		var LanguagePack languagePack = getWithId(identifier)
		if languagePack == null
			throw EInvalidParam.new()
		end
		setFallback(languagePack)
	end
	
	/**
	 * \brief Set fallback language pack by identifier if present.
	 * \version 1.16
	 */
	public func void setFallbackWithIdIfPresent(String identifier)
		var LanguagePack languagePack = getWithId(identifier)
		if languagePack != null
			setFallback(languagePack)
		end
	end
	
	
	
	/**
	 * \brief Scan directory for language pack files loading and adding them.
	 * 
	 * After calling this method call setActiveLanguagePack to choose one of the loaded
	 * language packs to use.
	 * 
	 * \param directory Absolute path to directory to scan for files.
	 * \param recursive If true scans also in all child directories.
	 */
	public func void addFromDirectory(String directory, bool recursive)
		addFromDirectory(directory, "*.delangpack", recursive)
	end
	
	/**
	 * \brief Scan directory for language pack files loading and adding them.
	 * 
	 * After calling this method call setActiveLanguagePack to choose one of the loaded
	 * language packs to use.
	 * 
	 * \param directory Absolute path to directory to scan for files.
	 * \param pattern File pattern to match. Has to be of the form "*.extension"
	 * \param recursive If true scans also in all child directories.
	 */
	public func void addFromDirectory(String directory, String pattern, bool recursive)
		FileSystem.searchFiles(directory, recursive, block String each, FileType type
			if type == FileType.file and FileSystem.pathMatchesPattern(File.new(each).getName(), pattern)
				add(LanguagePack.new(each))
			end
			return true
		end)
	end
end
