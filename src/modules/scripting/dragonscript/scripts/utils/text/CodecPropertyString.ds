/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */


namespace Dragengine.Utils

pin Dragengine.Gui
pin Dragengine.Scenery


/**
 * \brief Provides support for encoding/decoding various data types from/to property strings.
 * 
 * \par Shape List Encoding
 * 
 * Shape list strings contain one or more shape definitions separated by whitespaces. The accepted separaters
 * can be modified using CodecPropertyString.setTokenSeparators().
 * > \em shape1 whitespaces \em shape2 whitespaces ... \em shapeN
 * 
 * Shape definitions contain the shape type and a list of parameters separated by colons without spaces. The
 * separator can be modified using CodecPropertyString.setShapeParameterSeparator().
 * > \em shapeType : \em parameter1 : \em parameter2 : ... \em parameterN
 * 
 * Shape parameters contain the parameter name and the parameter values separated by comma without spaces.
 * The separator can be modified using CodecPropertyString.setShapeValueSeparator().
 * > \em parameterName , \em value1 , \em value2 , ... \em valueN
 * 
 * Values are decimal or integer values. An example box shape definition would look like this:
 * > box:position,0,0.5,0:extends,2,1,0.5
 * 
 * The following table show the supported shapes and parameters. The shape type and parameter name colon contains
 * the exact string to use for the \em shapeType and \em parameterName.
 * | Shape Type | Parameter Name | Values | Description |
 * | ---------- | -------------- | ------ | ----------- |
 * | sphere | position | x, y, z | Position of center of shape |
 * | sphere | radius | radius | Radius of sphere |
 * | box | position | x, y, z | Position of center of box |
 * | box | rotation | x, y, z | Rotation of box in degrees applied in the order Z-Axis then X-Axis then Y-Axis |
 * | box | extends | x, y, z | Extends from center to box border. These are half the dimension of the box |
 * | cylinder | position | x, y, z | Position of center of cylinder |
 * | cylinder | rotation | x, y, z | Rotation of cylinder in degrees applied in the order Z-Axis then X-Axis then Y-Axis |
 * | cylinder | height | height | Height of cylinder from center to the top respective bottom |
 * | cylinder | radius | top, bottom | Radius of top and bottom cap of cylinder. Use different radi for tapered cylinders |
 * | cylinder | topAxisScaling | x, y | Scaling of top cap of cylinder. Allows for squeezed cylinders |
 * | cylinder | bottomAxisScaling | x, y | Scaling of bottom cap of cylinder. Allows for squeezed cylinders |
 * | capsule | position | x, y, z | Position of center of capsule |
 * | capsule | rotation | x, y, z | Rotation of capsule in degrees applied in the order Z-Axis then X-Axis then Y-Axis |
 * | capsule | height | height | Height of capsule from center to the top respective bottom |
 * | capsule | radius | top, bottom | Radius of top and bottom cap of capsule. Use different radi for tapered capsules |
 * | capsule | topAxisScaling | x, y | Scaling of top cap of capsule. Allows for squeezed capsules |
 * | capsule | bottomAxisScaling | x, y | Scaling of bottom cap of capsule. Allows for squeezed capsules |
 * | hull | position | x, y, z | Position of center of hull |
 * | hull | rotation | x, y, z | Rotation of hull in degrees applied in the order Z-Axis then X-Axis then Y-Axis |
 * | hull | points | x1, y1, z1, ..., xN, yN, zN | Hull points |
 * 
 */
class CodecPropertyString
	/** \brief Basic separators for tokens in property strings containing multiple values. */
	var String pTokenSeparators
	
	/** \brief Separator for key and value in dictionaries. */
	var byte pKeyValueSeparator
	
	/** \brief Shape parameter separator character. */
	var byte pShapeParameterSeparator
	
	/** \brief Shape value separator character. */
	var byte pShapeValueSeparator
	
	/** \brief Character to separate tokens with for encoding. */
	var byte pEncodeTokenSeparator
	
	
	static fixed var Array pTrueValues = Array.newWith("true", "yes", "1")
	
	
	/** \brief Create codec. */
	func new()
		pTokenSeparators = " \t\n\r"
		pKeyValueSeparator = ':'
		pShapeParameterSeparator = ':'
		pShapeValueSeparator = ','
		pEncodeTokenSeparator = ' '
	end
	
	
	
	/**
	 * \brief Basic separators for tokens in property strings containing multiple values.
	 * \version 1.23
	 */
	func String getTokenSeparators()
		return pTokenSeparators
	end
	
	/**
	 * \brief Set basic separators for tokens in property strings containing multiple values.
	 * \version 1.23
	 */
	func void setTokenSeparators(String separators)
		if separators == null
			throw ENullPointer.new("separators")
		end
		pTokenSeparators = separators
	end
	
	/**
	 * \brief Separator for key and value in dictionaries.
	 * \version 1.23
	 */
	func byte getKeyValueSeparator()
		return pKeyValueSeparator
	end
	
	/**
	 * \brief Set separator for key and value in dictionaries.
	 * \version 1.23
	 */
	func void setKeyValueSeparator(byte separator)
		pKeyValueSeparator = separator
	end
	
	/**
	 * \brief Shape parameter separator character.
	 * \version 1.23
	 */
	func byte getShapeParameterSeparator()
		return pShapeParameterSeparator
	end
	
	/**
	 * \brief Set shape parameter separator character.
	 * \version 1.23
	 */
	func void setShapeParameterSeparator(byte separator)
		pShapeParameterSeparator = separator
	end
	
	/**
	 * \brief Shape value separator character.
	 * \version 1.23
	 */
	func byte getShapeValueSeparator()
		return pShapeValueSeparator
	end
	
	/**
	 * \brief Set shape value separator character.
	 * \version 1.23
	 */
	func void setShapeValueSeparator(byte separator)
		pShapeValueSeparator = separator
	end
	
	/**
	 * \brief Character to separate tokens with for encoding.
	 * \version 1.23
	 */
	func byte getEncodeTokenSeparator()
		return pEncodeTokenSeparator
	end
	
	/**
	 * \brief Set character to separate tokens with for encoding.
	 * \version 1.23
	 */
	func void setEncodeTokenSeparator(byte separator)
		pEncodeTokenSeparator = separator
	end
	
	
	
	/**
	 * \brief Value equals "true", "yes" or "1".
	 * \version 1.25
	 */
	func bool isTrue(String value)
		return pTrueValues.has(value)
	end
	
	/**
	 * \brief Value does not equal "true", "yes" or "1".
	 * \version 1.25
	 */
	func bool isFalse(String value)
		return not pTrueValues.has(value)
	end
	
	
	
	/**
	 * \brief Decode property string into a list of floating point values.
	 * \version 1.26
	 */
	func Array decodeFloatList(String string)
		return string.split(pTokenSeparators).map(block String each
			return each.toFloat()
		end)
	end
	
	/**
	 * \brief Decode property string into a list of integer point values.
	 * \version 1.26
	 */
	func Array decodeIntList(String string)
		return string.split(pTokenSeparators).map(block String each
			return each.toInt()
		end)
	end
	
	/** \brief Decode property string into a fixed sized list of floating point values. */
	func Array decodeFixedFloatList(String string, int valueCount)
		var Array list = string.split(pTokenSeparators)
		var int i, count = list.getCount()
		var Array result = Array.new()
		
		if count > valueCount
			count = valueCount
		end
		
		for i = 0 to count
			result.add((list.getAt(i) cast String).toFloat())
		end
		
		return result
	end
	
	/** \brief Decode property string into a fixed sized list of integer point values. */
	func Array decodeFixedIntList(String string, int valueCount) 
		var Array list = string.split(pTokenSeparators)
		var int i, count = list.getCount()
		var Array result = Array.new()
		
		if count > valueCount
			count = valueCount
		end
		
		for i = 0 to count
			result.add((list.getAt(i) cast String).toInt())
		end
		
		return result
	end
	
	/** \brief Decode property string into a list of strings. */
	func Array decodeStringList(String string) 
		var int len = string.getLength()
		var Array list = Array.new()
		var int position = 0
		var String token
		var byte character
		var int last
		
		while position < len
			while position < len and pTokenSeparators.find(string.getAt(position), 0) != -1
				position++
			end
			
			if position == len
				break
			end
			
			token = ""
			
			if string.getAt(position) == '"'
				position++
				last = position
				
				while position < len
					character = string.getAt(position)
					
					if character == '"'
						if position > last
							token = token + string.substring(last, position)
						end
						list.add(token)
						token = null
						
						position++
						
						break
						
					elif character == '\\'
						if position > last
							token = token + string.substring(last, position)
						end
						token = token + character
						
						position++
						
						last = position + 1
						
					//else
						// non escaped string
					end
					
					position++
				end
				
			// this is a non-quoted token
			else
				last = position
				while position < len and pTokenSeparators.find(string.getAt(position)) == -1
					position++
				end
				
				if position > last
					token = token + string.substring(last, position)
				end
				list.add(token)
				token = null
			end
			
			position++
		end
		
		return list
	end
	
	/**
	 * \brief Decode property string into a dictionary of key/value strings.
	 * \details Key/value pairs are obtained using decodeStringList(). Key and value
	 *          are separated by pKeyValueSeparator.
	 */
	func Dictionary decodeStringDictionary(String string) 
		var Dictionary dict = Dictionary.new()
		
		decodeStringList(string).forEach(block String pair
			var int index = pair.find(pKeyValueSeparator)
			dict.setAt(pair.substring(0, index), pair.substring(index + 1))
		end)
		
		return dict
	end
	
	/** \brief Decode property string into a 3-component vector. */
	func Vector decodeVector(String string)
		var Array result = decodeFixedFloatList(string, 3)
		
		if result.getCount() != 3
			throw EInvalidParam.new()
		end
		
		return Vector.new(result.getAt(0) cast float, result.getAt(1) cast float, result.getAt(2) cast float)
	end
	
	/** \brief Decode property string into a 3-component dvector. */
	func DVector decodeDVector(String string)
		var Array result = decodeFixedFloatList(string, 3)
		
		if result.getCount() != 3
			throw EInvalidParam.new()
		end
		
		return DVector.new(result.getAt(0) cast float, result.getAt(1) cast float, result.getAt(2) cast float)
	end
	
	/** \brief Decode property string into a 2-component vector. */
	func Vector2 decodeVector2(String string)
		var Array result = decodeFixedFloatList(string, 2)
		
		if result.getCount() != 2
			throw EInvalidParam.new()
		end
		
		return Vector2.new(result.getAt(0) cast float, result.getAt(1) cast float)
	end
	
	/** \brief Decode property string into a 4-component vector. */
	/*
	func Vector4 decodeVector4(String string)
		var Array result = decodeFixedFloatList(string, 4)
		
		if result.getCount() != 4
			throw EInvalidParam.new()
		end
		
		return Vector4.new(result.getAt(0) cast float, result.getAt(1) cast float, result.getAt(2) cast float, result.getAt(3) cast float)
	end
	*/
	
	/** \brief Decode property string into a 4-component dvector. */
	/*
	func DVector4 decodeDVector4(String string)
		var Array result = decodeFixedFloatList(string, 4)
		
		if result.getCount() != 4
			throw EInvalidParam.new()
		end
		
		return DVector4.new(result.getAt(0) cast float, result.getAt(1) cast float, result.getAt(2) cast float, result.getAt(3) cast float)
	end
	*/
	
	/** \brief Decode property string into a floating point rectangular area. */
	func FloatRectArea decodeFloatRectArea(String string)
		var Array result = decodeFixedFloatList(string, 4)
		
		if result.getCount() != 4
			throw EInvalidParam.new()
		end
		
		return FloatRectArea.new(result.getAt(0) cast float, result.getAt(1) cast float, \
			result.getAt(2) cast float, result.getAt(3) cast float)
	end
	
	/** \brief Decode property string into a rectangular area. */
	func RectArea decodeRectArea(String string)
		var Array result = decodeFixedIntList(string, 4)
		
		if result.getCount() != 4
			throw EInvalidParam.new()
		end
		
		return RectArea.new(result.getAt(0) cast int, result.getAt(1) cast int, \
			result.getAt(2) cast int, result.getAt(3) cast int)
	end
	
	/** \brief Decode property string into a 2-component point. */
	func Point decodePoint(String string)
		var Array result = decodeFixedIntList(string, 2)
		
		if result.getCount() != 2
			throw EInvalidParam.new()
		end
		
		return Point.new(result.getAt(0) cast int, result.getAt(1) cast int)
	end
	
	/** \brief Decode property string into a 3-component color. */
	func Color decodeColor3(String string)
		var Array result = decodeFixedFloatList(string, 3)
		
		if result.getCount() != 3
			throw EInvalidParam.new()
		end
		
		return Color.new(result.getAt(0) cast float, result.getAt(1) cast float, result.getAt(2) cast float)
	end
	
	/**
	 * \brief Decode property string into a 4-component color.
	 * 
	 * Accepts also 3-component color in which case alpha is 1.
	 */
	func Color decodeColor4(String string)
		var Array result = decodeFixedFloatList(string, 4)
		
		if result.getCount() == 4
			return Color.new(result.getAt(0) cast float, result.getAt(1) cast float, \
				result.getAt(2) cast float, result.getAt(3) cast float)
			
		elif result.getCount() == 3
			return Color.new(result.getAt(0) cast float, \
				result.getAt(1) cast float, result.getAt(2) cast float)
			
		else
			throw EInvalidParam.new()
		end
	end
	
	/** \brief Decode property string into a shape list. */
	func ShapeList decodeShapeList(String string)
		var Array tokenShapeList = string.split(pTokenSeparators)
		var ShapeList shapeList = ShapeList.new()
		var float x, y, z
		var int i, j, k
		
		var int tokenSphereCount = tokenShapeList.getCount()
		
		for i = 0 to tokenSphereCount
			var Array tokenParamList = (tokenShapeList.getAt(i) cast String).splitExact(pShapeParameterSeparator)
			var String tokenShapeType = tokenParamList.getAt(0) cast String
			var int tokenParamCount = tokenParamList.getCount()
			
			if tokenShapeType.equals("sphere")
				var Vector position = Vector.new()
				var float radius = 1.0
				
				for j = 1 to tokenParamCount
					var Array tokenValueList = (tokenParamList.getAt(j) cast String).splitExact(pShapeValueSeparator)
					var String tokenParamName = tokenValueList.getAt(0) cast String
					var int tokenValueCount = tokenValueList.getCount()
					
					if tokenParamName.equals("position")
						if tokenValueCount != 4
							throw EInvalidParam.new()
						end
						
						x = (tokenValueList.getAt(1) cast String).toFloat()
						y = (tokenValueList.getAt(2) cast String).toFloat()
						z = (tokenValueList.getAt(3) cast String).toFloat()
						position = Vector.new(x, y, z)
						
					elif tokenParamName.equals("radius")
						if tokenValueCount != 2
							throw EInvalidParam.new()
						end
						
						radius = (tokenValueList.getAt(1) cast String).toFloat()
						
					else
						throw EInvalidParam.new()
					end
				end
				
				//BaseGameApp.getApp().getConsole().addMessage("sphere: position=" + position + " radius=" + radius + "\n")
				shapeList.addSphere(position, radius)
				
			elif tokenShapeType.equals("box")
				var Quaternion orientation = Quaternion.new()
				var Vector position = Vector.new()
				var Vector bextends = Vector.new()
				
				for j = 1 to tokenParamCount
					var Array tokenValueList = (tokenParamList.getAt(j) cast String).splitExact(pShapeValueSeparator)
					var String tokenParamName = tokenValueList.getAt(0) cast String
					var int tokenValueCount = tokenValueList.getCount()
					
					if tokenParamName.equals("position")
						if tokenValueCount != 4
							throw EInvalidParam.new()
						end
						
						x = (tokenValueList.getAt(1) cast String).toFloat()
						y = (tokenValueList.getAt(2) cast String).toFloat()
						z = (tokenValueList.getAt(3) cast String).toFloat()
						position = Vector.new(x, y, z)
						
					elif tokenParamName.equals("rotation")
						if tokenValueCount != 4
							throw EInvalidParam.new()
						end
						
						x = (tokenValueList.getAt(1) cast String).toFloat()
						y = (tokenValueList.getAt(2) cast String).toFloat()
						z = (tokenValueList.getAt(3) cast String).toFloat()
						orientation = Matrix.newRotation(x, y, z).toQuaternion()
						
					elif tokenParamName.equals("extends")
						if tokenValueCount != 4
							throw EInvalidParam.new()
						end
						
						x = (tokenValueList.getAt(1) cast String).toFloat()
						y = (tokenValueList.getAt(2) cast String).toFloat()
						z = (tokenValueList.getAt(3) cast String).toFloat()
						bextends = Vector.new(x, y, z)
						
					else
						throw EInvalidParam.new()
					end
				end
				
				//BaseGameApp.getApp().getConsole().addMessage("box: position=" + position + " extends=" + bextends + " orientation=" + orientation + "\n")
				shapeList.addBox(position, bextends, orientation)
				
			elif tokenShapeType.equals("cylinder")
				var Vector2 bottomAxisScaling = Vector2.new(1.0, 1.0)
				var Vector2 topAxisScaling = Vector2.new(1.0, 1.0)
				var Quaternion orientation = Quaternion.new()
				var Vector position = Vector.new()
				var float bottomRadius = 1.0
				var float topRadius = 1.0
				var float height = 1.0
				
				for j = 1 to tokenParamCount
					var Array tokenValueList = (tokenParamList.getAt(j) cast String).splitExact(pShapeValueSeparator)
					var String tokenParamName = tokenValueList.getAt(0) cast String
					var int tokenValueCount = tokenValueList.getCount()
					
					if tokenParamName.equals("position")
						if tokenValueCount != 4
							throw EInvalidParam.new()
						end
						
						x = (tokenValueList.getAt(1) cast String).toFloat()
						y = (tokenValueList.getAt(2) cast String).toFloat()
						z = (tokenValueList.getAt(3) cast String).toFloat()
						position = Vector.new(x, y, z)
						
					elif tokenParamName.equals("rotation")
						if tokenValueCount != 4
							throw EInvalidParam.new()
						end
						
						x = (tokenValueList.getAt(1) cast String).toFloat()
						y = (tokenValueList.getAt(2) cast String).toFloat()
						z = (tokenValueList.getAt(3) cast String).toFloat()
						orientation = Matrix.newRotation(x, y, z).toQuaternion()
						
					elif tokenParamName.equals("height")
						if tokenValueCount != 2
							throw EInvalidParam.new()
						end
						
						height = (tokenValueList.getAt(1) cast String).toFloat()
						
					elif tokenParamName.equals("radius")
						if tokenValueCount != 3
							throw EInvalidParam.new()
						end
						
						topRadius = (tokenValueList.getAt(1) cast String).toFloat()
						bottomRadius = (tokenValueList.getAt(2) cast String).toFloat()
						
					elif tokenParamName.equals("topAxisScaling")
						if tokenValueCount != 3
							throw EInvalidParam.new()
						end
						
						x = (tokenValueList.getAt(1) cast String).toFloat()
						y = (tokenValueList.getAt(2) cast String).toFloat()
						topAxisScaling = Vector2.new(x, y)
						
					elif tokenParamName.equals("bottomAxisScaling")
						if tokenValueCount != 3
							throw EInvalidParam.new()
						end
						
						x = (tokenValueList.getAt(1) cast String).toFloat()
						y = (tokenValueList.getAt(2) cast String).toFloat()
						bottomAxisScaling = Vector2.new(x, y)
						
					else
						throw EInvalidParam.new()
					end
				end
				
				shapeList.addCylinder(height * 0.5, topRadius, bottomRadius, \
					topAxisScaling, bottomAxisScaling, position, orientation)
				
			elif tokenShapeType.equals("capsule")
				var Vector2 bottomAxisScaling = Vector2.new(1.0, 1.0)
				var Vector2 topAxisScaling = Vector2.new(1.0, 1.0)
				var Quaternion orientation = Quaternion.new()
				var Vector position = Vector.new()
				var float bottomRadius = 1.0
				var float topRadius = 1.0
				var float height = 1.0
				
				for j = 1 to tokenParamCount
					var Array tokenValueList = (tokenParamList.getAt(j) cast String).splitExact(pShapeValueSeparator)
					var String tokenParamName = tokenValueList.getAt(0) cast String
					var int tokenValueCount = tokenValueList.getCount()
					
					if tokenParamName.equals("position")
						if tokenValueCount != 4
							throw EInvalidParam.new()
						end
						
						x = (tokenValueList.getAt(1) cast String).toFloat()
						y = (tokenValueList.getAt(2) cast String).toFloat()
						z = (tokenValueList.getAt(3) cast String).toFloat()
						position = Vector.new(x, y, z)
						
					elif tokenParamName.equals("rotation")
						if tokenValueCount != 4
							throw EInvalidParam.new()
						end
						
						x = (tokenValueList.getAt(1) cast String).toFloat()
						y = (tokenValueList.getAt(2) cast String).toFloat()
						z = (tokenValueList.getAt(3) cast String).toFloat()
						orientation = Matrix.newRotation(x, y, z).toQuaternion()
						
					elif tokenParamName.equals("height")
						if tokenValueCount != 2
							throw EInvalidParam.new()
						end
						
						height = (tokenValueList.getAt(1) cast String).toFloat()
						
					elif tokenParamName.equals("radius")
						if tokenValueCount != 3
							throw EInvalidParam.new()
						end
						
						topRadius = (tokenValueList.getAt(1) cast String).toFloat()
						bottomRadius = (tokenValueList.getAt(2) cast String).toFloat()
						
					elif tokenParamName.equals("topAxisScaling")
						if tokenValueCount != 3
							throw EInvalidParam.new()
						end
						
						x = (tokenValueList.getAt(1) cast String).toFloat()
						y = (tokenValueList.getAt(2) cast String).toFloat()
						topAxisScaling = Vector2.new(x, y)
						
					elif tokenParamName.equals("bottomAxisScaling")
						if tokenValueCount != 3
							throw EInvalidParam.new()
						end
						
						x = (tokenValueList.getAt(1) cast String).toFloat()
						y = (tokenValueList.getAt(2) cast String).toFloat()
						bottomAxisScaling = Vector2.new(x, y)
						
					else
						throw EInvalidParam.new()
					end
				end
				
				shapeList.addCapsule(height * 0.5, topRadius, bottomRadius, \
					topAxisScaling, bottomAxisScaling, position, orientation)
				
			elif tokenShapeType.equals("hull")
				var Quaternion orientation = Quaternion.new()
				var Vector position = Vector.new()
				var Array points = Array.new()
				
				for j = 1 to tokenParamCount
					var Array tokenValueList = (tokenParamList.getAt(j) cast String).splitExact(pShapeValueSeparator)
					var String tokenParamName = tokenValueList.getAt(0) cast String
					var int tokenValueCount = tokenValueList.getCount()
					
					if tokenParamName.equals("position")
						if tokenValueCount != 4
							throw EInvalidParam.new()
						end
						
						x = (tokenValueList.getAt(1) cast String).toFloat()
						y = (tokenValueList.getAt(2) cast String).toFloat()
						z = (tokenValueList.getAt(3) cast String).toFloat()
						position = Vector.new(x, y, z)
						
					elif tokenParamName.equals("rotation")
						if tokenValueCount != 4
							throw EInvalidParam.new()
						end
						
						x = (tokenValueList.getAt(1) cast String).toFloat()
						y = (tokenValueList.getAt(2) cast String).toFloat()
						z = (tokenValueList.getAt(3) cast String).toFloat()
						orientation = Matrix.newRotation(x, y, z).toQuaternion()
						
					elif tokenParamName.equals("points")
						if (tokenValueCount - 1) % 3 != 0
							throw EInvalidParam.new()
						end
						
						k = 1
						while k < tokenValueCount
							x = (tokenValueList.getAt(k++) cast String).toFloat()
							y = (tokenValueList.getAt(k++) cast String).toFloat()
							z = (tokenValueList.getAt(k++) cast String).toFloat()
							points.add(Vector.new(x, y, z))
						end
						
					else
						throw EInvalidParam.new()
					end
				end
				
				shapeList.addHull(points, position, orientation)
				
			else
				throw EInvalidParam.new()
			end
		end
		
		return shapeList
	end
	
	/**
	 * \brief Decode \ref LayerMask.
	 * \version 1.25
	 * 
	 * Value is encoded as "bit1 bit2 ... bitN".
	 */
	func LayerMask decodeLayerMask(String value)
		var LayerMask mask = LayerMask.new()
		value.split(' ').forEach(block String each
			mask.setBit(each.toInt())
		end)
		return mask
	end
	
	/**
	 * \brief Decode \ref CollisionFilter.
	 * \version 1.25
	 * 
	 * Value is encoded either as "category:filter", "category" or empty string.
	 * 
	 * Empty string creates collision filter with empty category and full filter.
	 * 
	 * Second form is the same as first form with filter equal to category.
	 * 
	 * Category and filter decode the same way as \ref #decodeLayerMask().
	 */
	func CollisionFilter decodeCollisionFilter(String value)
		var Array parts = value.split(':')
		
		if parts.getCount() == 0
			return CollisionFilter.new()
			
		elif parts.getCount() == 1
			return CollisionFilter.new(decodeLayerMask(parts.getAt(0) cast String))
			
		else
			return CollisionFilter.new(decodeLayerMask(\
				parts.getAt(0) cast String), decodeLayerMask(parts.getAt(1) cast String))
		end
	end
	
	
	
	/** \brief Encode a string list into a property string. */
	func String encodeStringList(Array list)
		var int separatorCount = pTokenSeparators.getLength()
		var int count = list.getCount()
		var String string = ""
		var int i, j, subcount
		var bool quoteString
		var String lstring
		
		for i = 0 to count
			lstring = list.getAt(i) cast String
			
			if i > 0
				string = string + pEncodeTokenSeparator
			end
			
			quoteString = false
			for j = 0 to separatorCount
				if lstring.find(pTokenSeparators.getAt(j), 0) != -1
					quoteString = true
					break
				end
			end
			
			if quoteString
				string = string + '"'
			end
			
			subcount = lstring.getLength()
			for j = 0 to subcount
				if lstring.getAt(j) == '"'
					string = string + "\\\""
					
				else
					string = string + lstring.getAt(j)
				end
			end
			
			if quoteString
				string = string + '"'
			end
		end
		
		return string
	end
	
	/** \brief Encode a string dictionary into a property string. */
	func String encodeStringDictionary(Dictionary dict)
		var Array entries = Array.new()
		dict.forEach(block String key, String value
			entries.add(key + pKeyValueSeparator + value)
		end)
		return encodeStringList(entries)
	end
	
	/** \brief Encode a 3-component vector into a property string. */
	func String encodeVector(Vector vector)
		return "" + vector.getX() + " " + vector.getY() + " " + vector.getZ()
	end
	
	/** \brief Encode a 3-component dvector into a property string. */
	func String encodeDVector(DVector vector)
		return "" + vector.getX() + " " + vector.getY() + " " + vector.getZ()
	end
	
	/** \brief Encode a 2-component vector into a property string. */
	func String encodeVector2(Vector2 vector)
		return "" + vector.getX() + " " + vector.getY()
	end
	
	/** \brief Encode a 4-component vector into a property string. */
	/*
	func String encodeVector4(Vector4 vector)
		return "" + vector.getX() + " " + vector.getY() + " " + vector.getZ() + " " + vector.getW()
	end
	*/
	
	/** \brief Encode a 4-component vector into a property string. */
	/*
	func String encodeDVector4(DVector4 vector)
		return "" + vector.getX() + " " + vector.getY() + " " + vector.getZ() + " " + vector.getW()
	end
	*/
	
	/** \brief Encode a floating point rectangular area into a property string. */
	func String encodeFloatRectArea(FloatRectArea area)
		return "" + area.getX1() + " " + area.getY1() + " " + area.getX2() + " " + area.getY2()
	end
	
	/** \brief Encode a rectangular area into a property string. */
	func String encodeRectArea(RectArea area)
		return "" + area.getX1() + " " + area.getY1() + " " + area.getX2() + " " + area.getY2()
	end
	
	/** \brief Encode a 2-component point into a property string. */
	func String encodePoint(Point point)
		return "" + point.getX() + " " + point.getY()
	end
	
	/** \brief Encode a 3-component color into a property string. */
	func String encodeColor3(Color color)
		return "" + color.getRed() + " " + color.getGreen() + " " + color.getBlue()
	end
	
	/** \brief Encode a 4-component color into a property string. */
	func String encodeColor4(Color color)
		return "" + color.getRed() + " " + color.getGreen() + " " + color.getBlue() + " " + color.getAlpha()
	end
	
	/** \brief Encode shape list into a property string. */
	func String encodeShapeList(ShapeList list)
		var Vector2 v2IsOne = Vector2.new(1, 1)
		var Vector vIsZero = Vector.new()
		var float vecThreshold = 0.0001
		var int i, count = list.getCount()
		var ShapeType shapeType
		var int j, pointCount
		var String s = "", s2
		var Vector2 v2
		var Vector v
		
		for i = 0 to count
			shapeType = list.getTypeAt(i)
			s2 = ""
			
			v = list.getPositionAt(i)
			if not v.isEqualTo(vIsZero, vecThreshold)
				s2 = s2 + ":position," + v.getX() + "," + v.getY() + "," + v.getZ()
			end
			
			if shapeType != ShapeType.sphere
				v = list.getOrientationAt(i).getEulerAngles()
				if not v.isEqualTo(vIsZero, vecThreshold)
					s2 = s2 + ":rotation," + v.getX() + "," + v.getY() + "," + v.getZ()
				end
			end
			
			select shapeType
			case ShapeType.sphere
				s2 = "sphere" + s2 + ":radius," + list.getRadiusAt(i)
				
			case ShapeType.box
				v = list.getHalfExtendsAt(i)
				s2 = "box" + s2 + ":extends," + v.getX() + "," + v.getY() + "," + v.getZ()
				
			case ShapeType.cylinder
			case ShapeType.capsule
				if shapeType == ShapeType.cylinder
					s2 = "cylinder" + s2
					
				else
					s2 = "capsule" + s2
				end
				
				s2 = s2 + ":height," + list.getHalfHeightAt(i) \
					+ ":radius," + list.getTopRadiusAt(i) + "," + list.getBottomRadiusAt(i)
				
				v2 = list.getTopAxisScalingAt(i)
				if not v2.isEqualTo(v2IsOne, vecThreshold)
					s2 = s2 + ":topAxisScaling," + v2.getX() + "," + v2.getY()
				end
				
				v2 = list.getBottomAxisScalingAt(i)
				if not v2.isEqualTo(v2IsOne, vecThreshold)
					s2 = s2 + ":bottomAxisScaling," + v2.getX() + "," + v2.getY()
				end
				
			case ShapeType.hull
				s2 = "hull" + s2 + ":points"
				pointCount = list.getPointCountAt(i)
				for j = 0 to pointCount
					v = list.getPointAt(i, j)
					s2 = s2 + "," + v.getX() + "," + v.getY() + "," + v.getZ()
				end
			end
			
			if not s.empty()
				s = s + " "
			end
			s = s + s2
		end
		
		return s
	end
	
	/**
	 * \brief Encode \ref LayerMask.
	 * \version 1.25
	 * \see #decodeLayerMask()
	 */
	func String encodeLayerMask(LayerMask mask)
		var String value = ""
		var int i
		for i = 0 to 64
			if mask.isBitSet(i)
				if not value.empty()
					value = value + " "
				end
				value = value + i
			end
		end
		return value
	end
	
	/**
	 * \brief Decode \ref CollisionFilter.
	 * \version 1.25
	 * \see #decodeCollisionFilter().
	 */
	func String encodeCollisionFilter(CollisionFilter collisionFilter)
		var LayerMask category = collisionFilter.getCategory()
		var LayerMask filter = collisionFilter.getFilter()
		
		if category.equals(filter)
			return encodeLayerMask(category)
			
		elif category.isEmpty() and (~filter).isEmpty()
			return ""
			
		else
			return encodeLayerMask(category) + ":" + encodeLayerMask(filter)
		end
	end
end
