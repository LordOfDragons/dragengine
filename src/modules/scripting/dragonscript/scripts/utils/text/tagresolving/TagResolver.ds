/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

namespace Dragengine.Utils


/**
 * \brief Resolve tags in text.
 * 
 * Supports tags of the form "{action[:params]}" with optional parameters after action.
 * The special tag "{{" prints a single "{" character. Tags can be nested, for example
 * "{action1:{action2:param}}".
 */
class TagResolver
	var byte pCharTagBegin, pCharTagEnd, pCharDelimiter
	var Dictionary pRules
	var TagResolverRule pDefaultRule
	
	
	/** \brief Create tag resolver. */
	func new()
		pCharTagBegin = '{'
		pCharTagEnd = '}'
		pCharDelimiter = ':'
		pRules = Dictionary.new()
	end
	
	
	/** \brief Character starting tag. */
	func byte getCharTagBegin()
		return pCharTagBegin
	end
	
	/** \brief Set character starting tag. */
	func void setCharTagBegin(byte character)
		pCharTagBegin = character
	end
	
	/** \brief Character ending tag. */
	func byte getCharTagEnd()
		return pCharTagEnd
	end
	
	/** \brief Set character ending tag. */
	func void setCharTagEnd(byte character)
		pCharTagEnd = character
	end
	
	/** \brief Character separating action from parameters. */
	func byte getCharDelimiter()
		return pCharDelimiter
	end
	
	/** \brief Set character separating action from parameters. */
	func void setCharDelimiter(byte character)
		pCharDelimiter = character
	end
	
	
	/** \brief Number of rules. */
	func int getRuleCount()
		return pRules.getCount()
	end
	
	/** \brief Rule matching name or \em null if absent. */
	func TagResolverRule getRuleNamed(String name)
		return pRules.getAt(name, null) cast TagResolverRule
	end
	
	/** \brief has rule matching name. */
	func bool hasRuleNamed(String name)
		return pRules.has(name)
	end
	
	/** \brief Add rule. */
	func void addRule(String name, TagResolverRule rule)
		if name == null or rule == null or pRules.has(name)
			throw EInvalidParam.new()
		end
		pRules.setAt(name, rule)
	end
	
	/** \brief Remove all rules. */
	func void removeAllRules()
		pRules.removeAll()
	end
	
	
	/** \brief Rule to use if no rule matches or null to return tag unmodified. */
	func TagResolverRule getDefaultRule()
		return pDefaultRule
	end
	
	/** \brief Set rule to use if no rule matches or null to return tag unmodified. */
	func void setDefaultRule(TagResolverRule rule)
		pDefaultRule = rule
	end
	
	
	/**
	 * \brief Resolve tags in text.
	 * \param text Text to resolve tags in.
	 * \param context Context in which the solving is done. Passed to rules while resolving.
	 */
	func String resolveTags(String text, Object context)
		var int tagBegin, tagEnd, checkEnd, checkBegin, actionEnd, nestedCounter
		var String tagData, tagAction, tagParams, result = ""
		var int len = text.getLength(), next = 0
		var TagResolverRule rule
		var bool nestedTags
		
		while next < len
			tagBegin = text.find(pCharTagBegin, next)
			if tagBegin == -1
				break
			end
			
			nestedCounter = 1
			nestedTags = false
			tagEnd = tagBegin + 1
			while nestedCounter > 0
				checkEnd = text.find(pCharTagEnd, tagEnd)
				if checkEnd == -1
					break
				end
				
				checkBegin = text.find(pCharTagBegin, tagEnd)
				if checkBegin != -1 and checkBegin < checkEnd
					nestedCounter++
					nestedTags = true
					tagEnd = checkBegin + 1
					
				else
					nestedCounter--
					tagEnd = checkEnd + 1
				end
			end
			
			if nestedCounter > 0
				break
			end
			
			tagData = text.substring(tagBegin + 1, tagEnd - 1)
			if nestedTags
				tagData = resolveTags(tagData, context)
			end
			
			actionEnd = tagData.find(pCharDelimiter)
			
			if actionEnd == -1
				tagAction = tagData
				tagParams = ""
				
			else
				tagAction = tagData.substring(0, actionEnd)
				tagParams = tagData.substring(actionEnd + 1)
			end
			
			rule = pRules.getAt(tagAction, null) cast TagResolverRule
			if rule == null
				rule = pDefaultRule
			end
			
			if rule == null
				result = result + text.substring(next, tagEnd)
				
			else
				result = result + text.substring(next, tagBegin) + rule.resolveTag(tagParams, context)
			end
			
			next = tagEnd
		end
		
		if next < len
			result = result + text.substring(next)
		end
		
		return result
	end
end
