/* 
 * Drag[en]gine DragonScript Script Module
 *
 * Copyright (C) 2020, Roland Pl√ºss (roland@rptd.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */


namespace Dragengine.Utils



/**
 * \brief Resolve tags in text.
 * 
 * Supports tags of the form {action[:params]} with optional parameters after action.
 * The special tag {{ prints a single { character.
 */
class TagResolver
	private var byte pCharTagBegin
	private var byte pCharTagEnd
	private var byte pCharDelimiter
	private var Dictionary pRules
	private var TagResolverRule pDefaultRule
	
	
	
	/** \brief Create tag resolver. */
	public func new()
		this.pCharTagBegin = '{'
		this.pCharTagEnd = '}'
		this.pCharDelimiter = ':'
		this.pRules = Dictionary.new()
	end
	
	
	
	/** \brief Character starting tag. */
	public func byte getCharTagBegin()
		return this.pCharTagBegin
	end
	
	/** \brief Set character starting tag. */
	public func void setCharTagBegin( byte character )
		this.pCharTagBegin = character
	end
	
	/** \brief Character ending tag. */
	public func byte getCharTagEnd()
		return this.pCharTagEnd
	end
	
	/** \brief Set character ending tag. */
	public func void setCharTagEnd( byte character )
		this.pCharTagEnd = character
	end
	
	/** \brief Character separating action from parameters. */
	public func byte getCharDelimiter()
		return this.pCharDelimiter
	end
	
	/** \brief Set character separating action from parameters. */
	public func void setCharDelimiter( byte character )
		this.pCharDelimiter = character
	end
	
	
	
	/** \brief Number of rules. */
	public func int getRuleCount()
		return this.pRules.getCount()
	end
	
	/** \brief Rule matching name or \em null if absent. */
	public func TagResolverRule getRuleNamed( String name )
		return this.pRules.getAt( name, null ) cast TagResolverRule
	end
	
	/** \brief has rule matching name. */
	public func bool hasRuleNamed( String name )
		return this.pRules.has( name )
	end
	
	/** \brief Add rule. */
	public func void addRule( String name, TagResolverRule rule )
		if name == null or rule == null or this.pRules.has( name )
			throw EInvalidParam.new()
		end
		this.pRules.setAt( name, rule )
	end
	
	/** \brief Remove all rules. */
	public func void removeAllRules()
		this.pRules.removeAll()
	end
	
	
	
	/** \brief Rule to use if no rule matches or null to return tag unmodified. */
	public func TagResolverRule getDefaultRule()
		return this.pDefaultRule
	end
	
	/** \brief Set rule to use if no rule matches or null to return tag unmodified. */
	public func void setDefaultRule( TagResolverRule rule )
		this.pDefaultRule = rule
	end
	
	
	
	/**
	 * \brief Resolve tags in text.
	 * \param text Text to resolve tags in.
	 * \param context Context in which the solving is done. Passed to rules while resolving.
	 */
	public func String resolveTags( String text, Object context )
		var int tagBegin = text.find( this.pCharTagBegin )
		var int len = text.getLength()
		var TagResolverRule rule
		var String result = ""
		var int position = 0
		var String tagData
		var String tagAction
		var String tagParams
		var int actionEnd
		var int tagEnd
		
		while tagBegin != -1
			if position < tagBegin
				result = result + text.substring( position, tagBegin )
			end
			
			if text.getAt( tagBegin + 1 ) == this.pCharTagBegin
				result = result + this.pCharTagBegin
				tagEnd = tagBegin + 1
				
			else
				tagEnd = text.find( this.pCharTagEnd, tagBegin + 1 )
				tagData = text.substring( tagBegin + 1, tagEnd )
				actionEnd = tagData.find( this.pCharDelimiter )
				
				if actionEnd == -1
					tagAction = tagData
					tagParams = ""
					
				else
					tagAction = tagData.substring( 0, actionEnd )
					tagParams = tagData.substring( actionEnd + 1 )
				end
				
				rule = this.pRules.getAt( tagAction, null ) cast TagResolverRule
				
				if rule == null
					rule = this.pDefaultRule
				end
				
				if rule == null
					result = result + text.substring( tagBegin, tagEnd + 1 )
					
				else
					result = result + rule.resolveTag( tagParams, context )
				end
			end
			
			position = tagEnd + 1
			tagBegin = text.find( this.pCharTagBegin, position )
		end
		
		if position < len
			result = result + text.substring( position )
		end
		
		return result
	end
end
