/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */


namespace Dragengine.Utils

pin Dragengine.Scenery
pin Dragengine.Gui



/**
 * \brief Visitor for use by DecalBuilder to create decals for visited elements.
 */
class AddDecalVisitor extends ElementVisitor
	/** \brief Decal builder. */
	private var DecalBuilder pBuilder
	
	
	
	/** \brief Create visitor. */
	public func new( DecalBuilder builder )
		this.pBuilder = builder
	end
	
	
	
	/** \brief Decal builder. */
	public func DecalBuilder getBuilder()
		return this.pBuilder
	end
	
	
	
	/**
	 * \brief Visit behavior element.
	 * 
	 * Uses all ECBehaviorComponent instances to create decal for.
	 */
	public func void visitBehaviorElement( BehaviorElement element )
		element.forEachInstance( block ECBehaviorComponent.Instance each
			this.createDecalFor( each )
		end )
	end
	
	/** \brief Create decal for component. */
	public func void createDecalFor( ECBehaviorComponent.Instance behavior )
		if behavior.getComponent() != null
			this.pBuilder.createComponentDecal( behavior.getElement(), behavior.getComponent() )
		end
	end
end
