/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */


namespace Dragengine.TriggerSystem


/**
 * \brief Trigger expression.
 */
class TSTriggerExpression
	private var TSTriggerExpressionComponent pRootComponent
	private var bool pResult
	private var bool pEnabled
	
	
	
	/** \brief Create trigger expression. */
	public func new()
		this.pResult = false
		this.pEnabled = true
	end
	
	/** \brief Dispose of trigger expression. */
	public func void dispose()
		if this.pRootComponent != null
			this.pRootComponent.dispose()
			this.pRootComponent = null
		end
	end
	
	
	
	/** \brief Root expression component or \em null if not set. */
	public func TSTriggerExpressionComponent getRootComponent()
		return this.pRootComponent
	end
	
	/** \brief Set root expression component or \em null if not set. */
	public func void setRootComponent( TSTriggerExpressionComponent component )
		this.pRootComponent = component
		this.pResult = false
	end
	
	/** \brief Expression is empty hence root component is \em null. */
	public func bool isEmpty()
		return this.pRootComponent == null
	end
	
	/** \brief Expression is not empty hence root component is not \em null. */
	public func bool isNotEmpty()
		return this.pRootComponent != null
	end
	
	/** \brief Result. */
	public func bool getResult()
		return this.pResult
	end
	
	/** \brief Set result. */
	public func void setResult( bool result )
		this.pResult = result
	end
	
	/** \brief Expression is enabled. */
	public func bool getEnabled()
		return this.pEnabled
	end
	
	/** \brief Set expression is enabled. */
	public func void setEnabled( bool enabled )
		this.pEnabled = enabled
	end
	
	
	
	/** \brief Expression contains target. */
	public func bool containsTarget( TSTriggerTarget target )
		if this.pRootComponent == null
			return false
		end
		
		return this.pRootComponent.containsTarget( target )
	end
	
	
	
	/**
	 * \brief Link trigger targets using trigger table.
	 * \details If trigger table is \em null all trigger targets are unlinked. The listener is
	 *          registered for all targets. A previously existing listener is removed first.
	 *          After linking the expression is evaluated.
	 */
	public func void linkTriggerTargets( TSTriggerTable triggerTable, TSTriggerListener listener )
		if this.pRootComponent != null
			this.pRootComponent.linkTriggerTargets( triggerTable, listener )
			this.evaluate()
		end
	end
	
	/**
	 * \brief Evaluate expression if not disabled.
	 * \details Stores result for later use.
	 * \returns \em true if result changed otherwise \em false.
	 */
	public func bool evaluate()
		if this.pEnabled and this.pRootComponent != null
			var bool result = this.pRootComponent.evaluate()
			
			if result != this.pResult
				this.pResult = result
				return true
			end
		end
		
		return false
	end
end
