/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */


namespace Dragengine.TriggerSystem

pin Dragengine.Utils


/**
 * \brief Create TSTriggerExpression object from string.
 * 
 * Also allows to turn a TSTriggerExpression object into a string representation.
 * This is done in a separate class as the representation could potentially
 * be different in different implementations.
 */
class TSTriggerExpressionParser
	/** Class used to hold the parser state. */
	class ParserState
		var String pString
		var int pPosition
		var int pLength
		
		func new(String string)
			pString = string
			pLength = string.getLength()
			pPosition = 0
		end
		
		func bool hasMoreCharacters()
			return pPosition < pLength
		end
		
		func int getPosition()
			return pPosition
		end
		
		func byte getNextCharacter()
			return pString.getAt(pPosition++)
		end
		
		func void adjustPosition(int amount)
			pPosition += amount
		end
	end
	
	
	
	var byte pSymbolNegate
	var byte pSymbolCurState
	var byte pSymbolAnd
	var byte pSymbolOr
	var byte pSymbolGroupStart
	var byte pSymbolGroupEnd
	var byte pSymbolQuote
	var String pRequiresQuoteCharacters
	
	
	
	/** Creates a new trigger expression parser. */
	func new()
		pSymbolNegate = '!'
		pSymbolCurState = '@'
		pSymbolAnd = '&'
		pSymbolOr = '|'
		pSymbolGroupStart = '('
		pSymbolGroupEnd = ')'
		pSymbolQuote = '"'
		
		pRequiresQuoteCharacters = " \t" + pSymbolNegate + pSymbolCurState + pSymbolAnd\
			+ pSymbolOr + pSymbolGroupStart + pSymbolGroupEnd + pSymbolQuote
	end
	
	
	
	/** Create trigger expression from a string. */
	func TSTriggerExpression stringToExpression(String string)
		var TSTriggerExpression expression = TSTriggerExpression.new()
		var ParserState state = ParserState.new(string)
		
		expression.setRootComponent(parseExpressionComponent(state, false, false, false))
		
		return expression
	end
	
	/** Parse an expression component. */
	func TSTriggerExpressionComponent parseExpressionComponent(\
	ParserState state, bool requireEnd, bool initCurState, bool initNegate)
		// modes:
		// 0 => parse trigger/child(0) (negate,curState allowed)
		// 1 => parse logical operator
		// 2 => parse child(1..N) (negate,curState allowed)
		// 3 => parse identical logical operator or end of group or end of expression
		// 4 => exit parser
		var TSTriggerExpressionComponent component = TSTriggerExpressionComponent.new()
		var TSTriggerExpressionComponent child
		var bool curState = initCurState
		var bool negate = initNegate
		var byte character
		var int mode = 0
		
		while mode != 4 and state.hasMoreCharacters()
			character = state.getNextCharacter()
			
			if mode == 2 and component.getTargetName() != null
				child = TSTriggerExpressionComponent.new()
				child.setTargetName(component.getTargetName())
				child.setNegate(component.getNegate())
				child.setCurState(component.getCurState())
				component.addChild(child)
				component.setTargetName(null)
				component.setNegate(false)
				component.setCurState(false)
			end
			
			if character == ' ' or character == '\t'
				continue
				
			elif character == pSymbolNegate
				select mode
				case 0, 2
					negate = true
					
				else
					throw EInvalidParam.new()
				end
				
			elif character == pSymbolCurState
				select mode
				case 0, 2
					curState = true
					
				else
					throw EInvalidParam.new()
				end
				
			elif character == pSymbolGroupStart
				if curState
					throw EInvalidParam.new()
				end
				
				select mode
				case 0
					child = parseExpressionComponent(state, true, false, false)
					child.setNegate(negate)
					component.addChild(child)
					negate = false
					curState = false
					mode = 1
					
				case 2
					child = parseExpressionComponent(state, true, false, false)
					child.setNegate(negate)
					component.addChild(child)
					negate = false
					curState = false
					mode = 3
					
				else
					throw EInvalidParam.new()
				end
				
			elif character == pSymbolGroupEnd
				select mode
				case 3
					if not requireEnd
						state.adjustPosition(-1)
					end
					mode = 4
					
				else:
					throw EInvalidParam.new()
				end
				
			elif character == pSymbolAnd
				select mode
				case 1
					component.setChildrenOr(false)
					mode = 2
					
				case 3
					if component.getChildrenOr()
						throw EInvalidParam.new() // or/and changed inside list
					end
					mode = 2
					
				else
					throw EInvalidParam.new()
				end
				
			elif character == pSymbolOr
				select mode
				case 1
					component.setChildrenOr(true)
					mode = 2
					
				case 3
					if not component.getChildrenOr()
						throw EInvalidParam.new() // or/and changed inside list
					end
					mode = 2
					
				else
					throw EInvalidParam.new()
				end
				
			elif character == pSymbolQuote
				if mode == 0
					component.setTargetName(StringID.new(parseTargetName(state, true)))
					component.setNegate(negate)
					component.setCurState(curState)
					negate = false
					curState = false
					mode = 1
					
				elif mode == 2
					child = TSTriggerExpressionComponent.new()
					child.setTargetName(StringID.new(parseTargetName(state, true)))
					child.setNegate(negate)
					child.setCurState(curState)
					component.addChild(child)
					negate = false
					curState = false
					mode = 3
					
				else
					throw EInvalidParam.new()
				end
				
			//elif (character >= 'a' and character <= 'z') \
			//or (character >= 'A' and character <= 'Z') \
			//or character == '_'
			else
				state.adjustPosition(-1)
				
				select mode
				case 0
					component.setTargetName(StringID.new(parseTargetName(state, false)))
					component.setNegate(negate)
					component.setCurState(curState)
					negate = false
					curState = false
					mode = 1
					
				case 2
					child = TSTriggerExpressionComponent.new()
					child.setTargetName(StringID.new(parseTargetName(state, false)))
					child.setNegate(negate)
					child.setCurState(curState)
					component.addChild(child)
					negate = false
					curState = false
					mode = 3
					
				else
					throw EInvalidParam.new()
				end
				
			//else
			//	throw EInvalidParam.new()
			end
		end
		
		if requireEnd and mode != 4
			throw EInvalidParam.new()
		end
		
		if mode == 0
			return null
		end
		
		if component.getChildCount() == 1
			child = component.getChildAt(0)
			if child.getTargetName() == null
				component = child
				
			else
				component.setTargetName(child.getTargetName())
				component.setNegate(child.getNegate())
				component.setCurState(child.getCurState())
				component.removeAllChildren()
			end
		end
		
		return component
	end
	
	/** Parse trigger name. */
	func String parseTargetName(ParserState state, bool quoted)
		// modes
		// 0 => parse first character
		// 1 => parse other characters
		var String name = ""
		var byte character
		var int mode = 0
		
		while state.hasMoreCharacters()
			character = state.getNextCharacter()
			
			if quoted
				if character == '\\'
					if not state.hasMoreCharacters()
						throw EInvalidParam.new()
					end
					name = name + state.getNextCharacter()
					mode = 1
					
				elif character == pSymbolQuote
					if mode == 0
						throw EInvalidParam.new()
					end
					break
					
				else
					name = name + character
					mode = 1
				end
				
			else
				if pRequiresQuoteCharacters.find(character) == -1
				/*if (character >= 'a' and character <= 'z') or (character >= 'A' and character <= 'Z') \
				or character == '_' or character == '.' or (character >= '0' and character <= '9')*/
					name = name + character
					mode = 1
					
				else
					if mode == 0
						throw EInvalidParam.new()
					end
					
					state.adjustPosition(-1)
					break
				end
			end
		end
		
		return name
	end
	
	/** Create string from a trigger expression. */
	func String expressionToString(TSTriggerExpression expression)
		var TSTriggerExpressionComponent component = expression.getRootComponent()
		
		if component == null
			return ""
			
		else
			return expressionComponentToString(component, false)
		end
	end
	
	/** Create string from a trigger expression component. */
	func String expressionComponentToString(TSTriggerExpressionComponent component, bool grouping)
		var StringID targetName = component.getTargetName()
		var String string = ""
		
		if component.getNegate()
			string = string + pSymbolNegate
			grouping = true
		end
		if component.getCurState()
			string = string + pSymbolCurState
			grouping = true
		end
		
		/*
		var String debug = "neg=" + component.getNegate() + ",cs=" + component.getCurState()
		if trigger != null
			debug = debug + ",trig='" + trigger.getString() + "'"
		end
		debug = debug + ",children=" + component.getChildCount()
		BaseGameApp.getApp().getConsole().addMessage(debug + "\n")
		*/
		
		if targetName == null
			var int count = component.getChildCount()
			if count == 0
				throw EInvalidParam.new()
			end
			
			if grouping
				string = string + pSymbolGroupStart
			end
			
			var byte separator = component.getChildrenOr() if pSymbolOr else pSymbolAnd
			var int i
			for i = 0 to count
				if i > 0
					string = string + separator
				end
				string = string + expressionComponentToString(component.getChildAt(i), true)
			end
			
			if grouping
				string = string + pSymbolGroupEnd
			end
			
		else
			string = string + quoteTriggerName(targetName.getString())
		end
		
		return string
	end
	
	/** Retrieves a properly quoted version of a trigger name. */
	func String quoteTriggerName(String name)
		if name.findAny(pRequiresQuoteCharacters) == -1
			return name
			
		else
			return "" + pSymbolQuote + name.replaceString("\"", "\\\"") + pSymbolQuote
		end
	end
end
