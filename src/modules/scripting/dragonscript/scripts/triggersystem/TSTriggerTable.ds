/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */


namespace Dragengine.TriggerSystem


/**
 * \brief Table of trigger targets.
 * 
 * Triggers add named targets to the table. Each target is a boolean value. Triggers can set
 * or reset the target. Whenever the state of the target changes all listeners are notified.
 * Elements using a trigger expression add themselves to all the targets they use in the
 * trigger expression.
 */
class TSTriggerTable
	var Dictionary pTargets
	
	
	
	/** \brief Create trigger table. */
	func new()
		pTargets = Dictionary.new()
	end
	
	/** \brief Dispose of trigger table. */
	func void dispose()
		removeAll()
	end
	
	
	
	/** \brief Named target is present. */
	func bool hasNamed(StringID name)
		return pTargets.has(name)
	end
	
	/** \brief Named target or \em null if absent. */
	func TSTriggerTarget getNamed(StringID name)
		return pTargets.getAt(name, null) cast TSTriggerTarget
	end
	
	/** \brief Named target adding it if absent. */
	func TSTriggerTarget getOrAddNamed(StringID name)
		var TSTriggerTarget target = pTargets.getAt(name, null) cast TSTriggerTarget
		if target == null
			target = TSTriggerTarget.new(name)
			pTargets.setAt(name, target)
		end
		return target
	end
	
	/**
	 * \brief Add target.
	 * \throws EInvalidParam Named target is present.
	 */
	func void add(TSTriggerTarget target)
		if hasNamed(target.getName())
			throw EInvalidParam.new()
		end
		pTargets.setAt(target.getName(), target)
	end
	
	/** \brief Remove target. */
	func void removeTarget(TSTriggerTarget target)
		pTargets.remove(target.getName())
	end
	
	/** \brief Dispose of all trigger targets. */
	func void removeAll()
		pTargets.forEachValue(block TSTriggerTarget each
			each.dispose()
		end)
		pTargets.removeAll()
	end
	
	/** \brief Visit targets with block with TSTriggerTarget as parameter. */
	func void forEachTarget(Block ablock)
		pTargets.forEachValue(ablock)
	end
	
	
	
	/** \brief Read trigger table from file. */
	func void readFromFile(FileReader reader)
		select reader.readByte() // version
		case 0
			var int count = reader.readInt()
			var int i
			
			removeAll()
			for i = 0 to count
				add(TSTriggerTarget.readFromFile(reader))
			end
			
		else
			throw EInvalidParam.new("unsupported version")
		end
	end
	
	/** \brief Write trigger table to file. */
	func void writeToFile(FileWriter writer)
		writer.writeByte(0) // version
		
		writer.writeInt(pTargets.getCount())
		pTargets.forEachValue(block TSTriggerTarget each
			each.writeToFile(writer)
		end)
	end
end
