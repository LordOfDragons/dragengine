/* 
 * Drag[en]gine DragonScript Script Module
 *
 * Copyright (C) 2020, Roland Pl√ºss (roland@rptd.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */


namespace Dragengine.TriggerSystem


/**
 * \brief Table of trigger targets.
 * 
 * Triggers add named targets to the table. Each target is a boolean value. Triggers can set
 * or reset the target. Whenever the state of the target changes all listeners are notified.
 * Elements using a trigger expression add themselves to all the targets they use in the
 * trigger expression.
 */
class TSTriggerTable
	var Dictionary pTargets
	
	
	
	/** \brief Create trigger table. */
	func new()
		pTargets = Dictionary.new()
	end
	
	/** \brief Dispose of trigger table. */
	func void dispose()
		removeAll()
	end
	
	
	
	/** \brief Named target is present. */
	func bool hasNamed(StringID name)
		return pTargets.has(name)
	end
	
	/** \brief Named target or \em null if absent. */
	func TSTriggerTarget getNamed(StringID name)
		return pTargets.getAt(name, null) cast TSTriggerTarget
	end
	
	/** \brief Named target adding it if absent. */
	func TSTriggerTarget getOrAddNamed(StringID name)
		var TSTriggerTarget target = pTargets.getAt(name, null) cast TSTriggerTarget
		if target == null
			target = TSTriggerTarget.new(name)
			pTargets.setAt(name, target)
		end
		return target
	end
	
	/**
	 * \brief Add target.
	 * \throws EInvalidParam Named target is present.
	 */
	func void add(TSTriggerTarget target)
		if hasNamed(target.getName())
			throw EInvalidParam.new()
		end
		pTargets.setAt(target.getName(), target)
	end
	
	/** \brief Remove target. */
	func void removeTarget(TSTriggerTarget target)
		pTargets.remove(target.getName())
	end
	
	/** \brief Dispose of all trigger targets. */
	func void removeAll()
		pTargets.forEachValue(block TSTriggerTarget each
			each.dispose()
		end)
		pTargets.removeAll()
	end
	
	/** \brief Visit targets with block with TSTriggerTarget as parameter. */
	func void forEachTarget(Block ablock)
		pTargets.forEachValue(ablock)
	end
	
	
	
	/** \brief Read trigger table from file. */
	func void readFromFile(FileReader reader)
		select reader.readByte() // version
		case 0
			var int count = reader.readInt()
			var int i
			
			removeAll()
			for i = 0 to count
				add(TSTriggerTarget.readFromFile(reader))
			end
			
		else
			throw EInvalidParam.new("unsupported version")
		end
	end
	
	/** \brief Write trigger table to file. */
	func void writeToFile(FileWriter writer)
		writer.writeByte(0) // version
		
		writer.writeInt(pTargets.getCount())
		pTargets.forEachValue(block TSTriggerTarget each
			each.writeToFile(writer)
		end)
	end
end
