/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */


namespace Dragengine.TriggerSystem

pin Dragengine.LoadSave


/**
 * \brief Helper class operating an named trigger target.
 * 
 * Simplifies the process of handling optional trigger targets. The class stores the name of
 * the trigger target and the trigger target itself. The trigger target is fetched from the
 * trigger table if the name is not null. This class hides the book keeping for this common
 * situation.
 */
class TSNamedTriggerTarget
	var StringID pName
	var TSTriggerTarget pTarget
	
	
	
	/** \brief Create named trigger target. */
	func new()
	end
	
	/** \brief Create named trigger target with initial name. */
	func new( StringID name )
		pName = name
	end
	
	func new( String name )
		setName( name )
	end
	
	
	
	/** \brief Name. */
	func StringID getName()
		return pName
	end
	
	/**
	 * \brief Set name or null if not used.
	 * 
	 * Drops the trigger target if present.
	 */
	func void setName( StringID name )
		pName = name
		pTarget = null
	end
	
	/**
	 * \brief Set name or empty string or null if not used.
	 * 
	 * Drops the trigger target if present.
	 */
	func void setName( String name )
		if name != null and not name.empty()
			pName = StringID.new( name )
			
		else
			pName = null
		end
		
		pTarget = null
	end
	
	/** \brief Trigger target or null if not acquired yet. */
	func TSTriggerTarget getTarget()
		return pTarget
	end
	
	/**
	 * \brief Acquire trigger target if name is not empty.
	 * 
	 * Call this during Element.addToGameWorld().
	 */
	func void acquireTarget( TSTriggerTable triggerTable )
		if pName != null
			pTarget = triggerTable.getOrAddNamed( pName )
		end
	end
	
	/**
	 * \brief Drop trigger target if present.
	 * 
	 * Call this during Element.removeFromGameWorld() or when the trigger table is no more valid.
	 */
	func void dropTarget()
		pTarget = null
	end
	
	
	
	/** \brief Trigger target fired state or false if absent. */
	func bool getFired()
		if pTarget != null
			return pTarget.getFired()
			
		else
			return false
		end
	end
	
	/** \brief Set trigger target fire state if present. */
	func void setFired( bool fired )
		if pTarget != null
			pTarget.setFired( fired )
		end
	end
	
	/** \brief Target target ever fired state or false if absent. */
	func bool getHasFired()
		if pTarget != null
			return pTarget.getHasFired()
			
		else
			return false
		end
	end
	
	/** \brief Set if trigger target ever fired state if present. */
	func void setHasFired( bool hasFired )
		if pTarget != null
			pTarget.setHasFired( hasFired )
		end
	end
	
	
	
	/** \brief Fire trigger target if present. */
	func void fire()
		if pTarget != null
			pTarget.fire()
		end
	end
	
	/** \brief Reset trigger target if present. */
	func void reset()
		if pTarget != null
			pTarget.reset()
		end
	end
	
	/** \brief Fully reset trigger target if present. */
	func void fullReset()
		if pTarget != null
			pTarget.fullReset()
		end
	end
	
	/** \brief Fire then reset trigger target if present. */
	func void pulse()
		if pTarget != null
			pTarget.fire()
			pTarget.reset()
		end
	end
	
	/**
	 * \brief Toggle between fired and reset state.
	 * \version 1.19
	 */
	func void toggle()
		if pTarget.getFired()
			reset()
			
		else
			fire()
		end
	end
	
	
	
	/** \brief Add listener to trigger target if present. */
	func void addListener( TSTriggerListener listener )
		if pTarget != null
			pTarget.addListener( listener )
		end
	end
	
	/** \brief Remove listener from trigger target if present. */
	func void removeListener( TSTriggerListener listener )
		if pTarget != null
			pTarget.removeListener( listener )
		end
	end
end
