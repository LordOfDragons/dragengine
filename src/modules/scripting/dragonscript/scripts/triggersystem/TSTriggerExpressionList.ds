/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */


namespace Dragengine.TriggerSystem


/**
 * \brief List of trigger expressions.
 */
class TSTriggerExpressionList
	/** \brief Expressions. */
	private var Array pExpressions
	
	
	
	/** \brief Create trigger expression list. */
	public func new()
		this.pExpressions = Array.new()
	end
	
	/** \brief Dispose of trigger expression list. */
	public func void dispose()
		this.pExpressions.forEach( block TSTriggerExpression each
			each.dispose()
		end )
		this.pExpressions.removeAll()
	end
	
	
	
	/** \brief Number of expressions. */
	public func int getExpressionCount()
		return this.pExpressions.getCount()
	end
	
	/** \brief Expression at position. */
	public func TSTriggerExpression getExpressionAt( int position )
		return this.pExpressions.getAt( position ) cast TSTriggerExpression
	end
	
	/** \brief Add expression. */
	public func void addExpression( TSTriggerExpression expression )
		if expression == null
			throw EInvalidParam.new()
		end
		
		this.pExpressions.add( expression )
	end
	
	/** \brief Remove expression. */
	public func void removeExpression( TSTriggerExpression expression )
		this.pExpressions.remove( expression )
	end
	
	/** \brief Remove all expressions. */
	public func void removeAllExpressions()
		this.pExpressions.removeAll()
	end
	
	/** \brief Visit expressions with block with parameter TSTriggerExpression. */
	public func void forEach( Block ablock )
		this.pExpressions.forEach( ablock )
	end
	
	
	
	/** \brief Read trigger expression list from file. */
	public func void readFromFile( FileReader reader, TSTriggerExpressionParser parser )
		var int count = reader.readUShort()
		var int i
		
		this.pExpressions.removeAll()
		for i = 0 to count
			this.pExpressions.add( parser.stringToExpression( reader.readString16() ) )
		end
	end
	
	/** \brief Write trigger expression list to file. */
	public func void writeToFile( FileWriter writer, TSTriggerExpressionParser parser )
		writer.writeUShort( this.pExpressions.getCount() )
		this.pExpressions.forEach( block TSTriggerExpression each
			writer.writeString16( parser.expressionToString( each ) )
		end )
	end
end
