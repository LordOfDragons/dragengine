/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */


namespace Dragengine.TriggerSystem

pin Dragengine.LoadSave


/**
 * \brief Target in a trigger table.
 * 
 * Triggers can set or reset the target. Whenever the state of the target changes
 * all listeners are notified. Elements using a trigger expression add themselves
 * to all the targets they use in the trigger expression.
 */
class TSTriggerTarget
	var StringID pName
	var bool pFired
	var bool pHasFired
	var Array pListeners
	
	
	
	/** \brief Create trigger target. */
	func new(StringID name)
		if name == null
			throw EInvalidParam.new()
		end
		
		pName = name
		pFired = false
		pHasFired = false
		pListeners = Array.new()
	end
	
	/** \brief Dispose of trigger target. */
	func void dispose()
		pListeners = null
	end
	
	
	
	/** \brief Name. */
	func StringID getName()
		return pName
	end
	
	/** \brief Target is currently fired. */
	func bool getFired()
		return pFired
	end
	
	/** \brief Set if target is currently fired. */
	func void setFired(bool fired)
		pFired = fired
	end
	
	/** \brief Target has ever fired. */
	func bool getHasFired()
		return pHasFired
	end
	
	/** \brief Set if target has ever fired. */
	func void setHasFired(bool hasFired)
		pHasFired = hasFired
	end
	
	
	
	/** \brief Fire trigger. */
	func void fire()
		if pFired
			return
		end
		
		pFired = true
		pHasFired = true
		notifyListeners()
	end
	
	/** \brief Reset trigger. */
	func void reset()
		if not pFired
			return
		end
		
		pFired = false
		notifyListeners()
	end
	
	/** \brief Fully reset trigger. */
	func void fullReset()
		if not pFired and not pHasFired
			return
		end
		
		pFired = false
		pHasFired = false
		notifyListeners()
	end
	
	
	
	/** \brief Number of listeners. */
	func int getListenerCount()
		return pListeners.getCount()
	end
	
	/** \brief Add listener. */
	func void addListener(TSTriggerListener listener)
		if listener == null or pListeners.has(listener)
			throw EInvalidParam.new()
		end
		pListeners.add(listener)
	end
	
	/** \brief Add listener if absent. */
	func void addListenerIfAbsent(TSTriggerListener listener)
		if listener == null
			throw EInvalidParam.new()
		end
		if not pListeners.has(listener)
			pListeners.add(listener)
		end
	end
	
	/** \brief Remove listener. */
	func void removeListener(TSTriggerListener listener)
		pListeners.remove(listener)
	end
	
	/** \brief Remove listener if present. */
	func void removeListenerIfPresent(TSTriggerListener listener)
		if pListeners.has(listener)
			pListeners.remove(listener)
		end
	end
	
	/** \brief Notify all listeners. */
	func void notifyListeners()
		pListeners.forEach(block TSTriggerListener each
			each.triggerTargetChanged(this)
		end)
	end
	
	
	
	/** \brief Read trigger target from file. */
	static func TSTriggerTarget readFromFile(FileReader reader)
		select reader.readByte() // version
		case 0
			var TSTriggerTarget target = TSTriggerTarget.new(StringID.new(reader.readString8()))
			
			var PersistencyFlags flags = PersistencyFlags.new(2, reader)
			target.pFired = flags.getAt(0)
			target.pHasFired = flags.getAt(1)
			
			return target
			
		else
			throw EInvalidParam.new("unsupported version")
		end
	end
	
	/** \brief Write trigger target to file. */
	func void writeToFile(FileWriter writer)
		writer.writeByte(0) // version
		
		writer.writeString8(pName.toString())
		
		var PersistencyFlags flags = PersistencyFlags.new(2)
		flags.setAt(0, pFired)
		flags.setAt(1, pHasFired)
		flags.writeToFile(writer)
	end
end
