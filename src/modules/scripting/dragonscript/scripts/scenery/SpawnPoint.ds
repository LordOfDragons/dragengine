/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */


namespace Dragengine.Scenery

pin Dragengine.Gui
pin Dragengine.Scenery
pin Dragengine.Preloading


/**
 * \brief Spawn point for actors and props.
 * 
 * Spawn points have a unique name and are added to the SpawnPointList of a GameWorld.
 */
class SpawnPoint
	private var String pName
	private var DVector pPosition
	private var Quaternion pOrientation
	
	
	
	/** \brief Create spawn point. */
	public func new( String name )
		if name == null
			throw EInvalidParam.new()
		end
		this.pName = name
	end
	
	
	
	/** \brief Unique name of spawn point. */
	public func String getName()
		return this.pName
	end
	
	/** \brief Spawn position. */
	public func DVector getPosition()
		return this.pPosition
	end
	
	/** \brief Set spawn position. */
	public func void setPosition( DVector position )
		if position == null
			throw EInvalidParam.new()
		end
		this.pPosition = position
	end
	
	/** \brief Spawn orientation. */
	public func Quaternion getOrientation()
		return this.pOrientation
	end
	
	/** \brief Set spawn orientation. */
	public func void setOrientation( Quaternion orientation )
		if orientation == null
			throw EInvalidParam.new()
		end
		this.pOrientation = orientation
	end
	
	/** \brief Spawn matrix. */
	public func DMatrix getMatrix()
		return DMatrix.newWorld( this.pPosition, this.pOrientation )
	end
	
	
	
	/**
	 * \brief Spawn element in game world at position and orientation defined in the spawn point.
	 * 
	 * If the element is spawned already in another world it teleport instead.
	 */
	public func void spawn( GameWorld gameWorld, Element element )
		this.spawn( gameWorld, element, Vector.new(), Vector.new() )
	end
	
	/**
	 * \brief Spawn element in game world at position and orientation defined in the spawn point.
	 * 
	 * The position and rotation are relative to the spawn point. If the element is already
	 * in the game world teleports the element instead.
	 */
	public func void spawn( GameWorld gameWorld, Element element, Vector position, Vector rotation )
		if gameWorld == null or element == null or position == null or rotation == null
			throw EInvalidParam.new()
		end
		
		if element.getGameWorld() == gameWorld
			element.setGeometry( this.pPosition + DVector.new( position ), \
				this.pOrientation * Quaternion.newFromEuler( rotation ) )
			
		else
			element.removeFromGameWorldIfPresent()
			element.setGeometry( this.pPosition + DVector.new( position ), \
				this.pOrientation * Quaternion.newFromEuler( rotation ) )
			gameWorld.addElement( element )
		end
	end
end
