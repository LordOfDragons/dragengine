/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */


namespace Dragengine.Scenery

pin Dragengine.Preloading
pin Dragengine.Utils


/**
 * \brief Composable billboard for element class.
 * 
 * Provides billboard support to element class without subclassing from a specific class.
 */
class ECComposeBillboard
	private var ECPSkin pSkin
	private var ECPVector pAxis
	private var ECPVector2 pOffset
	private var ECPBoolean pLocked
	private var ECPBoolean pSpherical
	private var ECPBoolean pSizeFixedToScreen
	private var ECPBoolean pRenderEnvMap
	private var LayerMask pLayerMask
	private var LayerMask pLayerMaskRenderEnvMap
	
	private var String pPrefix
	
	
	
	/**
	 * \brief Create composable element class.
	 * 
	 * Adds all properties to \em ownerClass. If you do not want a property to be configurable
	 * using XML subclassing use ownerClass.removeProperty() to remove them.
	 */
	public func new( ElementClass ownerClass ) this( ownerClass, "billboard." )
	end
	
	/**
	 * \brief Create composable element class.
	 * 
	 * Adds all properties to \em ownerClass. If you do not want a property to be configurable
	 * using XML subclassing use ownerClass.removeProperty() to remove them.
	 */
	public func new( ElementClass ownerClass, String prefix )
		if prefix == null
			throw EInvalidParam.new()
		end
		
		this.pSkin = ECPSkin.new( prefix + "skin" )
		ownerClass.addProperty( this.pSkin )
		
		this.pAxis = ECPVector.new( prefix + "axis", Vector.new( 0, 1, 0 ) )
		ownerClass.addProperty( this.pAxis )
		
		this.pOffset = ECPVector2.new( prefix + "offset", Vector2.new() )
		ownerClass.addProperty( this.pOffset )
		
		this.pLocked = ECPBoolean.new( prefix + "locked", true )
		ownerClass.addProperty( this.pLocked )
		
		this.pSpherical = ECPBoolean.new( prefix + "spherical", true )
		ownerClass.addProperty( this.pSpherical )
		
		this.pSizeFixedToScreen = ECPBoolean.new( prefix + "sizeFixedToScreen", false )
		ownerClass.addProperty( this.pSizeFixedToScreen )
		
		this.pRenderEnvMap = ECPBoolean.new( prefix + "renderEnvMap", true )
		ownerClass.addProperty( this.pRenderEnvMap )
		
		this.pLayerMask = LayerMask.newWith( BaseGameApp.WorldLayerBit.default )
		this.pLayerMaskRenderEnvMap = LayerMask.newWith( BaseGameApp.WorldLayerBit.envmap )
		
		this.pPrefix = prefix
	end
	
	
	
	/** \brief Skin resource. */
	public func ECPSkin getSkin()
		return this.pSkin
	end
	
	/** \brief Billboard axis. */
	public func ECPVector getAxis()
		return this.pAxis
	end
	
	/** \brief Billboard offset. */
	public func ECPVector2 getOffset()
		return this.pOffset
	end
	
	/** \brief Billboard is locked. */
	public func ECPBoolean getLocked()
		return this.pLocked
	end
	
	/** \brief Billboard is spherical. */
	public func ECPBoolean getSpherical()
		return this.pSpherical
	end
	
	/** \brief Billboard size is fixed to the screen size. */
	public func ECPBoolean getSizeFixedToScreen()
		return this.pSizeFixedToScreen
	end
	
	/** \brief Render prop in environment maps. */
	public func ECPBoolean getRenderEnvMap()
		return this.pRenderEnvMap
	end
	
	/** \brief Layer mask to set (basic layer mask). */
	public func LayerMask getLayerMask()
		return this.pLayerMask
	end
	
	/** \brief Set layer mask to set (basic layer mask). */
	public func void setLayerMask( LayerMask layerMask )
		if layerMask == null
			throw EInvalidParam.new()
		end
		this.pLayerMask = layerMask
	end
	
	/** \brief Layer mask to set if render environment map is true. */
	public func LayerMask getLayerMaskRenderEnvMap()
		return this.pLayerMaskRenderEnvMap
	end
	
	/** \brief Set layer mask to set if render environment map is true. */
	public func void setLayerMaskRenderEnvMap( LayerMask layerMask )
		if layerMask == null
			throw EInvalidParam.new()
		end
		this.pLayerMaskRenderEnvMap = layerMask
	end
	
	/** \brief Property prefix. */
	public func String getPrefix()
		return this.pPrefix
	end
	
	
	
	/** \brief Initialize billboard for element from stub. */
	public func Billboard createBillboard( Element element, StubElement stub )
		var ElementClass eclass = element.getClass()
		var CodecPropertyString codec = element.getClass().getCodecPropertyString()
		var Billboard billboard = Billboard.new()
		
		billboard.setSkin( this.pSkin.getSkin( stub, eclass ) )
		billboard.setPosition( element.getPosition() )
		billboard.setSize( Vector2.new( element.getScaling().getX(), element.getScaling().getY() ) )
		billboard.setOffset( this.pOffset.getVector2( stub, codec ) )
		billboard.setAxis( this.pAxis.getVector( stub, codec ) )
		billboard.setLocked( this.pLocked.getValue( stub ) )
		billboard.setSpherical( this.pSpherical.getValue( stub ) )
		billboard.setSizeFixedToScreen( this.pSizeFixedToScreen.getValue( stub ) )
		
		return billboard
	end
	
	/**
	 * \brief Create billboard layer mask.
	 */
	public func LayerMask createLayerMask( StubElement stub )
		var LayerMask layerMask =  LayerMask.new( this.pLayerMask )
		
		if stub.getPropertyBoolFor( this.pRenderEnvMap.getName(), this.pRenderEnvMap.getValue() )
			layerMask |= this.pLayerMaskRenderEnvMap
		end
		
		return layerMask
	end
end
