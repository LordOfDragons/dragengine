/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */


namespace Dragengine.Scenery

pin Dragengine.Gui
pin Dragengine.Preloading
pin Dragengine.Utils


/**
 * \brief Composable attachable resource for element class.
 * 
 * Provides attachable resource support to element class without subclassing from a
 * specific class. Multiple instances of ECComposeAttachResource can be used by using
 * a property prefix. Supports attaching static or at a specific bone.
 */
class ECComposeAttachResource
	private var ECPVector pPosition
	private var ECPVector pOrientation
	private var ECPString pBone
	private var String pPrefix
	
	
	
	/**
	 * \brief Create composable element class.
	 * 
	 * Adds all properties to \em ownerClass. If you do not want a property to be configurable
	 * using XML subclassing use ownerClass.removeProperty() to remove them.
	 */
	public func new( ElementClass ownerClass ) this( ownerClass, "attach." )
	end
	
	/**
	 * \brief Create composable element class.
	 * 
	 * Adds all properties to \em ownerClass. If you do not want a property to be configurable
	 * using XML subclassing use ownerClass.removeProperty() to remove them. Properties are
	 * prefixed using \em prefix to allow multiple instances of this class to be used. If not
	 * empty \em prefix is typically of the form 'name.' which results for example in a
	 * property named 'name.position'.
	 */
	public func new( ElementClass ownerClass, String prefix )
		this.pPosition = ECPVector.new( prefix + "position", Vector.new() )
		ownerClass.addProperty( this.pPosition )
		
		this.pOrientation = ECPVector.new( prefix + "orientation", Vector.new() )
		ownerClass.addProperty( this.pOrientation )
		
		this.pBone = ECPString.new( prefix + "bone", "" )
		ownerClass.addProperty( this.pBone )
		
		this.pPrefix = prefix
	end
	
	
	
	/** \brief Attach position. */
	public func ECPVector getPosition()
		return this.pPosition
	end
	
	/** \brief Attach orientation. */
	public func ECPVector getOrientation()
		return this.pOrientation
	end
	
	/** \brief Name of bone to attach to \em null if not used. */
	public func ECPString getBone()
		return this.pBone
	end
	
	/** \brief Property prefix. */
	public func String getPrefix()
		return this.pPrefix
	end
	
	
	
	/**
	 * \brief Attach resource to collider using stub.
	 * 
	 * Collider or resource can be \em null in which case nothing is done. If bone is not
	 * empty string \em collider has to be castable to ColliderRig.
	 * 
	 * The following object types can be attached:
	 * - Billboard
	 * - Camera
	 * - Collider
	 * - Component
	 * - DebugDrawer
	 * - EnvMapProbe
	 * - ForceField
	 * - Light
	 * - Lumimeter
	 * - Microphone
	 * - NavigationSpace
	 * - NavigationBlocker
	 * - Navigator
	 * - ParticleEmitterInstance
	 * - PropField
	 * - Speaker
	 * - TouchSensor
	 */
	public func void attach( Collider collider, Object resource, StubElement stub )
		if collider == null or resource == null
			return
		end
		
		var CodecPropertyString codec = stub.getClass().getCodecPropertyString()
		var Vector position = this.pPosition.getVector( stub, codec )
		var Vector orientation = this.pOrientation.getVector( stub, codec )
		var String bone = this.pBone.getValue( stub )
		
		if bone.empty()
			collider.attachStatic( resource, position, Quaternion.newFromEuler( orientation ) )
			
		else
			( collider cast ColliderRig ).attachBone( resource, bone, \
				position, Quaternion.newFromEuler( orientation ) )
		end
	end
end
