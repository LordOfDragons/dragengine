/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */


namespace Dragengine.Scenery

pin Dragengine.Preloading
pin Dragengine.LoadSave
pin Dragengine.Utils


/**
 * \brief Composable navigation blocker for element class.
 * 
 * Provides navigation blocker support to element class without subclassing from a specific
 * class. Creates NavigationBlocker. Use instead of ECComposeNavigation if only blocking
 * properties are desired (and exposed).
 */
class ECComposeNavigationBlocker
	private var ECPInteger pLayer
	private var ECPShapeList pShape
	private var ECPInteger pPriority
	private var String pPrefix
	
	
	
	/**
	 * \brief Create composable element class.
	 * 
	 * Adds all properties to \em ownerClass. If you do not want a property to be configurable
	 * using XML subclassing use ownerClass.removeProperty() to remove them.
	 */
	public func new( ElementClass ownerClass, Loaders loaders ) \
	this( ownerClass, loaders, "navigationBlocker." )
	end
	
	public func new( ElementClass ownerClass, Loaders loaders, String prefix )
		if prefix == null
			throw EInvalidParam.new()
		end
		
		this.pLayer = ECPInteger.new( prefix + "layer", 0 )
		ownerClass.addProperty( this.pLayer )
		
		this.pShape = ECPShapeList.new( prefix + "shape", ownerClass.getSharedCodecPropertyString() )
		ownerClass.addProperty( this.pShape )
		
		this.pPriority = ECPInteger.new( prefix + "priority", 0 )
		ownerClass.addProperty( this.pPriority )
		
		this.pPrefix = prefix
	end
	
	
	
	/** \brief Navigation layer number. */
	public func ECPInteger getLayer()
		return this.pLayer
	end
	
	/** \brief Blocker shape. */
	public func ECPShapeList getShape()
		return this.pShape
	end
	
	/** \brief Blocking priority. */
	public func ECPInteger getPriority()
		return this.pPriority
	end
	
	/** \brief Property prefix. */
	public func String getPrefix()
		return this.pPrefix
	end
	
	
	
	/** \brief Create navigation blocker or \em null if not used. */
	public func NavigationBlocker createNavigationBlocker( Element element, StubElement stub )
		var ShapeList shape = this.pShape.getShapeList()
		
		var String value = stub.getPropertyValueFor( this.pShape.getName(), null )
		if value != null
			shape = this.pShape.getCodec().decodeShapeList( value )
		end
		
		if shape.empty()
			return null
		end
		
		var NavigationBlocker navigationBlocker = NavigationBlocker.new()
		navigationBlocker.setSpaceType( NavigationSpaceType.mesh )
		navigationBlocker.setShapeList( shape )
		navigationBlocker.setLayer( stub.getPropertyIntFor( \
			this.pLayer.getName(), this.pLayer.getValue() ) )
		navigationBlocker.setBlockingPriority( stub.getPropertyIntFor( \
			this.pPriority.getName(), this.pPriority.getValue() ) )
		
		navigationBlocker.setPosition( element.getPosition() )
		navigationBlocker.setOrientation( element.getOrientation() )
		
		return navigationBlocker
	end
end
