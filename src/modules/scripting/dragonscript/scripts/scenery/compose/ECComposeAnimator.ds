/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */


namespace Dragengine.Scenery

pin Dragengine.Preloading
pin Dragengine.LoadSave
pin Dragengine.Utils
pin Dragengine.TriggerSystem


/**
 * \brief Composable animator for element class.
 * 
 * Provides animator support to element class without subclassing from a specific class.
 * Sets the animator to use by an animator instance. Optionally an animation object can
 * be defined overwriting the one used int he animator. The playback parameters influence
 * the playback speed and if the animator is played back looping or once. Optionally an
 * activate playback trigger can be used to switch playback on and off.
 */
class ECComposeAnimator
	/** \brief Playback support for elements. */
	public class Playback
		var AnimatorInstance pInstance
		var AnimatorController pController
		var float pPlaySpeed
		var bool pPlaying
		
		
		
		/** \brief Create playback. */
		func new(AnimatorInstance instance, String playbackController)
			pInstance = instance
			pPlaySpeed = 1
			pPlaying = false
			
			setControllerNamed(playbackController)
		end
	
		
		
		/** \brief Playback speed. */
		func float getPlaySpeed()
			return pPlaySpeed
		end
		
		/** \brief Set playback speed. */
		func void setPlaySpeed(float playSpeed)
			pPlaySpeed = playSpeed
		end
		
		/** \brief Animator instance or \em null if not available. */
		func AnimatorInstance getInstance()
			return pInstance
		end
		
		/** \brief Playback controller or \em null if not available. */
		func AnimatorController getController()
			return pController
		end
		
		/** \brief Set playback controller from index if valid. */
		func void setControllerIndex(int index)
			if pInstance == null or index < 0 or index >= pInstance.getControllerCount()
				return
			end
			pController = pInstance.getControllerAt(index)
		end
		
		/** \brief Set playback controller by name if valid. */
		func void setControllerNamed(String name)
			if pInstance == null
				return
			end
			pController = pInstance.getControllerNamed(name)
		end
		
		
		
		/** \brief Is playing back. */
		func bool getPlaying()
			return pPlaying
		end
		
		/** \brief Set if playing back. */
		func void setPlaying(bool playing)
			pPlaying = playing
		end
		
		/** \brief Is looping. */
		func bool getLooping()
			return pController != null and not pController.getClamp()
		end
		
		/** \brief Set if looping. */
		func void setLooping(bool looping)
			if pController != null
				pController.setClamp(not looping)
			end
		end
		
		/** \brief Playback time. */
		func float getTime()
			return pController != null if pController.getValue() else 0.0
		end
		
		/** \brief Set playback time. */
		func void setTime(float time)
			if pController != null
				pController.setValue(time)
			end
		end
		
		/** \brief Playback is at beginning. */
		func bool isAtBegin()
			return pController != null if pController.isAtLower() else true
		end
		
		/** \brief Playback is at end. */
		func bool isAtEnd()
			return pController != null if pController.isAtUpper() else true
		end
		
		/** \brief Rewind. */
		func void rewind()
			if pController == null
				return
			end
			
			if pPlaySpeed > 0
				pController.setToLower()
				
			else
				pController.setToUpper()
			end
		end
		
		
		
		/**
		 * \brief Update animator.
		 * 
		 * Advances the controller by the elapsed time multiplied by the play speeed
		 * and calls AnimatorInstance.apply().
		 */
		func void update(float elapsed)
			if not pPlaying or pController == null
				return
			end
			
			pController.increment(elapsed * pPlaySpeed)
			
			pInstance.apply()
			
			if pController.getClamp() and pController.isAtUpper()
				setPlaying(false)
			end
		end
		
		/** \brief Apply animation. */
		func void apply()
			if pInstance != null
				pInstance.apply()
			end
		end
		
		
		
		/** \brief Read element from file. */
		func void readFromFile(PersistencyEnvironment env, FileReader reader)
			select reader.readByte() // version
			case 0
				var PersistencyFlags flags = PersistencyFlags.new(1, reader)
				setPlaying(flags.getAt(0))
				setTime(reader.readFloat())
				
			else
				throw EInvalidParam.new("unsupported version")
			end
		end
		
		/** \brief Write element to file. */
		func void writeToFile(PersistencyEnvironment env, FileWriter writer)
			writer.writeByte(0) // version
			
			var PersistencyFlags flags = PersistencyFlags.new(1)
			flags.setAt(0, getPlaying())
			flags.writeToFile(writer)
			writer.writeFloat(getTime())
		end
	end
	
	
	
	var ECPAnimator pAnimator
	var ECPAnimation pAnimation
	var ECPString pMove
	var ECPFloat pPlaySpeed
	var ECPBoolean pPlaying
	var ECPString pPlaybackController
	var ECPBoolean pLoopMove
	var String pPrefix
	
	
	
	/**
	 * \brief Create composable element class.
	 * 
	 * Adds all properties to \em ownerClass. If you do not want a property to be configurable
	 * using XML subclassing use ownerClass.removeProperty() to remove them.
	 */
	func new(ElementClass ownerClass, Loaders loaders) \
	this(ownerClass, loaders, "animator.")
	end
	
	/**
	 * \brief Create composable element class.
	 * 
	 * Adds all properties to \em ownerClass. If you do not want a property to be configurable
	 * using XML subclassing use ownerClass.removeProperty() to remove them.
	 */
	func new(ElementClass ownerClass, Loaders loaders, String prefix)
		if prefix == null
			throw EInvalidParam.new()
		end
		
		pAnimator = ECPAnimator.new(prefix + "animator", loaders.getAnimator())
		ownerClass.addProperty(pAnimator)
		
		pAnimation = ECPAnimation.new(prefix + "animation")
		ownerClass.addProperty(pAnimation)
		
		pPlaySpeed = ECPFloat.new(prefix + "playSpeed", 1)
		ownerClass.addProperty(pPlaySpeed)
		
		pPlaying = ECPBoolean.new(prefix + "playing", false)
		ownerClass.addProperty(pPlaying)
		
		pPlaybackController = ECPString.new(prefix + "playbackController", "playback")
		ownerClass.addProperty(pPlaybackController)
		
		pMove = ECPString.new(prefix + "move", null)
		ownerClass.addProperty(pMove)
		
		pLoopMove = ECPBoolean.new(prefix + "loopMove", true)
		ownerClass.addProperty(pLoopMove)
		
		pPrefix = prefix
	end
	
	
	
	/** \brief Animator resource. */
	func ECPAnimator getAnimator()
		return pAnimator
	end
	
	/** \brief Animation resource. */
	func ECPAnimation getAnimation()
		return pAnimation
	end
	
	/**
	 * \brief Move name.
	 * \version 1.19
	 * 
	 * If animator is not set creates an animator playing back move. This can be
	 * used to play animation moves without needing to create an animator.
	 */
	func ECPString getMove()
		return pMove
	end
	
	/** \brief Play speed. */
	func ECPFloat getPlaySpeed()
		return pPlaySpeed
	end
	
	/** \brief Animation is playing. */
	func ECPBoolean getPlaying()
		return pPlaying
	end
	
	/** \brief Playback controller name. */
	func ECPString getPlaybackController()
		return pPlaybackController
	end
	
	/**
	 * \brief Loop animation move.
	 * \version 1.19
	 * 
	 * Used only if animator is not set and animation and move is set.
	 */
	func ECPBoolean getLoopMove()
		return pLoopMove
	end
	
	/** \brief Property prefix. */
	func String getPrefix()
		return pPrefix
	end
	
	
	
	/**
	 * \deprecated Use createAnimatorInstance(Element,StubElement,Component)
	 */
	func AnimatorInstance createAnimatorInstance(Element element, StubElement stub)
		return createAnimatorInstance(element, stub, null)
	end
	
	/**
	 * \brief Initialize animator instance for element from stub.
	 * \version 1.19
	 * 
	 * Assigns the animator and animation to the instance. If at least one controller is
	 * present then the first controller is initialized as playback controller. If no animator
	 * is defined but animation and move is defined an animator is created with one controller
	 * and an animation rule playing back the move.
	 */
	func AnimatorInstance createAnimatorInstance(Element element, StubElement stub, Component component)
		var Animator animator = pAnimator.getAnimator(stub, element.getClass())
		var Animation animation = pAnimation.getAnimation(stub, element.getClass())
		
		if animator == null
			animator = createMoveAnimator(element, stub, component)
			if animator == null
				return null
			end
		end
		
		// create animator instance
		var AnimatorInstance instance = AnimatorInstance.new()
		instance.setAnimator(animator)
		instance.setAnimation(animation)
		instance.setComponent(component)
		return instance
	end
	
	/**
	 * \brief Create animator using animation and move.
	 * \version 1.19
	 * 
	 * Creates animator is created with one controller and an animation rule playing
	 * back the move. Playback can be looping or not depending on getLoopMove().
	 * If animation or move is null no animator is created and null is returned.
	 */
	func Animator createMoveAnimator(Element element, StubElement stub, Component component)
		if component == null
			return null
		end
		
		var Animation animation = pAnimation.getAnimation(stub, element.getClass())
		if animation == null
			return null
		end
		
		var String move = pMove.getValueOrNull(stub)
		if move == null
			return null
		end
		
		var Animator animator = Animator.new()
		animator.setRig(component.getRig())
		animator.setAnimation(animation)
		animator.setControllerCount(1)
		
		var AnimatorController controller = animator.getControllerAt(0)
		controller.setName(pPlaybackController.getValue(stub))
		controller.setRange(0, animation.getMovePlaytime(move))
		controller.setClamp(not pLoopMove.getValue(stub))
		
		animator.addLink(0)
		animator.setLinkCurve(0, CurveBezier.newDefaultLinear())
		
		var ARAnimation rule = ARAnimation.new()
		rule.setEnableSize(true)
		rule.setMoveName(move)
		rule.targetAddLink(ARAnimationTarget.moveTime, 0)
		animator.addRule(rule)
		
		return animator
	end
	
	/** \brief Create playback helper. */
	func Playback createPlayback(AnimatorInstance instance, StubElement stub)
		var Playback playback = Playback.new(instance, pPlaybackController.getValue(stub))
		playback.setPlaySpeed(pPlaySpeed.getValue(stub))
		playback.setPlaying(pPlaying.getValue(stub))
		return playback
	end
	
	/** \brief Create playing trigger expression from stub or \em null if not used. */
	func TSTriggerExpression createTriggerPlaying(Element element, StubElement stub)
		return createTriggerPlaying(element, stub, "")
	end
	
	/** \brief Create playing trigger expression from stub or \em null if not used. */
	func TSTriggerExpression createTriggerPlaying(Element element, StubElement stub, String defaultValue)
		var String value = stub.getPropertyValueFor(pPrefix + "trigger", defaultValue)
		
		if value.empty()
			return null
			
		else
			return element.getClass().getTriggerExpressionParser().stringToExpression(value)
		end
	end
end
