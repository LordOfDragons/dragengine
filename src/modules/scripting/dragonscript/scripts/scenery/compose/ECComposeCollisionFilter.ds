/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */


namespace Dragengine.Scenery

pin Dragengine.Preloading
pin Dragengine.Utils


/**
 * \brief Composable collision filter for element class.
 */
class ECComposeCollisionFilter
	/** \brief Collider collision filter. */
	private var CollisionFilter pCollisionFilter
	
	
	
	/**
	 * \brief Create composable element class.
	 * 
	 * Adds all properties to \em ownerClass. If you do not want a property to be configurable
	 * using XML subclassing use ownerClass.removeProperty() to remove them.
	 */
	public func new()
		this.pCollisionFilter = CollisionFilter.new()
	end
	
	public func new( CollisionFilter filter )
		this.pCollisionFilter = filter
	end
	
	
	
	/** \brief Collision filter. */
	public func CollisionFilter getCollisionFilter()
		return this.pCollisionFilter
	end
	
	/** \brief Set collision filter. */
	public func void setCollisionFilter( CollisionFilter collisionFilter )
		this.pCollisionFilter = collisionFilter
	end
	
	/** \brief Convience function clearing bit in collision category. */
	public func void collisionCategoryClearBit( int bit )
		var LayerMask mask = this.pCollisionFilter.getCategory()
		mask.clearBit( bit )
		this.pCollisionFilter = CollisionFilter.new( mask, this.pCollisionFilter.getFilter() )
	end
	
	/** \brief Convience function setting bit in collision category. */
	public func void collisionCategorySetBit( int bit )
		var LayerMask mask = this.pCollisionFilter.getCategory()
		mask.setBit( bit )
		this.pCollisionFilter = CollisionFilter.new( mask, this.pCollisionFilter.getFilter() )
	end
	
	/** \brief Convience function clearing bit in collision filter. */
	public func void collisionFilterClearBit( int bit )
		var LayerMask mask = this.pCollisionFilter.getFilter()
		mask.clearBit( bit )
		this.pCollisionFilter = CollisionFilter.new( this.pCollisionFilter.getCategory(), mask )
	end
	
	/** \brief Convience function setting bit in collision filter. */
	public func void collisionFilterSetBit( int bit )
		var LayerMask mask = this.pCollisionFilter.getFilter()
		mask.setBit( bit )
		this.pCollisionFilter = CollisionFilter.new( this.pCollisionFilter.getCategory(), mask )
	end
end
