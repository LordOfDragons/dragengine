/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */


namespace Dragengine.Scenery

pin Dragengine.Preloading
pin Dragengine.Utils


/**
 * \brief Composable component for element class.
 * 
 * Provides component support to element class without subclassing from a specific class.
 */
class ECComposeComponent
	var ECPModel pModel
	var ECPSkin pSkin
	var ECPRig pRig
	var ECPOcclusionMesh pOcclusionMesh
	var ECPModel pAudioModel
	var ECPTextureReplacementList pTextureReplacements
	var ECPBoolean pRenderEnvMap
	var ECPBoolean pAffectsAudio
	var LayerMask pLayerMask
	var LayerMask pLayerMaskRenderEnvMap
	var LayerMask pLayerMaskAffectsAudio
	var ECPEnumeration pHintMovement
	var ECPBoolean pEnableGI
	var ECPInteger pHintGIImportance
	
	var String pPrefix
	
	
	
	/**
	 * \brief Create composable element class.
	 * 
	 * Adds all properties to \em ownerClass. If you do not want a property to be configurable
	 * using XML subclassing use ownerClass.removeProperty() to remove them.
	 */
	func new(ElementClass ownerClass) \
	this(ownerClass, ECPTextureReplacementList.new("textureReplacements"), "component.")
	end
	
	/**
	 * \brief Create composable element class.
	 * 
	 * Adds all properties to \em ownerClass. If you do not want a property to be configurable
	 * using XML subclassing use ownerClass.removeProperty() to remove them.
	 */
	func new(ElementClass ownerClass, String prefix) \
	this(ownerClass, ECPTextureReplacementList.new("textureReplacements"), prefix)
	end
	
	/**
	 * \brief Create composable element class.
	 * 
	 * Adds all properties to \em ownerClass. If you do not want a property to be configurable
	 * using XML subclassing use ownerClass.removeProperty() to remove them.
	 */
	func new(ElementClass ownerClass, ECPTextureReplacementList textureReplacement) \
	this(ownerClass, textureReplacement, "component.")
	end
	
	/**
	 * \brief Create composable element class.
	 * 
	 * Adds all properties to \em ownerClass. If you do not want a property to be configurable
	 * using XML subclassing use ownerClass.removeProperty() to remove them.
	 */
	func new(ElementClass ownerClass, ECPTextureReplacementList textureReplacement, String prefix)
		if textureReplacement == null or prefix == null
			throw EInvalidParam.new()
		end
		
		pModel = ECPModel.new(prefix + "model")
		ownerClass.addProperty(pModel)
		
		pSkin = ECPSkin.new(prefix + "skin")
		ownerClass.addProperty(pSkin)
		
		pRig = ECPRig.new(prefix + "rig")
		ownerClass.addProperty(pRig)
		
		pOcclusionMesh = ECPOcclusionMesh.new(prefix + "occlusionMesh")
		ownerClass.addProperty(pOcclusionMesh)
		
		pAudioModel = ECPModel.new(prefix + "audioModel")
		ownerClass.addProperty(pAudioModel)
		
		pTextureReplacements = textureReplacement
		ownerClass.addProperty(pTextureReplacements)
		
		pRenderEnvMap = ECPBoolean.new(prefix + "renderEnvMap", true)
		ownerClass.addProperty(pRenderEnvMap)
		
		pAffectsAudio = ECPBoolean.new(prefix + "affectsAudio", true)
		ownerClass.addProperty(pAffectsAudio)
		
		pHintMovement = ECPEnumeration.new(prefix + "hintMovement", \
			ComponentHintMovement.all(), ComponentHintMovement.stationary)
		ownerClass.addProperty(pHintMovement)
		
		pEnableGI = ECPBoolean.new(prefix + "enableGI", true)
		ownerClass.addProperty(pEnableGI)
		
		pHintGIImportance = ECPInteger.new(prefix + "hintGIImportance", 4, 0, 4)
		ownerClass.addProperty(pHintGIImportance)
		
		pLayerMask = LayerMask.newWith(BaseGameApp.WorldLayerBit.default)
		pLayerMaskRenderEnvMap = LayerMask.newWith(BaseGameApp.WorldLayerBit.envmap)
		pLayerMaskAffectsAudio = LayerMask.newWith(BaseGameApp.WorldLayerBit.audio)
		
		pPrefix = prefix
	end
	
	
	
	/** \brief Model resource. */
	func ECPModel getModel()
		return pModel
	end
	
	/** \brief Skin resource. */
	func ECPSkin getSkin()
		return pSkin
	end
	
	/** \brief Rig resource. */
	func ECPRig getRig()
		return pRig
	end
	
	/** \brief Occlusion mesh resource. */
	func ECPOcclusionMesh getOcclusionMesh()
		return pOcclusionMesh
	end
	
	/** \brief Audio model resource. */
	func ECPModel getAudioModel()
		return pAudioModel
	end
	
	/** \brief Texture replacements. */
	func ECPTextureReplacementList getTextureReplacements()
		return pTextureReplacements
	end
	
	/** \brief Render prop in environment maps. */
	func ECPBoolean getRenderEnvMap()
		return pRenderEnvMap
	end
	
	/** \brief Prop affects audio. */
	func ECPBoolean getAffectsAudio()
		return pAffectsAudio
	end
	
	/** \brief Layer mask to set (basic layer mask). */
	func LayerMask getLayerMask()
		return pLayerMask
	end
	
	/** \brief Set layer mask to set (basic layer mask). */
	func void setLayerMask(LayerMask layerMask)
		if layerMask == null
			throw EInvalidParam.new()
		end
		pLayerMask = layerMask
	end
	
	/** \brief Layer mask to set if render environment map is true. */
	func LayerMask getLayerMaskRenderEnvMap()
		return pLayerMaskRenderEnvMap
	end
	
	/** \brief Set layer mask to set if render environment map is true. */
	func void setLayerMaskRenderEnvMap(LayerMask layerMask)
		if layerMask == null
			throw EInvalidParam.new()
		end
		pLayerMaskRenderEnvMap = layerMask
	end
	
	/** \brief Layer mask to set if affects audio is true. */
	func LayerMask getLayerMaskAffectsAudio()
		return pLayerMaskAffectsAudio
	end
	
	/** \brief Set layer mask to set if affects audio is true. */
	func void setLayerMaskAffectsAudio(LayerMask layerMask)
		if layerMask == null
			throw EInvalidParam.new()
		end
		pLayerMaskAffectsAudio = layerMask
	end
	
	/** \brief Hint movement. */
	func ECPEnumeration getHintMovement()
		return pHintMovement
	end
	
	/**
	 * \brief Enable GI in graphic module if supported.
	 * \version 1.19
	 */
	func ECPBoolean getEnableGI()
		return pEnableGI
	end
	
	/**
	 * \brief GI important hint.
	 * \version 1.19
	 * 
	 * Value is in the range from 0 (very unimportant) to 4 (very important). This hint
	 * can be used by the graphic module to improve performance by excluding components
	 * with a GI important below a user chosen threashold. The default important is 4.
	 */
	func ECPInteger getHintGIImportance()
		return pHintGIImportance
	end
	
	/** \brief Property prefix. */
	func String getPrefix()
		return pPrefix
	end
	
	
	
	/** \brief Initialize component for element from stub. */
	func Component createComponent(Element element, StubElement stub)
		var ElementClass eclass = element.getClass()
		var Component component = Component.new(\
			pModel.getModel(stub, eclass), pSkin.getSkin(stub, eclass))
		component.setRig(pRig.getRig(stub, eclass))
		component.setOcclusionMesh(pOcclusionMesh.getOcclusionMesh(stub, eclass))
		component.setAudioModel(pAudioModel.getModel(stub, eclass))
		component.setPosition(element.getPosition())
		component.setOrientation(element.getOrientation())
		component.setScaling(element.getScaling())
		component.setHintMovement(pHintMovement.getEnumeration(stub) cast ComponentHintMovement)
		component.setEnableGI(pEnableGI.getValue(stub))
		component.setHintGIImportance(pHintGIImportance.getValue(stub))
		return component
	end
	
	/**
	 * \brief Create component layer mask.
	 */
	func LayerMask createLayerMask(StubElement stub)
		var LayerMask layerMask =  LayerMask.new(pLayerMask)
		
		if stub.getPropertyBoolFor(pRenderEnvMap.getName(), pRenderEnvMap.getValue())
			layerMask |= pLayerMaskRenderEnvMap
		end
		
		if stub.getPropertyBoolFor(pAffectsAudio.getName(), pAffectsAudio.getValue())
			layerMask |= pLayerMaskAffectsAudio
		end
		
		return layerMask
	end
	
	/** \brief Replace textures using element class and a stub. */
	func void replaceTextures(Component component, StubElement stub)
		pTextureReplacements.getList().applyToComponent(component)
		
		var TextureReplacementList stubReplacements = TextureReplacementList.new()
		stubReplacements.addFromStub(stub)
		stubReplacements.applyToComponent(component)
	end
end
