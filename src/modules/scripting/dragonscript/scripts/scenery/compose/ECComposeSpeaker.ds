/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */


namespace Dragengine.Scenery

pin Dragengine.Gui
pin Dragengine.LoadSave
pin Dragengine.Preloading
pin Dragengine.Utils
pin Dragengine.TriggerSystem


/**
 * \brief Composable speaker for element class.
 * 
 * Provides speaker support to element class without subclassing from a specific class.
 */
class ECComposeSpeaker
	private var ECPEnumeration pSpeakerType
	private var ECPSound pSound
	private var ECPSynthesizer pSynthesizer
	private var ECPFloat pVolume
	private var ECPFloat pRange
	private var ECPFloat pRollOff
	private var ECPFloat pDistanceOffset
	private var ECPFloat pPlaySpeed
	private var ECPBoolean pMuted
	private var ECPBoolean pLooping
	private var ECPBoolean pPlaying
	private var ECPShapeList pShape
	private var LayerMask pLayerMask
	
	private var String pPrefix
	
	
	
	/**
	 * \brief Create composable element class.
	 * 
	 * Adds all properties to \em ownerClass. If you do not want a property to be configurable
	 * using XML subclassing use ownerClass.removeProperty() to remove them.
	 */
	public func new(ElementClass ownerClass, Loaders loaders) this(ownerClass, loaders, "speaker.")
	end
	
	/**
	 * \brief Create composable element class.
	 * 
	 * Adds all properties to \em ownerClass. If you do not want a property to be configurable
	 * using XML subclassing use ownerClass.removeProperty() to remove them.
	 */
	public func new(ElementClass ownerClass, Loaders loaders, String prefix)
		pLayerMask = LayerMask.newWith(BaseGameApp.WorldLayerBit.audio)
		
		pSpeakerType = ECPEnumeration.new(prefix + "type", SpeakerType.all(), SpeakerType.point)
		ownerClass.addProperty(pSpeakerType)
		
		pSound = ECPSound.new(prefix + "sound")
		ownerClass.addProperty(pSound)
		
		pSynthesizer = ECPSynthesizer.new(prefix + "synthesizer", loaders.getSynthesizer())
		ownerClass.addProperty(pSynthesizer)
		
		pVolume = ECPFloat.new(prefix + "volume", 1, 0)
		ownerClass.addProperty(pVolume)
		
		pRange = ECPFloat.new(prefix + "range", 30, 0)
		ownerClass.addProperty(pRange)
		
		pRollOff = ECPFloat.new(prefix + "rollOff", 1, 0)
		ownerClass.addProperty(pRollOff)
		
		pDistanceOffset = ECPFloat.new(prefix + "distanceOffset", 0, 0)
		ownerClass.addProperty(pDistanceOffset)
		
		pPlaySpeed = ECPFloat.new(prefix + "playSpeed", 1)
		ownerClass.addProperty(pPlaySpeed)
		
		pMuted = ECPBoolean.new(prefix + "muted", false)
		ownerClass.addProperty(pMuted)
		
		pLooping = ECPBoolean.new(prefix + "looping", true)
		ownerClass.addProperty(pLooping)
		
		pPlaying = ECPBoolean.new(prefix + "playing", true)
		ownerClass.addProperty(pPlaying)
		
		pShape = ECPShapeList.new(prefix + "shape", ownerClass.getSharedCodecPropertyString())
		ownerClass.addProperty(pShape)
		
		pPrefix = prefix
	end
	
	
	
	/** \brief Speaker type. */
	public func ECPEnumeration getSpeakerType()
		return pSpeakerType
	end
	
	/** \brief Speaker sound. */
	public func ECPSound getSound()
		return pSound
	end
	
	/** \brief Speaker synthesizer. */
	public func ECPSynthesizer getSynthesizer()
		return pSynthesizer
	end
	
	/** \brief Speaker volume. */
	public func ECPFloat getVolume()
		return pVolume
	end
	
	/** \brief Speaker range. */
	public func ECPFloat getRange()
		return pRange
	end
	
	/** \brief Roll off. */
	public func ECPFloat getRollOff()
		return pRollOff
	end
	
	/** \brief Distance offset. */
	public func ECPFloat getDistanceOffset()
		return pDistanceOffset
	end
	
	/** \brief Play speed. */
	public func ECPFloat getPlaySpeed()
		return pPlaySpeed
	end
	
	/** \brief Speaker is muted. */
	public func ECPBoolean getMuted()
		return pMuted
	end
	
	/** \brief Speaker is looping. */
	public func ECPBoolean getLooping()
		return pLooping
	end
	
	/** \brief Speaker is playing. */
	public func ECPBoolean getPlaying()
		return pPlaying
	end
	
	/** \brief Layer mask. */
	public func LayerMask getLayerMask()
		return pLayerMask
	end
	
	/** \brief Set layer mask. */
	public func void setLayerMask(LayerMask layerMask)
		if layerMask == null
			throw EInvalidParam.new()
		end
		pLayerMask = layerMask
	end
	
	/** \brief Property prefix. */
	public func String getPrefix()
		return pPrefix
	end
	
	/** \brief Speaker shape. */
	public func ECPShapeList getShape()
		return pShape
	end
	
	
	
	/** \brief Create speaker. */
	public func Speaker createSpeaker()
		var Speaker speaker = Speaker.new()
		
		speaker.setType(pSpeakerType.getEnumeration() cast SpeakerType)
		speaker.setSound(pSound.getSound())
		speaker.setVolume(pVolume.getValue())
		speaker.setRange(pRange.getValue())
		speaker.setLayerMask(pLayerMask)
		speaker.setRollOff(pRollOff.getValue())
		speaker.setDistanceOffset(pDistanceOffset.getValue())
		speaker.setPlaySpeed(pPlaySpeed.getValue())
		speaker.setMuted(pMuted.getValue())
		speaker.setLooping(pLooping.getValue())
		speaker.setShape(pShape.getShapeList())
		
		var Synthesizer synthesizer = pSynthesizer.getSynthesizer()
		if synthesizer != null
			var SynthesizerInstance synthInst = SynthesizerInstance.new()
			synthInst.setSynthesizer(synthesizer)
			speaker.setSynthesizer(synthInst)
		end
		
		if pPlaying.getValue()
			speaker.play()
		end
		
		return speaker
	end
	
	/** \brief Initialize speaker for element from stub. */
	public func Speaker createSpeaker(Element element, StubElement stub)
		var ElementClass eclass = element.getClass()
		var Speaker speaker = Speaker.new()
		
		speaker.setPosition(element.getPosition())
		speaker.setOrientation(element.getOrientation())
		speaker.setType(pSpeakerType.getEnumeration(stub) cast SpeakerType)
		speaker.setSound(pSound.getSound(stub, eclass))
		speaker.setVolume(pVolume.getValue(stub))
		speaker.setRange(pRange.getValue(stub))
		speaker.setLayerMask(pLayerMask)
		speaker.setRollOff(pRollOff.getValue(stub))
		speaker.setDistanceOffset(pDistanceOffset.getValue(stub))
		speaker.setPlaySpeed(pPlaySpeed.getValue(stub))
		speaker.setMuted(pMuted.getValue(stub))
		speaker.setLooping(pLooping.getValue(stub))
		speaker.setShape(pShape.getShapeList(stub))
		
		var Synthesizer synthesizer = pSynthesizer.getSynthesizer(stub, eclass)
		if synthesizer != null
			var SynthesizerInstance synthInst = SynthesizerInstance.new()
			synthInst.setSynthesizer(synthesizer)
			speaker.setSynthesizer(synthInst)
		end
		
		if pPlaying.getValue(stub)
			speaker.play()
		end
		
		return speaker
	end
	
	/** \brief Create muted speaker trigger expression from stub or \em null if not used. */
	public func TSTriggerExpression createTriggerMuted(Element element, StubElement stub)
		return createTriggerMuted(element, stub, "")
	end
	
	/** \brief Create muted speaker trigger expression from stub or \em null if not used. */
	public func TSTriggerExpression createTriggerMuted(Element element, StubElement stub, String defaultValue)
		var String value = stub.getPropertyValueFor(pPrefix + "trigger(muted)", defaultValue)
		
		if value.empty()
			return null
			
		else
			return element.getClass().getTriggerExpressionParser().stringToExpression(value)
		end
	end
	
	/** \brief Create playing speaker trigger expression from stub or \em null if not used. */
	public func TSTriggerExpression createTriggerPlaying(Element element, StubElement stub)
		return createTriggerPlaying(element, stub, "")
	end
	
	/** \brief Create playing speaker trigger expression from stub or \em null if not used. */
	public func TSTriggerExpression createTriggerPlaying(Element element, StubElement stub, String defaultValue)
		var String value = stub.getPropertyValueFor(pPrefix + "trigger", defaultValue)
		
		if value.empty()
			return null
			
		else
			return element.getClass().getTriggerExpressionParser().stringToExpression(value)
		end
	end
end
