/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */


namespace Dragengine.Scenery

pin Dragengine.ConversationSystem
pin Dragengine.Gui
pin Dragengine.LoadSave
pin Dragengine.Preloading
pin Dragengine.Utils


/**
 * \brief Game world.
 * 
 * A single simulation unit in the game. Simple games require usually only one game world
 * containing all elements of the currently loaded map or level. More complex games can use
 * multiple game worlds for example to simulate development of the game world outside the
 * currently visible section. Every game world wraps an engine world resource. Elements
 * removed from the game world using removeElement are not disposed of. This allows to move
 * elements between game worlds. Elements removed using removeAllElements though get disposed.
 */
class GameWorld
	var World pWorld
	var SafeArray pElements
	var SafeArray pThinkers
	var Dictionary pElementIDMap
	var Array pEnterFrameOnce
	var bool pLockEnterFrameOnce
	var SpawnPointList pSpawnPoints
	var TemporaryDecalManager pTempDecalMgr
	var CachedVegetation pCachedVegetation
	var UniqueID pNextObjectID
	var UniqueIDRemapper pUniqueIDRemapper
	var Vector pGravity
	var RailList pRailList
	var ConversationActorList pConvoActorList
	var ConversationCoordSystemList pConvoCoordSystemList
	var AnchoredElementList pAnchoredElementList
	var StubGameWorld pStub
	var Array pBehaviors
	var bool pBehaviorsInited
	var Array pThinkingBehaviors
	var bool pEnablePersistency
	var bool pEnableReadDynDataWithSize
	
	var GWBehaviorOneShotSpeaker pBehaviorOneShotSpeaker
	
	
	
	/** \brief Create game world. */
	func new()
		pWorld = World.new()
		pEnablePersistency = not Engine.isCompatibleVersionOlder(1, 17)
		
		pElements = SafeArray.new()
		pThinkers = SafeArray.new()
		pElementIDMap = Dictionary.new()
		pEnterFrameOnce = Array.new()
		pSpawnPoints = SpawnPointList.new()
		pTempDecalMgr = TemporaryDecalManager.new()
		pUniqueIDRemapper = UniqueIDRemapper.new()
		pGravity = Vector.new(0, -9.81, 0)
		pRailList = RailList.new()
		pConvoActorList = ConversationActorList.new()
		pConvoCoordSystemList = ConversationCoordSystemList.new()
		pAnchoredElementList = AnchoredElementList.new()
		pBehaviors = Array.new()
		pThinkingBehaviors = Array.new()
		
		// add behaviors
		pBehaviorOneShotSpeaker = GWBehaviorOneShotSpeaker.new(this)
		addBehavior(pBehaviorOneShotSpeaker)
	end
	
	
	
	/** \brief Dispose of game world. */
	func void dispose()
		/*
		// for debugging purpose this code here can be used
		removeAllElements()
		if pThinkers != null
			pThinkers.forEach(block Element each
				BaseGameApp.getApp().getConsole().addMessage("GameWorld.dispose: Object of class " + each.className() + " left behind thinker")
			end)
		end
		*/
		
		pElements.removeAll(block Element each
			each.setGameWorld(null)
			each.safeDispose()
		end)
		
		if pBehaviors != null
			pBehaviors.forEachReverse(block GWBehavior each
				each.dispose()
			end)
			pBehaviors = null
		end
		pThinkingBehaviors = null
		pBehaviorOneShotSpeaker = null
		
		pThinkers = null
		pEnterFrameOnce = null
		pElementIDMap = null
		
		if pCachedVegetation != null
			pCachedVegetation.setWorld(null)
			pCachedVegetation = null
		end
		
		pConvoActorList = null
		pConvoCoordSystemList = null
		pAnchoredElementList = null
		pTempDecalMgr = null
		pSpawnPoints = null
		
		if pRailList != null
			pRailList.dispose()
			pRailList = null
		end
		
		pWorld = null
		pStub = null
	end
	
	
	
	/** \brief Engine world resource. */
	func World getWorld()
		return pWorld
	end
	
	
	
	/**
	 * \brief Count of behaviors.
	 * \version 1.17
	 */
	func int getBehaviorCount()
		return pBehaviors.getCount()
	end
	
	/**
	 * \brief Behavior at index.
	 * \version 1.17
	 */
	func GWBehavior getBehaviorAt(int index)
		return pBehaviors.getAt(index) cast GWBehavior
	end
	
	/**
	 * \brief Add behavior.
	 * \version 1.17
	 * 
	 * This is called by constructors of class implementing GWBehavior. Usually you do not
	 * have to call this manually.
	 */
	func void addBehavior(GWBehavior behavior)
		if behavior == null or pBehaviors.has(behavior)
			throw EInvalidParam.new("duplicate behavior")
		end
		
		pBehaviors.add(behavior)
		
		if behavior.requiresThink()
			pThinkingBehaviors.add(behavior)
		end
		
		if pBehaviorsInited
			behavior.init(pStub)
		end
	end
	
	/**
	 * \brief Visit behaviors with block.
	 * \versoin 1.17
	 * 
	 * Block is required to have one parameter of type GWBehavior or subclass thereof.
	 * Block is called only for behaviors castable to block parameter type.
	 */
	func void forEachBehavior(Block ablock)
		pBehaviors.forEachCastable(ablock)
	end
	
	/**
	 * \brief Find behavior with block.
	 * \version 1.17
	 * 
	 * Block is required to have one parameter GWBehavior or subclass thereof and returning
	 * true if the right behavior is found otherwise false. Block is called only for
	 * behaviors castable to block parameter type.
	 */
	func GWBehavior findBehavior(Block ablock)
		return pBehaviors.findCastable(ablock) cast GWBehavior
	end
	
	/**
	 * \brief Collect behaviors with block into Array.
	 * \version 1.17
	 * 
	 * Block is required to have one parameter GWBehavior or subclass thereof and returning
	 * true if the right behavior is found otherwise false. Block is called only for
	 * behaviors castable to block parameter type.
	 */
	func Array collectBehaviors(Block ablock)
		return pBehaviors.collectCastable(ablock)
	end
	
	/**
	 * \brief Requires thinking changed.
	 * \version 1.17
	 * 
	 * Called by GWBehavior if their requirement for thinking changed. This means requiresThink()
	 * implementations return different values than last time they have been checked. Game world
	 * will check all behaviors for their thinking requirements changes. Using this method helps
	 * to reduce script processing load by not making calling update(), think() and postThink()
	 * on behaviors not requiring it.
	 */
	func void requiresThinkChanged()
		pThinkingBehaviors = pBehaviors.collect(block GWBehavior each
			return each.requiresThink()
		end)
	end
	
	
	
	/**
	 * \brief One shot speaker game world behavior.
	 * \version 1.17
	 */
	func GWBehaviorOneShotSpeaker getBehaviorOneShotSpeaker()
		return pBehaviorOneShotSpeaker
	end
	
	
	
	/**
	 * \brief Enable persistency (backward compatibility).
	 * \version 1.17
	 * 
	 * Since Drag[en]gine 1.17 GameWorld supports persistency to load and save game world
	 * behavior states. This is incompatible with old saves where GameWorld did not persist
	 * any data. To support loading and saving saves prior to 1.17 use this method.
	 * 
	 * - While loading save states created prior to 1.17 set false
	 * - While loading save states created using 1.17 or later set to true
	 * - While saving converted save states supported 1.17 and later set to true
	 * - While saving save states not supporting 1.17 or later set to false
	 * 
	 * Hence to support loading old saves and saving new saves load with false and save with true.
	 * 
	 * By default enable persistency is set to true if the required version of the game project
	 * is set to 1.17 or newer and false otherwise. Hence projects require an earlier version
	 * will always operate with enable persistency set to false keeping them compatible while
	 * projects requiring 1.17 or newer enable persistency.
	 */
	func bool getEnablePersistency()
		return pEnablePersistency
	end
	
	func void setEnablePersistency(bool enable)
		pEnablePersistency = enable
	end
	
	/**
	 * \brief Enable reading dynamic element data from persistency with size.
	 * \version 1.23
	 * 
	 * Returns true if readElementStubsFromFile() encountered version 1 or higher.
	 */
	func bool getEnableReadDynDataWithSize()
		return pEnableReadDynDataWithSize
	end
	
	
	
	/** \brief Add Element. */
	func void addElement(Element element)
		if element.getGameWorld() == this
			return // adding more than once is allowed to make scripts simpler and more robust
		end
		if element.getGameWorld() != null
			throw EInvalidParam.new()
		end
		
		pElements.add(element)
		element.setGameWorld(this)
		pElementIDMap.setAt(element.getID(), element)
	end
	
// 	public static var RuntimeMeter rtm = null
	/** \brief Remove Element without disposing it. */
	func void removeElement(Element element)
		/*if rtm != null
			rtm.reset(0, 1)
			
			pElements.remove(element)
			rtm.counterAdd(0, 6)
			
			element.setGameWorld(null)
			rtm.counterAdd(0, 7)
			
			if pThinkers.has(element)
				BaseGameApp.getApp().getConsole().addMessage("GameWorld.removeElement: Object of class " + element.className() + " left behind thinker")
				pThinkers.remove(element)
			end
			var int index = pEnterFrameOnce.indexOf(element)
			if index != -1
				BaseGameApp.getApp().getConsole().addMessage("GameWorld.removeElement: Object of class " + element.className() + " left behind enter frame once")
				pEnterFrameOnce.removeFrom(index)
			end
			rtm.counterAdd(0, 8)
			return
		end*/
		
		pElements.remove(element)
		element.setGameWorld(null)
		pElementIDMap.removeIfExisting(element.getID())
		
		if pThinkers.has(element)
			BaseGameApp.getApp().getConsole().addMessage("GameWorld.removeElement: Object of class " + element.className() + " left behind thinker")
			pThinkers.remove(element)
		end
		
		var int index = pEnterFrameOnce.indexOf(element)
		if index != -1
			BaseGameApp.getApp().getConsole().addMessage("GameWorld.removeElement: Object of class " + element.className() + " left behind enter frame once")
			pPrepareUpdateEnterFrameOnce()
			pEnterFrameOnce.removeFrom(index)
		end
	end
	
	/** \brief Remove all elements calling safeDispose() on them. */
	func void removeAllElements()
		pElements.removeAll(block Element each
			each.setGameWorld(null)
			each.safeDispose()
		end)
		pElementIDMap.removeAll()
	end
	
	/** \brief Element is present. */
	func bool hasElement(Element element)
		return pElements.has(element)
	end
	
	/** \brief Element with identifier or \em null if absent. */
	func Element getElementWithID(UniqueID id)
		return pElementIDMap.getAt(id, null) cast Element
	end
	
	/** \brief Visit elements. */
	func void visitElements(ElementVisitor visitor)
		pElements.forEach(block Element each
			each.visit(visitor)
		end)
	end
	
	/** \brief Visit elements with block with parameter Element. */
	func void forEachElement(Block ablock)
		pElements.forEach(ablock)
	end
	
	/** \brief Find element with block with parameter Element. */
	func Element findElement(Block ablock)
		return pElements.find(ablock) cast Element
	end
	
	
	
	/** \brief Add element requiring thinking on frame updates. */
	func void addThinker(Element element)
		if element == null
			throw EInvalidParam.new()
		end
		pThinkers.addIfAbsent(element)
	end
	
	/** \brief Remove element requiring thinking on frame updates. */
	func void removeThinker(Element element)
		pThinkers.removeIfPresent(element)
	end
	
	/** \brief Visit thinkers with block with parameter Element. */
	func void forEachThinker(Block ablock)
		pThinkers.forEach(ablock)
	end
	
	
	
	/** \brief Call Element.enterFrame() on element once at start of next frame update. */
	func void addEnterFrameOnce(Element element)
		if element == null
			throw EInvalidParam.new()
		end
		
		if not pEnterFrameOnce.has(element)
			pPrepareUpdateEnterFrameOnce()
			pEnterFrameOnce.add(element)
		end
	end
	
	/** \brief Stop call Element.enterFrame() on element once at start of next frame update. */
	func void removeEnterFrameOnce(Element element)
		var int index = pEnterFrameOnce.indexOf(element)
		if index != -1
			pPrepareUpdateEnterFrameOnce()
			pEnterFrameOnce.removeFrom(index)
		end
	end
	
	
	
	/** \brief Cached vegetation. */
	func CachedVegetation getCachedVegetation()
		return pCachedVegetation
	end
	
	/** \brief Set cached vegetation. */
	func void setCachedVegetation(CachedVegetation cachedVegetation)
		pCachedVegetation = cachedVegetation
		if cachedVegetation != null
			cachedVegetation.setWorld(pWorld)
		end
	end
	
	/** \brief Gravity. */
	func Vector getGravity()
		return pGravity
	end
	
	/** \brief Set gravity. */
	func void setGravity(Vector gravity)
		if gravity == null
			throw ENullPointer.new("gravity")
		end
		
		pGravity = gravity
	end
	
	
	
	/** \deprecated Use getBehaviorOneShotSpeaker(). */
	func LayerMask getLayerMaskOneShotSpeaker()
		return pBehaviorOneShotSpeaker.getLayerMask()
	end
	
	/** \deprecated Use getBehaviorOneShotSpeaker(). */
	func void setLayerMaskOneShotSpeaker(LayerMask layerMask)
		pBehaviorOneShotSpeaker.setLayerMask(layerMask)
	end
	
	/** \deprecated Use getBehaviorOneShotSpeaker(). */
	func void addOneShotSpeaker(Speaker speaker)
		pBehaviorOneShotSpeaker.addSpeaker(speaker)
	end
	
	/** \deprecated Use getBehaviorOneShotSpeaker(). */
	func void playSoundOnce(Sound sound, Element element, float volume, float range)
		pBehaviorOneShotSpeaker.playSoundOnce(sound, element, volume, range)
	end
	
	/** \deprecated Use getBehaviorOneShotSpeaker(). */
	func void playSoundOnce(Sound sound, DVector position, float volume, float range)
		pBehaviorOneShotSpeaker.playSoundOnce(sound, position, volume, range)
	end
	
	/** \deprecated Use getBehaviorOneShotSpeaker(). */
	func void playSoundOnce(Sound sound, DVector position, Quaternion orientation, \
	float volume, float range)
		pBehaviorOneShotSpeaker.playSoundOnce(sound, position, orientation, volume, range)
	end
	
	/** \deprecated Use getBehaviorOneShotSpeaker(). */
	func void playSynthesizerOnce(SynthesizerInstance synthesizer, Element element, \
	float volume, float range)
		pBehaviorOneShotSpeaker.playSynthesizerOnce(synthesizer, element, volume, range)
	end
	
	/** \deprecated Use getBehaviorOneShotSpeaker(). */
	func void playSynthesizerOnce(SynthesizerInstance synthesizer, DVector position, \
	float volume, float range)
		pBehaviorOneShotSpeaker.playSynthesizerOnce(synthesizer, position, volume, range)
	end
	
	/** \deprecated Use getBehaviorOneShotSpeaker(). */
	func void playSynthesizerOnce(SynthesizerInstance synthesizer, DVector position, \
	Quaternion orientation, float volume, float range)
		pBehaviorOneShotSpeaker.playSynthesizerOnce(synthesizer, position, orientation, volume, range)
	end
	
	/** \deprecated Use getBehaviorOneShotSpeaker(). */
	func void removeFinishedOneShotSpeakers()
		pBehaviorOneShotSpeaker.removeFinishedSpeakers()
	end
	
	/** \deprecated Use getBehaviorOneShotSpeaker(). */
	func void removeAllOneShotSpeakers()
		pBehaviorOneShotSpeaker.removeAllSpeakers()
	end
	
	
	
	/** \brief Make elements think. */
	func void think(float elapsed)
		pThinkingBehaviors.forEach(block GWBehavior each
			each.think(elapsed)
		end)
		
		pThinkers.forEach(block Element each
			each.think(elapsed)
		end)
	end
	
	/** \brief Make elements think after physics simulation. */
	func void postThink(float elapsed)
		pThinkers.forEach(block Element each
			each.postThink(elapsed)
		end)
		
		pThinkingBehaviors.forEach(block GWBehavior each
			each.postThink(elapsed)
		end)
	end
	
	/**
	 * \brief Call Element.enterFrame() on registered elements then unregister all elements.
	 * 
	 * Calling addEnterFrameOnce and removeEnterFrameOnce from inside enterFrame() is allowed.
	 */
	func void enterFrame()
		while pEnterFrameOnce.getCount() > 0
			var Array list = pEnterFrameOnce
			pLockEnterFrameOnce = true
			
			list.forEach(block Element each
				each.enterFrame()
			end)
			list.removeAll()
			pLockEnterFrameOnce = false
		end
	end
	
	/**
	 * \brief Update game world.
	 * \details Call once at beginning of frame update cycle. Afterwards world can
	 *          be rendered multiple times.
	 */
	func void update(float elapsed)
		pThinkingBehaviors.forEach(block GWBehavior each
			each.update(elapsed)
		end)
		
		enterFrame()
		
		pWorld.update(elapsed)
		pTempDecalMgr.update(elapsed)
		
		think(elapsed)
		pWorld.detectCollisions(elapsed)
		postThink(elapsed)
	end
	
	/** \brief Update game world with debug timing. */
	func void updateDebug(float elapsed, \
			Debugging.DebugPerformanceCounter debugUpdate, \
			Debugging.DebugPerformanceCounter debugThink, \
			Debugging.DebugPerformanceCounter debugCollisions, \
			Debugging.DebugPerformanceCounter debugPostThink)
		pBehaviors.forEach(block GWBehavior each
			each.update(elapsed)
		end)
		
		enterFrame()
		
		debugUpdate.start()
		pWorld.update(elapsed)
		debugUpdate.stop()
		pTempDecalMgr.update(elapsed)
		
		debugThink.start()
		think(elapsed)
		debugThink.stop()
		debugCollisions.start()
		pWorld.detectCollisions(elapsed)
		debugCollisions.stop()
		debugPostThink.start()
		postThink(elapsed)
		debugPostThink.stop()
	end
	
	
	
	/** \brief Next object ID from world file required for saving and remapping ID ranges. */
	func UniqueID getNextObjectID()
		return pNextObjectID
	end
	
	/** \brief Set next object ID from world file required for saving and remapping ID ranges. */
	func void setNextObjectID(UniqueID nextObjectID)
		pNextObjectID = nextObjectID
	end
	
	/** \brief Unique ID remapper. */
	func UniqueIDRemapper getUniqueIDRemapper()
		return pUniqueIDRemapper
	end
	
	/** \brief Set Unique ID remapper. */
	func void setUniqueIDRemapper(UniqueIDRemapper remapper)
		if remapper == null
			throw EInvalidParam.new()
		end
		pUniqueIDRemapper = remapper
	end
	
	
	
	/**
	 * \brief Stub used to create game world.
	 * \version 1.17
	 */
	func StubGameWorld getStub()
		return pStub
	end
	
	/**
	 * \brief Set stub used to create game world.
	 * \version 1.17
	 */
	func void setStub(StubGameWorld stub)
		pStub = stub
	end
	
	
	
	/**
	 * \brief Init game world from stub.
	 * \version 1.17
	 * 
	 * Subclass is required to super-call init() to init behaviors properly.
	 */
	func void init(StubGameWorld stub)
		pBehaviors.forEach(block GWBehavior each
			each.init(stub)
		end)
		pBehaviorsInited = true
	end
	
	
	
	/**
	 * \brief Read from file.
	 * 
	 * Subclass has to super-call readFromFile() to save behaviors properly.
	 */
	func void readFromFile(PersistencyEnvironment env, FileReader reader)
		if not pEnablePersistency
			return
		end
		
		select reader.readByte() // version
		case 0
			var Dictionary map = Dictionary.new()
			pBehaviors.forEach(block int index, GWBehavior each
				map.setAt((pBehaviors.getAt(index) cast GWBehavior).getBehaviorID(), each)
			end)
			
			var int i, dataLength, count = reader.readUShort()
			var GWBehavior behavior
			var String identifier
			
			for i = 0 to count
				identifier = reader.readString8()
				behavior = map.getAt(identifier, null) cast GWBehavior
				dataLength = reader.readInt()
				
				if behavior != null
					behavior.readFromFile(env, reader)
					
				elif pBehaviors.find(block int index, GWBehavior each
					if each.supportsBehaviorID(identifier)
						each.loadSupportedData(identifier, env, reader)
						return true
						
					else
						return false
					end
					
				end) == null
					reader.movePosition(dataLength)
				end
			end
			
		else
			throw EInvalidParam.new("unsupported version")
		end
	end
	
	/**
	 * \brief Write to file.
	 * 
	 * Subclass has to super-call writeToFile() to save behaviors properly.
	 */
	func void writeToFile(PersistencyEnvironment env, FileWriter writer)
		if not pEnablePersistency
			return
		end
		
		writer.writeByte(0) // version
		
		var Array behaviors = pBehaviors.collect(block GWBehavior each
			return each.requiresPersistency()
		end)
		
		writer.writeUShort(behaviors.getCount())
		
		if behaviors.getCount() > 0
			var MemoryFile behaviorData = MemoryFile.new("behaviorData")
			
			behaviors.forEach(block GWBehavior each
				each.writeToFile(env, behaviorData.getWriter(false))
				writer.writeString8(each.getBehaviorID())
				writer.writeInt(behaviorData.getSize())
				writer.writeData(behaviorData.getReader())
			end)
		end
	end
	
	/**
	 * \brief Read element stubs from file.
	 * 
	 * Reads first the next object ID and Unique ID remapper. Then remaps the stub elements
	 * in the stub world. Then reads the element stubs.
	 */
	func void readElementStubsFromFile(PersistencyEnvironment env, FileReader reader, \
	MutableID idGenerator, ElementClassList elementClassList, StubGameWorld stubWorld)
		select reader.readByte() // version
		case 0
			readElementStubsFromFileV0(env, reader, idGenerator, elementClassList, stubWorld)
			
		case 1
			readElementStubsFromFileV0(env, reader, idGenerator, elementClassList, stubWorld)
			pEnableReadDynDataWithSize = true
			
		else
			throw EInvalidParam.new("unsupported version")
		end
	end
	
	/**
	 * \brief Read element stubs from file.
	 * 
	 * Reads first the next object ID and Unique ID remapper. Then remaps the stub elements
	 * in the stub world. Then reads the element stubs.
	 */
	protected func void readElementStubsFromFileV0(PersistencyEnvironment env, FileReader reader, \
	MutableID idGenerator, ElementClassList elementClassList, StubGameWorld stubWorld)
		var UniqueID lastNextObjectID = UniqueID.readFromFile(reader)
		pUniqueIDRemapper = UniqueIDRemapper.readFromFile(reader)
		
		var UniqueID nextObjectID = stubWorld.getNextObjectID()
		if nextObjectID > lastNextObjectID
			stubWorld.setNewElementsRange(pUniqueIDRemapper.add(\
				lastNextObjectID, nextObjectID, idGenerator.toUniqueID()))
			idGenerator.incrementBy(nextObjectID - lastNextObjectID)
		end
		
		stubWorld.remapObjectIDs(pUniqueIDRemapper)
		stubWorld.readElementStubsFromFile(env, reader, elementClassList)
	end
	
	/**
	 * \brief Write element stubs to file.
	 * 
	 * Writes first the next object ID and Unique ID remapper. While loading the next object
	 * ID and mapper can be used to modify remapping in case the object ID range of the
	 * world changed in the mean time.
	 * 
	 * Ignores elements with element classes marked not persistable. For each element the
	 * element stub is written used to load or create the element.
	 * 
	 * Not persistable elements have to be loaded from a world file even if using a file reader.
	 * 
	 * The two methods writeElementStubsToFile() and writeDynamicElementDataToFile() are
	 * both required to properly restore elements. They are not merged in one to allow
	 * preloading. For this to work element stubs have to be read first to start preloading.
	 * Once done the elements are created and their dynamic data read. The order of stubs
	 * has to stay the same for them to properly read their dynamic data.
	 * 
	 * \par Version 1.23
	 * 
	 * Element stubs are updated with the corresponding element position, rotation and scaling
	 * before saving. This allows loading failed elements to be located in a reasonable position
	 * since they can not read the element data properly to position themselves.
	 */
	func void writeElementStubsToFile(PersistencyEnvironment env, FileWriter writer)
		writer.writeByte(1) // version
		
		pNextObjectID.writeToFile(writer)
		pUniqueIDRemapper.writeToFile(writer)
		
		pElements.forEach(block Element each
			if each.getClass().getPersistable()
				each.updateStubGeometryFromElement()
				each.getStub().writeToFile(writer)
			end
		end)
		writer.writeString8("") // empty classname is end of list marker
	end
	
	/**
	 * \brief Write dynamic element data to file.
	 * 
	 * Ignores elements with element classes marked not persistable. For each element the
	 * Element.writeToFile() method is called to save dynamic parameters.
	 * 
	 * The two methods writeElementStubsToFile() and writeDynamicElementDataToFile() are
	 * both required to properly restore elements. They are not merged in one to allow
	 * preloading. For this to work element stubs have to be read first to start preloading.
	 * Once done the elements are created and their dynamic data read. The order of stubs
	 * has to stay the same for them to properly read their dynamic data.
	 */
	func void writeDynamicElementDataToFile(PersistencyEnvironment env, FileWriter writer)
		var MemoryFile elementData = MemoryFile.new("")
		var FileWriter elementDataWriter = elementData.getWriter(false)
		var FileReader elementDataReader = elementData.getReader()
		var int elementDataSize
		
		elementData.setSize(8192) // 8k as starting capacity should be good enough
		
		pElements.forEach(block Element each
			if each.getClass().getPersistable()
				elementDataWriter.setPosition(0)
				elementDataReader.setPosition(0)
				
				each.writeToFile(env, elementDataWriter)
				
				elementDataSize = elementDataWriter.getPosition()
				writer.writeInt(elementDataSize)
				writer.writeData(elementDataReader, elementDataSize)
			end
		end)
	end
	
	/**
	 * \brief Call to \ref StubGameWorld#loadAndAddPersistableElementsNew(Console,PersistencyEnvironment,FileReader) failed.
	 * \version 1.23
	 * 
	 * Allows subclass of GameWorld to handle failure of loading a dynamic element differently
	 * than throwing an exception and failing loading the game world. For example the subclass
	 * can decide to replace the element with a placeholder or ignoring it. Mostly useful for
	 * games supporting user modifications and hardening against loading problems.
	 * 
	 * If the subclass handles the failure it has to return a StubElement instance. This can
	 * be the element stub provided to the function call or a new one derived from it. If the
	 * element class can not be found an instance of StubElementClassNotFound is used with a
	 * fake ElementClass instance. Subclass has to check first if the element class is valid.
	 * If it is not valid or if the subclass wants to change the element class a new instance
	 * of StubElement has to be created with the same properties as the provided one. To ignore
	 * the element add no element to the game world and return a StubElement with element
	 * class IgnoreElementClass.
	 * 
	 * If the subclass does not or can not handle the failure it has to return null. In this
	 * case regular error processing throws an exception and the loading is aborted.
	 * 
	 * Default implementation returns null.
	 * 
	 * Only called if \ref #getEnableReadDynDataWithSize() returns true.
	 * 
	 * \param env Persistency environment.
	 * \param reader Reader positioned at the beginning of the element data.
	 * \param stub Element stub the dynamic data is linked to.
	 * \param dataSize Size in bytes of the data starting at the reader position.
	 * \param exception Exception causing the failure.
	 */
	func StubElement onFailLoadAndAddPersistableElements(PersistencyEnvironment env,\
	FileReader reader, StubElement stub, int dataSize, Exception exception)
		return null
	end
	
	
	
	/** \brief Spawn point list. */
	func SpawnPointList getSpawnPoints()
		return pSpawnPoints
	end
	
	/** \brief Rail list. */
	func RailList getRailList()
		return pRailList
	end
	
	/** \brief Conversation actor list. */
	func ConversationActorList getConvoActorList()
		return pConvoActorList
	end
	
	/** \brief Conversation coordinate system list. */
	func ConversationCoordSystemList getConvoCoordSystemList()
		return pConvoCoordSystemList
	end
	
	/** \brief Anchored element list. */
	func AnchoredElementList getAnchoredElementList()
		return pAnchoredElementList
	end
	
	
	
	/** \brief Temporary decal manager. */
	func TemporaryDecalManager getTemporaryDecalManager()
		return pTempDecalMgr
	end
	
	/** \brief Set temporary decal manager. */
	func void setTemporaryDecalManager(TemporaryDecalManager manager)
		if manager == null
			throw EInvalidParam.new()
		end
		pTempDecalMgr = manager
	end
	
	
	
	private func void pPrepareUpdateEnterFrameOnce()
		if pLockEnterFrameOnce
			pEnterFrameOnce = Array.new(pEnterFrameOnce)
			pLockEnterFrameOnce = false
		end
	end
	
	
	
	/**
	 * \brief Collect debug statistics.
	 * 
	 * Returns a dictionary with these values:
	 * - 'elements': Number of elements.
	 * - 'thinkers': Number of thinking elements.
	 * - 'enterFrameOnce': Number of enter frame once elements.
	 * - 'oneShotSpeakers': Number of one shot speakers.
	 * - 'spawnPoints': Number of spawn points.
	 * - 'temporaryDecals': Number of temporary decals.
	 * - 'resources.camera': Number of camera resources.
	 * - 'resources.speaker': Number of speaker resources.
	 * - 'resources.microphone': Number of microphone resources.
	 * - 'resources.networkState': Number of network state resources.
	 * - 'resources.component': Number of component resources.
	 * - 'resources.light': Number of light resources.
	 * - 'resources.collider': Number of collider resources.
	 * - 'resources.lumimeter': Number of lumimeter resources.
	 * - 'resources.touchSensor': Number of touch sensor resources.
	 * - 'resources.propField': Number of prop field resources.
	 * - 'resources.forceField': Number of force field resources.
	 * - 'resources.particleEmitter': Number of particle emitter instance resources.
	 * - 'resources.debugDrawer': Number of debug drawer resources.
	 * - 'resources.navigationSpace': Number of navigation space resources.
	 * - 'resources.navigationBlocker': Number of navigation blocker resources.
	 * - 'resources.navigator': Number of navigator resources.
	 * - 'resources.envMapProbe': Number of environment map probe resources.
	 */
	func Dictionary debugStatistics()
		var Dictionary stats = Dictionary.new()
		stats.setAt("elements", pElements.getCount())
		stats.setAt("thinkers", pThinkers.getCount())
		stats.setAt("enterFrameOnce", pEnterFrameOnce.getCount())
		stats.setAt("oneShotSpeakers", pBehaviorOneShotSpeaker.getSpeakerCount())
		stats.setAt("spawnPoints", pSpawnPoints.getCount())
		stats.setAt("rails", pRailList.getCount())
		stats.setAt("temporaryDecals", pTempDecalMgr.getCount())
		stats.setAt("resources.camera", pWorld.getCameraCount())
		stats.setAt("resources.speaker", pWorld.getSpeakerCount())
		stats.setAt("resources.microphone", pWorld.getMicrophoneCount())
		stats.setAt("resources.networkState", pWorld.getNetworkStateCount())
		stats.setAt("resources.component", pWorld.getComponentCount())
		stats.setAt("resources.light", pWorld.getLightCount())
		stats.setAt("resources.collider", pWorld.getColliderCount())
		stats.setAt("resources.lumimeter", pWorld.getLumimeterCount())
		stats.setAt("resources.touchSensor", pWorld.getTouchSensorCount())
		stats.setAt("resources.propField", pWorld.getPropFieldCount())
		stats.setAt("resources.forceField", pWorld.getForceFieldCount())
		stats.setAt("resources.particleEmitter", pWorld.getParticleEmitterCount())
		stats.setAt("resources.debugDrawer", pWorld.getDebugDrawerCount())
		stats.setAt("resources.navigationSpace", pWorld.getNavigationSpaceCount())
		stats.setAt("resources.navigationBlocker", pWorld.getNavigationBlockerCount())
		stats.setAt("resources.navigator", pWorld.getNavigatorCount())
		stats.setAt("resources.envMapProbe", pWorld.getEnvMapProbeCount())
		return stats
	end
	
	/**
	 * \brief Retrieves some summary statistics.
	 * 
	 * Returns a dictionary with these values.
	 * - 'thinkers': Dictionary containing as keys the element class name of all
	 *               thinkers with value occurance count.
	 * - 'enterFrameOnce': Dictionary containing as keys the element class name of all
	 *                     enter frame once with value occurance count.
	 */
	func Dictionary debugStatisticsSummary()
		var Dictionary summary, stats = Dictionary.new()
		var String key
		
		summary = Dictionary.new()
		pThinkers.forEach(block Element each
			key = each.getClass().getClassname()
			summary.setAt(key, summary.getAt(key, 0) cast int + 1)
		end)
		stats.setAt("thinkers", summary)
		
		summary = Dictionary.new()
		pEnterFrameOnce.forEach(block Element each
			key = each.getClass().getClassname()
			summary.setAt(key, summary.getAt(key, 0) cast int + 1)
		end)
		stats.setAt("enterFrameOnce", summary)
		
		return stats
	end
	
	/** \brief Print statistics to console. */
	func void debugPrintStatistics(Console console)
		var Dictionary stats = debugStatistics()
		stats.getKeys().sorted().forEach(block String key
			console.addMessage("- " + key + ": " + stats.getAt(key))
		end)
	end
	
	/** \brief Print statistics summary to console. */
	func void debugPrintStatisticsSummary(Console console)
		var Dictionary summary, stats = debugStatisticsSummary()
		stats.getKeys().sorted().forEach(block String key
			console.addMessage("- " + key + ":")
			summary = stats.getAt(key) cast Dictionary
			summary.getKeys().sorted().forEach(block String key2
				console.addMessage("  - " + key2 + ": " + summary.getAt(key2))
			end)
		end)
	end
end
