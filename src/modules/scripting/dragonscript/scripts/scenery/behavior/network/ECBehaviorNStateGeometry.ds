/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */


namespace Dragengine.Scenery

pin Dragengine.Gui
pin Dragengine.LoadSave
pin Dragengine.Networking
pin Dragengine.Preloading
pin Dragengine.Utils


/**
 * \brief Behavior element behavior adding geometry network state support.
 * 
 * If ECBehaviorNetworkState is present and activate adds network values to synchronize
 * the owner element position and orientation.
 * 
 * No element class properties are added.
 * 
 * This behavior can be present only once in the element class.
 * 
 * \see https://developer.dragondreams.ch/wiki/doku.php/dragengine:modules:dragonscript:behavior_nstategeometry
 */
class ECBehaviorNStateGeometry extends DefaultECBehavior
	/**
	 * \brief Behavior factory.
	 * \version 1.25
	 * 
	 * Automatically assigns these behaviors if present before adding:
	 * - Required: \ref ECBehaviorNetworkState
	 * 
	 * Example XML element class:
	 * \code{.xml}
	 * <behavior type='ECBehaviorNStateGeometry'>
	 *   <!-- optional: position precision. default is 0.001 -->
	 *   <float name='precisionPosition'>0.01</float>
	 * 
	 *   <!-- optional: orientation precision. default is 0.001 -->
	 *   <float name='precisionOrientation'>0.01</float>
	 * </behavior>
	 * \endcode
	 * 
	 * Element class properties added by the behavior can also be set directly inside the tag
	 * be removing the property name prefix and starting with a "." (for example ".propertyName").
	 */
	class Factory implements BehaviorFactory
		func new()
		end
		
		func String factoryId()
			return "ECBehaviorNStateGeometry"
		end
		
		func ECBehavior addBehavior(BehaviorElementClass eclass, String id, Dictionary parameters)
			if not id.empty()
				throw EInvalidParam.new("id is not empty string")
			end
			var ECBehaviorNStateGeometry behavior = ECBehaviorNStateGeometry.new(eclass,\
				ECBehaviorNetworkState.getBehaviorIn(eclass))
			
			if parameters.has("precisionPosition")
				behavior.setPrecisionPosition((parameters.getAt("precisionPosition") cast String).toFloat())
			end
			if parameters.has("precisionOrientation")
				behavior.setPrecisionOrientation((parameters.getAt("precisionOrientation") cast String).toFloat())
			end
			
			BehaviorElementClass.sharedFactoryHelper.setPropertiesFromParameters(\
				eclass, parameters, "nstateGeometry")
			return behavior
		end
	end
	
	/** \brief Behavior instance. */
	class Instance extends DefaultECBehaviorInstance
		/** \brief Network state listener. */
		class NetworkStateListener extends ECBehaviorNetworkState.DefaultListener
			private var Instance pInstance
			
			public func new( Instance instance )
				this.pInstance = instance
			end
			
			public func void addValues( ECBehaviorNetworkState.Instance instance )
				this.pInstance.onAddValues()
			end
		end
		
		/** \brief Position value. */
		class ValuePosition extends ECBehaviorNetworkState.DVectorValue
			private var Instance pInstance
			
			public func new( Instance instance, float precision ) \
			super( instance.getNetworkState(), NetworkStateValueFormat.floating64, precision )
				this.pInstance = instance
			end
			
			protected func void onValueChanged( DVector value )
				this.pInstance.getElement().setPosition( value )
			end
			
			protected func DVector getUpdateValue()
				return this.pInstance.getElement().getPosition()
			end
		end
		
		/** \brief Orientation value. */
		class ValueOrientation extends ECBehaviorNetworkState.QuaternionValue
			private var Instance pInstance
			
			public func new( Instance instance, float precision ) \
			super( instance.getNetworkState(), NetworkStateValueFormat.floating16, precision )
				this.pInstance = instance
			end
			
			protected func void onValueChanged( Quaternion value )
				this.pInstance.getElement().setOrientation( value )
			end
			
			protected func Quaternion getUpdateValue()
				return this.pInstance.getElement().getOrientation()
			end
		end
		
		
		private var ECBehaviorNStateGeometry pECBehavior
		private var ECBehaviorNetworkState.Instance pNetworkState
		private var ValuePosition pValuePosition
		private var ValueOrientation pValueOrientation
		
		
		
		/** \brief Create element. */
		public func new( ECBehaviorNStateGeometry ecbehavior, BehaviorElement element ) super( element )
			this.pECBehavior = ecbehavior
			this.pNetworkState = ecbehavior.getNetworkState().instance( element )
			this.pNetworkState.addListener( NetworkStateListener.new( this ) )
		end
		
		/** \brief Dispose of composeable instance. */
		public func void dispose()
			this.pValueOrientation = null
			this.pValuePosition = null
			this.pNetworkState = null
			
			super.dispose()
		end
		
		
		
		/** \brief Behavior. */
		public func ECBehaviorNStateGeometry getECBehavior()
			return this.pECBehavior
		end
		
		/** \brief Network state behavior instance or null if not connected. */
		public func ECBehaviorNetworkState.Instance getNetworkState()
			return this.pNetworkState
		end
		
		/** \brief Position value or \em null if not connected. */
		protected func ValuePosition getValuePosition()
			return this.pValuePosition
		end
		
		/** \brief Orientation value or \em null if not connected. */
		protected func ValueOrientation getValueOrientation()
			return this.pValueOrientation
		end
		
		
		
		/** \brief Add values to network state. */
		public func void onAddValues()
			this.pValuePosition = ValuePosition.new( this, this.pECBehavior.getPrecisionPosition() )
			this.pValueOrientation = ValueOrientation.new( this, this.pECBehavior.getPrecisionOrientation() )
		end
		
		/** \brief Position or orientation changed. */
		public func void geometryChanged()
			if this.pValuePosition == null
				return
			end
			
			this.pValuePosition.updateValue()
			this.pValueOrientation.updateValue()
		end
	end
	
	
	
	private var ECBehaviorNetworkState pNetworkState
	private var float pPrecisionPosition
	private var float pPrecisionOrientation
	
	
	
	/** \brief Create behavior element class. */
	public func new( BehaviorElementClass eclass, ECBehaviorNetworkState networkState ) super( eclass )
		if networkState == null
			throw EInvalidParam.new()
		end
		
		this.pNetworkState = networkState
		this.pPrecisionPosition = 0.001
		this.pPrecisionOrientation = 0.001
		
		eclass.addBehavior( this )
	end
	
	
	
	/** \brief Network state behavior. */
	public func ECBehaviorNetworkState getNetworkState()
		return this.pNetworkState
	end
	
	/** \brief Set network state behavior. */
	public func void setNetworkState( ECBehaviorNetworkState networkState )
		if networkState == null
			throw EInvalidParam.new()
		end
		
		this.pNetworkState = networkState
	end
	
	/** \brief Precision of position updates. */
	public func float getPrecisionPosition()
		return this.pPrecisionPosition
	end
	
	/** \brief Set precision of position updates. */
	public func void setPrecisionPosition( float precision )
		this.pPrecisionPosition = precision
	end
	
	/** \brief Precision of orientation updates. */
	public func float getPrecisionOrientation()
		return this.pPrecisionOrientation
	end
	
	/** \brief Set precision of orientation updates. */
	public func void setPrecisionOrientation( float precision )
		this.pPrecisionOrientation = precision
	end
	
	
	
	/** \brief Get instance in element from owner element class. */
	public func Instance instance( BehaviorElement element )
		return element.getInstanceAt( this.getInstanceIndex() ) cast Instance
	end
	
	/**
	 * \brief Get behavior in element class or \em null if absent.
	 * 
	 * Use this method to check if a particular BehaviorElementClass contains a behavior
	 * of type ECBehaviorComponent.
	 */
	static public func ECBehaviorNStateGeometry getBehaviorIn( BehaviorElementClass eclass )
		return eclass.findBehavior( block ECBehaviorNStateGeometry each
			return true
		end ) cast ECBehaviorNStateGeometry
	end
	
	/**
	 * \brief Get instance in element or \em null if absent.
	 * 
	 * Use this method to check if a particular BehaviorElement contains a behavior instance
	 * of type ECBehaviorNStateGeometry.Instance . If more than one instance is present returns
	 * the first instance.
	 */
	static public func Instance getInstanceIn( BehaviorElement element )
		return element.findInstance( block Instance each
			return true
		end ) cast Instance
	end
	
	
	
	/** \brief Create Behavior instance. */
	public func ECBehaviorInstance createInstance( BehaviorElement element )
		return Instance.new( this, element )
	end
end
