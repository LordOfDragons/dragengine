/* 
 * Drag[en]gine DragonScript Script Module
 *
 * Copyright (C) 2020, Roland Pl√ºss (roland@rptd.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */


namespace Dragengine.Scenery

pin Dragengine.Gui
pin Dragengine.Preloading
pin Dragengine.Utils
pin Dragengine.Scenery


/**
 * \brief Behavior element behavior adding attach to parent support.
 * 
 * Objects can be attached to parent objects in the IGDE World Editor. During enterFrame()
 * BehaviorElement sets the target object as the parent object. The actual attaching needs
 * knowledge about the target object. This is delegated to behavior instances knowing how
 * to do the attaching.
 * 
 * This behavior knows how to attach to BehaviorElement instances. By default the element to
 * attach to is expected to a BehaviorElement. The element will be casted to BehaviorElement
 * and attachToBehaviorElement() called. Optionally an ElementVisitor can be set which
 * disables the default behavior and visits the element instead. This is useful for complex
 * situations where even non-BehaviorElement elements can be used.
 * 
 * If the stub property "attachToParent.attachSlot" is used the element is attached to the
 * named target ECBehaviorAttachSlot. This attach method can only be used if these
 * requirements are fulfilled:
 * <ul>
 * <li>The stub property name "attachToParent.attachSlot" is present</li>
 * <li>This element has ECBehaviorAttachable.</li>
 * <li>The target element has ECBehaviorAttachSlot with matching name.</li>
 * </ul>
 * If any of these requirements are not fulfilled an exception will be thrown.
 * 
 * If target element contains ECBehaviorCollider regular attaching is used.
 * 
 * An optional "bone" property is supported to allow attaching the element to a specific
 * bone in the target object ECBehaviorCollider given the collider is a ColliderRig or
 * ColliderComponent instance.
 * 
 * If no "bone" property is used and both colliders are ColliderRig or ColliderComponent
 * and both used rigs have bones then rig attachment is used. This is typically used to
 * attach cloth to actors copying the actor bone states to the cloth bone states.
 * 
 * In all other cases static attaching is used.
 * 
 * Element class properties have the prefix "attachToParent.".
 * 
 * This behavior requires ECBehaviorCollider to be present.
 * 
 * This element behavior can be present only once in a BehaviorElement. Trying to add more
 * than one instance results in an exception thrown.
 * 
 * This behavior does not require the element class to be persistable (setPersistable).
 */
class ECBehaviorAttachToParent extends DefaultECBehavior
	/** \brief Behavior instance. */
	class Instance extends DefaultECBehaviorInstance
		/** \brief Example attach element visitor. */
		public class DefaultAttachElement extends ElementVisitor
			private var Instance pInstance
			
			public func new( Instance instance )
				this.pInstance = instance
			end
			
			public func void visitBehaviorElement( BehaviorElement element )
				this.pInstance.attachToBehaviorElement( element )
			end
		end
		
		private var ECBehaviorAttachToParent pECBehavior
		private var ECBehaviorCollider.Instance pCollider
		private var ECBehaviorAttachable.Instance pAttachable
		private var ElementVisitor pAttachVisitor
		private var String pBone
		private var String pAttachSlot
		private var bool pRelative
		private var bool pRigMode
		private var Vector pPosition
		private var Quaternion pOrientation
		
		
		
		/** \brief Create element. */
		public func new( ECBehaviorAttachToParent ecbehavior, BehaviorElement element ) super( element )
			this.pECBehavior = ecbehavior
			
			this.pCollider = ecbehavior.getCollider().instance( element )
		end
		
		/** \brief Dispose of behavior instance. */
		public func void dispose()
			this.pAttachVisitor = null
			this.pCollider = null
			this.pAttachable = null
			super.dispose()
		end
		
		
		
		/** \brief Initialize element from stub. */
		public func void init( StubElement stub )
			if this.pECBehavior.getAttachable() != null
				this.pAttachable = this.pECBehavior.getAttachable().instance( this.getElement() )
			end
			
			var CodecPropertyString codec = this.getElement().getClass().getCodecPropertyString()
			
			this.pBone = this.pECBehavior.getBone().getValue( stub )
			this.pAttachSlot = this.pECBehavior.getAttachSlot().getValue( stub )
			this.pRelative = this.pECBehavior.getRelative().getValue( stub )
			this.pRigMode = this.pECBehavior.getRigMode().getValue( stub )
			this.pPosition = this.pECBehavior.getPosition().getVector( stub, codec )
			this.pOrientation = Quaternion.newFromEuler( \
				this.pECBehavior.getOrientation().getVector( stub, codec ) )
		end
		
		
		
		/** \brief Behavior. */
		public func ECBehaviorAttachToParent getECBehavior()
			return this.pECBehavior
		end
		
		/** \brief Collider behavior. */
		public func ECBehaviorCollider.Instance getCollider()
			return this.pCollider
		end
		
		/** \brief Attachable behavior. */
		public func ECBehaviorAttachable.Instance getAttachable()
			return this.pAttachable
		end
		
		/** \brief Name of bone to attach to or empty string to attach statically. */
		public func String getBone()
			return this.pBone
		end
		
		/** \brief Attach slot to attach to. */
		public func String getAttachSlot()
			return this.pAttachSlot
		end
		
		/** \brief Attach relative to world position or using explicit position. */
		public func bool getRelative()
			return this.pRelative
		end
		
		/** \brief Attach using rig mode if supported by colliders. */
		public func bool getRigMode()
			return this.pRigMode
		end
		
		/** \brief Explicit attach position. */
		public func Vector getPosition()
			return this.pPosition
		end
		
		/** \brief Explicit attach rotation. */
		public func Quaternion getOrientation()
			return this.pOrientation
		end
		
		/** \brief Element visitor used to attach elements or \em null to use default behavior. */
		protected func ElementVisitor getAttachVisitor()
			return this.pAttachVisitor
		end
		
		/** \brief Set element visitor used to attach elements or \em null to use default behavior. */
		protected func void setAttachVisitor( ElementVisitor visitor )
			this.pAttachVisitor = visitor
		end
		
		
		
		/**
		 * \brief Attach element to object set by the mapper in the IGDE World Editor.
		 * 
		 * Behavior instance is responsible to call BehaviorElement.setParent() if the
		 * attaching succeedes. If multiple behaviors support attaching they have to negotiate
		 * with each other who does the attaching for example by using BehaviorElement.getParent().
		 * 
		 * Implementation either visits the element using getAttachVisitor() or by calling
		 * attachToBehaviorElement() if the element is castable to BehaviorElement.
		 * 
		 * Furthermore If the parent has ECBehaviorAttachments behavior add element as attachment.
		 * This is not done if special attaching is used like ECBehaviorAttachSlot.
		 */
		public func void attachToParent( Element parent )
			if this.pCollider.getCollider() == null
				return
			end
			
			if this.pAttachVisitor != null
				parent.visit( this.pAttachVisitor )
				
			elif parent castable BehaviorElement
				this.attachToBehaviorElement( parent cast BehaviorElement )
			end
		end
		
		/**
		 * \brief Attach to behavior element.
		 * 
		 * Calls attachToCollider() if behavior element has ECBehaviorCollider. Overwrite in
		 * subclass if you use only behavior elements and you do not want to use custom visitor.
		 */
		public func void attachToBehaviorElement( BehaviorElement parent )
			if this.pAttachSlot != null
				this.attachToAttachSlot( parent )
				return
			end
			
			if this.pCollider.getCollider() == null
				return
			end
			
			var ECBehaviorCollider.Instance parentCollider = ECBehaviorCollider.getInstanceIn( parent )
			if parentCollider == null or parentCollider.getCollider() == null
				return
 			end
 			
 			this.attachToCollider( parentCollider.getCollider() )
			this.getElement().setParent( parent )
			this.addToAttachments( parent )
		end
		
		/**
		 * \brief Attach to collider.
		 * 
		 * If collider is castable to ColliderRig and bone is not null the element is attach
		 * to the collider bone. Otherwise the element is attached statically.
		 */
		public func void attachToCollider( Collider collider )
			var Collider thisCollider = this.pCollider.getCollider()
			
			if collider castable ColliderRig
				var ColliderRig colliderRig = collider cast ColliderRig
				
				if this.pBone.empty()
					if this.pRigMode and colliderRig.getRig() != null \
					and colliderRig.getRig().getBoneCount() > 0 and thisCollider castable ColliderRig
						var ColliderRig thisColliderRig = thisCollider cast ColliderRig
						if thisColliderRig.getRig() != null and thisColliderRig.getRig().getBoneCount() > 0
							colliderRig.attachRig( thisColliderRig )
							return
						end
					end
					
				else
					if this.pRelative
						colliderRig.attachBone( thisCollider, this.pBone )
						
					else
						colliderRig.attachBone( thisCollider, this.pBone, this.pPosition, this.pOrientation )
					end
					return
				end
			end
			
			if this.pRelative
				collider.attachStatic( thisCollider )
				
			else
				collider.attachStatic( thisCollider, this.pPosition, this.pOrientation )
			end
		end
		
		/**
		 * \brief Attach to attach slot in world coordinates.
		 * 
		 * Element has to be in the correct position before attaching.
		 */
		public func void attachToAttachSlot( BehaviorElement parent )
			// ECBehaviorAttachSlot calls BehaviorElement.setParent() if successfull
			if this.pRelative
				ECBehaviorAttachSlot.getInstanceIn( parent, this.pAttachSlot ) \
					.attachWorld( this.pAttachable )
				
			else
				ECBehaviorAttachSlot.getInstanceIn( parent, this.pAttachSlot ) \
					.attach( this.pAttachable, this.pPosition, this.pOrientation )
			end
		end
		
		/**
		 * \brief Add as attachment to ECBehaviorAttachments if parent has this behavior.
		 */
		public func void addToAttachments( BehaviorElement parent )
			var ECBehaviorAttachments.Instance behavior = ECBehaviorAttachments.getInstanceIn( parent )
			if behavior != null
				behavior.addAttachment( this.getElement() )
			end
		end
	end
	
	
	
	private var ECBehaviorCollider pCollider
	private var ECBehaviorAttachable pAttachable
	private var ECPString pBone
	private var ECPString pAttachSlot
	private var ECPBoolean pRelative
	private var ECPBoolean pRigMode
	private var ECPVector pPosition
	private var ECPVector pOrientation
	
	
	
	/**
	 * \brief Create behavior element class.
	 * 
	 * These values are optional and can be null: \em attachable.
	 */
	public func new( BehaviorElementClass eclass, ECBehaviorCollider collider, \
	ECBehaviorAttachable attachable ) this( eclass, collider, attachable, "attachToParent." )
	end
	
	public func new( BehaviorElementClass eclass, ECBehaviorCollider collider, \
	ECBehaviorAttachable attachable, String prefix ) super( eclass )
		if collider == null
			throw ENullPointer.new( "collider" )
		end
		if getBehaviorIn( eclass ) != null
			throw BEMultipleInstanceException.new( eclass, this )
		end
		
		this.pCollider = collider
		this.pAttachable = attachable
		
		this.pBone = ECPString.new( prefix + "bone", "" )
		eclass.addProperty( this.pBone )
		
		this.pAttachSlot = ECPString.new( prefix + "attachSlot", null )
		eclass.addProperty( this.pAttachSlot )
		
		this.pRelative = ECPBoolean.new( prefix + "relative", true )
		eclass.addProperty( this.pRelative )
		
		this.pRigMode = ECPBoolean.new( prefix + "rigMode", true )
		eclass.addProperty( this.pRigMode )
		
		this.pPosition = ECPVector.new( prefix + "position", Vector.new() )
		eclass.addProperty( this.pPosition )
		
		this.pOrientation = ECPVector.new( prefix + "orientation", Vector.new() )
		eclass.addProperty( this.pOrientation )
		
		eclass.addBehavior( this )
	end
	
	/** \brief Dispose of behavior. */
	public func void dispose()
		this.pCollider = null
		this.pAttachable = null
		super.dispose()
	end
	
	
	
	/** \brief Collider behavior. */
	public func ECBehaviorCollider getCollider()
		return this.pCollider
	end
	
	/** \brief Attachable behavior or null if not used. */
	public func ECBehaviorAttachable getAttachable()
		return this.pAttachable
	end
	
	/** \brief Bone to attach to. */
	public func ECPString getBone()
		return this.pBone
	end
	
	/** \brief Attach slot to attach to. */
	public func ECPString getAttachSlot()
		return this.pAttachSlot
	end
	
	/** \brief Attach relative to world position or using explicit position. */
	public func ECPBoolean getRelative()
		return this.pRelative
	end
	
	/** \brief Attach using rig mode if supported by colliders. */
	public func ECPBoolean getRigMode()
		return this.pRigMode
	end
	
	/** \brief Explicit attach position. */
	public func ECPVector getPosition()
		return this.pPosition
	end
	
	/** \brief Explicit attach rotation. */
	public func ECPVector getOrientation()
		return this.pOrientation
	end
	
	
	
	/** \brief Get instance in element from owner element class. */
	public func Instance instance( BehaviorElement element )
		return element.getInstanceAt( this.getInstanceIndex() ) cast Instance
	end
	
	
	
	/**
	 * \brief Get behavior in element class or \em null if absent.
	 * 
	 * Use this method to check if a particular BehaviorElementClass contains a behavior
	 * of type ECBehaviorCollider.
	 */
	static public func ECBehaviorAttachToParent getBehaviorIn( BehaviorElementClass eclass )
		return eclass.findBehavior( block ECBehaviorAttachToParent each
			return true
		end ) cast ECBehaviorAttachToParent
	end
	
	/**
	 * \brief Get instance in element or \em null if absent.
	 * 
	 * Use this method to check if a particular BehaviorElement contains a behavior instance
	 * of type ECBehaviorAttachToParent.Instance . If more than one instance is present returns
	 * the first instance.
	 */
	static public func Instance getInstanceIn( BehaviorElement element )
		return element.findInstance( block Instance each
			return true
		end ) cast Instance
	end
	
	
	
	/** \brief Create Behavior instance. */
	public func ECBehaviorInstance createInstance( BehaviorElement element )
		return Instance.new( this, element )
	end
end
