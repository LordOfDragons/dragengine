/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */


namespace Dragengine.Scenery

pin Dragengine.Gui
pin Dragengine.LoadSave
pin Dragengine.Preloading
pin Dragengine.Utils
pin Dragengine.BehaviorTreeSystem


/**
 * \brief Behavior element behavior adding support to attach other behavior elements.
 * 
 * Provides an attachment slot where one ECBehaviorAttachable supporting element can be
 * attached to. The slot behavior is responsible to persist the UniqueID of the attachable.
 * Attachable is added to game world during addToGameWorld() if not in the game world already.
 * Attachable is remove from game world during removeFromGameWorld() if in the game world.
 * If attachable is present while behavior instance is disposed then attachable will be
 * safely disposed using Element.safeDispose() .
 * 
 * Element class properties have the prefix "attachSlot{(id)}.".
 * 
 * This behavior uses ECBehaviorCollider or ECBehaviorVRHand if present.
 * 
 * This behavior does require the element class to be persistable (setPersistable).
 * 
 * \par 1.9
 * 
 * Added support for ECBehaviorVRHand to be used instead of ECBehaviorCollider.
 * 
 * \see https://developer.dragondreams.ch/wiki/doku.php/dragengine:modules:dragonscript:behavior_attachslot
 */
class ECBehaviorAttachSlot extends DefaultECBehavior
	/** \brief Listener for behavior instance events. */
	interface Listener
		/** \brief Attachable has been attached to slot. */
		func void slotAttached(Instance instance, ECBehaviorAttachable.Instance attachable)
		
		/** \brief Attachable has been removed from slot. */
		func void slotDetached(Instance instance, ECBehaviorAttachable.Instance attachable)
	end
	
	/** \brief Default implementation of behavior instance listener. */
	class DefaultListener implements Listener
		/** \brief Create default listener. */
		func new()
		end
		
		/** \brief Attachable has been attached to slot. */
		func void slotAttached(Instance instance, ECBehaviorAttachable.Instance attachable)
		end
		
		/** \brief Attachable has been removed from slot. */
		func void slotDetached(Instance instance, ECBehaviorAttachable.Instance attachable)
		end
	end
	
	/** \brief Factory creating listeners. */
	interface ListenerFactory
		/** \brief Create listener. */
		func Listener createListener(Instance instance)
	end
	
	/** \brief Factory creating listeners using block. */
	class BlockListenerFactory implements ListenerFactory
		var Block pBlock
		
		/** \brief Create factory using block receiving Instance as parameter returning Listener. */
		func new(Block blockFactory)
			if blockFactory == null
				throw ENullPointer.new()
			end
			pBlock = blockFactory
		end
		
		/** \brief Create listener. */
		func Listener createListener(Instance instance)
			return pBlock.run(instance) cast Listener
		end
	end
	
	/**
	 * \brief Behavior factory.
	 * \version 1.25
	 * 
	 * Automatically assigns these behaviors if present before adding:
	 * - Optional: \ref ECBehaviorVRHand or \ref ECBehaviorCollider
	 * 
	 * Example XML element class:
	 * \code{.xml}
	 * <behavior type='ECBehaviorAttachSlot'>
	 *   <!-- optional: use vrhand behavior with id -->
	 *   <string name='vrHand'>right</string>
	 *   
	 *   <!-- optional: use behavior tree with id instead of empty string -->
	 *   <string name='behaviorTree'>second</string>
	 * </behavior>
	 * 
	 * <!-- for adding multiple behaviors use unique identifiers -->
	 * <behavior type='ECBehaviorAttachSlot' id='second'>
	 *   ...
	 * </behavior>
	 * \endcode
	 * 
	 * Element class properties added by the behavior can also be set directly inside the tag
	 * be removing the property name prefix and starting with a "." (for example ".propertyName").
	 */
	class Factory implements BehaviorFactory
		func new()
		end
		
		func String factoryId()
			return "ECBehaviorAttachSlot"
		end
		
		func ECBehavior addBehavior(BehaviorElementClass eclass, String id, Dictionary parameters)
			var ECBehaviorAttachSlot behavior = ECBehaviorAttachSlot.new(\
				eclass, ECBehaviorCollider.getBehaviorIn(eclass), id)
			
			behavior.setVRHand(eclass.sharedFactoryHelper.optionalVRHand(eclass, parameters))
			
			behavior.setBehaviorTree(eclass.sharedFactoryHelper.optionalBehaviorTree(eclass, parameters))
			
			eclass.sharedFactoryHelper.setPropertiesFromParameters(\
				eclass, parameters, "attachSlot", id)
			return behavior
		end
	end
	
	
	
	/** \brief Behavior instance. */
	class Instance extends DefaultECBehaviorInstance
		/**
		 * \brief Behavior tree action "attachSlot{(id)}.detach".
		 * \version 1.26
		 */
		class BTADetach implements BTAction
			var Instance pInstance
			
			func new(Instance instance)
				pInstance = instance
			end
			
			func BTResult runAction(BTContext context, Dictionary parameters)
				if parameters.has("dispose")
					pInstance.detachAndDispose()
					
				else
					pInstance.detach()
				end
				return BTResult.success
			end
		end
		
		/**
		 * \brief Behavior tree action/condition "attachSlot{(id)}.check".
		 * \version 1.26
		 */
		class BTACheck implements BTAction, BTCondition
			var Instance pInstance
			var String pPrefix
			
			func new(Instance instance, String prefix)
				pInstance = instance
				pPrefix = prefix
			end
			
			func BTResult runAction(BTContext context, Dictionary parameters)
				return check("", parameters) if BTResult.success else BTResult.failure
			end
			
			func bool evaluateCondition(BTContext context, Dictionary parameters)
				return check(pPrefix, parameters)
			end
			
			func bool check(String prefix, Dictionary parameters)
				var bool result = true
				var Object value
				
				value = parameters.getAt(prefix + "empty", null)
				if value != null
					result &= pInstance.isEmpty() == value.equals("true")
				end
				
				return result
			end
		end
		
		
		var ECBehaviorAttachSlot pECBehavior
		var String pBone
		var Vector pPosition
		var Quaternion pOrientation
		var Matrix pMatrix
		var Matrix pInverseMatrix
		var ECBehaviorAttachable.Instance pAttachable
		var Vector pAttachablePosition
		var Quaternion pAttachableOrientation
		var ElementResolver pElementResolver
		var Array pListeners
		
		var ECBehaviorCollider.Instance pCollider
		var ECBehaviorVRHand.Instance pVRHand
		
		
		
		/** \brief Create element. */
		func new(ECBehaviorAttachSlot ecbehavior, BehaviorElement element) super(element)
			pECBehavior = ecbehavior
			pBone = ecbehavior.getBone().getValue()
			pPosition = ecbehavior.getPosition().getVector()
			pOrientation = Quaternion.newFromEuler(ecbehavior.getOrientation().getVector())
			pListeners = Array.new()
		end
		
		/** \brief Dispose of composeable instance. */
		func void dispose()
			if pAttachable != null
				pAttachable.getElement().safeDispose()
				pAttachable = null
			end
			
			pListeners = null
			pElementResolver = null
			pCollider = null
			pVRHand = null
			
			super.dispose()
		end
		
		
		
		/** \brief Initialize element from stub. */
		func void init(StubElement stub)
			var BehaviorElement element = getElement()
			
			if pECBehavior.getVRHand() != null
				pVRHand = pECBehavior.getVRHand().instance(element)
				
			elif pECBehavior.getCollider() != null
				pCollider = pECBehavior.getCollider().instance(element)
			end
			
			var CodecPropertyString codec = element.getClass().getCodecPropertyString()
			
			pBone = stub.getPropertyValueFor(pECBehavior.getBone().getName(), pBone)
			
			var String value = stub.getPropertyValueFor(pECBehavior.getPosition().getName(), "")
			if not value.empty()
				pPosition = codec.decodeVector(value)
			end
			
			value = stub.getPropertyValueFor(pECBehavior.getOrientation().getName(), "")
			if not value.empty()
				pOrientation = Quaternion.newFromEuler(codec.decodeVector(value))
			end
			
			pECBehavior.createListeners(this)
			
			if pECBehavior.getBehaviorTree() != null
				var String pnp = pECBehavior.getPrefix()
				var BTContext c = pECBehavior.getBehaviorTree().instance(element).getContext()
				c.setAction(pnp + "detach", BTADetach.new(this))
				
				var String name = pnp + "check"
				var BTACheck btacheck = BTACheck.new(this, pnp)
				c.setAction(name, btacheck)
				c.setCondition(name, btacheck)
			end
		end
		
		
		
		/** \brief Behavior. */
		func ECBehaviorAttachSlot getECBehavior()
			return pECBehavior
		end
		
		/** \brief Collider behavior instance or null if not used. */
		func ECBehaviorCollider.Instance getCollider()
			return pCollider
		end
		
		/** \brief VR Hand behavior instance or null if not used. */
		func ECBehaviorVRHand.Instance getVRHand()
			return pVRHand
		end
		
		/** \brief Name of bone to attach to or empty string to attach statically. */
		func String getBone()
			return pBone
		end
		
		/** \brief Position to attach to. */
		func Vector getPosition()
			return pPosition
		end
		
		/** \brief Orientation to attach to. */
		func Quaternion getOrientation()
			return pOrientation
		end
		
		/** \brief Attach slot matrix relative to element or bone. */
		func Matrix getMatrix()
			if pMatrix == null
				pMatrix = Matrix.newWorld(pPosition, pOrientation)
			end
			return pMatrix
		end
		
		/** \brief Inverse attach slot matrix relative to element or bone. */
		func Matrix getInverseMatrix()
			if pInverseMatrix == null
				pInverseMatrix = getMatrix().getInverse()
			end
			return pInverseMatrix
		end
		
		/**
		 * \brief Attach slot matrix in world space.
		 * \version 1.9
		 */
		func DMatrix getWorldMatrix()
			var DMatrix matrix = DMatrix.newWorld(DVector.new(pPosition), pOrientation)
			
			var Collider collider = getSlotCollider()
			if collider == null
				return matrix * getElement().getElementMatrix()
			end
			
			if pBone.empty() or not collider castable ColliderRig
				return matrix * collider.getMatrix()
			end
			
			var ColliderRig colrig = collider cast ColliderRig
			var int index = colrig.getRig().indexOfBoneNamed(pBone)
			if index == -1
				return matrix * collider.getMatrix()
			end
			
			if collider.getResponseType() != CollisionResponse.dynamic\
			and collider castable ColliderComponent
				(collider cast ColliderComponent).copyStateFromComponent(index)
			end
			
			return matrix * colrig.boneGetMatrix(index)
		end
		
		/**
		 * \brief Inverse attach slot matrix in world space.
		 * \version 1.9
		 */
		func DMatrix getInverseWorldMatrix()
			return getWorldMatrix().getInverse()
		end
		
		/** \brief Element resolver used during loading or \em null if not set. */
		func ElementResolver getElementResolver()
			return pElementResolver
		end
		
		/**
		 * \brief Collider resource to use for slot.
		 * \version 1.9
		 * 
		 * Can be ECBehaviorCollider collider, ECBehaviorVRHand collider or null.
		 */
		func Collider getSlotCollider()
			if pVRHand != null
				return pVRHand.getCollider()
				
			elif pCollider != null
				return pCollider.getCollider()
				
			else
				return null
			end
		end
		
		
		
		/** \brief Attached attachable or \em null. */
		func ECBehaviorAttachable.Instance getAttachable()
			return pAttachable
		end
		
		/** \brief Attachable position or \em null. */
		func Vector getAttachablePosition()
			return pAttachablePosition
		end
		
		/** \brief Attachable orientation or \em null. */
		func Quaternion getAttachableOrientation()
			return pAttachableOrientation
		end
		
		/** \brief Slot is empty. */
		func bool isEmpty()
			return pAttachable == null
		end
		
		/** \brief Slot is occupied. */
		func bool isNotEmpty()
			return pAttachable != null
		end
		
		/** \brief Element is attached to slot. */
		func bool isAttached(BehaviorElement element)
			return pAttachable != null and pAttachable.getElement() == element
		end
		
		/** \brief Element is not attached to slot. */
		func bool isNotAttached(BehaviorElement element)
			return pAttachable == null or pAttachable.getElement() != element
		end
		
		/**
		 * \brief Attachable can be attached to this attachment slot.
		 * \retval false Slot is not empty.
		 * \retval false Attachable is already attached to another slot.
		 * \retval false Attachable Element.getParent() is not null.
		 * \retval true Attaching is possible
		 */
		func bool canAttach(ECBehaviorAttachable.Instance attachable)
			return pAttachable == null and not attachable.isAttached() \
				and attachable.getElement().getParent() == null
		end
		
		
		/**
		 * \brief Attach attachable to attachment slot.
		 * \throws EInvalidParam \em attachable is \em null.
		 * \throws EInvalidParam Slot is not empty.
		 * \throws EInvalidParam \em attachable is already attached to another slot.
		 * \throws EInvalidParam \em attachable Element.getParent() is not null.
		 */
		func void attach(ECBehaviorAttachable.Instance attachable)
			attach(attachable, Vector.new(), Quaternion.new())
		end
		
		func void attach(ECBehaviorAttachable.Instance attachable, Vector position)
			attach(attachable, position, Quaternion.new())
		end
		
		func void attach(ECBehaviorAttachable.Instance attachable, Vector position, Quaternion orientation)
			if pAttachable != null or attachable.isAttached()
				throw EInvalidParam.new()
			end
			
			var BehaviorElement attachableElement = attachable.getElement()
			if attachableElement.getParent() != null
				throw EInvalidParam.new()
			end
			
			attachAttachable(attachable, position, orientation)
			
			attachableElement.setParent(getElement())
			attachable.setAttachSlot(this)
			
			attachableElement.getStub().setAttachTo(null) // clear attach-to info in stub
			
			pAttachable = attachable
			pAttachablePosition = position
			pAttachableOrientation = orientation
			
			pListeners.forEach(block Listener each
				each.slotAttached(this, attachable)
			end)
		end
		
		/**
		 * \brief Attach attachable to attachment slot relative to current position and orientation.
		 * \throws EInvalidParam \em attachable is \em null.
		 * \throws EInvalidParam Slot is not empty.
		 * \throws EInvalidParam \em attachable is already attached to another slot.
		 * \throws EInvalidParam \em attachable Element.getParent() is not null.
		 */
		func void attachWorld(ECBehaviorAttachable.Instance attachable)
			var Matrix matrix = (attachable.getElement().getElementMatrix()\
				* getInverseWorldMatrix()).toMatrix()
			attach(attachable, matrix.getPosition(), matrix.toQuaternion())
		end
		
		/**
		 * \brief Attach attachable to attachment slot.
		 * 
		 * Hook for subclasses to do custom attachment logic. Default implementation attaches
		 * attachable ECBehaviorCollider to the slot ECBehaviorCollider or ECBehaviorVRHand.
		 * From the following list the first matching method is chosen and applied.
		 * 
		 * If bone is not empty string the attachable collider is attached in bone mode.
		 * This attaches the entire collider to the slot bone. This requires the attachment
		 * slot collider to be castable to ColliderRig. This works best for example for
		 * actors holding a prop in their hands.
		 * 
		 * If slot collider is castable to ColliderRig and has bones attachable collider is
		 * attached in rig mode. This copies bone states from slot collider to attachable
		 * collider using bone name matching. This works best for example for actors wearing cloth.
		 * 
		 * If slot collider is present attachable is attached in static mode. This is often used
		 * together with volmue or ghost slot collider. This works best for static attachment
		 * positions like a wall mount where props are presented to the player to pick up.
		 * 
		 * If no slot collider is present attachable is just moved into the correct position.
		 * This works best for situations where elements technically should use an attach slot
		 * without needing to create a dummy collider just for this purpose.
		 */
		protected func void attachAttachable(ECBehaviorAttachable.Instance attachable, \
		Vector position, Quaternion orientation)
			var Collider colliderSlot = getSlotCollider()
			
			if colliderSlot == null
				var DMatrix matrix = DMatrix.newWorld(DVector.new(position), orientation) * getWorldMatrix()
				attachable.getElement().setGeometry(matrix.getPosition(), matrix.toQuaternion())
				return
			end
			
			var Collider colliderAttachable = attachable.getCollider().getCollider()
			var Matrix matrix = Matrix.newWorld(position, orientation) * getMatrix()
			
			if pBone.empty()
				if colliderSlot castable ColliderRig and colliderAttachable castable ColliderRig
					var ColliderRig colliderRig = colliderSlot cast ColliderRig
					var ColliderRig attachableColliderRig = colliderAttachable cast ColliderRig
					var Rig rig = colliderRig.getRig()
					var Rig attachableRig = attachableColliderRig.getRig()
					
					if rig != null and rig.getBoneCount() > 0\
					and attachableRig != null and attachableRig.getBoneCount() > 0
						colliderRig.attachRig(attachableColliderRig)
						
					else
						colliderRig.attachStatic(colliderAttachable, matrix.getPosition(), matrix.toQuaternion())
					end
					
				else
					colliderSlot.attachStatic(colliderAttachable, matrix.getPosition(), matrix.toQuaternion())
				end
				
			else
				(colliderSlot cast ColliderRig).attachBone(colliderAttachable, \
					pBone, matrix.getPosition(), matrix.toQuaternion())
			end
		end
		
		/** \brief Detach attachable if one is attached. */
		func void detach()
			if pAttachable == null
				return
			end
			
			var ECBehaviorAttachable.Instance attachable = pAttachable
			
			detachAttachable()
			
			attachable.getElement().setParent(null)
			attachable.setAttachSlot(null)
			
			pAttachable = null
			pAttachablePosition = null
			pAttachableOrientation = null
			
			pListeners.forEach(block Listener each
				each.slotDetached(this, attachable)
			end)
		end
		
		/**
		 * \brief Detach attachable from attachment slot.
		 * 
		 * Hook for subclasses to do custom detachment logic. Default implementation detaches
		 * attachable ECBehaviorCollider from ECBehaviorCollider or ECBehaviorVRHand.
		 */
		func void detachAttachable()
			if pVRHand != null
				pVRHand.getCollider().detach(pAttachable.getCollider().getCollider())
				
			elif pCollider != null
				pCollider.getCollider().detach(pAttachable.getCollider().getCollider())
			end
		end
		
		/**
		 * \brief Detach and dispose attachable if one is attached.
		 * 
		 * Calls removeFromGameWorldIfPresent() then dispose() on the attachable.
		 */
		func void detachAndDispose()
			var ECBehaviorAttachable.Instance attachable = pAttachable
			
			detach()
			
			if attachable != null
				attachable.getElement().safeDispose()
			end
		end
		
		
		
		/** \brief Add listener. */
		func void addListener(Listener listener)
			if listener == null
				throw EInvalidParam.new()
			end
			pListeners.add(listener)
		end
		
		/** \brief Remove listener. */
		func void removeListener(Listener listener)
			pListeners.remove(listener)
		end
		
		
		
		/** \brief Frame update started. */
		func void enterFrame()
			if pElementResolver != null
				pElementResolver.resolve(getElement().getGameWorld())
				pElementResolver = null
			end
		end
		
		/** \brief State changed (visble, touchable). */
		func void stateChanged()
			if pAttachable == null
				return
			end
			
			var BehaviorElement element = getElement()
			var BehaviorElement attached = pAttachable.getElement()
			
			attached.setVisible(element.getVisible())
			attached.setTouchable(element.getTouchable())
		end
		
		/** \brief Add element to game world. */
		func void addToGameWorld()
			if pAttachable == null
				return
			end
			
			var BehaviorElement element = pAttachable.getElement()
			if element.getGameWorld() == null
				getElement().getGameWorld().addElement(element)
			end
		end
		
		/** \brief Remove element from game world. */
		func void removeFromGameWorld()
			if pAttachable != null
				pAttachable.getElement().removeFromGameWorldIfPresent()
			end
		end
		
		
		
		/** \brief Read element from file. */
		func void readFromFile(PersistencyEnvironment env, FileReader reader)
			select reader.readByte() // version
			case 0
				var PersistencyFlags flags = PersistencyFlags.new(1, reader)
				if flags.getAt(0)
					var Vector position = Vector.readFromFile(reader)
					var Quaternion orientation = Quaternion.readFromFile(reader)
					
					pElementResolver = ElementResolver.new()
					pElementResolver.addBehavior(reader, block ECBehaviorAttachable.Instance attachable
						attachAttachable(attachable, position, orientation)
						pAttachable = attachable
						pAttachablePosition = position
						pAttachableOrientation = orientation
					end)
					setRequiresEnterFrame(true)
				end
				
			else
				throw EInvalidParam.new("unsupported version")
			end
		end
		
		/** \brief Write element to file. */
		func void writeToFile(PersistencyEnvironment env, FileWriter writer)
			writer.writeByte(0) // version
			
			var PersistencyFlags flags = PersistencyFlags.new(1)
			flags.setAt(0, pAttachable != null)
			flags.writeToFile(writer)
			
			if pAttachable != null
				pAttachablePosition.writeToFile(writer)
				pAttachableOrientation.writeToFile(writer)
				ElementResolver.writeToFileBehavior(writer, pAttachable)
			end
		end
	end
	
	
	
	var ECBehaviorCollider pCollider
	var ECBehaviorVRHand pVRHand
	var ECPString pBone
	var ECPVector pPosition
	var ECPVector pOrientation
	var Array pListenerFactories
	var ECBehaviorBehaviorTree pBehaviorTree
	var String pPrefix
	
	
	
	/**
	 * \brief Create behavior element class.
	 * 
	 * These values are optional and can be null: \em collider.
	 */
	func new(BehaviorElementClass eclass, ECBehaviorCollider collider) \
	this(eclass, collider, "")
	end
	
	/**
	 * \brief Create behavior element class.
	 * 
	 * These values are optional and can be null: \em collider.
	 */
	func new(BehaviorElementClass eclass, ECBehaviorCollider collider, String id) \
	this(eclass, collider, id, id.empty() if "attachSlot." else "attachSlot(" + id + ").")
	end
	
	/**
	 * \brief Create behavior element class.
	 * 
	 * These values are optional and can be null: \em collider.
	 */
	func new(BehaviorElementClass eclass, ECBehaviorCollider collider, \
	String id, String prefix) this(eclass, collider, null, id, prefix)
	end
	
	/**
	 * \brief Create behavior element class.
	 * \version 1.9
	 * 
	 * These values are optional and can be null:
	 * - collider
	 * - vrHand
	 */
	func new(BehaviorElementClass eclass, ECBehaviorCollider collider,\
	ECBehaviorVRHand vrHand, String id, String prefix) super(eclass, id)
		pPrefix = prefix
		pCollider = collider
		pVRHand = vrHand
		pListenerFactories = Array.new()
		
		pBone = ECPString.new(prefix + "bone", "")
		eclass.addProperty(pBone)
		
		pPosition = ECPVector.new(prefix + "position")
		eclass.addProperty(pPosition)
		
		pOrientation = ECPVector.new(prefix + "orientation")
		eclass.addProperty(pOrientation)
		
		eclass.addBehavior(this)
	end
	
	/** \brief Dispose of behavior. */
	func void dispose()
		pCollider = null
		pVRHand = null
		pListenerFactories = null
		pBehaviorTree = null
		super.dispose()
	end
	
	
	
	/**
	 * \brief Prefix.
	 * \version 1.26
	 */
	func String getPrefix()
		return pPrefix
	end
	
	/** \brief Collider behavior or null if not used. */
	func ECBehaviorCollider getCollider()
		return pCollider
	end
	
	/**
	 * \brief Set collider behavior or null if not used.
	 * \version 1.9
	 */
	func void setCollider(ECBehaviorCollider collider)
		pCollider = collider
	end
	
	/**
	 * \brief VR Hand behavior or null if not used.
	 * \version 1.9
	 */
	func ECBehaviorVRHand getVRHand()
		return pVRHand
	end
	
	/**
	 * \brief Set VR Hand behavior or null if not used.
	 * \version 1.9
	 */
	func void setVRHand(ECBehaviorVRHand vrHand)
		pVRHand = vrHand
	end
	
	/** \brief Bone to attach to or empty string to attach to collider. */
	func ECPString getBone()
		return pBone
	end
	
	/** \brief Position to attach to. */
	func ECPVector getPosition()
		return pPosition
	end
	
	/** \brief Orientation to attach to. */
	func ECPVector getOrientation()
		return pOrientation
	end
	
	/**
	 * \brief Behavior tree or null.
	 * \version 1.26
	 */
	func ECBehaviorBehaviorTree getBehaviorTree()
		return pBehaviorTree
	end
	
	/**
	 * \brief Set behavior tree or null.
	 * \version 1.26
	 */
	func void setBehaviorTree(ECBehaviorBehaviorTree behaviorTree)
		pBehaviorTree = behaviorTree
	end
	
	
	
	/**
	 * \brief Set attach parameters for static attaching.
	 * \version 1.10
	 */
	func void setAttachStatic(Vector position, Vector rotation)
		pBone.setValue("")
		pPosition.setVector(position)
		pOrientation.setVector(rotation)
	end
	
	/**
	 * \brief Set attach parameters for bone attaching using zero position and rotation.
	 * \version 1.10
	 */
	func void setAttachBone(String bone)
		setAttachBone(bone, Vector.new(), Vector.new())
	end
	
	/**
	 * \brief Set attach parameters for bone attaching.
	 * \version 1.10
	 */
	func void setAttachBone(String bone, Vector position, Vector rotation)
		pBone.setValue(bone)
		pPosition.setVector(position)
		pOrientation.setVector(rotation)
	end
	
	
	
	/** \brief Add listener factory. */
	func void addListenerFactory(ListenerFactory factory)
		if factory == null
			throw ENullPointer.new()
		end
		pListenerFactories.add(factory)
	end
	
	/**
	 * \brief Add listener factory using block.
	 * 
	 * Block receives as parameter Instance and returns Listener.
	 */
	func void addListenerFactory(Block blockFactory)
		pListenerFactories.add(BlockListenerFactory.new(blockFactory))
	end
	
	/** \brief Visit listener factories with block with argument ListenerFactory. */
	func void forEachListenerFactory(Block ablock)
		pListenerFactories.forEach(ablock)
	end
	
	/** \brief Create listeners from factories adding them to behavior instance. */
	func void createListeners(Instance instance)
		pListenerFactories.forEach(block ListenerFactory each
			instance.addListener(each.createListener(instance))
		end)
	end
	
	
	
	/** \brief Get instance in element from owner element class. */
	func Instance instance(BehaviorElement element)
		return element.getInstanceAt(getInstanceIndex()) cast Instance
	end
	
	
	
	/**
	 * \brief Get behavior in element class or \em null if absent.
	 * 
	 * Use this method to check if a particular BehaviorElementClass contains a behavior
	 * of type ECBehaviorComponent.
	 */
	static func ECBehaviorAttachSlot getBehaviorIn(BehaviorElementClass eclass)
		return eclass.findBehavior(block ECBehaviorAttachSlot each
			return true
		end) cast ECBehaviorAttachSlot
	end
	
	/**
	 * \brief Get behavior with id in element class or \em null if absent.
	 * 
	 * Use this method to check if a particular BehaviorElementClass contains a behavior
	 * of type ECBehaviorAttachSlot with specific identifier.
	 */
	static func ECBehaviorAttachSlot getBehaviorIn(BehaviorElementClass eclass, String id)
		return eclass.findBehavior(block ECBehaviorAttachSlot each
			return each.getID().equals(id)
		end) cast ECBehaviorAttachSlot
	end
	
	/**
	 * \brief Get list of all behaviors in element.
	 * 
	 * Returns list contains ECBehaviorAttachSlot behaviors in the order they have
	 * been created in the element.
	 */
	static func Array getAllBehaviorsIn(BehaviorElementClass eclass)
		return eclass.collectBehaviors(block ECBehaviorAttachSlot each
			return true
		end)
	end
	
	
	
	/**
	 * \brief Get instance in element or \em null if absent.
	 * 
	 * Use this method to check if a particular BehaviorElement contains a behavior instance
	 * of type ECBehaviorAttachSlot.Instance . If more than one instance is present returns
	 * the first instance.
	 */
	static func Instance getInstanceIn(BehaviorElement element)
		return element.findInstance(block Instance each
			return true
		end) cast Instance
	end
	
	/**
	 * \brief Get instance with id in element or \em null if absent.
	 * 
	 * Use this method to check if a particular BehaviorElement contains a behavior instance
	 * of type ECBehaviorAttachSlot.Instance with specific identifier.
	 */
	static func Instance getInstanceIn(BehaviorElement element, String id)
		return element.findInstance(block Instance each
			return each.getECBehavior().getID().equals(id)
		end) cast Instance
	end
	
	/**
	 * \brief Get list of all instances in element.
	 * 
	 * Returns list contains ECBehaviorAttachSlot.Instance instances in the order they have
	 * been created in the element.
	 */
	static func Array getAllInstancesIn(BehaviorElement element)
		return element.collectInstances(block Instance each
			return true
		end)
	end
	
	
	
	/** \brief Create Behavior instance. */
	func ECBehaviorInstance createInstance(BehaviorElement element)
		return Instance.new(this, element)
	end
end
