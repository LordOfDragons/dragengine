/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */


namespace Dragengine.Scenery

pin Dragengine.Gui
pin Dragengine.LoadSave
pin Dragengine.Preloading
pin Dragengine.Utils
pin Dragengine.Scenery
pin Dragengine.BehaviorTreeSystem
pin Dragengine.StateMachineSystem


/**
 * \brief Behavior element behavior adding support to be attached to an ECBehaviorAttachSlot.
 * 
 * While ECBehaviorAttachToParent behavior allows to attach objects by using the IGDE World
 * Editor the ECBehaviorAttachable behavior allows to attach objects at runtime into attachment
 * slots provided by ECBehaviorAttachSlot.
 * 
 * This behavior knows how to attach to ECBehaviorAttachSlot containing an ECBehaviorCollider.
 * 
 * Element class properties have the prefix "attachable.".
 * 
 * This behavior requires ECBehaviorCollider to be present.
 * 
 * This behavior does not require the element class to be persistable (setPersistable).
 * 
 * \see https://developer.dragondreams.ch/wiki/doku.php/dragengine:modules:dragonscript:behavior_attachable
 */
class ECBehaviorAttachable extends DefaultECBehavior
	/** \brief Listener for behavior instance events. */
	interface Listener
		/** \brief Attachable has been attached to slot. */
		func void attachableAttached(Instance instance, ECBehaviorAttachSlot.Instance attachSlot)
		
		/** \brief Attachable has been removed from slot. */
		func void attachableDetached(Instance instance, ECBehaviorAttachSlot.Instance attachSlot)
	end
	
	/** \brief Default implementation of behavior instance listener. */
	class DefaultListener implements Listener
		/** \brief Create default listener. */
		func new()
		end
		
		/** \brief Attachable has been attached to slot. */
		func void attachableAttached(Instance instance, ECBehaviorAttachSlot.Instance attachSlot)
		end
		
		/** \brief Attachable has been removed from slot. */
		func void attachableDetached(Instance instance, ECBehaviorAttachSlot.Instance attachSlot)
		end
	end
	
	/** \brief Factory creating listeners. */
	interface ListenerFactory
		/** \brief Create listener. */
		func Listener createListener(Instance instance)
	end
	
	/** \brief Factory creating listeners using block. */
	class BlockListenerFactory implements ListenerFactory
		var Block pBlock
		
		/** \brief Create factory using block receiving Instance as parameter returning Listener. */
		func new(Block blockFactory)
			if blockFactory == null
				throw ENullPointer.new()
			end
			pBlock = blockFactory
		end
		
		/** \brief Create listener. */
		func Listener createListener(Instance instance)
			return pBlock.run(instance) cast Listener
		end
	end
	
	/**
	 * \brief Behavior factory.
	 * \version 1.25
	 * 
	 * Automatically assigns these behaviors if present before adding:
	 * - Required: \ref ECBehaviorCollider
	 * 
	 * Example XML element class:
	 * \code{.xml}
	 * <behavior type='ECBehaviorAttachable'>
	 *   <!-- optional: use behavior tree with id instead of empty string -->
	 *   <string name='behaviorTree'>second</string>
	 *   
	 *   <!-- optional: use state machine with id instead of empty string -->
	 *   <string name='stateMachine'>second</string>
	 * </behavior>
	 * \endcode
	 * 
	 * Element class properties added by the behavior can also be set directly inside the tag
	 * be removing the property name prefix and starting with a "." (for example ".propertyName").
	 */
	class Factory implements BehaviorFactory
		func new()
		end
		
		func String factoryId()
			return "ECBehaviorAttachable"
		end
		
		func ECBehavior addBehavior(BehaviorElementClass eclass, String id, Dictionary parameters)
			if not id.empty()
				throw EInvalidParam.new("id is not empty string")
			end
			var ECBehaviorAttachable behavior = ECBehaviorAttachable.new(eclass,\
				ECBehaviorCollider.getBehaviorIn(eclass))
			
			behavior.setBehaviorTree(eclass.sharedFactoryHelper.defaultBehaviorTree(eclass, parameters))
			behavior.setStateMachine(eclass.sharedFactoryHelper.defaultStateMachine(eclass, parameters))
			
			eclass.sharedFactoryHelper.setPropertiesFromParameters(eclass, parameters, "attachable")
			return behavior
		end
	end
	
	
	
	/** \brief Behavior instance. */
	class Instance extends DefaultECBehaviorInstance
		/**
		 * \brief Behavior tree action "attachable.deatch".
		 * \version 1.26
		 */
		class BTADetach extends BTSMActionCondition
			var Instance pInstance
			
			func new(Instance instance)
				pInstance = instance
			end
			
			func BTResult runAction(Dictionary parameters)
				if parameters.has("dispose")
					pInstance.detachAndDispose()
					return BTResult.running
					
				else
					pInstance.detach()
					return BTResult.success
				end
			end
		end
		
		/**
		 * \brief Behavior tree action/condition "attachable.check".
		 * \version 1.26
		 */
		class BTACheck extends BTSMActionCondition
			var Instance pInstance
			var String pPrefix
			
			func new(Instance instance, String prefix)
				pInstance = instance
				pPrefix = prefix
			end
			
			func BTResult runAction(Dictionary parameters)
				return check("", parameters) if BTResult.success\
					else (parameters.has("wait") if BTResult.running else BTResult.failure)
			end
			
			func bool evaluateCondition(Dictionary parameters)
				return check(pPrefix, parameters)
			end
			
			func bool check(String prefix, Dictionary parameters)
				var bool result = true
				var Object value
				
				value = parameters.getAt(prefix + "attached", null)
				if value != null
					result &= pInstance.isAttached() == value.equals("true")
				end
				
				return result
			end
		end
		
		
		var ECBehaviorAttachable pECBehavior
		var ECBehaviorCollider.Instance pCollider
		var ECBehaviorAttachSlot.Instance pAttachSlot
		var Array pListeners
		var ElementResolver pElementResolver
		var SMContext pSMContext
		
		
		
		/** \brief Create element. */
		func new(ECBehaviorAttachable ecbehavior, BehaviorElement element) super(element)
			pECBehavior = ecbehavior
			pListeners = Array.new()
			
			pCollider = ecbehavior.getCollider().instance(element)
		end
		
		/** \brief Dispose of attach slot. */
		func void dispose()
			detach()
			pListeners = null
			pCollider = null
			pElementResolver = null
			pSMContext = null
			super.dispose()
		end
		
		
		
		/** \brief Initialize behavior from stub. */
		func void init(StubElement stub)
			pECBehavior.createListeners(this)
			
			if pECBehavior.getBehaviorTree() != null
				var String pnp = pECBehavior.getPrefix()
				var BTContext c = pECBehavior.getBehaviorTree().instance(getElement()).getContext()
				c.setAction(pnp + "detach", BTADetach.new(this))
				
				var String name = pnp + "check"
				var BTACheck btacheck = BTACheck.new(this, pnp)
				c.setAction(name, btacheck)
				c.setCondition(name, btacheck)
			end
			
			if pECBehavior.getStateMachine() != null
				var String pnp = pECBehavior.getPrefix()
				pSMContext = pECBehavior.getStateMachine().instance(getElement()).getContext()
				pSMContext.setAction(pnp + "detach", BTADetach.new(this))
				
				var String name = pnp + "check"
				var BTACheck btacheck = BTACheck.new(this, pnp)
				pSMContext.setAction(name, btacheck)
				pSMContext.setCondition(name, btacheck)
			end
		end
		
		
		
		/** \brief Behavior. */
		func ECBehaviorAttachable getECBehavior()
			return pECBehavior
		end
		
		/** \brief Owner element collider. */
		func ECBehaviorCollider.Instance getCollider()
			return pCollider
		end
		
		/** \brief Attach slot this element is attached to or \em null. */
		func ECBehaviorAttachSlot.Instance getAttachSlot()
			return pAttachSlot
		end
		
		/**
		 * \brief Element resolver used during loading or \em null if not set.
		 * \version 1.9
		 */
		func ElementResolver getElementResolver()
			return pElementResolver
		end
		
		
		
		/**
		 * \brief Set attach slot.
		 * \warning For use by ECBehaviorAttachSlot only.
		 */
		func void setAttachSlot(ECBehaviorAttachSlot.Instance attachSlot)
			if attachSlot == pAttachSlot
				return
			end
			
			if pAttachSlot != null
				pListeners.forEach(block Listener each
					each.attachableDetached(this, pAttachSlot)
				end)
				if pSMContext != null
					pSMContext.runEvent(pECBehavior.getPrefix() + "detached")
				end
			end
			
			pAttachSlot = attachSlot
			
			if attachSlot != null
				pListeners.forEach(block Listener each
					each.attachableAttached(this, attachSlot)
				end)
				if pSMContext != null
					pSMContext.runEvent(pECBehavior.getPrefix() + "attached")
				end
			end
		end
		
		/** \brief Element is attached to an attachment slot. */
		func bool isAttached()
			return pAttachSlot != null
		end
		
		/** \brief Element is not attached to an attachment slot. */
		func bool isNotAttached()
			return pAttachSlot == null
		end
		
		/**
		 * \brief Attach to attachment slot.
		 * \throws EInvalidParam \em slot is \em null.
		 * \throws EInvalidParam Already attached to an attachment slot.
		 * \throws EInvalidParam Owner Element.getParent() is not null.
		 * \throws EInvalidParam \em slot is not empty.
		 */
		func void attach(ECBehaviorAttachSlot.Instance slot)
			slot.attach(this)
		end
		
		func void attach(ECBehaviorAttachSlot.Instance slot, Vector position)
			slot.attach(this, position)
		end
		
		func void attach(ECBehaviorAttachSlot.Instance slot, Vector position, Quaternion orientation)
			slot.attach(this, position, orientation)
		end
		
		/**
		 * \brief Attach to attachment slot using current world position.
		 * \version 1.9
		 * \throws EInvalidParam \em slot is \em null.
		 * \throws EInvalidParam Already attached to an attachment slot.
		 * \throws EInvalidParam Owner Element.getParent() is not null.
		 * \throws EInvalidParam \em slot is not empty.
		 */
		func void attachWorld(ECBehaviorAttachSlot.Instance slot)
			slot.attachWorld(this)
		end
		
		/** \brief Detaches from slot if attached. */
		func void detach()
			if pAttachSlot != null
				pAttachSlot.detach()
			end
		end
		
		/** \brief Detaches from slot if attached and safely disposes of the element. */
		func void detachAndDispose()
			detach()
			getElement().safeDispose()
		end
		
		/**
		 * \brief Safely reattaches to a different attachment slot.
		 * 
		 * Convenience method for calling detach() then attach() but checking problems before
		 * calling detach(). This ensures the attachable stays attached to the old slot in
		 * case something is wrong.
		 * 
		 * \note If the current attach slot is the same as the new attach slot nothing is done.
		 */
		func void reattach(ECBehaviorAttachSlot.Instance slot)
			reattach(slot, Vector.new(), Quaternion.new())
		end
		
		func void reattach(ECBehaviorAttachSlot.Instance slot, Vector position)
			reattach(slot, position, Quaternion.new())
		end
		
		func void reattach(ECBehaviorAttachSlot.Instance slot, Vector position, Quaternion orientation)
			if slot == pAttachSlot
				return
			end
			
			if slot.isNotEmpty()
				throw EInvalidParam.new()
			end
			
			detach()
			attach(slot, position, orientation)
		end
		
		/**
		 * \brief Safely reattaches to a different attachment slot using current world position.
		 * 
		 * Convenience method for calling detach() then attach() but checking problems before
		 * calling detach(). This ensures the attachable stays attached to the old slot in
		 * case something is wrong.
		 * 
		 * \note If the current attach slot is the same as the new attach slot nothing is done.
		 */
		func void reattachWorld(ECBehaviorAttachSlot.Instance slot)
			if slot == pAttachSlot
				return
			end
			
			if slot.isNotEmpty()
				throw EInvalidParam.new()
			end
			
			detach()
			attachWorld(slot)
		end
		
		
		
		/** \brief Add listener. */
		func void addListener(Listener listener)
			if listener == null
				throw EInvalidParam.new()
			end
			pListeners.add(listener)
		end
		
		/** \brief Remove listener. */
		func void removeListener(Listener listener)
			pListeners.remove(listener)
		end
		
		
		
		/** \brief Frame update started. */
		func void enterFrame()
			if pElementResolver != null
				pElementResolver.resolve(getElement().getGameWorld())
				pElementResolver = null
			end
		end
		
		
		
		/** \brief Read element from file. */
		func void readFromFile(PersistencyEnvironment env, FileReader reader)
			select reader.readByte() // version
			case 0
				var PersistencyFlags flags = PersistencyFlags.new(1, reader)
				if flags.getAt(0)
					pElementResolver = ElementResolver.new()
					pElementResolver.addBehavior(reader, block ECBehaviorAttachSlot.Instance slot
						pAttachSlot = slot
						getElement().setParent(slot.getElement())
					end)
					setRequiresEnterFrame(true)
				end
				
			else
				throw EInvalidParam.new("unsupported version")
			end
		end
		
		/** \brief Write element to file. */
		func void writeToFile(PersistencyEnvironment env, FileWriter writer)
			writer.writeByte(0) // version
			
			var PersistencyFlags flags = PersistencyFlags.new(1)
			flags.setAt(0, pAttachSlot != null)
			flags.writeToFile(writer)
			
			if pAttachSlot != null
				ElementResolver.writeToFileBehavior(writer, pAttachSlot)
			end
		end
	end
	
	
	
	var ECBehaviorCollider pCollider
	var Array pListenerFactories
	var ECBehaviorBehaviorTree pBehaviorTree
	var ECBehaviorStateMachine pStateMachine
	var String pPrefix
	
	
	
	/** \brief Create behavior element class. */
	func new(BehaviorElementClass eclass, ECBehaviorCollider collider) \
	this(eclass, collider, "attachable.")
	end
	
	/** \brief Create behavior element class. */
	func new(BehaviorElementClass eclass, ECBehaviorCollider collider, \
	String prefix) super(eclass)
		if collider == null
			throw ENullPointer.new()
		end
		if getBehaviorIn(eclass) != null
			throw BEMultipleInstanceException.new(eclass, this)
		end
		
		pPrefix = prefix
		pCollider = collider
		pListenerFactories = Array.new()
		
		eclass.addBehavior(this)
	end
	
	/** \brief Dispose of behavior. */
	func void dispose()
		pCollider = null
		pListenerFactories = null
		pBehaviorTree = null
		pStateMachine = null
		super.dispose()
	end
	
	
	
	/**
	 * \brief Prefix.
	 * \version 1.26
	 */
	func String getPrefix()
		return pPrefix
	end
	
	/** \brief Collider behavior. */
	func ECBehaviorCollider getCollider()
		return pCollider
	end
	
	/**
	 * \brief Behavior tree or null.
	 * \version 1.26
	 */
	func ECBehaviorBehaviorTree getBehaviorTree()
		return pBehaviorTree
	end
	
	/**
	 * \brief Set behavior tree or null.
	 * \version 1.26
	 */
	func void setBehaviorTree(ECBehaviorBehaviorTree behaviorTree)
		pBehaviorTree = behaviorTree
	end
	
	/**
	 * \brief State machine or null.
	 * \version 1.26
	 */
	func ECBehaviorStateMachine getStateMachine()
		return pStateMachine
	end
	
	/**
	 * \brief Set state machine or null.
	 * \version 1.26
	 */
	func void setStateMachine(ECBehaviorStateMachine stateMachine)
		pStateMachine = stateMachine
	end
	
	/** \brief Add listener factory. */
	func void addListenerFactory(ListenerFactory factory)
		if factory == null
			throw ENullPointer.new()
		end
		pListenerFactories.add(factory)
	end
	
	/**
	 * \brief Add listener factory using block.
	 * 
	 * Block receives as parameter Instance and returns Listener.
	 */
	func void addListenerFactory(Block blockFactory)
		pListenerFactories.add(BlockListenerFactory.new(blockFactory))
	end
	
	/** \brief Visit listener factories with block with argument ListenerFactory. */
	func void forEachListenerFactory(Block ablock)
		pListenerFactories.forEach(ablock)
	end
	
	/** \brief Create listeners from factories adding them to behavior instance. */
	func void createListeners(Instance instance)
		pListenerFactories.forEach(block ListenerFactory each
			instance.addListener(each.createListener(instance))
		end)
	end
	
	
	
	/** \brief Get instance in element from owner element class. */
	func Instance instance(BehaviorElement element)
		return element.getInstanceAt(getInstanceIndex()) cast Instance
	end
	
	
	
	/**
	 * \brief Get behavior in element class or \em null if absent.
	 * 
	 * Use this method to check if a particular BehaviorElementClass contains a behavior
	 * of type ECBehaviorComponent.
	 */
	static func ECBehaviorAttachable getBehaviorIn(BehaviorElementClass eclass)
		return eclass.findBehavior(block ECBehaviorAttachable each
			return true
		end) cast ECBehaviorAttachable
	end
	
	/**
	 * \brief Get instance in element or \em null if absent.
	 * 
	 * Use this method to check if a particular BehaviorElement contains a behavior instance
	 * of type ECBehaviorAttachable.Instance . If more than one instance is present returns
	 * the first instance.
	 */
	static func Instance getInstanceIn(BehaviorElement element)
		return element.findInstance(block Instance each
			return true
		end) cast Instance
	end
	
	
	
	/** \brief Create Behavior instance. */
	func ECBehaviorInstance createInstance(BehaviorElement element)
		return Instance.new(this, element)
	end
end
