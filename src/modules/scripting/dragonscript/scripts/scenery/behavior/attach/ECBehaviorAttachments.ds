/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */


namespace Dragengine.Scenery

pin Dragengine.Gui
pin Dragengine.Preloading
pin Dragengine.Utils
pin Dragengine.Scenery


/**
 * \brief Behavior for element storing attached elements.
 * 
 * Provides list for ECBehaviorAttachToParent to register themselves at. This allows this
 * behavior to manage attached elements in case of elements being added and removed from
 * game worlds as well as finding specific attached elements. Does not support detaching
 * elements. If the element is disposed all attached elements are disposed too. If you need
 * dynamic attaching use ECBehaviorAttachSlot together with ECBehaviorAttachable.
 */
class ECBehaviorAttachments extends DefaultECBehavior
	/**
	 * \brief Behavior factory.
	 * \ref 1.25
	 * 
	 * Example XML element class:
	 * \code{.xml}
	 * <behavior type='ECBehaviorAttachments'/>
	 * \endcode
	 */
	class Factory implements BehaviorFactory
		func new()
		end
		
		func String factoryId()
			return "ECBehaviorAttachments"
		end
		
		func ECBehavior addBehavior(BehaviorElementClass eclass, String id, Dictionary parameters)
			return ECBehaviorAttachments.new(eclass)
		end
	end
	
	/** \brief Behavior instance. */
	class Instance extends DefaultECBehaviorInstance
		private var ECBehaviorAttachments pECBehavior
		private var Array pAttachments
		
		
		
		/** \brief Create element. */
		public func new(ECBehaviorAttachments ecbehavior, BehaviorElement element) super(element)
			pECBehavior = ecbehavior
			pAttachments = Array.new()
		end
		
		
		/** \brief Dispose of behavior instance. */
		public func void dispose()
			disposeAllAttachments()
			super.dispose()
		end
		
		
		
		/** \brief Behavior. */
		public func ECBehaviorAttachments getECBehavior()
			return pECBehavior
		end
		
		
		
		/** \brief Count of attachments. */
		public func int getAttachmentCount()
			return pAttachments.getCount()
		end
		
		/** \brief Attachment at index. */
		public func BehaviorElement getAttachmentAt(int index)
			return pAttachments.getAt(index) cast BehaviorElement
		end
		
		/** \brief Attachment is present. */
		public func bool hasAttachment(BehaviorElement element)
			return pAttachments.has(element)
		end
		
		/** \brief Add attachment to list. */
		public func void addAttachment(BehaviorElement element)
			pAttachments.add(element)
		end
		
		/** \brief Remove attachment from list. */
		public func void removeAttachment(BehaviorElement element)
			pAttachments.remove(element)
		end
		
		/** \brief Visit element using block with parameter BehaviorElement. */
		public func void forEachAttachment(Block ablock)
			pAttachments.forEach(ablock)
		end
		
		/** \brief Find element using block with parameter BehaviorElement returning bool. */
		public func BehaviorElement findAttachment(Block ablock)
			return pAttachments.find(ablock) cast BehaviorElement
		end
		
		/** \brief Visit attachments using visitor. */
		public func void visitAttachments(ElementVisitor visitor)
			pAttachments.forEach(block BehaviorElement each
				each.visit(visitor)
			end)
		end
		
		/** \brief Dispose of all attachments. */
		public func void disposeAllAttachments()
			pAttachments.forEach(block BehaviorElement each
				each.dispose()
			end)
			pAttachments.removeAll()
		end
		
		
		
		/**
		 * \brief State changed (visble, touchable).
		 * 
		 * Applies visible and touchable state to attachments.
		 */
		public func void stateChanged()
			var BehaviorElement element = getElement()
			var bool visible = element.getVisible()
			var bool touchable = element.getTouchable()
			
			pAttachments.forEach(block BehaviorElement each
				each.setVisible(visible)
				each.setTouchable(touchable)
			end)
		end
		
		/** \brief Add element to game world. */
		public func void addToGameWorld()
			var GameWorld gameWorld = getElement().getGameWorld()
			pAttachments.forEach(block BehaviorElement each
				gameWorld.addElement(each)
			end)
		end
		
		/** \brief Remove element from game world. */
		public func void removeFromGameWorld()
			pAttachments.forEach(block BehaviorElement each
				each.removeFromGameWorldIfPresent()
			end)
		end
	end
	
	
	
	/** \brief Create behavior element class. */
	public func new(BehaviorElementClass eclass) super(eclass)
		if getBehaviorIn(eclass) != null
			throw BEMultipleInstanceException.new(eclass, this)
		end
		
		eclass.addBehavior(this)
	end
	
	
	
	/** \brief Get instance in element from owner element class. */
	public func Instance instance(BehaviorElement element)
		return element.getInstanceAt(getInstanceIndex()) cast Instance
	end
	
	
	
	/**
	 * \brief Get behavior in element class or \em null if absent.
	 * 
	 * Use this method to check if a particular BehaviorElementClass contains a behavior
	 * of type ECBehaviorCollider.
	 */
	static public func ECBehaviorAttachments getBehaviorIn(BehaviorElementClass eclass)
		return eclass.findBehavior(block ECBehaviorAttachments each
			return true
		end) cast ECBehaviorAttachments
	end
	
	/**
	 * \brief Get instance in element or \em null if absent.
	 * 
	 * Use this method to check if a particular BehaviorElement contains a behavior instance
	 * of type ECBehaviorAttachments.Instance . If more than one instance is present returns
	 * the first instance.
	 */
	static public func Instance getInstanceIn(BehaviorElement element)
		return element.findInstance(block Instance each
			return true
		end) cast Instance
	end
	
	
	
	/** \brief Create Behavior instance. */
	public func ECBehaviorInstance createInstance(BehaviorElement element)
		return Instance.new(this, element)
	end
end
