/* 
 * Drag[en]gine DragonScript Script Module
 *
 * Copyright (C) 2022, Roland Pl√ºss (roland@rptd.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */


namespace Dragengine.Scenery

pin Dragengine.Gui
pin Dragengine.LoadSave
pin Dragengine.Preloading
pin Dragengine.Utils


/**
 * \brief Behavior adding support to apply hand pose to VR Hand.
 * \version 1.7
 * 
 * Behavior queries VR hand device for bone poses and applies them to the VR hand component.
 * Creates an animator to apply the states. This allows to chain other animators like
 * ECBehaviorActorAnimated for best performance. The bone names can be modified to adjust
 * to rigs using different names. The default bone names are these:
 * - Origin set to VR Hand: origin
 * - Wrist: hand
 * - Thumb: thumb1, thumb2, thumb3
 * - Index: index1, index2, index3, index4
 * - Middle: middle1, middle2, middle3, middle4
 * - Ring: ring1, ring2, ring3, ring4
 * - Pinky: pinky1, pinky2, pinky3, pinky4
 * 
 * Requires these behaviors to be present:
 * - ECBehaviorVRHand
 */
class ECBehaviorVRHandPose extends DefaultECBehavior
	/** \brief Behavior instance. */
	class Instance extends DefaultECBehaviorInstance
		class Bone
			private var String pBone
			private var int pPoseIndex
			private var String pNamePrefix
			private var AnimatorController pControllerPosition
			private var AnimatorController pControllerOrientation
			
			public func new(String bone, int poseIndex, String namePrefix)
				pBone = bone
				pPoseIndex = poseIndex
				pNamePrefix = namePrefix
			end
			
			public func String getBone()
				return pBone
			end
			
			public func int getPoseIndex()
				return pPoseIndex
			end
			
			public func String getNamePrefix()
				return pNamePrefix
			end
			
			public func AnimatorController getControllerPosition()
				return pControllerPosition
			end
			
			public func AnimatorController getControllerOrientation()
				return pControllerOrientation
			end
			
			public func void setControllerPosition(AnimatorController controller)
				pControllerPosition = controller
			end
			
			public func void setControllerOrientation(AnimatorController controller)
				pControllerOrientation = controller
			end
		end
		
		
		
		private var ECBehaviorVRHandPose pECBehavior
		private var ECBehaviorVRHand.Instance pVRHand
		
		private var String pBoneOrigin
		private var Array pBones
		private var Array pAnimateBones
		private var AnimatorInstance pAnimatorInstance
		private var AnimatorController pControllerEnableBones
		
		
		
		/** \brief Create element. */
		public func new(ECBehaviorVRHandPose ecbehavior, BehaviorElement element) super(element)
			pECBehavior = ecbehavior
			pBones = Array.new()
			
			pVRHand = ecbehavior.getVRHand().instance(element)
		end
		
		/** \brief Dispose of composeable instance. */
		public func void dispose()
			pVRHand = null
			
			super.dispose()
		end
		
		
		
		/** \brief Initialize element from stub. */
		public func void init(StubElement stub)
			// add bones
			pBoneOrigin = pECBehavior.getBoneOrigin().getValue(stub)
			
			pBones.add(Bone.new(pECBehavior.getBoneWrist().getValue(stub), InputDeviceHandBone.wrist, "wrist"))
			pBones.add(Bone.new(pECBehavior.getBoneThumb1().getValue(stub), InputDeviceHandBone.thumb0, "thumb1"))
			pBones.add(Bone.new(pECBehavior.getBoneThumb2().getValue(stub), InputDeviceHandBone.thumb1, "thumb2"))
			pBones.add(Bone.new(pECBehavior.getBoneThumb3().getValue(stub), InputDeviceHandBone.thumb2, "thumb3"))
			pBones.add(Bone.new(pECBehavior.getBoneIndex1().getValue(stub), InputDeviceHandBone.index0, "index1"))
			pBones.add(Bone.new(pECBehavior.getBoneIndex2().getValue(stub), InputDeviceHandBone.index1, "index2"))
			pBones.add(Bone.new(pECBehavior.getBoneIndex3().getValue(stub), InputDeviceHandBone.index2, "index3"))
			pBones.add(Bone.new(pECBehavior.getBoneIndex4().getValue(stub), InputDeviceHandBone.index3, "index4"))
			pBones.add(Bone.new(pECBehavior.getBoneMiddle1().getValue(stub), InputDeviceHandBone.middle0, "middle1"))
			pBones.add(Bone.new(pECBehavior.getBoneMiddle2().getValue(stub), InputDeviceHandBone.middle1, "middle2"))
			pBones.add(Bone.new(pECBehavior.getBoneMiddle3().getValue(stub), InputDeviceHandBone.middle2, "middle3"))
			pBones.add(Bone.new(pECBehavior.getBoneMiddle4().getValue(stub), InputDeviceHandBone.middle3, "middle4"))
			pBones.add(Bone.new(pECBehavior.getBoneRing1().getValue(stub), InputDeviceHandBone.ring0, "ring1"))
			pBones.add(Bone.new(pECBehavior.getBoneRing2().getValue(stub), InputDeviceHandBone.ring1, "ring2"))
			pBones.add(Bone.new(pECBehavior.getBoneRing3().getValue(stub), InputDeviceHandBone.ring2, "ring3"))
			pBones.add(Bone.new(pECBehavior.getBoneRing4().getValue(stub), InputDeviceHandBone.ring3, "ring4"))
			pBones.add(Bone.new(pECBehavior.getBonePinky1().getValue(stub), InputDeviceHandBone.pinky0, "pinky1"))
			pBones.add(Bone.new(pECBehavior.getBonePinky2().getValue(stub), InputDeviceHandBone.pinky1, "pinky2"))
			pBones.add(Bone.new(pECBehavior.getBonePinky3().getValue(stub), InputDeviceHandBone.pinky2, "pinky3"))
			pBones.add(Bone.new(pECBehavior.getBonePinky4().getValue(stub), InputDeviceHandBone.pinky3, "pinky4"))
			
			// collect bones to animate
			pAnimateBones = pBones.collect(block Bone each
				return not each.getBone().empty()
			end)
			
			// create animator instance
			var Component component = pVRHand.getComponent().getComponent()
			
			pAnimatorInstance = AnimatorInstance.new()
			pAnimatorInstance.setComponent(component)
			if component != null and component.getRig() != null
				pAnimatorInstance.setAnimator(createAnimator(stub, component))
			end
			
			// get controllers for animate bones
			pAnimateBones.forEach(block int index, Bone bone
				bone.setControllerPosition(pAnimatorInstance.getControllerAt(index * 2))
				bone.setControllerOrientation(pAnimatorInstance.getControllerAt(index * 2 + 1))
			end)
			
			pControllerEnableBones = pAnimatorInstance.getControllerAt(pAnimateBones.getCount() * 2)
		end
		
		/** Create animator. */
		protected func Animator createAnimator(StubElement stub, Component component)
			// create animator
			var Animator animator = Animator.new()
			animator.setRig(component.getRig())
			
			// add bones
			if not pBoneOrigin.empty()
				animator.addBone(pBoneOrigin)
			end
			pAnimateBones.forEach(block Bone each
				animator.addBone(each.getBone())
			end)
			
			// add controllers
			var int controllerCount = pAnimateBones.getCount() * 2
			
			animator.setControllerCount(controllerCount + 1)
			pAnimateBones.forEach(block int index, Bone bone
				var String namePrefix = bone.getNamePrefix()
				animator.getControllerAt(index * 2).setName(namePrefix + " position")
				animator.getControllerAt(index * 2 + 1).setName(namePrefix + " orientation")
			end)
			
			var AnimatorController controller = animator.getControllerAt(controllerCount)
			controller.setName("enable bones")
			controller.setRange(0, 1)
			controller.setClamp(true)
			
			// add links
			var int i
			
			for i = 0 to controllerCount
				animator.addLink(i)
			end
			
			animator.setLinkCurve(animator.addLink(controllerCount), CurveBezier.newDefaultLinear())
			
			// add reset rule
			var ARStateManipulator ruleReset = ARStateManipulator.new()
			if not pBoneOrigin.empty()
				ruleReset.addBone(pBoneOrigin)
			end
			pAnimateBones.forEach(block Bone each
				ruleReset.addBone(each.getBone())
			end)
			animator.addRule(ruleReset)
			
			// add bone rules
			pAnimateBones.forEach(block int index, Bone bone
				var ARInverseKinematic ruleBone = ARInverseKinematic.new()
				ruleBone.setAdjustOrientation(true)
				ruleBone.setAdjustPosition(true)
				ruleBone.addBone(bone.getBone())
				ruleBone.targetAddLink(ARInverseKinematicTarget.goalPosition, index * 2)
				ruleBone.targetAddLink(ARInverseKinematicTarget.goalOrientation, index * 2 + 1)
				ruleBone.targetAddLink(ARInverseKinematicTarget.blendFactor, controllerCount)
				animator.addRule(ruleBone)
			end)
			
			// finished
			return animator
		end
		
		
		
		/** \brief Behavior. */
		public func ECBehaviorVRHandPose getECBehavior()
			return pECBehavior
		end
		
		/** \brief VR Hand behavior instance. */
		public func ECBehaviorVRHand.Instance getVRHand()
			return pVRHand
		end
		
		
		
		/** \brief Update controllers. */
		public func void updateControllers()
			var InputDevice device = pVRHand.getInputDevice()
			
			if device == null\
			or device.getBoneConfiguration() != InputDeviceBoneConfiguration.hand\
			or device.getDeviceBonePoseCount() != 21
				pControllerEnableBones.setValue(0)
				return
			end
			
			pAnimateBones.forEach(block Bone bone
				var int poseIndex = bone.getPoseIndex()
				
				bone.getControllerPosition().setVector(\
					device.getDeviceBonePosePosition(poseIndex, false))
				
				bone.getControllerOrientation().setRotation(\
					device.getDeviceBonePoseOrientation(poseIndex, false).getEulerAngles())
			end)
			pControllerEnableBones.setValue(1)
		end
		
		/** \brief Apply animations. */
		public func void applyAnimations()
			pAnimatorInstance.apply()
		end
	end
	
	
	
	private var ECBehaviorVRHand pVRHand
	private var ECPString pBoneOrigin
	private var ECPString pBoneWrist
	private var ECPString pBoneThumb1
	private var ECPString pBoneThumb2
	private var ECPString pBoneThumb3
	private var ECPString pBoneIndex1
	private var ECPString pBoneIndex2
	private var ECPString pBoneIndex3
	private var ECPString pBoneIndex4
	private var ECPString pBoneMiddle1
	private var ECPString pBoneMiddle2
	private var ECPString pBoneMiddle3
	private var ECPString pBoneMiddle4
	private var ECPString pBoneRing1
	private var ECPString pBoneRing2
	private var ECPString pBoneRing3
	private var ECPString pBoneRing4
	private var ECPString pBonePinky1
	private var ECPString pBonePinky2
	private var ECPString pBonePinky3
	private var ECPString pBonePinky4
	
	
	
	/** \brief Create behavior element class. */
	public func new(BehaviorElementClass eclass, ECBehaviorVRHand vrHand) this(eclass, vrHand, "")
	end
	
	/** \brief Create behavior element class. */
	public func new(BehaviorElementClass eclass, ECBehaviorVRHand vrHand, String id) \
	this(eclass, vrHand, id, id.empty() if "vrHandPose." else "vrHandPose(" + id + ").")
	end
	
	/** \brief Create behavior element class. */
	public func new(BehaviorElementClass eclass, ECBehaviorVRHand vrHand, String id, \
	String prefix) super(eclass, id)
		pVRHand = vrHand
		
		pBoneOrigin = ECPString.new(prefix + "boneOrigin", "origin")
		eclass.addProperty(pBoneOrigin)
		
		pBoneWrist = ECPString.new(prefix + "boneWrist", "wrist")
		eclass.addProperty(pBoneWrist)
		
		// thumb
		pBoneThumb1 = ECPString.new(prefix + "boneThumb1", "thumb1")
		eclass.addProperty(pBoneThumb1)
		
		pBoneThumb2 = ECPString.new(prefix + "boneThumb2", "thumb2")
		eclass.addProperty(pBoneThumb2)
		
		pBoneThumb3 = ECPString.new(prefix + "boneThumb3", "thumb3")
		eclass.addProperty(pBoneThumb3)
		
		// index
		pBoneIndex1 = ECPString.new(prefix + "boneIndex1", "index1")
		eclass.addProperty(pBoneIndex1)
		
		pBoneIndex2 = ECPString.new(prefix + "boneIndex2", "index2")
		eclass.addProperty(pBoneIndex2)
		
		pBoneIndex3 = ECPString.new(prefix + "boneIndex3", "index3")
		eclass.addProperty(pBoneIndex3)
		
		pBoneIndex4 = ECPString.new(prefix + "boneIndex4", "index4")
		eclass.addProperty(pBoneIndex4)
		
		// middle
		pBoneMiddle1 = ECPString.new(prefix + "boneMiddle1", "middle1")
		eclass.addProperty(pBoneMiddle1)
		
		pBoneMiddle2 = ECPString.new(prefix + "boneMiddle2", "middle2")
		eclass.addProperty(pBoneMiddle2)
		
		pBoneMiddle3 = ECPString.new(prefix + "boneMiddle3", "middle3")
		eclass.addProperty(pBoneMiddle3)
		
		pBoneMiddle4 = ECPString.new(prefix + "boneMiddle4", "middle4")
		eclass.addProperty(pBoneMiddle4)
		
		// ring
		pBoneRing1 = ECPString.new(prefix + "boneRing1", "ring1")
		eclass.addProperty(pBoneRing1)
		
		pBoneRing2 = ECPString.new(prefix + "boneRing2", "ring2")
		eclass.addProperty(pBoneRing2)
		
		pBoneRing3 = ECPString.new(prefix + "boneRing3", "ring3")
		eclass.addProperty(pBoneRing3)
		
		pBoneRing4 = ECPString.new(prefix + "boneRing4", "ring4")
		eclass.addProperty(pBoneRing4)
		
		// pinky
		pBonePinky1 = ECPString.new(prefix + "bonePinky1", "pinky1")
		eclass.addProperty(pBonePinky1)
		
		pBonePinky2 = ECPString.new(prefix + "bonePinky2", "pinky2")
		eclass.addProperty(pBonePinky2)
		
		pBonePinky3 = ECPString.new(prefix + "bonePinky3", "pinky3")
		eclass.addProperty(pBonePinky3)
		
		pBonePinky4 = ECPString.new(prefix + "bonePinky4", "pinky4")
		eclass.addProperty(pBonePinky4)
		
		// add to class
		eclass.addBehavior(this)
	end
	
	/** \brief Dispose of behavior. */
	public func void dispose()
		pVRHand = null
		super.dispose()
	end
	
	
	
	/** \brief VR Hand behavior or null. */
	public func ECBehaviorVRHand getVRHand()
		return pVRHand
	end
	
	/** \brief Origin bone name. */
	public func ECPString getBoneOrigin()
		return pBoneOrigin
	end
	
	/** \brief Wrist bone name. */
	public func ECPString getBoneWrist()
		return pBoneWrist
	end
	
	/** \brief Thumb bone name. */
	public func ECPString getBoneThumb1()
		return pBoneThumb1
	end
	
	public func ECPString getBoneThumb2()
		return pBoneThumb2
	end
	
	public func ECPString getBoneThumb3()
		return pBoneThumb3
	end
	
	/** \brief Index bone name. */
	public func ECPString getBoneIndex1()
		return pBoneIndex1
	end
	
	public func ECPString getBoneIndex2()
		return pBoneIndex2
	end
	
	public func ECPString getBoneIndex3()
		return pBoneIndex3
	end
	
	public func ECPString getBoneIndex4()
		return pBoneIndex4
	end
	
	/** \brief Middle bone name. */
	public func ECPString getBoneMiddle1()
		return pBoneMiddle1
	end
	
	public func ECPString getBoneMiddle2()
		return pBoneMiddle2
	end
	
	public func ECPString getBoneMiddle3()
		return pBoneMiddle3
	end
	
	public func ECPString getBoneMiddle4()
		return pBoneMiddle4
	end
	
	/** \brief Ring bone name. */
	public func ECPString getBoneRing1()
		return pBoneRing1
	end
	
	public func ECPString getBoneRing2()
		return pBoneRing2
	end
	
	public func ECPString getBoneRing3()
		return pBoneRing3
	end
	
	public func ECPString getBoneRing4()
		return pBoneRing4
	end
	
	/** \brief Pinky bone name. */
	public func ECPString getBonePinky1()
		return pBonePinky1
	end
	
	public func ECPString getBonePinky2()
		return pBonePinky2
	end
	
	public func ECPString getBonePinky3()
		return pBonePinky3
	end
	
	public func ECPString getBonePinky4()
		return pBonePinky4
	end
	
	
	
	/** \brief Get instance in element from owner element class. */
	public func Instance instance(BehaviorElement element)
		return element.getInstanceAt(getInstanceIndex()) cast Instance
	end
	
	
	
	/**
	 * \brief Get behavior in element class or \em null if absent.
	 * 
	 * Use this method to check if a particular BehaviorElementClass contains a behavior
	 * of type ECBehaviorVRHandPose.
	 */
	static public func ECBehaviorVRHandPose getBehaviorIn(BehaviorElementClass eclass)
		return eclass.findBehavior(block ECBehaviorVRHandPose each
			return true
		end) cast ECBehaviorVRHandPose
	end
	
	/**
	 * \brief Get behavior with id in element class or \em null if absent.
	 * 
	 * Use this method to check if a particular BehaviorElementClass contains a behavior
	 * of type ECBehaviorVRHandPose with specific identifier.
	 */
	static public func ECBehaviorVRHandPose getBehaviorIn(BehaviorElementClass eclass, String id)
		return eclass.findBehavior(block ECBehaviorVRHandPose each
			return each.getID().equals(id)
		end) cast ECBehaviorVRHandPose
	end
	
	/**
	 * \brief Get list of all behaviors in element.
	 * 
	 * Returns list contains ECBehaviorVRHandPose behaviors in the order they have
	 * been created in the element.
	 */
	static public func Array getAllBehaviorsIn(BehaviorElementClass eclass)
		return eclass.collectBehaviors(block ECBehaviorVRHandPose each
			return true
		end)
	end
	
	
	
	/**
	 * \brief Get instance in element or \em null if absent.
	 * 
	 * Use this method to check if a particular BehaviorElement contains a behavior instance
	 * of type ECBehaviorVRHandPose.Instance .
	 */
	static public func Instance getInstanceIn(BehaviorElement element)
		return element.findInstance(block Instance each
			return true
		end) cast Instance
	end
	
	/**
	 * \brief Get instance with id in element or \em null if absent.
	 * 
	 * Use this method to check if a particular BehaviorElement contains a behavior instance
	 * of type ECBehaviorRenderableCamera.Instance with specific identifier.
	 */
	static public func Instance getInstanceIn(BehaviorElement element, String id)
		return element.findInstance(block Instance each
			return each.getECBehavior().getID().equals(id)
		end) cast Instance
	end
	
	/**
	 * \brief Get list of all instances in element.
	 * 
	 * Returns list contains ECBehaviorRenderableCamera.Instance instances in the order they have
	 * been created in the element.
	 */
	static public func Array getAllInstancesIn(BehaviorElement element)
		return element.collectInstances(block Instance each
			return true
		end)
	end
	
	
	
	/** \brief Create Behavior instance. */
	public func ECBehaviorInstance createInstance(BehaviorElement element)
		return Instance.new(this, element)
	end
end
