/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */


namespace Dragengine.Scenery

pin Dragengine.Gui
pin Dragengine.LoadSave
pin Dragengine.Preloading
pin Dragengine.Scenery
pin Dragengine.Utils
pin Dragengine.BehaviorTreeSystem


/**
 * \brief Behavior adding support to VR hand action to control desktops.
 * \version 1.12
 * 
 * To be used with BaseVRHandAction subclasses. Tracks ECBehaviorVRHandPointAt. If an element
 * is pointed at that supports ECBehaviorControlDesktop moves the mouse pointer and uses
 * trigger pulling to simulate mouse click. Each hand can individually interact with different
 * ECBehaviorControlDesktop. Hand action has to call pointAt(), pointAtPull() and
 * pointAtRelease() to interact.
 * 
 * Requires these behaviors:
 * - ECBehaviorVRHandPointAt: VR hand to track.
 * 
 * Element class property prefix is "vrControlDesktop." or "vrControlDesktop(id).".
 * 
 * Example usage:
 * 
 * \code{.ds}
 * class MyHandAction extends BaseVRHandAction implements BAAVRTriggerInput
 *    protected var ECBehaviorVRControlDesktop.Instance controlDesktop
 *    
 *    // Create action.
 *    func new()
 *    end
 *    
 *    // Init behaviors. This stores aside the behavior matching the VR hand this action belongs to.
 *    protected func void initBehaviors()
 *       super.initBehaviors()
 *       
 *       if vrHand.getECBehavior().getID().equals(BaseVRActorClass.idVRRightHand)
 *          controlDesktop = ECBehaviorVRControlDesktop.getInstanceIn(actor, BaseVRActorClass.idVRRightHand)
 *       else
 *          controlDesktop = ECBehaviorVRControlDesktop.getInstanceIn(actor, BaseVRActorClass.idVRLeftHand)
 *       end
 *    end
 *    
 *    // Activate hand behavior. Enable hand point at to enable controlling desktops.
 *    func void activate(BehaviorElement actor, ECBehaviorVRHand.Instance vrHand)
 *       super.activate(actor, vrHand)
 *       
 *       handPointAt.setEnabled(true)
 *    end
 *    
 *    // Deactivate hand behavior. Disable hand point at and stop interacting with desktop.
 *    // Do not stop interacting here if you want to switch to another action that should
 *    // keep on using the desktop.
 *    func void deactivate()
 *       controlDesktop.pointAtRelease()
 *       handPointAt.setEnabled(false)
 *       
 *       super.deactivate()
 *    end
 *    
 *    // Frame update. Interact with control desktop if pointed at. The if check allows
 *    // to test various possible interactions stopping at the first one that works.
 *    // Make sure super.think(elapsed) is alway called even if exiting early
 *    func void think(float elapsed)
 *       if controlDesktop.pointAt()
 *          super.think(elapsed)
 *          return
 *       end
 *       
 *       // Here you could test for other possible interactions
 *       
 *       super.think(elapsed)
 *    end
 *    
 *    // Events by BAAVRTriggerInput we do not use for this example but have to be declared.
 *    func void triggerTouch()
 *    end
 *    
 *    func void triggerUntouch()
 *    end
 *    
 *    func void triggerAnalog(float value)
 *    end
 *    
 *    // Trigger is pulled. Sends left mouse press to desktop if one is controlled.
 *    // The if check allows to test various possible interactions stopping at the
 *    // first one that works.
 *    func void triggerPull()
 *       if controlDesktop.pointAtPull()
 *          return
 *       end
 *       
 *       // Here you could test for other possible interactions
 *    end
 *    
 *    // Trigger has been released. Sends left mouse release to desktop if one is
 *    // controlled. // The if check allows to test various possible interactions
 *    // stopping at the first one that works.
 *    func void triggerRelease()
 *       if controlDesktop.pointAtRelease()
 *          return
 *       end
 *    end
 * end
 * \endcode
 * 
 * \see https://developer.dragondreams.ch/wiki/doku.php/dragengine:modules:dragonscript:behavior_vrcontroldesktop
 */
class ECBehaviorVRControlDesktop extends DefaultECBehavior
	/**
	 * \brief Behavior factory.
	 * \version 1.25
	 * 
	 * Automatically assigns these behaviors if present before adding:
	 * - Required: \ref ECBehaviorVRHandPointAt
	 * 
	 * Example XML element class:
	 * \code{.xml}
	 * <behavior type='ECBehaviorVRControlDesktop'>
	 *   <!-- optional: add behavior trees. default adds all behavior trees. -->
	 *   <list name='behaviorTrees'>
	 *     <string/> <!-- add behavior with empty identifier -->
	 *     <string>default</string> <!-- add behavior with 'default' identifier -->
	 *   </list>
	 * 
	 *   <!-- optional: add state machines. default adds all state machines. -->
	 *   <list name='stateMachines'>
	 *     <string/> <!-- add behavior with empty identifier -->
	 *     <string>default</string> <!-- add behavior with 'default' identifier -->
	 *   </list>
	 *   
	 *   <!-- required: use vr hand point at with id -->
	 *   <string name='vrHandPointAt'>right</string>
	 * </behavior>
	 * 
	 * <!-- for adding multiple behaviors use unique identifiers -->
	 * <behavior type='ECBehaviorVRControlDesktop' id='second'>
	 *   ...
	 * </behavior>
	 * \endcode
	 * 
	 * Element class properties added by the behavior can also be set directly inside the tag
	 * be removing the property name prefix and starting with a "." (for example ".propertyName").
	 */
	class Factory implements BehaviorFactory
		func new()
		end
		
		func String factoryId()
			return "ECBehaviorVRControlDesktop"
		end
		
		func ECBehavior addBehavior(BehaviorElementClass eclass, String id, Dictionary parameters)
			var ECBehaviorVRControlDesktop behavior = ECBehaviorVRControlDesktop.new(eclass,\
				ECBehaviorVRHandPointAt.getBehaviorIn(eclass,\
					parameters.getAt("vrHandPointAt") cast String), id)
			
			eclass.sharedFactoryHelper.allBTSM(behavior.getBTSMs(), eclass, parameters)
			
			eclass.sharedFactoryHelper.setPropertiesFromParameters(\
				eclass, parameters, "vrControlDesktop", id)
			return behavior
		end
	end
	
	/** \brief Behavior instance. */
	class Instance extends DefaultECBehaviorInstance
		/**
		 * \brief Behavior tree action "vrControlDesktop{(id)}.update".
		 * \version 1.26
		 */
		private class BTAUpdate extends BTSMActionCondition
			var Instance pInstance
			
			func new(Instance instance)
				pInstance = instance
			end
			
			func BTResult runActionShared(Object context, Dictionary parameters)
				var Object value
				
				value = parameters.getAt("interactElement.assign", null)
				if value != null
					if pInstance.getControlDesktop() == null
						return BTResult.failure
					end
					
					var ECBehaviorInteractionElement.Instance interactionElement =\
						ECBehaviorInteractionElement.getInstanceIn(pInstance.getElement(), value cast String)
					if interactionElement == null
						return BTResult.failure
					end
					
					interactionElement.setInteractionBehavior(pInstance.getControlDesktop())
				end
				
				value = parameters.getAt("interact", null)
				if value != null
					if not ECBehaviorInteraction.checkInteraction(pInstance.getControlDesktop(),\
					value cast String, parameters.getAt("interact.parameters", null) cast String,\
					pInstance.getElement())
						return BTResult.failure
					end
				end
				
				return BTResult.success
			end
		end
		
		/**
		 * \brief Behavior tree action/condition "vrControlDesktop{(id)}.check".
		 * \version 1.26
		 */
		private class BTACheck extends BTSMActionCondition
			var Instance pInstance
			var String pPrefix
			
			func new(Instance instance, String prefix)
				pInstance = instance
				pPrefix = prefix
			end
			
			func BTResult runActionShared(Object context, Dictionary parameters)
				return check("", parameters) if BTResult.success\
					else (parameters.has("wait") if BTResult.running else BTResult.failure)
			end
			
			func bool evaluateConditionShared(Object context, Dictionary parameters)
				return check(pPrefix, parameters)
			end
			
			func bool check(String prefix, Dictionary parameters)
				var bool result = true
				var Object value
				
				value = parameters.getAt(prefix + "desktop", null)
				if value != null
					result &= (pInstance.getControlDesktop() != null) == value.equals("true")
				end
				
				result &= ECBehaviorInteraction.checkInteractionBTSM(\
					pInstance.getControlDesktop(), parameters, prefix + "interact.",\
					pInstance.getElement())
				
				return result
			end
		end
		
		
		var ECBehaviorVRControlDesktop pECBehavior
		var ECBehaviorVRHandPointAt.Instance pPointAt
		var ECBehaviorControlDesktop.Instance pControlDesktop
		var bool pTriggerPulled
		
		
		
		/** \brief Create behavior instance. */
		func new(ECBehaviorVRControlDesktop ecbehavior, BehaviorElement element) super(element)
			pECBehavior = ecbehavior
			pPointAt = ecbehavior.getPointAt().instance(element)
		end
		
		/** \brief Dispose of behavior instance. */
		func void dispose()
			pControlDesktop = null
			pPointAt = null
			super.dispose()
		end
		
		func void init(StubElement stub)
			if pECBehavior.getBTSMs().hasAny()
				var String prefix = pECBehavior.getPrefix()
				var ECComposeBTSM.Instance btsms = ECComposeBTSM.Instance.new(getElement(), pECBehavior.getBTSMs())
				btsms.addAllAction(prefix, "update", BTAUpdate.new(this))
				btsms.addAllActionCondition(prefix, "check", BTACheck.new(this, prefix))
			end
		end
		
		
		
		/** \brief Behavior instance VR Hand Point At. */
		func ECBehaviorVRHandPointAt.Instance getPointAt()
			return pPointAt
		end
		
		
		
		/** \brief Behavior. */
		func ECBehaviorVRControlDesktop getECBehavior()
			return pECBehavior
		end
		
		/** \brief Desktop currently controlled or null. */
		func ECBehaviorControlDesktop.Instance getControlDesktop()
			return pControlDesktop
		end
		
		/** \brief Trigger is pulled. */
		func bool getTriggerPulled()
			return pTriggerPulled
		end
		
		
		
		/**
		 * \brief Process pointing at element if present.
		 * 
		 * Call this from BaseVRHandAction during think(). If pointing at an element with
		 * ECBehaviorVRControlDesktop support moves the mouse.
		 * 
		 * \returns true if mouse pointer has been moved. In this case caller should not
		 *          process other possible interactions.
		 */
		func bool pointAt()
			var DVector hitPoint = pPointAt.getPointAtHitPoint()
			
			if pControlDesktop != null
				if pTriggerPulled
					pControlDesktop.moveMouseRay(pPointAt.getPointAtOrigin(), pPointAt.getPointAtDirection())
					return true
					
				elif (hitPoint != null and pControlDesktop.moveMouse(hitPoint))
					return true
					
				else
					pControlDesktop = null
					return false
				end
			end
			
			if hitPoint != null
				var BehaviorElement element = pPointAt.getPointAtBehaviorElement()
				if element != null and not element.isDisposed()
					pControlDesktop = element.findInstance(block ECBehaviorControlDesktop.Instance each
							return each.moveMouse(hitPoint)
						end) cast ECBehaviorControlDesktop.Instance
				end
			end
			
			return pControlDesktop != null
		end
		
		/**
		 * \brief Pull trigger on pointed at element.
		 * 
		 * Call this from BaseVRHandAction if trigger is pulled.
		 * 
		 * \returns true if a left mouse button press has been simulated.  In this case
		 *          caller should not process other possible interactions.
		 */
		func bool pointAtPull()
			if not pointAt()
				return false
			end
			
			pControlDesktop.leftMousePress()
			pTriggerPulled = true
			return true
		end
		
		/**
		 * \brief Release trigger on pointed at element.
		 * 
		 * Call this from BaseVRHandAction if trigger is released.
		 * 
		 * \returns true if a left mouse button release has been simulated.  In this case
		 *          caller should not process other possible interactions.
		 */
		func bool pointAtRelease()
			if pControlDesktop == null
				return false
			end
			
			pControlDesktop.leftMouseRelease()
			
			pControlDesktop = null
			pTriggerPulled = false
			return true
		end
		
		/**
		 * \brief Trigger pointAtRelease if tracking a control desktop.
		 */
		func void cancel()
			pointAtRelease()
		end
	end
	
	
	
	var ECBehaviorVRHandPointAt pPointAt
	var ECComposeBTSM pBTSMs
	var String pPrefix
	
	
	
	/** \brief Create behavior element class. */
	func new(BehaviorElementClass eclass, ECBehaviorVRHandPointAt pointAt)\
	this(eclass, pointAt, "")
	end
	
	/** \brief Create behavior element class. */
	func new(BehaviorElementClass eclass, ECBehaviorVRHandPointAt pointAt, String id) \
	this(eclass, pointAt, id, id.empty() if "vrControlDesktop." else "vrControlDesktop(" + id + ").")
	end
	
	/** \brief Create behavior element class. */
	func new(BehaviorElementClass eclass, ECBehaviorVRHandPointAt pointAt, String id, \
	String prefix) super(eclass, id)
		if pointAt == null
			throw ENullPointer.new("pointAt")
		end
		
		pPrefix = prefix
		pPointAt = pointAt
		pBTSMs = ECComposeBTSM.new(eclass, prefix)
		
		eclass.addBehavior(this)
	end
	
	/** \brief Dispose of behavior. */
	func void dispose()
		pPointAt = null
		pBTSMs = null
		super.dispose()
	end
	
	
	
	/**
	 * \brief Prefix.
	 * \version 1.26
	 */
	func String getPrefix()
		return pPrefix
	end
	
	/** \brief VR Hand point at behavior or null. */
	func ECBehaviorVRHandPointAt getPointAt()
		return pPointAt
	end
	
	/**
	 * \brief Compose behavior trees and state machines.
	 * \version 1.26
	 */
	func ECComposeBTSM getBTSMs()
		return pBTSMs
	end
	
	
	
	/** \brief Get instance in element from owner element class. */
	func Instance instance(BehaviorElement element)
		return element.getInstanceAt(getInstanceIndex()) cast Instance
	end
	
	
	
	/**
	 * \brief Get behavior in element class or \em null if absent.
	 * 
	 * Use this method to check if a particular BehaviorElementClass contains a behavior
	 * of type ECBehaviorVRControlDesktop.
	 */
	static func ECBehaviorVRControlDesktop getBehaviorIn(BehaviorElementClass eclass)
		return eclass.findBehavior(block ECBehaviorVRControlDesktop each
			return true
		end) cast ECBehaviorVRControlDesktop
	end
	
	/**
	 * \brief Get behavior with id in element class or \em null if absent.
	 * 
	 * Use this method to check if a particular BehaviorElementClass contains a behavior
	 * of type ECBehaviorVRControlDesktop with specific identifier.
	 */
	static func ECBehaviorVRControlDesktop getBehaviorIn(BehaviorElementClass eclass, String id)
		return eclass.findBehavior(block ECBehaviorVRControlDesktop each
			return each.getID().equals(id)
		end) cast ECBehaviorVRControlDesktop
	end
	
	/**
	 * \brief Get list of all behaviors in element.
	 * 
	 * Returns list contains ECBehaviorVRControlDesktop behaviors in the order they have
	 * been created in the element.
	 */
	static func Array getAllBehaviorsIn(BehaviorElementClass eclass)
		return eclass.collectBehaviors(block ECBehaviorVRControlDesktop each
			return true
		end)
	end
	
	
	
	/**
	 * \brief Get instance in element or \em null if absent.
	 * 
	 * Use this method to check if a particular BehaviorElement contains a behavior instance
	 * of type ECBehaviorVRControlDesktop.Instance .
	 */
	static func Instance getInstanceIn(BehaviorElement element)
		return element.findInstance(block Instance each
			return true
		end) cast Instance
	end
	
	/**
	 * \brief Get instance with id in element or \em null if absent.
	 * 
	 * Use this method to check if a particular BehaviorElement contains a behavior instance
	 * of type ECBehaviorRenderableCamera.Instance with specific identifier.
	 */
	static func Instance getInstanceIn(BehaviorElement element, String id)
		return element.findInstance(block Instance each
			return each.getECBehavior().getID().equals(id)
		end) cast Instance
	end
	
	/**
	 * \brief Get list of all instances in element.
	 * 
	 * Returns list contains ECBehaviorRenderableCamera.Instance instances in the order they have
	 * been created in the element.
	 */
	static func Array getAllInstancesIn(BehaviorElement element)
		return element.collectInstances(block Instance each
			return true
		end)
	end
	
	
	
	/** \brief Create Behavior instance. */
	func ECBehaviorInstance createInstance(BehaviorElement element)
		return Instance.new(this, element)
	end
end
