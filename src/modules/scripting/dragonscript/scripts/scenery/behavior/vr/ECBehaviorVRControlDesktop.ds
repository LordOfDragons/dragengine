/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */


namespace Dragengine.Scenery

pin Dragengine.Gui
pin Dragengine.LoadSave
pin Dragengine.Preloading
pin Dragengine.Scenery
pin Dragengine.Utils


/**
 * \brief Behavior adding support to VR hand action to control desktops.
 * \version 1.12
 * 
 * To be used with BaseVRHandAction subclasses. Tracks ECBehaviorVRHandPointAt. If an element
 * is pointed at that supports ECBehaviorControlDesktop moves the mouse pointer and uses
 * trigger pulling to simulate mouse click. Each hand can individually interact with different
 * ECBehaviorControlDesktop. Hand action has to call pointAt(), pointAtPull() and
 * pointAtRelease() to interact.
 * 
 * Requires these behaviors:
 * - ECBehaviorVRHandPointAt: VR hand to track.
 * 
 * Element class property prefix is "vrControlDesktop." or "vrControlDesktop(id).".
 * 
 * Example usage:
 * 
 * \code{.ds}
 * class MyHandAction extends BaseVRHandAction implements BAAVRTriggerInput
 *    protected var ECBehaviorVRControlDesktop.Instance controlDesktop
 *    
 *    // Create action.
 *    public func new()
 *    end
 *    
 *    // Init behaviors. This stores aside the behavior matching the VR hand this action belongs to.
 *    protected func void initBehaviors()
 *       super.initBehaviors()
 *       
 *       if vrHand.getECBehavior().getID().equals(BaseVRActorClass.idVRRightHand)
 *          controlDesktop = ECBehaviorVRControlDesktop.getInstanceIn(actor, BaseVRActorClass.idVRRightHand)
 *       else
 *          controlDesktop = ECBehaviorVRControlDesktop.getInstanceIn(actor, BaseVRActorClass.idVRLeftHand)
 *       end
 *    end
 *    
 *    // Activate hand behavior. Enable hand point at to enable controlling desktops.
 *    public func void activate(BehaviorElement actor, ECBehaviorVRHand.Instance vrHand)
 *       super.activate(actor, vrHand)
 *       
 *       handPointAt.setEnabled(true)
 *    end
 *    
 *    // Deactivate hand behavior. Disable hand point at and stop interacting with desktop.
 *    // Do not stop interacting here if you want to switch to another action that should
 *    // keep on using the desktop.
 *    public func void deactivate()
 *       controlDesktop.pointAtRelease()
 *       handPointAt.setEnabled(false)
 *       
 *       super.deactivate()
 *    end
 *    
 *    // Frame update. Interact with control desktop if pointed at. The if check allows
 *    // to test various possible interactions stopping at the first one that works.
 *    // Make sure super.think(elapsed) is alway called even if exiting early
 *    public func void think(float elapsed)
 *       if controlDesktop.pointAt()
 *          super.think(elapsed)
 *          return
 *       end
 *       
 *       // Here you could test for other possible interactions
 *       
 *       super.think(elapsed)
 *    end
 *    
 *    // Events by BAAVRTriggerInput we do not use for this example but have to be declared.
 *    public func void triggerTouch()
 *    end
 *    
 *    public func void triggerUntouch()
 *    end
 *    
 *    public func void triggerAnalog(float value)
 *    end
 *    
 *    // Trigger is pulled. Sends left mouse press to desktop if one is controlled.
 *    // The if check allows to test various possible interactions stopping at the
 *    // first one that works.
 *    public func void triggerPull()
 *       if controlDesktop.pointAtPull()
 *          return
 *       end
 *       
 *       // Here you could test for other possible interactions
 *    end
 *    
 *    // Trigger has been released. Sends left mouse release to desktop if one is
 *    // controlled. // The if check allows to test various possible interactions
 *    // stopping at the first one that works.
 *    public func void triggerRelease()
 *       if controlDesktop.pointAtRelease()
 *          return
 *       end
 *    end
 * end
 * \endcode
 * 
 * \see https://developer.dragondreams.ch/wiki/doku.php/dragengine:modules:dragonscript:behavior_vrcontroldesktop
 */
class ECBehaviorVRControlDesktop extends DefaultECBehavior
	/**
	 * \brief Behavior factory.
	 * \version 1.25
	 * 
	 * Automatically assigns these behaviors if present before adding:
	 * - Required: \ref ECBehaviorVRHandPointAt
	 * 
	 * Example XML element class:
	 * \code{.xml}
	 * <behavior type='ECBehaviorVRControlDesktop'>
	 *   <!-- required: use vr hand point at with id -->
	 *   <string name='vrHandPointAt'>right</string>
	 * </behavior>
	 * 
	 * <!-- for adding multiple behaviors use unique identifiers -->
	 * <behavior type='ECBehaviorVRControlDesktop' id='second'>
	 *   ...
	 * </behavior>
	 * \endcode
	 * 
	 * Element class properties added by the behavior can also be set directly inside the tag
	 * be removing the property name prefix and starting with a "." (for exampler ".propertyName").
	 */
	class Factory implements BehaviorFactory
		func new()
		end
		
		func String factoryId()
			return "ECBehaviorVRControlDesktop"
		end
		
		func ECBehavior addBehavior(BehaviorElementClass eclass, String id, Dictionary parameters)
			var ECBehaviorVRControlDesktop behavior = ECBehaviorVRControlDesktop.new(eclass,\
				ECBehaviorVRHandPointAt.getBehaviorIn(eclass,\
					parameters.getAt("vrHandPointAt") cast String), id)
			BehaviorElementClass.sharedFactoryHelper.setPropertiesFromParameters(\
				eclass, parameters, "vrControlDesktop", id)
			return behavior
		end
	end
	
	/** \brief Behavior instance. */
	class Instance extends DefaultECBehaviorInstance
		private var ECBehaviorVRControlDesktop pECBehavior
		private var ECBehaviorVRHandPointAt.Instance pPointAt
		private var ECBehaviorControlDesktop.Instance pControlDesktop
		private var bool pTriggerPulled
		
		
		
		/** \brief Create behavior instance. */
		public func new(ECBehaviorVRControlDesktop ecbehavior, BehaviorElement element) super(element)
			pECBehavior = ecbehavior
			pPointAt = ecbehavior.getPointAt().instance(element)
		end
		
		/** \brief Dispose of behavior instance. */
		public func void dispose()
			pControlDesktop = null
			pPointAt = null
			super.dispose()
		end
		
		
		
		/** \brief Behavior instance VR Hand Point At. */
		public func ECBehaviorVRHandPointAt.Instance getPointAt()
			return pPointAt
		end
		
		
		
		/** \brief Behavior. */
		public func ECBehaviorVRControlDesktop getECBehavior()
			return pECBehavior
		end
		
		/** \brief Desktop currently controlled or null. */
		public func ECBehaviorControlDesktop.Instance getControlDesktop()
			return pControlDesktop
		end
		
		/** \brief Trigger is pulled. */
		public func bool getTriggerPulled()
			return pTriggerPulled
		end
		
		
		
		/**
		 * \brief Process pointing at element if present.
		 * 
		 * Call this from BaseVRHandAction during think(). If pointing at an element with
		 * ECBehaviorVRControlDesktop support moves the mouse.
		 * 
		 * \returns true if mouse pointer has been moved. In this case caller should not
		 *          process other possible interactions.
		 */
		public func bool pointAt()
			var DVector hitPoint = pPointAt.getPointAtHitPoint()
			
			if pControlDesktop != null
				if pTriggerPulled
					pControlDesktop.moveMouseRay(pPointAt.getPointAtOrigin(), pPointAt.getPointAtDirection())
					return true
					
				elif (hitPoint != null and pControlDesktop.moveMouse(hitPoint))
					return true
					
				else
					pControlDesktop = null
					return false
				end
			end
			
			if hitPoint != null
				var BehaviorElement element = pPointAt.getPointAtBehaviorElement()
				if element != null and not element.isDisposed()
					pControlDesktop = element.findInstance(block ECBehaviorControlDesktop.Instance each
							return each.moveMouse(hitPoint)
						end) cast ECBehaviorControlDesktop.Instance
				end
			end
			
			return pControlDesktop != null
		end
		
		/**
		 * \brief Pull trigger on pointed at element.
		 * 
		 * Call this from BaseVRHandAction if trigger is pulled.
		 * 
		 * \returns true if a left mouse button press has been simulated.  In this case
		 *          caller should not process other possible interactions.
		 */
		public func bool pointAtPull()
			if not pointAt()
				return false
			end
			
			pControlDesktop.leftMousePress()
			pTriggerPulled = true
			return true
		end
		
		/**
		 * \brief Release trigger on pointed at element.
		 * 
		 * Call this from BaseVRHandAction if trigger is released.
		 * 
		 * \returns true if a left mouse button release has been simulated.  In this case
		 *          caller should not process other possible interactions.
		 */
		public func bool pointAtRelease()
			if pControlDesktop == null
				return false
			end
			
			pControlDesktop.leftMouseRelease()
			
			pControlDesktop = null
			pTriggerPulled = false
			return true
		end
		
		/**
		 * \brief Trigger pointAtRelease if tracking a control desktop.
		 */
		public func void cancel()
			pointAtRelease()
		end
	end
	
	
	
	private var ECBehaviorVRHandPointAt pPointAt
	
	
	
	/** \brief Create behavior element class. */
	public func new(BehaviorElementClass eclass, ECBehaviorVRHandPointAt pointAt)\
	this(eclass, pointAt, "")
	end
	
	/** \brief Create behavior element class. */
	public func new(BehaviorElementClass eclass, ECBehaviorVRHandPointAt pointAt, String id) \
	this(eclass, pointAt, id, id.empty() if "vrControlDesktop." else "vrControlDesktop(" + id + ").")
	end
	
	/** \brief Create behavior element class. */
	public func new(BehaviorElementClass eclass, ECBehaviorVRHandPointAt pointAt, String id, \
	String prefix) super(eclass, id)
		if pointAt == null
			throw ENullPointer.new("pointAt")
		end
		
		pPointAt = pointAt
		
		eclass.addBehavior(this)
	end
	
	/** \brief Dispose of behavior. */
	public func void dispose()
		pPointAt = null
		super.dispose()
	end
	
	
	
	/** \brief VR Hand point at behavior or null. */
	public func ECBehaviorVRHandPointAt getPointAt()
		return pPointAt
	end
	
	
	
	/** \brief Get instance in element from owner element class. */
	public func Instance instance(BehaviorElement element)
		return element.getInstanceAt(getInstanceIndex()) cast Instance
	end
	
	
	
	/**
	 * \brief Get behavior in element class or \em null if absent.
	 * 
	 * Use this method to check if a particular BehaviorElementClass contains a behavior
	 * of type ECBehaviorVRControlDesktop.
	 */
	static public func ECBehaviorVRControlDesktop getBehaviorIn(BehaviorElementClass eclass)
		return eclass.findBehavior(block ECBehaviorVRControlDesktop each
			return true
		end) cast ECBehaviorVRControlDesktop
	end
	
	/**
	 * \brief Get behavior with id in element class or \em null if absent.
	 * 
	 * Use this method to check if a particular BehaviorElementClass contains a behavior
	 * of type ECBehaviorVRControlDesktop with specific identifier.
	 */
	static public func ECBehaviorVRControlDesktop getBehaviorIn(BehaviorElementClass eclass, String id)
		return eclass.findBehavior(block ECBehaviorVRControlDesktop each
			return each.getID().equals(id)
		end) cast ECBehaviorVRControlDesktop
	end
	
	/**
	 * \brief Get list of all behaviors in element.
	 * 
	 * Returns list contains ECBehaviorVRControlDesktop behaviors in the order they have
	 * been created in the element.
	 */
	static public func Array getAllBehaviorsIn(BehaviorElementClass eclass)
		return eclass.collectBehaviors(block ECBehaviorVRControlDesktop each
			return true
		end)
	end
	
	
	
	/**
	 * \brief Get instance in element or \em null if absent.
	 * 
	 * Use this method to check if a particular BehaviorElement contains a behavior instance
	 * of type ECBehaviorVRControlDesktop.Instance .
	 */
	static public func Instance getInstanceIn(BehaviorElement element)
		return element.findInstance(block Instance each
			return true
		end) cast Instance
	end
	
	/**
	 * \brief Get instance with id in element or \em null if absent.
	 * 
	 * Use this method to check if a particular BehaviorElement contains a behavior instance
	 * of type ECBehaviorRenderableCamera.Instance with specific identifier.
	 */
	static public func Instance getInstanceIn(BehaviorElement element, String id)
		return element.findInstance(block Instance each
			return each.getECBehavior().getID().equals(id)
		end) cast Instance
	end
	
	/**
	 * \brief Get list of all instances in element.
	 * 
	 * Returns list contains ECBehaviorRenderableCamera.Instance instances in the order they have
	 * been created in the element.
	 */
	static public func Array getAllInstancesIn(BehaviorElement element)
		return element.collectInstances(block Instance each
			return true
		end)
	end
	
	
	
	/** \brief Create Behavior instance. */
	public func ECBehaviorInstance createInstance(BehaviorElement element)
		return Instance.new(this, element)
	end
end
