/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */


namespace Dragengine.Scenery

pin Dragengine.Commands
pin Dragengine.Gui
pin Dragengine.LoadSave
pin Dragengine.Preloading
pin Dragengine.Utils
pin Dragengine.BehaviorTreeSystem


/**
 * \brief Behavior element behavior adding VR HMD support to actor.
 * \version 1.6
 * 
 * This behavior tracks the HMD.
 * 
 * This behavior can be present only once.
 * 
 * This behavior does not require persistable element class (setPersistable).
 * 
 * \see https://developer.dragondreams.ch/wiki/doku.php/dragengine:modules:dragonscript:behavior_vrhmd
 */
class ECBehaviorVRHMD extends DefaultECBehavior
	/** \brief Listener for behavior instance events. */
	interface Listener
		/** \brief HMD attached and ready to use. */
		func void hmdAttached(Instance instance)
		
		/** \brief HMD detached and no more usable. */
		func void hmdDetached(Instance instance)
	end
	
	/** \brief Default implementation of behavior instance listener. */
	class DefaultListener implements Listener
		/** \brief Create default listener. */
		func new()
		end
		
		/** \brief HMD attached and ready to use. */
		func void hmdAttached(Instance instance)
		end
		
		/** \brief HMD detached and no more usableuse. */
		func void hmdDetached(Instance instance)
		end
	end
	
	/** \brief Factory creating listeners. */
	interface ListenerFactory
		/** \brief Create listener. */
		func Listener createListener(Instance instance)
	end
	
	/** \brief Factory creating listeners using block. */
	class BlockListenerFactory implements ListenerFactory
		var Block pBlock
		
		/** \brief Create factory using block receiving Instance as parameter returning Listener. */
		func new(Block blockFactory)
			if blockFactory == null
				throw ENullPointer.new()
			end
			pBlock = blockFactory
		end
		
		/** \brief Create listener. */
		func Listener createListener(Instance instance)
			return pBlock.run(instance) cast Listener
		end
	end
	
	/**
	 * \brief Behavior factory.
	 * \version 1.25
	 * 
	 * Automatically assigns these behaviors if present before adding:
	 * - Required: \ref ECBehaviorVRPlayspace
	 * 
	 * Example XML element class:
	 * \code{.xml}
	 * <behavior type='ECBehaviorVRHMD'>
	 *   <!-- optional: use BaseGameApp binding manager. game can add more supported values -->
	 *   <string name='bindingManager'>default</string>
	 *   
	 *   <!-- optional: add behavior trees. default adds all behavior trees. -->
	 *   <list name='behaviorTrees'>
	 *     <string/> <!-- add behavior with empty identifier -->
	 *     <string>default</string> <!-- add behavior with 'default' identifier -->
	 *   </list>
	 * 
	 *   <!-- optional: add state machines. default adds all state machines. -->
	 *   <list name='stateMachines'>
	 *     <string/> <!-- add behavior with empty identifier -->
	 *     <string>default</string> <!-- add behavior with 'default' identifier -->
	 *   </list>
	 * </behavior>
	 * 
	 * <!-- for adding multiple behaviors use unique identifiers -->
	 * <behavior type='ECBehaviorVRHMD' id='second'>
	 *   ...
	 * </behavior>
	 * \endcode
	 * 
	 * Element class properties added by the behavior can also be set directly inside the tag
	 * be removing the property name prefix and starting with a "." (for example ".propertyName").
	 */
	class Factory implements BehaviorFactory
		func new()
		end
		
		func String factoryId()
			return "ECBehaviorVRHMD"
		end
		
		func ECBehavior addBehavior(BehaviorElementClass eclass, String id, Dictionary parameters)
			if not id.empty()
				throw EInvalidParam.new("id is not empty string")
			end
			var ECBehaviorVRHMD behavior = ECBehaviorVRHMD.new(eclass,\
				ECBehaviorVRPlayspace.getBehaviorIn(eclass),\
				getBindingManagerFor(parameters.getAt("bindingManager", "default") cast String))
			
			eclass.sharedFactoryHelper.allBTSM(behavior.getBTSMs(), eclass, parameters)
			
			eclass.sharedFactoryHelper.setPropertiesFromParameters(eclass, parameters, "vrhmd")
			return behavior
		end
		
		/**
		 * \brief Binding manager matching value.
		 * 
		 * Default implementation returns \ref BaseGameApp#getBindingManager() for value 'default'
		 * and null for all other values. Overwrite to accept other values.
		 */
		func BindingManager getBindingManagerFor(String value)
			return BehaviorElementClass.sharedFactoryHelper.bindingManager(value)
		end
	end
	
	
	
	/** \brief Behavior instance. */
	class Instance extends DefaultECBehaviorInstance
		/**
		 * \brief Behavior tree action/condition "forceField{(id)}.check".
		 * \version 1.26
		 */
		private class BTACheck extends BTSMActionCondition
			var Instance pInstance
			var String pPrefix
			
			func new(Instance instance, String prefix)
				pInstance = instance
				pPrefix = prefix
			end
			
			func BTResult runActionShared(Object context, Dictionary parameters)
				return check("", parameters) if BTResult.success\
					else (parameters.has("wait") if BTResult.running else BTResult.failure)
			end
			
			func bool evaluateConditionShared(Object context, Dictionary parameters)
				return check(pPrefix, parameters)
			end
			
			func bool check(String prefix, Dictionary parameters)
				var bool result = true
				var Object value
				
				value = parameters.getAt(prefix + "attached", null)
				if value != null
					result &= pInstance.isAttached() == value.equals("true")
				end
				
				return result
			end
		end
		
		/** \brief Controller attach/detach listener. */
		class AttachDetachListener extends DefaultBindingManagerListener
			var Instance pInstance
			
			func new(Instance instance)
				pInstance = instance
			end
			
			func void deviceAttached(BindingManager manager, InputDevice device)
				if device.getType() == InputDeviceType.vrHMD
					pInstance.setInputDevice(device)
				end
			end
			
			func void deviceDetached(BindingManager manager, InputDevice device)
				if pInstance.getInputDevice() == device
					pInstance.setInputDevice(null)
				end
			end
			
			func void devicesReloaded(BindingManager manager)
				// temporary
				pInstance.setInputDevice(manager.findDevice(block InputDevice each
					return each.getType() == InputDeviceType.vrHMD
				end))
			end
		end
		
		
		
		var ECBehaviorVRHMD pECBehavior
		var ECBehaviorVRPlayspace.Instance pVRPlayspace
		var InputDevice pInputDevice
		var Vector pPosition
		var Quaternion pOrientation
		var Array pListeners
		var AttachDetachListener pAttachDetachListener
		var ECComposeBTSM.Instance pBTSMs
		
		
		
		/** \brief Create instance. */
		func new(ECBehaviorVRHMD ecbehavior, BehaviorElement element) super(element)
			pECBehavior = ecbehavior
			pPosition = Vector.new()
			pOrientation = Quaternion.new()
			pListeners = Array.new()
			pAttachDetachListener = AttachDetachListener.new(this)
			
			pVRPlayspace = ecbehavior.getVRPlayspace().instance(element)
		end
		
		/** \brief Dispose of instance. */
		func void dispose()
			pAttachDetachListener = null
			pListeners = null
			pVRPlayspace = null
			pBTSMs = null
			super.dispose()
		end
		
		
		
		/** \brief Initialize behavior from stub. */
		func void init(StubElement stub)
			pECBehavior.createListeners(this)
			
			if pECBehavior.getBTSMs().hasAny()
				var String prefix = "vrhmd."
				pBTSMs = ECComposeBTSM.Instance.new(getElement(), pECBehavior.getBTSMs())
				pBTSMs.addAllActionCondition(prefix, "check", BTACheck.new(this, prefix))
				pBTSMs.dropBTContexts()
			end
		end
		
		
		
		/** \brief Behavior. */
		func ECBehaviorVRHMD getECBehavior()
			return pECBehavior
		end
		
		/** \brief VR Playspace. */
		func ECBehaviorVRPlayspace.Instance getVRPlayspace()
			return pVRPlayspace
		end
		
		/** \brief Input device or null if detached. */
		func InputDevice getInputDevice()
			return pInputDevice
		end
		
		/** \brief Set input device or null if detached. */
		func void setInputDevice(InputDevice device)
			if device == pInputDevice
				return
			end
			
			if pInputDevice != null
				pListeners.forEach(block Listener each
					each.hmdDetached(this)
				end)
				if pBTSMs != null
					pBTSMs.runEvent("vrhmd.", "detached")
				end
			end
			
			pInputDevice = device
			
			if device != null
				pListeners.forEach(block Listener each
					each.hmdAttached(this)
				end)
				if pBTSMs != null
					pBTSMs.runEvent("vrhmd.", "attached")
				end
			end
		end
		
		/** \brief HMD is attached. */
		func bool isAttached()
			return pInputDevice != null
		end
		
		/** \brief HMD is detached. */
		func bool isDetached()
			return pInputDevice == null
		end
		
		
		
		/**
		 * \brief Position.
		 * \note Position is queried each time the function is called.
		 */
		func DVector getPosition()
			return pVRPlayspace.getMatrix() * DVector.new(getPositionPlayspace())
		end
		
		/**
		 * \brief Playspace local position.
		 * \note Position is queried each time the function is called.
		 */
		func Vector getPositionPlayspace()
			if pInputDevice != null
				pPosition = pInputDevice.getDevicePosePosition()
			end
			return pPosition
		end
		
		/**
		 * \brief Orientation.
		 * \note Orientation is queried each time the function is called.
		 */
		func Quaternion getOrientation()
			return getOrientationPlayspace() * pVRPlayspace.getOrientation()
		end
		
		/**
		 * \brief Playspace local orientation.
		 * \note Orientation is queried each time the function is called.
		 */
		func Quaternion getOrientationPlayspace()
			if pInputDevice != null
				pOrientation = pInputDevice.getDevicePoseOrientation()
			end
			return pOrientation
		end
		
		/**
		 * \brief Matrix.
		 * \note Position and orientation are queried each time the function is called.
		 */
		func DMatrix getMatrix()
			return DMatrix.newWorld(getPosition(), getOrientation())
		end
		
		/**
		 * \brief Playspace local matrix.
		 * \note Position and orientation are queried each time the function is called.
		 */
		func Matrix getMatrixPlayspace()
			return Matrix.newWorld(getPositionPlayspace(), getOrientationPlayspace())
		end
		
		/**
		 * \brief Inverse matrix.
		 * \note Position and orientation are queried each time the function is called.
		 */
		func DMatrix getInverseMatrix()
			return getMatrix().getInverse()
		end
		
		/**
		 * \brief Inverse playspace local matrix.
		 * \note Position and orientation are queried each time the function is called.
		 */
		func Matrix getInverseMatrixPlayspace()
			return getMatrixPlayspace().getInverse()
		end
		
		
		
		/** \brief Add listener. */
		func void addListener(Listener listener)
			if listener == null
				throw EInvalidParam.new()
			end
			pListeners.add(listener)
		end
		
		/** \brief Remove listener. */
		func void removeListener(Listener listener)
			pListeners.remove(listener)
		end
		
		
		
		/** \brief Element has been added to game world. Start tracking device. */
		func void addToGameWorld()
			var BindingManager bindingManager = pECBehavior.getBindingManager()
			bindingManager.addListener(pAttachDetachListener)
			
			// find device
			setInputDevice(bindingManager.findDevice(block InputDevice each
				return each.getType() == InputDeviceType.vrHMD
			end))
		end
		
		/** \brief Element has been removed from game world. Stop tracking device. */
		func void removeFromGameWorld()
			pECBehavior.getBindingManager().removeListener(pAttachDetachListener)
			setInputDevice(null)
		end
	end
	
	
	
	var BindingManager pBindingManager
	var ECBehaviorVRPlayspace pVRPlayspace
	var Array pListenerFactories
	var ECComposeBTSM pBTSMs
	
	
	
	/** \brief Create behavior element class. */
	func new(BehaviorElementClass eclass, ECBehaviorVRPlayspace vrPlayspace) \
	this(eclass, vrPlayspace, BaseGameApp.getApp().getBindingManager())
	end
	
	/** \brief Create behavior element class. */
	func new(BehaviorElementClass eclass, ECBehaviorVRPlayspace vrPlayspace, \
	BindingManager bindingManager) super(eclass)
		if vrPlayspace == null
			throw ENullPointer.new("vrPlayspace")
		end
		if bindingManager == null
			throw ENullPointer.new("bindingManager")
		end
		
		pBindingManager = bindingManager
		pVRPlayspace = vrPlayspace
		pListenerFactories = Array.new()
		pBTSMs = ECComposeBTSM.new()
		
		eclass.addBehavior(this)
	end
	
	/** \brief Dispose of behavior. */
	func void dispose()
		pListenerFactories = null
		pVRPlayspace = null
		pBTSMs = null
		super.dispose()
	end
	
	
	
	/** \brief Binding manager. */
	func BindingManager getBindingManager()
		return pBindingManager
	end
	
	/** \brief VR Playspace behavior. */
	func ECBehaviorVRPlayspace getVRPlayspace()
		return pVRPlayspace
	end
	
	/**
	 * \brief Compose behavior trees and state machines.
	 * \version 1.26
	 */
	func ECComposeBTSM getBTSMs()
		return pBTSMs
	end
	
	
	
	/** \brief Add listener factory. */
	func void addListenerFactory(ListenerFactory factory)
		if factory == null
			throw ENullPointer.new()
		end
		pListenerFactories.add(factory)
	end
	
	/**
	 * \brief Add listener factory using block.
	 * 
	 * Block receives as parameter Instance and returns Listener.
	 */
	func void addListenerFactory(Block blockFactory)
		pListenerFactories.add(BlockListenerFactory.new(blockFactory))
	end
	
	/** \brief Visit listener factories with block with argument ListenerFactory. */
	func void forEachListenerFactory(Block ablock)
		pListenerFactories.forEach(ablock)
	end
	
	/** \brief Create listeners from factories adding them to behavior instance. */
	func void createListeners(Instance instance)
		pListenerFactories.forEach(block ListenerFactory each
			instance.addListener(each.createListener(instance))
		end)
	end
	
	
	
	/** \brief Get instance in element from owner element class. */
	func Instance instance(BehaviorElement element)
		return element.getInstanceAt(getInstanceIndex()) cast Instance
	end
	
	
	
	/**
	 * \brief Get behavior in element class or \em null if absent.
	 * 
	 * Use this method to check if a particular BehaviorElementClass contains a behavior
	 * of type ECBehaviorVRHMD.
	 */
	static func ECBehaviorVRHMD getBehaviorIn(BehaviorElementClass eclass)
		return eclass.findBehavior(block ECBehaviorVRHMD each
			return true
		end) cast ECBehaviorVRHMD
	end
	
	
	
	/**
	 * \brief Get instance in element or \em null if absent.
	 * 
	 * Use this method to check if a particular BehaviorElement contains a behavior instance
	 * of type ECBehaviorVRHMD.Instance . If more than one instance is present returns
	 * the first instance.
	 */
	static func Instance getInstanceIn(BehaviorElement element)
		return element.findInstance(block Instance each
			return true
		end) cast Instance
	end
	
	
	
	/** \brief Create Behavior instance. */
	func ECBehaviorInstance createInstance(BehaviorElement element)
		return Instance.new(this, element)
	end
end
