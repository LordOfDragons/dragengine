/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */


namespace Dragengine.Scenery

pin Dragengine.Commands
pin Dragengine.Gui
pin Dragengine.LoadSave
pin Dragengine.Preloading
pin Dragengine.Utils


/**
 * \brief Behavior element behavior adding VR HMD support to actor.
 * \version 1.6
 * 
 * This behavior tracks the HMD.
 * 
 * This behavior can be present only once.
 * 
 * This behavior does not require persistable element class (setPersistable).
 * 
 * \see https://developer.dragondreams.ch/wiki/doku.php/dragengine:modules:dragonscript:behavior_vrhmd
 */
class ECBehaviorVRHMD extends DefaultECBehavior
	/** \brief Listener for behavior instance events. */
	interface Listener
		/** \brief HMD attached and ready to use. */
		func void hmdAttached( Instance instance )
		
		/** \brief HMD detached and no more usable. */
		func void hmdDetached( Instance instance )
	end
	
	/** \brief Default implementation of behavior instance listener. */
	class DefaultListener implements Listener
		/** \brief Create default listener. */
		public func new()
		end
		
		/** \brief HMD attached and ready to use. */
		public func void hmdAttached( Instance instance )
		end
		
		/** \brief HMD detached and no more usableuse. */
		public func void hmdDetached( Instance instance )
		end
	end
	
	/** \brief Factory creating listeners. */
	interface ListenerFactory
		/** \brief Create listener. */
		func Listener createListener( Instance instance )
	end
	
	/** \brief Factory creating listeners using block. */
	class BlockListenerFactory implements ListenerFactory
		private var Block pBlock
		
		/** \brief Create factory using block receiving Instance as parameter returning Listener. */
		public func new( Block blockFactory )
			if blockFactory == null
				throw ENullPointer.new()
			end
			this.pBlock = blockFactory
		end
		
		/** \brief Create listener. */
		public func Listener createListener( Instance instance )
			return this.pBlock.run( instance ) cast Listener
		end
	end
	
	/**
	 * \brief Behavior factory.
	 * \ref 1.25
	 * 
	 * Automatically assigns these behaviors if present before adding:
	 * - Required: \ref ECBehaviorVRPlayspace
	 * 
	 * Example XML element class:
	 * \code{.xml}
	 * <behavior type='ECBehaviorVRHMD'>
	 *   <!-- optional: use BaseGameApp binding manager. game can add more supported values -->
	 *   <string name='bindingManager'>default</string>
	 * </behavior>
	 * 
	 * <!-- for adding multiple behaviors use unique identifiers -->
	 * <behavior type='ECBehaviorVRHMD' id='second'>
	 *   ...
	 * </behavior>
	 * \endcode
	 * 
	 * Element class properties added by the behavior can also be set directly inside the tag
	 * be removing the property name prefix and starting with a "." (for exampler ".propertyName").
	 */
	class Factory implements BehaviorFactory
		func new()
		end
		
		func String factoryId()
			return "ECBehaviorVRHMD"
		end
		
		func ECBehavior addBehavior(BehaviorElementClass eclass, String id, Dictionary parameters)
			if not id.empty()
				throw EInvalidParam.new("id is not empty string")
			end
			var ECBehaviorVRHMD behavior = ECBehaviorVRHMD.new(eclass,\
				ECBehaviorVRPlayspace.getBehaviorIn(eclass),\
				getBindingManagerFor(parameters.getAt("bindingManager", "default") cast String))
			BehaviorElementClass.sharedFactoryHelper.setPropertiesFromParameters(\
				eclass, parameters, "vrhmd")
			return behavior
		end
		
		/**
		 * \brief Binding manager matching value.
		 * 
		 * Default implementation returns \ref BaseGameApp#getBindingManager() for value 'default'
		 * and null for all other values. Overwrite to accept other values.
		 */
		func BindingManager getBindingManagerFor(String value)
			return BehaviorElementClass.sharedFactoryHelper.bindingManager(value)
		end
	end
	
	
	
	/** \brief Behavior instance. */
	class Instance extends DefaultECBehaviorInstance
		/** \brief Controller attach/detach listener. */
		class AttachDetachListener extends DefaultBindingManagerListener
			private var Instance pInstance
			
			public func new( Instance instance )
				pInstance = instance
			end
			
			public func void deviceAttached( BindingManager manager, InputDevice device )
				if device.getType() == InputDeviceType.vrHMD
					this.pInstance.setInputDevice( device )
				end
			end
			
			public func void deviceDetached( BindingManager manager, InputDevice device )
				if this.pInstance.getInputDevice() == device
					this.pInstance.setInputDevice( null )
				end
			end
			
			public func void devicesReloaded( BindingManager manager )
				// temporary
				this.pInstance.setInputDevice( manager.findDevice( block InputDevice each
					return each.getType() == InputDeviceType.vrHMD
				end ) )
			end
		end
		
		
		
		private var ECBehaviorVRHMD pECBehavior
		private var ECBehaviorVRPlayspace.Instance pVRPlayspace
		private var InputDevice pInputDevice
		private var Vector pPosition
		private var Quaternion pOrientation
		private var Array pListeners
		private var AttachDetachListener pAttachDetachListener
		
		
		
		/** \brief Create instance. */
		public func new( ECBehaviorVRHMD ecbehavior, BehaviorElement element ) super( element )
			this.pECBehavior = ecbehavior
			this.pPosition = Vector.new()
			this.pOrientation = Quaternion.new()
			this.pListeners = Array.new()
			this.pAttachDetachListener = AttachDetachListener.new( this )
			
			this.pVRPlayspace = ecbehavior.getVRPlayspace().instance( element )
		end
		
		/** \brief Dispose of instance. */
		public func void dispose()
			this.pAttachDetachListener = null
			this.pListeners = null
			this.pVRPlayspace = null
			super.dispose()
		end
		
		
		
		/** \brief Initialize behavior from stub. */
		public func void init( StubElement stub )
			this.pECBehavior.createListeners( this )
		end
		
		
		
		/** \brief Behavior. */
		public func ECBehaviorVRHMD getECBehavior()
			return this.pECBehavior
		end
		
		/** \brief VR Playspace. */
		public func ECBehaviorVRPlayspace.Instance getVRPlayspace()
			return this.pVRPlayspace
		end
		
		/** \brief Input device or null if detached. */
		public func InputDevice getInputDevice()
			return this.pInputDevice
		end
		
		/** \brief Set input device or null if detached. */
		public func void setInputDevice( InputDevice device )
			if device == this.pInputDevice
				return
			end
			
			if this.pInputDevice != null
				this.pListeners.forEach( block Listener each
					each.hmdDetached( this )
				end )
			end
			
			this.pInputDevice = device
			
			if device != null
				this.pListeners.forEach( block Listener each
					each.hmdAttached( this )
				end )
			end
		end
		
		/** \brief HMD is attached. */
		public func bool isAttached()
			return this.pInputDevice != null
		end
		
		/** \brief HMD is detached. */
		public func bool isDetached()
			return this.pInputDevice == null
		end
		
		
		
		/**
		 * \brief Position.
		 * \note Position is queried each time the function is called.
		 */
		public func DVector getPosition()
			return this.pVRPlayspace.getMatrix() * DVector.new( this.getPositionPlayspace() )
		end
		
		/**
		 * \brief Playspace local position.
		 * \note Position is queried each time the function is called.
		 */
		public func Vector getPositionPlayspace()
			if this.pInputDevice != null
				this.pPosition = this.pInputDevice.getDevicePosePosition()
			end
			return this.pPosition
		end
		
		/**
		 * \brief Orientation.
		 * \note Orientation is queried each time the function is called.
		 */
		public func Quaternion getOrientation()
			return this.getOrientationPlayspace() * this.pVRPlayspace.getOrientation()
		end
		
		/**
		 * \brief Playspace local orientation.
		 * \note Orientation is queried each time the function is called.
		 */
		public func Quaternion getOrientationPlayspace()
			if this.pInputDevice != null
				this.pOrientation = this.pInputDevice.getDevicePoseOrientation()
			end
			return this.pOrientation
		end
		
		/**
		 * \brief Matrix.
		 * \note Position and orientation are queried each time the function is called.
		 */
		public func DMatrix getMatrix()
			return DMatrix.newWorld( this.getPosition(), this.getOrientation() )
		end
		
		/**
		 * \brief Playspace local matrix.
		 * \note Position and orientation are queried each time the function is called.
		 */
		public func Matrix getMatrixPlayspace()
			return Matrix.newWorld( this.getPositionPlayspace(), this.getOrientationPlayspace() )
		end
		
		/**
		 * \brief Inverse matrix.
		 * \note Position and orientation are queried each time the function is called.
		 */
		public func DMatrix getInverseMatrix()
			return this.getMatrix().getInverse()
		end
		
		/**
		 * \brief Inverse playspace local matrix.
		 * \note Position and orientation are queried each time the function is called.
		 */
		public func Matrix getInverseMatrixPlayspace()
			return this.getMatrixPlayspace().getInverse()
		end
		
		
		
		/** \brief Add listener. */
		public func void addListener( Listener listener )
			if listener == null
				throw EInvalidParam.new()
			end
			this.pListeners.add( listener )
		end
		
		/** \brief Remove listener. */
		public func void removeListener( Listener listener )
			this.pListeners.remove( listener )
		end
		
		
		
		/** \brief Element has been added to game world. Start tracking device. */
		public func void addToGameWorld()
			var BindingManager bindingManager = this.pECBehavior.getBindingManager()
			bindingManager.addListener( this.pAttachDetachListener )
			
			// find device
			this.setInputDevice( bindingManager.findDevice( block InputDevice each
				return each.getType() == InputDeviceType.vrHMD
			end ) )
		end
		
		/** \brief Element has been removed from game world. Stop tracking device. */
		public func void removeFromGameWorld()
			this.pECBehavior.getBindingManager().removeListener( this.pAttachDetachListener )
			this.setInputDevice( null )
		end
	end
	
	
	
	private var BindingManager pBindingManager
	private var ECBehaviorVRPlayspace pVRPlayspace
	private var Array pListenerFactories
	
	
	
	/** \brief Create behavior element class. */
	public func new( BehaviorElementClass eclass, ECBehaviorVRPlayspace vrPlayspace ) \
	this( eclass, vrPlayspace, BaseGameApp.getApp().getBindingManager() )
	end
	
	/** \brief Create behavior element class. */
	public func new( BehaviorElementClass eclass, ECBehaviorVRPlayspace vrPlayspace, \
	BindingManager bindingManager ) super( eclass )
		if vrPlayspace == null
			throw ENullPointer.new( "vrPlayspace" )
		end
		if bindingManager == null
			throw ENullPointer.new( "bindingManager" )
		end
		
		this.pBindingManager = bindingManager
		this.pVRPlayspace = vrPlayspace
		this.pListenerFactories = Array.new()
		
		eclass.addBehavior( this )
	end
	
	/** \brief Dispose of behavior. */
	public func void dispose()
		this.pListenerFactories = null
		this.pVRPlayspace = null
		super.dispose()
	end
	
	
	
	/** \brief Binding manager. */
	public func BindingManager getBindingManager()
		return this.pBindingManager
	end
	
	/** \brief VR Playspace behavior. */
	public func ECBehaviorVRPlayspace getVRPlayspace()
		return this.pVRPlayspace
	end
	
	
	
	/** \brief Add listener factory. */
	public func void addListenerFactory( ListenerFactory factory )
		if factory == null
			throw ENullPointer.new()
		end
		this.pListenerFactories.add( factory )
	end
	
	/**
	 * \brief Add listener factory using block.
	 * 
	 * Block receives as parameter Instance and returns Listener.
	 */
	public func void addListenerFactory( Block blockFactory )
		this.pListenerFactories.add( BlockListenerFactory.new( blockFactory ) )
	end
	
	/** \brief Visit listener factories with block with argument ListenerFactory. */
	public func void forEachListenerFactory( Block ablock )
		this.pListenerFactories.forEach( ablock )
	end
	
	/** \brief Create listeners from factories adding them to behavior instance. */
	public func void createListeners( Instance instance )
		this.pListenerFactories.forEach( block ListenerFactory each
			instance.addListener( each.createListener( instance ) )
		end )
	end
	
	
	
	/** \brief Get instance in element from owner element class. */
	public func Instance instance( BehaviorElement element )
		return element.getInstanceAt( this.getInstanceIndex() ) cast Instance
	end
	
	
	
	/**
	 * \brief Get behavior in element class or \em null if absent.
	 * 
	 * Use this method to check if a particular BehaviorElementClass contains a behavior
	 * of type ECBehaviorVRHMD.
	 */
	static public func ECBehaviorVRHMD getBehaviorIn( BehaviorElementClass eclass )
		return eclass.findBehavior( block ECBehaviorVRHMD each
			return true
		end ) cast ECBehaviorVRHMD
	end
	
	
	
	/**
	 * \brief Get instance in element or \em null if absent.
	 * 
	 * Use this method to check if a particular BehaviorElement contains a behavior instance
	 * of type ECBehaviorVRHMD.Instance . If more than one instance is present returns
	 * the first instance.
	 */
	static public func Instance getInstanceIn( BehaviorElement element )
		return element.findInstance( block Instance each
			return true
		end ) cast Instance
	end
	
	
	
	/** \brief Create Behavior instance. */
	public func ECBehaviorInstance createInstance( BehaviorElement element )
		return Instance.new( this, element )
	end
end
