/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */


namespace Dragengine.Scenery

pin Dragengine.Commands
pin Dragengine.Gui
pin Dragengine.LoadSave
pin Dragengine.Preloading
pin Dragengine.Utils
pin Dragengine.BehaviorTreeSystem


/**
 * \brief Behavior element behavior adding VR Hand Controller support to actor.
 * \version 1.6
 * 
 * This behavior tracks one hand controller optionally displaying it on screen using either
 * the developer provided model or a custom model. Optionally a rig can be assigned to get
 * physical presence of the controller in the game world.
 * 
 * This behavior can be added multiple times to an element. This allows to track two hand
 * controllers. Each instance has an identifier which can be used to retrieve a specific
 * instance. The prefix of the element class properties is "vrHand." . If the identifier
 * is not empty the element class properties have the prefix "{id}.vrHand." .
 * This can be overwritten if required.
 * 
 * This behavior does not require persistable element class (setPersistable).
 * 
 * \par Version 1.7
 * 
 * Adds a collider resource to allow other elements to attach to the hand. By default
 * the collider is set to be a ghost collider suitable for attaching elements without
 * causing interactions with the scene. If you would like to get interaction with the
 * scene set the collision parameters accordingly.
 * 
 * \see https://developer.dragondreams.ch/wiki/doku.php/dragengine:modules:dragonscript:behavior_vrhand
 */
class ECBehaviorVRHand extends DefaultECBehavior
	/** \brief Listener for behavior instance events. */
	interface Listener
		/** \brief Hand controller attached and ready to use. */
		func void controllerAttached(Instance instance)
		
		/** \brief Hand controller detached and no more usable. */
		func void controllerDetached(Instance instance)
	end
	
	/** \brief Default implementation of behavior instance listener. */
	class DefaultListener implements Listener
		/** \brief Create default listener. */
		func new()
		end
		
		/** \brief Hand controller attached and ready to use. */
		func void controllerAttached(Instance instance)
		end
		
		/** \brief Hand controller detached and no more usable. */
		func void controllerDetached(Instance instance)
		end
	end
	
	/**
	 * \brief Listener for behavior collision events.
	 * \version 1.7
	 */
	interface CollisionListener
		/**
		 * \brief Collision detected.
		 * \param instance Behavior instance owning \em collider.
		 * \param collider Collider involded in the collision.
		 * \param info Information about collision partner.
		 */
		func void collisionResponse(Instance instance, Collider collider, CollisionInfo info)
	end
	
	/**
	 * \brief Default implementation of behavior collision listener.
	 * \version 1.7
	 */
	class DefaultCollisionListener implements CollisionListener
		/** \brief Create default listener. */
		func new()
		end
		
		/**
		 * \brief Collision detected.
		 * \param instance Behavior instance owning \em collider.
		 * \param collider Collider involded in the collision.
		 * \param info Information about collision partner.
		 */
		func void collisionResponse(Instance instance, Collider collider, CollisionInfo info)
		end
	end
	
	/** \brief Factory creating listeners. */
	interface ListenerFactory
		/** \brief Create listener. */
		func Listener createListener(Instance instance)
	end
	
	/** \brief Factory creating listeners using block. */
	class BlockListenerFactory implements ListenerFactory
		var Block pBlock
		
		/** \brief Create factory using block receiving Instance as parameter returning Listener. */
		func new(Block blockFactory)
			if blockFactory == null
				throw ENullPointer.new()
			end
			pBlock = blockFactory
		end
		
		/** \brief Create listener. */
		func Listener createListener(Instance instance)
			return pBlock.run(instance) cast Listener
		end
	end
	
	/**
	 * \brief Behavior factory.
	 * \version 1.25
	 * 
	 * Automatically assigns these behaviors if present before adding:
	 * - Required: \ref ECBehaviorVRPlayspace
	 * 
	 * Example XML element class:
	 * \code{.xml}
	 * <behavior type='ECBehaviorVRHand'>
	 *   <!-- required: use BaseGameApp input device type. Constant of InputDeviceType.
	 *                  use either 'vrRightHand' or 'vrLeftHand'. -->
	 *   <string name='inputDeviceType'>vrRightHand</string>
	 * 
	 *   <!-- optional: use BaseGameApp binding manager. game can add more supported values.
	 *                  default is 'default' -->
	 *   <string name='bindingManager'>default</string>
	 * 
	 *   <!-- optional: set collision filter. default value '' which means empty category
	 *                  and full filter. format is '', 'category' or 'category:filter'
	 *                  where category and filter are a list of bits to set. -->
	 *   <string name='collisionFilter'>6:0 1 2 3 5</string>
	 *   
	 *   <!-- optional: add behavior trees. default adds all behavior trees. -->
	 *   <list name='behaviorTrees'>
	 *     <string/> <!-- add behavior with empty identifier -->
	 *     <string>default</string> <!-- add behavior with 'default' identifier -->
	 *   </list>
	 * 
	 *   <!-- optional: add state machines. default adds all state machines. -->
	 *   <list name='stateMachines'>
	 *     <string/> <!-- add behavior with empty identifier -->
	 *     <string>default</string> <!-- add behavior with 'default' identifier -->
	 *   </list>
	 * </behavior>
	 * 
	 * <!-- for adding multiple behaviors use unique identifiers -->
	 * <behavior type='ECBehaviorVRHand' id='second'>
	 *   ...
	 * </behavior>
	 * \endcode
	 * 
	 * Element class properties added by the behavior can also be set directly inside the tag
	 * be removing the property name prefix and starting with a "." (for example ".propertyName").
	 */
	class Factory extends DefaultBehaviorFactory
		func new() super("ECBehaviorVRHand")
		end
		
		func ECBehavior addBehavior(BehaviorElementClass eclass, String id, Dictionary parameters)
			var ECBehaviorVRHand behavior = ECBehaviorVRHand.new(eclass,\
				ECBehaviorVRPlayspace.getBehaviorIn(eclass),\
				InputDeviceType.named(parameters.getAt("inputDeviceType") cast String),\
				getBindingManagerFor(parameters.getAt("bindingManager", "default") cast String), id)
			
			if parameters.has("collisionFilter")
				behavior.getCollider().setCollisionFilter(ElementClass.getSharedCodecPropertyString().\
					decodeCollisionFilter(parameters.getAt("collisionFilter") cast String))
			end
			
			getHelper().allBTSM(behavior.getBTSMs(), eclass, parameters)
			
			getHelper().setPropertiesFromParameters(eclass, parameters, "vrHand", id)
			return behavior
		end
	end
	
	
	
	/** \brief Behavior instance. */
	class Instance extends DefaultECBehaviorInstance implements ColliderListener
		/**
		 * \brief Behavior tree action/condition "forceField{(id)}.check".
		 * \version 1.26
		 */
		private class BTACheck extends BTSMActionCondition
			var Instance pInstance
			var String pPrefix
			
			func new(Instance instance, String prefix)
				pInstance = instance
				pPrefix = prefix
			end
			
			func BTResult runActionShared(Object context, Dictionary parameters)
				return check("", parameters) if BTResult.success\
					else (parameters.has("wait") if BTResult.running else BTResult.failure)
			end
			
			func bool evaluateConditionShared(Object context, Dictionary parameters)
				return check(pPrefix, parameters)
			end
			
			func bool check(String prefix, Dictionary parameters)
				var bool result = true
				var Object value
				
				value = parameters.getAt(prefix + "attached", null)
				if value != null
					result &= pInstance.isAttached() == value.equals("true")
				end
				
				return result
			end
		end
		
		/** \brief Controller attach/detach listener. */
		class AttachDetachListener extends DefaultBindingManagerListener
			var Instance pInstance
			
			func new(Instance instance)
				pInstance = instance
			end
			
			func void deviceAttached(BindingManager manager, InputDevice device)
				if device.getType() == pInstance.getECBehavior().getInputDeviceType()
					pInstance.setInputDevice(device)
				end
			end
			
			func void deviceDetached(BindingManager manager, InputDevice device)
				if pInstance.getInputDevice() == device
					pInstance.setInputDevice(null)
				end
			end
			
			func void devicesReloaded(BindingManager manager)
				// temporary
				var InputDeviceType type = pInstance.getECBehavior().getInputDeviceType()
				pInstance.setInputDevice(manager.findDevice(block InputDevice each
					return each.getType() == type
				end))
			end
		end
		
		
		
		var ECBehaviorVRHand pECBehavior
		var ECBehaviorVRPlayspace.Instance pVRPlayspace
		var ECBehaviorComponent.Instance pComponent
		var Model pCustomModel
		var Skin pCustomSkin
		var Rig pCustomRig
		var bool pUseVendorModel
		var bool pShowHand
		var InputDevice pInputDevice
		var Vector pPosition
		var Quaternion pOrientation
		var Vector pLinearVelocity
		var Vector pAngularVelocity
		var Array pListeners
		var AttachDetachListener pAttachDetachListener
		var Collider pCollider
		var Array pCollisionListeners
		var Vector pDebugPanelPosition
		var Quaternion pDebugPanelOrientation
		var ECComposeBTSM.Instance pBTSMs
		
		
		
		/** \brief Create instance. */
		func new(ECBehaviorVRHand ecbehavior, BehaviorElement element) super(element)
			pECBehavior = ecbehavior
			pUseVendorModel = true
			pShowHand = true
			pPosition = Vector.new()
			pOrientation = Quaternion.new()
			pLinearVelocity = Vector.new()
			pAngularVelocity = Vector.new()
			pListeners = Array.new()
			pAttachDetachListener = AttachDetachListener.new(this)
			pCollisionListeners = Array.new()
			pDebugPanelPosition = Vector.new(0.1, 0, 0)
			pDebugPanelOrientation = Quaternion.newFromEuler(0, -90, 60)
			
			pVRPlayspace = ecbehavior.getVRPlayspace().instance(element)
			pComponent = ecbehavior.getComponent().instance(element)
			
			setRequiresThink(true)
		end
		
		/** \brief Dispose of instance. */
		func void dispose()
			if pCollider != null
				pCollider.setColliderListener(null)
				pCollider.setOwner(null)
				pCollider.removeAllCollisionTests()
				pCollider.removeAllIgnoreColliders()
				//pCollider = null // not doing this prevents depending behaviors fail while disposing
			end
			pCollisionListeners = null
			
			pAttachDetachListener = null
			pListeners = null
			pComponent = null
			pVRPlayspace = null
			pBTSMs = null
			super.dispose()
		end
		
		
		
		/** \brief Initialize behavior from stub. */
		func void init(StubElement stub)
			// create component
			var Component component = pComponent.getComponent()
			if component != null
				pCustomModel = component.getModel()
				pCustomSkin = component.getSkin()
				pCustomRig = component.getRig()
			end
			
			pShowHand = pECBehavior.getShowHand().getValue(stub)
			pUseVendorModel = pECBehavior.getUseVendorModel().getValue(stub)
			
			// create collider
			var BehaviorElement element = getElement()
			pCollider = createCollider(stub)
			pCollider.setColliderListener(this)
			pCollider.setOwner(element)
			pCollider.setGeometry(element.getPosition(), element.getOrientation(), element.getScaling())
			
			// if response type is dynamic update bone position. this is required for dynamic
			// rigs with bones. upon initializing the bones they are set to zero but bones
			// in colliders are in world space. without init dynamic bones end up everywhere
			// but not where we want them
			if pCollider.getResponseType() == CollisionResponse.dynamic and pCollider castable ColliderComponent
				(pCollider cast ColliderComponent).copyStatesFromComponent()
			end
			
			// attach component if not rig attached already
			attachComponent(stub)
			
			// do the rest
			pECBehavior.createListeners(this)
			
			updateVisibile()
			
			if pECBehavior.getBTSMs().hasAny()
				var String prefix = pECBehavior.getPrefix()
				pBTSMs = ECComposeBTSM.Instance.new(element, pECBehavior.getBTSMs())
				pBTSMs.addAllActionCondition(prefix, "check", BTACheck.new(this, prefix))
				pBTSMs.dropBTContexts()
			end
		end
		
		/**
		 * \brief Create collider.
		 * \version 1.7
		 * \param stub Stub to use.
		 * \param component Component to use or \em null if absent.
		 */
		protected func Collider createCollider(StubElement stub)
			var BehaviorElement element = getElement()
			var Collider collider
			
			if pComponent != null
				collider = pECBehavior.getCollider().createCollider(element, stub, pComponent.getComponent())
			end
			
			if collider == null
				collider = pECBehavior.getCollider().createCollider(element, stub)
			end
			
			return collider
		end
		
		/**
		 * \brief Attach component to collider if required.
		 * \version 1.7
		 */
		protected func void attachComponent(StubElement stub)
			if pComponent.getComponent() != null and not pCollider castable ColliderComponent
				pCollider.attachStatic(pComponent.getComponent(), Vector.new(), Quaternion.new())
			end
		end
		
		
		
		/** \brief Behavior. */
		func ECBehaviorVRHand getECBehavior()
			return pECBehavior
		end
		
		/** \brief VR Playspace. */
		func ECBehaviorVRPlayspace.Instance getVRPlayspace()
			return pVRPlayspace
		end
		
		/** \brief Component behavior instance. */
		func ECBehaviorComponent.Instance getComponent()
			return pComponent
		end
		
		/** \brief Use vendor model. */
		func bool getUseVendorModel()
			return pUseVendorModel
		end
		
		/** \brief Set use vendor model. */
		func void setUseVendorModel(bool useVendorModel)
			if useVendorModel == pUseVendorModel
				return
			end
			
			pUseVendorModel = useVendorModel
			updateModelSkin()
		end
		
		/** \brief Show hand. */
		func bool getShowHand()
			return pShowHand
		end
		
		/** \brief Set show hand. */
		func void setShowHand(bool showHand)
			if showHand == pShowHand
				return
			end
			
			pShowHand = showHand
			stateChanged()
		end
		
		/** \brief Input device or null if detached. */
		func InputDevice getInputDevice()
			return pInputDevice
		end
		
		/** \brief Set input device or null if detached. */
		func void setInputDevice(InputDevice device)
			if device == pInputDevice
				return
			end
			
			if pInputDevice != null
				pListeners.forEach(block Listener each
					each.controllerDetached(this)
				end)
				if pBTSMs != null
					pBTSMs.runEvent(pECBehavior.getPrefix(), "detached")
				end
			end
			
			pInputDevice = device
			updateModelSkin()
			
			if device != null
				pListeners.forEach(block Listener each
					each.controllerAttached(this)
				end)
				if pBTSMs != null
					pBTSMs.runEvent(pECBehavior.getPrefix(), "attached")
				end
			end
		end
		
		/** \brief Controller is attached. */
		func bool isAttached()
			return pInputDevice != null
		end
		
		/** \brief Controller is detached. */
		func bool isDetached()
			return pInputDevice == null
		end
		
		/**
		 * \brief Collider.
		 * \version 1.7
		 */
		func Collider getCollider()
			return pCollider
		end
		
		
		
		/**
		 * \brief Position.
		 * \note Position is queried each time the function is called.
		 */
		func DVector getPosition()
			return pVRPlayspace.getMatrix() * DVector.new(getPositionPlayspace())
		end
		
		/**
		 * \brief Playspace local position.
		 * \note Position is queried each time the function is called.
		 */
		func Vector getPositionPlayspace()
			if pInputDevice != null
				pPosition = pInputDevice.getDevicePosePosition()
			end
			return pPosition
		end
		
		/**
		 * \brief Orientation.
		 * \note Orientation is queried each time the function is called.
		 */
		func Quaternion getOrientation()
			return getOrientationPlayspace() * pVRPlayspace.getOrientation()
		end
		
		/**
		 * \brief Playspace local orientation.
		 * \note Orientation is queried each time the function is called.
		 */
		func Quaternion getOrientationPlayspace()
			if pInputDevice != null
				pOrientation = pInputDevice.getDevicePoseOrientation()
			end
			return pOrientation
		end
		
		/**
		 * \brief Matrix.
		 * \note Position and orientation are queried each time the function is called.
		 */
		func DMatrix getMatrix()
			return DMatrix.newWorld(getPosition(), getOrientation())
		end
		
		/**
		 * \brief Playspace local matrix.
		 * \note Position and orientation are queried each time the function is called.
		 */
		func Matrix getMatrixPlayspace()
			return Matrix.newWorld(getPositionPlayspace(), getOrientationPlayspace())
		end
		
		/**
		 * \brief Inverse matrix.
		 * \note Position and orientation are queried each time the function is called.
		 */
		func DMatrix getInverseMatrix()
			return getMatrix().getInverse()
		end
		
		/**
		 * \brief Inverse playspace local matrix.
		 * \note Position and orientation are queried each time the function is called.
		 */
		func Matrix getInverseMatrixPlayspace()
			return getMatrixPlayspace().getInverse()
		end
		
		
		
		/**
		 * \brief Linear velocity.
		 * \version 1.10
		 * \note Linear velocity is queried each time the function is called.
		 */
		func Vector getLinearVelocity()
			return pVRPlayspace.getMatrix().transformNormal(\
				DVector.new(getLinearVelocityPlayspace())).toVector()
		end
		
		/**
		 * \brief Playspace local linear velocity.
		 * \version 1.10
		 * \note Linear velocity is queried each time the function is called.
		 */
		func Vector getLinearVelocityPlayspace()
			if pInputDevice != null
				pLinearVelocity = pInputDevice.getDevicePoseLinearVelocity()
			end
			return pLinearVelocity
		end
		
		/**
		 * \brief Angular velocity.
		 * \version 1.10
		 * \note Angular velocity is queried each time the function is called.
		 */
		func Vector getAngularVelocity()
			return pVRPlayspace.getMatrix().transformNormal(\
				DVector.new(getAngularVelocityPlayspace())).toVector()
		end
		
		/**
		 * \brief Playspace local angular velocity.
		 * \version 1.10
		 * \note Angular velocity is queried each time the function is called.
		 */
		func Vector getAngularVelocityPlayspace()
			if pInputDevice != null
				pAngularVelocity = pInputDevice.getDevicePoseAngularVelocity()
			end
			return pAngularVelocity
		end
		
		
		
		/**
		 * \brief Rig shape property or null if not possible.
		 * \version 1.7
		 */
		func String getRigShapeProperty(int bone, int shape)
			if shape == -1 or pCollider == null or not pCollider castable ColliderRig
				return null
			end
			
			var Rig rig = (pCollider cast ColliderRig).getRig()
			if rig == null
				return null
			end
			
			if bone != -1
				return rig.boneShapeGetProperty(bone, shape)
				
			else
				return rig.shapeGetProperty(shape)
			end
		end
		
		/**
		 * \brief Rig shape property from collision or null if not possible.
		 * \version 1.7
		 */
		func String getRigShapeProperty(CollisionInfo info, bool owner)
			if owner
				return getRigShapeProperty(info.getOwnerBone(), info.getOwnerShape())
				
			elif info.hasBone() and info.hasShape()
				return getRigShapeProperty(info.getBone(), info.getShape())
				
			else
				return  null
			end
		end
		
		/**
		 * \brief Debug panel position.
		 * \version 1.17
		 * \see #updateDebugPanelPosition()
		 */
		func Vector getDebugPanelPosition()
			return pDebugPanelPosition
		end
		
		/**
		 * \brief Set debug panel position.
		 * \version 1.17
		 * \see #updateDebugPanelPosition()
		 */
		func void setDebugPanelPosition(Vector position)
			if position == null
				throw ENullPointer.new("position")
			end
			pDebugPanelPosition = position
		end
		
		/**
		 * \brief Debug panel orientation.
		 * \version 1.17
		 * \see #updateDebugPanelPosition()
		 */
		func Quaternion getDebugPanelOrientation()
			return pDebugPanelOrientation
		end
		
		/**
		 * \brief Set debug panel orientation.
		 * \version 1.17
		 * \see #updateDebugPanelPosition()
		 */
		func void setDebugPanelOrientation(Quaternion orientation)
			if orientation == null
				throw ENullPointer.new("orientation")
			end
			pDebugPanelOrientation = orientation
		end
		
		/**
		 * \brief Update position and orientation of VR debug panel.
		 * \version 1.17
		 * 
		 * Allows the graphic module to show a debug panel at the users right hand.
		 * The debug panel is visible if the user looks at the back of his hand like
		 * looking at his wrist watch. The debug panel is only shown if any debug
		 * information is present.
		 * 
		 * The method has to decide if this hand should update the debug panel position.
		 * The default implementation sets the debug panel position only if the input
		 * device is present and the type is InputDeviceType.vrRightHand .
		 */
		func void updateDebugPanelPosition()
			if pInputDevice != null and pInputDevice.getType() == InputDeviceType.vrRightHand
				var DMatrix matrix = DMatrix.newWorld(DVector.new(pDebugPanelPosition), pDebugPanelOrientation) * getMatrix()
				GraphicSystem.setVRDebugPanelPosition(matrix.getPosition(), matrix.toQuaternion())
			end
		end
		
		
		
		/** \brief Add listener. */
		func void addListener(Listener listener)
			if listener == null
				throw EInvalidParam.new()
			end
			pListeners.add(listener)
		end
		
		/** \brief Remove listener. */
		func void removeListener(Listener listener)
			pListeners.remove(listener)
		end
		
		
		
		/**
		 * \brief Add collision listener.
		 * \version 1.7
		 */
		func void addCollisionListener(CollisionListener listener)
			if listener == null
				throw EInvalidParam.new()
			end
			pCollisionListeners.add(listener)
		end
		
		/**
		 * \brief Remove collision listener.
		 * \version 1.7
		 */
		func void removeCollisionListener(CollisionListener listener)
			pCollisionListeners.remove(listener)
		end
		
		
		
		/** \brief Element has been added to game world. Start tracking device. */
		func void addToGameWorld()
			var BindingManager bindingManager = pECBehavior.getBindingManager()
			bindingManager.addListener(pAttachDetachListener)
			
			// find device
			var InputDeviceType type = pECBehavior.getInputDeviceType()
			setInputDevice(bindingManager.findDevice(block InputDevice each
				return each.getType() == type
			end))
			
			// add collider to world
			getElement().getGameWorld().getWorld().addCollider(pCollider)
		end
		
		/** \brief Element has been removed from game world. Stop tracking device. */
		func void removeFromGameWorld()
			// remove collider from game world
			getElement().getGameWorld().getWorld().removeCollider(pCollider)
			
			// forget about input device
			pECBehavior.getBindingManager().removeListener(pAttachDetachListener)
			setInputDevice(null)
		end
		
		/**
		 * \brief Frame update.
		 * 
		 * Calls updateDebugPanelPosition() if required.
		 */
		func void think(float elapsed)
			pCollider.setGeometry(getPosition(), getOrientation())
			updateDebugPanelPosition()
		end
		
		/** \brief Element state changed like visible. */
		func void stateChanged()
			updateVisibile()
		end
		
		/** \brief Position or orientation changed. */
		func void geometryChanged()
			pCollider.setScale(getElement().getScaling())
		end
		
		
		
		/** \brief Colliders can hit each other. */
		func bool canHitCollider(Collider owner, Collider collider)
			return true
		end
		
		/**
		 * \brief Collision detected.
		 * 
		 * If listeners are present calls collisionResponse() on all listeners expecting them
		 * to handle collision properly. Otherwise for static and kinematic collision response
		 * clears linear and angular velocity. For dynamic collision response nothing is done.
		 */
		func void collisionResponse(Collider owner, CollisionInfo info)
			if pCollisionListeners.getCount() > 0
				pCollisionListeners.forEach(block CollisionListener each
					each.collisionResponse(this, owner, info)
				end)
				
			elif pCollider.getResponseType() != CollisionResponse.dynamic
				owner.setLinearVelocity(Vector.new())
				owner.setAngularVelocity(Vector.new())
			end
		end
		
		/** \brief Collider position and/or orientation changed. */
		func void colliderChanged(Collider owner)
		end
		
		
		
		/** \brief Update component model and skin. */
		protected func void updateModelSkin()
			var Component component = pComponent.getComponent()
			if component == null
				return
			end
			
			var Model model
			var Skin skin
			
			if pUseVendorModel
				if pInputDevice != null
					model = pInputDevice.getVRModel()
					skin = pInputDevice.getVRSkin()
				end
				
			else
				model = pCustomModel
				skin = pCustomSkin
			end
			
			component.setModelAndSkin(model, skin)
			component.setRig(pCustomRig)
		end
		
		/** \brief Update component visible. */
		protected func void updateVisibile()
			var Component component = pComponent.getComponent()
			if component == null
				return
			end
			
			var bool visible = pShowHand and getElement().getVisible()
			
			component.setVisible(visible)
			
			if pCollider != null
				pCollider.setEnabled(visible)
			end
		end
		
		
		
		/** \brief Read behavior from file. */
		func void readFromFile( PersistencyEnvironment env, FileReader reader )
			select reader.readByte() // version
			case 0
				var DVector position = DVector.readFromFile(reader)
				var Quaternion orientation = Quaternion.readFromFile(reader)
				var Vector scaling = Vector.readFromFile(reader)
				
				pCollider.setGeometry(position, orientation, scaling)
				pCollider.setLinearVelocity(Vector.readFromFile(reader))
				pCollider.setAngularVelocity(Vector.readFromFile(reader))
				
			else
				throw EInvalidParam.new("unsupported version")
			end
		end
		
		/** \brief Write behavior to file. */
		func void writeToFile( PersistencyEnvironment env, FileWriter writer )
			writer.writeByte( 0 ) // version
			
			pCollider.getPosition().writeToFile(writer)
			pCollider.getOrientation().writeToFile(writer)
			pCollider.getScale().writeToFile(writer)
			pCollider.getLinearVelocity().writeToFile(writer)
			pCollider.getAngularVelocity().writeToFile(writer)
		end
	end
	
	
	
	var InputDeviceType pInputDeviceType
	var BindingManager pBindingManager
	var ECBehaviorVRPlayspace pVRPlayspace
	var ECBehaviorComponent pComponent
	var ECPBoolean pUseVendorModel
	var ECPBoolean pShowHand
	var ECComposeCollider pCollider
	var Array pListenerFactories
	var ECComposeBTSM pBTSMs
	var String pPrefix
	
	
	
	/** \brief Create behavior element class. */
	func new(BehaviorElementClass eclass, ECBehaviorVRPlayspace vrPlayspace, \
	InputDeviceType inputDeviceType) this(eclass, vrPlayspace, inputDeviceType, \
	eclass.sharedFactoryHelper.defaultBindingManager())
	end
	
	/** \brief Create behavior element class. */
	func new(BehaviorElementClass eclass, ECBehaviorVRPlayspace vrPlayspace, \
	InputDeviceType inputDeviceType, String id) this(eclass, vrPlayspace, inputDeviceType, \
	eclass.sharedFactoryHelper.defaultBindingManager(), id)
	end
	
	/** \brief Create behavior element class. */
	func new(BehaviorElementClass eclass, ECBehaviorVRPlayspace vrPlayspace, \
	InputDeviceType inputDeviceType, String id, String subID) this(eclass, vrPlayspace, \
	inputDeviceType, eclass.sharedFactoryHelper.defaultBindingManager(), id, subID)
	end
	
	/** \brief Create behavior element class. */
	func new(BehaviorElementClass eclass, ECBehaviorVRPlayspace vrPlayspace, \
	InputDeviceType inputDeviceType, String id, String subID, String prefix) \
	this(eclass, vrPlayspace, inputDeviceType, eclass.sharedFactoryHelper.defaultBindingManager(), \
	id, subID, prefix)
	end
	
	/** \brief Create behavior element class. */
	func new(BehaviorElementClass eclass, ECBehaviorVRPlayspace vrPlayspace, \
	InputDeviceType inputDeviceType, BindingManager bindingManager) \
	this(eclass, vrPlayspace, inputDeviceType, bindingManager, "")
	end
	
	/** \brief Create behavior element class. */
	func new(BehaviorElementClass eclass, ECBehaviorVRPlayspace vrPlayspace, \
	InputDeviceType inputDeviceType, BindingManager bindingManager, String id) \
	this(eclass, vrPlayspace, inputDeviceType, bindingManager, id, \
	id.empty() if "vrHand" else "vrHand(" + id + ")")
	end
	
	/** \brief Create behavior element class. */
	func new(BehaviorElementClass eclass, ECBehaviorVRPlayspace vrPlayspace, \
	InputDeviceType inputDeviceType, BindingManager bindingManager, String id, String subID) \
	this(eclass, vrPlayspace, inputDeviceType, bindingManager, id, subID, subID + ".")
	end
	
	/** \brief Create behavior element class. */
	func new(BehaviorElementClass eclass, ECBehaviorVRPlayspace vrPlayspace, \
	InputDeviceType inputDeviceType, BindingManager bindingManager, String id, \
	String subID, String prefix) super(eclass, id)
		if vrPlayspace == null
			throw ENullPointer.new("vrPlayspace")
		end
		if inputDeviceType == null
			throw ENullPointer.new("inputDeviceType")
		end
		if bindingManager == null
			throw ENullPointer.new("bindingManager")
		end
		
		pPrefix = prefix
		pInputDeviceType = inputDeviceType
		pBindingManager = bindingManager
		pVRPlayspace = vrPlayspace
		pListenerFactories = Array.new()
		pBTSMs = ECComposeBTSM.new(eclass, prefix)
		
		pComponent = ECBehaviorComponent.new(eclass, null, subID, prefix + "component.")
		
		eclass.addProperty(pUseVendorModel = ECPBoolean.new(prefix + "useVendorModel", true))
		eclass.addProperty(pShowHand = ECPBoolean.new(prefix + "showHand", true))
		
		pCollider = ECComposeCollider.new(eclass, prefix + "collider.")
		setGhost()
		
		eclass.addBehavior(this)
	end
	
	/** \brief Dispose of behavior. */
	func void dispose()
		pListenerFactories = null
		pVRPlayspace = null
		pBTSMs = null
		super.dispose()
	end
	
	
	
	/**
	 * \brief Prefix.
	 * \version 1.26
	 */
	func String getPrefix()
		return pPrefix
	end
	
	/** \brief Input device type. */
	func InputDeviceType getInputDeviceType()
		return pInputDeviceType
	end
	
	/** \brief Binding manager. */
	func BindingManager getBindingManager()
		return pBindingManager
	end
	
	/** \brief VR Playspace behavior. */
	func ECBehaviorVRPlayspace getVRPlayspace()
		return pVRPlayspace
	end
	
	/** \brief Component behavior. */
	func ECBehaviorComponent getComponent()
		return pComponent
	end
	
	/** \brief Use vendor model. */
	func ECPBoolean getUseVendorModel()
		return pUseVendorModel
	end
	
	/** \brief Show hand. */
	func ECPBoolean getShowHand()
		return pShowHand
	end
	
	/**
	 * \brief Composeable collider for element class.
	 * \version 1.7
	 */
	func ECComposeCollider getCollider()
		return pCollider
	end
	
	/**
	 * \brief Compose behavior trees and state machines.
	 * \version 1.26
	 */
	func ECComposeBTSM getBTSMs()
		return pBTSMs
	end
	
	
	
	/**
	 * \brief Set up collider as ghost collider.
	 * \version 1.7
	 * 
	 * Ghost colliders have empty collision filter and kinematic collision response. They collide
	 * with nothing and are useful to interact with the game world without physically pushing
	 * objects by accident. 
	 */
	func void setGhost()
		pCollider.getPhysicsType().setEnumeration(CollisionResponse.kinematic)
		pCollider.getLocalGravity().setVector(Vector.new())
		pCollider.getWeight().setValue(1)
		pCollider.setCollisionFilter(CollisionFilter.new())
	end
	
	/**
	 * \brief Set up collider as kinematic collider.
	 * \version 1.10
	 * 
	 * Kinematic colliders have kinematic collision response, collision category
	 * BaseGameApp.CollisionFilterBit.geometry and filter BaseGameApp.CollisionFilterBit.dynamic
	 * and BaseGameApp.CollisionFilterBit.particle. They collide with PhysicsElementClass and
	 * SimpleElementClass and allow hands to physically push objects.
	 */
	func void setPhysics()
		pCollider.getPhysicsType().setEnumeration(CollisionResponse.kinematic)
		pCollider.getLocalGravity().setVector(null)
		pCollider.getWeight().setValue(1)
		
		var LayerMask lmCategory = LayerMask.newWith(BaseGameApp.CollisionFilterBit.geometry)
		
		var LayerMask lmFilter = LayerMask.new()
		lmFilter.setBit(BaseGameApp.CollisionFilterBit.dynamic)
		lmFilter.setBit(BaseGameApp.CollisionFilterBit.particle)
		
		pCollider.setCollisionFilter(CollisionFilter.new(lmCategory, lmFilter))
	end
	
	
	
	/** \brief Add listener factory. */
	func void addListenerFactory(ListenerFactory factory)
		if factory == null
			throw ENullPointer.new()
		end
		pListenerFactories.add(factory)
	end
	
	/**
	 * \brief Add listener factory using block.
	 * 
	 * Block receives as parameter Instance and returns Listener.
	 */
	func void addListenerFactory(Block blockFactory)
		pListenerFactories.add(BlockListenerFactory.new(blockFactory))
	end
	
	/** \brief Visit listener factories with block with argument ListenerFactory. */
	func void forEachListenerFactory(Block ablock)
		pListenerFactories.forEach(ablock)
	end
	
	/** \brief Create listeners from factories adding them to behavior instance. */
	func void createListeners(Instance instance)
		pListenerFactories.forEach(block ListenerFactory each
			instance.addListener(each.createListener(instance))
		end)
	end
	
	
	
	/** \brief Get instance in element from owner element class. */
	func Instance instance(BehaviorElement element)
		return element.getInstanceAt(getInstanceIndex()) cast Instance
	end
	
	
	
	/**
	 * \brief Get behavior in element class or \em null if absent.
	 * 
	 * Use this method to check if a particular BehaviorElementClass contains a behavior
	 * of type ECBehaviorVRHand.
	 */
	static func ECBehaviorVRHand getBehaviorIn(BehaviorElementClass eclass)
		return eclass.findBehavior(block ECBehaviorVRHand each
			return true
		end) cast ECBehaviorVRHand
	end
	
	/**
	 * \brief Get behavior with id in element class or \em null if absent.
	 * 
	 * Use this method to check if a particular BehaviorElementClass contains a behavior
	 * of type ECBehaviorVRHand with specific identifier.
	 */
	static func ECBehaviorVRHand getBehaviorIn(BehaviorElementClass eclass, String id)
		return eclass.findBehavior(block ECBehaviorVRHand each
			return each.getID().equals(id)
		end) cast ECBehaviorVRHand
	end
	
	/**
	 * \brief Get list of all behaviors in element.
	 * 
	 * Returns list contains ECBehaviorVRHand behaviors in the order they have
	 * been created in the element.
	 */
	static func Array getAllBehaviorsIn(BehaviorElementClass eclass)
		return eclass.collectBehaviors(block ECBehaviorVRHand each
			return true
		end)
	end
	
	
	
	/**
	 * \brief Get instance in element or \em null if absent.
	 * 
	 * Use this method to check if a particular BehaviorElement contains a behavior instance
	 * of type ECBehaviorVRHand.Instance . If more than one instance is present returns
	 * the first instance.
	 */
	static func Instance getInstanceIn(BehaviorElement element)
		return element.findInstance(block Instance each
			return true
		end) cast Instance
	end
	
	/**
	 * \brief Get instance with id in element or \em null if absent.
	 * 
	 * Use this method to check if a particular BehaviorElement contains a behavior instance
	 * of type ECBehaviorVRHand.Instance with specific identifier.
	 */
	static func Instance getInstanceIn(BehaviorElement element, String id)
		return element.findInstance(block Instance each
			return each.getECBehavior().getID().equals(id)
		end) cast Instance
	end
	
	/**
	 * \brief Get list of all instances in element.
	 * 
	 * Returns list contains ECBehaviorVRHand.Instance instances in the order they have
	 * been created in the element.
	 */
	static func Array getAllInstancesIn(BehaviorElement element)
		return element.collectInstances(block Instance each
			return true
		end)
	end
	
	
	
	/** \brief Create Behavior instance. */
	func ECBehaviorInstance createInstance(BehaviorElement element)
		return Instance.new(this, element)
	end
end
