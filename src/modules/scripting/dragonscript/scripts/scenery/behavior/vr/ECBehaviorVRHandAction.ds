/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */


namespace Dragengine.Scenery

pin Dragengine.ConversationSystem
pin Dragengine.Gui
pin Dragengine.LoadSave
pin Dragengine.Preloading
pin Dragengine.Utils
pin Dragengine.BehaviorTreeSystem
pin Dragengine.StateMachineSystem


/**
 * \brief Behavior adding Action support to VR hands.
 * \version 1.10
 * 
 * Allows instance of BaseVRHandAction to be assigned to actor VR hands. During thinking
 * the Action is called.
 * 
 * Actions allow actors to perform a specific, well defined and enclosed action like
 * interacting with an object for each hand separately. These actions run after the main
 * actor action as provided by ECBehaviorActorAIAction. VR hand actions are typically
 * only suitable for the player.
 * 
 * Supports these optional behaviors:
 * - ECBehaviorConversationActor
 * 
 * Requires these behaviors:
 * - ECBehaviorVRHand
 * 
 * \see https://developer.dragondreams.ch/wiki/doku.php/dragengine:modules:dragonscript:behavior_vrhandaction
 */
class ECBehaviorVRHandAction extends DefaultECBehavior
	/** \brief Factory for creating action. */
	interface ActionFactory
		/** \brief Create action for behavior instance. */
		func BaseVRHandAction createAction(Instance instance)
	end
	
	/**
	 * \brief Behavior factory.
	 * \version 1.25
	 * 
	 * Automatically assigns these behaviors if present before adding:
	 * - Required: \ref ECBehaviorVRHand
	 * - Optional: \ref ECBehaviorConversationActor
	 * 
	 * Example XML element class:
	 * \code{.xml}
	 * <behavior type='ECBehaviorVRHandAction'>
	 *   <!-- required: use vr hand with id. -->
	 *   <string name='vrHand'>right</string>
	 *   
	 *   <!-- optional: add behavior trees. default adds all behavior trees. -->
	 *   <list name='behaviorTrees'>
	 *     <string/> <!-- add behavior with empty identifier -->
	 *     <string>default</string> <!-- add behavior with 'default' identifier -->
	 *   </list>
	 * 
	 *   <!-- optional: add state machines. default adds all state machines. -->
	 *   <list name='stateMachines'>
	 *     <string/> <!-- add behavior with empty identifier -->
	 *     <string>default</string> <!-- add behavior with 'default' identifier -->
	 *   </list>
	 * </behavior>
	 * 
	 * <!-- for adding multiple behaviors use unique identifiers -->
	 * <behavior type='ECBehaviorVRHandAction' id='second'>
	 *   ...
	 * </behavior>
	 * \endcode
	 * 
	 * Element class properties added by the behavior can also be set directly inside the tag
	 * be removing the property name prefix and starting with a "." (for example ".propertyName").
	 */
	class Factory extends DefaultBehaviorFactory
		func new() super("ECBehaviorVRHandAction")
		end
		
		func ECBehavior addBehavior(BehaviorElementClass eclass, String id, Dictionary parameters)
			var ECBehaviorVRHandAction behavior = ECBehaviorVRHandAction.new(eclass,\
				ECBehaviorVRHand.getBehaviorIn(eclass, parameters.getAt("vrHand") cast String),\
				ECBehaviorConversationActor.getBehaviorIn(eclass), id)
			
			getHelper().allBTSM(behavior.getBTSMs(), eclass, parameters)
			
			getHelper().setPropertiesFromParameters(eclass, parameters, "vrHandAction", id)
			return behavior
		end
	end
	
	/** \brief Behavior instance. */
	class Instance extends DefaultECBehaviorInstance
		/**
		 * \brief Behavior tree action "forceField{(id)}.set".
		 * \version 1.26
		 */
		private class BTASet extends BTSMActionCondition
			var Instance pInstance
			
			func new(Instance instance)
				pInstance = instance
			end
			
			func BTResult runActionShared(Object context, Dictionary parameters)
				var Object value
				
				value = parameters.getAt("action.conversationWait", null)
				if value != null
					pInstance.setActionConversationWait(value.equals("true"))
				end
				
				return BTResult.success
			end
			
			func BTResult runAction(BTContext context, Dictionary parameters)
				var Object value
				
				value = parameters.getAt("action.stateMachine", null)
				if value != null
					var String basePath = context.getBehaviorTree().getFilename()
					if basePath != null
						value = File.absolutePath(value cast String,\
							File.new(basePath).getParent().getPath()).getPath()
					end
					pInstance.setAction(BAAVRHandStateMachine.new(pInstance.getECBehavior().\
						getLoadStateMachine().loadFromFile(value cast String)))
				end
				
				return runActionShared(context, parameters)
			end
			
			func void runAction(SMContext context, Dictionary parameters)
				var Object value
				
				value = parameters.getAt("action.stateMachine", null)
				if value != null
					var String basePath = context.getStateMachine().getFilename()
					if basePath != null
						value = File.absolutePath(value cast String,\
							File.new(basePath).getParent().getPath()).getPath()
					end
					pInstance.setAction(BAAVRHandStateMachine.new(pInstance.getECBehavior().\
						getLoadStateMachine().loadFromFile(value cast String)))
				end
				
				runActionShared(context, parameters)
			end
		end
		
		/**
		 * \brief Behavior tree action/condition "forceField{(id)}.check".
		 * \version 1.26
		 */
		private class BTACheck extends BTSMActionCondition
			var Instance pInstance
			var String pPrefix
			
			func new(Instance instance, String prefix)
				pInstance = instance
				pPrefix = prefix
			end
			
			func BTResult runActionShared(Object context, Dictionary parameters)
				return check("", parameters) if BTResult.success\
					else (parameters.has("wait") if BTResult.running else BTResult.failure)
			end
			
			func bool evaluateConditionShared(Object context, Dictionary parameters)
				return check(pPrefix, parameters)
			end
			
			func bool check(String prefix, Dictionary parameters)
				var bool result = true
				var Object value
				
				value = parameters.getAt(prefix + "action.conversationWait", null)
				if value != null
					result &= pInstance.getActionConversationWait() == value.equals("true")
				end
				
				return result
			end
		end
		
		/** \brief Hand collider listener forwarding to Action. */
		class HandColliderListener extends ECBehaviorVRHand.DefaultCollisionListener
			var Instance pInstance
			
			func new(Instance instance)
				pInstance = instance
			end
			
			func void collisionResponse(ECBehaviorVRHand.Instance instance,\
			Collider collider, CollisionInfo info)
				if pInstance.getAction() != null
					pInstance.getAction().collisionResponse(collider, info)
				end
			end
		end
		
		/** \brief Conversation actor listener forwarding to Action/AI. */
		class ConvoActorListener extends ECBehaviorConversationActor.DefaultListener
			var Instance pInstance
			
			func new(Instance instance)
				pInstance = instance
			end
			
			func bool wait(ECBehaviorConversationActor.Instance instance)
				if pInstance.getActionConversationWait()
					return true
					
				elif pInstance.getAction() != null
					return pInstance.getAction().conversationWait()
					
				else
					return false
				end
			end
		end
		
		
		var ECBehaviorVRHandAction pECBehavior
		var ECBehaviorVRHand.Instance pVRHand
		var ECBehaviorConversationActor.Instance pConversationActor
		
		var bool pActionConversationWait
		var BaseVRHandAction pAction
		
		
		/** \brief Create behavior instance. */
		func new(ECBehaviorVRHandAction ecbehavior, BehaviorElement element) super(element)
			pECBehavior = ecbehavior
			
			setRequiresEnterFrame(true)
		end
		
		/** \brief Dispose of behavior instance. */
		func void dispose()
			setActionAndDispose(null)
			
			pConversationActor = null
			pVRHand = null
			super.dispose()
		end
		
		
		/** \brief Initialize behavior from stub. */
		func void init(StubElement stub)
			var BehaviorElement element = getElement()
			
			if pECBehavior.getVRHand() != null
				pVRHand = pECBehavior.getVRHand().instance(element)
			end
			if pECBehavior.getConversationActor() != null
				pConversationActor = pECBehavior.getConversationActor().instance(element)
			end
			
			if pVRHand != null
				pVRHand.addCollisionListener(HandColliderListener.new(this))
			end
			if pConversationActor != null
				pConversationActor.addListener(ConvoActorListener.new(this))
			end
			
			if pECBehavior.getBTSMs().hasAny()
				var String prefix = pECBehavior.getPrefix()
				var ECComposeBTSM.Instance btsms = ECComposeBTSM.Instance.new(element, pECBehavior.getBTSMs())
				btsms.addAllAction(prefix, "set", BTASet.new(this))
				btsms.addAllActionCondition(prefix, "check", BTACheck.new(this, prefix))
			end
			
			var ActionFactory factory = pECBehavior.getActionFactory()
			var String factoryName = pECBehavior.getAction().getValueOrNull(stub)
			if factoryName != null
				factory = pECBehavior.getPersistency().getFactoryNamed(factoryName) cast ActionFactory
			end
			setAction(factory.createAction(this))
		end
		
		
		/** \brief Behavior. */
		func ECBehaviorVRHandAction getECBehavior()
			return pECBehavior
		end
		
		/** \brief Conversation actor if present. */
		func ECBehaviorConversationActor.Instance getConversationActor()
			return pConversationActor
		end
		
		
		/** \brief Active action or \em null. */
		func BaseVRHandAction getAction()
			return pAction
		end
		
		/**
		 * \brief Set active action or \em null.
		 * 
		 * Does not call dispose() on old action if present.
		 */
		func void setAction(BaseVRHandAction action)
			if action == pAction
				return
			end
			
			if pAction != null
				pAction.deactivate()
			end
			
			pAction = action
			pActionConversationWait = false
			
			if action != null
				action.activate(getElement(), pVRHand)
			end
			
			setRequiresThink(action != null)
		end
		
		/**
		 * \brief Set active action or \em null.
		 * 
		 * Calls dispose() on old action if present.
		 */
		func void setActionAndDispose(BaseVRHandAction action)
			var BaseVRHandAction disposeAction = pAction
			setAction(null)
			if disposeAction != null
				disposeAction.dispose()
			end
		end
		
		/**
		 * \brief Action causes conversation to wait.
		 * \version 1.26
		 */
		public func bool getActionConversationWait()
			return pActionConversationWait
		end
		
		/**
		 * \brief Set if action causes conversation to wait.
		 * \version 1.26
		 * 
		 * Reset to false when action is changed.
		 */
		func void setActionConversationWait(bool wait)
			pActionConversationWait = wait
		end
		
		
		/** \brief Frame update started. */
		func void enterFrame()
			if pAction != null
				pAction.enterFrame()
			end
		end
		
		/**
		 * \brief Think about what to do for the next frame update.
		 * 
		 * Calls BaseVRHandAction.think().
		 */
		func void think(float elapsed)
			if pAction != null
				pAction.think(elapsed)
			end
		end
		
		/**
		 * \brief Post thinking after physics processing is finished.
		 * 
		 * If actor is player controlled calls BaseVRHandAction.playerPostThink(float)
		 * and BaseVRHandAction.postThink(float). If actor is not player controlled only
		 * BaseVRHandAction.postThink(float) is called.
		 */
		func void postThink(float elapsed)
			if pAction != null
				pAction.postThink(elapsed)
			end
		end
		
		/** \brief Add element to game world. */
		func void addToGameWorld()
			if pAction != null
				pAction.enteredGameWorld()
			end
		end
		
		/** \brief Remove element from game world. */
		func void removeFromGameWorld()
			if pAction != null
				pAction.leftGameWorld()
			end
		end
		
		
		/** \brief Read behavior from file. */
		func void readFromFile(PersistencyEnvironment env, FileReader reader)
			select reader.readByte() // version
			case 0
				readFromFileV0(env, reader)
				
			case 1
				var PersistencyFlags flags = PersistencyFlags.new(1, reader)
				pActionConversationWait = flags.getAt(0)
				
				readFromFileV0(env, reader)
				
			else
				throw EInvalidParam.new("unsupported version")
			end
			
			setRequiresThink(pAction != null)
		end
		
		private func void readFromFileV0(PersistencyEnvironment env, FileReader reader)
			pAction = env.readObjectOrNull(reader) cast BaseVRHandAction
			if pAction != null
				pAction.activateWhileLoading(getElement(), pVRHand)
			end
		end
		
		/** \brief Write behavior to file. */
		func void writeToFile(PersistencyEnvironment env, FileWriter writer)
			writer.writeByte(1)
			
			var PersistencyFlags flags = PersistencyFlags.new(1)
			flags.setAt(0, pActionConversationWait)
			flags.writeToFile(writer)
			
			env.writeObjectOrNull(writer, pAction)
		end
	end
	
	
	
	var ECBehaviorVRHand pVRHand
	var ECBehaviorConversationActor pConversationActor
	var ActionFactory pActionFactory
	var ECPString pAction
	var ECComposeBTSM pBTSMs
	var String pPrefix
	var LoadStateMachine pLoadStateMachine
	var Persistency pPersistency
	
	
	/**
	 * \brief Create behavior element class.
	 * 
	 * These values are optional and can be null: \em conversationActor.
	 * 
	 * The default Action is BVRHAEmpty.
	 */
	func new(BehaviorElementClass eclass, ECBehaviorVRHand vrHand, \
	ECBehaviorConversationActor conversationActor, String id) \
	this(eclass, vrHand, conversationActor, id, "vrHandAction(" + id + ").")
	end
	
	func new(BehaviorElementClass eclass, ECBehaviorVRHand vrHand, \
	ECBehaviorConversationActor conversationActor, String id, String prefix) super(eclass, id)
		if vrHand == null
			throw ENullPointer.new("vrHand")
		end
		
		pPrefix = prefix
		pVRHand = vrHand
		pConversationActor = conversationActor
		pActionFactory = BaseVRHandAction.Factory.new()
		pBTSMs = ECComposeBTSM.new(eclass, prefix)
		
		var Loaders loaders = eclass.sharedFactoryHelper.defaultLoaders()
		if loaders != null
			pLoadStateMachine = loaders.getStateMachine()
			pPersistency = loaders.getPersistency()
		end
		
		eclass.addProperty(pAction = ECPString.new(prefix + "action", null))
		
		eclass.addBehavior(this)
	end
	
	/** \brief Dispose of behavior. */
	func void dispose()
		pVRHand = null
		pConversationActor = null
		pActionFactory = null
		pBTSMs = null
		super.dispose()
	end
	
	
	
	/**
	 * \brief Prefix.
	 * \version 1.26
	 */
	func String getPrefix()
		return pPrefix
	end
	
	/** \brief Collider AI behavior or null. */
	func ECBehaviorVRHand getVRHand()
		return pVRHand
	end
	
	/** \brief Set collider AI behavior or null. */
	func void setColliderAI(ECBehaviorVRHand vrHand)
		pVRHand = vrHand
	end
	
	/** \brief Conversation actor behavior or null. */
	func ECBehaviorConversationActor getConversationActor()
		return pConversationActor
	end
	
	/**
	 * \brief Set conversation actor behavior or null.
	 * 
	 * If set conversation conditions and commands are added.
	 */
	func void setConversationActor(ECBehaviorConversationActor conversationActor)
		pConversationActor = conversationActor
	end
	
	/** \brief Action factory. */
	func ActionFactory getActionFactory()
		return pActionFactory
	end
	
	/** \brief Set action factory. */
	func void setActionFactory(ActionFactory factory)
		if factory == null
			throw ENullPointer.new()
		end
		pActionFactory = factory
	end
	
	/**
	 * \brief Action to use instead of factory action.
	 * \version 1.26
	 */
	func ECPString getAction()
		return pAction
	end
	
	/**
	 * \brief Compose behavior trees and state machines.
	 * \version 1.26
	 */
	func ECComposeBTSM getBTSMs()
		return pBTSMs
	end
	
	/**
	 * \brief State machine loader.
	 * \version 1.26
	 */
	func LoadStateMachine getLoadStateMachine()
		return pLoadStateMachine
	end
	
	/**
	 * \brief Set state machine loader.
	 * \version 1.26
	 */
	func void setLoadStateMachine(LoadStateMachine loader)
		if loader == null
			throw ENullPointer.new()
		end
		pLoadStateMachine = loader
	end
	
	/**
	 * \brief Persistency used to create action.
	 * \version 1.26
	 */
	func Persistency getPersistency()
		return pPersistency
	end
	
	/**
	 * \brief Set persistency used to create action.
	 * \version 1.26
	 */
	func void setPersistency(Persistency persistency)
		if persistency == null
			throw ENullPointer.new()
		end
		pPersistency = persistency
	end
	
	
	
	/** \brief Get instance in element from owner element class. */
	func Instance instance(BehaviorElement element)
		return element.getInstanceAt(getInstanceIndex()) cast Instance
	end
	
	
	
	/**
	 * \brief Get behavior in element class or \em null if absent.
	 * 
	 * Use this method to check if a particular BehaviorElementClass contains a behavior
	 * of type ECBehaviorVRHandAction.
	 */
	static func ECBehaviorVRHandAction getBehaviorIn(BehaviorElementClass eclass)
		return eclass.findBehavior(block ECBehaviorVRHandAction each
			return true
		end) cast ECBehaviorVRHandAction
	end
	
	/**
	 * \brief Get behavior with id in element class or \em null if absent.
	 * 
	 * Use this method to check if a particular BehaviorElementClass contains a behavior
	 * of type ECBehaviorVRHandAction with specific identifier.
	 */
	static func ECBehaviorVRHandAction getBehaviorIn(BehaviorElementClass eclass, String id)
		return eclass.findBehavior(block ECBehaviorVRHandAction each
			return each.getID().equals(id)
		end) cast ECBehaviorVRHandAction
	end
	
	/**
	 * \brief Get list of all behaviors in element.
	 * 
	 * Returns list contains ECBehaviorVRHandAction behaviors in the order they have
	 * been created in the element.
	 */
	static func Array getAllBehaviorsIn(BehaviorElementClass eclass)
		return eclass.collectBehaviors(block ECBehaviorVRHandAction each
			return true
		end)
	end
	
	
	
	/**
	 * \brief Get instance in element or \em null if absent.
	 * 
	 * Use this method to check if a particular BehaviorElement contains a behavior instance
	 * of type ECBehaviorVRHandAction.Instance . If more than one instance is present returns
	 * the first instance.
	 */
	static func Instance getInstanceIn(BehaviorElement element)
		return element.findInstance(block Instance each
			return true
		end) cast Instance
	end
	
	/**
	 * \brief Get instance with id in element or \em null if absent.
	 * 
	 * Use this method to check if a particular BehaviorElement contains a behavior instance
	 * of type ECBehaviorVRHandAction.Instance with specific identifier.
	 */
	static func Instance getInstanceIn(BehaviorElement element, String id)
		return element.findInstance(block Instance each
			return each.getECBehavior().getID().equals(id)
		end) cast Instance
	end
	
	/**
	 * \brief Get list of all instances in element.
	 * 
	 * Returns list contains ECBehaviorVRHandAction.Instance instances in the order they have
	 * been created in the element.
	 */
	static func Array getAllInstancesIn(BehaviorElement element)
		return element.collectInstances(block Instance each
			return true
		end)
	end
	
	
	
	/** \brief Create Behavior instance. */
	func ECBehaviorInstance createInstance(BehaviorElement element)
		return Instance.new(this, element)
	end
end
