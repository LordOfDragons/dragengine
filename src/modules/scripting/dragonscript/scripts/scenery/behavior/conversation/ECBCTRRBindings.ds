/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */


namespace Dragengine.Scenery

pin Dragengine.Commands
pin Dragengine.Gui.Designers
pin Dragengine.LoadSave
pin Dragengine.Preloading
pin Dragengine.Utils
pin Dragengine.ConversationSystem
pin Dragengine.Utils.StyledText.Definition


/**
 * \brief Behavior element behavior adding bindings tag resolving using CTRRBinding.
 * 
 * Adds a CTRRBinding rule to ECBehaviorConversation or ECBehaviorConversationActor.
 * 
 * Element class properties have the prefix "ctrrBinding.".
 * 
 * This behavior does require the element class to be persistable (setPersistable).
 */
class ECBCTRRBindings extends DefaultECBehavior
	/**
	 * \brief Behavior factory.
	 * \ref 1.25
	 * 
	 * Automatically assigns these behaviors if present before adding:
	 * - Required: \ref ECBehaviorConversationActor
	 * 
	 * Example XML element class:
	 * \code{.xml}
	 * <behavior type='ECBCTRRBindings'>
	 *   <!-- optional: use BaseGameApp command mananager. game can add more supported values. default is 'default' -->
	 *   <string name='commandManager'>default</string>
	 * 
	 *   <!-- optional: use BaseGameApp binding manager. game can add more supported values. default is 'default' -->
	 *   <string name='bindingManager'>default</string>
	 * 
	 *   <!-- optional: use BaseGameApp subtitle theme. game can add more supported values.
	 *                  default is 'default'. also supported is value 'path:/path/to/theme.guitheme' -->
	 *   <string name='subtitleTheme'>default</string>
	 * </behavior>
	 * \endcode
	 */
	class Factory implements BehaviorFactory
		func new()
		end
		
		func String factoryId()
			return "ECBCTRRBindings"
		end
		
		func ECBehavior addBehavior(BehaviorElementClass eclass, String id, Dictionary parameters)
			var CommandManager commandManager
			if parameters.has("commandManager")
				commandManager = getCommandManager(parameters.getAt("commandManager") cast String)
			end
			
			var BindingManager bindingManager
			if parameters.has("bindingManager")
				bindingManager = getBindingManager(parameters.getAt("bindingManager") cast String)
			end
			
			var GuiTheme subtitleTheme
			if parameters.has("subtitleTheme")
				subtitleTheme = getSubtitleTheme(parameters.getAt("subtitleTheme") cast String)
			end
			
			return ECBCTRRBindings.new(eclass, ECBehaviorConversationActor.getBehaviorIn(eclass),\
				commandManager, bindingManager, subtitleTheme)
		end
		
		/**
		 * \brief Command manager matching value.
		 * 
		 * Default implementation returns \ref BaseGameApp#getCommandManager() for value 'default'
		 * and null for all other values. Overwrite to accept other values.
		 */
		func CommandManager getCommandManager(String value)
			if value.equals("default")
				var BaseGameApp app = BaseGameApp.getApp()
				if app != null
					return app.getCommandManager()
				end
			end
			return null
		end
		
		/**
		 * \brief Binding manager matching value.
		 * 
		 * Default implementation returns \ref BaseGameApp#getTriggerTable() for value 'default'
		 * and null for all other values. Overwrite to accept other values.
		 */
		func BindingManager getBindingManager(String value)
			if value.equals("default")
				var BaseGameApp app = BaseGameApp.getApp()
				if app != null
					return app.getBindingManager()
				end
			end
			return null
		end
		
		/**
		 * \brief Subtitle gui theme matching value.
		 * 
		 * Default implementation returns \ref WindowSubTitle#getGuiTheme()
		 * on \ref BaseGameApp#getWindowSubTitle() for value 'default', loads gui theme if value
		 * begins with 'path:' or null for all other values. Overwrite to accept other values.
		 */
		func GuiTheme getSubtitleTheme(String value)
			if value.equals("default")
				var BaseGameApp app = BaseGameApp.getApp()
				if app != null
					return app.getWindowSubTitle().getGuiTheme()
				end
				
			elif value.startsWith("path:")
				var BaseGameApp app = BaseGameApp.getApp()
				if app != null
					return app.getLoaders().getGuiTheme().loadFromFile(value.substring(5))
				end
			end
			return null
		end
	end
	
	/** \brief Behavior instance. */
	class Instance extends DefaultECBehaviorInstance
		private var ECBCTRRBindings pECBehavior
		private var ECBehaviorConversationActor.Instance pConversationActor
		
		
		/** \brief Create element. */
		public func new( ECBCTRRBindings ecbehavior, BehaviorElement element ) super( element )
			this.pECBehavior = ecbehavior
		end
		
		/** \brief Dispose of behavior instance. */
		public func void dispose()
			this.pConversationActor = null
			super.dispose()
		end
		
		
		
		/** \brief Initialize element from stub. */
		public func void init( StubElement stub )
			this.pConversationActor = this.pECBehavior.getConversationActor().instance( this.getElement() )
			this.pConversationActor.getTagResolver().addRule( "binding", this.createRule( stub ) )
		end
		
		/** \brief Create tag resolver rule. */
		protected func CTRRBinding createRule( StubElement stub )
			var DefaultWidgetDesigner designer = this.pECBehavior.getSubtitleTheme() \
				.getWidgetDesigner( "Label.SubTitleBoxText.Text.Binding" ) cast DefaultWidgetDesigner
			
			var STDStyle style = STDStyle.new( "binding" )
			style.setFont( designer.getDesignNormal().getFont() )
			style.setTextColor( designer.getDesignNormal().getTextColor() )
			
			return CTRRBinding.new( this.pECBehavior.getCommandManager(), \
				this.pECBehavior.getBindingManager(), style )
		end
		
		
		
		/** \brief Behavior. */
		public func ECBCTRRBindings getECBehavior()
			return this.pECBehavior
		end
		
		/** \brief Conversation actor behavior instance. */
		public func ECBehaviorConversationActor.Instance getConversationActor()
			return this.pConversationActor
		end
	end
	
	
	
	private var ECBehaviorConversationActor pConversationActor
	private var CommandManager pCommandManager
	private var BindingManager pBindingManager
	private var GuiTheme pSubtitleTheme
	
	
	
	/** \brief Create behavior element class. */
	public func new( BehaviorElementClass eclass, ECBehaviorConversationActor conversationActor ) \
	this( eclass, conversationActor, BaseGameApp.getApp().getCommandManager(), \
	BaseGameApp.getApp().getBindingManager(), BaseGameApp.getApp().getWindowSubTitle().getGuiTheme() )
	end
	
	public func new( BehaviorElementClass eclass, ECBehaviorConversationActor conversationActor, \
	CommandManager commandManager, BindingManager bindingManager, GuiTheme subtitleTheme ) super( eclass )
		if conversationActor == null
			throw ENullPointer.new( "conversationActor" )
		end
		if commandManager == null
			throw ENullPointer.new( "commandManager" )
		end
		if bindingManager == null
			throw ENullPointer.new( "bindingManager" )
		end
		if subtitleTheme == null
			throw ENullPointer.new( "subtitleTheme" )
		end
		
		this.pConversationActor = conversationActor
		this.pCommandManager = commandManager
		this.pBindingManager = bindingManager
		this.pSubtitleTheme = subtitleTheme
		
		eclass.addBehavior( this )
	end
	
	/** \brief Dispose of behavior. */
	public func void dispose()
		this.pConversationActor = null
		super.dispose()
	end
	
	
	
	/** \brief Conversation actor behavior or null. */
	public func ECBehaviorConversationActor getConversationActor()
		return this.pConversationActor
	end
	
	/** \brief Command manager used to add CTRRBinding or null if not used. */
	public func CommandManager getCommandManager()
		return this.pCommandManager
	end
	
	/** \brief Set command manager used to add CTRRBinding or null if not used. */
	public func void setCommandManager( CommandManager commandManager )
		this.pCommandManager = commandManager
	end
	
	/** \brief Binding manager used to add CTRRBinding or null if not used. */
	public func BindingManager getBindingManager()
		return this.pBindingManager
	end
	
	/** \brief Set binding manager used to add CTRRBinding or null if not used. */
	public func void setBindingManager( BindingManager bindingManager )
		this.pBindingManager = bindingManager
	end
	
	/** \brief Gui theme to use for sub title box creation. */
	public func GuiTheme getSubtitleTheme()
		return this.pSubtitleTheme
	end
	
	/** \brief Set gui theme to use for sub title box creation. */
	public func void setSubtitleTheme( GuiTheme guiTheme )
		this.pSubtitleTheme = guiTheme
	end
	
	
	
	/** \brief Get instance in element from owner element class. */
	public func Instance instance( BehaviorElement element )
		return element.getInstanceAt( this.getInstanceIndex() ) cast Instance
	end
	
	
	
	/**
	 * \brief Get behavior in element class or \em null if absent.
	 * 
	 * Use this method to check if a particular BehaviorElementClass contains a behavior
	 * of type ECBCTRRBindings.
	 */
	static public func ECBCTRRBindings getBehaviorIn( BehaviorElementClass eclass )
		return eclass.findBehavior( block ECBCTRRBindings each
			return true
		end ) cast ECBCTRRBindings
	end
	
	/**
	 * \brief Get instance in element or \em null if absent.
	 * 
	 * Use this method to check if a particular BehaviorElement contains a behavior instance
	 * of type ECBCTRRBindings.Instance .
	 */
	static public func Instance getInstanceIn( BehaviorElement element )
		return element.findInstance( block Instance each
			return true
		end ) cast Instance
	end
	
	
	
	/** \brief Create Behavior instance. */
	public func ECBehaviorInstance createInstance( BehaviorElement element )
		return Instance.new( this, element )
	end
end
