/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */


namespace Dragengine.Scenery

pin Dragengine.Gui
pin Dragengine.LoadSave
pin Dragengine.Preloading
pin Dragengine.Utils
pin Dragengine.ConversationSystem
pin Dragengine.TriggerSystem


/**
 * \brief Behavior element behavior adding conversation support.
 * 
 * Loads a conversation resource file and allows to start a conversation using a user
 * defined topic. Conversations are loaded once so multiple behaviors can load the same
 * conversation file without doing the actual loading multiple times.
 * 
 * By default the conversation is started without adding any actors.
 * 
 * If the "addPlayer" stub property is not empty string the BaseGameApp.getPlayerControlledActor()
 * actor is added to the conversation as first actor using the property value as its alias id.
 * If the actor does not have a BaseActorConversation assigned an exception is thrown.
 * The default element class property sets AddPlayer to "player".
 * 
 * If ECBehaviorConversationActor is present and has a conversation actor it is added as
 * second actor to the conversation using the property valus as id. Additional actors can
 * be added using conversation actions.
 * 
 * If the "directCamera" stub property is true the conversation does direct the camera using
 * ConversationCameraDirector instance. The default element class property sets DirectCamera
 * to true. Set this property to false to keep the camera unchanged which is required to do
 * first person camera animations.
 * 
 * Starting the conversation can be done by calling startConversation(). This can be
 * done by other behaviors or a subclass. Care has to be taken when starting conversation
 * if another conversation is running. Actors are not allowed to be involved in more than
 * one conversation but any number of conversation can be running at the same time as long
 * as this rule is fulfilled.
 * 
 * To protect against this situation the method canStartConversation() is provided.
 * It checks if the player and this behavior element have a ConversationActor and are
 * both not involved in a conversation (given they are used for the conversation).
 * 
 * A typical use pattern is to start a conversation with a suitable element if the player
 * "uses" said element. The code example below shows how this can be done in a simple way.
 * 
 * \code{.ds}
 * // this method is assumed to be called by the player implementation when he uses
 * // an element. this method is usually part of an ElementVisitor subclass
 * func void visitBehaviorElement(BehaviorElement element)
 *    var ECBehaviorConversation.Instance instance = ECBehaviorConversation.getInstanceIn(element)
 *    if instance != null and instance.canStartConversation()
 *        instance.startConversation()
 *    end
 * end
 * \endcode
 * 
 * It checks if a behavior element has the ECBehaviorConversation behavior present.
 * If this is the case it checks if the conversation can be started and starts it.
 * 
 * Another way to start a conversation is using the triggerConversation. If this trigger
 * expression is not empty it will be used to start the conversation if the trigger
 * expression evaluates to true. The method canStartConversation() is used to not check
 * if the conversation is possible. If the check fails an exception is thrown to not
 * silently not start a conversation.
 * 
 * This method is typically used to trigger conversation if the player enters a
 * TriggerTouch or he finished a sequence of actions ending in firing a trigger.
 * 
 * This element behavior can be present only once in a BehaviorElement. Trying to add more
 * than one instance results in an exception thrown.
 * 
 * Element class properties have the prefix "conversation.".
 * 
 * This behavior does require the element class to be persistable (setPersistable).
 * 
 * \see https://developer.dragondreams.ch/wiki/doku.php/dragengine:modules:dragonscript:behavior_conversation
 */
class ECBehaviorConversation extends DefaultECBehavior
	/**
	 * \brief Behavior factory.
	 * \version 1.25
	 * 
	 * Automatically assigns these behaviors if present before adding:
	 * - Optional: \ref ECBehaviorConversationActor
	 * 
	 * Example XML element class:
	 * \code{.xml}
	 * <behavior type='ECBehaviorConversation'>
	 *   <!-- optional: use BaseGameApp trigger table. game can add more supported values.
	 *                  default is 'default' -->
	 *   <string name='triggerTable'>default</string>
	 *   
	 *   <!-- optional: identifier of ECBehaviorTriggered to synchronize with or empty
	 *                  string to not synchronize. default is empty string. -->
	 *   <string name='trigger.synchronize'>other</string>
	 * 
	 *   <!-- optional: use BaseGameApp player controllable actor.
	 *                  game can add more supported values. default is 'default' -->
	 *   <string name='playerControllableActor'>default</string>
	 * 
	 *   <!-- optional: use BaseGameApp simple conversation converter.
	 *                  game can add more supported values. default is 'default' -->
	 *   <string name='simpleConversationConverter'>default</string>
	 * </behavior>
	 * 
	 * <!-- for adding multiple behaviors use unique identifiers -->
	 * <behavior type='ECBehaviorConversation' id='second'>
	 *   ...
	 * </behavior>
	 * \endcode
	 * 
	 * Element class properties added by the behavior can also be set directly inside the tag
	 * be removing the property name prefix and starting with a "." (for exampler ".propertyName").
	 */
	class Factory implements BehaviorFactory
		func new()
		end
		
		func String factoryId()
			return "ECBehaviorConversation"
		end
		
		func ECBehavior addBehavior(BehaviorElementClass eclass, String id, Dictionary parameters)
			var ECBehaviorConversation behavior = ECBehaviorConversation.new(\
				eclass, BaseGameApp.getApp().getLoaders(),\
				getTriggerTableFor(parameters.getAt("triggerTable", "default") cast String),\
				getPlayerControllableActorFor(parameters.getAt("playerControllableActor", "default") cast String), id)
			
			behavior.setConversationActor(ECBehaviorConversationActor.getBehaviorIn(eclass))
			
			if parameters.has("simpleConversationConverter")
				behavior.setSimpleConversationConverter(getSimpleConversationConverterFor(\
					parameters.getAt("simpleConversationConverter") cast String))
			end
			
			behavior.getTriggered().setSynchronize(eclass,\
				parameters.getAt("trigger.synchronize", null) cast String)
			
			BehaviorElementClass.sharedFactoryHelper.setPropertiesFromParameters(\
				eclass, parameters, "conversation", id)
			return behavior
		end
		
		/**
		 * \brief Trigger table matching value.
		 * 
		 * Default implementation returns \ref BaseGameApp#getTriggerTable() for value 'default'
		 * and null for all other values. Overwrite to accept other values.
		 */
		func TSTriggerTable getTriggerTableFor(String value)
			return BehaviorElementClass.sharedFactoryHelper.triggerTable(value)
		end
		
		/**
		 * \brief Player controllable actor matching value.
		 * 
		 * Default implementation returns \ref BaseGameApp#getPlayerControlledActor() for value
		 * 'default' and null for all other values. Overwrite to accept other values.
		 */
		func ECBehaviorPlayerControllable.Tracker getPlayerControllableActorFor(String value)
			return BehaviorElementClass.sharedFactoryHelper.playerControllableActor(value)
		end
		
		/**
		 * \brief Simple conversation converter matching value.
		 * 
		 * Default implementation returns \ref BaseGameApp#getSimpleConversationConverter()
		 * for value 'default' and null for all other values. Overwrite to accept other values.
		 */
		func SimpleConversationConverter getSimpleConversationConverterFor(String value)
			return BehaviorElementClass.sharedFactoryHelper.simpleConversationConverter(value)
		end
	end
	
	/** \brief Behavior instance. */
	class Instance extends DefaultECBehaviorInstance
		/** \brief Trigger listener to start conversation. */
		public class StartConversationListener extends ECBehaviorTriggered.DefaultListener
			var Instance pInstance
			
			func new(Instance instance)
				pInstance = instance
			end
			
			func void triggerExpressionTrue(ECBehaviorTriggered.Instance instance)
				pInstance.startConversation()
			end
		end
		
		
		var ECBehaviorConversation pECBehavior
		var Conversation pConversation
		var SimpleConversation pSimpleConversation
		var StringID pAddPlayer
		var ConversationPlayback pConversationPlayback
		var ECBehaviorConversationActor.Instance pConversationActor
		var ECBehaviorTriggered.Instance pTrigger
		var StringID pTopicGroup
		var StringID pTopic
		var bool pDirectCamera
		
		
		/** \brief Create element. */
		func new(ECBehaviorConversation ecbehavior, BehaviorElement element) super(element)
			pECBehavior = ecbehavior
		end
		
		/** \brief Dispose of behavior instance. */
		func void dispose()
			stopConversation()
			pConversationActor = null
			pTrigger = null
			
			super.dispose()
		end
		
		
		/** \brief Initialize element from stub. */
		func void init(StubElement stub)
			var BehaviorElement element = getElement()
			
			if pECBehavior.getConversationActor() != null
				pConversationActor = pECBehavior.getConversationActor().instance(element)
			end
			
			pDirectCamera = pECBehavior.getDirectCamera().getValue(stub)
			pAddPlayer = pECBehavior.getAddPlayer().getValue(stub)
			
			pConversation = loadConversation(stub)
			pSimpleConversation = loadSimpleConversation(stub)
			
			pTopicGroup = pECBehavior.getTopicGroup().getValue(stub)
			pTopic = pECBehavior.getTopic().getValue(stub)
			
			pTrigger = pECBehavior.getTriggered().synchronizedOrSelf().instance(element)
			pTrigger.addListener(StartConversationListener.new(this))
		end
		
		/** \brief Load conversation. */
		protected func Conversation loadConversation(StubElement stub)
			return pECBehavior.getConversation().getConversation(stub, getElement().getClass())
		end
		
		/**
		 * \brief Load simple conversation or null.
		 * \version 1.25
		 */
		protected func SimpleConversation loadSimpleConversation(StubElement stub)
			return pECBehavior.getSimpleConversation().getSimpleConversation(\
				stub, getElement().getClass())
		end
		
		
		/** \brief Behavior. */
		func ECBehaviorConversation getECBehavior()
			return pECBehavior
		end
		
		/** \brief Conversation. */
		func Conversation getConversation()
			return pConversation
		end
		
		/** \brief Set conversation. */
		protected func void setConversation(Conversation conversation)
			pConversation = conversation
		end
		
		/**
		 * \brief Simple conversation.
		 * \version 1.25
		 */
		func SimpleConversation getSimpleConversation()
			return pSimpleConversation
		end
		
		/**
		 * \brief Set conversation.
		 * \version 1.25
		 */
		protected func void setSimpleConversation(SimpleConversation simpleConversation)
			pSimpleConversation = simpleConversation
		end
		
		/** \brief Add player as first actor if identifier is not null. */
		func StringID getAddPlayer()
			return pAddPlayer
		end
		
		/** \brief Set if player is added as first actor if identifier is not null. */
		protected func void setAddPlayer(StringID id)
			pAddPlayer = id
		end
		
		/** \brief Conversation playback if running or null if not running. */
		func ConversationPlayback getConversationPlayback()
			return pConversationPlayback
		end
		
		/** \brief Set conversation playback if running or null if not running. */
		protected func void setConversationPlayback(ConversationPlayback playback)
			stopConversation()
			
			pConversationPlayback = playback
			
			if playback != null
				setRequiresThink(true)
			end
		end
		
		/** \brief Conversation actor behavior instance or null if not present. */
		func ECBehaviorConversationActor.Instance getConversationActor()
			return pConversationActor
		end
		
		/**
		 * \brief Topic group to use for conversation.
		 * 
		 * If null simple conversation has to be set.
		 */
		func StringID getTopicGroup()
			return pTopicGroup
		end
		
		/**
		 * \brief Set topic group to use for conversation.
		 * 
		 * If null simple conversation has to be set.
		 */
		protected func void setTopicGroup(StringID id)
			pTopicGroup = id
		end
		
		/** \brief Topic to use for conversation. */
		func StringID getTopic()
			return pTopic
		end
		
		/** \brief Set topic to use for conversation. */
		func void setTopic(StringID id)
			pTopic = id
		end
		
		/** \brief Conversation directs camera. */
		func bool getDirectCamera()
			return pDirectCamera
		end
		
		/** \brief Set if conversation directs camera. */
		func void setDirectCamera(bool directCamera)
			pDirectCamera = directCamera
		end
		
		
		/** \brief Player conversation actor or null if not supported. */
		func ConversationActor getPlayerConversationActor()
			var ECBehaviorPlayerControllable.Tracker tracker = pECBehavior.getPlayerControlledActor()
			if tracker == null
				return null
			end
			
			var ECBehaviorPlayerControllable.Instance actor = tracker.getActor()
			if actor == null
				return null
			end
			
			var ECBehaviorConversationActor.Instance conversationActor = \
				ECBehaviorConversationActor.getInstanceIn(actor.getElement())
			if conversationActor == null
				return null
			end
			
			return conversationActor.getConversationActor()
		end
		
		
		/** \brief Trigger or \em null. */
		func ECBehaviorTriggered.Instance getTrigger()
			return pTrigger
		end
		
		
		/**
		 * \brief Conversation can be started.
		 * 
		 * Returns true if all of these conditions are true:
		 * - ConversationPlayback is null
		 * - AddPlayer is null or player is not in a conversation
		 * - ECBehaviorConversationActor is not present or actor is not in a conversation
		 */
		func bool canStartConversation()
			if pConversationPlayback != null
				return false
			end
			if pAddPlayer != null
				var ConversationActor actor = getPlayerConversationActor()
				if actor == null or actor.getPlayback() != null
					return false
				end
			end
			if pConversationActor != null \
			and pConversationActor.getConversationActor() != null \
			and pConversationActor.getConversationActor().getPlayback() != null
				return false
			end
			return true
		end
		
		/**
		 * \brief Start conversation.
		 * 
		 * Throws exception if canStartConversation() returns false.
		 */
		func void startConversation()
			if not canStartConversation() or pConversationPlayback != null
				throw EInvalidParam.new()
			end
			
			var ConversationPlayback playback = createPlayback()
			
			try
				var ConversationTopicGroup topicGroup = pConversation.getTopicGroupWithID(pTopicGroup)
				if topicGroup != null
					var ConversationTopic topic = topicGroup.getTopicWithID(pTopic)
					if topic == null
						BaseGameApp.getApp().getConsole().addMessage(\
							"ECBehaviorConversation: Not found '" + pTopicGroup + "' => '" + pTopic)
						throw EInvalidParam.new()
					end
					
					playback.setTopic(topicGroup, topic)
					
				else
					if pSimpleConversation == null
						BaseGameApp.getApp().getConsole().addMessage(\
							"ECBehaviorConversation: Not found '" + pTopicGroup + "' => '" + pTopic)
						throw EInvalidParam.new()
					end
					
					var SimpleConversationSnippet snippet = pSimpleConversation.getSnippetWith(pTopic)
					if snippet == null
						BaseGameApp.getApp().getConsole().addMessage(\
							"ECBehaviorConversation: Not found '{}'".format(Array.newWith(pTopic)))
						throw EInvalidParam.new()
					end
					
					playback.setSimpleSnippet(pECBehavior.getSimpleConversationConverter(),\
						pSimpleConversation, snippet)
				end
				
				if pAddPlayer != null
					playback.addActor(getPlayerConversationActor(), pAddPlayer)
				end
				
				if pConversationActor != null and pConversationActor.getConversationActor() != null
					playback.addActor(pConversationActor.getConversationActor())
				end
				
			catch Exception e
				playback.dispose()
				throw
			end
			
			pConversationPlayback = playback
			
			playback.setRunning(true)
			setRequiresThink(true)
		end
		
		/**
		 * \brief Create conversation playback.
		 * 
		 * Default implementation calls BaseGameApp.createConversationPlayback().
		 * If direct camera is false sets the camera director to null.
		 * If player is not in the conversation sets input processor to null.
		 * 
		 * Caller is responsible to set topic and add actors.
		 */
		protected func ConversationPlayback createPlayback()
			var BaseConversationPlayback playback = \
				BaseGameApp.getApp().createConversationPlayback(pConversation)
			
			if not pDirectCamera
				playback.setCameraDirector(null)
			end
			
			if pAddPlayer == null
				playback.setInputProcessor(null) // allow player to continue give input
			end
			
			return playback
		end
		
		/** \brief Stop conversation immediately if running. */
		func void stopConversation()
			if pConversationPlayback == null
				return
			end
			
			pConversationPlayback.stopConversation()
			pConversationPlayback.dispose()
			pConversationPlayback = null
			setRequiresThink(false)
		end
		
		
		/** \brief Think about what the element is going to do in this frame. */
		func void think(float elapsed)
			if pConversationPlayback == null
				return
			end
			
			pConversationPlayback.update(elapsed)
			
			if not pConversationPlayback.getRunning()
				stopConversation()
			end
		end
		
		
		/** \brief Read element from file. */
		func void readFromFile(PersistencyEnvironment env, FileReader reader)
			select reader.readByte() // version
			case 0
				// we can save the conversation playback but not load it right now.
				// the problem is that the self-actor is not registered anywhere.
				// we need a change in the playback loading procedure so we can add the
				// player actor before the playback loads so it can use the actor already
				// present.
				/*
				if not env.readBool()
					return
				end
				
				var int size = reader.readInt()
				var MemoryFile data = MemoryFile.new("ECBehaviorConversation.data")
				data.writeData(reader, size)
				
				// store away for enterFrame():
				// - MemoryFile data
				// - PersistencyEnvironment env (this requires env to be never changed)
				// 
				// during enterFrame():
				// 
				// pConversationPlayback = env.readObject(data.getReader())
				*/
				
			else
				throw EInvalidParam.new("unsupported version")
			end
		end
		
		/** \brief Write element to file. */
		func void writeToFile(PersistencyEnvironment env, FileWriter writer)
			writer.writeByte(0) // version
			
			/*
			env.writeBool(pConversationPlayback != null)
			if pConversationPlayback == null
				return
			end
			
			var MemoryFile data = MemoryFile.new("ECBehaviorConversation.data")
			env.writeObject(data.getWriter(false), pConversationPlayback)
			writer.writeInt(data.getSize())
			env.writeData(data.getReader(), data.getSize())
			*/
		end
	end
	
	
	var ECBehaviorConversationActor pConversationActor
	var ECPConversation pConversation
	var ECPSimpleConversation pSimpleConversation
	var SimpleConversationConverter pSimpleConversationConverter
	var ECPStringID pAddPlayer
	var ECPStringID pTopicGroup
	var ECPStringID pTopic
	var ECPBoolean pDirectCamera
	var ECBehaviorTriggered pTriggered
	var ECBehaviorPlayerControllable.Tracker pPlayerControlledActor
	
	
	/** \brief Create behavior element class. */
	func new(BehaviorElementClass eclass) this(eclass, BaseGameApp.getApp().getLoaders(), \
	null, BaseGameApp.getApp().getPlayerControlledActor(), "")
	end
	
	/** \brief Create behavior element class. */
	func new(BehaviorElementClass eclass, String id) this(eclass, \
	BaseGameApp.getApp().getLoaders(), null, BaseGameApp.getApp().getPlayerControlledActor(), id)
	end
	
	/** \brief Create behavior element class. */
	func new(BehaviorElementClass eclass, String id, String prefix) this(eclass, \
	BaseGameApp.getApp().getLoaders(), null, BaseGameApp.getApp().getPlayerControlledActor(), id, prefix)
	end
	
	/** \brief Create behavior element class. */
	func new(BehaviorElementClass eclass, Loaders loaders, TSTriggerTable triggerTable, \
	ECBehaviorPlayerControllable.Tracker playerControlledActor) \
	this(eclass, loaders, triggerTable, playerControlledActor, "")
	end
	
	/** \brief Create behavior element class. */
	func new(BehaviorElementClass eclass, Loaders loaders, TSTriggerTable triggerTable, \
	ECBehaviorPlayerControllable.Tracker playerControlledActor, String id) \
	this(eclass, loaders, triggerTable, playerControlledActor, id, \
	id.empty() if "conversation" else "conversation(" + id + ")")
	end
	
	func new(BehaviorElementClass eclass, Loaders loaders, TSTriggerTable triggerTable, \
	ECBehaviorPlayerControllable.Tracker playerControlledActor, String id, String subID) \
	this(eclass, loaders, triggerTable, playerControlledActor, id, subID, subID + ".")
	end
	
	func new(BehaviorElementClass eclass, Loaders loaders, TSTriggerTable triggerTable, \
	ECBehaviorPlayerControllable.Tracker playerControlledActor, String id, String subID, String prefix) \
	super(eclass, id)
		var BaseGameApp app = BaseGameApp.getApp()
		if app != null
			pSimpleConversationConverter = app.getSimpleConversationConverter()
		end
		
		pPlayerControlledActor = playerControlledActor
		
		pConversation = ECPConversation.new(prefix + "path", loaders.getConversation())
		eclass.addProperty(pConversation)
		
		pSimpleConversation = ECPSimpleConversation.new(\
			prefix + "pathSimple", loaders.getSimpleConversation())
		eclass.addProperty(pSimpleConversation)
		
		pAddPlayer = ECPStringID.new(prefix + "addPlayer", StringID.new("player"))
		eclass.addProperty(pAddPlayer)
		
		pTopicGroup = ECPStringID.new(prefix + "topicGroup")
		eclass.addProperty(pTopicGroup)
		
		pTopic = ECPStringID.new(prefix + "topic")
		eclass.addProperty(pTopic)
		
		pDirectCamera = ECPBoolean.new(prefix + "directCamera", true)
		eclass.addProperty(pDirectCamera)
		
		pTriggered = ECBehaviorTriggered.new(eclass, triggerTable, subID, prefix + "trigger")
		
		eclass.addBehavior(this)
	end
	
	/** \brief Dispose of behavior. */
	func void dispose()
		pPlayerControlledActor = null
		pConversationActor = null
		super.dispose()
	end
	
	
	/** \brief Conversation actor behavior or null if not used. */
	func ECBehaviorConversationActor getConversationActor()
		return pConversationActor
	end
	
	/** \brief Set conversation actor behavior or null if not used. */
	func void setConversationActor(ECBehaviorConversationActor conversationActor)
		pConversationActor = conversationActor
	end
	
	/** \brief Conversation. */
	func ECPConversation getConversation()
		return pConversation
	end
	
	/**
	 * \brief Simple conversation.
	 * \version 1.25
	 */
	func ECPSimpleConversation getSimpleConversation()
		return pSimpleConversation
	end
	
	/**
	 * \brief Simple conversation converter.
	 * \version 1.25
	 */
	func SimpleConversationConverter getSimpleConversationConverter()
		return pSimpleConversationConverter
	end
	
	/**
	 * \brief Set smple conversation converter.
	 * \version 1.25
	 */
	func void setSimpleConversationConverter(SimpleConversationConverter converter)
		pSimpleConversationConverter = converter
	end
	
	/** \brief Add player to conversation with identifier or null otherwise. */
	func ECPStringID getAddPlayer()
		return pAddPlayer
	end
	
	/** \brief Topic group to use for conversation. */
	func ECPStringID getTopicGroup()
		return pTopicGroup
	end
	
	/** \brief Topic to use for conversation. */
	func ECPStringID getTopic()
		return pTopic
	end
	
	/** \brief Conversation directs camera. */
	func ECPBoolean getDirectCamera()
		return pDirectCamera
	end
	
	/** \brief Trigger conversation. */
	func ECBehaviorTriggered getTriggered()
		return pTriggered
	end
	
	/** \brief Player controlled actor or null. */
	func ECBehaviorPlayerControllable.Tracker getPlayerControlledActor()
		return pPlayerControlledActor
	end
	
	/** \brief Set player controllable tracker or null. */
	func void setPlayerControlledActor(ECBehaviorPlayerControllable.Tracker playerControlledActor)
		pPlayerControlledActor = playerControlledActor
	end
	
	
	/** \brief Get instance in element from owner element class. */
	func Instance instance(BehaviorElement element)
		return element.getInstanceAt(getInstanceIndex()) cast Instance
	end
	
	
	/**
	 * \brief Get behavior in element class or \em null if absent.
	 * 
	 * Use this method to check if a particular BehaviorElementClass contains a behavior
	 * of type ECBehaviorConversation.
	 */
	static func ECBehaviorConversation getBehaviorIn(BehaviorElementClass eclass)
		return eclass.findBehavior(block ECBehaviorConversation each
			return true
		end) cast ECBehaviorConversation
	end
	
	/**
	 * \brief Get instance in element or \em null if absent.
	 * 
	 * Use this method to check if a particular BehaviorElement contains a behavior instance
	 * of type ECBehaviorConversation.Instance .
	 */
	static func Instance getInstanceIn(BehaviorElement element)
		return element.findInstance(block Instance each
			return true
		end) cast Instance
	end
	
	
	/** \brief Create Behavior instance. */
	func ECBehaviorInstance createInstance(BehaviorElement element)
		return Instance.new(this, element)
	end
end
