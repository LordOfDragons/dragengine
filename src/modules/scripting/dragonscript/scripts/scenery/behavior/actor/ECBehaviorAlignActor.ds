/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */


namespace Dragengine.Scenery

pin Dragengine.ConversationSystem
pin Dragengine.Gui
pin Dragengine.LoadSave
pin Dragengine.Preloading
pin Dragengine.Utils


/**
 * \brief Behavior adding support to actors to align to a specific position and orientation.
 * 
 * Manipulates ECBehaviorLocomotion to move an actor a short distance to a specific position,
 * orientation and looking direction. This is typically required for actors intending to
 * interact with objects. In this case the animation of the actor has to match the object
 * it is interacting with. Actor actions will use this behavior to achieve this goal.
 * 
 * To use this class add these behaviors to the actor:
 * - ECBehaviorLocomotion
 * - ECBehaviorAlignActor
 * 
 * For using Look-At handling these behaviors are required:
 * - ECBehaviorConversationActor
 * 
 * Add a listener to be notified if the actor finished aligning or poll the behavior.
 * 
 * During each update step the actor is moved towards the goal position in a straight line.
 * The orientation and looking direction is also adjusted using a blend from the starting
 * values to the final values.
 * 
 * \see https://developer.dragondreams.ch/wiki/doku.php/dragengine:modules:dragonscript:behavior_alignactor
 */
class ECBehaviorAlignActor extends DefaultECBehavior
	/** \brief Listener for behavior instance events. */
	interface Listener
		/** \brief Actor starts aligning. */
		func void startAligning(Instance instance)
		
		/** \brief Actor finished aligning. */
		func void finishedAligning(Instance instance)
	end
	
	/** \brief Default implementation of behavior instance listener. */
	class DefaultListener implements Listener
		/** \brief Create default listener. */
		func new()
		end
		
		/** \brief Actor starts aligning. */
		func void startAligning(Instance instance)
		end
		
		/** \brief Actor finished aligning. */
		func void finishedAligning(Instance instance)
		end
	end
	
	/** \brief Factory creating listeners. */
	interface ListenerFactory
		/** \brief Create listener. */
		func Listener createListener(Instance instance)
	end
	
	/** \brief Factory creating listeners using block. */
	class BlockListenerFactory implements ListenerFactory
		var Block pBlock
		
		/** \brief Create factory using block receiving Instance as parameter returning Listener. */
		func new(Block blockFactory)
			if blockFactory == null
				throw ENullPointer.new()
			end
			pBlock = blockFactory
		end
		
		/** \brief Create listener. */
		func Listener createListener(Instance instance)
			return pBlock.run(instance) cast Listener
		end
	end
	
	/**
	 * \brief Behavior factory.
	 * \ref 1.25
	 * 
	 * Automatically assigns these behaviors if present before adding:
	 * - Required: \ref ECBehaviorLocomotion
	 * - Optional: \ref ECBehaviorConversationActor
	 * 
	 * Example XML element class:
	 * \code{.xml}
	 * <behavior type='ECBehaviorAlignActor'/>
	 * \endcode
	 * 
	 * Element class properties added by the behavior can also be set directly inside the tag
	 * be removing the property name prefix and starting with a "." (for exampler ".propertyName").
	 */
	class Factory implements BehaviorFactory
		func new()
		end
		
		func String factoryId()
			return "ECBehaviorAlignActor"
		end
		
		func ECBehavior addBehavior(BehaviorElementClass eclass, String id, Dictionary parameters)
			if not id.empty()
				throw EInvalidParam.new("id is not empty string")
			end
			var ECBehaviorAlignActor behavior = ECBehaviorAlignActor.new(eclass,\
				ECBehaviorLocomotion.getBehaviorIn(eclass),\
				ECBehaviorConversationActor.getBehaviorIn(eclass))
			BehaviorElementClass.sharedFactoryHelper.setPropertiesFromParameters(\
				eclass, parameters, "alignActor")
			return behavior
		end
	end
	
	
	
	/** \brief Behavior instance. */
	class Instance extends DefaultECBehaviorInstance
		class LeaveConversation extends ECBehaviorConversationActor.DefaultListener
			var Instance pInstance
			
			func new(Instance instance)
				pInstance = instance
			end
			
			func void leaveConversation(ECBehaviorConversationActor.Instance instance)
				pInstance.onLeaveConversation()
			end
		end
		
		
		var ECBehaviorAlignActor pECBehavior
		
		var ECBehaviorLocomotion.Instance pLocomotion
		var ECBehaviorConversationActor.Instance pConversationActor
		
		var DVector pTargetPosition
		var float pTargetOrientation
		var float pTargetLookVertical
		var ConversationPlaybackLookAt pLookAt
		var Element pRelativeTargetElement
		var DMatrix pRelativeTargetMatrix
		var float pInitialDistance
		var bool pIsAtTarget
		var bool pAlignFinished
		var bool pSucceeded
		
		var float pSpeed
		
		var ElementResolver pElementResolver
		var Array pListeners
		
		
		
		/** \brief Create behavior instance. */
		func new(ECBehaviorAlignActor ecbehavior, BehaviorElement element) super(element)
			pECBehavior = ecbehavior
			pListeners = Array.new()
			pIsAtTarget = false
			pAlignFinished = true
			pSucceeded = true
			
			pLocomotion = ecbehavior.getLocomotion().instance(element)
		end
		
		/** \brief Dispose of behavior instance. */
		func void dispose()
			pConversationActor = null
			pLocomotion = null
			pListeners = null
			pElementResolver = null
			
			super.dispose()
		end
		
		
		
		/** \brief Initialize behavior from stub. */
		func void init(StubElement stub)
			var BehaviorElement element = getElement()
			
			if pECBehavior.getConversationActor() != null
				pConversationActor = pECBehavior.getConversationActor().instance(element)
			end
			
			pSpeed = pECBehavior.getSpeed().getValue(stub)
			
			if pConversationActor != null
				pConversationActor.addListener(LeaveConversation.new(this))
			end
			
			pECBehavior.createListeners(this)
		end
		
		
		
		/** \brief Behavior. */
		func ECBehaviorAlignActor getECBehavior()
			return pECBehavior
		end
		
		/** \brief Locomotion behavior. */
		func ECBehaviorLocomotion.Instance getLocomotion()
			return pLocomotion
		end
		
		/** \brief Conversation actor behavior or null if not used. */
		func ECBehaviorConversationActor.Instance getConversationActor()
			return pConversationActor
		end
		
		
		
		/** \brief Target position. */
		func DVector getTargetPosition()
			return pTargetPosition
		end
		
		/** \brief Set target position. */
		func void setTargetPosition(DVector position)
			pTargetPosition = position
		end
		
		/** \brief Target orientation. */
		func float getTargetOrientation()
			return pTargetOrientation
		end
		
		/** \brief Set target orientation. */
		func void setTargetOrientation(float orientation)
			pTargetOrientation = DEMath.normalize(orientation, -180.0, 180.0)
		end
		
		/** \brief Set target orientation. */
		func void setTargetOrientation(DVector targetPosition)
			var DVector direction = targetPosition - getElement().getPosition()
			pTargetOrientation = -DEMath.atan2(direction.getX(), direction.getZ())
		end
		
		/** \brief Relative target matrix. */
		func DMatrix getRelativeTargetMatrix()
			return pRelativeTargetMatrix
		end
		
		/** \brief Relative target element. */
		func Element getRelativeTargetElement()
			return pRelativeTargetElement
		end
		
		/** \brief Set relative target position. */
		func void setRelativeTargetElement(Element element)
			pRelativeTargetElement = element
		end
		
		/** \brief Set target. */
		func void setTarget(Element element, DVector position, float orientation)
			setRelativeTargetElement(element)
			setTargetPosition(position)
			setTargetOrientation(orientation)
		end
		
		/** \brief Target looking up-down. */
		func float getTargetLookVertical()
			return pTargetLookVertical
		end
		
		/** \brief Set target looking up-down. */
		func void setTargetLookVertical(float lookVertical)
			pTargetLookVertical = lookVertical
		end
		
		/** \brief Set target from locomotion. */
		func void setTargetFromLocomotion()
			var Locomotion locomotion = pLocomotion.getLocomotion()
			pTargetOrientation = locomotion.getOrientation()
			pTargetLookVertical = locomotion.getLookVerticalGoal()
		end
		
		/** \brief Conversation look-at. */
		func ConversationPlaybackLookAt getLookAt()
			return pLookAt
		end
		
		/** \brief Set conversation look-at. */
		func void setLookAt(ConversationPlaybackLookAt lookAt)
			pLookAt = lookAt
		end
		
		/**
		 * \brief Set conversation look-at from world position.
		 * \version 1.4
		 * 
		 * Shortcut for calling setLookAt() with ConversationPlaybackLookAt using
		 * ConversationCustomTarget with matrix set from world position.
		 */
		func void setLookAt(DVector lookAt)
			pLookAt = ConversationPlaybackLookAt.new(\
				ConversationCustomTarget.new(DMatrix.newTranslation(lookAt)))
		end
		
		/** \brief Clear target parameters. */
		func void clearTarget()
			pTargetPosition = null
			pTargetOrientation = 0
			pTargetLookVertical = 0
			pLookAt = null
			pRelativeTargetElement = null
			pRelativeTargetMatrix = null
		end
		
		/** \brief Movement speed. */
		func float getSpeed()
			return pSpeed
		end
		
		/** \brief Set movement speed. */
		func void setSpeed(float speed)
			pSpeed = DEMath.max(speed, 0.0)
		end
		
		
		
		/**
		 * \brief World target position.
		 * \version 1.19
		 * 
		 * If relative to element this potentially changes every frame update.
		 */
		func DVector getWorldTargetPosition()
			var DVector position = pTargetPosition
			if pRelativeTargetElement != null
				position = (pRelativeTargetMatrix * pRelativeTargetElement.getElementMatrix()).getPosition()
			end
			return position
		end
		
		/**
		 * \brief World target orientation.
		 * \version 1.19
		 * 
		 * If relative to element this potentially changes every frame update.
		 */
		func float getWorldTargetOrientation()
			var float orientation = pTargetOrientation
			if pRelativeTargetElement != null
				orientation = (pRelativeTargetMatrix * pRelativeTargetElement.getElementMatrix()).getEulerAngles().getY()
			end
			return orientation
		end
		
		
		
		/** \brief Actor is at target position. */
		func bool isAtTarget()
			return pIsAtTarget
		end
		
		/** \brief Actor is not at target position. */
		func bool isNotAtTarget()
			return not pIsAtTarget
		end
		
		/** \brief Actor is aligning. */
		func bool isAligning()
			return not pAlignFinished
		end
		
		/** \brief Actor is not aligning. */
		func bool isFinished()
			return pAlignFinished
		end
		
		/** \brief Last aligning succeeded. */
		func bool hasSucceeded()
			return pSucceeded
		end
		
		/** \brief Last aligning failed. */
		func bool hasFailed()
			return not pSucceeded
		end
		
		
		
		/**
		 * \brief Start aligning actor.
		 * 
		 * Before calling set the required parameters using setTarget*(). As long as the
		 * aligning is running no modification on ECBehaviorLocomotion should be done to not
		 * cause troubles. Once isAligning() returns false or isFinished() returns true the
		 * locomotion can be modified again. Calls startAligning() on listeners. Once finished
		 * calls finishedAligning() on listeners.
		 * 
		 * This call modifies some locomotion parameters which are required for this behavior
		 * to work properly. Sets CanTurnInPlace to false and CanTurn to true. All other
		 * locomotion parameters are not modified. For player actors certain locomotion
		 * parameters should be changed otherwise it can look strange or even discomforting.
		 * Call initLocomotionPlayer() to set suitable locomotion parameters for player
		 * controlled actors.
		 * 
		 * \note To not call if ECBehaviorActorMover is present and is moving actor
		 * \throws EInvalidParam Actor is already aligning.
		 */
		func void startAligning()
			if not pAlignFinished
				throw EInvalidParam.new("Aligning in progress")
			end
			
			if pRelativeTargetElement != null
				pRelativeTargetMatrix = DMatrix.newRotationY(pTargetOrientation) \
					* DMatrix.newTranslation(pTargetPosition)
			end
			
			// calculate initial distance and orientation
			var DVector targetPosition = pTargetPosition
			if pRelativeTargetElement != null
				targetPosition = pRelativeTargetElement.getElementMatrix() * pTargetPosition
			end
			
			pInitialDistance = (targetPosition - getElement().getPosition()) \
				.compSelect(true, false, true).getLength()
			
			// update look-at if present
			if pConversationActor != null
				var ConversationActor convoActor = pConversationActor.getConversationActor()
				if convoActor != null and pLookAt != null
					var ConversationLookAtPlayback hlap = convoActor.getHeadLookAtPlayback()
					hlap.clearLookAtState()
					hlap.addLookAt(pLookAt, ConversationStrip.new(StringID.new(), 0, 0.5))
				end
			end
			
			// set some locomotion parameters required for correct operation
			var Locomotion locomotion = pLocomotion.getLocomotion()
			locomotion.setCanTurn(true)
			locomotion.setCanTurnInPlace(false)
			locomotion.cancelTurnInPlace()
			
			// ready to align actor
			pIsAtTarget = false
			pAlignFinished = false
			pSucceeded = true
			setRequiresThink(true)
			
			pListeners.forEach(block Listener each
				each.startAligning(this)
			end)
		end
		
		/**
		 * \brief Init locomotion for player actor use.
		 * 
		 * Player actors typically have adjustment times for looking around set to 0 to apply
		 * player input directly to the locomotion. For aligning these values are usually not
		 * optimal. This method changes the following locomotion parameters:
		 * - Adjust time left-right
		 * - Adjust time up-down
		 * - Adjust time orientation
		 * - Adjust time analog movement left-right
		 * - Adjust time linear velocity
		 * 
		 * You can change these values manully before calling startAligning() too.
		 */
		func void initLocomotionPlayer()
			var Locomotion locomotion = pLocomotion.getLocomotion()
			locomotion.setAdjustTimeHorizontal(0.5)
			locomotion.setAdjustTimeVertical(0.5)
			locomotion.setAdjustTimeOrientation(0.5)
			locomotion.setAdjustTimeAnalogMovingHorizontal(0)
			locomotion.setAdjustTimeLinearVelocity(0.5)
		end
		
		/**
		 * \brief Update aligning.
		 * 
		 * Called by think(). While isAligning() returns true do not update locomotion using
		 * ECBehaviorPlayerInput* or other behaviors. After this call returns you can check if
		 * isAligning() still returns true. If isAligning() returns false aligning finished
		 * and you can resume updating locomotions. You can also use listeners to be notified
		 * if aligning finished or has been cancelled. It is recommended to clear all
		 * ECBehaviorPlayerInput* once finished to ensure player input did not build up.
		 */
		func void update(float elapsed)
			if pAlignFinished
				return
			end
			
			// determine target position, orientation and look at
			var DVector targetPosition = pTargetPosition
			var float targetOrientation = pTargetOrientation
			if pRelativeTargetElement != null
				var DMatrix matrix = pRelativeTargetMatrix * pRelativeTargetElement.getElementMatrix()
				targetPosition = matrix.getPosition()
				targetOrientation = matrix.getEulerAngles().getY()
			end
			
			// adjust looking up-down and left-right if not using a look-at
			var Locomotion locomotion = pLocomotion.getLocomotion()
			var float turnDifference = DEMath.normalize(targetOrientation - locomotion.getOrientation(), -180.0, 180.0)
			
			var ConversationLookAtPlayback hlap = pConversationActor.getConversationActor().getHeadLookAtPlayback()
			if not hlap.getRunning() and hlap.getLastLookAtPosition() == null
				var float turnAngle = DEMath.clamp(turnDifference, -90.0, 90.0) // avoid orientation fixing due to over-steering
				locomotion.setLookHorizontalGoal(turnAngle)
				locomotion.setLookVerticalGoal(pTargetLookVertical)
			end
			
			// adjust orientation. this is done using a blend from the initial orientation to the
			// target orientation over the 
			locomotion.setTurnHorizontal(turnDifference)
			locomotion.setAdjustTimeOrientation(DEMath.linearStep(\
				DEMath.fabs(locomotion.getTurnHorizontal()), 0.0, 10.0, 0.1, 0.5))
			
			// move to target if not there already
			if not pIsAtTarget
				moveTowardsTarget(elapsed, targetPosition)
			end
			
			// check if aligning finished
			checkFinished()
		end
		
		/** \brief Cancel aligning if running. */
		func void cancelAligning()
			if pAlignFinished
				return
			end
			
			if pConversationActor != null
				pConversationActor.getConversationActor().getHeadLookAtPlayback().clearLookAtState()
			end
			
			pAlignFinished = true
			pSucceeded = false
			clearTarget()
			setRequiresThink(false)
			
			pListeners.forEach(block Listener each
				each.finishedAligning(this)
			end)
		end
		
		
		
		/**
		 * \brief Move towards target.
		 * 
		 * Once close enough to the target position sets actor to target position and sets
		 * pIsAtTarget to true. Call only if pIsAtTarget is false.
		 */
		protected func void moveTowardsTarget(float elapsed, DVector targetPosition)
			// calculate distance to target
			var Locomotion locomotion = pLocomotion.getLocomotion()
			var DMatrix invMatrixActor = DMatrix.newWorld(getElement().getPosition(), \
				Quaternion.newFromEulerY(locomotion.getOrientation())).getInverse()
			var DVector moveDirection = (invMatrixActor * targetPosition).compSelect(true, false, true)
			var float moveDirLen = moveDirection.getLength()
			
			// move to target until close enough
			if moveDirLen > 0.001
				locomotion.setAnalogMovingHorizontalGoal(\
					DEMath.atan2(-moveDirection.getX(), moveDirection.getZ()))
				
				var float speed = pSpeed * DEMath.linearStep(moveDirLen, 0.0, 0.25, 0.1, 1.0)
				
				if speed * elapsed <= moveDirLen
					locomotion.setAdjustTimeLinearVelocity(\
						DEMath.linearStep(moveDirLen, 0.05, pInitialDistance, 0.0, 0.5))
					
				else
					locomotion.setAdjustTimeLinearVelocity(0)
					
					if elapsed > 0.0001
						speed = moveDirLen / elapsed
						
					else
						speed = 0
					end
				end
				
				locomotion.setAnalogMovingSpeed(speed)
				
			else
				// we can not use cancelMovement() or other cancel* calls here since these would
				// reset the input and thus cancel the values set above. in the end we just want
				// to set all movement to 0
				locomotion.setAnalogMovingSpeed(0)
				locomotion.setLinearVelocity(Vector.new())
				locomotion.setMovingSpeed(0)
				locomotion.setMovingOrientation(0)
				locomotion.setMovingDirection(0)
				getElement().setPosition(targetPosition)
				pIsAtTarget = true
			end
		end
		
		/**
		 * \brief Check if actor finished aligning.
		 * 
		 * Sets pIsAtTarget to true if all required conditions are fulfilled.
		 */
		protected func void checkFinished()
			if pAlignFinished or not pIsAtTarget
				return
			end
			
			var Locomotion locomotion = pLocomotion.getLocomotion()
			var ConversationLookAtPlayback hlap = pConversationActor.getConversationActor().getHeadLookAtPlayback()
			
			if DEMath.fabs(locomotion.getTurnHorizontal()) > 0.05 \
			or DEMath.fabs(locomotion.getStance() - locomotion.getStanceGoal()) > 0.05 \
			or hlap.getRunning()
				return
			end
			
			if hlap.getCurrentLookAtPosition() == null
				if DEMath.fabs(locomotion.getLookHorizontal() - locomotion.getLookHorizontalGoal()) > 0.05 \
				or DEMath.fabs(locomotion.getLookVertical() - locomotion.getLookVerticalGoal()) > 0.05
					return
				end
				
				pLocomotion.getLocomotion().applyStates()
			end
			
			// align finished. apply some final touches to be on the safe side
			pAlignFinished = true
			pSucceeded = true
			clearTarget()
			setRequiresThink(false)
			
			pListeners.forEach(block Listener each
				each.finishedAligning(this)
			end)
		end
		
		
		
		/** \brief Actor leaves conversation. */
		func void onLeaveConversation()
			// if actor enter conversation after aligning started the look-at can be cleared
			// upon leaving. if this is the case restore the look-at
			if pAlignFinished or pLookAt == null
				return
			end
			
			var ConversationLookAtPlayback hlap = pConversationActor.getConversationActor().getHeadLookAtPlayback()
			if hlap.getCurrentLookAtPosition() != null
				hlap.addLookAt(pLookAt, ConversationStrip.new(StringID.new(), 0, 0.5))
			end
		end
		
		
		
		/** \brief Add listener. */
		func void addListener(Listener listener)
			if listener == null
				throw EInvalidParam.new()
			end
			pListeners.add(listener)
		end
		
		/** \brief Remove listener. */
		func void removeListener(Listener listener)
			pListeners.remove(listener)
		end
		
		
		
		/** \brief Think about what to do for the next frame update. */
		func void think(float elapsed)
			update(elapsed)
		end
		
		
		
		/** \brief Frame update started. */
		func void enterFrame()
			if pElementResolver != null
				pElementResolver.resolve(getElement().getGameWorld())
				pElementResolver = null
			end
		end
		
		
		
		/** \brief Read behavior from file. */
		func void readFromFile(PersistencyEnvironment env, FileReader reader)
			select reader.readByte() // version
			case 0
				var PersistencyFlags flags = PersistencyFlags.new(7, reader)
				pIsAtTarget = flags.getAt(3)
				pAlignFinished = flags.getAt(4)
				pSucceeded = flags.getAt(6)
				
				if flags.getAt(5)
					pTargetPosition = DVector.readFromFile(reader)
				end
				pTargetOrientation = reader.readFloat()
				pTargetLookVertical = reader.readFloat()
				if flags.getAt(0)
					pRelativeTargetMatrix = DMatrix.readFromFile(reader)
				end
				pInitialDistance = reader.readFloat()
				if flags.getAt(1)
					pElementResolver = ElementResolver.new()
					pElementResolver.add(reader, block Element element
						pRelativeTargetElement = element
					end)
					setRequiresEnterFrame(true)
				end
				if flags.getAt(2)
					pLookAt = ConversationPlaybackLookAt.readFromFile(env, reader)
				end
				
			else
				throw EInvalidParam.new("unsupported version")
			end
			
			setRequiresThink(not pAlignFinished)
		end
		
		/** \brief Write behavior to file. */
		func void writeToFile(PersistencyEnvironment env, FileWriter writer)
			writer.writeByte(0) // version
			
			var PersistencyFlags flags = PersistencyFlags.new(7)
			flags.setAt(0, pRelativeTargetMatrix != null)
			flags.setAt(1, pRelativeTargetElement != null)
			flags.setAt(2, pLookAt != null)
			flags.setAt(3, pIsAtTarget)
			flags.setAt(4, pAlignFinished)
			flags.setAt(5, pTargetPosition != null)
			flags.setAt(6, pSucceeded)
			flags.writeToFile(writer)
			
			if pTargetPosition != null
				pTargetPosition.writeToFile(writer)
			end
			writer.writeFloat(pTargetOrientation)
			writer.writeFloat(pTargetLookVertical)
			
			if pRelativeTargetMatrix != null
				pRelativeTargetMatrix.writeToFile(writer)
			end
			
			writer.writeFloat(pInitialDistance)
			
			if pRelativeTargetElement != null
				ElementResolver.writeToFile(writer, pRelativeTargetElement)
			end
			
			if pLookAt != null
				pLookAt.writeToFile(env, writer)
			end
		end
	end
	
	
	
	var ECBehaviorLocomotion pLocomotion
	var ECBehaviorConversationActor pConversationActor
	var ECPFloat pSpeed
	var Array pListenerFactories
	
	
	
	/**
	 * \brief Create behavior element class.
	 * 
	 * These values are optional and can be null: \em conversationActor.
	 */
	func new(BehaviorElementClass eclass, ECBehaviorLocomotion locomotion, \
	ECBehaviorConversationActor conversationActor) \
	this(eclass, locomotion, conversationActor, "alignActor.")
	end
	
	func new(BehaviorElementClass eclass, ECBehaviorLocomotion locomotion, \
	ECBehaviorConversationActor conversationActor, String prefix) super(eclass)
		if locomotion == null
			throw ENullPointer.new("locomotion")
		end
		if getBehaviorIn(eclass) != null
			throw BEMultipleInstanceException.new(eclass, this)
		end
		
		pLocomotion = locomotion
		pConversationActor = conversationActor
		pListenerFactories = Array.new()
		
		pSpeed = ECPFloat.new(prefix + "speed", 1.25, 0)
		eclass.addProperty(pSpeed)
		
		eclass.addBehavior(this)
	end
	
	/** \brief Dispose of behavior. */
	func void dispose()
		pLocomotion = null
		pConversationActor = null
		pListenerFactories = null
		super.dispose()
	end
	
	
	
	/** \brief Locomotion behavior. */
	func ECBehaviorLocomotion getLocomotion()
		return pLocomotion
	end
	
	/** \brief Conversation actor behavior or null. */
	func ECBehaviorConversationActor getConversationActor()
		return pConversationActor
	end
	
	/** \brief Movement speed. */
	func ECPFloat getSpeed()
		return pSpeed
	end
	
	/** \brief Add listener factory. */
	func void addListenerFactory(ListenerFactory factory)
		if factory == null
			throw ENullPointer.new()
		end
		pListenerFactories.add(factory)
	end
	
	/**
	 * \brief Add listener factory using block.
	 * 
	 * Block receives as parameter Instance and returns Listener.
	 */
	func void addListenerFactory(Block blockFactory)
		pListenerFactories.add(BlockListenerFactory.new(blockFactory))
	end
	
	/** \brief Visit listener factories with block with argument ListenerFactory. */
	func void forEachListenerFactory(Block ablock)
		pListenerFactories.forEach(ablock)
	end
	
	/** \brief Create listeners from factories adding them to behavior instance. */
	func void createListeners(Instance instance)
		pListenerFactories.forEach(block ListenerFactory each
			instance.addListener(each.createListener(instance))
		end)
	end
	
	
	
	/** \brief Get instance in element from owner element class. */
	func Instance instance(BehaviorElement element)
		return element.getInstanceAt(getInstanceIndex()) cast Instance
	end
	
	
	
	/**
	 * \brief Get behavior in element class or \em null if absent.
	 * 
	 * Use this method to check if a particular BehaviorElementClass contains a behavior
	 * of type ECBehaviorAlignActor.
	 */
	static func ECBehaviorAlignActor getBehaviorIn(BehaviorElementClass eclass)
		return eclass.findBehavior(block ECBehaviorAlignActor each
			return true
		end) cast ECBehaviorAlignActor
	end
	
	/**
	 * \brief Get instance in element or \em null if absent.
	 * 
	 * Use this method to check if a particular BehaviorElement contains a behavior instance
	 * of type ECBehaviorAlignActor.Instance .
	 */
	static func Instance getInstanceIn(BehaviorElement element)
		return element.findInstance(block Instance each
			return true
		end) cast Instance
	end
	
	
	
	/** \brief Create Behavior instance. */
	func ECBehaviorInstance createInstance(BehaviorElement element)
		return Instance.new(this, element)
	end
end
