/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */


namespace Dragengine.Scenery

pin Dragengine.Gui
pin Dragengine.Scenery
pin Dragengine.Preloading
pin Dragengine.LoadSave
pin Dragengine.Utils
pin Dragengine.BehaviorTreeSystem
pin Dragengine.StateMachineSystem


/**
 * \brief Behavior adding support to actors to ride on ECBehaviorRidable.
 * 
 * Requires these behaviors to be present:
 * - ECBehaviorColliderAI
 * - ECBehaviorProjectToGround
 * - ECBehaviorLocomotion
 * 
 * If ECBehaviorProjectToGround and ECBehaviorColliderAI are enabled sets the ridable to
 * the ground element if element supports ECBehaviorRidable. Otherwise clears the ridable.
 * 
 * Sometimes it is necessary to prevent the ridable to change although it usually would.
 * This can be for example if an actor interacts with an object like sitting on a chair.
 * Projecting to ground usually has to be disabled in this case to prevent the actor
 * climbing on the chair instead of sitting on it. In general this is not a problem since
 * the actor is usually not riding on another element. If tough the actor does ride on
 * another element disabling projecting to ground will clear the ridable. This in turn
 * causes the element to no more move together with the ridable element causing issues.
 * To prevent this problem the ridable can be locked using setLocked(). While locked
 * changes due to ECBehaviorProjectToGround changes will not cause setRidable() to be
 * called. While locked you can still manually call setRidable() to assign a ridable of
 * your choice.
 * 
 * Behavior supports persistency.
 * 
 * \see https://developer.dragondreams.ch/wiki/doku.php/dragengine:modules:dragonscript:behavior_rideon
 */
class ECBehaviorRideOn extends DefaultECBehavior
	/** \brief Listener for behavior instance events. */
	interface Listener
		/** \brief Ridable changed. */
		func void ridableChanged(Instance instance)
	end
	
	/** \brief Default implementation of behavior instance listener. */
	class DefaultListener implements Listener
		func new()
		end
		
		func void ridableChanged(Instance instance)
		end
	end
	
	/** \brief Factory creating listeners. */
	interface ListenerFactory
		/** \brief Create listener. */
		func Listener createListener(Instance instance)
	end
	
	/** \brief Factory creating listeners using block. */
	class BlockListenerFactory implements ListenerFactory
		var Block pBlock
		
		/** \brief Create factory using block receiving Instance as parameter returning Listener. */
		func new(Block blockFactory)
			if blockFactory == null
				throw ENullPointer.new()
			end
			pBlock = blockFactory
		end
		
		/** \brief Create listener. */
		func Listener createListener(Instance instance)
			return pBlock.run(instance) cast Listener
		end
	end
	
	/**
	 * \brief Behavior factory.
	 * \version 1.25
	 * 
	 * Automatically assigns these behaviors if present before adding:
	 * - Required: \ref ECBehaviorLocomotion
	 * - Required: \ref ECBehaviorProjectToGround
	 * 
	 * Example XML element class:
	 * \code{.xml}
	 * <behavior type='ECBehaviorRideOn'>
	 *   <!-- optional: add behavior trees. default adds all behavior trees. -->
	 *   <list name='behaviorTrees'>
	 *     <string/> <!-- add behavior with empty identifier -->
	 *     <string>default</string> <!-- add behavior with 'default' identifier -->
	 *   </list>
	 * 
	 *   <!-- optional: add state machines. default adds all state machines. -->
	 *   <list name='stateMachines'>
	 *     <string/> <!-- add behavior with empty identifier -->
	 *     <string>default</string> <!-- add behavior with 'default' identifier -->
	 *   </list>
	 * </behavior>
	 * \endcode
	 * 
	 * Element class properties added by the behavior can also be set directly inside the tag
	 * be removing the property name prefix and starting with a "." (for example ".propertyName").
	 */
	class Factory implements BehaviorFactory
		func new()
		end
		
		func String factoryId()
			return "ECBehaviorRideOn"
		end
		
		func ECBehavior addBehavior(BehaviorElementClass eclass, String id, Dictionary parameters)
			if not id.empty()
				throw EInvalidParam.new("id is not empty string")
			end
			var ECBehaviorRideOn behavior = ECBehaviorRideOn.new(eclass,\
				ECBehaviorLocomotion.getBehaviorIn(eclass),\
				ECBehaviorProjectToGround.getBehaviorIn(eclass))
			
			eclass.sharedFactoryHelper.allBTSM(behavior.getBTSMs(), eclass, parameters)
			
			eclass.sharedFactoryHelper.setPropertiesFromParameters(eclass, parameters, "rideOn")
			return behavior
		end
	end
	
	
	
	/** \brief Behavior instance. */
	class Instance extends DefaultECBehaviorInstance
		/**
		 * \brief Behavior tree action/condition "rideOn.check".
		 * \version 1.26
		 */
		private class BTACheck extends BTSMActionCondition
			var Instance pInstance
			var String pPrefix
			
			func new(Instance instance, String prefix)
				pInstance = instance
				pPrefix = prefix
			end
			
			func BTResult runActionShared(Object context, Dictionary parameters)
				return check("", parameters) if BTResult.success\
					else (parameters.has("wait") if BTResult.running else BTResult.failure)
			end
			
			func bool evaluateConditionShared(Object context, Dictionary parameters)
				return check(pPrefix, parameters)
			end
			
			func bool check(String prefix, Dictionary parameters)
				var bool result = true
				var Object value
				
				value = parameters.getAt(prefix + "ridable", null)
				if value != null
					result &= (pInstance.getRidable() != null) == value.equals("true")
				end
				
				return result
			end
		end
		
		/** \brief Update locomotion on collider changed. */
		private class UpdateLocomotionListener extends ECBehaviorColliderAI.DefaultListener
			var Instance pInstance
			
			func new(Instance instance)
				pInstance = instance
			end
			
			func void colliderChanged(ECBehaviorColliderAI.Instance instance, Collider collider)
				pInstance.updateLocomotion()
			end
		end
		
		/** \brief Clear ridable and apply ridable velocity if no more touching ground. */
		private class NoMoreTouchingGround extends ECBehaviorProjectToGround.DefaultListener
			protected var Instance pInstance
			
			func new(Instance instance)
				pInstance = instance
			end
			
			func void touchesGroundChanged(ECBehaviorProjectToGround.Instance instance)
				if not instance.getTouchesGround()
					pInstance.onNoMoreTouchingGround()
				end
			end
		end
		
		
		var ECBehaviorRideOn pECBehavior
		var ECBehaviorProjectToGround.Instance pProjectToGround
		var ECBehaviorLocomotion.Instance pLocomotion
		var ECBehaviorRidable.Instance pRidable
		
		var bool pLocked
		var ElementResolver pElementResolver
		var Array pListeners
		var ECComposeBTSM.Instance pBTSMs
		
		
		
		/** \brief Create behavior instance. */
		func new(ECBehaviorRideOn ecbehavior, BehaviorElement element) super(element)
			pECBehavior = ecbehavior
			
			pLocked = false
			pListeners = Array.new()
			
			pLocomotion = ecbehavior.getLocomotion().instance(element)
			pProjectToGround = ecbehavior.getProjectToGround().instance(element)
			
			setRequiresThink(true)
		end
		
		/** \brief Dispose of behavior instance. */
		func void dispose()
			pRidable = null
			pListeners = null
			pLocomotion = null
			pProjectToGround = null
			pElementResolver = null
			pBTSMs = null
			super.dispose()
		end
		
		
		
		/** \brief Initialize element from stub. */
		func void init(StubElement stub)
			pLocomotion.getColliderAI().addListener(UpdateLocomotionListener.new(this))
			pProjectToGround.addListener(NoMoreTouchingGround.new(this))
			
			pECBehavior.createListeners(this)
			
			if pECBehavior.getBTSMs().hasAny()
				var String prefix = "rideOn."
				pBTSMs = ECComposeBTSM.Instance.new(getElement(), pECBehavior.getBTSMs())
				pBTSMs.addAllActionCondition(prefix + "check", BTACheck.new(this, prefix))
				pBTSMs.dropBTContexts()
			end
		end
		
		
		
		/** \brief Behavior. */
		func ECBehaviorRideOn getECBehavior()
			return pECBehavior
		end
		
		/** \brief Project to ground behavior instance. */
		func ECBehaviorProjectToGround.Instance getProjectToGround()
			return pProjectToGround
		end
		
		/** \brief Locomotion behavior instance. */
		func ECBehaviorLocomotion.Instance getLocomotion()
			return pLocomotion
		end
		
		
		
		/** \brief Ridable the actor is riding on or null. */
		func ECBehaviorRidable.Instance getRidable()
			return pRidable
		end
		
		/**
		 * \brief Set ridable the actor is riding on or null.
		 * 
		 * If actor changes from riding to not riding applies the linear velocity of the
		 * ridable before clearing the ridable. This ensures an actor keeps moving into
		 * the direction the ridable has been moving if the actor for example jumps or
		 * the ridable vanishes.
		 */
		func void setRidable(ECBehaviorRidable.Instance ridable)
			if ridable == pRidable
				return
			end
			
			var ColliderVolume colliderAI = pLocomotion.getColliderAI().getCollider()
			
			// this method can be called during disposal time. it is possible the ridable has
			// been just disposed. in this case getElement() returns null and any use of the
			// behavior produces incorrect results. check for this edge case to avoid problems
			if pRidable != null and pRidable.getElement() != null
				// during game world disposing it is possible the behavior is disposed of before
				// the elements riding on it are disposed of. in this case the collider becomes
				// null before we properly detach from it. avoid a null pointer in this case
				var Collider collider = pRidable.getCollider().getCollider()
				if collider != null
					collider.detach(colliderAI)
				end
				
				// apply ridable linear velocity to AI collider
				pLocomotion.getColliderAI().addLinearVelocity(pRidable.getLinearVelocity())
				
				pRidable.removeRideOn(this)
			end
			
			pRidable = ridable
			
			if ridable != null
				ridable.getCollider().getCollider().attachRelativeMovement(colliderAI)
				ridable.addRideOn(this)
			end
			
			pListeners.forEach(block Listener each
				each.ridableChanged(this)
			end)
			if pBTSMs != null
				pBTSMs.runEvent(ridable != null if "rideOn.begin" else "rideOn.end")
			end
		end
		
		/** \brief Actor is riding. */
		func bool isRiding()
			return pRidable != null
		end
		
		/** \brief Actor is not riding. */
		func bool isNotRiding()
			return pRidable == null
		end
		
		/**
		 * \brief Set ridable to null.
		 * 
		 * Same as calling setRidable(null).
		 */
		func void clearRidable()
			setRidable(null)
		end
		
		/** \brief Lock ridable. */
		func bool getLocked()
			return pLocked
		end
		
		/** \brief Set if ridable is locked. */
		func void setLocked(bool locked)
			if locked == pLocked
				return
			end
			
			pLocked = locked
			
			setRequiresThink(not locked)
		end
		
		
		
		/** \brief Linear velocity of ridable or zero vector if absent. */
		func Vector getLinearVelocity()
			if pRidable != null
				return pRidable.getLinearVelocity()
			end
			return Vector.new()
		end
		
		/** \brief Update locomotion orientation from ridable if present. */
		func void updateLocomotion()
			if pRidable != null
				pLocomotion.getLocomotion().setOrientation(pLocomotion.getColliderAI() \
					.getCollider().getOrientation().getEulerAngles().getY())
			end
		end
		
		
		
		/**
		 * \brief Actor is no more touching ground.
		 * 
		 * If not locked calls setRidable(null).
		 */
		func void onNoMoreTouchingGround()
			if pLocked
				return
			end
			
			setRidable(null)
		end
		
		
		
		/** \brief Add listener. */
		func void addListener(Listener listener)
			if listener == null
				throw EInvalidParam.new()
			end
			pListeners.add(listener)
		end
		
		/** \brief Remove listener. */
		func void removeListener(Listener listener)
			pListeners.remove(listener)
		end
		
		
		
		
		/**
		 * \brief Post think about what to do for the next frame update.
		 * 
		 * If locked does nothing. Otherwise if actor is grounded and element underneath is a
		 * behavior element set it as ridable otherwise clear it. If ridable is cleared applies
		 * ridable velocities to owner element.
		 */
		func void postThink(float elapsed)
			if pLocked
				return
			end
			
			// the default behavior checks if the ground supports ECBehaviorRidable and assings
			// this instance if present otherwise null. there are tough edge cases and situations
			// where this check is not enough. for example on a moving platform there can be some
			// element blocking player movement which has no ECBehaviorRidable assigned. if the
			// collider is just touching this element it is possible the project to ground
			// reacts to the element but not the ground below. in this case this behavior
			// considers the actor not riding on anything incorrectly causing the actor to
			// drift of the moving platform.
			// 
			// to solve this problem if the found element is not ECBehaviorRidable it is checked
			// if the ground element is attached to another element. typically such elements are
			// attached to the platform element directly or indirectly. by traveling up the
			// chain we can find the ridable platform and assign it. this is more stable than
			// the simple solution while remaining functionally valid solution
			/*
			var Element groundElement = pProjectToGround.getGroundElement()
			if groundElement == null or not groundElement castable BehaviorElement
				return
			end
			setRidable(ECBehaviorRidable.getInstanceIn(groundElement cast BehaviorElement))
			*/
			
			var Element groundElement = pProjectToGround.getGroundElement()
			var ECBehaviorRidable.Instance ridable
			var ECBehaviorRideOn.Instance rideOn
			var BehaviorElement checkElement
			
			while groundElement != null and groundElement castable BehaviorElement
				checkElement = groundElement cast BehaviorElement
				ridable = ECBehaviorRidable.getInstanceIn(checkElement)
				if ridable != null
					setRidable(ridable)
					return
				end
				
				// if the element supports ride-on behavior use this solution
				rideOn = ECBehaviorRideOn.getInstanceIn(checkElement)
				if rideOn != null
					setRidable(rideOn.pRidable)
					return
				end
				
				// check the parent if element is attached
				groundElement = checkElement.getParent()
			end
			
			setRidable(null)
		end
		
		
		
		/** \brief Frame update started. */
		func void enterFrame()
			if pElementResolver != null
				pElementResolver.resolve(getElement().getGameWorld())
				pElementResolver = null
			end
		end
		
		/**
		 * \brief Remove from game world.
		 * 
		 * Calls setRidable(null).
		 */
		func void removeFromGameWorld()
			setRidable(null)
		end
		
		
		
		/** \brief Read behavior from file. */
		func void readFromFile(PersistencyEnvironment env, FileReader reader)
			select reader.readByte() // version
			case 0
				var PersistencyFlags flags = PersistencyFlags.new(2, reader)
				pLocked = flags.getAt(0)
				
				if flags.getAt(1)
					pElementResolver = ElementResolver.new()
					pElementResolver.addBehavior(reader, block ECBehaviorRidable.Instance ridable
						setRidable(ridable)
					end)
					setRequiresEnterFrame(true)
				end
				
			else
				throw EInvalidParam.new("unsupported version")
			end
			
			setRequiresThink(not pLocked)
		end
		
		/** \brief Write behavior to file. */
		func void writeToFile(PersistencyEnvironment env, FileWriter writer)
			writer.writeByte(0) // version
			
			var PersistencyFlags flags = PersistencyFlags.new(2)
			flags.setAt(0, pLocked)
			flags.setAt(1, pRidable != null)
			flags.writeToFile(writer)
			
			if pRidable != null
				ElementResolver.writeToFileBehavior(writer, pRidable)
			end
		end
	end
	
	
	
	var ECBehaviorLocomotion pLocomotion
	var ECBehaviorProjectToGround pProjectToGround
	var Array pListenerFactories
	var ECComposeBTSM pBTSMs
	
	
	
	/** \brief Create behavior element class. */
	func new(BehaviorElementClass eclass, ECBehaviorLocomotion locomotion, \
	ECBehaviorProjectToGround projectToGround) super(eclass)
		if locomotion == null
			throw ENullPointer.new("locomotion")
		end
		if projectToGround == null
			throw ENullPointer.new("projectToGround")
		end
		if getBehaviorIn(eclass) != null
			throw BEMultipleInstanceException.new(eclass, this)
		end
		
		pLocomotion = locomotion
		pProjectToGround = projectToGround
		pListenerFactories = Array.new()
		pBTSMs = ECComposeBTSM.new()
		
		eclass.addBehavior(this)
	end
	
	/** \brief Dispose of behavior. */
	func void dispose()
		pLocomotion = null
		pProjectToGround = null
		pListenerFactories = null
		pBTSMs = null
		super.dispose()
	end
	
	
	
	/** \brief Locomotion behavior. */
	func ECBehaviorLocomotion getLocomotion()
		return pLocomotion
	end
	
	/** \brief Project to ground behavior. */
	func ECBehaviorProjectToGround getProjectToGround()
		return pProjectToGround
	end
	
	/**
	 * \brief Compose behavior trees and state machines.
	 * \version 1.26
	 */
	func ECComposeBTSM getBTSMs()
		return pBTSMs
	end
	
	/** \brief Add listener factory. */
	func void addListenerFactory(ListenerFactory factory)
		if factory == null
			throw ENullPointer.new()
		end
		pListenerFactories.add(factory)
	end
	
	/**
	 * \brief Add listener factory using block.
	 * 
	 * Block receives as parameter Instance and returns Listener.
	 */
	func void addListenerFactory(Block blockFactory)
		pListenerFactories.add(BlockListenerFactory.new(blockFactory))
	end
	
	/** \brief Visit listener factories with block with argument ListenerFactory. */
	func void forEachListenerFactory(Block ablock)
		pListenerFactories.forEach(ablock)
	end
	
	/** \brief Create listeners from factories adding them to behavior instance. */
	func void createListeners(Instance instance)
		pListenerFactories.forEach(block ListenerFactory each
			instance.addListener(each.createListener(instance))
		end)
	end
	
	
	
	/** \brief Create behavior element class. */
	/** \brief Get instance in element from owner element class. */
	func Instance instance(BehaviorElement element)
		return element.getInstanceAt(getInstanceIndex()) cast Instance
	end
	
	
	
	/**
	 * \brief Get behavior in element class or \em null if absent.
	 * 
	 * Use this method to check if a particular BehaviorElementClass contains a behavior
	 * of type ECBehaviorProjectToGround.
	 */
	static func ECBehaviorRideOn getBehaviorIn(BehaviorElementClass eclass)
		return eclass.findBehavior(block ECBehaviorRideOn each
			return true
		end) cast ECBehaviorRideOn
	end
	
	/**
	 * \brief Get instance in element or \em null if absent.
	 * 
	 * Use this method to check if a particular BehaviorElement contains a behavior instance
	 * of type ECBehaviorProjectToGround.Instance .
	 */
	static func Instance getInstanceIn(BehaviorElement element)
		return element.findInstance(block Instance each
			return true
		end) cast Instance
	end
	
	
	
	/** \brief Create Behavior instance. */
	func ECBehaviorInstance createInstance(BehaviorElement element)
		return Instance.new(this, element)
	end
end
