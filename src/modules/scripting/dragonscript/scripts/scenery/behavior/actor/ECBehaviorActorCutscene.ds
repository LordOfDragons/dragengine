/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */


namespace Dragengine.Scenery

pin Dragengine.Gui
pin Dragengine.LoadSave
pin Dragengine.Preloading
pin Dragengine.Utils


/**
 * \brief Behavior adding cutscene support to actors.
 * 
 * Allows actor to perform cutscene actions controlled by conversation scripts.
 * 
 * Loads a custom animator and applies it to ECBehaviorConversationActor. Controller mappings
 * assigned to ECBehaviorConversationActor do affect the loaded animator so cutscene animators
 * can integrate into switched animators. In addition this behavior adds a controller named
 * "cutscene" which is used to play back the cutscene.
 * 
 * Upon starting the animation captures the current animation state into state number 0.
 * This allows cutscenes to blend over from the current state if required.
 * 
 * Supports adding break points to interrupt playing back a cutscene until the conversation
 * script decides to continue. This allows for special configurations and requires the used
 * animator to support playing back an idle animation (for example using "idle" controller)
 * while the cutscene controller is frozen at the break point value.
 * 
 * Also supports loading a sound or synthesizer to play back while the cutscene is running.
 * 
 * When using this behavior make sure the BaseActorAction subclass used supports changing
 * animator assigned to ECBehaviorActorAnimated while the action is in used. If this is not
 * the case the BaseActorAction subclass can access AnimatorController of the previous
 * animator causing problems.
 * 
 * Adds these conversation condition and command named "cutscene".
 *
 * Element class property prefix is "cutscene".
 * 
 * \see https://developer.dragondreams.ch/wiki/doku.php/gamedev:animators
 * \see https://developer.dragondreams.ch/wiki/doku.php/gamedev:deigde:editors:animator
 * \see https://developer.dragondreams.ch/wiki/doku.php/tools:blenderexportscripts
 */
class ECBehaviorActorCutscene extends DefaultECBehavior
	/** \brief Listener for behavior instance events. */
	interface Listener
		/** \brief Cutscene started. */
		func void cutsceneStarted(Instance instance)
		
		/** \brief Cutscene stopped. */
		func void cutsceneStopped(Instance instance)
		
		/** \brief Cutscene hit break point and is now waiting. */
		func void cutscenePaused(Instance instance)
		
		/** \brief Cutscene continues after waiting at a break point. */
		func void cutsceneResumed(Instance instance)
	end
	
	/** \brief Default implementation of behavior instance listener. */
	class DefaultListener implements Listener
		/** \brief Create default listener. */
		public func new()
		end
		
		/** \brief Cutscene started. */
		public func void cutsceneStarted(Instance instance)
		end
		
		/** \brief Cutscene stopped. */
		public func void cutsceneStopped(Instance instance)
		end
		
		/** \brief Cutscene hit break point and is now waiting. */
		public func void cutscenePaused(Instance instance)
		end
		
		/** \brief Cutscene continues after waiting at a break point. */
		public func void cutsceneResumed(Instance instance)
		end
	end
	
	/** \brief Factory creating listeners. */
	interface ListenerFactory
		/** \brief Create listener. */
		func Listener createListener(Instance instance)
	end
	
	/** \brief Factory creating listeners using block. */
	class BlockListenerFactory implements ListenerFactory
		private var Block pBlock
		
		/** \brief Create factory using block receiving Instance as parameter returning Listener. */
		public func new(Block blockFactory)
			if blockFactory == null
				throw ENullPointer.new()
			end
			pBlock = blockFactory
		end
		
		/** \brief Create listener. */
		public func Listener createListener(Instance instance)
			return pBlock.run(instance) cast Listener
		end
	end
	
	/** \brief States. */
	public enum State
		/** \brief Cutscene is stopped. */
		stopped
		
		/** \brief Cutscene is playing back. */
		playing
		
		/** \brief Cutscene is waiting at a break point. */
		paused
	end
	
	/**
	 * \brief Conversation condition and command controlling cutscene.
	 * 
	 * Condition Syntax:
	 * cutscene playing|paused|stopped
	 *   Checks if cutscene is playing, paused or stopped.
	 * 
	 * Command Syntax:
	 * cutscene start [path] {[breakPoint1] ... [breakPointN]}
	 *   path: Path to animator to load
	 *   breakPoint*: Break points to wait on in seconds in ascending order
	 * 
	 * cutscene resume
	 *   Resume cutscene if paused (hence waiting at a break point).
	 * 
	 * cutscene stop
	 *   Stop cutscene if running
	 * 
	 * cutscene synthesizer [path] [range] {[positionX] [positionY] [positionZ] {[bone]}}
	 *   Loads synthesizer and starts playing it back. Attaches the speaker to the actor.
	 *   path: Absolute path to synthesizer to load
	 *   range: Range in meters of speaker
	 *   position*: Position relative to actor origin to attach speaker to
	 *   bone: Attach relative to bone instead of actor origin
	 */
	class ConversationController implements ECBehaviorConversationActor.ConversationCondition, \
	ECBehaviorConversationActor.ConversationCommand
		private var Instance pInstance
		
		public func new(Instance instance)
			pInstance = instance
		end
		
		public func bool evaluateCondition(ECBehaviorConversationActor.Instance instance, Array arguments)
			var String action = arguments.getAt(1) cast String
			if action.equals("playing")
				return pInstance.isPlaying()
				
			elif action.equals("paused")
				return pInstance.isPaused()
				
			elif action.equals("stopped")
				return pInstance.isStopped()
				
			else
				throw EInvalidParam.new("Unknown action '" + action + "'")
			end
		end
		
		public func void runCommand(ECBehaviorConversationActor.Instance instance, Array arguments)
			var String action = arguments.getAt(1) cast String
			
			if action.equals("start")
				pInstance.setAnimator(arguments.getAt(2) cast String)
				arguments.slice(3).forEach(block String each
					pInstance.addBreakPoint(each.toFloat())
				end)
				pInstance.start()
				
			elif action.equals("resume")
				pInstance.resume()
				
			elif action.equals("stop")
				pInstance.stop()
				
			elif action.equals("synthesizer")
				var String path = arguments.getAt(2) cast String
				var float range = (arguments.getAt(3) cast String).toFloat()
				var int count = arguments.getCount()
				var Vector position = Vector.new()
				var String bone = null
				
				if count >= 7
					position = Vector.new((arguments.getAt(4) cast String).toFloat(), \
						(arguments.getAt(5) cast String).toFloat(), \
						(arguments.getAt(6) cast String).toFloat())
					
					if count >= 8
						bone = arguments.getAt(7) cast String
					end
				end
				
				pInstance.playSynthesizer(path, range, position, bone)
			else
				throw EInvalidParam.new("Unknown action '" + action + "'")
			end
		end
	end
	
	/**
	 * \brief Behavior factory.
	 * \ref 1.25
	 * 
	 * Automatically assigns these behaviors if present before adding:
	 * - Required: \ref ECBehaviorCollider
	 * - Required: \ref ECBehaviorConversationActor
	 * 
	 * Example XML element class:
	 * \code{.xml}
	 * <behavior type='ECBehaviorActorCutscene'/>
	 * \endcode
	 * 
	 * Element class properties added by the behavior can also be set directly inside the tag
	 * be removing the property name prefix and starting with a "." (for exampler ".propertyName").
	 */
	class Factory implements BehaviorFactory
		func new()
		end
		
		func String factoryId()
			return "ECBehaviorActorCutscene"
		end
		
		func ECBehavior addBehavior(BehaviorElementClass eclass, String id, Dictionary parameters)
			if not id.empty()
				throw EInvalidParam.new("id is not empty string")
			end
			var ECBehaviorActorCutscene behavior = ECBehaviorActorCutscene.new(eclass,\
				ECBehaviorCollider.getBehaviorIn(eclass),\
				ECBehaviorConversationActor.getBehaviorIn(eclass))
			BehaviorElementClass.sharedFactoryHelper.setPropertiesFromParameters(\
				eclass, parameters, "cutscene")
			return behavior
		end
	end
	
	
	
	/** \brief Behavior instance. */
	class Instance extends DefaultECBehaviorInstance
		/** \brief Update controllers listener. */
		private class UpdateControllers extends ECBehaviorActorAnimated.DefaultListener
			private var Instance pInstance
			
			public func new(Instance instance)
				pInstance = instance
			end
			
			public func void updateControllers(ECBehaviorActorAnimated.Instance instance, float elapsed)
				pInstance.updateControllers(elapsed)
			end
		end
		
		
		private var ECBehaviorActorCutscene pECBehavior
		private var ECBehaviorCollider.Instance pCollider
		private var ECBehaviorConversationActor.Instance pConversationActor
		
		private var State pState
		private var String pPathAnimator
		private var Animator pAnimator
		private var String pPathSynthesizer
		private var Speaker pSpeakerSynth
		private var Vector pSpeakerPosition
		private var String pSpeakerBone
		private var Array pBreakPoints
		private var int pNextBreakPoint
		private var String pControllerName
		private var AnimatorController pController
		
		private var Array pListeners
		
		
		
		/** \brief Create behavior instance. */
		public func new(ECBehaviorActorCutscene ecbehavior, BehaviorElement element) super(element)
			pECBehavior = ecbehavior
			pBreakPoints = Array.new()
			pNextBreakPoint = 0
			pState = State.stopped
		
			pListeners = Array.new()
			
			pCollider = ecbehavior.getCollider().instance(element)
			pConversationActor = ecbehavior.getConversationActor().instance(element)
		end
		
		/** \brief Dispose of behavior instance. */
		public func void dispose()
			pConversationActor = null
			pCollider = null
			pListeners = null
			
			super.dispose()
		end
		
		
		
		/** \brief Initialize behavior from stub. */
		public func void init(StubElement stub)
			pControllerName = pECBehavior.getControllerName().getValue(stub)
			
			pConversationActor.getActorAnimated().addListener(UpdateControllers.new(this))
			
			var ConversationController convoController = ConversationController.new(this)
			pConversationActor.addCondition("cutscene", convoController)
			pConversationActor.addCommand("cutscene", convoController)
			
			pECBehavior.createListeners(this)
		end
		
		
		
		/** \brief Behavior. */
		public func ECBehaviorActorCutscene getECBehavior()
			return pECBehavior
		end
		
		/** \brief Collider behavior. */
		public func ECBehaviorCollider.Instance getCollider()
			return pCollider
		end
		
		/** \brief Conversation actor behavior. */
		public func ECBehaviorConversationActor.Instance getConversationActor()
			return pConversationActor
		end
		
		
		
		/** \brief Animator or \em null if absent. */
		public func Animator getAnimator()
			return pAnimator
		end
		
		/** \brief Set animator from path or \em null if absent. */
		public func void setAnimator(String path)
			if path == null
				pAnimator = null
				
			else
				pPathAnimator = path
				pAnimator = pECBehavior.getLoaders().getAnimator().loadFromFile(path)
			end
		end
		
		
		
		/** \brief Count of break points. */
		public func int getBreakPointCount()
			return pBreakPoints.getCount()
		end
		
		/** \brief Break point at index. */
		public func float getBreakPointAt(int index)
			return pBreakPoints.getAt(index) cast float
		end
		
		/** \brief Add break point. */
		public func void addBreakPoint(float breakPoint)
			pBreakPoints.add(breakPoint)
		end
		
		/** \brief Remove all break points. */
		public func void removeAllBreakPoints()
			pBreakPoints.removeAll()
		end
		
		/** \brief Index of next break point. */
		public func int getNextBreakPoint()
			return pNextBreakPoint
		end
		
		/** \brief Set index of next break point. */
		public func void setNextBreakPoint(int index)
			if index < 0
				throw EInvalidParam.new()
			end
			pNextBreakPoint = index
		end
		
		
		
		/** \brief State. */
		public func State getState()
			return pState
		end
		
		/** \brief Set state. */
		protected func void setState(State state)
			pState = state
		end
		
		/** \brief Cutscene is playing back. */
		public func bool isPlaying()
			return pState == State.playing
		end
		
		/** \brief Cutscene is waiting at a break point. */
		public func bool isPaused()
			return pState == State.paused
		end
		
		/** \brief Cutscene is stopped. */
		public func bool isStopped()
			return pState == State.stopped
		end
		
		/** \brief Play back cutscene. */
		public func void start()
			stop()
			
			if pAnimator == null
				throw EInvalidParam.new("No animator loaded to play back")
			end
			
			var ECBehaviorActorAnimated.Instance animated = pConversationActor.getActorAnimated()
			
			animated.setAnimator(pAnimator)
			
			pController = animated.getControllerNamed(pControllerName)
			pController.setToLower()
			
			animated.captureState(0)
			animated.applyAnimations() // required if behavior has been added after animated
			
			pNextBreakPoint = 0
			pState = State.playing
			
			pListeners.forEach(block Listener each
				each.cutsceneStarted(this)
			end)
		end
		
		/** \brief Break cutscene at break point. */
		public func void pause()
			if pState != State.playing
				return
			end
			
			pState = State.paused
			
			pListeners.forEach(block Listener each
				each.cutscenePaused(this)
			end)
		end
		
		/** \brief Continue cutscene if waiting on break point. */
		public func void resume()
			if pState != State.paused
				return
			end
			
			pNextBreakPoint++
			pState = State.playing
			
			pListeners.forEach(block Listener each
				each.cutsceneResumed(this)
			end)
		end
		
		/** \brief Stop cutscene if running. */
		public func void stop()
			if pState == State.stopped
				return
			end
			
			if pSpeakerSynth != null
				pSpeakerSynth.stop()
				getElement().getGameWorld().getWorld().removeSpeaker(pSpeakerSynth)
				pSpeakerSynth = null
			end
			
			pController = null
			
			pState = State.stopped
			
			pListeners.forEach(block Listener each
				each.cutsceneStopped(this)
			end)
		end
		
		/** \brief Update controllers. */
		public func void updateControllers(float elapsed)
			if pState != State.playing
				return
			end
			
			pController.increment(elapsed)
			
			if pNextBreakPoint < pBreakPoints.getCount()
				var float time = pBreakPoints.getAt(pNextBreakPoint) cast float
				if pController.getValue() >= time
					pController.setValue(time)
					pause()
				end
				
			elif pController.isAtUpper()
				stop()
			end
		end
		
		
		
		/** \brief Load synthesizer and create speaker playing it back. */
		public func void playSynthesizer(String path, float range, Vector position, String bone)
			if pState == State.stopped
				return
			end
			
			var SynthesizerInstance synthinst = SynthesizerInstance.new()
			pPathSynthesizer = path
			synthinst.setSynthesizer(pECBehavior.getLoaders().getSynthesizer().loadFromFile(path))
			synthinst.getControllerNamed(pControllerName).setCurveTime()
			
			pSpeakerSynth = Speaker.new()
			pSpeakerSynth.setLooping(false)
			pSpeakerSynth.setVolume(1)
			pSpeakerSynth.setRange(range)
			pSpeakerSynth.setLayerMask(LayerMask.newWith(BaseGameApp.WorldLayerBit.audio))
			
			if bone != null
				(pCollider.getCollider() cast ColliderRig).attachBone(\
					pSpeakerSynth, bone, position, Quaternion.new())
				
			else
				pCollider.getCollider().attachStatic(pSpeakerSynth, position, Quaternion.new())
			end
			
			pSpeakerSynth.setSynthesizer(synthinst)
			getElement().getGameWorld().getWorld().addSpeaker(pSpeakerSynth)
			pSpeakerSynth.play()
			
			pSpeakerPosition = position
			pSpeakerBone = bone
		end
		
		
		
		/** \brief Add listener. */
		public func void addListener(Listener listener)
			if listener == null
				throw EInvalidParam.new()
			end
			pListeners.add(listener)
		end
		
		/** \brief Remove listener. */
		public func void removeListener(Listener listener)
			pListeners.remove(listener)
		end
		
		
		
		/** \brief Read behavior from file. */
		public func void readFromFile(PersistencyEnvironment env, FileReader reader)
			select reader.readByte() // version
			case 0
				var PersistencyFlags flags = PersistencyFlags.new(3, reader)
				
				pState = State.withOrder(reader.readByte())
				
				if flags.getAt(0)
					setAnimator(reader.readString8())
					var float value = reader.readFloat()
					if pController != null
						pController.setValue(value)
					end
				end
				
				if flags.getAt(1)
					var SynthesizerInstance synthinst = SynthesizerInstance.new()
					pPathSynthesizer = reader.readString8()
					synthinst.setSynthesizer(pECBehavior.getLoaders().getSynthesizer() \
						.loadFromFile(pPathSynthesizer))
					synthinst.getControllerNamed(pControllerName).setCurveTime()
					
					pSpeakerSynth = Speaker.new()
					pSpeakerSynth.setLooping(flags.getAt(2))
					pSpeakerSynth.setVolume(reader.readFloat())
					pSpeakerSynth.setRange(reader.readFloat())
					pSpeakerSynth.setRollOff(reader.readFloat())
					pSpeakerSynth.setLayerMask(LayerMask.newWith(BaseGameApp.WorldLayerBit.audio))
					
					pSpeakerBone = env.readString8OrNullIfEmpty(reader)
					pSpeakerPosition = Vector.readFromFile(reader)
					
					if pSpeakerBone != null
						(pCollider.getCollider() cast ColliderRig).attachBone(\
							pSpeakerSynth, pSpeakerBone, pSpeakerPosition, Quaternion.new())
						
					else
						pCollider.getCollider().attachStatic(\
							pSpeakerSynth, pSpeakerPosition, Quaternion.new())
					end
					
					pSpeakerSynth.setSynthesizer(synthinst)
					getElement().getGameWorld().getWorld().addSpeaker(pSpeakerSynth)
					pSpeakerSynth.setPlayPosition(reader.readInt(), pSpeakerSynth.getPlayTo())
					pSpeakerSynth.play()
				end
				
				var int i, count = reader.readByte()
				for i = 0 to count
					pBreakPoints.add(reader.readFloat())
				end
				
				pNextBreakPoint = reader.readByte()
				
			else
				throw EInvalidParam.new("unsupported version")
			end
		end
		
		/** \brief Write behavior to file. */
		public func void writeToFile(PersistencyEnvironment env, FileWriter writer)
			writer.writeByte(0) // version
			
			var PersistencyFlags flags = PersistencyFlags.new(3)
			flags.setAt(0, pAnimator != null)
			flags.setAt(1, pSpeakerSynth != null and pSpeakerSynth.getPlaying())
			flags.setAt(2, pSpeakerSynth != null and pSpeakerSynth.getLooping())
			flags.writeToFile(writer)
			
			writer.writeByte(pState.order())
			if pAnimator != null
				writer.writeString8(pPathAnimator)
				var float value
				if pController != null
					value = pController.getValue()
				end
				writer.writeFloat(value)
			end
			
			if pSpeakerSynth != null and pSpeakerSynth.getPlaying()
				writer.writeString8(pPathSynthesizer)
				writer.writeFloat(pSpeakerSynth.getVolume())
				writer.writeFloat(pSpeakerSynth.getRange())
				writer.writeFloat(pSpeakerSynth.getRollOff())
				env.writeString8OrEmptyIfNull(writer, pSpeakerBone)
				pSpeakerPosition.writeToFile(writer)
				writer.writeInt(pSpeakerSynth.getPlayFrom())
			end
			
			writer.writeByte(pBreakPoints.getCount())
			pBreakPoints.forEach(block float each
				writer.writeFloat(each)
			end)
			
			writer.writeByte(pNextBreakPoint)
		end
	end
	
	
	
	private var Loaders pLoaders
	private var ECBehaviorCollider pCollider
	private var ECBehaviorConversationActor pConversationActor
	private var ECPString pControllerName
	private var Array pListenerFactories
	
	
	
	/** \brief Create behavior element class. */
	public func new(BehaviorElementClass eclass, ECBehaviorCollider collider, \
	ECBehaviorConversationActor conversationActor) \
	this(eclass, collider, conversationActor, BaseGameApp.getApp().getLoaders())
	end
	
	public func new(BehaviorElementClass eclass, ECBehaviorCollider collider, \
	ECBehaviorConversationActor conversationActor, Loaders loaders) \
	this(eclass, collider, conversationActor, loaders, "cutscene.")
	end
	
	public func new(BehaviorElementClass eclass, ECBehaviorCollider collider, \
	ECBehaviorConversationActor conversationActor, Loaders loaders, String prefix) super(eclass)
		if collider == null
			throw ENullPointer.new("collider")
		end
		if conversationActor == null
			throw ENullPointer.new("conversationActor")
		end
		
		pCollider = collider
		pConversationActor = conversationActor
		pLoaders = loaders
		pListenerFactories = Array.new()
		
		pControllerName = ECPString.new(prefix + "controllerName", "cutscene")
		eclass.addProperty(pControllerName)
		
		eclass.addBehavior(this)
	end
	
	/** \brief Dispose of behavior. */
	public func void dispose()
		pCollider = null
		pConversationActor = null
		pLoaders = null
		pListenerFactories = null
		super.dispose()
	end
	
	
	
	/** \brief Loaders. */
	public func Loaders getLoaders()
		return pLoaders
	end
	
	/** \brief Collider behavior. */
	public func ECBehaviorCollider getCollider()
		return pCollider
	end
	
	/** \brief Conversation actor behavior. */
	public func ECBehaviorConversationActor getConversationActor()
		return pConversationActor
	end
	
	/** \brief Name of playback controller (default "cutscene"). */
	public func ECPString getControllerName()
		return pControllerName
	end
	
	/** \brief Add listener factory. */
	public func void addListenerFactory(ListenerFactory factory)
		if factory == null
			throw ENullPointer.new()
		end
		pListenerFactories.add(factory)
	end
	
	/**
	 * \brief Add listener factory using block.
	 * 
	 * Block receives as parameter Instance and returns Listener.
	 */
	public func void addListenerFactory(Block blockFactory)
		pListenerFactories.add(BlockListenerFactory.new(blockFactory))
	end
	
	/** \brief Visit listener factories with block with argument ListenerFactory. */
	public func void forEachListenerFactory(Block ablock)
		pListenerFactories.forEach(ablock)
	end
	
	/** \brief Create listeners from factories adding them to behavior instance. */
	public func void createListeners(Instance instance)
		pListenerFactories.forEach(block ListenerFactory each
			instance.addListener(each.createListener(instance))
		end)
	end
	
	
	
	/** \brief Get instance in element from owner element class. */
	public func Instance instance(BehaviorElement element)
		return element.getInstanceAt(getInstanceIndex()) cast Instance
	end
	
	/**
	 * \brief Get behavior in element class or \em null if absent.
	 * 
	 * Use this method to check if a particular BehaviorElementClass contains a behavior
	 * of type ECBehaviorConversationActor.
	 */
	static public func ECBehaviorActorCutscene getBehaviorIn(BehaviorElementClass eclass)
		return eclass.findBehavior(block ECBehaviorActorCutscene each
			return true
		end) cast ECBehaviorActorCutscene
	end
	
	/**
	 * \brief Get instance in element or \em null if absent.
	 * 
	 * Use this method to check if a particular BehaviorElement contains a behavior instance
	 * of type ECBehaviorActorCutscene.Instance . If more than one instance is present returns
	 * the first instance.
	 */
	static public func Instance getInstanceIn(BehaviorElement element)
		return element.findInstance(block Instance each
			return true
		end) cast Instance
	end
	
	
	
	/** \brief Create Behavior instance. */
	public func ECBehaviorInstance createInstance(BehaviorElement element)
		return Instance.new(this, element)
	end
end
