/* 
 * Drag[en]gine DragonScript Script Module
 *
 * Copyright (C) 2020, Roland Pl√ºss (roland@rptd.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */


namespace Dragengine.Scenery

pin Dragengine.Gui
pin Dragengine.LoadSave
pin Dragengine.Preloading
pin Dragengine.Utils


/**
 * \brief Behavior adding support to actors to know what element they are looking at.
 * 
 * Behavior uses one collider collision test located attached ECBehaviorColliderAI facing
 * forward. If no ECBehaviorColliderAI is present ECBehaviorCollider is used instead.
 * 
 * If ECBehaviorComponent is present and a test bone is set the collision test will be
 * attached to the component bone. This is simple and good solution for FPS type games.
 * 
 * If no component and bone is used and ECBehaviorLocomotion is present then the test
 * parameters will be updated to match the locomotion looking direction.
 * 
 * Requires these behaviors to be present:
 * - ECBehaviorColliderAI or ECBehaviorCollider
 * 
 * To this behavior add it and set the class properties. Add listener to be notified if the
 * looked at element changes or query the current state.
 * 
 * \par Interaction with ECBehaviorLookedAt
 * 
 * If the looked at element has ECBehaviorLookedAt instance it will be updated by adding
 * and removing the owner element.
 */
class ECBehaviorLookAt extends DefaultECBehavior
	/** \brief Listener for behavior instance events. */
	interface Listener
		/** \brief Enabled changed. */
		func void enabledChanged(Instance instance)
		
		/** \brief Looking at element changed. */
		func void lookAtChanged(Instance instance)
	end
	
	/** \brief Default implementation of behavior instance listener. */
	class DefaultListener implements Listener
		/** \brief Create default listener. */
		public func new()
		end
		
		/** \brief Enabled changed. */
		public func void enabledChanged(Instance instance)
		end
		
		/** \brief Looking at element changed. */
		public func void lookAtChanged(Instance instance)
		end
	end
	
	/** \brief Factory creating listeners. */
	interface ListenerFactory
		/** \brief Create listener. */
		func Listener createListener(Instance instance)
	end
	
	/** \brief Factory creating listeners using block. */
	class BlockListenerFactory implements ListenerFactory
		private var Block pBlock
		
		/** \brief Create factory using block receiving Instance as parameter returning Listener. */
		public func new(Block blockFactory)
			if blockFactory == null
				throw ENullPointer.new()
			end
			pBlock = blockFactory
		end
		
		/** \brief Create listener. */
		public func Listener createListener(Instance instance)
			return pBlock.run(instance) cast Listener
		end
	end
	
	
	
	/** \brief Behavior instance. */
	class Instance extends DefaultECBehaviorInstance
		private var ECBehaviorLookAt pECBehavior
		private var ECBehaviorColliderAI.Instance pColliderAI
		private var ECBehaviorCollider.Instance pCollider
		private var ECBehaviorComponent.Instance pComponent
		private var ECBehaviorLocomotion.Instance pLocomotion
		
		private var ColliderCollisionTest pTest
		private var Vector pOrigin
		private var bool pHasOrigin
		private var bool pUseLocomotion
		
		private var float pRange
		
		private var DVector pLookAtOrigin
		private var DVector pLookAtDirection
		private var Element pLookAtElement
		private var int pLookAtBone
		private var String pLookAtBoneName
		private var float pLookAtDistance
		private var DVector pLookAtHitPoint
		
		private var Array pListeners
		
		
		
		/** \brief Create element. */
		public func new(ECBehaviorLookAt ecbehavior, BehaviorElement element) super(element)
			pECBehavior = ecbehavior
			pListeners = Array.new()
			pUseLocomotion = false
			
			if ecbehavior.getColliderAI() != null
				pColliderAI = ecbehavior.getColliderAI().instance(element)
				
			else
				pCollider = ecbehavior.getCollider().instance(element)
			end
			
			setRequiresThink(true)
		end
		
		/** \brief Dispose of composeable instance. */
		public func void dispose()
			pTest = null
			pLocomotion = null
			pColliderAI = null
			pCollider = null
			pComponent = null
			pLookAtElement = null
			pListeners = null
			
			super.dispose()
		end
		
		
		
		/** \brief Initialize element from stub. */
		public func void init(StubElement stub)
			var BehaviorElement element = getElement()
			var Collider collider
			
			if pColliderAI != null
				collider = pColliderAI.getCollider()
				
			else
				collider = pCollider.getCollider()
			end
			
			if collider == null
				throw EInvalidParam.new()
			end
			
			if pECBehavior.getComponent() != null
				pComponent = pECBehavior.getComponent().instance(element)
			end
			if pECBehavior.getLocomotion() != null
				pLocomotion = pECBehavior.getLocomotion().instance(element)
			end
			
			var CodecPropertyString codec = element.getClass().getCodecPropertyString()
			
			pRange = DEMath.max(pECBehavior.getRange().getValue(stub), 0.0)
			pOrigin = pECBehavior.getOrigin().getVector(stub, codec)
			pHasOrigin = not pOrigin.isZero()
			
			// create colliision test and add it to element collider
			var CollisionFilter collisionFilter = pECBehavior.getCollisionFilter().getCollisionFilter()
			var Vector testDirection = Vector.new(0, 0, pRange)
			var String testBone = pECBehavior.getTestBone().getValue(stub)
			
			if testBone != null and not testBone.empty()
				pTest = ColliderCollisionTest.new(collisionFilter, \
					pComponent.getComponent(), testBone, pOrigin, testDirection)
				
			else
				pTest = ColliderCollisionTest.new(collisionFilter, pOrigin, testDirection)
				if pLocomotion != null
					pTest.setLocalDirection(false)
					pUseLocomotion = true
				end
			end
			
			collider.addCollisionTest(pTest)
			
			pECBehavior.createListeners(this)
		end
		
		
		
		/** \brief Behavior. */
		public func ECBehaviorLookAt getECBehavior()
			return pECBehavior
		end
		
		/** \brief ColliderAI behavior instance. */
		public func ECBehaviorColliderAI.Instance getColliderAI()
			return pColliderAI
		end
		
		/** \brief Collider behavior instance. */
		public func ECBehaviorCollider.Instance getCollider()
			return pCollider
		end
		
		/** \brief Component behavior instance or null if not used. */
		public func ECBehaviorComponent.Instance getComponent()
			return pComponent
		end
		
		/** \brief Locomotion behavior instance or null if not used. */
		public func ECBehaviorLocomotion.Instance getLocomotion()
			return pLocomotion
		end
		
		
		
		/** \brief Enable look-at. */
		public func bool getEnabled()
			return pTest.getEnabled()
		end
		
		/** \brief Set if look-at is enabled. */
		public func void setEnabled(bool enabled)
			if enabled == pTest.getEnabled()
				return
			end
			
			pTest.setEnabled(enabled)
			
			if not enabled
				setLookAtElement(null, -1, null, 0)
			end
			
			pListeners.forEach(block Listener each
				each.enabledChanged(this)
			end)
		end
		
		
		
		/**
		 * \brief Set test collider using shape.
		 * 
		 * By default no test collider is set in which case ra-ytesting is used. Using shapes
		 * like a sphere is useful to enlarge the hit area for example with 3rd person views.
		 */
		public func void setTestCollider(ShapeList shape)
			var ColliderVolume collider = ColliderVolume.new()
			collider.setShape(shape)
			pTest.setCollider(collider)
		end
		
		/**
		 * \brief Set shape of test collider to sphere.
		 * 
		 * By default no shape is set in which case ra-ytesting is used. Using shapes like a
		 * sphere is useful to enlarge the hit area for example with 3rd person views.
		 */
		public func void setSphereTestCollider(float radius)
			var ShapeList shape = ShapeList.new()
			shape.addSphere(Vector.new(), DEMath.max(radius, 0.0))
			setTestCollider(shape)
		end
		
		/** \brief Clear test collider reverting to ray-tracing. */
		public func void clearTestCollider()
			pTest.setCollider(null)
		end
		
		/** \brief Set test collision filter. */
		public func void setCollisionFilter(CollisionFilter filter)
			pTest.setCollisionFilter(filter)
		end
		
		
		
		/** \brief Test range. */
		public func float getRange()
			return pRange
		end
		
		/** \brief Set test range. */
		public func void setRange(float range)
			range = DEMath.max(range, 0.0)
			if DEMath.fabs(range - pRange) < 0.001
				return
			end
			
			pRange = range
			updateTestParameters()
		end
		
		/** \brief Test origin. */
		public func Vector getOrigin()
			return pOrigin
		end
		
		/** \brief Use locomotion. */
		public func bool getUseLocomotion()
			return pUseLocomotion
		end
		
		
		
		/** \brief Look-at element or null. */
		public func Element getLookAtElement()
			return pLookAtElement
		end
		
		/**
		 * \brief Look-at element if of type BehaviorElement or null.
		 * \version 1.4 
		 */
		public func BehaviorElement getLookAtBehaviorElement()
			if pLookAtElement != null and pLookAtElement castable BehaviorElement
				return pLookAtElement cast BehaviorElement
			end
			return null
		end
		
		/** \brief Is looking at an element. */
		public func bool hasLookAtElement()
			return pLookAtElement != null
		end
		
		/** \brief Is not looking at an element. */
		public func bool hasNotLookAtElement()
			return pLookAtElement == null
		end
		
		/** \brief Look-at bone or -1. */
		public func int getLookAtBone()
			return pLookAtBone
		end
		
		/** \brief Look-at bone name or null. */
		public func String getLookAtBoneName()
			return pLookAtBoneName
		end
		
		/** \brief Distance in meters to look-at hit point. */
		public func float getLookAtDistance()
			return pLookAtDistance
		end
		
		/** \brief Look-at hit point or \em null. */
		public func DVector getLookAtHitPoint()
			if pLookAtHitPoint == null and pLookAtElement != null
				pLookAtHitPoint = pLookAtOrigin + pLookAtDirection.normalize() * pLookAtDistance
			end
			return pLookAtHitPoint
		end
		
		/** \brief Test origin used for last look-at test. */
		public func DVector getLookAtOrigin()
			return pLookAtOrigin
		end
		
		/** \brief Test direction used for last look-at test. */
		public func DVector getLookAtDirection()
			return pLookAtDirection
		end
		
		
		
		/** \brief Add listener. */
		public func void addListener(Listener listener)
			if listener == null
				throw EInvalidParam.new()
			end
			pListeners.add(listener)
		end
		
		/** \brief Remove listener. */
		public func void removeListener(Listener listener)
			pListeners.remove(listener)
		end
		
		
		
		/** \brief Post thinking after physics processing is finished. */
		public func void postThink(float elapsed)
			update(elapsed)
		end
		
		/** \brief Update. */
		protected func void update(float elapsed)
			if not pTest.getEnabled()
				return
			end
			
			evaluateTest()
			updateTestParameters()
		end
		
		/** \brief Evaluate last test. */
		protected func void evaluateTest()
			pLookAtOrigin = pTest.getTestOrigin()
			pLookAtDirection = pTest.getTestDirection()
			
			var Collider collider
			if pTest.getHasCollision()
				collider = pTest.hitCollider(0)
			end
			
			if collider == null
				setLookAtElement(null, -1, null, 0)
				return
			end
			
			var int bone = pTest.hitBone(0)
			var String boneName = null
			
			if bone != -1 and collider castable ColliderRig
				var Rig rig = (collider cast ColliderRig).getRig()
				if rig != null
					boneName = rig.boneGetName(bone)
				end
			end
			
			var Element element = collider.getOwner() cast Element
			if element != null and element.isDisposed()
				element = null
			end
			
			setLookAtElement(element, bone, boneName, pTest.hitDistance(0))
		end
		
		/** \brief Collision test. */
		protected func ColliderCollisionTest getTest()
			return pTest
		end
		
		/** \brief Update test parameters. */
		protected func void updateTestParameters()
			if pUseLocomotion
				pTest.setDirection(pLocomotion.getViewDirection() * pRange)
				
				if pHasOrigin
					pTest.setOrigin(getElement().getElementMatrix() \
						.transformNormal(DVector.new(pOrigin)).toVector())
				end
				
			else
				pTest.setDirection(Vector.new(0, 0, pRange))
			end
		end
		
		/** \brief Set look-at element. */
		public func void setLookAtElement(Element element, int bone, String boneName, float distance)
			if pLookAtElement == element and pLookAtBone == bone
				pLookAtHitPoint = null
				pLookAtDistance = distance
				return
			end
			
			if pLookAtElement != null and pLookAtElement castable BehaviorElement and not pLookAtElement.isDisposed()
				var ECBehaviorLookedAt.Instance behavior = ECBehaviorLookedAt.getInstanceIn(pLookAtElement cast BehaviorElement)
				if behavior != null
					behavior.removeLookingActor(getElement())
				end
			end
			
			pLookAtElement = element
			pLookAtBone = bone
			pLookAtBoneName = boneName
			pLookAtHitPoint = null
			pLookAtDistance = distance
			
			if element != null and element castable BehaviorElement
				var ECBehaviorLookedAt.Instance behavior = \
					ECBehaviorLookedAt.getInstanceIn(element cast BehaviorElement)
				if behavior != null
					behavior.addLookingActor(getElement())
				end
			end
			
			pListeners.forEach(block Listener each
				each.lookAtChanged(this)
			end)
		end
	end
	
	
	
	private var ECBehaviorColliderAI pColliderAI
	private var ECBehaviorCollider pCollider
	private var ECBehaviorComponent pComponent
	private var ECBehaviorLocomotion pLocomotion
	private var ECPFloat pRange
	private var ECPVector pOrigin
	private var ECPString pTestBone
	private var ECComposeCollisionFilter pCollisionFilter
	private var Array pListenerFactories
	
	
	
	/**
	 * \brief Create behavior element class.
	 * 
	 * These values are optional and can be null: \em component, \em locomotion.
	 */
	public func new(BehaviorElementClass eclass, ECBehaviorColliderAI colliderAI, \
	ECBehaviorComponent component, ECBehaviorLocomotion locomotion) \
	this(eclass, colliderAI, component, locomotion, "lookAt.")
	end
	
	public func new(BehaviorElementClass eclass, ECBehaviorCollider collider, \
	ECBehaviorComponent component, ECBehaviorLocomotion locomotion) \
	this(eclass, collider, component, locomotion, "lookAt.")
	end
	
	public func new(BehaviorElementClass eclass, ECBehaviorColliderAI colliderAI, \
	ECBehaviorComponent component, ECBehaviorLocomotion locomotion, String prefix) \
	this(eclass, colliderAI, null, component, locomotion, prefix)
		if colliderAI == null
			throw ENullPointer.new("colliderAI")
		end
	end
	
	public func new(BehaviorElementClass eclass, ECBehaviorCollider collider, \
	ECBehaviorComponent component, ECBehaviorLocomotion locomotion, String prefix) \
	this(eclass, null, collider, component, locomotion, prefix)
		if collider == null
			throw ENullPointer.new("collider")
		end
	end
	
	private func new(BehaviorElementClass eclass, ECBehaviorColliderAI colliderAI, \
	ECBehaviorCollider collider, ECBehaviorComponent component, \
	ECBehaviorLocomotion locomotion, String prefix) super(eclass)
		if getBehaviorIn(eclass) != null
			throw BEMultipleInstanceException.new(eclass, this)
		end
		
		pColliderAI = colliderAI
		pCollider = collider
		pComponent = component
		pLocomotion = locomotion
		pListenerFactories = Array.new()
		
		pRange = ECPFloat.new(prefix + "range", 2, 0)
		eclass.addProperty(pRange)
		
		pOrigin = ECPVector.new(prefix + "origin", Vector.new(0, 1.6, 0))
		eclass.addProperty(pOrigin)
		
		pTestBone = ECPString.new(prefix + "bone", null)
		eclass.addProperty(pTestBone)
		
		var LayerMask cfCategory = LayerMask.newWith(BaseGameApp.CollisionFilterBit.dynamic)
		
		var LayerMask cfFilter = LayerMask.new()
		cfFilter.setBit(BaseGameApp.CollisionFilterBit.geometry)
		cfFilter.setBit(BaseGameApp.CollisionFilterBit.dynamic)
		cfFilter.setBit(BaseGameApp.CollisionFilterBit.actorAI)
		
		pCollisionFilter = ECComposeCollisionFilter.new(CollisionFilter.new(cfCategory, cfFilter))
		
		eclass.addBehavior(this)
	end
	
	/** \brief Dispose of behavior. */
	public func void dispose()
		pColliderAI = null
		pCollider = null
		pComponent = null
		pLocomotion = null
		pListenerFactories = null
		super.dispose()
	end
	
	
	
	/** \brief Collider AI behavior or null. */
	public func ECBehaviorColliderAI getColliderAI()
		return pColliderAI
	end
	
	/** \brief Collider behavior or null. */
	public func ECBehaviorCollider getCollider()
		return pCollider
	end
	
	/** \brief Component behavior or null. */
	public func ECBehaviorComponent getComponent()
		return pComponent
	end
	
	/** \brief Locomotion behavior or null. */
	public func ECBehaviorLocomotion getLocomotion()
		return pLocomotion
	end
	
	/** \brief Test range. */
	public func ECPFloat getRange()
		return pRange
	end
	
	/** \brief Test origin. */
	public func ECPVector getOrigin()
		return pOrigin
	end
	
	/** \brief Test bone. */
	public func ECPString getTestBone()
		return pTestBone
	end
	
	/** \brief Collision filter for AI collider. */
	public func ECComposeCollisionFilter getCollisionFilter()
		return pCollisionFilter
	end
	
	/** \brief Add listener factory. */
	public func void addListenerFactory(ListenerFactory factory)
		if factory == null
			throw ENullPointer.new()
		end
		pListenerFactories.add(factory)
	end
	
	/**
	 * \brief Add listener factory using block.
	 * 
	 * Block receives as parameter Instance and returns Listener.
	 */
	public func void addListenerFactory(Block blockFactory)
		pListenerFactories.add(BlockListenerFactory.new(blockFactory))
	end
	
	/** \brief Visit listener factories with block with argument ListenerFactory. */
	public func void forEachListenerFactory(Block ablock)
		pListenerFactories.forEach(ablock)
	end
	
	/** \brief Create listeners from factories adding them to behavior instance. */
	public func void createListeners(Instance instance)
		pListenerFactories.forEach(block ListenerFactory each
			instance.addListener(each.createListener(instance))
		end)
	end
	
	
	
	/** \brief Get instance in element from owner element class. */
	public func Instance instance(BehaviorElement element)
		return element.getInstanceAt(getInstanceIndex()) cast Instance
	end
	
	
	
	/**
	 * \brief Get behavior in element class or \em null if absent.
	 * 
	 * Use this method to check if a particular BehaviorElementClass contains a behavior
	 * of type ECBehaviorLookAt.
	 */
	static public func ECBehaviorLookAt getBehaviorIn(BehaviorElementClass eclass)
		return eclass.findBehavior(block ECBehaviorLookAt each
			return true
		end) cast ECBehaviorLookAt
	end
	
	/**
	 * \brief Get instance in element or \em null if absent.
	 * 
	 * Use this method to check if a particular BehaviorElement contains a behavior instance
	 * of type ECBehaviorLookAt.Instance .
	 */
	static public func Instance getInstanceIn(BehaviorElement element)
		return element.findInstance(block Instance each
			return true
		end) cast Instance
	end
	
	
	
	/** \brief Create Behavior instance. */
	public func ECBehaviorInstance createInstance(BehaviorElement element)
		return Instance.new(this, element)
	end
end
