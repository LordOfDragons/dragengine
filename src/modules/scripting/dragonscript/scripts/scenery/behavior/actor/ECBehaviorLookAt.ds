/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */


namespace Dragengine.Scenery

pin Dragengine.Gui
pin Dragengine.LoadSave
pin Dragengine.Preloading
pin Dragengine.Utils
pin Dragengine.BehaviorTreeSystem
pin Dragengine.StateMachineSystem


/**
 * \brief Behavior adding support to actors to know what element they are looking at.
 * 
 * Behavior uses one collider collision test located attached ECBehaviorColliderAI facing
 * forward. If no ECBehaviorColliderAI is present ECBehaviorCollider is used instead.
 * 
 * If ECBehaviorComponent is present and a test bone is set the collision test will be
 * attached to the component bone. This is simple and good solution for FPS type games.
 * 
 * If no component and bone is used and ECBehaviorLocomotion is present then the test
 * parameters will be updated to match the locomotion looking direction.
 * 
 * Requires these behaviors to be present:
 * - ECBehaviorColliderAI or ECBehaviorCollider
 * 
 * To this behavior add it and set the class properties. Add listener to be notified if the
 * looked at element changes or query the current state.
 * 
 * \par Interaction with ECBehaviorLookedAt
 * 
 * If the looked at element has ECBehaviorLookedAt instance it will be updated by adding
 * and removing the owner element.
 * 
 * \see https://developer.dragondreams.ch/wiki/doku.php/dragengine:modules:dragonscript:behavior_lookat
 */
class ECBehaviorLookAt extends DefaultECBehavior
	/** \brief Listener for behavior instance events. */
	interface Listener
		/** \brief Enabled changed. */
		func void enabledChanged(Instance instance)
		
		/** \brief Looking at element changed. */
		func void lookAtChanged(Instance instance)
	end
	
	/** \brief Default implementation of behavior instance listener. */
	class DefaultListener implements Listener
		/** \brief Create default listener. */
		func new()
		end
		
		/** \brief Enabled changed. */
		func void enabledChanged(Instance instance)
		end
		
		/** \brief Looking at element changed. */
		func void lookAtChanged(Instance instance)
		end
	end
	
	/** \brief Factory creating listeners. */
	interface ListenerFactory
		/** \brief Create listener. */
		func Listener createListener(Instance instance)
	end
	
	/** \brief Factory creating listeners using block. */
	class BlockListenerFactory implements ListenerFactory
		var Block pBlock
		
		/** \brief Create factory using block receiving Instance as parameter returning Listener. */
		func new(Block blockFactory)
			if blockFactory == null
				throw ENullPointer.new()
			end
			pBlock = blockFactory
		end
		
		/** \brief Create listener. */
		func Listener createListener(Instance instance)
			return pBlock.run(instance) cast Listener
		end
	end
	
	/**
	 * \brief Behavior factory.
	 * \version 1.25
	 * 
	 * Automatically assigns these behaviors if present before adding:
	 * - Required: \ref ECBehaviorColliderAI or \ref ECBehaviorCollider
	 * - Optional: \ref ECBehaviorComponent
	 * 
	 * Example XML element class:
	 * \code{.xml}
	 * <behavior type='ECBehaviorLookAt'>
	 *   <!-- optional: set collision filter. default value '3:0 1 2 3' which means
	 *                  category BaseGameApp.CollisionFilterBit.actorAI
	 *                  filter BaseGameApp.CollisionFilterBit.geometry,
	 *                         BaseGameApp.CollisionFilterBit.dynamic,
	 *                         BaseGameApp.CollisionFilterBit.actorAI.
	 *                  format is '', 'category' or 'category:filter' where category and filter
	 *                  are a list of bits to set. -->
	 *   <string name='collisionFilter'>3:0 1 2 3</string>
	 * 
	 *   <!-- optional: use component with id instead of empty string -->
	 *   <string name='component'>second</string>
	 *   
	 *   <!-- optional: add behavior trees. default adds all behavior trees. -->
	 *   <list name='behaviorTrees'>
	 *     <string/> <!-- add behavior with empty identifier -->
	 *     <string>default</string> <!-- add behavior with 'default' identifier -->
	 *   </list>
	 * 
	 *   <!-- optional: add state machines. default adds all state machines. -->
	 *   <list name='stateMachines'>
	 *     <string/> <!-- add behavior with empty identifier -->
	 *     <string>default</string> <!-- add behavior with 'default' identifier -->
	 *   </list>
	 * </behavior>
	 * \endcode
	 * 
	 * Element class properties added by the behavior can also be set directly inside the tag
	 * be removing the property name prefix and starting with a "." (for example ".propertyName").
	 */
	class Factory extends DefaultBehaviorFactory
		func new() super("ECBehaviorLookAt")
		end
		
		func ECBehavior addBehavior(BehaviorElementClass eclass, String id, Dictionary parameters)
			if not id.empty()
				throw EInvalidParam.new("id is not empty string")
			end
			var ECBehaviorComponent component = getHelper().defaultComponent(eclass, parameters)
			var ECBehaviorLocomotion locomotion = ECBehaviorLocomotion.getBehaviorIn(eclass)
			var ECBehaviorLookAt behavior
			
			var ECBehaviorColliderAI colliderAI = ECBehaviorColliderAI.getBehaviorIn(eclass)
			if colliderAI != null
				behavior = ECBehaviorLookAt.new(eclass, colliderAI, component, locomotion)
				
			else
				behavior = ECBehaviorLookAt.new(eclass,\
					ECBehaviorCollider.getBehaviorIn(eclass), component, locomotion)
			end
			
			if parameters.has("collisionFilter")
				behavior.getCollisionFilter().setCollisionFilter(ElementClass.getSharedCodecPropertyString().\
					decodeCollisionFilter(parameters.getAt("collisionFilter") cast String))
			end
			
			getHelper().allBTSM(behavior.getBTSMs(), eclass, parameters)
			
			getHelper().setPropertiesFromParameters(eclass, parameters, "lookAt")
			return behavior
		end
	end
	
	
	
	/** \brief Behavior instance. */
	class Instance extends DefaultECBehaviorInstance
		/**
		 * \brief Behavior tree action/condition "lookAt.update".
		 * \version 1.26
		 */
		private class BTAUpdate extends BTSMActionCondition
			var Instance pInstance
			
			func new(Instance instance)
				pInstance = instance
			end
			
			func BTResult runActionShared(Object context, Dictionary parameters)
				var Object value
				
				value = parameters.getAt("interactElement.assign", null)
				if value != null
					var BehaviorElement lookAtElement = pInstance.getLookAtBehaviorElement()
					if lookAtElement == null
						return BTResult.failure
					end
					
					var ECBehaviorInteractionElement.Instance interactionElement =\
						ECBehaviorInteractionElement.getInstanceIn(pInstance.getElement(), value cast String)
					if interactionElement == null
						return BTResult.failure
					end
					
					interactionElement.setInteractionElement(lookAtElement)
				end
				
				value = parameters.getAt("interact", null)
				if value != null
					if not ECBehaviorInteraction.checkInteraction(pInstance.getLookAtBehaviorElement(),\
					value cast String, parameters.getAt("interact.parameters", null) cast String,\
					pInstance.getElement())
						return BTResult.failure
					end
				end
				
				return BTResult.success
			end
		end
		
		/**
		 * \brief Behavior tree action/condition "lookAt.check".
		 * \version 1.26
		 */
		private class BTACheck extends BTSMActionCondition
			var Instance pInstance
			var String pPrefix
			
			func new(Instance instance, String prefix)
				pInstance = instance
				pPrefix = prefix
			end
			
			func BTResult runActionShared(Object context, Dictionary parameters)
				return check("", parameters) if BTResult.success\
					else (parameters.has("wait") if BTResult.running else BTResult.failure)
			end
			
			func bool evaluateConditionShared(Object context, Dictionary parameters)
				return check(pPrefix, parameters)
			end
			
			func bool check(String prefix, Dictionary parameters)
				var bool result = true
				var Object value
				
				value = parameters.getAt(prefix + "enabled", null)
				if value != null
					result &= pInstance.getEnabled() == value.equals("true")
				end
				
				value = parameters.getAt(prefix + "lookAt", null)
				if value != null
					result &= pInstance.hasLookAtElement() == value.equals("true")
				end
				
				value = parameters.getAt(prefix + "lookAt.distance.less", null)
				if value != null
					result &= pInstance.getLookAtDistance() < (value cast String).toFloat()
				end
				
				value = parameters.getAt(prefix + "lookAt.distance.greater", null)
				if value != null
					result &= pInstance.getLookAtDistance() > (value cast String).toFloat()
				end
				
				value = parameters.getAt(prefix + "lookAt.player", null)
				if value != null
					result &= pInstance.isLookAtPlayer() == value.equals("true")
				end
				
				result &= ECBehaviorInteraction.checkInteractionBTSM(\
					pInstance.getLookAtBehaviorElement(), parameters, prefix + "interact.",\
					pInstance.getElement())
				
				return result
			end
		end
		
		
		var ECBehaviorLookAt pECBehavior
		var ECBehaviorColliderAI.Instance pColliderAI
		var ECBehaviorCollider.Instance pCollider
		var ECBehaviorComponent.Instance pComponent
		var ECBehaviorLocomotion.Instance pLocomotion
		
		var ColliderCollisionTest pTest
		var Vector pOrigin
		var bool pHasOrigin
		var bool pUseLocomotion
		var String pTestBone
		var float pRange
		
		var DVector pLookAtOrigin
		var DVector pLookAtDirection
		var Element pLookAtElement
		var int pLookAtBone
		var String pLookAtBoneName
		var float pLookAtDistance
		var DVector pLookAtHitPoint
		
		var Array pListeners
		var ECComposeBTSM.Instance pBTSMs
		
		
		
		/** \brief Create element. */
		func new(ECBehaviorLookAt ecbehavior, BehaviorElement element) super(element)
			pECBehavior = ecbehavior
			pListeners = Array.new()
			pUseLocomotion = false
			
			if ecbehavior.getColliderAI() != null
				pColliderAI = ecbehavior.getColliderAI().instance(element)
				
			else
				pCollider = ecbehavior.getCollider().instance(element)
			end
			
			setRequiresThink(true)
		end
		
		/** \brief Dispose of composeable instance. */
		func void dispose()
			pTest = null
			pLocomotion = null
			pColliderAI = null
			pCollider = null
			pComponent = null
			pLookAtElement = null
			pListeners = null
			pBTSMs = null
			
			super.dispose()
		end
		
		
		
		/** \brief Initialize element from stub. */
		func void init(StubElement stub)
			var BehaviorElement element = getElement()
			var Collider collider
			
			if pColliderAI != null
				collider = pColliderAI.getCollider()
				
			else
				collider = pCollider.getCollider()
			end
			
			if collider == null
				throw EInvalidParam.new()
			end
			
			if pECBehavior.getComponent() != null
				pComponent = pECBehavior.getComponent().instance(element)
			end
			if pECBehavior.getLocomotion() != null
				pLocomotion = pECBehavior.getLocomotion().instance(element)
			end
			
			var CodecPropertyString codec = element.getClass().getCodecPropertyString()
			
			pRange = DEMath.max(pECBehavior.getRange().getValue(stub), 0.0)
			pOrigin = pECBehavior.getOrigin().getVector(stub, codec)
			pHasOrigin = not pOrigin.isZero()
			
			// create colliision test and add it to element collider
			var CollisionFilter collisionFilter = pECBehavior.getCollisionFilter().getCollisionFilter()
			var Vector testDirection = Vector.new(0, 0, pRange)
			pTestBone = pECBehavior.getTestBone().getValueOrNull(stub)
			
			if pTestBone != null
				pTest = ColliderCollisionTest.new(collisionFilter, \
					pComponent.getComponent(), pTestBone, pOrigin, testDirection)
				
			else
				pTest = ColliderCollisionTest.new(collisionFilter, pOrigin, testDirection)
				if pLocomotion != null
					pTest.setLocalDirection(false)
					pUseLocomotion = true
				end
			end
			
			collider.addCollisionTest(pTest)
			
			pECBehavior.createListeners(this)
			
			if pECBehavior.getBTSMs().hasAny()
				var String prefix = pECBehavior.getPrefix()
				pBTSMs = ECComposeBTSM.Instance.new(element, pECBehavior.getBTSMs())
				pBTSMs.addAllAction(prefix, "update", BTAUpdate.new(this))
				pBTSMs.addAllActionCondition(prefix, "check", BTACheck.new(this, prefix))
				pBTSMs.dropBTContexts()
			end
		end
		
		
		
		/** \brief Behavior. */
		func ECBehaviorLookAt getECBehavior()
			return pECBehavior
		end
		
		/** \brief ColliderAI behavior instance. */
		func ECBehaviorColliderAI.Instance getColliderAI()
			return pColliderAI
		end
		
		/** \brief Collider behavior instance. */
		func ECBehaviorCollider.Instance getCollider()
			return pCollider
		end
		
		/** \brief Component behavior instance or null if not used. */
		func ECBehaviorComponent.Instance getComponent()
			return pComponent
		end
		
		/** \brief Locomotion behavior instance or null if not used. */
		func ECBehaviorLocomotion.Instance getLocomotion()
			return pLocomotion
		end
		
		
		
		/** \brief Enable look-at. */
		func bool getEnabled()
			return pTest.getEnabled()
		end
		
		/** \brief Set if look-at is enabled. */
		func void setEnabled(bool enabled)
			if enabled == pTest.getEnabled()
				return
			end
			
			pTest.setEnabled(enabled)
			
			if not enabled
				setLookAtElement(null, -1, null, 0)
			end
			
			pListeners.forEach(block Listener each
				each.enabledChanged(this)
			end)
			if pBTSMs != null
				pBTSMs.runEvent(pECBehavior.getPrefix(), enabled if "enabled" else "disabled")
			end
			
			setRequiresThink(enabled)
		end
		
		
		
		/**
		 * \brief Set test collider using shape.
		 * 
		 * By default no test collider is set in which case ra-ytesting is used. Using shapes
		 * like a sphere is useful to enlarge the hit area for example with 3rd person views.
		 */
		func void setTestCollider(ShapeList shape)
			var ColliderVolume collider = ColliderVolume.new()
			collider.setShape(shape)
			pTest.setCollider(collider)
		end
		
		/**
		 * \brief Set shape of test collider to sphere.
		 * 
		 * By default no shape is set in which case ra-ytesting is used. Using shapes like a
		 * sphere is useful to enlarge the hit area for example with 3rd person views.
		 */
		func void setSphereTestCollider(float radius)
			var ShapeList shape = ShapeList.new()
			shape.addSphere(Vector.new(), DEMath.max(radius, 0.0))
			setTestCollider(shape)
		end
		
		/** \brief Clear test collider reverting to ray-tracing. */
		func void clearTestCollider()
			pTest.setCollider(null)
		end
		
		/** \brief Set test collision filter. */
		func void setCollisionFilter(CollisionFilter filter)
			pTest.setCollisionFilter(filter)
		end
		
		
		
		/** \brief Test range. */
		func float getRange()
			return pRange
		end
		
		/** \brief Set test range. */
		func void setRange(float range)
			range = DEMath.max(range, 0.0)
			if DEMath.fabs(range - pRange) < 0.001
				return
			end
			
			pRange = range
			updateTestParameters()
		end
		
		/** \brief Test origin. */
		func Vector getOrigin()
			return pOrigin
		end
		
		/** \brief Use locomotion. */
		func bool getUseLocomotion()
			return pUseLocomotion
		end
		
		/**
		 * \brief Name of test bone name or null to use component.
		 * \version 1.19
		 */
		func String getTestBone()
			return pTestBone
		end
		
		
		
		/** \brief Look-at element or null. */
		func Element getLookAtElement()
			return pLookAtElement
		end
		
		/**
		 * \brief Look-at element if of type BehaviorElement or null.
		 * \version 1.4 
		 */
		func BehaviorElement getLookAtBehaviorElement()
			if pLookAtElement != null and pLookAtElement castable BehaviorElement
				return pLookAtElement cast BehaviorElement
			end
			return null
		end
		
		/** \brief Is looking at an element. */
		func bool hasLookAtElement()
			return pLookAtElement != null
		end
		
		/** \brief Is not looking at an element. */
		func bool hasNotLookAtElement()
			return pLookAtElement == null
		end
		
		/** \brief Look-at bone or -1. */
		func int getLookAtBone()
			return pLookAtBone
		end
		
		/** \brief Look-at bone name or null. */
		func String getLookAtBoneName()
			return pLookAtBoneName
		end
		
		/** \brief Distance in meters to look-at hit point. */
		func float getLookAtDistance()
			return pLookAtDistance
		end
		
		/** \brief Look-at hit point or \em null. */
		func DVector getLookAtHitPoint()
			if pLookAtHitPoint == null and pLookAtElement != null
				pLookAtHitPoint = pLookAtOrigin + pLookAtDirection.normalize() * pLookAtDistance
			end
			return pLookAtHitPoint
		end
		
		/** \brief Test origin used for last look-at test. */
		func DVector getLookAtOrigin()
			return pLookAtOrigin
		end
		
		/** \brief Test direction used for last look-at test. */
		func DVector getLookAtDirection()
			return pLookAtDirection
		end
		
		/**
		 * \brief Get player if looked-at.
		 * \version 1.26
		 * 
		 * Returns look-at element if it is present, has ECBehaviorPlayerControllable and
		 * is the active player actor.
		 */
		func BehaviorElement getLookAtPlayer()
			var BehaviorElement element = getLookAtBehaviorElement()
			if element == null
				return null
			end
			
			var ECBehaviorPlayerControllable.Instance behavior = \
				ECBehaviorPlayerControllable.getInstanceIn(element)
			if behavior == null or behavior.isNotPlayerControlled()
				return null
			end
			
			return element
		end
		
		/**
		 * \brief Check if player is looked at.
		 * \version 1.26
		 * 
		 * Returns true if look-at element is present, has ECBehaviorPlayerControllable and
		 * is the active player actor.
		 */
		func bool isLookAtPlayer()
			return getLookAtPlayer() != null
		end
		
		
		
		/** \brief Add listener. */
		func void addListener(Listener listener)
			if listener == null
				throw EInvalidParam.new()
			end
			pListeners.add(listener)
		end
		
		/** \brief Remove listener. */
		func void removeListener(Listener listener)
			pListeners.remove(listener)
		end
		
		
		
		/** \brief Post thinking after physics processing is finished. */
		func void postThink(float elapsed)
			update(elapsed)
		end
		
		/** \brief Update. */
		protected func void update(float elapsed)
			if not pTest.getEnabled()
				return
			end
			
			evaluateTest()
			updateTestParameters()
		end
		
		/** \brief Evaluate last test. */
		protected func void evaluateTest()
			pLookAtOrigin = pTest.getTestOrigin()
			pLookAtDirection = pTest.getTestDirection()
			
			var Collider collider
			if pTest.getHasCollision()
				collider = pTest.hitCollider(0)
			end
			
			if collider == null
				setLookAtElement(null, -1, null, 0)
				return
			end
			
			var int bone = pTest.hitBone(0)
			var String boneName = null
			
			if bone != -1 and collider castable ColliderRig
				var Rig rig = (collider cast ColliderRig).getRig()
				if rig != null
					boneName = rig.boneGetName(bone)
				end
			end
			
			var Element element = collider.getOwner() cast Element
			if element != null and element.isDisposed()
				element = null
			end
			
			setLookAtElement(element, bone, boneName, pTest.hitDistance(0))
		end
		
		/** \brief Collision test. */
		protected func ColliderCollisionTest getTest()
			return pTest
		end
		
		/** \brief Update test parameters. */
		protected func void updateTestParameters()
			if pUseLocomotion
				pTest.setDirection(pLocomotion.getViewDirection() * pRange)
				
				if pHasOrigin
					pTest.setOrigin(getElement().getElementMatrix() \
						.transformNormal(DVector.new(pOrigin)).toVector())
				end
				
			else
				pTest.setDirection(Vector.new(0, 0, pRange))
			end
		end
		
		/** \brief Set look-at element. */
		func void setLookAtElement(Element element, int bone, String boneName, float distance)
			if pLookAtElement == element and pLookAtBone == bone
				pLookAtHitPoint = null
				pLookAtDistance = distance
				return
			end
			
			if pLookAtElement != null and pLookAtElement castable BehaviorElement and not pLookAtElement.isDisposed()
				var ECBehaviorLookedAt.Instance behavior = ECBehaviorLookedAt.getInstanceIn(pLookAtElement cast BehaviorElement)
				if behavior != null
					behavior.removeLookingActor(getElement())
				end
			end
			
			pLookAtElement = element
			pLookAtBone = bone
			pLookAtBoneName = boneName
			pLookAtHitPoint = null
			pLookAtDistance = distance
			
			if element != null and element castable BehaviorElement
				var ECBehaviorLookedAt.Instance behavior = \
					ECBehaviorLookedAt.getInstanceIn(element cast BehaviorElement)
				if behavior != null
					behavior.addLookingActor(getElement())
				end
			end
			
			pListeners.forEach(block Listener each
				each.lookAtChanged(this)
			end)
			if pBTSMs != null
				pBTSMs.runEvent(pECBehavior.getPrefix(), element != null if "lookAt" else "noLookAt")
			end
		end
	end
	
	
	
	var ECBehaviorColliderAI pColliderAI
	var ECBehaviorCollider pCollider
	var ECBehaviorComponent pComponent
	var ECBehaviorLocomotion pLocomotion
	var ECPFloat pRange
	var ECPVector pOrigin
	var ECPString pTestBone
	var ECComposeCollisionFilter pCollisionFilter
	var Array pListenerFactories
	var ECComposeBTSM pBTSMs
	var String pPrefix
	
	
	
	/**
	 * \brief Create behavior element class.
	 * 
	 * These values are optional and can be null: \em component, \em locomotion.
	 */
	func new(BehaviorElementClass eclass, ECBehaviorColliderAI colliderAI, \
	ECBehaviorComponent component, ECBehaviorLocomotion locomotion) \
	this(eclass, colliderAI, component, locomotion, "lookAt.")
	end
	
	func new(BehaviorElementClass eclass, ECBehaviorCollider collider, \
	ECBehaviorComponent component, ECBehaviorLocomotion locomotion) \
	this(eclass, collider, component, locomotion, "lookAt.")
	end
	
	func new(BehaviorElementClass eclass, ECBehaviorColliderAI colliderAI, \
	ECBehaviorComponent component, ECBehaviorLocomotion locomotion, String prefix) \
	this(eclass, colliderAI, null, component, locomotion, prefix)
		if colliderAI == null
			throw ENullPointer.new("colliderAI")
		end
	end
	
	func new(BehaviorElementClass eclass, ECBehaviorCollider collider, \
	ECBehaviorComponent component, ECBehaviorLocomotion locomotion, String prefix) \
	this(eclass, null, collider, component, locomotion, prefix)
		if collider == null
			throw ENullPointer.new("collider")
		end
	end
	
	private func new(BehaviorElementClass eclass, ECBehaviorColliderAI colliderAI, \
	ECBehaviorCollider collider, ECBehaviorComponent component, \
	ECBehaviorLocomotion locomotion, String prefix) super(eclass)
		if getBehaviorIn(eclass) != null
			throw BEMultipleInstanceException.new(eclass, this)
		end
		
		pPrefix = prefix
		pColliderAI = colliderAI
		pCollider = collider
		pComponent = component
		pLocomotion = locomotion
		pListenerFactories = Array.new()
		pBTSMs = ECComposeBTSM.new()
		
		eclass.addProperty(pRange = ECPFloat.new(prefix + "range", 2, 0))
		eclass.addProperty(pOrigin = ECPVector.new(prefix + "origin", Vector.new(0, 1.6, 0)))
		eclass.addProperty(pTestBone = ECPString.new(prefix + "bone", null))
		
		var LayerMask cfCategory = LayerMask.newWith(BaseGameApp.CollisionFilterBit.dynamic)
		
		var LayerMask cfFilter = LayerMask.new()
		cfFilter.setBit(BaseGameApp.CollisionFilterBit.geometry)
		cfFilter.setBit(BaseGameApp.CollisionFilterBit.dynamic)
		cfFilter.setBit(BaseGameApp.CollisionFilterBit.actorAI)
		
		pCollisionFilter = ECComposeCollisionFilter.new(CollisionFilter.new(cfCategory, cfFilter))
		
		eclass.addBehavior(this)
	end
	
	/** \brief Dispose of behavior. */
	func void dispose()
		pColliderAI = null
		pCollider = null
		pComponent = null
		pLocomotion = null
		pListenerFactories = null
		pBTSMs = null
		super.dispose()
	end
	
	
	
	/**
	 * \brief Prefix.
	 * \version 1.26
	 */
	func String getPrefix()
		return pPrefix
	end
	
	/** \brief Collider AI behavior or null. */
	func ECBehaviorColliderAI getColliderAI()
		return pColliderAI
	end
	
	/** \brief Collider behavior or null. */
	func ECBehaviorCollider getCollider()
		return pCollider
	end
	
	/** \brief Component behavior or null. */
	func ECBehaviorComponent getComponent()
		return pComponent
	end
	
	/** \brief Locomotion behavior or null. */
	func ECBehaviorLocomotion getLocomotion()
		return pLocomotion
	end
	
	/** \brief Test range. */
	func ECPFloat getRange()
		return pRange
	end
	
	/** \brief Test origin. */
	func ECPVector getOrigin()
		return pOrigin
	end
	
	/** \brief Test bone. */
	func ECPString getTestBone()
		return pTestBone
	end
	
	/** \brief Collision filter for AI collider. */
	func ECComposeCollisionFilter getCollisionFilter()
		return pCollisionFilter
	end
	
	/**
	 * \brief Compose behavior trees and state machines.
	 * \version 1.26
	 */
	func ECComposeBTSM getBTSMs()
		return pBTSMs
	end
	
	/** \brief Add listener factory. */
	func void addListenerFactory(ListenerFactory factory)
		if factory == null
			throw ENullPointer.new()
		end
		pListenerFactories.add(factory)
	end
	
	/**
	 * \brief Add listener factory using block.
	 * 
	 * Block receives as parameter Instance and returns Listener.
	 */
	func void addListenerFactory(Block blockFactory)
		pListenerFactories.add(BlockListenerFactory.new(blockFactory))
	end
	
	/** \brief Visit listener factories with block with argument ListenerFactory. */
	func void forEachListenerFactory(Block ablock)
		pListenerFactories.forEach(ablock)
	end
	
	/** \brief Create listeners from factories adding them to behavior instance. */
	func void createListeners(Instance instance)
		pListenerFactories.forEach(block ListenerFactory each
			instance.addListener(each.createListener(instance))
		end)
	end
	
	
	
	/** \brief Get instance in element from owner element class. */
	func Instance instance(BehaviorElement element)
		return element.getInstanceAt(getInstanceIndex()) cast Instance
	end
	
	
	
	/**
	 * \brief Get behavior in element class or \em null if absent.
	 * 
	 * Use this method to check if a particular BehaviorElementClass contains a behavior
	 * of type ECBehaviorLookAt.
	 */
	static func ECBehaviorLookAt getBehaviorIn(BehaviorElementClass eclass)
		return eclass.findBehavior(block ECBehaviorLookAt each
			return true
		end) cast ECBehaviorLookAt
	end
	
	/**
	 * \brief Get instance in element or \em null if absent.
	 * 
	 * Use this method to check if a particular BehaviorElement contains a behavior instance
	 * of type ECBehaviorLookAt.Instance .
	 */
	static func Instance getInstanceIn(BehaviorElement element)
		return element.findInstance(block Instance each
			return true
		end) cast Instance
	end
	
	
	
	/** \brief Create Behavior instance. */
	func ECBehaviorInstance createInstance(BehaviorElement element)
		return Instance.new(this, element)
	end
end
