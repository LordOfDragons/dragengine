/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */


namespace Dragengine.Scenery

pin Dragengine.Gui
pin Dragengine.LoadSave
pin Dragengine.Preloading
pin Dragengine.Utils
pin Dragengine.BehaviorTreeSystem
pin Dragengine.StateMachineSystem


/**
 * \brief Behavior element behavior adding project to ground support for actor AI.
 * 
 * Adds TouchSensor. The touch sensor is used to improve performance and requires a shape large
 * enough to enclose the ECBehaviorColliderAI or ECBehaviorCollider (whichever is present) along
 * all the up and down projection range. The touch sensor is attached to collider. The touch
 * sensor uses the collision filter from collider.
 * 
 * To use this behavior add it to an actor. The behavior will run during postThink() and projects
 * the actor position down to the ground if enabled. The grounded position is stored and can then
 * be retrieved to work with. By default the behavior is set to automatically apply the grounded
 * position to the actor. This behavior can be desibled for custome project to ground handling.
 * 
 * This behavior does require the element class to be persistable (setPersistable).
 * 
 * \see https://developer.dragondreams.ch/wiki/doku.php/dragengine:modules:dragonscript:behavior_projecttoground
 */
class ECBehaviorProjectToGround extends DefaultECBehavior
	/** \brief Listener for behavior instance events. */
	interface Listener
		/** \brief Enabled changed. */
		func void enabledChanged(Instance instance)
		
		/** \brief Actor switched between touching ground and not touching ground. */
		func void touchesGroundChanged(Instance instance)
	end
	
	/** \brief Default implementation of behavior instance listener. */
	class DefaultListener implements Listener
		/** \brief Create default listener. */
		func new()
		end
		
		/** \brief Enabled changed. */
		func void enabledChanged(Instance instance)
		end
		
		/** \brief Actor switched between touching ground and not touching ground. */
		func void touchesGroundChanged(Instance instance)
		end
	end
	
	/** \brief Factory creating listeners. */
	interface ListenerFactory
		/** \brief Create listener. */
		func Listener createListener(Instance instance)
	end
	
	/** \brief Factory creating listeners using block. */
	class BlockListenerFactory implements ListenerFactory
		var Block pBlock
		
		/** \brief Create factory using block receiving Instance as parameter returning Listener. */
		func new(Block blockFactory)
			if blockFactory == null
				throw ENullPointer.new()
			end
			pBlock = blockFactory
		end
		
		/** \brief Create listener. */
		func Listener createListener(Instance instance)
			return pBlock.run(instance) cast Listener
		end
	end
	
	/**
	 * \brief Behavior factory.
	 * \version 1.25
	 * 
	 * Automatically assigns these behaviors if present before adding:
	 * - Required: \ref ECBehaviorColliderAI or \ref ECBehaviorCollider
	 * - Optional: \ref ECBehaviorComponent
	 * 
	 * Example XML element class:
	 * \code{.xml}
	 * <behavior type='ECBehaviorProjectToGround'>
	 *   <!-- optional: add behavior trees. default adds all behavior trees. -->
	 *   <list name='behaviorTrees'>
	 *     <string/> <!-- add behavior with empty identifier -->
	 *     <string>default</string> <!-- add behavior with 'default' identifier -->
	 *   </list>
	 * 
	 *   <!-- optional: add state machines. default adds all state machines. -->
	 *   <list name='stateMachines'>
	 *     <string/> <!-- add behavior with empty identifier -->
	 *     <string>default</string> <!-- add behavior with 'default' identifier -->
	 *   </list>
	 * </behavior>
	 * \endcode
	 * 
	 * Element class properties added by the behavior can also be set directly inside the tag
	 * be removing the property name prefix and starting with a "." (for example ".propertyName").
	 */
	class Factory implements BehaviorFactory
		func new()
		end
		
		func String factoryId()
			return "ECBehaviorProjectToGround"
		end
		
		func ECBehavior addBehavior(BehaviorElementClass eclass, String id, Dictionary parameters)
			if not id.empty()
				throw EInvalidParam.new("id is not empty string")
			end
			var ECBehaviorColliderAI colliderAI = ECBehaviorColliderAI.getBehaviorIn(eclass)
			var ECBehaviorProjectToGround behavior
			if colliderAI != null
				behavior = ECBehaviorProjectToGround.new(eclass, colliderAI)
				
			else
				behavior = ECBehaviorProjectToGround.new(eclass, ECBehaviorCollider.getBehaviorIn(eclass))
			end
			
			eclass.sharedFactoryHelper.allBTSM(behavior.getBTSMs(), eclass, parameters)
			
			eclass.sharedFactoryHelper.setPropertiesFromParameters(eclass, parameters, "projectToGround")
			return behavior
		end
	end
	
	
	
	/** \brief Behavior instance. */
	class Instance extends DefaultECBehaviorInstance
		/**
		 * \brief Behavior tree action "projectToGround.set".
		 * \version 1.26
		 */
		private class BTASet extends BTSMActionCondition
			var Instance pInstance
			
			func new(Instance instance)
				pInstance = instance
			end
			
			func BTResult runActionShared(Object context, Dictionary parameters)
				var Object value
				
				value = parameters.getAt("enabled", null)
				if value != null
					pInstance.setEnabled(value.equals("true"))
				end
				
				value = parameters.getAt("ground", null)
				if value != null
					pInstance.setTouchesGround(value.equals("true"))
				end
				
				return BTResult.success
			end
		end
		
		/**
		 * \brief Behavior tree action "projectToGround.update".
		 * \version 1.26
		 */
		private class BTAUpdate extends BTSMActionCondition
			var Instance pInstance
			
			func new(Instance instance)
				pInstance = instance
			end
			
			func BTResult runActionShared(Object context, Dictionary parameters)
				var Object value
				
				value = parameters.getAt("interactElement.assign", null)
				if value != null
					var BehaviorElement groundElement = pInstance.getGroundBehaviorElement()
					if groundElement == null
						return BTResult.failure
					end
					
					var ECBehaviorInteractionElement.Instance interactionElement =\
						ECBehaviorInteractionElement.getInstanceIn(pInstance.getElement(), value cast String)
					if interactionElement == null
						return BTResult.failure
					end
					
					interactionElement.setInteractionElement(groundElement)
				end
				
				return BTResult.success
			end
		end
		
		/**
		 * \brief Behavior tree action/condition "projectToGround.check".
		 * \version 1.26
		 */
		private class BTACheck extends BTSMActionCondition
			var Instance pInstance
			var String pPrefix
			
			func new(Instance instance, String prefix)
				pInstance = instance
				pPrefix = prefix
			end
			
			func BTResult runActionShared(Object context, Dictionary parameters)
				return check(context, "", parameters) if BTResult.success\
					else (parameters.has("wait") if BTResult.running else BTResult.failure)
			end
			
			func bool evaluateConditionShared(Object context, Dictionary parameters)
				return check(context, pPrefix, parameters)
			end
			
			func bool check(Object context, String prefix, Dictionary parameters)
				var bool result = true
				var Object value
				
				value = parameters.getAt(prefix + "enabled", null)
				if value != null
					result &= pInstance.getEnabled() == value.equals("true")
				end
				
				value = parameters.getAt(prefix + "ground", null)
				if value != null
					result &= pInstance.getTouchesGround() == value.equals("true")
				end
				
				value = parameters.getAt(prefix + "ground.element", null)
				if value != null
					result &= (pInstance.getGroundBehaviorElement() != null) == value.equals("true")
				end
				
				value = parameters.getAt(prefix + "hitAngle.less", null)
				if value != null
					result &= pInstance.hitAngle((context cast SMContext).getEventParameter()\
						cast CollisionInfo) < (value cast String).toFloat()
				end
				
				value = parameters.getAt(prefix + "hitAngle.greater", null)
				if value != null
					result &= pInstance.hitAngle((context cast SMContext).getEventParameter()\
						cast CollisionInfo) > (value cast String).toFloat()
				end
				
				value = parameters.getAt(prefix + "landing", null)
				if value != null
					result &= pInstance.hitAngle((context cast SMContext).getEventParameter()\
						cast CollisionInfo) < pInstance.getLandingAngle() == value.equals("true")
				end
				
				return result
			end
		end
		
		
		var ECBehaviorProjectToGround pECBehavior
		var ECBehaviorColliderAI.Instance pColliderAI
		var ECBehaviorCollider.Instance pCollider
		var TouchSensor pTouchSensor
		var Collider pProjectCollider
		var ColliderCollisionTest pTest
		var ColliderVolume pTestCollider
		var DVector pNormTestDirection
		var bool pTouchesGround
		var DVector pGroundedPosition
		var bool pApplyToActor
		var Array pListeners
		var ECComposeBTSM.Instance pBTSMs
		var float pLandingAngle
		
		
		
		/** \brief Create element. */
		func new(ECBehaviorProjectToGround ecbehavior, BehaviorElement element) super(element)
			pECBehavior = ecbehavior
			pGroundedPosition = DVector.new()
			pListeners = Array.new()
			pApplyToActor = ecbehavior.getApplyToActor().getValue()
			
			if ecbehavior.getColliderAI() != null
				pColliderAI = ecbehavior.getColliderAI().instance(element)
				
			else
				pCollider = ecbehavior.getCollider().instance(element)
			end
			
			setRequiresThink(true)
		end
		
		/** \brief Dispose of composeable instance. */
		func void dispose()
			pListeners = null
			
			if pTouchSensor != null
				pTouchSensor.removeAllIgnoreColliders()
				pTouchSensor.setListener(null)
				pTouchSensor = null
			end
			
			pColliderAI = null
			pCollider = null
			pProjectCollider = null
			pBTSMs = null
			
			super.dispose()
		end
		
		
		
		/** \brief Initialize element from stub. */
		func void init(StubElement stub)
			if pColliderAI != null
				pProjectCollider = pColliderAI.getCollider()
				
			else
				pProjectCollider = pCollider.getCollider()
			end
			
			if pProjectCollider == null
				throw EInvalidParam.new()
			end
			
			pLandingAngle = pECBehavior.getLandingAngle().getValue(stub)
			pTouchSensor = createTouchSensor(stub, pProjectCollider)
			pProjectCollider.attachStatic(pTouchSensor, Vector.new(), Quaternion.new())
			pTouchSensor.addIgnoreCollider(pProjectCollider)
			
			pNormTestDirection = DVector.new(0, -1, 0)
			pTouchesGround = true
			
			pTestCollider = ColliderVolume.new()
			pTest = ColliderCollisionTest.new(pTouchSensor, \
				pProjectCollider.getCollisionFilter(), Vector.new(), Vector.new(0, -0.3, 0))
			pTest.setCollider(pTestCollider)
			pProjectCollider.addCollisionTest(pTest)
			
			pECBehavior.createListeners(this)
			
			if pECBehavior.getBTSMs().hasAny()
				var String prefix = pECBehavior.getPrefix()
				pBTSMs = ECComposeBTSM.Instance.new(getElement(), pECBehavior.getBTSMs())
				pBTSMs.addAllAction(prefix + "set", BTASet.new(this))
				pBTSMs.addAllAction(prefix + "update", BTAUpdate.new(this))
				pBTSMs.addAllActionCondition(prefix + "check", BTACheck.new(this, prefix))
				pBTSMs.dropBTContexts()
			end
		end
		
		/** \brief Create touch sensor. */
		protected func TouchSensor createTouchSensor(StubElement stub, Collider collider)
			var TouchSensor touchSensor = TouchSensor.new()
			touchSensor.setCollisionFilter(collider.getCollisionFilter())
			touchSensor.setTrackEnterLeave(false)
			touchSensor.setPosition(collider.getPosition())
			touchSensor.setOrientation(collider.getOrientation())
			return touchSensor
		end
		
		
		
		/** \brief Behavior. */
		func ECBehaviorProjectToGround getECBehavior()
			return pECBehavior
		end
		
		/** \brief ColliderAI behavior instance or null. */
		func ECBehaviorColliderAI.Instance getColliderAI()
			return pColliderAI
		end
		
		/** \brief Collider behavior instance or null. */
		func ECBehaviorCollider.Instance getCollider()
			return pCollider
		end
		
		/** \brief Touch sensor. */
		func TouchSensor getTouchSensor()
			return pTouchSensor
		end
		
		/** \brief Enable projecting to ground. */
		func bool getEnabled()
			return pTest.getEnabled()
		end
		
		/** \brief Set if projecting to ground is enabled. */
		func void setEnabled(bool enabled)
			if enabled == pTest.getEnabled()
				return
			end
			
			pTest.setEnabled(enabled)
			pTouchSensor.setEnabled(enabled and getElement().getTouchable())
			
			// this seems strange here but is required. if enabled changes to true while
			// pTouchesGround is false then the next check will likely fail since AI should
			// test for projecting to ground only if it has actor is touching ground. without
			// setting pTouchesGround to true actors would immediately start falling. on the
			// other hand if enabled is false and pTouchesGround is not set to false too it
			// is possible some AI still thinks the actor is touching ground. for this reason
			// pTouchesGround is set to enabled.
			setTouchesGround(enabled)
			
			setRequiresThink(enabled)
			
			pListeners.forEach(block Listener each
				each.enabledChanged(this)
			end)
			if pBTSMs != null
				pBTSMs.runEvent(pECBehavior.getPrefix() + (enabled if "enabled" else "disabled"))
			end
		end
		
		/**
		 * \brief Landing angle in degrees.
		 * \version 1.26
		 */
		func float getLandingAngle()
			return pLandingAngle
		end
		
		/** \brief Remove collider collision test from collider. */
		func void removeFromCollider()
			pProjectCollider.removeCollisionTest(pTest)
		end
		
		/** \brief Actor is touching ground. */
		func bool getTouchesGround()
			return pTouchesGround
		end
		
		/**
		 * \brief Set if actor is touching ground.
		 * 
		 * Set by projectToGround if enabled. If element is free falling set this to \em true
		 * when the element touches ground again. This has to be done manually since
		 * projectToGround() has to be skipped to avoid elements being sucked to the ground
		 * as soon as they get into projecting distance.
		 */
		func void setTouchesGround(bool touchesGround)
			if touchesGround == pTouchesGround
				return
			end
			
			pTouchesGround = touchesGround
			
			pListeners.forEach(block Listener each
				each.touchesGroundChanged(this)
			end)
			if pBTSMs != null
				pBTSMs.runEvent(pECBehavior.getPrefix() + (touchesGround if "touch" else "noTouch"))
			end
		end
		
		/** * \brief Grounded position. */
		func DVector getGroundedPosition()
			return pGroundedPosition
		end
		
		/** \brief Set grounded position. */
		func void setGroundedPosition(DVector position)
			pGroundedPosition = position
		end
		
		/** \brief Automatically apply grounded position to actor. */
		func bool getApplyToActor()
			return pApplyToActor
		end
		
		/** \brief Set if grounded position to automatically applied to actor. */
		func void setApplyToActor(bool applyToActor)
			if applyToActor == pApplyToActor
				return
			end
			pApplyToActor = applyToActor
		end
		
		
		
		/**
		 * \brief Set shape of test collider.
		 * 
		 * For best results a shape should be used which is slightly smaller than the shape of the
		 * collider used to move an element through the game world. If the shape used for the test
		 * collider is equal or larger strange behavior can be the result (for example climbing).
		 * 
		 * Recommended is setting a ShapeList with a sphere at origin and radius 0.3 .
		 */
		func void setShape(ShapeList shape)
			pTestCollider.setShape(shape)
		end
		
		/** \brief Set test collision filter. */
		func void setCollisionFilter(CollisionFilter filter)
			pTest.setCollisionFilter(filter)
		end
		
		
		
		/** \brief Test direction. */
		func Vector getDirection()
			return pTest.getDirection()
		end
		
		/**
		 * \brief Set test direction.
		 * 
		 * \param distance Distance to test along. This is the furthest distance the actor can
		 *                 be projected down to. Typical value is -0.3 to project the actor
		 *                 down by at most 0.3 meters.
		 */
		func void setDirection(float distance)
			setDirection(Vector.new(0, distance, 0))
		end
		
		/**
		 * \brief Set test direction.
		 * 
		 * \param distance Distance to test along. This is the furthest distance the actor can
		 *                 be projected down to. Typical value is (0, -0.3, 0) to project the
		 *                 actor down by at most 0.3 meters.
		 */
		func void setDirection(Vector distance)
			pTest.setDirection(distance)
			pNormTestDirection = DVector.new(distance).normalize()
		end
		
		
		
		/**
		 * \brief Set project to ground shapes for humanoid actors.
		 * 
		 * Assigns a box shape to the project to ground touch sensor. The shape is located at the
		 * actor position and has a radius of slightly more than the radius used for the collider AI
		 * (0.31m) and a height of the same value. This is a reasonable collider AI shape for a
		 * humanoid actor.
		 * 
		 * Assigns a sphere shape to the project to ground instance. This is usually the
		 * same shape as used for the collider AI but can be optimized. For example if the
		 * shape is a capcule the project to ground shape can be opzimized to a sphere of
		 * the matching radius. The default implementation does apply this optimization and
		 * uses a sphere with the same radius as used for the collider AI capsule.
		 */
		func void setShapesHumanoid(float radius)
			var ShapeList shape = ShapeList.new()
			shape.addSphere(Vector.new(0, radius, 0), radius)
			setShape(shape)
			
			shape = ShapeList.new()
			shape.addBox(Vector.new(), Vector.new(radius + 0.01, radius, radius + 0.01))
			pTouchSensor.setShape(shape)
		end
		
		
		
		/**
		 * \brief Project to ground.
		 * 
		 * Call this method during postThink() calls of parent element if getTouchesGround()
		 * is \em true. This method does not check if touches ground is \em true to allow
		 * users of this class to project elements down to ground using whatever logic required.
		 * 
		 * If collider is enabled and collision test contains a ground collision the collider
		 * position is adjusted. Touching ground parameter is updated with the test result.
		 * The collider is not modified. Method returns either the current collider position
		 * or the desired new collider position. This allows to use this method like this:
		 * 
		 * \code{.ds}
		 * position = projectToGround.projectToGround()
		 * \endcode
		 * 
		 * Position contains then either collider.getPosition() or the down projected position.
		 * Project to ground does not adjust orientation only position.
		 */
		func DVector projectToGround()
			var DVector position = pProjectCollider.getPosition()
			
			if pProjectCollider.getEnabled() and pTest.getEnabled()
				setTouchesGround(pTest.getHasCollision())
			end
			
			if pTouchesGround and pTest.getHasCollision()
				position = position + pNormTestDirection * pTest.hitDistance(0)
			end
			
			return position
		end
		
		/** \brief Ground collider or null. */
		func Collider getGroundCollider()
			if pTouchesGround and pTest.getHasCollision()
				return pTest.hitCollider(0)
				
			else
				return null
			end
		end
		
		/**
		 * \brief Ground element or null.
		 * 
		 * If last ground collider is not null and collider owner is castable to Element
		 * returns the owner element. Otherwise null is returned.
		 */
		func Element getGroundElement()
			var Collider collider = getGroundCollider()
			if collider != null
				var Object owner = collider.getOwner()
				if owner castable Element
					return owner cast Element
				end
			end
			return null
		end
		
		/**
		 * \brief Ground behavior element or null.
		 * \version 1.26
		 * 
		 * If last ground collider is not null and collider owner is castable to
		 * BehaviorElement returns the owner element. Otherwise null is returned.
		 */
		func BehaviorElement getGroundBehaviorElement()
			var Collider collider = getGroundCollider()
			if collider != null
				var Object owner = collider.getOwner()
				if owner castable BehaviorElement
					return owner cast BehaviorElement
				end
			end
			return null
		end
		
		/** \brief Ground collision information or null. */
		func CollisionInfo getGroundCollisionInfo()
			if pTouchesGround and pTest.getHasCollision()
				return pTest.getCollisionAt(0)
				
			else
				return null
			end
		end
		
		/**
		 * \brief Angle between collision normal and project to ground direction.
		 * \version 1.26
		 */
		func float hitAngle(CollisionInfo info)
			return pTest.getDirection().normalize() * info.getNormal()
		end
		
		
		
		/** \brief Project to ground collider collision test. */
		protected func ColliderCollisionTest getTest()
			return pTest
		end
		
		/** \brief Collier to attach collision tests to. */
		protected func ColliderVolume getTestCollider()
			return pTestCollider
		end
		
		
		
		/** \brief Add listener. */
		func void addListener(Listener listener)
			if listener == null
				throw EInvalidParam.new()
			end
			pListeners.add(listener)
		end
		
		/** \brief Remove listener. */
		func void removeListener(Listener listener)
			pListeners.remove(listener)
		end
		
		
		
		/** \brief State changed (visble, touchable). */
		func void stateChanged()
			if pTouchSensor != null
				pTouchSensor.setEnabled(pTest.getEnabled() and getElement().getTouchable())
			end
		end
		
		/** \brief Add element to game world. */
		func void addToGameWorld()
			var GameWorld gameWorld = getElement().getGameWorld()
			gameWorld.getWorld().addTouchSensor(pTouchSensor)
// 			setDirection(gameWorld.getGravity().normalize() * 0.3)
		end
		
		/** \brief Remove element from game world. */
		func void removeFromGameWorld()
			getElement().getGameWorld().getWorld().removeTouchSensor(pTouchSensor)
		end
		
		
		
		/**
		 * \brief Post thinking after physics processing is finished.
		 * 
		 * Projects actor down to ground if enabled storing result. Ground position will be
		 * always valid and is either the grounded position or the current collider position.
		 * 
		 * If apply-to-actor is enabled calls BehaviorElement.setGeometry() with grounded
		 * position and collider orientation.
		 */
		func void postThink(float elapsed)
			pGroundedPosition = projectToGround()
			
			if pApplyToActor
				getElement().setGeometry(pGroundedPosition, pProjectCollider.getOrientation())
			end
		end
		
		
		
		/** \brief Read behavior from file. */
		func void readFromFile(PersistencyEnvironment env, FileReader reader)
			select reader.readByte() // version
			case 0
				var PersistencyFlags flags = PersistencyFlags.new(4, reader)
				pTouchesGround = flags.getAt(0)
				pApplyToActor = flags.getAt(1)
				setEnabled(flags.getAt(2))
				pTest.setLocalDirection(flags.getAt(3))
				
				pTest.setOrigin(Vector.readFromFile(reader))
				pTest.setDirection(Vector.readFromFile(reader))
				pNormTestDirection = DVector.new(pTest.getDirection()).normalize()
				pGroundedPosition = DVector.readFromFile(reader)
				
			else
				throw EInvalidParam.new("unsupported version")
			end
		end
		
		/** \brief Write behavior to file. */
		func void writeToFile(PersistencyEnvironment env, FileWriter writer)
			writer.writeByte(0) // version
			
			var PersistencyFlags flags = PersistencyFlags.new(4)
			flags.setAt(0, pTouchesGround)
			flags.setAt(1, pApplyToActor)
			flags.setAt(2, pTest.getEnabled())
			flags.setAt(3, pTest.getLocalDirection())
			flags.writeToFile(writer)
			
			pTest.getOrigin().writeToFile(writer)
			pTest.getDirection().writeToFile(writer)
			pGroundedPosition.writeToFile(writer)
		end
	end
	
	
	
	var ECBehaviorColliderAI pColliderAI
	var ECBehaviorCollider pCollider
	var ECPBoolean pApplyToActor
	var Array pListenerFactories
	var ECComposeBTSM pBTSMs
	var String pPrefix
	var ECPFloat pLandingAngle
	
	
	
	/** \brief Create behavior element class. */
	func new(BehaviorElementClass eclass, ECBehaviorColliderAI colliderAI) \
	this(eclass, colliderAI, null, "projectToGround.")
	end
	
	func new(BehaviorElementClass eclass, ECBehaviorCollider collider) \
	this(eclass, null, collider, "projectToGround.")
	end
	
	func new(BehaviorElementClass eclass, ECBehaviorColliderAI colliderAI, String prefix) \
	this(eclass, colliderAI, null, prefix)
		if colliderAI == null
			throw ENullPointer.new("colliderAI")
		end
	end
	
	func new(BehaviorElementClass eclass, ECBehaviorCollider collider, String prefix) \
	this(eclass, null, collider, prefix)
		if collider == null
			throw ENullPointer.new("collider")
		end
	end
	
	private func new(BehaviorElementClass eclass, ECBehaviorColliderAI colliderAI, \
	ECBehaviorCollider collider, String prefix) super(eclass)
		if getBehaviorIn(eclass) != null
			throw BEMultipleInstanceException.new(eclass, this)
		end
		
		pPrefix = prefix
		pColliderAI = colliderAI
		pCollider = collider
		pListenerFactories = Array.new()
		pBTSMs = ECComposeBTSM.new()
		
		eclass.addProperty(pApplyToActor = ECPBoolean.new(prefix + "applyToActor", true))
		eclass.addProperty(pLandingAngle = ECPFloat.new(prefix + "landingAngle", 120, 0, 180))
		
		eclass.addBehavior(this)
	end
	
	/** \brief Dispose of behavior. */
	func void dispose()
		pCollider = null
		pColliderAI = null
		pListenerFactories = null
		pBTSMs = null
		super.dispose()
	end
	
	
	
	/**
	 * \brief Prefix.
	 * \version 1.26
	 */
	func String getPrefix()
		return pPrefix
	end
	
	/** \brief ColliderAI behavior or null. */
	func ECBehaviorColliderAI getColliderAI()
		return pColliderAI
	end
	
	/** \brief Collider behavior or null. */
	func ECBehaviorCollider getCollider()
		return pCollider
	end
	
	/** \brief Apply projected position automatically to actor. */
	func ECPBoolean getApplyToActor()
		return pApplyToActor
	end
	
	/**
	 * \brief Landing angle in degrees.
	 * \version 1.26
	 */
	func ECPFloat getLandingAngle()
		return pLandingAngle
	end
	
	/**
	 * \brief Compose behavior trees and state machines.
	 * \version 1.26
	 */
	func ECComposeBTSM getBTSMs()
		return pBTSMs
	end
	
	/** \brief Add listener factory. */
	func void addListenerFactory(ListenerFactory factory)
		if factory == null
			throw ENullPointer.new()
		end
		pListenerFactories.add(factory)
	end
	
	/**
	 * \brief Add listener factory using block.
	 * 
	 * Block receives as parameter Instance and returns Listener.
	 */
	func void addListenerFactory(Block blockFactory)
		pListenerFactories.add(BlockListenerFactory.new(blockFactory))
	end
	
	/** \brief Visit listener factories with block with argument ListenerFactory. */
	func void forEachListenerFactory(Block ablock)
		pListenerFactories.forEach(ablock)
	end
	
	/** \brief Create listeners from factories adding them to behavior instance. */
	func void createListeners(Instance instance)
		pListenerFactories.forEach(block ListenerFactory each
			instance.addListener(each.createListener(instance))
		end)
	end
	
	
	
	/** \brief Get instance in element from owner element class. */
	func Instance instance(BehaviorElement element)
		return element.getInstanceAt(getInstanceIndex()) cast Instance
	end
	
	
	
	/**
	 * \brief Get behavior in element class or null if absent.
	 * 
	 * Use this method to check if a particular BehaviorElementClass contains a behavior
	 * of type ECBehaviorProjectToGround.
	 */
	static func ECBehaviorProjectToGround getBehaviorIn(BehaviorElementClass eclass)
		return eclass.findBehavior(block ECBehaviorProjectToGround each
			return true
		end) cast ECBehaviorProjectToGround
	end
	
	/**
	 * \brief Get instance in element or null if absent.
	 * 
	 * Use this method to check if a particular BehaviorElement contains a behavior instance
	 * of type ECBehaviorProjectToGround.Instance .
	 */
	static func Instance getInstanceIn(BehaviorElement element)
		return element.findInstance(block Instance each
			return true
		end) cast Instance
	end
	
	
	
	/** \brief Create Behavior instance. */
	func ECBehaviorInstance createInstance(BehaviorElement element)
		return Instance.new(this, element)
	end
end
