/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */


namespace Dragengine.Scenery

pin Dragengine.Gui
pin Dragengine.LoadSave
pin Dragengine.Preloading
pin Dragengine.Utils
pin Dragengine.BehaviorTreeSystem
pin Dragengine.StateMachineSystem


/**
 * \brief Behavior adding animation support to actors.
 * 
 * Adds AnimatorInstance and a map of animators to switch using string identifiers.
 * 
 * To simplify using actor animation a map of controller bindings can be defined to be
 * applied to ECBehaviorLocomotion each time the animator changes. This requires controller
 * names to be consistent and unique across animators but makes life a lot easier. If no
 * map is defined the behavior does not change the locomotion controller mapping.
 * While changing animator controllers with matching names are not reset.
 * 
 * To use this class add these behaviors to the actor:
 * - ECBehaviorComponent
 * - ECBehaviorLocomotion (optional)
 * - ECBehaviorActorAnimated
 * 
 * Multiple behaviors can be added to animated different parts of the actor independent.
 * 
 * Element class property prefix is "actorAnimated{(id)}".
 * 
 * \see https://developer.dragondreams.ch/wiki/doku.php/dragengine:modules:dragonscript:behavior_actoranimated
 */
class ECBehaviorActorAnimated extends DefaultECBehavior
	/** \brief Listener for behavior instance events. */
	interface Listener
		/** \brief Update controllers if required. */
		func void updateControllers(Instance instance, float elapsed)
		
		/** \brief Animation has been applied. */
		func void animationApplied(Instance instance)
		
		/** \brief Animator changed . */
		func void animatorChanged(Instance instance)
	end
	
	/** \brief Default implementation of behavior instance listener. */
	class DefaultListener implements Listener
		/** \brief Create default listener. */
		func new()
		end
		
		/** \brief Update controllers if required. */
		func void updateControllers(Instance instance, float elapsed)
		end
		
		/** \brief Animation has been applied. */
		func void animationApplied(Instance instance)
		end
		
		/** \brief Animator changed . */
		func void animatorChanged(Instance instance)
		end
	end
	
	/** \brief Factory creating listeners. */
	interface ListenerFactory
		/** \brief Create listener. */
		func Listener createListener(Instance instance)
	end
	
	/** \brief Factory creating listeners using block. */
	class BlockListenerFactory implements ListenerFactory
		var Block pBlock
		
		/** \brief Create factory using block receiving Instance as parameter returning Listener. */
		func new(Block blockFactory)
			if blockFactory == null
				throw ENullPointer.new()
			end
			pBlock = blockFactory
		end
		
		/** \brief Create listener. */
		func Listener createListener(Instance instance)
			return pBlock.run(instance) cast Listener
		end
	end
	
	/**
	 * \brief Behavior factory.
	 * \version 1.25
	 * 
	 * Automatically assigns these behaviors if present before adding:
	 * - Required: \ref ECBehaviorComponent
	 * - Optional: \ref ECBehaviorLocomotion
	 * 
	 * Example XML element class:
	 * \code{.xml}
	 * <behavior type='ECBehaviorActorAnimated'>
	 *   <!-- optional: use component with id instead of empty string -->
	 *   <string name='component'>second</string>
	 *   
	 *   <!-- optional: add behavior trees. default adds all behavior trees. -->
	 *   <list name='behaviorTrees'>
	 *     <string/> <!-- add behavior with empty identifier -->
	 *     <string>default</string> <!-- add behavior with 'default' identifier -->
	 *   </list>
	 * 
	 *   <!-- optional: add state machines. default adds all state machines. -->
	 *   <list name='stateMachines'>
	 *     <string/> <!-- add behavior with empty identifier -->
	 *     <string>default</string> <!-- add behavior with 'default' identifier -->
	 *   </list>
	 *   
	 *   <!--
	 *   optional: set controller mapping instead of using default mapping.
	 *   keys are the controller names and value the LocomotionAttribute constant names.
	 *   the listing below is equivalent to the default controller mapping.
	 *   -->
	 *   <map name='controllerMapping'>
	 *     <string key='idle'>elapsedTime</string>
	 *     <string key='look.vertical'>lookVertical</string>
	 *     <string key='look.horizontal'>lookHorizontal</string>
	 *     <string key='turn.inPlace'>timeTurnIP</string>
	 *     <string key='turn.velocity'>turningSpeed</string>
	 *     <string key='stance'>stance</string>
	 *     <string key='move.walk'>displacement</string>
	 *     <string key='move.run'>displacement</string>
	 *     <string key='move.velocity'>relativeMovingSpeed</string>
	 *     <string key='tilt.vertical'>tiltVertical</string>
	 *     <string key='tilt.horizontal'>tiltHorizontal</string>
	 *     <string key='tilt.offset'>tiltOffset</string>
	 *     <string key='interaction'>elapsedTime</string>
	 *   </map>
	 * </behavior>
	 * 
	 * <!-- for adding multiple behaviors use unique identifiers -->
	 * <behavior type='ECBehaviorActorAnimated' id='second'>
	 *   ...
	 * </behavior>
	 * \endcode
	 * 
	 * If 'controllerMapping' is not set calls
	 * \ref ECBehaviorActorAnimated#setDefaultControllerMappings() after creating behavior.
	 * 
	 * Element class properties added by the behavior can also be set directly inside the tag
	 * be removing the property name prefix and starting with a "." (for example ".propertyName").
	 */
	class Factory implements BehaviorFactory
		func new()
		end
		
		func String factoryId()
			return "ECBehaviorActorAnimated"
		end
		
		func ECBehavior addBehavior(BehaviorElementClass eclass, String id, Dictionary parameters)
			var ECBehaviorActorAnimated behavior = ECBehaviorActorAnimated.new(eclass,\
				eclass.sharedFactoryHelper.defaultComponent(eclass, parameters),\
				ECBehaviorLocomotion.getBehaviorIn(eclass), id)
			
			var Object value = parameters.getAt("controllerMapping", null)
			if value != null
				var Dictionary mapping = behavior.getControllerMapping()
				var LocomotionAttribute attr
				(value cast Dictionary).forEach(block String k, String v
					attr = LocomotionAttribute.named(v)
					if attr == null
						throw EInvalidParam.new("invalid LocomotionAttribute: " + v)
					end
					mapping.setAt(k, attr)
				end)
				
			else
				behavior.setDefaultControllerMappings()
			end
			
			eclass.sharedFactoryHelper.allBTSM(behavior.getBTSMs(), eclass, parameters)
			
			eclass.sharedFactoryHelper.setPropertiesFromParameters(\
				eclass, parameters, "actorAnimated", id)
			
			return behavior
		end
	end
	
	
	
	/** \brief Behavior instance. */
	class Instance extends DefaultECBehaviorInstance
		/**
		 * \brief Behavior tree action "actorAnimated{(id)}.set".
		 * \version 1.26
		 */
		private class BTASet extends BTSMActionCondition
			var Instance pInstance
			
			func new(Instance instance)
				pInstance = instance
			end
			
			func BTResult runActionShared(Object context, Dictionary parameters)
				var Object value
				
				value = parameters.getAt("animator", null)
				if value != null
					pInstance.setActiveAnimatorID(value cast String)
				end
				
				value = parameters.getAt("controller.name", null)
				if value != null
					var AnimatorController c = pInstance.getControllerNamed(value cast String)
					if c != null
						value = parameters.getAt("controller.value", null)
						if value != null
							c.setValue((value cast String).toFloat())
						end
						
						value = parameters.getAt("controller.value.increment", null)
						if value != null
							c.increment((value cast String).toFloat())
						end
						
						value = parameters.getAt("controller.value.decrement", null)
						if value != null
							c.increment(-(value cast String).toFloat())
						end
						
						value = parameters.getAt("controller.value.relative", null)
						if value != null
							c.setRelativeValue((value cast String).toFloat())
						end
						
						value = parameters.getAt("controller.value.relative.increment", null)
						if value != null
							c.setRelativeValue(c.getRelativeValue() + (value cast String).toFloat())
						end
						
						value = parameters.getAt("controller.value.relative.decrement", null)
						if value != null
							c.setRelativeValue(c.getRelativeValue() - (value cast String).toFloat())
						end
						
						value = parameters.getAt("controller.value.lower", null)
						if value != null
							c.setToLower()
						end
						
						value = parameters.getAt("controller.value.upper", null)
						if value != null
							c.setToUpper()
						end
						
						if parameters.has("controller.value.reverse")
							c.reverse()
						end
					end
				end
				
				return BTResult.success
			end
		end
		
		/**
		 * \brief Behavior tree action "actorAnimated{(id)}.update".
		 * \version 1.26
		 */
		private class BTAUpdate extends BTSMActionCondition
			var Instance pInstance
			
			func new(Instance instance)
				pInstance = instance
			end
			
			func BTResult runActionShared(Object context, Dictionary parameters)
				if parameters.has("notifyControllersChanged")
					pInstance.notifyControllersChanged((context cast SMContext).getEventParameter() cast float)
				end
				
				if parameters.has("apply")
					pInstance.applyAnimations()
				end
				
				return BTResult.success
			end
		end
		
		/**
		 * \brief Behavior tree action/condition "actorAnimated{(id)}.check".
		 * \version 1.26
		 */
		private class BTACheck extends BTSMActionCondition
			var Instance pInstance
			var String pPrefix
			
			func new(Instance instance, String prefix)
				pInstance = instance
				pPrefix = prefix
			end
			
			func BTResult runActionShared(Object context, Dictionary parameters)
				return check("", parameters) if BTResult.success\
					else (parameters.has("wait") if BTResult.running else BTResult.failure)
			end
			
			func bool evaluateConditionShared(Object context, Dictionary parameters)
				return check(pPrefix, parameters)
			end
			
			func bool check(String prefix, Dictionary parameters)
				var bool result = true
				var Object value
				
				value = parameters.getAt(prefix + "animator", null)
				if value != null
					result &= pInstance.getActiveAnimatorID().equals(value)
				end
				
				value = parameters.getAt(prefix + "animator.not", null)
				if value != null
					result &= not pInstance.getActiveAnimatorID().equals(value)
				end
				
				value = parameters.getAt(prefix + "animator.starts", null)
				if value != null
					result &= pInstance.getActiveAnimatorID().startsWith(value cast String)
				end
				
				value = parameters.getAt(prefix + "animator.starts.not", null)
				if value != null
					result &= not pInstance.getActiveAnimatorID().startsWith(value cast String)
				end
				
				value = parameters.getAt(prefix + "animator.ends", null)
				if value != null
					result &= pInstance.getActiveAnimatorID().endsWith(value cast String)
				end
				
				value = parameters.getAt(prefix + "animator.ends.not", null)
				if value != null
					result &= not pInstance.getActiveAnimatorID().endsWith(value cast String)
				end
				
				value = parameters.getAt(prefix + "animator.contains", null)
				if value != null
					result &= pInstance.getActiveAnimatorID().findString(value cast String) != -1
				end
				
				value = parameters.getAt(prefix + "animator.contains.not", null)
				if value != null
					result &= pInstance.getActiveAnimatorID().findString(value cast String) == -1
				end
				
				value = parameters.getAt(prefix + "controller.name", null)
				if value != null
					var AnimatorController c = pInstance.getControllerNamed(value cast String)
					if c == null
						return false
					end
					
					value = parameters.getAt(prefix + "controller.value.less", null)
					if value != null
						result &= c.getValue() < (value cast String).toFloat()
					end
					
					value = parameters.getAt(prefix + "controller.value.greater", null)
					if value != null
						result &= c.getValue() < (value cast String).toFloat()
					end
					
					value = parameters.getAt(prefix + "controller.value.relative.less", null)
					if value != null
						result &= c.getRelativeValue() < (value cast String).toFloat()
					end
					
					value = parameters.getAt(prefix + "controller.value.relative.greater", null)
					if value != null
						result &= c.getRelativeValue() > (value cast String).toFloat()
					end
					
					value = parameters.getAt(prefix + "controller.value.atLower", null)
					if value != null
						result &= c.isAtLower()
					end
					
					value = parameters.getAt(prefix + "controller.value.atUpper", null)
					if value != null
						result &= c.isAtUpper()
					end
				end
				
				return result
			end
		end
		
		
		var ECBehaviorActorAnimated pECBehavior
		
		var ECBehaviorComponent.Instance pComponent
		var ECBehaviorLocomotion.Instance pLocomotion
		
		var AnimatorInstance pAnimatorInstance
		var Dictionary pAnimators
		var Dictionary pControllerMappings
		var String pActiveAnimatorID
		
		var Array pListeners
		var ECComposeBTSM.Instance pBTSMs
		
		
		
		/** \brief Create behavior instance. */
		func new(ECBehaviorActorAnimated ecbehavior, BehaviorElement element) super(element)
			pECBehavior = ecbehavior
			
			pListeners = Array.new()
			pActiveAnimatorID = ""
			
			if ecbehavior.getControllerMapping().getCount() > 0
				pControllerMappings = Dictionary.new(ecbehavior.getControllerMapping())
			end
			
			pComponent = ecbehavior.getComponent().instance(element)
		end
		
		/** \brief Dispose of behavior instance. */
		func void dispose()
			pLocomotion = null
			pComponent = null
			pListeners = null
			pBTSMs = null
			
			super.dispose()
		end
		
		
		
		/** \brief Initialize behavior from stub. */
		func void init(StubElement stub)
			var BehaviorElement element = getElement()
			var CodecPropertyString codec = getElement().getClass().getCodecPropertyString()
			
			if pECBehavior.getLocomotion() != null
				pLocomotion = pECBehavior.getLocomotion().instance(element)
			end
			
			pAnimators = pECBehavior.getAnimators().getAnimators(stub, codec)
			
			pAnimatorInstance = AnimatorInstance.new()
			pAnimatorInstance.setComponent(pComponent.getComponent())
			
			pECBehavior.createListeners(this)
			
			if pECBehavior.getBTSMs().hasAny()
				var String prefix = pECBehavior.getPrefix()
				pBTSMs = ECComposeBTSM.Instance.new(element, pECBehavior.getBTSMs())
				pBTSMs.addAllAction(prefix, "set", BTASet.new(this))
				pBTSMs.addAllAction(prefix, "update", BTAUpdate.new(this))
				pBTSMs.addAllActionCondition(prefix, "check", BTACheck.new(this, prefix))
				pBTSMs.dropBTContexts()
			end
		end
		
		
		
		/** \brief Behavior. */
		func ECBehaviorActorAnimated getECBehavior()
			return pECBehavior
		end
		
		/** \brief Component behavior. */
		func ECBehaviorComponent.Instance getComponent()
			return pComponent
		end
		
		/** \brief Locomotion behavior or null. */
		func ECBehaviorLocomotion.Instance getLocomotion()
			return pLocomotion
		end
		
		
		
		/** \brief Animator instance. */
		func AnimatorInstance getAnimatorInstance()
			return pAnimatorInstance
		end
		
		/** \brief Active animator ID or empty string not set. */
		func String getActiveAnimatorID()
			return pActiveAnimatorID
		end
		
		/** \brief Set active animator ID or empty string to clear. */
		func void setActiveAnimatorID(String id)
			if id.equals(pActiveAnimatorID)
				return
			end
			
			pActiveAnimatorID = id
			setAnimator(getAnimatorWithId(id))
		end
		
		/** \brief Animator. */
		func Animator getAnimator()
			return pAnimatorInstance.getAnimator()
		end
		
		/** \brief Activate animator. */
		func void setAnimator(Animator animator)
			pAnimatorInstance.setAnimator(animator, true)
			
			if pControllerMappings != null and pLocomotion != null
				initControllerMappings()
			end
			
			pListeners.forEach(block Listener each
				each.animatorChanged(this)
			end)
			
			if pBTSMs != null
				pBTSMs.runEvent("actorAnimated.", "animator")
			end
		end
		
		/** \brief Apply animations. */
		func void applyAnimations()
			pAnimatorInstance.apply()
			
			pListeners.forEach(block Listener each
				each.animationApplied(this)
			end)
		end
		
		/** \brief Animator with identifier or \em null if absent. */
		func Animator getAnimatorWithId(String id)
			return pAnimators.getAt(id, null) cast Animator
		end
		
		/** \brief Get named controller or \em null if absent. */
		func AnimatorController getControllerNamed(String name)
			return pAnimatorInstance.getControllerNamed(name)
		end
		
		/** \brief Capture state with number. */
		func void captureState(int number)
			pAnimatorInstance.captureState(number)
		end
		
		
		
		/** \brief Init controller mappings. */
		protected func void initControllerMappings()
			var Locomotion locomotion = pLocomotion.getLocomotion()
			locomotion.removeAllControllerMappings()
			
			if pAnimatorInstance.getAnimator() == null
				return
			end
			
			var AnimatorController controller
			pControllerMappings.forEach(block String name, LocomotionAttribute attribute
				controller = pAnimatorInstance.getControllerNamed(name)
				if controller != null
					locomotion.addControllerMapping(controller, attribute)
				end
			end)
		end
		
		
		
		/** \brief Add listener. */
		func void addListener(Listener listener)
			if listener == null
				throw EInvalidParam.new()
			end
			pListeners.add(listener)
		end
		
		/** \brief Remove listener. */
		func void removeListener(Listener listener)
			pListeners.remove(listener)
		end
		
		/** \brief Notify listeners controllers have changed. */
		func void notifyControllersChanged(float elapsed)
			pListeners.forEach(block Listener each
				each.updateControllers(this, elapsed)
			end)
		end
		
		
		
		/** \brief Read behavior from file. */
		func void readFromFile(PersistencyEnvironment env, FileReader reader)
			select reader.readByte() // version
			case 0
				setActiveAnimatorID(reader.readString8())
				readControllersFromFile(reader)
				
			else
				throw EInvalidParam.new("unsupported version")
			end
		end
		
		/**
		 * \brief Read controller values from file reader.
		 * 
		 * Reads first byte controller count (max 255) then each controller value as float.
		 * Assigns value only to existing controllers to be safe against problems.
		 */
		func void readControllersFromFile(FileReader reader)
			var int i, controllerCount = pAnimatorInstance.getControllerCount()
			
			var int readCount = reader.readByte()
			
			var int endIndex = DEMath.min(readCount, controllerCount)
			for i = 0 to endIndex
				pAnimatorInstance.getControllerAt(i).setValue(reader.readFloat())
			end
			for i = endIndex to readCount
				reader.readFloat()
			end
		end
		
		/** \brief Write behavior to file. */
		func void writeToFile(PersistencyEnvironment env, FileWriter writer)
			writer.writeByte(0) // version
			
			writer.writeString8(pActiveAnimatorID)
			writeControllersToFile(writer)
		end
		
		/**
		 * \brief Write animator controller values to file.
		 * 
		 * Writes first byte controller count (max 255) then each controller value as float.
		 */
		func void writeControllersToFile(FileWriter writer)
			var int i, count = DEMath.min(pAnimatorInstance.getControllerCount(), 255)
			writer.writeByte(count)
			for i = 0 to count
				writer.writeFloat(pAnimatorInstance.getControllerAt(i).getValue())
			end
		end
	end
	
	
	
	var ECPAnimatorMap pAnimators
	var ECBehaviorComponent pComponent
	var ECBehaviorLocomotion pLocomotion
	var Dictionary pControllerMappings
	var Array pListenerFactories
	var ECComposeBTSM pBTSMs
	var String pPrefix
	
	
	
	/**
	 * \brief Create behavior element class.
	 * 
	 * These values are optional and can be null: \em locomotion.
	 */
	func new(BehaviorElementClass eclass, ECBehaviorComponent component, \
	ECBehaviorLocomotion locomotion) \
	this(eclass, component, locomotion, BaseGameApp.getApp().getLoaders(), "")
	end
	
	func new(BehaviorElementClass eclass, ECBehaviorComponent component, \
	ECBehaviorLocomotion locomotion, String id) \
	this(eclass, component, locomotion, BaseGameApp.getApp().getLoaders(), id)
	end
	
	func new(BehaviorElementClass eclass, ECBehaviorComponent component, \
	ECBehaviorLocomotion locomotion, String id, String subID) \
	this(eclass, component, locomotion, BaseGameApp.getApp().getLoaders(), id, subID)
	end
	
	func new(BehaviorElementClass eclass, ECBehaviorComponent component, \
	ECBehaviorLocomotion locomotion, Loaders loaders) \
	this(eclass, component, locomotion, loaders, "")
	end
	
	func new(BehaviorElementClass eclass, ECBehaviorComponent component, \
	ECBehaviorLocomotion locomotion, Loaders loaders, String id) \
	this(eclass, component, locomotion, loaders, id, \
		id.empty() if "actorAnimated" else "actorAnimated(" + id + ")")
	end
	
	func new(BehaviorElementClass eclass, ECBehaviorComponent component, \
	ECBehaviorLocomotion locomotion, Loaders loaders, String id, String subID) \
	this(eclass, component, locomotion, loaders, id, subID, subID + ".")
	end
	
	func new(BehaviorElementClass eclass, ECBehaviorComponent component, \
	ECBehaviorLocomotion locomotion, Loaders loaders, String id, String subID, String prefix) \
	super(eclass, id)
		if component == null
			throw ENullPointer.new("component")
		end
		
		pPrefix = prefix
		pComponent = component
		pLocomotion = locomotion
		pControllerMappings = Dictionary.new()
		pListenerFactories = Array.new()
		pBTSMs = ECComposeBTSM.new(eclass, prefix)
		
		eclass.addProperty(pAnimators = ECPAnimatorMap.new(prefix + "animators", loaders.getAnimator()))
		
		eclass.addBehavior(this)
	end
	
	/** \brief Dispose of behavior. */
	func void dispose()
		pComponent = null
		pLocomotion = null
		pListenerFactories = null
		pBTSMs = null
		super.dispose()
	end
	
	
	
	/**
	 * \brief Prefix.
	 * \version 1.26
	 */
	func String getPrefix()
		return pPrefix
	end
	
	/** \brief Animators. */
	func ECPAnimatorMap getAnimators()
		return pAnimators
	end
	
	/** \brief Component behavior to animate. */
	func ECBehaviorComponent getComponent()
		return pComponent
	end
	
	/** \brief Locomotion behavior or null. */
	func ECBehaviorLocomotion getLocomotion()
		return pLocomotion
	end
	
	/** \brief Controller mapping as Dictionary mapping String name to \ref LocomotionAttribute. */
	func Dictionary getControllerMapping()
		return pControllerMappings
	end
	
	/**
	 * \brief Set default controller mappings.
	 * 
	 * Sets dictionary to these values:
	 * "idle": LocomotionAttribute.elapsedTime
	 * "look.vertical": LocomotionAttribute.lookVertical
	 * "look.horizontal": LocomotionAttribute.lookHorizontal
	 * "turn.inPlace": LocomotionAttribute.timeTurnIP
	 * "turn.velocity": LocomotionAttribute.turningSpeed
	 * "stance": LocomotionAttribute.stance
	 * "move.walk": LocomotionAttribute.displacement
	 * "move.run": LocomotionAttribute.displacement
	 * "move.velocity": LocomotionAttribute.relativeMovingSpeed
	 * "tilt.vertical": LocomotionAttribute.tiltVertical
	 * "tilt.horizontal": LocomotionAttribute.tiltHorizontal
	 * "tilt.offset": LocomotionAttribute.tiltOffset
	 * "interaction": LocomotionAttribute.elapsedTime
	 */
	func void setDefaultControllerMappings()
		pControllerMappings.removeAll()
		pControllerMappings.setAt("idle", LocomotionAttribute.elapsedTime)
		pControllerMappings.setAt("look.vertical", LocomotionAttribute.lookVertical)
		pControllerMappings.setAt("look.horizontal", LocomotionAttribute.lookHorizontal)
		pControllerMappings.setAt("turn.inPlace", LocomotionAttribute.timeTurnIP)
		pControllerMappings.setAt("turn.velocity", LocomotionAttribute.turningSpeed)
		pControllerMappings.setAt("stance", LocomotionAttribute.stance)
		pControllerMappings.setAt("move.walk", LocomotionAttribute.displacement)
		pControllerMappings.setAt("move.run", LocomotionAttribute.displacement)
		pControllerMappings.setAt("move.velocity", LocomotionAttribute.relativeMovingSpeed)
		pControllerMappings.setAt("tilt.vertical", LocomotionAttribute.tiltVertical)
		pControllerMappings.setAt("tilt.horizontal", LocomotionAttribute.tiltHorizontal)
		pControllerMappings.setAt("tilt.offset", LocomotionAttribute.tiltOffset)
		pControllerMappings.setAt("interaction", LocomotionAttribute.elapsedTime)
	end
	
	/**
	 * \brief Compose behavior trees and state machines.
	 * \version 1.26
	 */
	func ECComposeBTSM getBTSMs()
		return pBTSMs
	end
	
	/** \brief Add listener factory. */
	func void addListenerFactory(ListenerFactory factory)
		if factory == null
			throw ENullPointer.new()
		end
		pListenerFactories.add(factory)
	end
	
	/**
	 * \brief Add listener factory using block.
	 * 
	 * Block receives as parameter Instance and returns Listener.
	 */
	func void addListenerFactory(Block blockFactory)
		pListenerFactories.add(BlockListenerFactory.new(blockFactory))
	end
	
	/** \brief Visit listener factories with block with argument ListenerFactory. */
	func void forEachListenerFactory(Block ablock)
		pListenerFactories.forEach(ablock)
	end
	
	/** \brief Create listeners from factories adding them to behavior instance. */
	func void createListeners(Instance instance)
		pListenerFactories.forEach(block ListenerFactory each
			instance.addListener(each.createListener(instance))
		end)
	end
	
	
	
	/** \brief Get instance in element from owner element class. */
	func Instance instance(BehaviorElement element)
		return element.getInstanceAt(getInstanceIndex()) cast Instance
	end
	
	
	
	/**
	 * \brief Get behavior in element class or \em null if absent.
	 * 
	 * Use this method to check if a particular BehaviorElementClass contains a behavior
	 * of type ECBehaviorComponent.
	 */
	static func ECBehaviorActorAnimated getBehaviorIn(BehaviorElementClass eclass)
		return eclass.findBehavior(block ECBehaviorActorAnimated each
			return true
		end) cast ECBehaviorActorAnimated
	end
	
	/**
	 * \brief Get behavior with id in element class or \em null if absent.
	 * 
	 * Use this method to check if a particular BehaviorElementClass contains a behavior
	 * of type ECBehaviorActorAnimated with specific identifier.
	 */
	static func ECBehaviorActorAnimated getBehaviorIn(BehaviorElementClass eclass, String id)
		return eclass.findBehavior(block ECBehaviorActorAnimated each
			return each.getID().equals(id)
		end) cast ECBehaviorActorAnimated
	end
	
	/**
	 * \brief Get list of all behaviors in element.
	 * 
	 * Returns list contains ECBehaviorActorAnimated behaviors in the order they have
	 * been created in the element.
	 */
	static func Array getAllBehaviorsIn(BehaviorElementClass eclass)
		return eclass.collectBehaviors(block ECBehaviorActorAnimated each
			return true
		end)
	end
	
	
	
	/**
	 * \brief Get instance in element or \em null if absent.
	 * 
	 * Use this method to check if a particular BehaviorElement contains a behavior instance
	 * of type ECBehaviorActorAnimated.Instance . If more than one instance is present returns
	 * the first instance.
	 */
	static func Instance getInstanceIn(BehaviorElement element)
		return element.findInstance(block Instance each
			return true
		end) cast Instance
	end
	
	/**
	 * \brief Get instance with id in element or \em null if absent.
	 * 
	 * Use this method to check if a particular BehaviorElement contains a behavior instance
	 * of type ECBehaviorActorAnimated.Instance with specific identifier.
	 */
	static func Instance getInstanceIn(BehaviorElement element, String id)
		return element.findInstance(block Instance each
			return each.getECBehavior().getID().equals(id)
		end) cast Instance
	end
	
	/**
	 * \brief Get list of all instances in element.
	 * 
	 * Returns list contains ECBehaviorActorAnimated.Instance instances in the order they have
	 * been created in the element.
	 */
	static func Array getAllInstancesIn(BehaviorElement element)
		return element.collectInstances(block Instance each
			return true
		end)
	end
	
	
	
	/** \brief Create Behavior instance. */
	func ECBehaviorInstance createInstance(BehaviorElement element)
		return Instance.new(this, element)
	end
end
