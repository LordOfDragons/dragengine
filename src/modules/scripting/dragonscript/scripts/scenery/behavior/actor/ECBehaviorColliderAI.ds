/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */


namespace Dragengine.Scenery

pin Dragengine.Gui
pin Dragengine.LoadSave
pin Dragengine.Preloading
pin Dragengine.Utils


/**
 * \brief Behavior element behavior adding collider support suitable for actor AI.
 * 
 * ECBehaviorColliderAI adds a collider which is useable for actor AI usage. This collider
 * is not linked to ECBehaviorComponent but instead creates a ColliderVolume. The shape of
 * the collider can be set manually or obtained from Rig resources. Using shapes from rig
 * resources is usually the simpler way while creating shapes allows for greater flexibility.
 * Otherwise the classes behave similar.
 * 
 * ECBehaviorColliderAI requires ECBehaviorCollider. Do not use this behavior if other
 * behaviors try to move the ECBehaviorCollider. Doing so can produce strange results.
 * Apply velocities and changes to the AI collider.
 * 
 * In contrary to ECBehaviorCollider this behavior does synchronize position with the
 * element position but not vice versa. Actors typically have complex requirements on how
 * their AI collider can move including projecting down to the ground after physics processing
 * has finished. Behaviors suitable for managing collider AI typically update the AI collider
 * velocities during think() and update element position and orientation from AI collider
 * during postThink().
 * 
 * This behavior does require the element class to be persistable (setPersistable).
 */
class ECBehaviorColliderAI extends DefaultECBehavior
	/** \brief Listener for behavior instance events. */
	interface Listener
		/**
		 * \brief Collision detected.
		 * \param instance Behavior instance owning \em collider.
		 * \param collider Collider involded in the collision.
		 * \param info Information about collision partner.
		 */
		func void collisionResponse(Instance instance, Collider collider, CollisionInfo info)
		
		/**
		 * \brief Collision between colliders is possible.
		 * 
		 * Only called if callback is enabled in collider AI. Stops after the first listener
		 * returning false. All listeneres added after this listener will not be called.
		 * 
		 * \param instance Behavior instance owning \em collider.
		 * \param collider Collider involded in the collision.
		 * \param hitCollider Hit collider.
		 */
		func bool canHitCollider(Instance instance, Collider collider, Collider hitCollider)
		
		/**
		 * \brief Collider changed.
		 * \param instance Behavior instance owning \em collider.
		 * \param collider Collider involded in the collision.
		 */
		func void colliderChanged(Instance instance, Collider collider)
	end
	
	/** \brief Default implementation of behavior instance listener. */
	class DefaultListener implements Listener
		/** \brief Create default listener. */
		func new()
		end
		
		/**
		 * \brief Collision detected.
		 * \param instance Behavior instance owning \em collider.
		 * \param collider Collider involded in the collision.
		 * \param info Information about collision partner.
		 */
		func void collisionResponse(Instance instance, Collider collider, CollisionInfo info)
		end
		
		/**
		 * \brief Collision between colliders is possible.
		 * 
		 * Only called if callback is enabled in collider AI. Default implementation returns true.
		 * 
		 * \param instance Behavior instance owning \em collider.
		 * \param collider Collider involded in the collision.
		 * \param hitCollider Hit collider.
		 */
		func bool canHitCollider(Instance instance, Collider collider, Collider hitCollider)
			return true
		end
		
		/**
		 * \brief Collider changed.
		 * \param instance Behavior instance owning \em collider.
		 * \param collider Collider involded in the collision.
		 */
		func void colliderChanged(Instance instance, Collider collider)
		end
	end
	
	/** \brief Factory creating listeners. */
	interface ListenerFactory
		/** \brief Create listener. */
		func Listener createListener(Instance instance)
	end
	
	/** \brief Factory creating listeners using block. */
	class BlockListenerFactory implements ListenerFactory
		var Block pBlock
		
		/** \brief Create factory using block receiving Instance as parameter returning Listener. */
		func new(Block blockFactory)
			if blockFactory == null
				throw ENullPointer.new()
			end
			pBlock = blockFactory
		end
		
		/** \brief Create listener. */
		func Listener createListener(Instance instance)
			return pBlock.run(instance) cast Listener
		end
	end
	
	/**
	 * \brief Behavior factory.
	 * \ref 1.25
	 * 
	 * Automatically assigns these behaviors if present before adding:
	 * - Required: \ref ECBehaviorCollider
	 * 
	 * Example XML element class:
	 * \code{.xml}
	 * <behavior type='ECBehaviorColliderAI'>
	 *   <!-- optional: set collision filter. default value '3:0 1 2 3 4' which means
	 *                  category BaseGameApp.CollisionFilterBit.actorAI
	 *                  filter BaseGameApp.CollisionFilterBit.geometry,
	 *                         BaseGameApp.CollisionFilterBit.dynamic,
	 *                         BaseGameApp.CollisionFilterBit.actorAI,
	 *                         BaseGameApp.CollisionFilterBit.trigger.
	 *                  format is '', 'category' or 'category:filter' where category and filter
	 *                  are a list of bits to set. -->
	 *   <string name='collisionFilter'>3:0 1 2 3 4</string>
	 * </behavior>
	 * \endcode
	 */
	class Factory implements BehaviorFactory
		func new()
		end
		
		func String factoryId()
			return "ECBehaviorColliderAI"
		end
		
		func ECBehavior addBehavior(BehaviorElementClass eclass, String id, Dictionary parameters)
			if not id.empty()
				throw EInvalidParam.new("id is not empty string")
			end
			var ECBehaviorColliderAI behavior = ECBehaviorColliderAI.new(eclass,\
				ECBehaviorCollider.getBehaviorIn(eclass))
			
			if parameters.has("collisionFilter")
				behavior.getCollisionFilter().setCollisionFilter(ElementClass.getSharedCodecPropertyString().\
					decodeCollisionFilter(parameters.getAt("collisionFilter") cast String))
			end
			
			return behavior
		end
	end
	
	/** \brief Behavior instance. */
	class Instance extends DefaultECBehaviorInstance implements ColliderListener
		var ECBehaviorColliderAI pECBehavior
		var ECBehaviorCollider.Instance pBaseCollider
		var ColliderVolume pCollider
		var Vector pGravity
		var Array pListeners
		
		
		
		/** \brief Create element. */
		func new(ECBehaviorColliderAI ecbehavior, BehaviorElement element) super(element)
			pECBehavior = ecbehavior
			pListeners = Array.new()
			
			pBaseCollider = ecbehavior.getBaseCollider().instance(element)
		end
		
		/** \brief Dispose of composeable instance. */
		func void dispose()
			if pCollider != null
				pCollider.setColliderListener(null)
				pCollider.setOwner(null)
				pCollider.removeAllCollisionTests()
				pCollider.removeAllIgnoreColliders()
				pCollider = null
			end
			
			pListeners = null
			
			super.dispose()
		end
		
		
		
		/** \brief Initialize element from stub. */
		func void init(StubElement stub)
			var BehaviorElement element = getElement()
			
			pCollider = createCollider(stub)
			pCollider.setColliderListener(this)
			pCollider.setOwner(getElement())
			pCollider.setGeometry(element.getPosition(), element.getOrientation(), element.getScaling())
			
			var Collider baseCollider = pBaseCollider.getCollider()
			if baseCollider != null
				pCollider.addIgnoreCollider(baseCollider)
				baseCollider.addIgnoreCollider(pCollider)
			end
			
			pECBehavior.createListeners(this)
		end
		
		/**
		 * \brief Create collider.
		 * \param stub Stub to use.
		 * \param component Component to use or \em null if absent.
		 */
		protected func ColliderVolume createCollider(StubElement stub)
			var BehaviorElement element = getElement()
			
			var ColliderVolume collider = ColliderVolume.new()
			collider.setResponseType(CollisionResponse.kinematic)
			collider.setUseLocalGravity(true)
			collider.setGravity(Vector.new())
			collider.setCollisionFilter(pECBehavior.getCollisionFilter().getCollisionFilter())
			collider.setGeometry(element.getPosition(), element.getOrientation())
			//collider.setScaling(stub.getScaling()) // not supported yet
			
			return collider
		end
		
		
		
		/** \brief Behavior. */
		func ECBehaviorColliderAI getECBehavior()
			return pECBehavior
		end
		
		/** \brief Base collider behavior instance. */
		func ECBehaviorCollider.Instance getBaseCollider()
			return pBaseCollider
		end
		
		/** \brief Collider AI. */
		func ColliderVolume getCollider()
			return pCollider
		end
		
		/** \brief Default gravity to apply. */
		func Vector getGravity()
			return pGravity
		end
		
		/**
		 * \brief Set default gravity to apply.
		 * 
		 * Default value is \em null which means using element game world gravity.
		 */
		func void setGravity(Vector gravity)
			pGravity = gravity
		end
		
		
		
		/**
		 * \brief Shape of collider.
		 * \version 1.19
		 */
		func ShapeList getShape()
			return pCollider.getShape()
		end
		
		/** \brief Set shape of collider. */
		func void setShape(ShapeList shape)
			pCollider.setShape(shape)
		end
		
		/**
		 * \brief Set collider shape for humanoid actors.
		 * 
		 * Assigns a capsule oriented along the actor Y axis. The shape is located half the
		 * height above the actor position. This is a reasonable shape for a humanoid actor.
		 * 
		 * \param radius Radius of circle centered at actor position as seen from straight above.
		 *               A good radius for an average humanoid actor is 0.3m .
		 * \param height Height of the actor from the top most position down to the ground.
		 *               A good value is 1.8m .
		 */
		func void setShapeHumanoid(float radius, float height)
			var float capsuleHeight = height * 0.5 - radius
			var float capsuleCenter = radius + capsuleHeight
			
			var ShapeList shape = ShapeList.new()
			shape.addCapsule(capsuleHeight, radius, Vector.new(0, capsuleCenter, 0))
			setShape(shape)
		end
		
		
		
		/** \brief Set element position and orientation from collider. */
		func void setGeometryFromCollider()
			getElement().setGeometry(pCollider.getPosition(), pCollider.getOrientation())
		end
		
		/** \brief Clear all velocities. */
		func void stopMoving()
			pCollider.setLinearVelocity(Vector.new())
			pCollider.setAngularVelocity(Vector.new())
		end
		
		/** \brief Clear angular velocities. */
		func void stopTurning()
			pCollider.setAngularVelocity(Vector.new())
		end
		
		/**
		 * \brief Apply default gravity.
		 * 
		 * If default gravity is null uses element game world gravity.
		 */
		func void applyGravity(float elapsed)
			if pGravity != null
				applyGravity(pGravity, elapsed)
				
			else
				applyGravity(getElement().getGameWorld().getGravity(), elapsed)
			end
		end
		
		/**
		 * \brief Apply gravity.
		 * 
		 * Gravity has to be negative to pull actor towards ground.
		 */
		func void applyGravity(Vector gravity, float elapsed)
			pCollider.setLinearVelocity(pCollider.getLinearVelocity() + gravity * elapsed)
		end
		
		/** \brief Add linear velocity. */
		func void addLinearVelocity(Vector velocity)
			pCollider.setLinearVelocity(pCollider.getLinearVelocity() + velocity)
		end
		
		/** \brief Set orientation and linear velocity from locomotion. */
		func void setFromLocomotion(Locomotion locomotion)
			pCollider.setOrientation(locomotion.getOrientationQuaternion())
			pCollider.setLinearVelocity(locomotion.getLinearVelocity())
		end
		
		/** \brief Set orientation and linear velocity from locomotion. */
		func void setFromLocomotion(ECBehaviorLocomotion.Instance behavior)
			setFromLocomotion(behavior.getLocomotion())
		end
		
		
		
		/** \brief Add listener. */
		func void addListener(Listener listener)
			if listener == null
				throw EInvalidParam.new()
			end
			pListeners.add(listener)
		end
		
		/** \brief Remove listener. */
		func void removeListener(Listener listener)
			pListeners.remove(listener)
		end
		
		
		
		/** \brief State changed (visble, touchable). */
		func void stateChanged()
			if pCollider != null
				pCollider.setEnabled(getElement().getTouchable())
			end
		end
		
		/** \brief Position or orientation changed. */
		func void geometryChanged()
			if pCollider != null
				var BehaviorElement element = getElement()
				pCollider.setGeometry(element.getPosition(), element.getOrientation(), element.getScaling())
			end
		end
		
		/** \brief Add element to game world. */
		func void addToGameWorld()
			getElement().getGameWorld().getWorld().addCollider(pCollider)
		end
		
		/** \brief Remove element from game world. */
		func void removeFromGameWorld()
			getElement().getGameWorld().getWorld().removeCollider(pCollider)
		end
		
		
		
		/** \brief Colliders can hit each other. */
		func bool canHitCollider(Collider owner, Collider collider)
			return pListeners.find(block Listener each
				each.canHitCollider(this, owner, collider)
			end) != null
		end
		
		/** \brief Collision detected. */
		func void collisionResponse(Collider owner, CollisionInfo info)
			if pListeners.getCount() > 0
				pListeners.forEach(block Listener each
					each.collisionResponse(this, owner, info)
				end)
				
			else
				owner.setLinearVelocity(Vector.new())
				owner.setAngularVelocity(Vector.new())
			end
		end
		
		/** \brief Collider position or orientation changed. */
		func void colliderChanged(Collider owner)
			pListeners.forEach(block Listener each
				each.colliderChanged(this, owner)
			end)
		end
		
		
		
		/** \brief Read element from file. */
		func void readFromFile(PersistencyEnvironment env, FileReader reader)
			select reader.readByte() // version
			case 0
				geometryChanged()
				
				pCollider.setLinearVelocity(Vector.readFromFile(reader))
				pCollider.setAngularVelocity(Vector.readFromFile(reader))
				
			else
				throw EInvalidParam.new("unsupported version")
			end
		end
		
		/** \brief Write element to file. */
		func void writeToFile(PersistencyEnvironment env, FileWriter writer)
			writer.writeByte(0) // version
			
			pCollider.getLinearVelocity().writeToFile(writer)
			pCollider.getAngularVelocity().writeToFile(writer)
		end
	end
	
	
	
	var ECBehaviorCollider pBaseCollider
	var ECComposeCollisionFilter pCollisionFilter
	var Array pListenerFactories
	
	
	
	/** \brief Create behavior element class. */
	func new(BehaviorElementClass eclass, ECBehaviorCollider baseCollider) \
	this(eclass, baseCollider, "colliderAI.")
	end
	
	func new(BehaviorElementClass eclass, ECBehaviorCollider baseCollider, \
	String prefix) super(eclass)
		if baseCollider == null
			throw ENullPointer.new("baseCollider")
		end
		if getBehaviorIn(eclass) != null
			throw BEMultipleInstanceException.new(eclass, this)
		end
		
		pBaseCollider = baseCollider
		pListenerFactories = Array.new()
		
		var ECComposeCollider ccollider = pBaseCollider.getCollider()
		ccollider.getPhysicsType().setEnumeration(CollisionResponse.kinematic)
		ccollider.getLocalGravity().setVector(Vector.new())
		ccollider.collisionFilterClearBit(BaseGameApp.CollisionFilterBit.actorAI)
		ccollider.collisionFilterClearBit(BaseGameApp.CollisionFilterBit.trigger)
		
		var LayerMask cfCategory = LayerMask.newWith(BaseGameApp.CollisionFilterBit.actorAI)
		
		var LayerMask cfFilter = LayerMask.new()
		cfFilter.setBit(BaseGameApp.CollisionFilterBit.geometry)
		cfFilter.setBit(BaseGameApp.CollisionFilterBit.dynamic)
		cfFilter.setBit(BaseGameApp.CollisionFilterBit.actorAI)
		cfFilter.setBit(BaseGameApp.CollisionFilterBit.trigger)
		
		pCollisionFilter = ECComposeCollisionFilter.new(CollisionFilter.new(cfCategory, cfFilter))
		
		eclass.addBehavior(this)
	end
	
	/** \brief Dispose of behavior. */
	func void dispose()
		pBaseCollider = null
		pListenerFactories = null
		super.dispose()
	end
	
	
	
	/** \brief Base collider behavior. */
	func ECBehaviorCollider getBaseCollider()
		return pBaseCollider
	end
	
	/** \brief Collision filter for AI collider. */
	func ECComposeCollisionFilter getCollisionFilter()
		return pCollisionFilter
	end
	
	/** \brief Add listener factory. */
	func void addListenerFactory(ListenerFactory factory)
		if factory == null
			throw ENullPointer.new()
		end
		pListenerFactories.add(factory)
	end
	
	/**
	 * \brief Add listener factory using block.
	 * 
	 * Block receives as parameter Instance and returns Listener.
	 */
	func void addListenerFactory(Block blockFactory)
		pListenerFactories.add(BlockListenerFactory.new(blockFactory))
	end
	
	/** \brief Visit listener factories with block with argument ListenerFactory. */
	func void forEachListenerFactory(Block ablock)
		pListenerFactories.forEach(ablock)
	end
	
	/** \brief Create listeners from factories adding them to behavior instance. */
	func void createListeners(Instance instance)
		pListenerFactories.forEach(block ListenerFactory each
			instance.addListener(each.createListener(instance))
		end)
	end
	
	
	
	/** \brief Get instance in element from owner element class. */
	func Instance instance(BehaviorElement element)
		return element.getInstanceAt(getInstanceIndex()) cast Instance
	end
	
	
	
	/**
	 * \brief Get behavior in element class or \em null if absent.
	 * 
	 * Use this method to check if a particular BehaviorElementClass contains a behavior
	 * of type ECBehaviorColliderAI.
	 */
	static func ECBehaviorColliderAI getBehaviorIn(BehaviorElementClass eclass)
		return eclass.findBehavior(block ECBehaviorColliderAI each
			return true
		end) cast ECBehaviorColliderAI
	end
	
	/**
	 * \brief Get instance in element or \em null if absent.
	 * 
	 * Use this method to check if a particular BehaviorElement contains a behavior instance
	 * of type ECBehaviorColliderAI.Instance .
	 */
	static func Instance getInstanceIn(BehaviorElement element)
		return element.findInstance(block Instance each
			return true
		end) cast Instance
	end
	
	
	
	/** \brief Create Behavior instance. */
	func ECBehaviorInstance createInstance(BehaviorElement element)
		return Instance.new(this, element)
	end
end
