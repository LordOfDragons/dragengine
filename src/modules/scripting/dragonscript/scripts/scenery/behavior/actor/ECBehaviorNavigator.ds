/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */


namespace Dragengine.Scenery

pin Dragengine.Gui
pin Dragengine.LoadSave
pin Dragengine.Preloading
pin Dragengine.Utils


/**
 * \brief Behavior element behavior adding navigator support for actors.
 * 
 * Adds Navigator resource to actor. Actors use Navigator to find path around the game world
 * using navigation spaces. Usually actors have one navigator but it is possible to have
 * multiple navigators. Using different navigators path can be found and processed on different
 * navigation space levels.
 * 
 * By defautl the navigator has no cost types assigned. Actors set up the cost type in their
 * actions.
 * 
 * This behavior does not require persistency.
 * 
 * \see https://developer.dragondreams.ch/wiki/doku.php/dragengine:modules:dragonscript:behavior_navigator
 */
class ECBehaviorNavigator extends DefaultECBehavior
	/**
	 * \brief Behavior factory.
	 * \version 1.25
	 * 
	 * Example XML element class:
	 * \code{.xml}
	 * <behavior type='ECBehaviorNavigator'/>
	 * 
	 * <!-- for adding multiple behaviors use unique identifiers -->
	 * <behavior type='ECBehaviorNavigator' id='second'/>
	 * \endcode
	 * 
	 * Element class properties added by the behavior can also be set directly inside the tag
	 * be removing the property name prefix and starting with a "." (for example ".propertyName").
	 */
	class Factory extends DefaultBehaviorFactory
		func new() super("ECBehaviorNavigator")
		end
		
		func ECBehavior addBehavior(BehaviorElementClass eclass, String id, Dictionary parameters)
			var ECBehaviorNavigator behavior = ECBehaviorNavigator.new(eclass, id)
			getHelper().setPropertiesFromParameters(eclass, parameters, "navigator", id)
			return behavior
		end
	end
	
	/** \brief Behavior instance. */
	class Instance extends DefaultECBehaviorInstance
		private var ECBehaviorNavigator pECBehavior
		private var Navigator pNavigator
		
		
		
		/** \brief Create instance. */
		public func new( ECBehaviorNavigator ecbehavior, BehaviorElement element ) super( element )
			this.pECBehavior = ecbehavior
		end
		
		/** \brief Dispose of instance. */
		public func void dispose()
			this.pNavigator = null
			super.dispose()
		end
		
		
		
		/**
		 * \brief Initialize element from stub.
		 * 
		 * Sets the layer and space type from the element class property defaulting to
		 * layer 0 and NavigationSpaceType.mesh space type. Sets the default fix cost to 0 and
		 * the default cost-per-meter to 1. These apply if no cost types are added by the
		 * actor or other behaviors. The blocking cost is set to 10000.
		 */
		public func void init( StubElement stub )
			this.pNavigator = this.createNavigator( stub )
			this.pNavigator.setLayer( this.pECBehavior.getLayer().getValue( stub ) )
			this.pNavigator.setSpaceType( this.pECBehavior.getSpaceType() \
				.getEnumeration( stub ) cast NavigationSpaceType )
			this.pNavigator.setDefaultFixCost( 0 )
			this.pNavigator.setDefaultCostPerMeter( 1 )
			this.pNavigator.setBlockingCost( 10000 )
		end
		
		/**
		 * \brief Create navigator.
		 * 
		 * Creates instance of Navigator.
		 */
		protected func Navigator createNavigator( StubElement stub )
			return Navigator.new()
		end
		
		
		
		/** \brief Behavior. */
		public func ECBehaviorNavigator getECBehavior()
			return this.pECBehavior
		end
		
		/** \brief Navigator. */
		public func Navigator getNavigator()
			return this.pNavigator
		end
		
		
		
		/** \brief Add element to game world. */
		public func void addToGameWorld()
			this.getElement().getGameWorld().getWorld().addNavigator( this.pNavigator )
		end
		
		/** \brief Remove element from game world. */
		public func void removeFromGameWorld()
			this.getElement().getGameWorld().getWorld().removeNavigator( this.pNavigator )
		end
	end
	
	
	
	private var ECPInteger pLayer
	private var ECPEnumeration pSpaceType
	
	
	
	/** \brief Create behavior element class. */
	public func new( BehaviorElementClass eclass ) this( eclass, "" )
	end
	
	/** \brief Create behavior element class. */
	public func new( BehaviorElementClass eclass, String id ) \
	this( eclass, id, id.empty() if "navigator." else "navigator(" + id + ")." )
	end
	
	public func new( BehaviorElementClass eclass, String id, String prefix ) super( eclass, id )
		this.pLayer = ECPInteger.new( prefix + "layer", 0 )
		eclass.addProperty( this.pLayer )
		
		this.pSpaceType = ECPEnumeration.new( prefix + "spaceType", \
			NavigationSpaceType.all(), NavigationSpaceType.mesh )
		eclass.addProperty( this.pSpaceType )
		
		eclass.addBehavior( this )
	end
	
	
	
	/** \brief Navigation space layer to use. */
	public func ECPInteger getLayer()
		return this.pLayer
	end
	
	/** \brief Navigation space type to use (NavigationSpace.{GRID|MESH|VOLUME}). */
	public func ECPEnumeration getSpaceType()
		return this.pSpaceType
	end
	
	
	
	/** \brief Get instance in element from owner element class. */
	public func Instance instance( BehaviorElement element )
		return element.getInstanceAt( this.getInstanceIndex() ) cast Instance
	end
	
	
	
	/**
	 * \brief Get behavior in element class or \em null if absent.
	 * 
	 * Use this method to check if a particular BehaviorElementClass contains a behavior
	 * of type ECBehaviorComponent.
	 */
	static public func ECBehaviorNavigator getBehaviorIn( BehaviorElementClass eclass )
		return eclass.findBehavior( block ECBehaviorNavigator each
			return true
		end ) cast ECBehaviorNavigator
	end
	
	/**
	 * \brief Get behavior with id in element class or \em null if absent.
	 * 
	 * Use this method to check if a particular BehaviorElementClass contains a behavior
	 * of type ECBehaviorNavigator with specific identifier.
	 */
	static public func ECBehaviorNavigator getBehaviorIn( BehaviorElementClass eclass, String id )
		return eclass.findBehavior( block ECBehaviorNavigator each
			return each.getID().equals( id )
		end ) cast ECBehaviorNavigator
	end
	
	/**
	 * \brief Get list of all behaviors in element.
	 * 
	 * Returns list contains ECBehaviorNavigator behaviors in the order they have
	 * been created in the element.
	 */
	static public func Array getAllBehaviorsIn( BehaviorElementClass eclass )
		return eclass.collectBehaviors( block ECBehaviorNavigator each
			return true
		end )
	end
	
	
	
	/**
	 * \brief Get instance in element or \em null if absent.
	 * 
	 * Use this method to check if a particular BehaviorElement contains a behavior instance
	 * of type ECBehaviorNavigator.Instance . If more than one instance is present returns
	 * the first instance.
	 */
	static public func Instance getInstanceIn( BehaviorElement element )
		return element.findInstance( block Instance each
			return true
		end ) cast Instance
	end
	
	/**
	 * \brief Get instance with id in element or \em null if absent.
	 * 
	 * Use this method to check if a particular BehaviorElement contains a behavior instance
	 * of type ECBehaviorNavigator.Instance with specific identifier.
	 */
	static public func Instance getInstanceIn( BehaviorElement element, String id )
		return element.findInstance( block Instance each
			return each.getECBehavior().getID().equals( id )
		end ) cast Instance
	end
	
	/**
	 * \brief Get list of all instances in element.
	 * 
	 * Returns list contains ECBehaviorNavigator.Instance instances in the order they have
	 * been created in the element.
	 */
	static public func Array getAllInstancesIn( BehaviorElement element )
		return element.collectInstances( block Instance each
			return true
		end )
	end
	
	
	
	/** \brief Create Behavior instance. */
	public func ECBehaviorInstance createInstance( BehaviorElement element )
		return Instance.new( this, element )
	end
end
