/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

namespace Dragengine.Scenery

pin Dragengine.Gui
pin Dragengine.LoadSave
pin Dragengine.Preloading
pin Dragengine.Utils


/**
 * \brief Behavior element behavior adding parameter table support for actors.
 * 
 * Adds ParameterTable instance.
 * 
 * This behavior supports persistable element class (setPersistable).
 */
class ECBehaviorParameterTable extends DefaultECBehavior
	/** \brief Behavior instance. */
	class Instance extends DefaultECBehaviorInstance
		var ECBehaviorParameterTable pECBehavior
		var ParameterTable pParameterTable
		
		
		
		/** \brief Create instance. */
		func new(ECBehaviorParameterTable ecbehavior, BehaviorElement element) super(element)
			pECBehavior = ecbehavior
		end
		
		/** \brief Dispose of instance. */
		func void dispose()
			pParameterTable = null
			super.dispose()
		end
		
		
		
		/** \brief Initialize element from stub. */
		func void init(StubElement stub)
			pParameterTable = ParameterTable.new()
		end
		
		
		
		/** \brief Behavior. */
		func ECBehaviorParameterTable getECBehavior()
			return pECBehavior
		end
		
		/** \brief Parameter table. */
		func ParameterTable getParameterTable()
			return pParameterTable
		end
		
		
		
		/** \brief Get boolean parameter value or default value if parameter is not set. */
		func bool getParameterValue(String parameter, bool defaultValue)
			var ParameterTableEntry entry = pParameterTable.getAtOrNull(parameter)
			return entry != null if entry.getValue(defaultValue) else defaultValue
		end
		
		/** \brief Get integer parameter value or default value if parameter is not set. */
		func int getParameterValue(String parameter, int defaultValue)
			var ParameterTableEntry entry = pParameterTable.getAtOrNull(parameter)
			return entry != null if entry.getValue(defaultValue) else defaultValue
		end
		
		/** \brief Get floating point parameter value or default value if parameter is not set. */
		func float getParameterValue(String parameter, float defaultValue)
			var ParameterTableEntry entry = pParameterTable.getAtOrNull(parameter)
			return entry != null if entry.getValue(defaultValue) else defaultValue
		end
		
		/** \brief Get string parameter value or default value if parameter is not set. */
		func String getParameterValue(String parameter, String defaultValue)
			var ParameterTableEntry entry = pParameterTable.getAtOrNull(parameter)
			return entry != null if entry.getValue(defaultValue) else defaultValue
		end
		
		/** \brief Get persistable parameter value or default value if parameter is not set. */
		func Persistable getParameterValue(String parameter, Persistable defaultValue)
			var ParameterTableEntry entry = pParameterTable.getAtOrNull(parameter)
			return entry != null if entry.getValue(defaultValue) else defaultValue
		end
		
		
	
		/** \brief Set boolean parameter value. */
		func void setParameterValue(String parameter, bool value)
			pParameterTable.getAt(parameter).setValue(value)
		end
		
		/** \brief Set integer parameter value. */
		func void setParameterValue(String parameter, int value)
			pParameterTable.getAt(parameter).setValue(value)
		end
		
		/** \brief Set floating point parameter value. */
		func void setParameterValue(String parameter, float value)
			pParameterTable.getAt(parameter).setValue(value)
		end
		
		/** \brief Set string parameter value. */
		func void setParameterValue(String parameter, String value)
			pParameterTable.getAt(parameter).setValue(value)
		end
		
		/** \brief Set persistable parameter value. */
		func void setParameterValue(String parameter, Persistable value)
			pParameterTable.getAt(parameter).setValue(value)
		end
		
		
		
		/** \brief Clear parameter value setting it to null if present. */
		func void clearParameterValue(String parameter)
			var ParameterTableEntry entry = pParameterTable.getAtOrNull(parameter)
			if entry != null
				entry.clearValue()
			end
		end
		
		/**
		 * \brief Remove parameter if present.
		 * \version 1.25
		 */
		func void removeParameter(String parameter)
			pParameterTable.removeIfPresent(parameter)
		end
		
		
		
		/** \brief Parameter value is null. */
		func bool isParameterNull(String parameter)
			var ParameterTableEntry entry = pParameterTable.getAtOrNull(parameter)
			return entry == null or entry.isNull()
		end
		
		/** \brief Parameter value is not null. */
		func bool isParameterNotNull(String parameter)
			var ParameterTableEntry entry = pParameterTable.getAtOrNull(parameter)
			return entry != null and entry.isNotNull()
		end
		
		
		
		/** \brief Read element from file. */
		func void readFromFile(PersistencyEnvironment env, FileReader reader)
			select reader.readByte()
			case 0
			case 1
				pParameterTable.readFromFile(env, reader)
				
			else
				throw EInvalidParam.new("unsupported version")
			end
		end
		
		/** \brief Write element to file. */
		func void writeToFile(PersistencyEnvironment env, FileWriter writer)
			writer.writeByte(1)
			pParameterTable.writeToFile(env, writer)
		end
	end
	
	
	
	/** \brief Create behavior element class. */
	func new(BehaviorElementClass eclass) this(eclass, "parameterTable.")
	end
	
	func new(BehaviorElementClass eclass, String prefix) super(eclass)
		if getBehaviorIn(eclass) != null
			throw BEMultipleInstanceException.new(eclass, this)
		end
		
		eclass.addBehavior(this)
	end
	
	
	
	/** \brief Get instance in element from owner element class. */
	func Instance instance(BehaviorElement element)
		return element.getInstanceAt(getInstanceIndex()) cast Instance
	end
	
	
	
	/**
	 * \brief Get behavior in element class or null if absent.
	 * 
	 * Use this method to check if a particular BehaviorElementClass contains a behavior
	 * of type ECBehaviorParameterTable.
	 */
	static func ECBehaviorParameterTable getBehaviorIn(BehaviorElementClass eclass)
		return eclass.findBehavior(block ECBehaviorParameterTable each
			return true
		end) cast ECBehaviorParameterTable
	end
	
	/**
	 * \brief Get instance in element or null if absent.
	 * 
	 * Use this method to check if a particular BehaviorElement contains a behavior instance
	 * of type ECBehaviorParameterTable.Instance .
	 */
	static func Instance getInstanceIn(BehaviorElement element)
		return element.findInstance(block Instance each
			return true
		end) cast Instance
	end
	
	
	
	/** \brief Create Behavior instance. */
	func ECBehaviorInstance createInstance(BehaviorElement element)
		return Instance.new(this, element)
	end
end
