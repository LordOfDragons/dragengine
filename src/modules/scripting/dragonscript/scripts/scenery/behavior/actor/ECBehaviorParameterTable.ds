/* 
 * Drag[en]gine DragonScript Script Module
 *
 * Copyright (C) 2020, Roland Pl√ºss (roland@rptd.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */


namespace Dragengine.Scenery

pin Dragengine.Gui
pin Dragengine.LoadSave
pin Dragengine.Preloading
pin Dragengine.Utils


/**
 * \brief Behavior element behavior adding parameter table support for actors.
 * 
 * Adds ParameterTable instance.
 * 
 * This behavior supports persistable element class (setPersistable).
 */
class ECBehaviorParameterTable extends DefaultECBehavior
	/** \brief Behavior instance. */
	class Instance extends DefaultECBehaviorInstance
		var ECBehaviorParameterTable pECBehavior
		var ParameterTable pParameterTable
		
		
		
		/** \brief Create instance. */
		func new(ECBehaviorParameterTable ecbehavior, BehaviorElement element) super(element)
			pECBehavior = ecbehavior
		end
		
		/** \brief Dispose of instance. */
		func void dispose()
			pParameterTable = null
			super.dispose()
		end
		
		
		
		/** \brief Initialize element from stub. */
		func void init(StubElement stub)
			pParameterTable = ParameterTable.new()
		end
		
		
		
		/** \brief Behavior. */
		func ECBehaviorParameterTable getECBehavior()
			return pECBehavior
		end
		
		/** \brief Parameter table. */
		func ParameterTable getParameterTable()
			return pParameterTable
		end
		
		
		
		/** \brief Get boolean parameter value or default value if parameter is not set. */
		func bool getParameterValue(String parameter, bool defaultValue)
			return pParameterTable.getAt(parameter).getValue(defaultValue)
		end
		
		/** \brief Get integer parameter value or default value if parameter is not set. */
		func int getParameterValue(String parameter, int defaultValue)
			return pParameterTable.getAt(parameter).getValue(defaultValue)
		end
		
		/** \brief Get floating point parameter value or default value if parameter is not set. */
		func float getParameterValue(String parameter, float defaultValue)
			return pParameterTable.getAt(parameter).getValue(defaultValue)
		end
		
		/** \brief Get string parameter value or default value if parameter is not set. */
		func String getParameterValue(String parameter, String defaultValue)
			return pParameterTable.getAt(parameter).getValue(defaultValue)
		end
		
		/** \brief Get persistable parameter value or default value if parameter is not set. */
		func Persistable getParameterValue(String parameter, Persistable defaultValue)
			return pParameterTable.getAt(parameter).getValue(defaultValue)
		end
		
		
	
		/** \brief Set boolean parameter value. */
		func void setParameterValue(String parameter, bool value)
			pParameterTable.getAt(parameter).setValue(value)
		end
		
		/** \brief Set integer parameter value. */
		func void setParameterValue(String parameter, int value)
			pParameterTable.getAt(parameter).setValue(value)
		end
		
		/** \brief Set floating point parameter value. */
		func void setParameterValue(String parameter, float value)
			pParameterTable.getAt(parameter).setValue(value)
		end
		
		/** \brief Set string parameter value. */
		func void setParameterValue(String parameter, String value)
			pParameterTable.getAt(parameter).setValue(value)
		end
		
		/** \brief Set persistable parameter value. */
		func void setParameterValue(String parameter, Persistable value)
			pParameterTable.getAt(parameter).setValue(value)
		end
		
		
		
		/** \brief Clear parameter value setting it to \em null. */
		func void clearParameterValue(String parameter)
			pParameterTable.getAt(parameter).clearValue()
		end
		
		
		
		/** \brief Parameter value is \em null. */
		func bool isParameterNull(String parameter)
			return pParameterTable.getAt(parameter).isNull()
		end
		
		/** \brief Parameter value is not \em null. */
		func bool isParameterNotNull(String parameter)
			return pParameterTable.getAt(parameter).isNotNull()
		end
		
		
		
		/** \brief Read element from file. */
		func void readFromFile(PersistencyEnvironment env, FileReader reader)
			select reader.readByte()
			case 0
			case 1
				pParameterTable.readFromFile(env, reader)
				
			else
				throw EInvalidParam.new("unsupported version")
			end
		end
		
		/** \brief Write element to file. */
		func void writeToFile(PersistencyEnvironment env, FileWriter writer)
			writer.writeByte(1)
			pParameterTable.writeToFile(env, writer)
		end
	end
	
	
	
	/** \brief Create behavior element class. */
	func new(BehaviorElementClass eclass) this(eclass, "parameterTable.")
	end
	
	func new(BehaviorElementClass eclass, String prefix) super(eclass)
		if getBehaviorIn(eclass) != null
			throw BEMultipleInstanceException.new(eclass, this)
		end
		
		eclass.addBehavior(this)
	end
	
	
	
	/** \brief Get instance in element from owner element class. */
	func Instance instance(BehaviorElement element)
		return element.getInstanceAt(getInstanceIndex()) cast Instance
	end
	
	
	
	/**
	 * \brief Get behavior in element class or \em null if absent.
	 * 
	 * Use this method to check if a particular BehaviorElementClass contains a behavior
	 * of type ECBehaviorParameterTable.
	 */
	static func ECBehaviorParameterTable getBehaviorIn(BehaviorElementClass eclass)
		return eclass.findBehavior(block ECBehaviorParameterTable each
			return true
		end) cast ECBehaviorParameterTable
	end
	
	/**
	 * \brief Get instance in element or \em null if absent.
	 * 
	 * Use this method to check if a particular BehaviorElement contains a behavior instance
	 * of type ECBehaviorParameterTable.Instance .
	 */
	static func Instance getInstanceIn(BehaviorElement element)
		return element.findInstance(block Instance each
			return true
		end) cast Instance
	end
	
	
	
	/** \brief Create Behavior instance. */
	func ECBehaviorInstance createInstance(BehaviorElement element)
		return Instance.new(this, element)
	end
end
