/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

namespace Dragengine.Scenery

pin Dragengine.Gui
pin Dragengine.LoadSave
pin Dragengine.Preloading
pin Dragengine.Utils
pin Dragengine.BehaviorTreeSystem


/**
 * \brief Behavior element behavior adding parameter table support for actors.
 * 
 * Adds \ref ParameterTable instance.
 * 
 * This behavior supports persistable element class (setPersistable).
 * 
 * \see https://developer.dragondreams.ch/wiki/doku.php/dragengine:modules:dragonscript:behavior_parametertable
 */
class ECBehaviorParameterTable extends DefaultECBehavior
	/**
	 * \brief Behavior factory.
	 * \version 1.25
	 * 
	 * Example XML element class:
	 * \code{.xml}
	 * <behavior type='ECBehaviorParameterTable'>
	 *   <!-- optional: use behavior tree with id instead of empty string -->
	 *   <string name='behaviorTree'>second</string>
	 * </behavior>
	 * \endcode
	 * 
	 * Element class properties added by the behavior can also be set directly inside the tag
	 * be removing the property name prefix and starting with a "." (for example ".propertyName").
	 */
	class Factory implements BehaviorFactory
		func new()
		end
		
		func String factoryId()
			return "ECBehaviorParameterTable"
		end
		
		func ECBehavior addBehavior(BehaviorElementClass eclass, String id, Dictionary parameters)
			if not id.empty()
				throw EInvalidParam.new("id is not empty string")
			end
			var ECBehaviorParameterTable behavior = ECBehaviorParameterTable.new(eclass)
			
			behavior.setBehaviorTree(eclass.sharedFactoryHelper.optionalBehaviorTree(eclass, parameters))
			
			eclass.sharedFactoryHelper.setPropertiesFromParameters(eclass, parameters, "parameterTable")
			return behavior
		end
	end
	
	/** \brief Behavior instance. */
	class Instance extends DefaultECBehaviorInstance
		/**
		 * \brief Behavior tree action "parameterTable.set".
		 * \version 1.26
		 */
		class BTASet implements BTAction
			var Instance pInstance
			
			func new(Instance instance)
				pInstance = instance
			end
			
			func BTResult runAction(BTContext context, Dictionary parameters)
				var String name = parameters.getAt("name") cast String
				var Object value
				
				value = parameters.getAt("value", null)
				if value != null
					pInstance.setParameterValue(name, (value cast String).toInt())
				end
				
				value = parameters.getAt("value.increment", null)
				if value != null
					pInstance.setParameterValue(name, pInstance.getParameterValue(name, 0)\
						+ (value cast String).toInt())
				end
				
				value = parameters.getAt("value.decrement", null)
				if value != null
					pInstance.setParameterValue(name, pInstance.getParameterValue(name, 0)\
						- (value cast String).toInt())
				end
				
				return BTResult.success
			end
		end
		
		/**
		 * \brief Behavior tree action/condition "parameterTable.check".
		 * \version 1.26
		 */
		class BTACheck implements BTAction, BTCondition
			var Instance pInstance
			var String pPrefix
			
			func new(Instance instance, String prefix)
				pInstance = instance
				pPrefix = prefix
			end
			
			func BTResult runAction(BTContext context, Dictionary parameters)
				return check("", parameters) if BTResult.success else BTResult.failure
			end
			
			func bool evaluateCondition(BTContext context, Dictionary parameters)
				return check(pPrefix, parameters)
			end
			
			func bool check(String prefix, Dictionary parameters)
				var String name = parameters.getAt("name") cast String
				var int pval = pInstance.getParameterValue(name, 0)
				var bool result = true
				var Object value
				
				value = parameters.getAt(prefix + "value", null)
				if value != null
					result &= pval == (value cast String).toInt()
				end
				
				value = parameters.getAt(prefix + "value.not", null)
				if value != null
					result &= pval != (value cast String).toInt()
				end
				
				value = parameters.getAt(prefix + "value.less", null)
				if value != null
					result &= pval < (value cast String).toInt()
				end
				
				value = parameters.getAt(prefix + "value.greater", null)
				if value != null
					result &= pval > (value cast String).toInt()
				end
				
				return result
			end
		end
		
		
		var ECBehaviorParameterTable pECBehavior
		var ParameterTable pParameterTable
		
		
		/** \brief Create instance. */
		func new(ECBehaviorParameterTable ecbehavior, BehaviorElement element) super(element)
			pECBehavior = ecbehavior
		end
		
		/** \brief Dispose of instance. */
		func void dispose()
			pParameterTable = null
			super.dispose()
		end
		
		
		/** \brief Initialize element from stub. */
		func void init(StubElement stub)
			pParameterTable = ParameterTable.new()
			
			if pECBehavior.getBehaviorTree() != null
				var String pnp = pECBehavior.getPrefix()
				var BTContext c = pECBehavior.getBehaviorTree().instance(getElement()).getContext()
				c.setAction(pnp + "set", BTASet.new(this))
				
				var String name = pnp + "check"
				var BTACheck btacheck = BTACheck.new(this, pnp)
				c.setAction(name, btacheck)
				c.setCondition(name, btacheck)
			end
		end
		
		
		/** \brief Behavior. */
		func ECBehaviorParameterTable getECBehavior()
			return pECBehavior
		end
		
		/** \brief Parameter table. */
		func ParameterTable getParameterTable()
			return pParameterTable
		end
		
		
		/** \brief Get boolean parameter value or default value if parameter is not set. */
		func bool getParameterValue(String parameter, bool defaultValue)
			var ParameterTableEntry entry = pParameterTable.getAtOrNull(parameter)
			return entry != null if entry.getValue(defaultValue) else defaultValue
		end
		
		/** \brief Get integer parameter value or default value if parameter is not set. */
		func int getParameterValue(String parameter, int defaultValue)
			var ParameterTableEntry entry = pParameterTable.getAtOrNull(parameter)
			return entry != null if entry.getValue(defaultValue) else defaultValue
		end
		
		/** \brief Get floating point parameter value or default value if parameter is not set. */
		func float getParameterValue(String parameter, float defaultValue)
			var ParameterTableEntry entry = pParameterTable.getAtOrNull(parameter)
			return entry != null if entry.getValue(defaultValue) else defaultValue
		end
		
		/** \brief Get string parameter value or default value if parameter is not set. */
		func String getParameterValue(String parameter, String defaultValue)
			var ParameterTableEntry entry = pParameterTable.getAtOrNull(parameter)
			return entry != null if entry.getValue(defaultValue) else defaultValue
		end
		
		/** \brief Get persistable parameter value or default value if parameter is not set. */
		func Persistable getParameterValue(String parameter, Persistable defaultValue)
			var ParameterTableEntry entry = pParameterTable.getAtOrNull(parameter)
			return entry != null if entry.getValue(defaultValue) else defaultValue
		end
		
	
		/** \brief Set boolean parameter value. */
		func void setParameterValue(String parameter, bool value)
			pParameterTable.getAt(parameter).setValue(value)
		end
		
		/** \brief Set integer parameter value. */
		func void setParameterValue(String parameter, int value)
			pParameterTable.getAt(parameter).setValue(value)
		end
		
		/** \brief Set floating point parameter value. */
		func void setParameterValue(String parameter, float value)
			pParameterTable.getAt(parameter).setValue(value)
		end
		
		/** \brief Set string parameter value. */
		func void setParameterValue(String parameter, String value)
			pParameterTable.getAt(parameter).setValue(value)
		end
		
		/** \brief Set persistable parameter value. */
		func void setParameterValue(String parameter, Persistable value)
			pParameterTable.getAt(parameter).setValue(value)
		end
		
		
		/** \brief Clear parameter value setting it to null if present. */
		func void clearParameterValue(String parameter)
			var ParameterTableEntry entry = pParameterTable.getAtOrNull(parameter)
			if entry != null
				entry.clearValue()
			end
		end
		
		/**
		 * \brief Remove parameter if present.
		 * \version 1.25
		 */
		func void removeParameter(String parameter)
			pParameterTable.removeIfPresent(parameter)
		end
		
		
		/** \brief Parameter value is null. */
		func bool isParameterNull(String parameter)
			var ParameterTableEntry entry = pParameterTable.getAtOrNull(parameter)
			return entry == null or entry.isNull()
		end
		
		/** \brief Parameter value is not null. */
		func bool isParameterNotNull(String parameter)
			var ParameterTableEntry entry = pParameterTable.getAtOrNull(parameter)
			return entry != null and entry.isNotNull()
		end
		
		
		/** \brief Read element from file. */
		func void readFromFile(PersistencyEnvironment env, FileReader reader)
			select reader.readByte()
			case 0
			case 1
				pParameterTable.readFromFile(env, reader)
				
			else
				throw EInvalidParam.new("unsupported version")
			end
		end
		
		/** \brief Write element to file. */
		func void writeToFile(PersistencyEnvironment env, FileWriter writer)
			writer.writeByte(1)
			pParameterTable.writeToFile(env, writer)
		end
	end
	
	
	var ECBehaviorBehaviorTree pBehaviorTree
	var String pPrefix
	
	
	/** \brief Create behavior element class. */
	func new(BehaviorElementClass eclass) this(eclass, "parameterTable.")
	end
	
	func new(BehaviorElementClass eclass, String prefix) super(eclass)
		if getBehaviorIn(eclass) != null
			throw BEMultipleInstanceException.new(eclass, this)
		end
		
		pPrefix = prefix
		
		eclass.addBehavior(this)
	end
	
	func void dispose()
		pBehaviorTree = null
		super.dispose()
	end
	
	
	/**
	 * \brief Prefix.
	 * \version 1.26
	 */
	func String getPrefix()
		return pPrefix
	end
	
	/**
	 * \brief Behavior tree or null.
	 * \version 1.26
	 */
	func ECBehaviorBehaviorTree getBehaviorTree()
		return pBehaviorTree
	end
	
	/**
	 * \brief Set behavior tree or null.
	 * \version 1.26
	 */
	func void setBehaviorTree(ECBehaviorBehaviorTree behaviorTree)
		pBehaviorTree = behaviorTree
	end
	
	
	/** \brief Get instance in element from owner element class. */
	func Instance instance(BehaviorElement element)
		return element.getInstanceAt(getInstanceIndex()) cast Instance
	end
	
	
	/**
	 * \brief Get behavior in element class or null if absent.
	 * 
	 * Use this method to check if a particular BehaviorElementClass contains a behavior
	 * of type ECBehaviorParameterTable.
	 */
	static func ECBehaviorParameterTable getBehaviorIn(BehaviorElementClass eclass)
		return eclass.findBehavior(block ECBehaviorParameterTable each
			return true
		end) cast ECBehaviorParameterTable
	end
	
	/**
	 * \brief Get instance in element or null if absent.
	 * 
	 * Use this method to check if a particular BehaviorElement contains a behavior instance
	 * of type ECBehaviorParameterTable.Instance .
	 */
	static func Instance getInstanceIn(BehaviorElement element)
		return element.findInstance(block Instance each
			return true
		end) cast Instance
	end
	
	
	/** \brief Create Behavior instance. */
	func ECBehaviorInstance createInstance(BehaviorElement element)
		return Instance.new(this, element)
	end
end
