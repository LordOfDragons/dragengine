/* 
 * Drag[en]gine DragonScript Script Module
 *
 * Copyright (C) 2020, Roland Pl√ºss (roland@rptd.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */


namespace Dragengine.Scenery

pin Dragengine.Gui
pin Dragengine.LoadSave
pin Dragengine.Preloading
pin Dragengine.Utils


/**
 * \brief Behavior element behavior adding parameter table support for actors.
 * 
 * Adds ParameterTable instance.
 * 
 * This behavior supports persistable element class (setPersistable).
 */
class ECBehaviorParameterTable extends DefaultECBehavior
	/** \brief Behavior instance. */
	class Instance extends DefaultECBehaviorInstance
		private var ECBehaviorParameterTable pECBehavior
		private var ParameterTable pParameterTable
		
		
		
		/** \brief Create instance. */
		public func new( ECBehaviorParameterTable ecbehavior, BehaviorElement element ) super( element )
			this.pECBehavior = ecbehavior
		end
		
		/** \brief Dispose of instance. */
		public func void dispose()
			this.pParameterTable = null
			super.dispose()
		end
		
		
		
		/** \brief Initialize element from stub. */
		public func void init( StubElement stub )
			this.pParameterTable = ParameterTable.new()
		end
		
		
		
		/** \brief Behavior. */
		public func ECBehaviorParameterTable getECBehavior()
			return this.pECBehavior
		end
		
		/** \brief Parameter table. */
		public func ParameterTable getParameterTable()
			return this.pParameterTable
		end
		
		
		
		/** \brief Get boolean parameter value or default value if parameter is not set. */
		public func bool getParameterValue( String parameter, bool defaultValue )
			return this.pParameterTable.getAt( parameter ).getValue( defaultValue )
		end
		
		/** \brief Get integer parameter value or default value if parameter is not set. */
		public func int getParameterValue( String parameter, int defaultValue )
			return this.pParameterTable.getAt( parameter ).getValue( defaultValue )
		end
		
		/** \brief Get floating point parameter value or default value if parameter is not set. */
		public func float getParameterValue( String parameter, float defaultValue )
			return this.pParameterTable.getAt( parameter ).getValue( defaultValue )
		end
		
		/** \brief Get string parameter value or default value if parameter is not set. */
		public func String getParameterValue( String parameter, String defaultValue )
			return this.pParameterTable.getAt( parameter ).getValue( defaultValue )
		end
		
		/** \brief Get persistable parameter value or default value if parameter is not set. */
		public func Persistable getParameterValue( String parameter, Persistable defaultValue )
			return this.pParameterTable.getAt( parameter ).getValue( defaultValue )
		end
		
		
	
		/** \brief Set boolean parameter value. */
		public func void setParameterValue( String parameter, bool value )
			this.pParameterTable.getAt( parameter ).setValue( value )
		end
		
		/** \brief Set integer parameter value. */
		public func void setParameterValue( String parameter, int value )
			this.pParameterTable.getAt( parameter ).setValue( value )
		end
		
		/** \brief Set floating point parameter value. */
		public func void setParameterValue( String parameter, float value )
			this.pParameterTable.getAt( parameter ).setValue( value )
		end
		
		/** \brief Set string parameter value. */
		public func void setParameterValue( String parameter, String value )
			this.pParameterTable.getAt( parameter ).setValue( value )
		end
		
		/** \brief Set persistable parameter value. */
		public func void setParameterValue( String parameter, Persistable value )
			this.pParameterTable.getAt( parameter ).setValue( value )
		end
		
		
		
		/** \brief Clear parameter value setting it to \em null. */
		public func void clearParameterValue( String parameter )
			this.pParameterTable.getAt( parameter ).clearValue()
		end
		
		
		
		/** \brief Parameter value is \em null. */
		public func bool isParameterNull( String parameter )
			return this.pParameterTable.getAt( parameter ).isNull()
		end
		
		/** \brief Parameter value is not \em null. */
		public func bool isParameterNotNull( String parameter )
			return this.pParameterTable.getAt( parameter ).isNotNull()
		end
	end
	
	
	
	/** \brief Create behavior element class. */
	public func new( BehaviorElementClass eclass ) this( eclass, "parameterTable." )
	end
	
	public func new( BehaviorElementClass eclass, String prefix ) super( eclass )
		if this.getBehaviorIn( eclass ) != null
			throw BEMultipleInstanceException.new( eclass, this )
		end
		
		eclass.addBehavior( this )
	end
	
	
	
	/** \brief Get instance in element from owner element class. */
	public func Instance instance( BehaviorElement element )
		return element.getInstanceAt( this.getInstanceIndex() ) cast Instance
	end
	
	
	
	/**
	 * \brief Get behavior in element class or \em null if absent.
	 * 
	 * Use this method to check if a particular BehaviorElementClass contains a behavior
	 * of type ECBehaviorParameterTable.
	 */
	static public func ECBehaviorParameterTable getBehaviorIn( BehaviorElementClass eclass )
		return eclass.findBehavior( block ECBehaviorParameterTable each
			return true
		end ) cast ECBehaviorParameterTable
	end
	
	/**
	 * \brief Get instance in element or \em null if absent.
	 * 
	 * Use this method to check if a particular BehaviorElement contains a behavior instance
	 * of type ECBehaviorParameterTable.Instance .
	 */
	static public func Instance getInstanceIn( BehaviorElement element )
		return element.findInstance( block Instance each
			return true
		end ) cast Instance
	end
	
	
	
	/** \brief Create Behavior instance. */
	public func ECBehaviorInstance createInstance( BehaviorElement element )
		return Instance.new( this, element )
	end
end
