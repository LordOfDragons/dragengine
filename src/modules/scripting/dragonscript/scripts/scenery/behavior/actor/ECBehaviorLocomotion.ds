/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */


namespace Dragengine.Scenery

pin Dragengine.Gui
pin Dragengine.LoadSave
pin Dragengine.Preloading
pin Dragengine.Utils


/**
 * \brief Behavior element behavior adding locomotion support for actors.
 * 
 * Adds Locomotion. Actors use Locomotion to move their AI colliders across the game world.
 * Locomotion also provides values for AnimatorController to provide animation to actors
 * matching their movement.
 * 
 * Uses collider of ECBehaviorColliderAI or ECBehaviorCollider depending which one is present.
 * If both are present ECBehaviorColliderAI is preferred.
 * 
 * By default creates instance of Locomotion. This class provides all the basic behavior to do
 * locomotion for different type of actors. Supports organic locomotion of 2-legged and 4-legged
 * characters with natural and FPS type movement patterns as well as mechanical locomotion
 * like vehicles.
 * 
 * Locomotion parameters have to be set on runtime. The behavior itself does not support
 * initializing locomotion parameters. This is the case since locomotion parameters change a
 * lot depending on what game situation an actor is located in. Use \ref ECBehaviorActorAIAction,
 * \ref ECBehaviorStateMachine or \ref ECBehaviorBehaviorTree for this task.
 * 
 * This behavior supports persistable element class (setPersistable).
 * 
 * \see https://developer.dragondreams.ch/wiki/doku.php/dragengine:modules:dragonscript:behavior_locomotion
 */
class ECBehaviorLocomotion extends DefaultECBehavior
	/**
	 * \brief Behavior factory.
	 * \version 1.25
	 * 
	 * Automatically assigns these behaviors if present before adding:
	 * - Requuired: \ref ECBehaviorColliderAI or \ref ECBehaviorCollider
	 * 
	 * Example XML element class:
	 * \code{.xml}
	 * <behavior type='ECBehaviorLocomotion'/>
	 * \endcode
	 * 
	 * Element class properties added by the behavior can also be set directly inside the tag
	 * be removing the property name prefix and starting with a "." (for example ".propertyName").
	 */
	class Factory implements BehaviorFactory
		func new()
		end
		
		func String factoryId()
			return "ECBehaviorLocomotion"
		end
		
		func ECBehavior addBehavior(BehaviorElementClass eclass, String id, Dictionary parameters)
			if not id.empty()
				throw EInvalidParam.new("id is not empty string")
			end
			var ECBehaviorColliderAI colliderAI = ECBehaviorColliderAI.getBehaviorIn(eclass)
			var ECBehaviorLocomotion behavior
			if colliderAI != null
				behavior = ECBehaviorLocomotion.new(eclass, colliderAI)
				
			else
				behavior = ECBehaviorLocomotion.new(eclass, ECBehaviorCollider.getBehaviorIn(eclass))
			end
			eclass.sharedFactoryHelper.setPropertiesFromParameters(eclass, parameters, "locomotion")
			return behavior
		end
	end
	
	/** \brief Behavior instance. */
	class Instance extends DefaultECBehaviorInstance
		private var ECBehaviorLocomotion pECBehavior
		private var ECBehaviorColliderAI.Instance pColliderAI
		private var ECBehaviorCollider.Instance pCollider
		private var Locomotion pLocomotion
		
		
		
		/** \brief Create instance. */
		public func new(ECBehaviorLocomotion ecbehavior, BehaviorElement element) super(element)
			pECBehavior = ecbehavior
			
			if ecbehavior.getColliderAI() != null
				pColliderAI = ecbehavior.getColliderAI().instance(element)
				
			else
				pCollider = ecbehavior.getCollider().instance(element)
			end
		end
		
		/** \brief Dispose of instance. */
		public func void dispose()
			pColliderAI = null
			pCollider = null
			pLocomotion = null
			super.dispose()
		end
		
		
		
		/**
		 * \brief Initialize element from stub.
		 * 
		 * Calls initHuman() with a speed of 4.
		 */
		public func void init(StubElement stub)
			var Collider collider
			
			if pColliderAI != null
				collider = pColliderAI.getCollider()
				
			else
				collider = pCollider.getCollider()
			end
			
			pLocomotion = createLocomotion(stub)
			if collider != null
				pLocomotion.setAICollider(collider)
			end
			
			initHuman(4)
		end
		
		/**
		 * \brief Create locomotion.
		 * 
		 * Creates instance of Locomotion.
		 */
		protected func Locomotion createLocomotion(StubElement stub)
			return Locomotion.new()
		end
		
		
		
		/** \brief Behavior. */
		public func ECBehaviorLocomotion getECBehavior()
			return pECBehavior
		end
		
		/** \brief ColliderAI behavior instance or null. */
		public func ECBehaviorColliderAI.Instance getColliderAI()
			return pColliderAI
		end
		
		/** \brief Collider behavior instance or null. */
		public func ECBehaviorCollider.Instance getCollider()
			return pCollider
		end
		
		/** \brief Locomotion. */
		public func Locomotion getLocomotion()
			return pLocomotion
		end
		
		
		
		/**
		 * \brief Initialize locomotion with common human actor parameters.
		 * 
		 * Sets these parameters:
		 * - Can turn: yes
		 * - Can turn in-place: yes
		 * - Linear velocity adjust range: Actor element class run speed
		 * - Linear velocity adjust time: 1
		 * - Moving left right adjust time: 0
		 * - Looking limits: -80..80 (up-down) and -90..90 (left-right)
		 * - Looking adjust times: 1
		 * - Orientation adjust time: 1
		 * - Turn adjust look left-right: yes
		 * - Turn in-place limit: -70..70
		 * - Turn in-place adjust time: 1
		 * 
		 * \param speed Average speed of actor used to calculate adjustment speed.
		 *              Using running speed of actor is a good value.
		 */
		public func void initHuman(float averageSpeed)
			pLocomotion.setAdjustRangeLinearVelocity(averageSpeed)
			pLocomotion.setAdjustTimeAnalogMovingHorizontal(0)
			
			pLocomotion.setLimitLookUp(80)
			pLocomotion.setLimitLookDown(-80)
			pLocomotion.setLimitLookLeft(-90)
			pLocomotion.setLimitLookRight(90)
			
			pLocomotion.setCanTurn(true)
			pLocomotion.setCanTurnInPlace(true)
			pLocomotion.setTurnAdjustLookHorizontal(true)
			pLocomotion.setLimitTurnInPlaceLeft(-70)
			pLocomotion.setLimitTurnInPlaceRight(70)
			
			pLocomotion.setAdjustTimeOrientation(1)
			pLocomotion.setAdjustTimeTurnIP(1)
			
			pLocomotion.setAdjustTimeVertical(0.5)
			pLocomotion.setAdjustTimeHorizontal(0.5)
			pLocomotion.setAdjustTimeLinearVelocity(1)
		end
	
		/**
		 * \brief Initialize locomotion with common vehicle parameters.
		 * 
		 * Sets these initial parameters:
		 * - Can turn: yes
		 * - Can turn in-place: no
		 * - Linear velocity adjust range: Actor element class run speed
		 * - Linear velocity adjust time: 0.5
		 * - Moving left right adjust time: 0
		 * - Looking limits: -80..80 (up-down) and -90..90 (left-right)
		 * - Looking adjust times: 0
		 * - Orientation adjust time: 1
		 * - Turn adjust look left-right: no
		 * - Turn in-place limit: -70..70
		 * - Turn in-place adjust time: 1
		 * 
		 * These values are suitable for player controlled actors. For non-player controlled
		 * actors it might be useful to set these additional parameters:
		 * - Looking adjust time: 1
		 * - Linear velocity adjust time: 1
		 * 
		 * \param speed Average speed of actor used to calculate adjustment speed.
		 *              Using running speed of actor is a good value.
		 */
		public func void initVehicle(float averageSpeed)
			pLocomotion.setAdjustRangeLinearVelocity(averageSpeed)
			pLocomotion.setAdjustTimeAnalogMovingHorizontal(0)
			
			pLocomotion.setLimitLookUp(80)
			pLocomotion.setLimitLookDown(-80)
			pLocomotion.setLimitLookLeft(-90)
			pLocomotion.setLimitLookRight(90)
			
			pLocomotion.setCanTurn(true)
			pLocomotion.setCanTurnInPlace(false)
			pLocomotion.setTurnAdjustLookHorizontal(false)
			
			pLocomotion.setAdjustTimeOrientation(1)
			
			pLocomotion.setAdjustTimeVertical(0)
			pLocomotion.setAdjustTimeHorizontal(0)
			pLocomotion.setAdjustTimeLinearVelocity(0.5)
			
			//pLocomotion.setAdjustTimeVertical(1)
			//pLocomotion.setAdjustTimeHorizontal(1)
			//pLocomotion.setAdjustTimeLinearVelocity(1)
		end
		
		/**
		 * \brief Apply looking around changes to locomotion.
		 * 
		 * Typically called for player controlled actors only.
		 */
		public func void applyLookAround(float deltaHorizontal, float deltaVertical)
			pLocomotion.setLookVerticalGoal(pLocomotion.getLookVerticalGoal() + deltaVertical)
			pLocomotion.setLookHorizontalGoal(pLocomotion.getLookHorizontalGoal() + deltaHorizontal)
		end
		
		
		
		/**
		 * \brief Set locomotion orientation in euler angles in world coordinates.
		 */
		public func void setOrientation(float orientation)
			pLocomotion.setOrientation(orientation)
			pLocomotion.setMovingOrientation(orientation)
		end
		
		/** \brief View direction. */
		public func Vector getViewDirection()
			return getViewMatrix().getViewVector()
		end
		
		/** \brief View matrix. */
		public func Matrix getViewMatrix()
			return Matrix.newRotation(pLocomotion.getLookVertical(), \
				pLocomotion.getOrientation() + pLocomotion.getLookHorizontal(), 0)
		end
		
		
		
		/**
		 * \brief Update locomotion.
		 * 
		 * Calls Locomotion.updateLooking() to pull the look-around values towards their goal
		 * values with the set adjustment velocities. Then Locomotion.updateLocomotion() is
		 * called to update all the locomotion parameters for later use.
		 */
		public func void update(float elapsed)
			pLocomotion.updateLooking(elapsed)
			pLocomotion.updateLocomotion(elapsed)
		end
		
		/**
		 * \brief Update animator controllers.
		 * 
		 * Calls Locomotion.updateAnimatorInstance() to update animator controller for which
		 * mappings have been defined.
		 */
		public func void updateAnimator(float elapsed)
			pLocomotion.updateAnimatorInstance(elapsed)
		end
		
		/**
		 * \brief Post-Update locomotion.
		 * 
		 * Called by postThink() if auto-updating is enabled. For actors auto-thinking is set to
		 * false allowing actor to call updatePost() in the appropriate time.
		 * 
		 * Calls Locomotion.updatePostLocomotion() to apply tilting and foot projecting which
		 * can be done only after physics have been calculated.
		 */
		public func void updatePost(float elapsed)
			pLocomotion.updatePostLocomotion(elapsed)
		end
		
		/**
		 * \brief Clear all movement to ensure actor is not unintentially moving.
		 */
		public func void stopMoving()
			pLocomotion.applyStates()
			pLocomotion.cancelMotion()
		end
		
		/**
		 * \brief Reset looking vertically and horizontally to 0.
		 */
		public func void resetLooking()
			pLocomotion.setLookHorizontal(0)
			pLocomotion.setLookVertical(0)
			pLocomotion.cancelInput()
		end
		
		/**
		 * \brief Set locomotion orientation from element up axis.
		 * 
		 * Adjusts locomotion orientation to line up with the actor orientation.
		 * Moving orientation is kept untouched with moving direction adjusted to be correct.
		 */
		public func void setOrientationFromUpAxis()
			pLocomotion.setOrientation(getElement().getOrientation().getEulerAngles().getY())
			pLocomotion.setMovingDirection(pLocomotion.getMovingOrientation() - pLocomotion.getOrientation())
		end
		
		
		
		/**
		 * \brief Position, orientation or size changed.
		 * 
		 * Adjusts locomotion orientation to line up with the actor orientation.
		 * Moving orientation is kept untouched with moving direction adjusted to be correct.
		 */
		public func void geometryChanged()
			setOrientationFromUpAxis()
		end
		
		
		
		/** \brief Read element from file. */
		public func void readFromFile(PersistencyEnvironment env, FileReader reader)
			select reader.readByte() // version
			case 0
				pLocomotion.readFromFile(reader)
				
			else
				throw EInvalidParam.new("unsupported version")
			end
			
			// restore parameters
			pLocomotion.updateAICollider()
			getElement().setOrientation(pLocomotion.getOrientationQuaternion())
		end
		
		/** \brief Write element to file. */
		public func void writeToFile(PersistencyEnvironment env, FileWriter writer)
			writer.writeByte(0) // version
			
			pLocomotion.writeToFile(writer)
		end
	end
	
	
	
	private var ECBehaviorColliderAI pColliderAI
	private var ECBehaviorCollider pCollider
	
	
	
	/** \brief Create behavior element class. */
	public func new(BehaviorElementClass eclass, ECBehaviorColliderAI colliderAI) \
	this(eclass, colliderAI, "locomotion.")
	end
	
	public func new(BehaviorElementClass eclass, ECBehaviorCollider collider) \
	this(eclass, collider, "locomotion.")
	end
	
	public func new(BehaviorElementClass eclass, ECBehaviorColliderAI colliderAI, String prefix) \
	this(eclass, colliderAI, null, prefix)
		if colliderAI == null
			throw ENullPointer.new("colliderAI")
		end
	end
	
	public func new(BehaviorElementClass eclass, ECBehaviorCollider collider, String prefix) \
	this(eclass, null, collider, prefix)
		if collider == null
			throw ENullPointer.new("collider")
		end
	end
	
	private func new(BehaviorElementClass eclass, ECBehaviorColliderAI colliderAI, \
	ECBehaviorCollider collider, String prefix) super(eclass)
		if getBehaviorIn(eclass) != null
			throw BEMultipleInstanceException.new(eclass, this)
		end
		
		pColliderAI = colliderAI
		pCollider = collider
		
		eclass.addBehavior(this)
	end
	
	/** \brief Dispose of behavior. */
	public func void dispose()
		pCollider = null
		pColliderAI = null
		super.dispose()
	end
	
	
	
	/** \brief ColliderAI behavior or null. */
	public func ECBehaviorColliderAI getColliderAI()
		return pColliderAI
	end
	
	/** \brief Collider behavior or null. */
	public func ECBehaviorCollider getCollider()
		return pCollider
	end
	
	
	
	/** \brief Get instance in element from owner element class. */
	public func Instance instance(BehaviorElement element)
		return element.getInstanceAt(getInstanceIndex()) cast Instance
	end
	
	
	
	/**
	 * \brief Get behavior in element class or \em null if absent.
	 * 
	 * Use this method to check if a particular BehaviorElementClass contains a behavior
	 * of type ECBehaviorLocomotion.
	 */
	static public func ECBehaviorLocomotion getBehaviorIn(BehaviorElementClass eclass)
		return eclass.findBehavior(block ECBehaviorLocomotion each
			return true
		end) cast ECBehaviorLocomotion
	end
	
	/**
	 * \brief Get instance in element or \em null if absent.
	 * 
	 * Use this method to check if a particular BehaviorElement contains a behavior instance
	 * of type ECBehaviorLocomotion.Instance .
	 */
	static public func Instance getInstanceIn(BehaviorElement element)
		return element.findInstance(block Instance each
			return true
		end) cast Instance
	end
	
	
	
	/** \brief Create Behavior instance. */
	public func ECBehaviorInstance createInstance(BehaviorElement element)
		return Instance.new(this, element)
	end
end
