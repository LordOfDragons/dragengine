/* 
 * Drag[en]gine DragonScript Script Module
 *
 * Copyright (C) 2020, Roland Pl√ºss (roland@rptd.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */


namespace Dragengine.Scenery

pin Dragengine.Gui
pin Dragengine.LoadSave
pin Dragengine.Preloading
pin Dragengine.Utils


/**
 * \brief Behavior element behavior adding foot steps support to actors.
 * 
 * Uses a list of events to play random foot steps according to an elapsing time value.
 * The elapsed time is updated with the elapsed game time while the actor is walking.
 * If auto-update is true (which is the default) update() is called automatically by
 * the behavior on thining. Otherwise the actor has to call update(float) to advance the
 * elapsed time. Independent of auto-updating the actor has to call reset() when standing
 * still to ensure the events fire at the right time.
 * 
 * Events define for an elapsed time the sound to play. This is using a WeightedRandomList
 * allowing to pick a random sound with support to favor certain sounds. The sound is then
 * played at an offset relative to the behavior element with individual sound parameters.
 * The sound parameters and offset are defined for each individual sound allowing special
 * configurations like a pirate walking with a wooden leg.
 * 
 * It is common for actors to switch between different gaits (walking, running, robbing
 * or sneaking). To make this process simple multiple configurations can be stored.
 * The actor can then switch between configurations. Depending on how the animations are
 * set up for the actor changing configuration has to reset the elapsed time or not.
 * The actor is responsible to call reset() if required after switching configurations.
 * 
 * If you want to support different foot step sounds for different materials you should not
 * use multiple configurations since switching them can reset the event timing. Use instead
 * events with empty sound list and use the behavior listener to be notified when sound has
 * to be played. See other behaviors for adding material foot step support as well as other
 * special effects like triggering particle emitters.
 * 
 * This behavior can be present only one.
 * 
 * This behavior does require the element class to be persistable (setPersistable).
 */
class ECBehaviorFootSteps extends DefaultECBehavior
	/**
	 * \brief Foot step event.
	 * 
	 * Event time is immutable but all other parameters can be changed if required.
	 * Optionally a type can be assigned to identify the event type for use by other
	 * behaviors to know what sound or effects to produce.
	 */
	class Event
		private var float pTime
		private var WeightedRandomList pSounds
		private var float pVolume
		private var float pRange
		private var float pRollOff
		private var DVector pOffset
		private var String pType
		private var Sound pLastRandomSound
		
		
		/** \brief Create foot step event. */
		public func new( float time ) this( time, WeightedRandomList.new() )
		end
		
		public func new( float time, WeightedRandomList sounds ) this( time, sounds, 1, 10 )
		end
		
		public func new( float time, WeightedRandomList sounds, float volume, float range ) \
		this( time, sounds, volume, range, DVector.new( 0, 0.05, 0 ) )
		end
		
		public func new( float time, WeightedRandomList sounds, float volume, float range, float rollOff ) \
		this( time, sounds, volume, range, DVector.new( 0, 0.05, 0 ), rollOff )
		end
		
		public func new( float time, WeightedRandomList sounds, float volume, float range, DVector offset ) \
		this( time, sounds, volume, range, offset, 0.5 )
		end
		
		public func new( float time, WeightedRandomList sounds, float volume, float range, DVector offset, float rollOff )
			if sounds == null or offset == null
				throw EInvalidParam.new()
			end
			
			this.pTime = DEMath.max( time, 0.0 )
			this.pSounds = sounds
			this.pVolume = DEMath.max( volume, 0.0 )
			this.pRange = DEMath.max( range, 0.0 )
			this.pRollOff = DEMath.max( rollOff, 0.0 )
			this.pOffset = offset
			this.pLastRandomSound = null
		end
		
		public func new( float time, String type ) this( time )
			this.pType = type
		end
		
		public func new( float time, WeightedRandomList sounds, String type ) this( time, sounds )
			this.pType = type
		end
		
		public func new( float time, WeightedRandomList sounds, float volume, float range, String type ) \
		this( time, sounds, volume, range )
			this.pType = type
		end
		
		public func new( float time, WeightedRandomList sounds, float volume, float range, \
		DVector offset, String type ) this( time, sounds, volume, range, offset )
			this.pType = type
		end
		
		public func new( float time, WeightedRandomList sounds, float volume, float range, DVector offset, \
		float rollOff, String type ) this( time, sounds, volume, range, offset, rollOff )
			this.pType = type
		end
		
		
		/** \brief Activation time. */
		public func float getTime()
			return this.pTime
		end
		
		/** \brief List of sounds to pick one from to play this event. */
		public func WeightedRandomList getSounds()
			return this.pSounds
		end
		
		/** \brief Set list of sounds to pick one from to play this event. */
		public func void setSounds( WeightedRandomList sounds )
			if sounds == null
				throw EInvalidParam.new()
			end
			this.pSounds = sounds
			this.pLastRandomSound = null
		end
		
		/** \brief Volume to use for created speakers. */
		public func float getVolume()
			return this.pVolume
		end
		
		/**
		 * \brief Set volume to use for created speakers.
		 * 
		 * Volume will be clamped to 0 if negative. Default is 1.
		 */
		public func void setVolume( float volume )
			this.pVolume = DEMath.max( volume, 0.0 )
		end
		
		/** \brief Range to use for created speakers. */
		public func float getRange()
			return this.pRange
		end
		
		/**
		 * \brief Set range to use for created speakers.
		 * 
		 * Range will be clamped to 0 if negative. Default is 10.
		 */
		public func void setRange( float range )
			this.pRange = DEMath.max( range, 0.0 )
		end
		
		/** \brief Roll-off to use for created speakers. */
		public func float getRollOff()
			return this.pRollOff
		end
		
		/**
		 * \brief Set roll-off to use for created speakers.
		 * 
		 * Roll-off will be clamped to 0 if negative. Default is 1.
		 */
		public func void setRollOff( float rollOff )
			this.pRollOff = DEMath.max( rollOff, 0.0 )
		end
		
		/** \brief Offset relative to actor coordinate system to play foot step at. */
		public func DVector getOffset()
			return this.pOffset
		end
		
		/**
		 * \brief Set offset relative to actor coordinate system to play foot step at.
		 * 
		 * Default is 5cm above acter center on ground.
		 */
		public func void setOffset( DVector offset )
			if offset == null
				throw EInvalidParam.new()
			end
			this.pOffset = offset
		end
		
		
		/** \brief Random sound from the list of sounds to play or null if list is empty. */
		public func Sound randomSound()
			var int count = this.pSounds.getCount()
			if count == 0
				return null
			end
			
			var Sound sound
			
			if this.pLastRandomSound == null or count == 1
				sound = this.pSounds.random() cast Sound
				
			else
				var int i
				for i = 0 to 3
					sound = this.pSounds.random() cast Sound
					if sound != this.pLastRandomSound
						break
					end
				end
			end
			
			this.pLastRandomSound = sound
			return sound
		end
		
		/** \brief Optional type string (by default null). */
		public func String getType()
			return this.pType
		end
		
		/** \brief Set optional type string or null if not needed. */
		public func void setType( String type )
			this.pType = type
		end
	end
	
	
	/**
	 * \brief Foot step configuration.
	 * 
	 * Stores interval and events for a type of foot steps.
	 */
	class Configuration
		private var String pID
		private var Array pEvents
		private var float pInterval
		
		
		/** \brief Create foot steps configuration. */
		public func new( String id )
			if id.empty()
				throw EInvalidParam.new()
			end
			
			this.pID = id
			this.pEvents = Array.new()
			this.pInterval = 1
		end
		
		
		/** \brief ID. */
		public func String getID()
			return this.pID
		end
		
		/** \brief Number of events. */
		public func int getEventCount()
			return this.pEvents.getCount()
		end
		
		/** \brief Event at index. */
		public func Event getEventAt( int index )
			return this.pEvents.getAt( index ) cast Event
		end
		
		/** \brief Add event. */
		public func void addEvent( Event event )
			if event == null
				throw EInvalidParam.new()
			end
			
			var int i, count = this.pEvents.getCount()
			var float time = event.getTime()
			for i = 0 to count
				if time < ( this.pEvents.getAt( i ) cast Event ).getTime()
					this.pEvents.insert( i, event )
					return
				end
			end
			
			this.pEvents.add( event )
		end
		
		/** \brief Remove event. */
		public func void removeEvent( Event event )
			this.pEvents.remove( event )
		end
		
		/** \brief Remove all events. */
		public func void removeAllEvents()
			this.pEvents.removeAll()
		end
		
		/** \brief Visit events with block receiving argument Event. */
		public func void forEachEvent( Block ablock )
			this.pEvents.forEach( ablock )
		end
		
		/** \brief Find event with block receiving argument Event returning true if found. */
		public func Event findEvent( Block ablock )
			return this.pEvents.find( ablock ) cast Event
		end
		
		
		/** \brief Interval in seconds before foot steps repeat. */
		public func float getInterval()
			return this.pInterval
		end
		
		/**
		 * \brief Set interval in seconds before foot steps repeat.
		 * 
		 * Clamped to 0.1 if smaller.
		 */
		public func void setInterval( float interval )
			this.pInterval = DEMath.max( interval, 0.1 )
		end
	end
	
	
	/** \brief Listener for behavior instance events. */
	interface Listener
		/** \brief Foot step triggered. */
		func void footStep( Instance instance, Configuration configuration, Event event )
		
		/** \brief Configuration changed. */
		func void configurationChanged( Instance instance, Configuration configuration )
	end
	
	
	/** \brief Default implementation of behavior instance listener. */
	class DefaultListener implements Listener
		/** \brief Create default listener. */
		public func new()
		end
		
		/** \brief Foot step triggered. */
		public func void footStep( Instance instance, Configuration configuration, Event event )
		end
		
		/** \brief Configuration changed. */
		public func void configurationChanged( Instance instance, Configuration configuration )
		end
	end
	
	
	/** \brief Behavior instance. */
	class Instance extends DefaultECBehaviorInstance
		private var ECBehaviorFootSteps pECBehavior
		private var Dictionary pConfigurations
		private var Configuration pActiveConfiguration
		private var LayerMask pLayerMask
		private var float pElapsed
		private var int pNextEvent
		private var bool pAutoUpdate
		private var Array pListeners
		
		
		
		/** \brief Create element. */
		public func new( ECBehaviorFootSteps ecbehavior, BehaviorElement element ) super( element )
			this.pECBehavior = ecbehavior
			this.pConfigurations = Dictionary.new()
			this.pElapsed = 0
			this.pLayerMask = LayerMask.newWith(BaseGameApp.WorldLayerBit.audio)
			this.pListeners = Array.new()
			
			this.setAutoUpdate( ecbehavior.getAutoUpdate() )
		end
		
		/** \brief Dispose of composeable instance. */
		public func void dispose()
			this.pListeners = null
			super.dispose()
		end
		
		
		
		/** \brief Initialize element from stub. */
		public func void init( StubElement stub )
		end
		
		
		
		/** \brief Behavior. */
		public func ECBehaviorFootSteps getECBehavior()
			return this.pECBehavior
		end
		
		
		
		/** \brief Call update() automatically on postThink(). */
		public func bool getAutoUpdate()
			return this.pAutoUpdate
		end
		
		/** \brief Set if update() is automatically called on postThink(). */
		public func void setAutoUpdate( bool autoUpdate )
			if autoUpdate == this.pAutoUpdate
				return
			end
			this.pAutoUpdate = autoUpdate
			this.setRequiresThink( autoUpdate )
		end
		
		/** \brief Layer mask to use for created speakers. */
		public func LayerMask getLayerMask()
			return this.pLayerMask
		end
		
		/** \brief Set layer mask to use for created speakers. */
		public func void setLayerMask( LayerMask layerMask )
			if layerMask == null
				throw EInvalidParam.new()
			end
			this.pLayerMask = layerMask
		end
		
		
		
		/** \brief Number of configurations. */
		public func int getConfigurationCount()
			return this.pConfigurations.getCount()
		end
		
		/** \brief Configuration with ID or null if not found. */
		public func Configuration getConfigurationAt( String id )
			return this.pConfigurations.getAt( id, null ) cast Configuration
		end
		
		/** \brief Add configuration. */
		public func void addConfiguration( Configuration configuration )
			if this.pConfigurations.has( configuration.getID() )
				throw EInvalidParam.new()
			end
			this.pConfigurations.setAt( configuration.getID(), configuration )
		end
		
		/** \brief Remove configuration. */
		public func void removeConfiguration( Configuration configuration )
			this.pConfigurations.remove( configuration.getID() )
		end
		
		/** \brief Remove all configurations. */
		public func void removeAllConfigurations()
			this.pConfigurations.removeAll()
		end
		
		/** \brief Visit configurations with block receiving argument Configuration. */
		public func void forEachConfiguration( Block ablock )
			this.pConfigurations.forEachValue( ablock )
		end
		
		/** \brief Find configuration with block receiving argument Configuration returning true if found. */
		public func Configuration findConfiguration( Block ablock )
			return this.pConfigurations.find( block String id, Configuration configuration
				return ablock.run( configuration )
			end ) cast Configuration
		end
		
		
		
		/** \brief Active configuration or null if none is active. */
		public func Configuration getActiveConfiguration()
			return this.pActiveConfiguration
		end
		
		/**
		 * \brief Set active configuration by ID or null if not found.
		 * 
		 * If ID is not null calls setActiveConfiguration().
		 * If ID is null calls clearActiveConfiguration().
		 * 
		 * \returns true if configuration changed or false if it is the same.
		 */
		public func bool setActiveConfigurationWithID( String id, bool resetIfChanged )
			if id != null
				return this.setActiveConfiguration( this.getConfigurationAt( id ), resetIfChanged )
				
			else
				return this.clearActiveConfiguration()
			end
		end
		
		/**
		 * \brief Set active configuration or null if none is active.
		 * 
		 * \returns true if configuration changed or false if it is the same.
		 */
		public func bool setActiveConfiguration( Configuration configuration, bool resetIfChanged )
			if configuration == this.pActiveConfiguration
				return false
			end
			
			this.pActiveConfiguration = configuration
			
			if resetIfChanged
				this.reset()
			end
			
			this.pListeners.forEach( block Listener each
				each.configurationChanged( this, configuration )
			end )
			
			return true
		end
		
		/**
		 * \brief Clear active configuration.
		 * 
		 * \returns true if configuration changed or false if it is the same.
		 */
		public func bool clearActiveConfiguration()
			return this.setActiveConfiguration( null, true )
		end
		
		
		
		/** \brief Elapsed time since start of interval. */
		public func float getElapsed()
			return this.pElapsed
		end
		
		/** \brief Set elapsed time since start of interval. */
		public func void setElapsed( float elapsed )
			this.pElapsed = DEMath.max( elapsed, 0.0 )
		end
		
		/** \brief Index of next foot step event. */
		public func int getNextEvent()
			return this.pNextEvent
		end
		
		/**
		* \brief Set index of next foot step event.
		* 
		* Index will be clamped to range from 0 to getEventCount().
		*/
		protected func void setNextEvent( int index )
			if this.pActiveConfiguration != null
				this.pNextEvent = DEMath.clamp( index, 0, this.pActiveConfiguration.getEventCount() )
				
			else
				this.pNextEvent = 0
			end
		end
		
		
		
		/** \brief Reset to start of interval. */
		public func void reset()
			this.pElapsed = 0
			this.pNextEvent = 0
		end
		
		/**
		 * \brief Update foot steps.
		 * 
		 * Advances elapsed playing foot steps if events are trigered. Same as update(float,bool)
		 * called with true as parameter for relative.
		 */
		public func void update( float elapsed )
			this.update( elapsed, true )
		end
		
		/**
		 * \brief Update foot steps.
		 * 
		 * Advances elapsed playing foot steps if events are trigered.
		 * 
		 * \param relative If true increments elapsed time otherwise sets elapsed time.
		 *                 If false and elapsed time is smaller than current elapsed time
		 *                 the time is considered to have elapsed past the interval and
		 *                 wrapped around.
		 */
		public func void update( float elapsed, bool relative )
			if this.pActiveConfiguration == null
				return
			end
			
			var float interval = this.pActiveConfiguration.getInterval()
			var int count = this.pActiveConfiguration.getEventCount()
			var Event event
			
			if relative
				this.pElapsed += elapsed
				
			else
				elapsed = DEMath.normalize( elapsed, 0.0, interval )
				if elapsed < this.pElapsed
					elapsed += interval
				end
				this.pElapsed = elapsed
			end
			
			while true
				while this.pNextEvent < count
					event = this.pActiveConfiguration.getEventAt( this.pNextEvent )
					if event.getTime() > this.pElapsed
						break
					end
					this.pNextEvent++
					
					this.playFootStepSound( event )
					
					this.pListeners.forEach( block Listener each
						each.footStep( this, this.pActiveConfiguration, event )
					end )
				end
				
				if this.pElapsed < interval
					return
				end
				
				this.pElapsed -= interval
				this.pNextEvent = 0
			end
		end
		
		
		
		/**
		 * \brief Play foot step sound.
		 * 
		 * Creates a one-shot speaker and plays it in the actor game world.
		 */
		protected func void playFootStepSound( Event event )
			var BehaviorElement element = this.getElement()
			var GameWorld gameWorld = element.getGameWorld()
			if gameWorld == null
				return
			end
			
			var Sound sound = event.randomSound()
			if sound == null
				return
			end
			
			var Speaker speaker = Speaker.new()
			speaker.setSound( sound )
			speaker.setPosition( element.getElementMatrix() * event.getOffset() )
			speaker.setOrientation( element.getOrientation() )
			speaker.setLooping( false )
			speaker.setVolume( event.getVolume() )
			speaker.setRange( event.getRange() )
			speaker.setRollOff( event.getRollOff() )
			speaker.setLayerMask( this.pLayerMask )
			speaker.setOwner( element )
			
			gameWorld.addOneShotSpeaker( speaker )
		end
		
		
		
		/** \brief Add listener. */
		public func void addListener( Listener listener )
			if listener == null
				throw EInvalidParam.new()
			end
			this.pListeners.add( listener )
		end
		
		/** \brief Remove listener. */
		public func void removeListener( Listener listener )
			this.pListeners.remove( listener )
		end
		
		
		
		/** \brief Post thinking after physics processing is finished. */
		public func void postThink( float elapsed )
			if this.pAutoUpdate
				this.update( elapsed )
			end
		end
		
		
		
		/** \brief Read behavior from file. */
		public func void readFromFile( PersistencyEnvironment env, FileReader reader )
			select reader.readByte() // version
			case 0
				var String id = reader.readString16()
				if not id.empty()
					this.setActiveConfigurationWithID( id, false )
				end
				
				this.pElapsed = reader.readFloat()
				this.pNextEvent = reader.readInt()
				
			else
				throw EInvalidParam.new( "unsupported version" )
			end
		end
		
		/** \brief Write behavior to file. */
		public func void writeToFile( PersistencyEnvironment env, FileWriter writer )
			writer.writeByte( 0 ) // version
			
			writer.writeString16( this.pActiveConfiguration != null if this.pActiveConfiguration.getID() else "" )
			writer.writeFloat( this.pElapsed )
			writer.writeInt( this.pNextEvent )
		end
	end
	
	
	
	private var bool pAutoUpdate
	
	
	
	/** \brief Create behavior element class. */
	public func new( BehaviorElementClass eclass ) this( eclass, "footSteps." )
	end
	
	public func new( BehaviorElementClass eclass, String prefix ) super( eclass )
		if this.getBehaviorIn( eclass ) != null
			throw BEMultipleInstanceException.new( eclass, this )
		end
		
		this.pAutoUpdate = true
		
		eclass.addBehavior( this )
	end
	
	
	
	/** \brief Call update() automatically on postThink(). */
	public func bool getAutoUpdate()
		return this.pAutoUpdate
	end
	
	/** \brief Set if update() is automatically called on postThink(). */
	public func void setAutoUpdate( bool autoUpdate )
		this.pAutoUpdate = autoUpdate
	end
	
	
	
	/** \brief Get instance in element from owner element class. */
	public func Instance instance( BehaviorElement element )
		return element.getInstanceAt( this.getInstanceIndex() ) cast Instance
	end
	
	
	
	/**
	 * \brief Get behavior in element class or \em null if absent.
	 * 
	 * Use this method to check if a particular BehaviorElementClass contains a behavior
	 * of type ECBehaviorFootSteps.
	 */
	static public func ECBehaviorFootSteps getBehaviorIn( BehaviorElementClass eclass )
		return eclass.findBehavior( block ECBehaviorFootSteps each
			return true
		end ) cast ECBehaviorFootSteps
	end
	
	/**
	 * \brief Get instance in element or \em null if absent.
	 * 
	 * Use this method to check if a particular BehaviorElement contains a behavior instance
	 * of type ECBehaviorFootSteps.Instance .
	 */
	static public func Instance getInstanceIn( BehaviorElement element )
		return element.findInstance( block Instance each
			return true
		end ) cast Instance
	end
	
	
	
	/** \brief Create Behavior instance. */
	public func ECBehaviorInstance createInstance( BehaviorElement element )
		return Instance.new( this, element )
	end
end
