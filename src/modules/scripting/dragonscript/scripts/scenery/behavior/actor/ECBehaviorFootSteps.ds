/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */


namespace Dragengine.Scenery

pin Dragengine.Gui
pin Dragengine.LoadSave
pin Dragengine.Preloading
pin Dragengine.Utils
pin Dragengine.BehaviorTreeSystem
pin Dragengine.StateMachineSystem


/**
 * \brief Behavior element behavior adding foot steps support to actors.
 * 
 * Uses a list of events to play random foot steps according to an elapsing time value.
 * The elapsed time is updated with the elapsed game time while the actor is walking.
 * If auto-update is true (which is the default) update() is called automatically by
 * the behavior on thinking. Otherwise the actor has to call update(float) to advance the
 * elapsed time. Independent of auto-updating the actor has to call reset() when standing
 * still to ensure the events fire at the right time.
 * 
 * Events define for an elapsed time the sound to play. This is using a WeightedRandomList
 * allowing to pick a random sound with support to favor certain sounds. The sound is then
 * played at an offset relative to the behavior element with individual sound parameters.
 * The sound parameters and offset are defined for each individual sound allowing special
 * configurations like a pirate walking with a wooden leg.
 * 
 * It is common for actors to switch between different gaits (walking, running, robbing
 * or sneaking). To make this process simple multiple configurations can be stored.
 * The actor can then switch between configurations. Depending on how the animations are
 * set up for the actor changing configuration has to reset the elapsed time or not.
 * The actor is responsible to call reset() if required after switching configurations.
 * 
 * If you want to support different foot step sounds for different materials you should not
 * use multiple configurations since switching them can reset the event timing. Use instead
 * events with empty sound list and use the behavior listener to be notified when sound has
 * to be played. See other behaviors for adding material foot step support as well as other
 * special effects like triggering particle emitters.
 * 
 * This behavior can be present only one.
 * 
 * This behavior does require the element class to be persistable (setPersistable).
 * 
 * \see https://developer.dragondreams.ch/wiki/doku.php/dragengine:modules:dragonscript:behavior_footsteps
 */
class ECBehaviorFootSteps extends DefaultECBehavior
	/**
	 * \brief Foot step event.
	 * 
	 * Event time is immutable but all other parameters can be changed if required.
	 * Optionally a type can be assigned to identify the event type for use by other
	 * behaviors to know what sound or effects to produce.
	 */
	class Event
		var float pTime
		var WeightedRandomList pSounds
		var float pVolume
		var float pRange
		var float pRollOff
		var DVector pOffset
		var String pType
		var Sound pLastRandomSound
		
		
		/** \brief Create foot step event. */
		func new(float time) this(time, WeightedRandomList.new())
		end
		
		func new(float time, WeightedRandomList sounds) this(time, sounds, 1, 10)
		end
		
		func new(float time, WeightedRandomList sounds, float volume, float range) \
		this(time, sounds, volume, range, DVector.new(0, 0.05, 0))
		end
		
		func new(float time, WeightedRandomList sounds, float volume, float range, float rollOff) \
		this(time, sounds, volume, range, DVector.new(0, 0.05, 0), rollOff)
		end
		
		func new(float time, WeightedRandomList sounds, float volume, float range, DVector offset) \
		this(time, sounds, volume, range, offset, 0.5)
		end
		
		func new(float time, WeightedRandomList sounds, float volume, float range, DVector offset, float rollOff)
			if sounds == null or offset == null
				throw EInvalidParam.new()
			end
			
			pTime = DEMath.max(time, 0.0)
			pSounds = sounds
			pVolume = DEMath.max(volume, 0.0)
			pRange = DEMath.max(range, 0.0)
			pRollOff = DEMath.max(rollOff, 0.0)
			pOffset = offset
		end
		
		func new(float time, String type) this(time)
			pType = type
		end
		
		func new(float time, WeightedRandomList sounds, String type) this(time, sounds)
			pType = type
		end
		
		func new(float time, WeightedRandomList sounds, float volume, float range, String type) \
		this(time, sounds, volume, range)
			pType = type
		end
		
		func new(float time, WeightedRandomList sounds, float volume, float range, \
		DVector offset, String type) this(time, sounds, volume, range, offset)
			pType = type
		end
		
		func new(float time, WeightedRandomList sounds, float volume, float range, DVector offset, \
		float rollOff, String type) this(time, sounds, volume, range, offset, rollOff)
			pType = type
		end
		
		/**
		 * \brief Create copy of foot step event.
		 * \version 1.26
		 */
		func new(Event event)
			pTime = event.pTime
			pSounds = event.pSounds
			pVolume = event.pVolume
			pRange = event.pRange
			pRollOff = event.pRollOff
			pOffset = event.pOffset
			pType = event.pType
		end
		
		
		/** \brief Activation time. */
		func float getTime()
			return pTime
		end
		
		/** \brief List of sounds to pick one from to play this event. */
		func WeightedRandomList getSounds()
			return pSounds
		end
		
		/** \brief Set list of sounds to pick one from to play this event. */
		func void setSounds(WeightedRandomList sounds)
			if sounds == null
				throw EInvalidParam.new()
			end
			pSounds = sounds
			pLastRandomSound = null
		end
		
		/** \brief Volume to use for created speakers. */
		func float getVolume()
			return pVolume
		end
		
		/**
		 * \brief Set volume to use for created speakers.
		 * 
		 * Volume will be clamped to 0 if negative. Default is 1.
		 */
		func void setVolume(float volume)
			pVolume = DEMath.max(volume, 0.0)
		end
		
		/** \brief Range to use for created speakers. */
		func float getRange()
			return pRange
		end
		
		/**
		 * \brief Set range to use for created speakers.
		 * 
		 * Range will be clamped to 0 if negative. Default is 10.
		 */
		func void setRange(float range)
			pRange = DEMath.max(range, 0.0)
		end
		
		/** \brief Roll-off to use for created speakers. */
		func float getRollOff()
			return pRollOff
		end
		
		/**
		 * \brief Set roll-off to use for created speakers.
		 * 
		 * Roll-off will be clamped to 0 if negative. Default is 1.
		 */
		func void setRollOff(float rollOff)
			pRollOff = DEMath.max(rollOff, 0.0)
		end
		
		/** \brief Offset relative to actor coordinate system to play foot step at. */
		func DVector getOffset()
			return pOffset
		end
		
		/**
		 * \brief Set offset relative to actor coordinate system to play foot step at.
		 * 
		 * Default is 5cm above acter center on ground.
		 */
		func void setOffset(DVector offset)
			if offset == null
				throw EInvalidParam.new()
			end
			pOffset = offset
		end
		
		
		/** \brief Random sound from the list of sounds to play or null if list is empty. */
		func Sound randomSound()
			var int count = pSounds.getCount()
			if count == 0
				return null
			end
			
			var Sound sound
			
			if pLastRandomSound == null or count == 1
				sound = pSounds.random() cast Sound
				
			else
				var int i
				for i = 0 to 3
					sound = pSounds.random() cast Sound
					if sound != pLastRandomSound
						break
					end
				end
			end
			
			pLastRandomSound = sound
			return sound
		end
		
		/** \brief Optional type string (by default null). */
		func String getType()
			return pType
		end
		
		/** \brief Set optional type string or null if not needed. */
		func void setType(String type)
			pType = type
		end
	end
	
	
	/**
	 * \brief Foot step configuration.
	 * 
	 * Stores interval and events for a type of foot steps.
	 */
	class Configuration
		var String pID
		var Array pEvents
		var float pInterval
		var String pControllerName
		
		
		/** \brief Create foot steps configuration. */
		func new(String id)
			if id.empty()
				throw EInvalidParam.new()
			end
			
			pID = id
			pEvents = Array.new()
			pInterval = 1
		end
		
		/**
		 * \brief Create copy of foot steps configuration.
		 * \version 1.26
		 */
		func new(Configuration config)
			pID = config.pID
			pEvents = config.pEvents.map(block Event each
				return Event.new(each)
			end)
			pInterval = config.pInterval
			pControllerName = config.pControllerName
		end
		
		
		/** \brief ID. */
		func String getID()
			return pID
		end
		
		/** \brief Number of events. */
		func int getEventCount()
			return pEvents.getCount()
		end
		
		/** \brief Event at index. */
		func Event getEventAt(int index)
			return pEvents.getAt(index) cast Event
		end
		
		/** \brief Add event. */
		func void addEvent(Event event)
			if event == null
				throw EInvalidParam.new()
			end
			
			var int i, count = pEvents.getCount()
			var float time = event.getTime()
			for i = 0 to count
				if time < (pEvents.getAt(i) cast Event).getTime()
					pEvents.insert(i, event)
					return
				end
			end
			
			pEvents.add(event)
		end
		
		/** \brief Remove event. */
		func void removeEvent(Event event)
			pEvents.remove(event)
		end
		
		/** \brief Remove all events. */
		func void removeAllEvents()
			pEvents.removeAll()
		end
		
		/** \brief Visit events with block receiving argument Event. */
		func void forEachEvent(Block ablock)
			pEvents.forEach(ablock)
		end
		
		/** \brief Find event with block receiving argument Event returning true if found. */
		func Event findEvent(Block ablock)
			return pEvents.find(ablock) cast Event
		end
		
		
		/** \brief Interval in seconds before foot steps repeat. */
		func float getInterval()
			return pInterval
		end
		
		/**
		 * \brief Set interval in seconds before foot steps repeat.
		 * 
		 * Clamped to 0.1 if smaller.
		 */
		func void setInterval(float interval)
			pInterval = DEMath.max(interval, 0.1)
		end
		
		/**
		 * \brief Name of activate animated controller to use as elapsed time or null.
		 * \version 1.26
		 * 
		 * If name is not null the relative value of the matching named controller from
		 * ECBehaviorActorAnimated is used as elapsed time. Since relative controller value
		 * is used time related values in the configuration and events must be in the range
		 * from 0 to 1. This allows to easily synchronize foot steps to actor animations
		 * no matter the playtime of each individual animation.
		 * 
		 * If the name is null or named controller is absent from ECBehaviorActorAnimated the
		 * elapsed game time is used instead. In this case time related values in the
		 * configuration and events are in seconds.
		 */
		func String getControllerName()
			return pControllerName
		end
		
		/**
		 * \brief Set name of activate animated controller to use as elapsed time or null.
		 * \version 1.26
		 * \see #getControllerName()
		 */
		func void setControllerName(String name)
			pControllerName = name
		end
	end
	
	
	/** \brief Listener for behavior instance events. */
	interface Listener
		/** \brief Foot step triggered. */
		func void footStep(Instance instance, Configuration configuration, Event event)
		
		/** \brief Configuration changed. */
		func void configurationChanged(Instance instance, Configuration configuration)
	end
	
	
	/** \brief Default implementation of behavior instance listener. */
	class DefaultListener implements Listener
		/** \brief Create default listener. */
		func new()
		end
		
		/** \brief Foot step triggered. */
		func void footStep(Instance instance, Configuration configuration, Event event)
		end
		
		/** \brief Configuration changed. */
		func void configurationChanged(Instance instance, Configuration configuration)
		end
	end
	
	
	/**
	 * \brief Behavior factory.
	 * \version 1.25
	 * 
	 * Example XML element class:
	 * \code{.xml}
	 * <behavior type='ECBehaviorFootSteps'>
	 *   <!-- optional: use actor animated with id instead of empty string -->
	 *   <string name='actorAnimated'>second</string>
	 *   
	 *   <!-- optional: add behavior trees. default adds all behavior trees. -->
	 *   <list name='behaviorTrees'>
	 *     <string/> <!-- add behavior with empty identifier -->
	 *     <string>default</string> <!-- add behavior with 'default' identifier -->
	 *   </list>
	 * 
	 *   <!-- optional: add state machines. default adds all state machines. -->
	 *   <list name='stateMachines'>
	 *     <string/> <!-- add behavior with empty identifier -->
	 *     <string>default</string> <!-- add behavior with 'default' identifier -->
	 *   </list>
	 *   
	 *   <!-- set if update() is automatically called on postThink(). default is 'true' -->
	 *   <boolean name='autoUpdate'>false</boolean>
	 * </behavior>
	 * \endcode
	 * 
	 * Element class properties added by the behavior can also be set directly inside the tag
	 * be removing the property name prefix and starting with a "." (for example ".propertyName").
	 */
	class Factory implements BehaviorFactory
		func new()
		end
		
		func String factoryId()
			return "ECBehaviorFootSteps"
		end
		
		func ECBehavior addBehavior(BehaviorElementClass eclass, String id, Dictionary parameters)
			if not id.empty()
				throw EInvalidParam.new("id is not empty string")
			end
			var ECBehaviorFootSteps behavior = ECBehaviorFootSteps.new(eclass)
			
			behavior.setActorAnimated(eclass.sharedFactoryHelper.defaultActorAnimated(eclass, parameters))
			eclass.sharedFactoryHelper.allBTSM(behavior.getBTSMs(), eclass, parameters)
			
			eclass.sharedFactoryHelper.setPropertiesFromParameters(eclass, parameters, "footSteps")
			return behavior
		end
	end
	
	
	/** \brief Behavior instance. */
	class Instance extends DefaultECBehaviorInstance
		/**
		 * \brief Behavior tree action "forceField{(id)}.set".
		 * \version 1.26
		 */
		private class BTASet extends BTSMActionCondition
			var Instance pInstance
			
			func new(Instance instance)
				pInstance = instance
			end
			
			func BTResult runActionShared(Object context, Dictionary parameters)
				var Object value
				
				value = parameters.getAt("configuration", null)
				if value != null
					if (value cast String).empty()
						pInstance.clearActiveConfiguration()
						
					else
						pInstance.setActiveConfigurationWithID(value cast String, false)
					end
				end
				
				value = parameters.getAt("elapsed", null)
				if value != null
					pInstance.setElapsed((value cast String).toFloat())
				end
				
				return BTResult.success
			end
		end
		
		/**
		 * \brief Behavior tree action/condition "forceField{(id)}.check".
		 * \version 1.26
		 */
		private class BTACheck extends BTSMActionCondition
			var Instance pInstance
			var String pPrefix
			
			func new(Instance instance, String prefix)
				pInstance = instance
				pPrefix = prefix
			end
			
			func BTResult runActionShared(Object context, Dictionary parameters)
				return check("", parameters) if BTResult.success\
					else (parameters.has("wait") if BTResult.running else BTResult.failure)
			end
			
			func bool evaluateConditionShared(Object context, Dictionary parameters)
				return check(pPrefix, parameters)
			end
			
			func bool check(String prefix, Dictionary parameters)
				var String config = pInstance.getActiveConfiguration() != null\
					if pInstance.getActiveConfiguration().getID() else ""
				var bool result = true
				var Object value
				
				value = parameters.getAt(prefix + "configuration", null)
				if value != null
					result &= config.equals(value)
				end
				
				value = parameters.getAt(prefix + "configuration.not", null)
				if value != null
					result &= not config.equals(value)
				end
				
				value = parameters.getAt(prefix + "configuration.starts", null)
				if value != null
					result &= config.startsWith(value cast String)
				end
				
				value = parameters.getAt(prefix + "configuration.starts.not", null)
				if value != null
					result &= not config.startsWith(value cast String)
				end
				
				value = parameters.getAt(prefix + "configuration.ends", null)
				if value != null
					result &= config.endsWith(value cast String)
				end
				
				value = parameters.getAt(prefix + "configuration.ends.not", null)
				if value != null
					result &= not config.endsWith(value cast String)
				end
				
				value = parameters.getAt(prefix + "configuration.contains", null)
				if value != null
					result &= config.findString(value cast String) != -1
				end
				
				value = parameters.getAt(prefix + "configuration.contains.not", null)
				if value != null
					result &= config.findString(value cast String) == -1
				end
				
				value = parameters.getAt(prefix + "elapsed.less", null)
				if value != null
					result &= pInstance.getElapsed() < (value cast String).toFloat()
				end
				
				value = parameters.getAt(prefix + "elapsed.greater", null)
				if value != null
					result &= pInstance.getElapsed() > (value cast String).toFloat()
				end
				
				return result
			end
		end
		
		private class AnimatorChangedFindController extends ECBehaviorActorAnimated.DefaultListener
			var Instance pInstance
			
			func new(Instance instance)
				pInstance = instance
			end
			
			func void animatorChanged(ECBehaviorActorAnimated.Instance instance)
				pInstance.findAndStoreControllers()
			end
		end
		
		
		var ECBehaviorFootSteps pECBehavior
		var ECBehaviorActorAnimated.Instance pActorAnimated
		var Dictionary pConfigurations
		var Configuration pActiveConfiguration
		var LayerMask pLayerMask
		var float pElapsed
		var int pNextEvent
		var bool pAutoUpdate
		var Array pListeners
		var ECComposeBTSM.Instance pBTSMs
		var AnimatorController pControllerElapsed
		
		
		
		/** \brief Create element. */
		func new(ECBehaviorFootSteps ecbehavior, BehaviorElement element) super(element)
			pECBehavior = ecbehavior
			pConfigurations = Dictionary.new()
			pElapsed = 0
			pLayerMask = LayerMask.newWith(BaseGameApp.WorldLayerBit.audio)
			pListeners = Array.new()
			
			setAutoUpdate(ecbehavior.getAutoUpdate())
		end
		
		/** \brief Dispose of composeable instance. */
		func void dispose()
			pListeners = null
			pBTSMs = null
			pActorAnimated = null
			super.dispose()
		end
		
		
		
		/** \brief Initialize element from stub. */
		func void init(StubElement stub)
			var BehaviorElement element = getElement()
			
			if pECBehavior.getActorAnimated() != null
				pActorAnimated = pECBehavior.getActorAnimated().instance(element)
			end
			
			if pECBehavior.getBTSMs().hasAny()
				var String prefix = pECBehavior.getPrefix()
				pBTSMs = ECComposeBTSM.Instance.new(element, pECBehavior.getBTSMs())
				pBTSMs.addAllAction(prefix, "set", BTASet.new(this))
				pBTSMs.addAllActionCondition(prefix, "check", BTACheck.new(this, prefix))
				pBTSMs.dropBTContexts()
			end
		end
		
		
		
		/** \brief Behavior. */
		func ECBehaviorFootSteps getECBehavior()
			return pECBehavior
		end
		
		
		
		/** \brief Call update() automatically on postThink(). */
		func bool getAutoUpdate()
			return pAutoUpdate
		end
		
		/** \brief Set if update() is automatically called on postThink(). */
		func void setAutoUpdate(bool autoUpdate)
			if autoUpdate == pAutoUpdate
				return
			end
			pAutoUpdate = autoUpdate
			setRequiresThink(autoUpdate)
		end
		
		/** \brief Layer mask to use for created speakers. */
		func LayerMask getLayerMask()
			return pLayerMask
		end
		
		/** \brief Set layer mask to use for created speakers. */
		func void setLayerMask(LayerMask layerMask)
			if layerMask == null
				throw EInvalidParam.new()
			end
			pLayerMask = layerMask
		end
		
		
		
		/** \brief Number of configurations. */
		func int getConfigurationCount()
			return pConfigurations.getCount()
		end
		
		/** \brief Configuration with ID or null if not found. */
		func Configuration getConfigurationAt(String id)
			return pConfigurations.getAt(id, null) cast Configuration
		end
		
		/** \brief Add configuration. */
		func void addConfiguration(Configuration configuration)
			if pConfigurations.has(configuration.getID())
				throw EInvalidParam.new()
			end
			pConfigurations.setAt(configuration.getID(), configuration)
		end
		
		/** \brief Remove configuration. */
		func void removeConfiguration(Configuration configuration)
			pConfigurations.remove(configuration.getID())
		end
		
		/** \brief Remove all configurations. */
		func void removeAllConfigurations()
			pConfigurations.removeAll()
		end
		
		/** \brief Visit configurations with block receiving argument Configuration. */
		func void forEachConfiguration(Block ablock)
			pConfigurations.forEachValue(ablock)
		end
		
		/** \brief Find configuration with block receiving argument Configuration returning true if found. */
		func Configuration findConfiguration(Block ablock)
			return pConfigurations.find(block String id, Configuration configuration
				return ablock.run(configuration)
			end) cast Configuration
		end
		
		
		
		/** \brief Active configuration or null if none is active. */
		func Configuration getActiveConfiguration()
			return pActiveConfiguration
		end
		
		/**
		 * \brief Set active configuration by ID or null if not found.
		 * 
		 * If ID is not null calls setActiveConfiguration().
		 * If ID is null calls clearActiveConfiguration().
		 * 
		 * \returns true if configuration changed or false if it is the same.
		 */
		func bool setActiveConfigurationWithID(String id, bool resetIfChanged)
			if id != null
				return setActiveConfiguration(getConfigurationAt(id), resetIfChanged)
				
			else
				return clearActiveConfiguration()
			end
		end
		
		/**
		 * \brief Set active configuration or null if none is active.
		 * 
		 * \returns true if configuration changed or false if it is the same.
		 */
		func bool setActiveConfiguration(Configuration configuration, bool resetIfChanged)
			if configuration == pActiveConfiguration
				return false
			end
			
			pActiveConfiguration = configuration
			
			if resetIfChanged
				reset()
				
			else
				setElapsed(pElapsed)
			end
			
			findAndStoreControllers()
			
			pListeners.forEach(block Listener each
				each.configurationChanged(this, configuration)
			end)
			if pBTSMs != null
				pBTSMs.runEvent(pECBehavior.getPrefix(), "configuration")
			end
			
			return true
		end
		
		/**
		 * \brief Clear active configuration.
		 * 
		 * \returns true if configuration changed or false if it is the same.
		 */
		func bool clearActiveConfiguration()
			return setActiveConfiguration(null, true)
		end
		
		
		
		/** \brief Elapsed time since start of interval. */
		func float getElapsed()
			return pElapsed
		end
		
		/** \brief Set elapsed time since start of interval. */
		func void setElapsed(float elapsed)
			pElapsed = DEMath.max(elapsed, 0.0)
			
			if pActiveConfiguration == null
				return
			end
			
			var Event event
			for pNextEvent = 0 to pActiveConfiguration.getEventCount()
				event = pActiveConfiguration.getEventAt(pNextEvent)
				if event.getTime() > pElapsed
					break
				end
			end
		end
		
		/** \brief Index of next foot step event. */
		func int getNextEvent()
			return pNextEvent
		end
		
		/**
		* \brief Set index of next foot step event.
		* 
		* Index will be clamped to range from 0 to getEventCount().
		*/
		protected func void setNextEvent(int index)
			if pActiveConfiguration != null
				pNextEvent = DEMath.clamp(index, 0, pActiveConfiguration.getEventCount())
				
			else
				pNextEvent = 0
			end
		end
		
		
		
		/** \brief Reset to start of interval. */
		func void reset()
			pElapsed = 0
			pNextEvent = 0
		end
		
		/**
		 * \brief Update foot steps.
		 * 
		 * Advances elapsed playing foot steps if events are trigered. Same as update(float,bool)
		 * called with true as parameter for relative.
		 */
		func void update(float elapsed)
			update(elapsed, true)
		end
		
		/**
		 * \brief Update foot steps.
		 * 
		 * Advances elapsed playing foot steps if events are trigered.
		 * 
		 * \param relative If true increments elapsed time otherwise sets elapsed time.
		 *                 If false and elapsed time is smaller than current elapsed time
		 *                 the time is considered to have elapsed past the interval and
		 *                 wrapped around.
		 */
		func void update(float elapsed, bool relative)
			if pActiveConfiguration == null
				return
			end
			
			var float interval = pActiveConfiguration.getInterval()
			var int count = pActiveConfiguration.getEventCount()
			var Event event
			
			if relative
				pElapsed += elapsed
				
			else
				elapsed = DEMath.normalize(elapsed, 0.0, interval)
				if elapsed < pElapsed
					elapsed += interval
				end
				pElapsed = elapsed
			end
			
			while true
				while pNextEvent < count
					event = pActiveConfiguration.getEventAt(pNextEvent)
					if event.getTime() > pElapsed
						break
					end
					pNextEvent++
					footStep(pActiveConfiguration, event)
				end
				
				if pElapsed < interval
					return
				end
				
				pElapsed -= interval
				pNextEvent = 0
			end
		end
		
		/**
		 * \brief Foot step event.
		 * \version 1.26
		 * 
		 * Plays event foot step sound if defined, calls \ref Listener#footStep() and sends
		 * event "footSteps.footStep" to state machine context if present.
		 * 
		 * This function can be called by other behaviors to trigger foot steps.
		 */
		func void footStep(Configuration configuration, Event event)
			playFootStepSound(event)
			
			pListeners.forEach(block Listener each
				each.footStep(this, configuration, event)
			end)
			if pBTSMs != null
				pBTSMs.runEvent(pECBehavior.getPrefix(), "footStep")
			end
		end
		
		
		/**
		 * \brief Find and store controllers.
		 * \version 1.26
		 */
		func void findAndStoreControllers()
			pControllerElapsed = null
			
			if pActorAnimated != null and pActiveConfiguration != null
				if pActiveConfiguration.getControllerName() != null
					pControllerElapsed = pActorAnimated.getControllerNamed(\
						pActiveConfiguration.getControllerName())
				end
			end
		end
		
		/**
		 * \brief Play foot step sound.
		 * 
		 * Creates a one-shot speaker and plays it in the actor game world.
		 */
		protected func void playFootStepSound(Event event)
			var BehaviorElement element = getElement()
			var GameWorld gameWorld = element.getGameWorld()
			if gameWorld == null
				return
			end
			
			var Sound sound = event.randomSound()
			if sound == null
				return
			end
			
			var Speaker speaker = Speaker.new()
			speaker.setSound(sound)
			speaker.setPosition(element.getElementMatrix() * event.getOffset())
			speaker.setOrientation(element.getOrientation())
			speaker.setLooping(false)
			speaker.setVolume(event.getVolume())
			speaker.setRange(event.getRange())
			speaker.setRollOff(event.getRollOff())
			speaker.setLayerMask(pLayerMask)
			speaker.setOwner(element)
			
			gameWorld.getBehaviorOneShotSpeaker().addSpeaker(speaker)
		end
		
		
		
		/** \brief Add listener. */
		func void addListener(Listener listener)
			if listener == null
				throw EInvalidParam.new()
			end
			pListeners.add(listener)
		end
		
		/** \brief Remove listener. */
		func void removeListener(Listener listener)
			pListeners.remove(listener)
		end
		
		
		
		/** \brief Post thinking after physics processing is finished. */
		func void postThink(float elapsed)
			if pAutoUpdate
				if pControllerElapsed != null
					update(pControllerElapsed.getRelativeValue(), false)
					
				else
					update(elapsed, true)
				end
			end
		end
		
		
		
		/** \brief Read behavior from file. */
		func void readFromFile(PersistencyEnvironment env, FileReader reader)
			select reader.readByte() // version
			case 0
				var String id = reader.readString16()
				if not id.empty()
					setActiveConfigurationWithID(id, false)
				end
				
				pElapsed = reader.readFloat()
				pNextEvent = reader.readInt()
				
			else
				throw EInvalidParam.new("unsupported version")
			end
		end
		
		/** \brief Write behavior to file. */
		func void writeToFile(PersistencyEnvironment env, FileWriter writer)
			writer.writeByte(0) // version
			
			writer.writeString16(pActiveConfiguration != null if pActiveConfiguration.getID() else "")
			writer.writeFloat(pElapsed)
			writer.writeInt(pNextEvent)
		end
	end
	
	
	
	var bool pAutoUpdate
	var ECBehaviorActorAnimated pActorAnimated
	var ECComposeBTSM pBTSMs
	var String pPrefix
	
	
	
	/** \brief Create behavior element class. */
	func new(BehaviorElementClass eclass) this(eclass, "footSteps.")
	end
	
	func new(BehaviorElementClass eclass, String prefix) super(eclass)
		if getBehaviorIn(eclass) != null
			throw BEMultipleInstanceException.new(eclass, this)
		end
		
		pPrefix = prefix
		pAutoUpdate = true
		pBTSMs = ECComposeBTSM.new()
		
		eclass.addBehavior(this)
	end
	
	func void dispose()
		pActorAnimated = null
		pBTSMs = null
		super.dispose()
	end
	
	
	/**
	 * \brief Prefix.
	 * \version 1.26
	 */
	func String getPrefix()
		return pPrefix
	end
	
	/**
	 * \brief Actor animated behavior or null.
	 * \version 1.26
	 */
	func ECBehaviorActorAnimated getActorAnimated()
		return pActorAnimated
	end
	
	/**
	 * \brief Set actor animated behavior or null.
	 * \version 1.26
	 */
	func void setActorAnimated(ECBehaviorActorAnimated actorAnimated)
		pActorAnimated = actorAnimated
	end
	
	/** \brief Call update() automatically on postThink(). */
	func bool getAutoUpdate()
		return pAutoUpdate
	end
	
	/** \brief Set if update() is automatically called on postThink(). */
	func void setAutoUpdate(bool autoUpdate)
		pAutoUpdate = autoUpdate
	end
	
	/**
	 * \brief Compose behavior trees and state machines.
	 * \version 1.26
	 */
	func ECComposeBTSM getBTSMs()
		return pBTSMs
	end
	
	
	/** \brief Get instance in element from owner element class. */
	func Instance instance(BehaviorElement element)
		return element.getInstanceAt(getInstanceIndex()) cast Instance
	end
	
	
	
	/**
	 * \brief Get behavior in element class or \em null if absent.
	 * 
	 * Use this method to check if a particular BehaviorElementClass contains a behavior
	 * of type ECBehaviorFootSteps.
	 */
	static func ECBehaviorFootSteps getBehaviorIn(BehaviorElementClass eclass)
		return eclass.findBehavior(block ECBehaviorFootSteps each
			return true
		end) cast ECBehaviorFootSteps
	end
	
	/**
	 * \brief Get instance in element or \em null if absent.
	 * 
	 * Use this method to check if a particular BehaviorElement contains a behavior instance
	 * of type ECBehaviorFootSteps.Instance .
	 */
	static func Instance getInstanceIn(BehaviorElement element)
		return element.findInstance(block Instance each
			return true
		end) cast Instance
	end
	
	
	
	/** \brief Create Behavior instance. */
	func ECBehaviorInstance createInstance(BehaviorElement element)
		return Instance.new(this, element)
	end
end
