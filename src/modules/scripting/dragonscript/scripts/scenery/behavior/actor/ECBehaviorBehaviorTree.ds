/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */


namespace Dragengine.Scenery

pin Dragengine.BehaviorTreeSystem
pin Dragengine.Gui
pin Dragengine.LoadSave
pin Dragengine.Preloading
pin Dragengine.Utils


/**
 * \brief Behavior element behavior adding BehaviorTree support.
 * 
 * Loads a single behavior tree from file and creates a BTContext. Other behaviors can
 * add actions and conditions to this behavior tree allowing to compose behavior tree
 * actions and conditions easily.
 * 
 * This behavior can be used in different ways depending on the needs.
 * 
 * \par Single Behavior Tree Usage
 * 
 * This is the most simple solution where only one behavior tree is used. For many AI
 * situations this is enough and is the most simple solution to use. Add one
 * ECBehaviorBehaviorTree with no ID to the element and as many other behaviors adding
 * actions and conditions as required. Set the "behaviorTree.path" property to define
 * the behavior tree to load. If you want to use this behavior for simple elements
 * you can set the "behaviorTree.run" to "true". In this case the behavior will run
 * the behavior tree on "think()" calls. For BaseActor use it is better to keep this
 * feature disabled and using a BaseActorAI supporting this behavior. This is an
 * example code for such a setup:
 * 
 * \code{.ds}
 * class MyElementClass extends BehaviorElementClass
 *    func new()
 *       var ECBehaviorBehaviorTree btbehavior = ECBehaviorBehaviorTree.new(this)
 *       btbehavior.getPath().setValue("/content/myBehavior.debt")
 *       btbehavior.getRun().setValue(true)
 *       
 *       // here you can add now behaviors adding actions and conditions for
 *       // the behavior tree to use
 *       ...
 *    end
 * end
 * \endcode
 * 
 * \par Multiple Behavior Tree Usage
 * 
 * You can add multiple instances of ECBehaviorBehaviorTree to the element to load and
 * use multiple behavior trees. This can be either because you want to switch between
 * behavior trees or using multiple trees together to model complex AI logic. In this
 * situation behaviors adding actions and conditions do add them to all instances of
 * ECBehaviorBehaviorTree. This is usually not a problem since the behavior trees are
 * written to use only the actions and conditions making sense to be used. You can
 * set any ECBehaviorBehaviorTree to run during "think()". If enabling more than one
 * behavior like this make sure the individual behavior trees properly work together.
 * This is an example code for such a setup:
 * 
 * \code{.ds}
 * class MyElementClass extends BehaviorElementClass
 *    func new()
 *       var ECBehaviorBehaviorTree btSpecific = ECBehaviorBehaviorTree.new(this, "specific")
 *       btSpecific.getPath().setValue("/content/mySpecificBehavior.debt")
 *       btSpecific.getRun().setValue(true)
 *       
 *       var ECBehaviorBehaviorTree btIdle = ECBehaviorBehaviorTree.new(this, "idle")
 *       btIdle.getPath().setValue("/content/myIdleBehavior.debt")
 *       btIdle.getRun().setValue(true)
 *       
 *       // here you can add now behaviors adding actions and conditions for both
 *       // behavior trees to use
 *       ...
 *    end
 * end
 * \endcode
 * 
 * The above example loads and runs two behavior trees. The first one is running specific
 * behavior tree with AI behavior like searching for the player or communicating with
 * other actors. The second behavior tree provides idle actions used if the specific
 * behavior tree is doing nothing. By choosing conditions properly the two trees do
 * not interfere with each other and allow to split up behavior trees into multiple trees
 * which can help create complex AI more simple and stable.
 * 
 * \par BaseActor Usage
 * 
 * This use case allows to use this behavior for BaseActor usage. BaseActor supports using
 * BaseActorAI which can be exchanged to allow multiple different AI routines to be used
 * without needing one large behavior tree. In this situation the behavior tree is not run
 * by this behavior but by a BaseActorAI subclass. Both of the above scenarios are possible
 * either using one behavior tree or multiple. Typically BaseActorAI does not use the
 * BTContext from this behavior directly but instead create a copy. This has the advantage
 * that each time a BaseActorAI is switched on it starts with a fresh context initialized
 * with all actions and conditions added by other behaviors. Furthermore you can change
 * the BehaviorTree to use during copy time opening up all kinds of possibilities to create
 * actor AI easily. This is an example code for such a setup:
 * 
 * \code{.ds}
 * class MyElementClass extends BehaviorElementClass
 *    func new()
 *       var ECBehaviorBehaviorTree btree = ECBehaviorBehaviorTree.new(this)
 *       btSpecific.getPath().setValue("/content/basic.debt")
 *       //btSpecific.getRun().setValue(false) // the default is false
 *       
 *       // here you can add now behaviors adding actions and conditions for both
 *       // behavior trees to use
 *       ...
 *    end
 * end
 * 
 * class MyActorAI extends BAAIBehaviorTree
 *    func new()
 *       // load behavior tree to use. this is not required but allows to use different
 *       // behavior trees for different AI routines. if not used the "/content/basic.debt"
 *       // would be used as defined in MyElementClass.
 *       var BehaviorTree btree = BaseGameApp.getApp().getLoaders() \
 *          .getBehaviorTree().loadFromFile("/content/aiRoutine1.debt")
 *       
 *       // create context. BAAIBehaviorTree requires a BTContextAI subclass hence we can
 *       // use the ECBehaviorBehaviorTree context directly. if you write your own BaseActorAI
 *       // subclasses this can be tough a viable option to use less script code. this copy
 *       // here will ensure all actions and conditions are present so this is easy and quick
 *       setContext(BTContextAI.new(this, ECBehaviorBehaviorTree.getInstanceIn(getActor()).getContext(), btree)
 *       
 *       // run behavior tree during think()
 *       setRunning(true)
 *    end
 * end
 * \endcode
 * 
 * \par Action and Condition Factory
 * 
 * You can assign actions and conditions without using other behaviors by using one or more
 * factories. The factories are added to the behavior. Upon creating the behavior instances
 * the factories are asked to create and assign BTAction and BTCondition. The example below
 * shows how to use a factory to add a condition checking for a trigger and an action
 * manipulating a trigger.
 * 
 * \code{.ds}
 * class MyElementClass extends BehaviorElementClass
 *    func new()
 *       var ECBehaviorBehaviorTree btbehavior = ECBehaviorBehaviorTree.new(this)
 *       btbehavior.getPath().setValue("/content/mySpecificBehavior.desm")
 *       
 *       // add factory to create actions and conditions later on. this example uses
 *       // a code block for simplicity. using classes implementing ActionConditionFactory
 *       // is preferred since it allows to reuse factories across element classes.
 *       btbehavior.setActionConditionFactory(block ECBehaviorBehaviorTree.Instance instance
 *          // add condition evaluating to true if "player.insideZone" trigger is in fired state.
 *          // the condition can be used in the behavior tree using the name "player is inside zone".
 *          instance.setCondition("player is inside zone", BTConditionTrigger.new(\
 *             "player.insideZone", BTConditionTrigger.TestMode.fired))
 *          
 *          // add action pulsing (fire and immediately reset) "player.damage" trigger.
 *          // the action can be run in the behavior tree using the name "hurt playe".
 *          instance.setAction("hurt player", BTActionTrigger.new("player.damage", BTActionTrigger.Action.pulse))
 *       end)
 *    end
 * end
 * \endcode
 * 
 * This behavior does require the element class to be persistable (setPersistable) only if
 * the context is run by the behavior itself.
 * 
 * \see https://developer.dragondreams.ch/wiki/doku.php/dragengine:modules:dragonscript:behavior_behaviortree
 */
class ECBehaviorBehaviorTree extends DefaultECBehavior
	/**
	 * \brief Listener for behavior instance events.
	 * \version 1.19
	 */
	interface Listener
		/** \brief Before stepping behavior tree. */
		func void behaviorTreeUpdate(Instance instance, BTContext context, float elapsed)
		
		/** \brief Stepping behavior tree Failed. */
		func void behaviorTreeFailed(Instance instance, BTContext context)
		
		/** \brief Behavior tree has been restarted. */
		func void behaviorTreeRestarted(Instance instance, BTContext context)
	end
	
	/**
	 * \brief Default implementation of behavior instance listener.
	 * \version 1.19
	 */
	class DefaultListener implements Listener
		/** \brief Create default listener. */
		func new()
		end
		
		/** \brief Before stepping behavior tree. */
		func void behaviorTreeUpdate(Instance instance, BTContext context, float elapsed)
		end
		
		/** \brief Stepping behavior tree Failed. */
		func void behaviorTreeFailed(Instance instance, BTContext context)
		end
		
		/** \brief Behavior tree has been restarted. */
		func void behaviorTreeRestarted(Instance instance, BTContext context)
		end
	end
	
	/**
	 * \brief Factory creating listeners.
	 * \version 1.19
	 */
	interface ListenerFactory
		/** \brief Create listener. */
		func Listener createListener(Instance instance)
	end
	
	/**
	 * \brief Factory creating listeners using block.
	 * \version 1.19
	 */
	class BlockListenerFactory implements ListenerFactory
		var Block pBlock
		
		/** \brief Create factory using block receiving Instance as parameter returning Listener. */
		func new(Block blockFactory)
			if blockFactory == null
				throw ENullPointer.new()
			end
			pBlock = blockFactory
		end
		
		/** \brief Create listener. */
		func Listener createListener( Instance instance )
			return pBlock.run(instance) cast Listener
		end
	end
	
	/** \brief Factory assigining actions and conditions to behavior tree. */
	interface ActionConditionFactory
		/** \brief Assign actions and conditions to behavior tree. */
		func void setActionsConditions(Instance instance)
	end
	
	/** \brief Factory assigining actions and conditions to behavior tree using a block. */
	class BlockActionConditionFactory implements ActionConditionFactory
		var Block pBlock
		
		/** \brief Create factory using block receiving Instance as parameter. */
		func new(Block factoryBlock)
			if factoryBlock == null
				throw ENullPointer.new()
			end
			pBlock = factoryBlock
		end
		
		/** \brief Assign actions and conditions to behavior tree. */
		func void setActionsConditions(Instance instance)
			pBlock.run(instance)
		end
	end
	
	/**
	 * \brief Behavior factory.
	 * \version 1.25
	 * 
	 * Example XML element class:
	 * \code{.xml}
	 * <behavior type='ECBehaviorBehaviorTree'/>
	 * 
	 * <!-- for adding multiple behaviors use unique identifiers -->
	 * <behavior type='ECBehaviorBehaviorTree' id='second'/>
	 * \endcode
	 * 
	 * Element class properties added by the behavior can also be set directly inside the tag
	 * be removing the property name prefix and starting with a "." (for example ".propertyName").
	 */
	class Factory implements BehaviorFactory
		func new()
		end
		
		func String factoryId()
			return "ECBehaviorBehaviorTree"
		end
		
		func ECBehavior addBehavior(BehaviorElementClass eclass, String id, Dictionary parameters)
			var ECBehaviorBehaviorTree behavior = ECBehaviorBehaviorTree.new(eclass, id)
			eclass.sharedFactoryHelper.setPropertiesFromParameters(\
				eclass, parameters, "behaviorTree", id)
			return behavior
		end
	end
	
	
	/** \brief Behavior instance. */
	class Instance extends DefaultECBehaviorInstance
		var ECBehaviorBehaviorTree pECBehavior
		var BehaviorTree pBehaviorTree
		var BTContext pContext
		var bool pRun, pFailed
		var Array pListeners
		
		
		
		/** \brief Create element. */
		func new(ECBehaviorBehaviorTree ecbehavior, BehaviorElement element) super(element)
			pECBehavior = ecbehavior
			pFailed = false
			pListeners = Array.new()
		end
		
		/** \brief Dispose of composeable instance. */
		func void dispose()
			pContext = null
			pBehaviorTree = null
			pListeners = null
			super.dispose()
		end
		
		
		
		/** \brief Initialize element from stub. */
		func void init(StubElement stub)
			pRun = pECBehavior.getRun().getValue(stub)
			
			pBehaviorTree = loadBehaviorTree(stub)
			if pBehaviorTree == null
				pBehaviorTree = BehaviorTree.new()
			end
			
			pContext = createContext(stub, pBehaviorTree)
			if BaseGameApp.getApp() != null
				pContext.setConsole(BaseGameApp.getApp().getConsole())
			end
			
			setRequiresThink(pRun)
			pECBehavior.createListeners(this)
		end
		
		/** \brief Load behavior tree. */
		protected func BehaviorTree loadBehaviorTree(StubElement stub)
			return pECBehavior.getBehaviorTree().getBehaviorTree(stub, getElement().getClass())
		end
		
		/** \brief Create context. */
		protected func BTContext createContext(StubElement stub, BehaviorTree behaviorTree)
			return BTContext.new(behaviorTree)
		end
		
		
		
		/** \brief Behavior. */
		func ECBehaviorBehaviorTree getECBehavior()
			return pECBehavior
		end
		
		/** \brief Behavior tree. */
		func BehaviorTree getBehaviorTree()
			return pBehaviorTree
		end
		
		/** \brief Context. */
		func BTContext getContext()
			return pContext
		end
		
		/** \brief Run behavior tree on element thinking. */
		func bool getRun()
			return pRun
		end
		
		/** \brief Behavior tree failed and will not run again. */
		func bool getFailed()
			return pFailed
		end
		
		
		
		/** \brief Think about what the element is going to do in this frame. */
		func void think(float elapsed)
			if not pRun and not pFailed
				return
			end
			
			notifyUpdate(pContext, elapsed)
			
			try
				if pContext.stepBehaviorTree()
					return
				end
				
			catch Exception e
			end
			
			pFailed = true
			setRequiresThink(false)
			
			pECBehavior.setActionsConditions(this)
			notifyFailed(pContext)
		end
		
		/** \brief Restart behavior tree to run it again. */
		protected func void restartContext()
			if not pRun
				return
			end
			
			pContext.reset()
			pFailed = false
			setRequiresThink(true)
			notifyRestarted(pContext)
		end
		
		/** \brief Set action to behavior tree. */
		func void setAction(String name, BTAction action)
			pContext.setAction(name, action)
		end
		
		/**
		 * \brief Set action to behavior tree using block.
		 * 
		 * Block receives arguments BTContext context and Dictionary parameters.
		 */
		func void setAction(String name, Block actionBlock)
			pContext.setAction(name, actionBlock)
		end
		
		/** \brief Set condition to behavior tree. */
		func void setCondition(String name, BTCondition condition)
			pContext.setCondition(name, condition)
		end
		
		/**
		 * \brief Set condition to behavior tree using block.
		 * 
		 * Block receives arguments BTContext context and Dictionary parameters and returns bool.
		 */
		func void setCondition(String name, Block conditionBlock)
			pContext.setCondition(name, conditionBlock)
		end
		
		
		
		/**
		 * \brief Add listener.
		 * \version 1.19
		 */
		func void addListener(Listener listener)
			if listener == null
				throw ENullPointer.new()
			end
			pListeners.add(listener)
		end
		
		/**
		 * \brief Remove listener.
		 * \version 1.19
		 */
		func void removeListener(Listener listener)
			pListeners.remove(listener)
		end
		
		/**
		 * \brief Notify listeners behavior tree restarted.
		 * \version 1.19
		 */
		func void notifyRestarted(BTContext context)
			if context == null
				throw ENullPointer.new()
			end
			
			pListeners.forEach(block Listener each
				each.behaviorTreeRestarted(this, context)
			end)
		end
		
		/**
		 * \brief Notify listeners behavior tree failed.
		 * \version 1.19
		 */
		func void notifyFailed(BTContext context)
			if context == null
				throw ENullPointer.new()
			end
			
			pListeners.forEach(block Listener each
				each.behaviorTreeFailed(this, context)
			end)
		end
		
		/**
		 * \brief Notify listeners behavior tree update before running.
		 * \version 1.19
		 * \note Updates are send each think even if the behavior tree is currently paused.
		 */
		func void notifyUpdate(BTContext context, float elapsed)
			if context == null
				throw ENullPointer.new()
			end
			
			pListeners.forEach(block Listener each
				each.behaviorTreeUpdate(this, context, elapsed)
			end)
		end
		
		
		
		/** \brief Read element from file. */
		func void readFromFile(PersistencyEnvironment env, FileReader reader)
			select reader.readByte() // version
			case 0
				var PersistencyFlags flags = PersistencyFlags.new(2, reader)
				pRun = flags.getAt(0)
				pFailed = flags.getAt(1)
				
				if pRun
					pContext.readFromFile(env, reader)
				end
				
				setRequiresThink(pRun and not pFailed)
				
			else
				throw EInvalidParam.new("unsupported version")
			end
		end
		
		/** \brief Write element to file. */
		func void writeToFile(PersistencyEnvironment env, FileWriter writer)
			writer.writeByte(0) // version
			
			var PersistencyFlags flags = PersistencyFlags.new(2)
			flags.setAt(0, pRun)
			flags.setAt(1, pFailed)
			flags.writeToFile(writer)
			
			if pRun
				pContext.writeToFile(env, writer)
			end
		end
	end
	
	
	
	var ECPBehaviorTree pBehaviorTree
	var ECPBoolean pRun
	var Array pActionConditionFactories
	var Array pListenerFactories
	
	
	
	/** \brief Create behavior element class. */
	func new(BehaviorElementClass eclass) this(eclass, BaseGameApp.getApp().getLoaders(), "")
	end
	
	/** \brief Create behavior element class. */
	func new(BehaviorElementClass eclass, String id)\
	this(eclass, BaseGameApp.getApp().getLoaders(), id)
	end
	
	/** \brief Create behavior element class. */
	func new(BehaviorElementClass eclass, String id, String prefix)\
	this(eclass, BaseGameApp.getApp().getLoaders(), id, prefix)
	end
	
	/** \brief Create behavior element class. */
	func new(BehaviorElementClass eclass, Loaders loaders) this(eclass, loaders, "")
	end
	
	/** \brief Create behavior element class. */
	func new(BehaviorElementClass eclass, Loaders loaders, String id) \
	this(eclass, loaders, id, id.empty() if "behaviorTree" else "behaviorTree(" + id + ")")
	end
	
	func new(BehaviorElementClass eclass, Loaders loaders, String id, String subID)\
	this(eclass, loaders, id, subID, subID + ".")
	end
	
	func new(BehaviorElementClass eclass, Loaders loaders, String id, String subID,\
	String prefix) super(eclass, id)
		eclass.addProperty(pBehaviorTree = ECPBehaviorTree.new(\
			prefix + "path", loaders.getBehaviorTree()))
		eclass.addProperty(pRun = ECPBoolean.new(prefix + "run", false))
		
		pActionConditionFactories = Array.new()
		pListenerFactories = Array.new()
		
		eclass.addBehavior(this)
	end
	
	/** \brief Dispose of behavior. */
	func void dispose()
		pListenerFactories = null
		pActionConditionFactories = null
		super.dispose()
	end
	
	
	
	/** \brief Behavior tree. */
	func ECPBehaviorTree getBehaviorTree()
		return pBehaviorTree
	end
	
	/** \brief Run behavior tree during element thinking. */
	func ECPBoolean getRun()
		return pRun
	end
	
	/** \brief Add action and condition factory. */
	func void addActionConditionFactory(ActionConditionFactory factory)
		if factory == null
			throw ENullPointer.new()
		end
		pActionConditionFactories.add(factory)
	end
	
	/**
	 * \brief Add action and condition factory using block receiving Instance as parameter.
	 * 
	 * This is a convenience method for using BlockActionConditionFactory.
	 */
	func void addActionConditionFactory(Block factory)
		addActionConditionFactory(BlockActionConditionFactory.new(factory))
	end
	
	/** \brief Visit listener factories with block with argument ActionConditionFactory. */
	func void forEachActionConditionFactory(Block ablock)
		pActionConditionFactories.forEach(ablock)
	end
	
	/** \brief Assign actions and conditions to behavior instance. */
	func void setActionsConditions(Instance instance)
		pActionConditionFactories.forEach(block ActionConditionFactory each
			each.setActionsConditions(instance)
		end)
	end
	
	
	
	/**
	 * \brief Add listener factory.
	 * \version 1.19
	 */
	func void addListenerFactory(ListenerFactory factory)
		if factory == null
			throw ENullPointer.new()
		end
		pListenerFactories.add(factory)
	end
	
	/**
	 * \brief Add listener factory using block.
	 * \version 1.19
	 * 
	 * Block receives as parameter Instance and returns Listener.
	 */
	func void addListenerFactory(Block blockFactory)
		pListenerFactories.add(BlockListenerFactory.new(blockFactory))
	end
	
	/**
	 * \brief Visit listener factories with block with argument ListenerFactory.
	 * \version 1.19
	 */
	func void forEachListenerFactory(Block ablock)
		pListenerFactories.forEach(ablock)
	end
	
	/**
	 * \brief Create listeners from factories adding them to behavior instance.
	 * \version 1.19
	 */
	func void createListeners(Instance instance)
		pListenerFactories.forEach(block ListenerFactory each
			instance.addListener(each.createListener(instance))
		end)
	end
	
	
	
	/** \brief Get instance in element from owner element class. */
	func Instance instance(BehaviorElement element)
		return element.getInstanceAt(getInstanceIndex()) cast Instance
	end
	
	
	
	/**
	 * \brief Get behavior in element class or \em null if absent.
	 * 
	 * Use this method to check if a particular BehaviorElementClass contains a behavior
	 * of type ECBehaviorCollider.
	 */
	static func ECBehaviorBehaviorTree getBehaviorIn(BehaviorElementClass eclass)
		return eclass.findBehavior(block ECBehaviorBehaviorTree each
			return true
		end) cast ECBehaviorBehaviorTree
	end
	
	/**
	 * \brief Get behavior with id in element class or \em null if absent.
	 * 
	 * Use this method to check if a particular BehaviorElementClass contains a behavior
	 * of type ECBehaviorBehaviorTree with specific identifier.
	 */
	static func ECBehaviorBehaviorTree getBehaviorIn(BehaviorElementClass eclass, String id)
		return eclass.findBehavior(block ECBehaviorBehaviorTree each
			return each.getID().equals(id)
		end) cast ECBehaviorBehaviorTree
	end
	
	/**
	 * \brief Get list of all behaviors in element.
	 * 
	 * Returns list contains ECBehaviorBehaviorTree behaviors in the order they have
	 * been created in the element.
	 */
	static func Array getAllBehaviorsIn(BehaviorElementClass eclass)
		return eclass.collectBehaviors(block ECBehaviorBehaviorTree each
			return true
		end)
	end
	
	
	
	/**
	 * \brief Get instance in element or \em null if absent.
	 * 
	 * Use this method to check if a particular BehaviorElement contains a behavior instance
	 * of type ECBehaviorBehaviorTree.Instance . If more than one instance is present returns
	 * the first instance.
	 */
	static func Instance getInstanceIn(BehaviorElement element)
		return element.findInstance(block Instance each
			return true
		end) cast Instance
	end
	
	/**
	 * \brief Get instance with id in element or \em null if absent.
	 * 
	 * Use this method to check if a particular BehaviorElement contains a behavior instance
	 * of type ECBehaviorBehaviorTree.Instance with specific identifier.
	 */
	static func Instance getInstanceIn(BehaviorElement element, String id)
		return element.findInstance(block Instance each
			return each.getECBehavior().getID().equals(id)
		end) cast Instance
	end
	
	/**
	 * \brief Get list of all instances in element.
	 * 
	 * Returns list contains ECBehaviorBehaviorTree.Instance instances in the order they have
	 * been created in the element.
	 */
	static func Array getAllInstancesIn(BehaviorElement element)
		return element.collectInstances(block Instance each
			return true
		end)
	end
	
	
	
	/** \brief Create Behavior instance. */
	func ECBehaviorInstance createInstance(BehaviorElement element)
		return Instance.new(this, element)
	end
end
