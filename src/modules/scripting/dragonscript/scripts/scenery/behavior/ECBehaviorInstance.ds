/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */


namespace Dragengine.Scenery

pin Dragengine.Gui
pin Dragengine.LoadSave
pin Dragengine.Preloading
pin Dragengine.Utils


/**
 * \brief Behavior instance interface providing the actual element behavior.
 */
public interface ECBehaviorInstance
	/** \brief Behavior element to apply behavior to. */
	func BehaviorElement getElement()
	
	/** \brief Behavior instance index. */
	func int getInstanceIndex()
	
	/** \brief Dispose of composeable instance. */
	func void dispose()
	
	/** \brief Initialize element from stub. */
	func void init( StubElement stub )
	
	/** \brief State changed (visble, touchable). */
	func void stateChanged()
	
	/** \brief Position, orientation or size changed. */
	func void geometryChanged()
	
	/** \brief Add element to game world. */
	func void addToGameWorld()
	
	/** \brief Remove element from game world. */
	func void removeFromGameWorld()
	
	/** \brief Behavior instance requires enterFrame() to be called. */
	func bool requiresEnterFrame()
	
	/** \brief Frame update started. */
	func void enterFrame()
	
	/** \brief Behavior instance requires think() to be called. */
	func bool requiresThink()
	
	/** \brief Think about what to do for the next frame update. */
	func void think( float elapsed )
	
	/** \brief Post thinking after physics processing is finished. */
	func void postThink( float elapsed )
	
	/**
	 * \brief Attach element to object set by the mapper in the IGDE World Editor.
	 * 
	 * Behavior instance is responsible to call BehaviorElement.setParent() if the
	 * attaching succeedes. If multiple behaviors support attaching they have to negotiate
	 * with each other who does the attaching for example by using BehaviorElement.getParent().
	 */
	func void attachToParent( Element parent )
	
	/** \brief Read element from file. */
	func void readFromFile( PersistencyEnvironment env, FileReader reader )
	
	/** \brief Write element to file. */
	func void writeToFile( PersistencyEnvironment env, FileWriter writer )
end
