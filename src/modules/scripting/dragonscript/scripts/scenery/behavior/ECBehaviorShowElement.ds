/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */


namespace Dragengine.Scenery

pin Dragengine.Gui
pin Dragengine.LoadSave
pin Dragengine.Preloading
pin Dragengine.Utils
pin Dragengine.TriggerSystem
pin Dragengine.BehaviorTreeSystem
pin Dragengine.StateMachineSystem


/**
 * \brief Behavior element behavior show/hide element if triggered.
 * \version 1.19
 * 
 * If trigger evaluates to true the element is set visible and touchable others not.
 * 
 * Element class properties have the prefix "showElement.". Behavior can be added only once.
 * 
 * This behavior supports persistable element class (setPersistable).
 * 
 * \see https://developer.dragondreams.ch/wiki/doku.php/dragengine:modules:dragonscript:behavior_showelement
 */
class ECBehaviorShowElement extends DefaultECBehavior
	/**
	 * \brief Behavior factory.
	 * \version 1.25
	 * 
	 * Example XML element class:
	 * \code{.xml}
	 * <behavior type='ECBehaviorShowElement'>
	 *   <!-- optional: use BaseGameApp trigger table. game can add more supported values. default is 'default' -->
	 *   <string name='triggerTable'>default</string>
	 *   
	 *   <!-- optional: identifier of ECBehaviorTriggered to synchronize with or empty
	 *                  string to not synchronize. default is empty string. -->
	 *   <string name='trigger.synchronize'>other</string>
	 *   
	 *   <!-- optional: use behavior tree with id instead of empty string -->
	 *   <string name='behaviorTree'>second</string>
	 *   
	 *   <!-- optional: use state machine with id instead of empty string -->
	 *   <string name='stateMachine'>second</string>
	 * </behavior>
	 * \endcode
	 * 
	 * Element class properties added by the behavior can also be set directly inside the tag
	 * be removing the property name prefix and starting with a "." (for example ".propertyName").
	 */
	class Factory implements BehaviorFactory
		func new()
		end
		
		func String factoryId()
			return "ECBehaviorShowElement"
		end
		
		func ECBehavior addBehavior(BehaviorElementClass eclass, String id, Dictionary parameters)
			if not id.empty()
				throw EInvalidParam.new("id is not empty string")
			end
			
			var ECBehaviorShowElement behavior = ECBehaviorShowElement.new(eclass,\
				getTriggerTableFor(parameters.getAt("triggerTable", "default") cast String))
			
			behavior.getTriggered().setSynchronize(eclass,\
				parameters.getAt("trigger.synchronize", null) cast String)
			
			behavior.setBehaviorTree(eclass.sharedFactoryHelper.defaultBehaviorTree(eclass, parameters))
			behavior.setStateMachine(eclass.sharedFactoryHelper.defaultStateMachine(eclass, parameters))
			
			eclass.sharedFactoryHelper.setPropertiesFromParameters(eclass, parameters, "showElement")
			return behavior
		end
		
		/**
		 * \brief Trigger table matching value.
		 * 
		 * Default implementation returns \ref BaseGameApp#getTriggerTable() for value 'default'
		 * and null for all other values. Overwrite to accept other values.
		 */
		func TSTriggerTable getTriggerTableFor(String value)
			return BehaviorElementClass.sharedFactoryHelper.triggerTable(value)
		end
	end
	
	/** \brief Behavior instance. */
	class Instance extends DefaultECBehaviorInstance
		/**
		 * \brief Behavior tree action "showElement.set".
		 * \version 1.26
		 */
		class BTASet extends BTSMActionCondition
			var Instance pInstance
			
			func new(Instance instance)
				pInstance = instance
			end
			
			func BTResult runAction(Dictionary parameters)
				var Object value
				
				value = parameters.getAt("shown", null)
				if value != null
					pInstance.setShown(value.equals("true"))
				end
				
				return BTResult.success
			end
		end
		
		/**
		 * \brief Behavior tree action/condition "showElement.check".
		 * \version 1.26
		 */
		class BTACheck extends BTSMActionCondition
			var Instance pInstance
			
			func new(Instance instance)
				pInstance = instance
			end
			
			func BTResult runAction(Dictionary parameters)
				return check("", parameters) if BTResult.success\
					else (parameters.has("wait") if BTResult.running else BTResult.failure)
			end
			
			func bool evaluateCondition(Dictionary parameters)
				return check("showElement.", parameters)
			end
			
			func bool check(String prefix, Dictionary parameters)
				var Object value
				
				value = parameters.getAt(prefix + "shown", null)
				if value != null and pInstance.getShown() != value.equals("true")
					return false
				end
				
				return true
			end
		end
		
		/** \brief Change shown listener. */
		class ShowElementListener extends ECBehaviorTriggered.DefaultListener
			var Instance pInstance
			
			func new(Instance instance)
				pInstance = instance
			end
			
			func void triggerExpressionTrue(ECBehaviorTriggered.Instance instance)
				pInstance.setShown(true)
			end
			
			func void triggerExpressionFalse(ECBehaviorTriggered.Instance instance)
				pInstance.setShown(false)
			end
		end
		
		
		
		var ECBehaviorShowElement pECBehavior
		var ECBehaviorTriggered.Instance pTrigger
		var bool pShown
		var SMContext pSMContext
		
		
		
		/** \brief Create element. */
		func new(ECBehaviorShowElement ecbehavior, BehaviorElement element) super(element)
			pECBehavior = ecbehavior
			
			element.setVisible(false)
			element.setTouchable(false)
		end
		
		/** \brief Dispose of composeable instance. */
		func void dispose()
			pTrigger = null
			pSMContext = null
			super.dispose()
		end
		
		
		
		/** \brief Initialize element from stub. */
		func void init(StubElement stub)
			var BehaviorElement element = getElement()
			
			if pECBehavior.getTriggerTable() != null
				pTrigger = pECBehavior.getTriggered().synchronizedOrSelf().instance(element)
				pTrigger.addListener(ShowElementListener.new(this))
			end
			
			if pECBehavior.getBehaviorTree() != null
				var BTContext c = pECBehavior.getBehaviorTree().instance(element).getContext()
				c.setAction("showElement.set", BTASet.new(this))
				
				var BTACheck btacheck = BTACheck.new(this)
				c.setAction("showElement.check", btacheck)
				c.setCondition("showElement.check", btacheck)
			end
			
			if pECBehavior.getStateMachine() != null
				pSMContext = pECBehavior.getStateMachine().instance(element).getContext()
				pSMContext.setAction("showElement.set", BTASet.new(this))
				
				var BTACheck btacheck = BTACheck.new(this)
				pSMContext.setAction("showElement.check", btacheck)
				pSMContext.setCondition("showElement.check", btacheck)
			end
		end
		
		
		
		/** \brief Behavior. */
		func ECBehaviorShowElement getECBehavior()
			return pECBehavior
		end
		
		/** \brief Trigger or \em null. */
		func ECBehaviorTriggered.Instance getTrigger()
			return pTrigger
		end
		
		
		
		/** \brief Element is shown. */
		func bool getShown()
			return pShown
		end
		
		/** \brief Set if element is shown. */
		func void setShown(bool shown)
			if shown == pShown
				return
			end
			
			pShown = shown
			
			var BehaviorElement element = getElement()
			element.setVisible(shown)
			element.setTouchable(shown)
			
			if pSMContext != null
				pSMContext.runEvent(shown if "showElement.shown" else "showElement.hidden")
			end
		end
		
		
		
		/** \brief Read element from file. */
		public func void readFromFile(PersistencyEnvironment env, FileReader reader)
			select reader.readByte()
			case 0
				setShown(env.readBool(reader))
				
			else
				throw EInvalidParam.new("unsupported version")
			end
		end
		
		/** Write element to file. */
		public func void writeToFile(PersistencyEnvironment env, FileWriter writer)
			writer.writeByte(0)
			env.writeBool(writer, pShown)
		end
	end
	
	
	
	var ECBehaviorTriggered pTriggered
	var TSTriggerTable pTriggerTable
	var ECBehaviorBehaviorTree pBehaviorTree
	var ECBehaviorStateMachine pStateMachine
	
	
	
	/** \brief Create behavior element class. */
	func new(BehaviorElementClass eclass) this(eclass, BaseGameApp.getApp().getTriggerTable())
	end
	
	func new(BehaviorElementClass eclass, TSTriggerTable triggerTable)\
	this(eclass, triggerTable, "showElement.")
	end
	
	func new(BehaviorElementClass eclass, TSTriggerTable triggerTable, String prefix) super(eclass)
		pTriggerTable = triggerTable
		
		pTriggered = ECBehaviorTriggered.new(eclass, triggerTable, "showElement", prefix + "trigger")
		
		eclass.addBehavior(this)
	end
	
	/** \brief Dispose of behavior. */
	func void dispose()
		pBehaviorTree = null
		pStateMachine = null
		super.dispose()
	end
	
	
	
	/** \brief Trigger to show element. */
	func ECBehaviorTriggered getTriggered()
		return pTriggered
	end
	
	/** \brief Trigger table or \em null if not used. */
	func TSTriggerTable getTriggerTable()
		return pTriggerTable
	end
	
	/** \brief Set trigger table or \em null if not used. */
	func void setTriggerTable(TSTriggerTable triggerTable)
		pTriggerTable = triggerTable
	end
	
	/**
	 * \brief Behavior tree or null.
	 * \version 1.26
	 */
	func ECBehaviorBehaviorTree getBehaviorTree()
		return pBehaviorTree
	end
	
	/**
	 * \brief Set behavior tree or null.
	 * \version 1.26
	 */
	func void setBehaviorTree(ECBehaviorBehaviorTree behaviorTree)
		pBehaviorTree = behaviorTree
	end
	
	/**
	 * \brief State machine or null.
	 * \version 1.26
	 */
	func ECBehaviorStateMachine getStateMachine()
		return pStateMachine
	end
	
	/**
	 * \brief Set state machine or null.
	 * \version 1.26
	 */
	func void setStateMachine(ECBehaviorStateMachine stateMachine)
		pStateMachine = stateMachine
	end
	
	
	
	/** \brief Get instance in element from owner element class. */
	func Instance instance(BehaviorElement element)
		return element.getInstanceAt(getInstanceIndex()) cast Instance
	end
	
	
	
	/**
	 * \brief Get behavior in element class or \em null if absent.
	 * 
	 * Use this method to check if a particular BehaviorElementClass contains a behavior
	 * of type ECBehaviorComponent.
	 */
	static func ECBehaviorShowElement getBehaviorIn(BehaviorElementClass eclass)
		return eclass.findBehavior(block ECBehaviorShowElement each
			return true
		end) cast ECBehaviorShowElement
	end
	
	/**
	 * \brief Get instance in element or \em null if absent.
	 * 
	 * Use this method to check if a particular BehaviorElement contains a behavior instance
	 * of type ECBehaviorShowElement.Instance . If more than one instance is present returns
	 * the first instance.
	 */
	static func Instance getInstanceIn(BehaviorElement element)
		return element.findInstance(block Instance each
			return true
		end) cast Instance
	end
	
	
	
	/** \brief Create Behavior instance. */
	func ECBehaviorInstance createInstance(BehaviorElement element)
		return Instance.new(this, element)
	end
end
