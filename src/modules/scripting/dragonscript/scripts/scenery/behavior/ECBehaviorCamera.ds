/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */


namespace Dragengine.Scenery

pin Dragengine.Gui
pin Dragengine.LoadSave
pin Dragengine.Preloading
pin Dragengine.Utils


/**
 * \brief Behavior element behavior adding camera support.
 * 
 * Behavior adds a Camera resource to the the behavior element. This behavior can be added
 * multiple times to an element. Each instance creates one camera attached to the element
 * collider which can be individually modified. To distinguish the cameras each instance
 * has an identifier which can be used to retrieve a specific instance. Hence to use more
 * than one camera use code like this in your subclass constructor:
 * 
 * \code{.ds}
 * class MyElement extends BehaviorElementClass
 *    func new()
 *       ECBehaviorCamera.new(this)
 *       ECBehaviorCamera.new(this, "subCamera")
 *    end
 * end
 * \endcode
 * 
 * You can now define the parameters to use for both cameras using for example the properties
 * "camera.fov" for the first camera and "camera(subCamera).fov" for the second camera.
 * 
 * It is recommended to always specify an identifier even if only one camera is used.
 * This avoids potentially name conflicts especially if other behaviors are added attaching
 * other resources too.
 * 
 * If the \em ECBehaviorCollider behavior is present in the behavior element before this
 * behavior is added the camera is attached. The camera is attached to the named bone if
 * defined otherwise it is attached statically.
 * 
 * Element class properties have the prefix "camera{(id)}.".
 * 
 * This behavior does require the element class to be persistable (setPersistable).
 * 
 * 
 * 
 * \par Effects
 * 
 * Cameras can be equipped with effects modifying the rendering. Effects can be added to
 * ECBehaviorCamera by adding after the camera behavior one or more camera effect behaviors.
 * 
 * \see https://developer.dragondreams.ch/wiki/doku.php/dragengine:modules:dragonscript:behavior_camera
 */
class ECBehaviorCamera extends DefaultECBehavior
	/**
	 * \brief Behavior factory.
	 * \ref 1.25
	 * 
	 * Automatically assigns these behaviors if present before adding:
	 * - Optional: \ref ECBehaviorCollider
	 * 
	 * Example XML element class:
	 * \code{.xml}
	 * <behavior type='ECBehaviorCamera'>
	 *   <!-- optional: set layer mask (default empty). list of bits to set. -->
	 *   <string name='layerMask'>0 1 4</string>
	 * </behavior>
	 * 
	 * <!-- for adding multiple behaviors use unique identifiers -->
	 * <behavior type='ECBehaviorCamera' id='second'>
	 *   ...
	 * </behavior>
	 * \endcode
	 * 
	 * Element class properties added by the behavior can also be set directly inside the tag
	 * be removing the property name prefix and starting with a "." (for exampler ".propertyName").
	 */
	class Factory implements BehaviorFactory
		func new()
		end
		
		func String factoryId()
			return "ECBehaviorCamera"
		end
		
		func ECBehavior addBehavior(BehaviorElementClass eclass, String id, Dictionary parameters)
			var ECBehaviorCamera behavior = ECBehaviorCamera.new(eclass,\
				ECBehaviorCollider.getBehaviorIn(eclass), id)
			
			if parameters.has("layerMask")
				behavior.setLayerMask(ElementClass.getSharedCodecPropertyString().\
					decodeLayerMask(parameters.getAt("layerMask") cast String))
			end
			
			BehaviorElementClass.sharedFactoryHelper.setPropertiesFromParameters(\
				eclass, parameters, "camera", id)
			return behavior
		end
	end
	
	/** \brief Behavior instance. */
	class Instance extends DefaultECBehaviorInstance
		var ECBehaviorCamera pECBehavior
		var ECBehaviorCollider.Instance pCollider
		var Camera pCamera
		
		
		
		/** \brief Create behavior instance. */
		func new(ECBehaviorCamera ecbehavior, BehaviorElement element) super(element)
			pECBehavior = ecbehavior
		end
		
		/** \brief Dispose of behavior instance. */
		func void dispose()
			pCamera = null
			pCollider = null
			super.dispose()
		end
		
		
		
		/** \brief Initialize behavior element from stub. */
		func void init(StubElement stub)
			if pECBehavior.getCollider() != null
				pCollider = pECBehavior.getCollider().instance(getElement())
			end
			
			pCamera = createCamera(stub)
			if pCamera == null
				return
			end
			
			if pCollider != null and pCollider.getCollider() != null
				attachCamera(stub, pCollider)
			end
		end
		
		/** \brief Create camera. */
		protected func Camera createCamera(StubElement stub)
			var Element element = getElement()
			var Camera camera = Camera.new()
			
			camera.setPosition(element.getPosition())
			camera.setOrientation(element.getOrientation())
			
			camera.setFov(pECBehavior.getFov().getValue(stub))
			camera.setFovRatio(pECBehavior.getFovRatio().getValue(stub))
			camera.setImageDistance(pECBehavior.getImageDistance().getValue(stub))
			camera.setViewDistance(pECBehavior.getViewDistance().getValue(stub))
			camera.setEnableHDRR(pECBehavior.getEnableHDRR().getValue(stub))
			camera.setExposure(pECBehavior.getExposure().getValue(stub))
			camera.setLowestIntensity(pECBehavior.getLowestIntensity().getValue(stub))
			camera.setHighestIntensity(pECBehavior.getHighestIntensity().getValue(stub))
			camera.setAdaptionTime(pECBehavior.getAdaptionTime().getValue(stub))
			camera.setEnableGI(pECBehavior.getEnableGI().getValue(stub))
			camera.setLayerMask(pECBehavior.getLayerMask())
			
			var String pathParameters = pECBehavior.getPathParameters().getValueOrNull(stub)
			if pathParameters != null
				var LoadCamera loader = pECBehavior.getLoadCamera()
				if loader != null
					loader.loadFromFile(pathParameters, camera)
				end
			end
			
			return camera
		end
		
		/**
		 * \brief Attach camera to collider.
		 * 
		 * Default implementation calls ECComposeAttachResource.attach().
		 */
		protected func void attachCamera(StubElement stub, ECBehaviorCollider.Instance collider)
			pECBehavior.getAttach().attach(collider.getCollider(), pCamera, stub)
		end
		
		
		
		/** \brief Behavior. */
		func ECBehaviorCamera getECBehavior()
			return pECBehavior
		end
		
		/** \brief Collider behavior or null if not attached. */
		func ECBehaviorCollider.Instance getCollider()
			return pCollider
		end
		
		/** \brief Camera. */
		func Camera getCamera()
			return pCamera
		end
		
		
		
		/** \brief Add element to game world. */
		func void addToGameWorld()
			getElement().getGameWorld().getWorld().addCamera(pCamera)
		end
		
		/** \brief Remove element from game world. */
		func void removeFromGameWorld()
			getElement().getGameWorld().getWorld().removeCamera(pCamera)
		end
	end
	
	
	
	var ECBehaviorCollider pCollider
	var ECComposeAttachResource pAttach
	var ECPFloat pFov
	var ECPFloat pFovRatio
	var ECPFloat pImageDistance
	var ECPFloat pViewDistance
	var ECPBoolean pEnableHDRR
	var ECPFloat pExposure
	var ECPFloat pLowestIntensity
	var ECPFloat pHighestIntensity
	var ECPFloat pAdaptionTime
	var ECPBoolean pEnableGI
	var LayerMask pLayerMask
	var ECPString pPathParameters
	var LoadCamera pLoadCamera
	
	
	
	/**
	 * \brief Create behavior element class.
	 * 
	 * These values are optional and can be null: \em collider.
	 */
	func new(BehaviorElementClass eclass, ECBehaviorCollider collider) \
	this(eclass, collider, "")
	end
	
	func new(BehaviorElementClass eclass, ECBehaviorCollider collider, String id) \
	this(eclass, collider, id, id.empty() if "camera." else "camera(" + id + ").")
	end
	
	func new(BehaviorElementClass eclass, ECBehaviorCollider collider, String id, \
	String prefix) super(eclass, id)
		pCollider = collider
		pLayerMask = LayerMask.new()
		
		var BaseGameApp app = BaseGameApp.getApp()
		if app != null
			pLoadCamera = app.getLoaders().getCamera()
		end
		
		pAttach = ECComposeAttachResource.new(eclass, prefix)
		
		pFov = ECPFloat.new(prefix + "fov", 39.60, 0, 180)
		eclass.addProperty(pFov)
		
		pFovRatio = ECPFloat.new(prefix + "fovRatio", 1, 0.01)
		eclass.addProperty(pFovRatio)
		
		pImageDistance = ECPFloat.new(prefix + "imageDistance", 0.01, 0.001)
		eclass.addProperty(pImageDistance)
		
		pViewDistance = ECPFloat.new(prefix + "viewDistance", 200, 0.01)
		eclass.addProperty(pViewDistance)
		
		pEnableHDRR = ECPBoolean.new(prefix + "enableHDRR", true)
		eclass.addProperty(pEnableHDRR)
		
		pExposure = ECPFloat.new(prefix + "exposure", 1, 0)
		eclass.addProperty(pExposure)
		
		pLowestIntensity = ECPFloat.new(prefix + "lowestIntensity", 1, 0)
		eclass.addProperty(pLowestIntensity)
		
		pHighestIntensity = ECPFloat.new(prefix + "highestIntensity", 20, 0)
		eclass.addProperty(pHighestIntensity)
		
		pAdaptionTime = ECPFloat.new(prefix + "adaptionTime", 0.1, 0)
		eclass.addProperty(pAdaptionTime)
		
		pEnableGI = ECPBoolean.new(prefix + "enableGI", Engine.getDefaultEnableGI())
		eclass.addProperty(pEnableGI)
		
		pPathParameters = ECPString.new(prefix + "pathParameters", null)
		eclass.addProperty(pPathParameters)
		
		eclass.addBehavior(this)
	end
	
	/** \brief Dispose of behavior. */
	func void dispose()
		pCollider = null
		super.dispose()
	end
	
	
	
	/** \brief Collider behavior or null to not attach. */
	func ECBehaviorCollider getCollider()
		return pCollider
	end
	
	/** \brief Attach resource. */
	func ECComposeAttachResource getAttach()
		return pAttach
	end
	
	/** \brief Vertical field  of view in degrees for the entire view. */
	func ECPFloat getFov()
		return pFov
	end
	
	/** \brief Aspect ratio of the horizontal field of view to the vertical field of view. */
	func ECPFloat getFovRatio()
		return pFovRatio
	end
	
	/** \brief Distance to the image plane. */
	func ECPFloat getImageDistance()
		return pImageDistance
	end
	
	/** \brief Viewing distance up to which world geometry is rendered. */
	func ECPFloat getViewDistance()
		return pViewDistance
	end
	
	/** \brief Enable high definition range rendering (HDRR) if supported. */
	func ECPBoolean getEnableHDRR()
		return pEnableHDRR
	end
	
	/** \brief Exposure. */
	func ECPFloat getExposure()
		return pExposure
	end
	
	/** \brief \brief Lowest intensity the eye can adapt to. */
	func ECPFloat getLowestIntensity()
		return pLowestIntensity
	end
	
	/** \brief \brief Highest intensity the eye can adapt to. */
	func ECPFloat getHighestIntensity()
		return pHighestIntensity
	end
	
	/** \brief Adaption time of the eye in seconds. */
	func ECPFloat getAdaptionTime()
		return pAdaptionTime
	end
	
	/** \brief Enable global illumination (GI) if supported. */
	func ECPBoolean getEnableGI()
		return pEnableGI
	end
	
	/** \brief Layer mask. */
	func LayerMask getLayerMask()
		return pLayerMask
	end
	
	/** \brief Set layer mask. */
	func void setLayerMask(LayerMask layerMask)
		if layerMask == null
			throw EInvalidParam.new()
		end
		pLayerMask = layerMask
	end
	
	/**
	 * \brief Path to camera parameters file (*.decamera) to use or null/empty string.
	 * \version 1.22
	 * 
	 * If not null/empty path the settings override the manual settings.
	 * Requires camera loader to be set.
	 */
	func ECPString getPathParameters()
		return pPathParameters
	end
	
	/**
	 * \brief Camera loader or null.
	 * \version 1.22
	 * 
	 * By default set to BaseGameApp.getApp().getLoaders().getCamera() if
	 * BaseGameApp.getApp() is not null.
	 */
	func LoadCamera getLoadCamera()
		return pLoadCamera
	end
	
	/**
	 * \brief Set camera loader or null.
	 * \version 1.22
	 */
	func void setLoadCamera(LoadCamera loader)
		pLoadCamera = loader
	end
	
	
	
	/** \brief Get instance in element from owner element class. */
	func Instance instance(BehaviorElement element)
		return element.getInstanceAt(getInstanceIndex()) cast Instance
	end
	
	
	
	/**
	 * \brief Get behavior in element class or \em null if absent.
	 * 
	 * Use this method to check if a particular BehaviorElementClass contains a behavior
	 * of type ECBehaviorCollider.
	 */
	static func ECBehaviorCamera getBehaviorIn(BehaviorElementClass eclass)
		return eclass.findBehavior(block ECBehaviorCamera each
			return true
		end) cast ECBehaviorCamera
	end
	
	/**
	 * \brief Get behavior with id in element class or \em null if absent.
	 * 
	 * Use this method to check if a particular BehaviorElementClass contains a behavior
	 * of type ECBehaviorCamera with specific identifier.
	 */
	static func ECBehaviorCamera getBehaviorIn(BehaviorElementClass eclass, String id)
		return eclass.findBehavior(block ECBehaviorCamera each
			return each.getID().equals(id)
		end) cast ECBehaviorCamera
	end
	
	/**
	 * \brief Get list of all behaviors in element.
	 * 
	 * Returns list contains ECBehaviorCamera behaviors in the order they have
	 * been created in the element.
	 */
	static func Array getAllBehaviorsIn(BehaviorElementClass eclass)
		return eclass.collectBehaviors(block ECBehaviorCamera each
			return true
		end)
	end
	
	
	
	/**
	 * \brief Get instance in element or \em null if absent.
	 * 
	 * Use this method to check if a particular BehaviorElement contains a behavior instance
	 * of type ECBehaviorCamera.Instance . If more than one instance is present returns
	 * the first instance.
	 */
	static func Instance getInstanceIn(BehaviorElement element)
		return element.findInstance(block Instance each
			return true
		end) cast Instance
	end
	
	/**
	 * \brief Get instance with id in element or \em null if absent.
	 * 
	 * Use this method to check if a particular BehaviorElement contains a behavior instance
	 * of type ECBehaviorCamera.Instance with specific identifier.
	 */
	static func Instance getInstanceIn(BehaviorElement element, String id)
		return element.findInstance(block Instance each
			return each.getECBehavior().getID().equals(id)
		end) cast Instance
	end
	
	/**
	 * \brief Get list of all instances in element.
	 * 
	 * Returns list contains ECBehaviorCamera.Instance instances in the order they have
	 * been created in the element.
	 */
	static func Array getAllInstancesIn(BehaviorElement element)
		return element.collectInstances(block Instance each
			return true
		end)
	end
	
	
	
	/** \brief Create Behavior instance. */
	func ECBehaviorInstance createInstance(BehaviorElement element)
		return Instance.new(this, element)
	end
end
