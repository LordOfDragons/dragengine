/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */


namespace Dragengine.Scenery

pin Dragengine.ConversationSystem
pin Dragengine.Preloading
pin Dragengine.Utils


/**
 * \brief Behavior element behavior adding conversation coordinate support.
 * 
 * Instance adds a ElementConvoCoordSystem to the game world the element is added to. These can
 * be added to conversation playbacks as targets for actions. Multiple ECBehaviorConvoCoordSystem
 * can be added creating individual ElementConvoCoordSystem instances. The ElementConvoCoordSystem
 * returns the position relative to the element if queried.
 * 
 * The default implementation registers the ElementConvoCoordSystem in the conversation
 * coordinate system list of the GameWorld the element is added to. If name is empty string
 * no convo coordinate system is created.
 * 
 * This behavior does require the element class to be persistable (setPersistable).
 * 
 * \see https://developer.dragondreams.ch/wiki/doku.php/dragengine:modules:dragonscript:behavior_convocoordsystem
 */
class ECBehaviorConvoCoordSystem extends DefaultECBehavior
	/**
	 * \brief Behavior factory.
	 * \ref 1.25
	 * 
	 * Example XML element class:
	 * \code{.xml}
	 * <behavior type='ECBehaviorConvoCoordSystem'/>
	 * 
	 * <!-- for adding multiple behaviors use unique identifiers -->
	 * <behavior type='ECBehaviorConvoCoordSystem' id='second'/>
	 * \endcode
	 * 
	 * Element class properties added by the behavior can also be set directly inside the tag
	 * be removing the property name prefix and starting with a "." (for exampler ".propertyName").
	 */
	class Factory implements BehaviorFactory
		func new()
		end
		
		func String factoryId()
			return "ECBehaviorConvoCoordSystem"
		end
		
		func ECBehavior addBehavior(BehaviorElementClass eclass, String id, Dictionary parameters)
			var ECBehaviorConvoCoordSystem behavior = ECBehaviorConvoCoordSystem.new(eclass, id)
			BehaviorElementClass.sharedFactoryHelper.setPropertiesFromParameters(\
				eclass, parameters, "convoCoordSystem", id)
			return behavior
		end
	end
	
	/** \brief Behavior instance. */
	class Instance extends DefaultECBehaviorInstance
		private var ECBehaviorConvoCoordSystem pECBehavior
		private var ElementConvoCoordSystem pConvoCoordSystem
		
		
		
		/** \brief Create element. */
		public func new(ECBehaviorConvoCoordSystem ecbehavior, BehaviorElement element) super(element)
			pECBehavior = ecbehavior
		end
		
		/** \brief Dispose of composeable instance. */
		public func void dispose()
			pConvoCoordSystem = null
			super.dispose()
		end
		
		
		
		/** \brief Initialize element from stub. */
		public func void init(StubElement stub)
			var StringID name = pECBehavior.getName().getValue(stub)
			if name == null
				return
			end
			
			var CodecPropertyString codec = getElement().getClass().getCodecPropertyString()
			var Vector position = pECBehavior.getPosition().getVector(stub, codec)
			var Vector orientation = pECBehavior.getOrientation().getVector(stub, codec)
			
			pConvoCoordSystem = createCoordSystem(stub, name, position, orientation)
		end
		
		/**
		 * \brief Create conversation coordinate system.
		 * 
		 * Default implementation creates instance of ElementConvoCoordSystem.
		 */
		protected func ElementConvoCoordSystem createCoordSystem(StubElement stub, \
		StringID name, Vector position, Vector orientation)
			return ElementConvoCoordSystem.new(name, \
				DMatrix.newRT(DVector.new(orientation), DVector.new(position)), getElement())
		end
		
		
		
		/** \brief Behavior. */
		public func ECBehaviorConvoCoordSystem getECBehavior()
			return pECBehavior
		end
		
		/** \brief Conversation coordinate system or \em null. */
		public func ElementConvoCoordSystem getConvoCoordSystem()
			return pConvoCoordSystem
		end
		
		
		
		/** \brief Add element to game world. */
		public func void addToGameWorld()
			if pConvoCoordSystem != null
				getElement().getGameWorld().getConvoCoordSystemList().add(pConvoCoordSystem)
			end
		end
		
		/** \brief Remove element from game world. */
		public func void removeFromGameWorld()
			if pConvoCoordSystem != null
				getElement().getGameWorld().getConvoCoordSystemList().remove(pConvoCoordSystem.getID())
			end
		end
	end
	
	
	
	private var ECPStringID pName
	private var ECPVector pPosition
	private var ECPVector pOrientation
	
	
	
	/** \brief Create behavior element class. */
	public func new(BehaviorElementClass eclass) this(eclass, "")
	end
	
	/** \brief Create behavior element class. */
	public func new(BehaviorElementClass eclass, String id) \
	this(eclass, id, id.empty() if "convoCoordSystem." else "convoCoordSystem(" + id + ").")
	end
	
	public func new(BehaviorElementClass eclass, String id, String prefix) super(eclass, id)
		pName = ECPStringID.new(prefix + "name")
		eclass.addProperty(pName)
		
		pPosition = ECPVector.new(prefix + "position")
		eclass.addProperty(pPosition)
		
		pOrientation = ECPVector.new(prefix + "orientation")
		eclass.addProperty(pOrientation)
		
		eclass.addBehavior(this)
	end
	
	
	
	/** \brief Name of conversation coordinate system. */
	public func ECPStringID getName()
		return pName
	end
	
	/** \brief Position relative to behavior element. */
	public func ECPVector getPosition()
		return pPosition
	end
	
	/** \brief Orientation relative to behavior element. */
	public func ECPVector getOrientation()
		return pOrientation
	end
	
	
	
	/** \brief Get instance in element from owner element class. */
	public func Instance instance(BehaviorElement element)
		return element.getInstanceAt(getInstanceIndex()) cast Instance
	end
	
	
	
	/**
	 * \brief Get behavior in element class or \em null if absent.
	 * 
	 * Use this method to check if a particular BehaviorElementClass contains a behavior
	 * of type ECBehaviorComponent.
	 */
	static public func ECBehaviorConvoCoordSystem getBehaviorIn(BehaviorElementClass eclass)
		return eclass.findBehavior(block ECBehaviorConvoCoordSystem each
			return true
		end) cast ECBehaviorConvoCoordSystem
	end
	
	/**
	 * \brief Get behavior with id in element class or \em null if absent.
	 * 
	 * Use this method to check if a particular BehaviorElementClass contains a behavior
	 * of type ECBehaviorConvoCoordSystem with specific identifier.
	 */
	static public func ECBehaviorConvoCoordSystem getBehaviorIn(BehaviorElementClass eclass, String id)
		return eclass.findBehavior(block ECBehaviorConvoCoordSystem each
			return each.getID().equals(id)
		end) cast ECBehaviorConvoCoordSystem
	end
	
	/**
	 * \brief Get list of all behaviors in element.
	 * 
	 * Returns list contains ECBehaviorConvoCoordSystem behaviors in the order they have
	 * been created in the element.
	 */
	static public func Array getAllBehaviorsIn(BehaviorElementClass eclass)
		return eclass.collectBehaviors(block ECBehaviorConvoCoordSystem each
			return true
		end)
	end
	
	
	
	/**
	 * \brief Get instance in element or \em null if absent.
	 * 
	 * Use this method to check if a particular BehaviorElement contains a behavior instance
	 * of type ECBehaviorConvoCoordSystem.Instance . If more than one instance is present returns
	 * the first instance.
	 */
	static public func Instance getInstanceIn(BehaviorElement element)
		return element.findInstance(block Instance each
			return true
		end) cast Instance
	end
	
	/**
	 * \brief Get instance with id in element or \em null if absent.
	 * 
	 * Use this method to check if a particular BehaviorElement contains a behavior instance
	 * of type ECBehaviorConvoCoordSystem.Instance with specific identifier.
	 */
	static public func Instance getInstanceIn(BehaviorElement element, String id)
		return element.findInstance(block Instance each
			return each.getECBehavior().getID().equals(id)
		end) cast Instance
	end
	
	/**
	 * \brief Get list of all instances in element.
	 * 
	 * Returns list contains ECBehaviorConvoCoordSystem.Instance instances in the order they have
	 * been created in the element.
	 */
	static public func Array getAllInstancesIn(BehaviorElement element)
		return element.collectInstances(block Instance each
			return true
		end)
	end
	
	
	
	/** \brief Create Behavior instance. */
	public func ECBehaviorInstance createInstance(BehaviorElement element)
		return Instance.new(this, element)
	end
end
