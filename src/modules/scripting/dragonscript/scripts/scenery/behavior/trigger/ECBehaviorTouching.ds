/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */


namespace Dragengine.Scenery

pin Dragengine.Gui
pin Dragengine.LoadSave
pin Dragengine.Preloading
pin Dragengine.Utils
pin Dragengine.TriggerSystem


/**
 * \brief Behavior element behavior matching trigger target to touching sensor.
 * 
 * Fires and resets a trigger target depending if elements are in touch sensor.
 * Optionally pulses trigger target instead of just firing it.
 * 
 * Element class properties have the prefix "touching{(id)}.".
 * 
 * This behavior does not require the element class to be persistable (setPersistable).
 * 
 * \see https://developer.dragondreams.ch/wiki/doku.php/dragengine:modules:dragonscript:behavior_touching
 */
class ECBehaviorTouching extends DefaultECBehavior
	/** \brief Listener for behavior instance events. */
	interface Listener
		/** \brief First element entered touch sensor. */
		func void startTouching(Instance instance)
		
		/** \brief Last element left touch sensor. */
		func void stopTouching(Instance instance)
	end
	
	/** \brief Default implementation of behavior instance listener. */
	class DefaultListener implements Listener
		/** \brief Create default listener. */
		func new()
		end
		
		/** \brief First element entered touch sensor. */
		func void startTouching(Instance instance)
		end
		
		/** \brief Last element left touch sensor. */
		func void stopTouching(Instance instance)
		end
	end
	
	/** \brief Implementation of behavior instance listener using BooleanBehaviorListener. */
	class BooleanListener extends DefaultListener
		var BooleanBehaviorListener pListener
		
		func new(BooleanBehaviorListener listener)
			pListener = listener
		end
		
		func void startTouching(Instance instance)
			pListener.enabled()
		end
		
		func void stopTouching(Instance instance)
			pListener.disabled()
		end
	end
	
	/** \brief Factory creating listeners. */
	interface ListenerFactory
		/** \brief Create listener. */
		func Listener createListener(Instance instance)
	end
	
	/** \brief Factory creating listeners using block. */
	class BlockListenerFactory implements ListenerFactory
		var Block pBlock
		
		/** \brief Create factory using block receiving Instance as parameter returning Listener. */
		func new(Block blockFactory)
			if blockFactory == null
				throw ENullPointer.new()
			end
			pBlock = blockFactory
		end
		
		/** \brief Create listener. */
		func Listener createListener(Instance instance)
			return pBlock.run(instance) cast Listener
		end
	end
	
	/**
	 * \brief Behavior factory.
	 * \version 1.25
	 * 
	 * Automatically assigns these behaviors if present before adding:
	 * - Optional: \ref ECBehaviorCollider
	 * 
	 * Example XML element class:
	 * \code{.xml}
	 * <behavior type='ECBehaviorTouching'>
	 *   <!-- optional: use BaseGameApp trigger table. game can add more supported values.
	 *                  default is 'default' -->
	 *   <string name='triggerTable'>default</string>
	 *   
	 *   <!-- optional: use behavior tree with id instead of empty string -->
	 *   <string name='behaviorTree'>second</string>
	 * </behavior>
	 * 
	 * <!-- for adding multiple behaviors use unique identifiers -->
	 * <behavior type='ECBehaviorTouching' id='second'>
	 *   ...
	 * </behavior>
	 * \endcode
	 * 
	 * Element class properties added by the behavior can also be set directly inside the tag
	 * be removing the property name prefix and starting with a "." (for example ".propertyName").
	 */
	class Factory implements BehaviorFactory
		func new()
		end
		
		func String factoryId()
			return "ECBehaviorTouching"
		end
		
		func ECBehavior addBehavior(BehaviorElementClass eclass, String id, Dictionary parameters)
			var ECBehaviorTouching behavior = ECBehaviorTouching.new(eclass,\
				ECBehaviorCollider.getBehaviorIn(eclass),\
				getTriggerTableFor(parameters.getAt("triggerTable", "default") cast String), id)
			
			eclass.sharedFactoryHelper.allBTSM(behavior.getTouchSensor().getBTSMs(), eclass, parameters)
			
			eclass.sharedFactoryHelper.setPropertiesFromParameters(eclass, parameters, "touching", id)
			return behavior
		end
		
		/**
		 * \brief Trigger table matching value.
		 * 
		 * Default implementation returns \ref BaseGameApp#getTriggerTable() for value 'default'
		 * and null for all other values. Overwrite to accept other values.
		 */
		func TSTriggerTable getTriggerTableFor(String value)
			return BehaviorElementClass.sharedFactoryHelper.triggerTable(value)
		end
	end
	
	
	
	/** \brief Behavior instance. */
	class Instance extends DefaultECBehaviorInstance
		/** \brief Trigger listener. */
		class TouchListener extends ECBehaviorTouchSensor.DefaultListener
			var Instance pInstance 
			
			func new(Instance instance)
				pInstance = instance
			end
			
			func void elementEntered(ECBehaviorTouchSensor.Instance instance, Element element)
				if instance.getTouchingElementCount() == 1
					pInstance.startTouching()
				end
			end
			
			func void elementLeft(ECBehaviorTouchSensor.Instance instance, Element element)
				if instance.getTouchingElementCount() == 0
					pInstance.stopTouching()
				end
			end
			
			func bool elementCanTouch(ECBehaviorTouchSensor.Instance instance, Element element)
				return true
			end
		end
		
		
		
		var ECBehaviorTouching pECBehavior
		var ECBehaviorTouchSensor.Instance pTouchSensor
		var TSNamedTriggerTarget pTarget
		var bool pPulse
		var Array pListeners
		
		
		
		/** \brief Create element. */
		func new(ECBehaviorTouching ecbehavior, BehaviorElement element) super(element)
			pECBehavior = ecbehavior
			pPulse = false
			pListeners = Array.new()
		end
		
		/** \brief Dispose of composeable instance. */
		func void dispose()
			pTarget = null
			pTouchSensor = null
			pListeners = null
			
			super.dispose()
		end
		
		
		
		/** \brief Initialize element from stub. */
		func void init(StubElement stub)
			if pECBehavior.getTriggerTable() == null
				return
			end
			
			pTouchSensor = pECBehavior.getTouchSensor().instance(getElement())
			pTouchSensor.addListener(TouchListener.new(this))
			
			pTarget = TSNamedTriggerTarget.new(pECBehavior.getTarget().getValue(stub))
			pPulse = pECBehavior.getPulse().getValue(stub)
			
			pECBehavior.createListeners(this)
		end
		
		
		
		/** \brief Behavior. */
		func ECBehaviorTouching getECBehavior()
			return pECBehavior
		end
		
		/** \brief Touch sensor or \em null. */
		func ECBehaviorTouchSensor.Instance getTouchSensor()
			return pTouchSensor
		end
		
		/** \brief Trigger target or \em null. */
		func TSNamedTriggerTarget getTarget()
			return pTarget
		end
		
		/** \brief Pulse trigger target instead of fire. */
		func bool getPulse()
			return pPulse
		end
		
		
		
		/** \brief First element entered touch sensor. */
		func void startTouching()
			fireTarget()
			
			pListeners.forEach(block Listener each
				each.startTouching(this)
			end)
		end
		
		/** \brief Last element left touch sensor. */
		func void stopTouching()
			resetTarget()
			
			pListeners.forEach(block Listener each
				each.stopTouching(this)
			end)
		end
		
		
		
		/** \brief Add listener. */
		func void addListener(Listener listener)
			if listener == null
				throw EInvalidParam.new()
			end
			pListeners.add(listener)
		end
		
		/** \brief Remove listener. */
		func void removeListener(Listener listener)
			pListeners.remove(listener)
		end
		
		
		
		/** \brief Add element to game world. */
		func void addToGameWorld()
			if pTarget == null
				return
			end
			
			pTarget.acquireTarget(pECBehavior.getTriggerTable())
			
			// ECBehaviorTouchSensor.addToGameWorld() is called before this method is called.
			// if elements are touching right now startTouching() has been called firing pTarget.
			// at that time though pTarget has not acquired yet the target. ensure target is
			// properly fired if this is the case
			if pTouchSensor.getTouchingElementCount() > 0
				fireTarget()
			end
		end
		
		/** \brief Remove element from game world. */
		func void removeFromGameWorld()
			if pTarget != null
				pTarget.dropTarget()
			end
		end
		
		
		
		/**
		 * \brief Fire target if not null.
		 * \version 1.6
		 */
		protected func void fireTarget()
			if pTarget != null
				if pPulse
					pTarget.pulse()
					
				else
					pTarget.fire()
				end
			end
		end
		
		/**
		 * \brief Reset target if not null.
		 * \version 1.6
		 */
		protected func void resetTarget()
			if pTarget != null
				pTarget.reset()
			end
		end
	end
	
	
	
	var ECBehaviorTouchSensor pTouchSensor
	var ECPString pTarget
	var ECPBoolean pPulse
	var TSTriggerTable pTouchSensorTable
	var Array pListenerFactories
	
	
	
	/**
	 * \brief Create behavior element class.
	 * 
	 * These values are optional and can be null: \em null.
	 */
	func new(BehaviorElementClass eclass, ECBehaviorCollider collider) \
	this(eclass, collider, BaseGameApp.getApp().getTriggerTable(), "")
	end
	
	func new(BehaviorElementClass eclass, ECBehaviorCollider collider, String id) \
	this(eclass, collider, BaseGameApp.getApp().getTriggerTable(), id)
	end
	
	func new(BehaviorElementClass eclass, ECBehaviorCollider collider, \
	TSTriggerTable triggerTable) this(eclass, collider, triggerTable, "")
	end
	
	func new(BehaviorElementClass eclass, ECBehaviorCollider collider, \
	TSTriggerTable triggerTable, String id) this(eclass, collider, triggerTable, \
	id, id.empty() if "touching" else "touching(" + id + ")")
	end
	
	func new(BehaviorElementClass eclass, ECBehaviorCollider collider, \
	TSTriggerTable triggerTable, String id, String subID) \
	this(eclass, collider, triggerTable, id, subID, subID + ".")
	end
	
	func new(BehaviorElementClass eclass, ECBehaviorCollider collider, \
	TSTriggerTable triggerTable, String id, String subID, String prefix) super(eclass, id)
		pTouchSensorTable = triggerTable
		pListenerFactories = Array.new()
		
		pTouchSensor = ECBehaviorTouchSensor.new(eclass, collider, subID, prefix + "touchSensor.")
		
		eclass.addProperty(pTarget = ECPString.new(prefix + "target", null))
		eclass.addProperty(pPulse = ECPBoolean.new(prefix + "pulse", false))
		
		eclass.addBehavior(this)
	end
	
	/** \brief Dispose of behavior. */
	func void dispose()
		pListenerFactories = null
		super.dispose()
	end
	
	
	
	/** \brief Touch sensor. */
	func ECBehaviorTouchSensor getTouchSensor()
		return pTouchSensor
	end
	
	/** \brief Trigger target to operate. */
	func ECPString getTarget()
		return pTarget
	end
	
	/** \brief Pulse trigger target instead of fire it. */
	func ECPBoolean getPulse()
		return pPulse
	end
	
	/** \brief Trigger table or \em null if not used. */
	func TSTriggerTable getTriggerTable()
		return pTouchSensorTable
	end
	
	/** \brief Set trigger table or \em null if not used. */
	protected func void setTriggerTable(TSTriggerTable triggerTable)
		pTouchSensorTable = triggerTable
	end
	
	/** \brief Add listener factory. */
	func void addListenerFactory(ListenerFactory factory)
		if factory == null
			throw ENullPointer.new()
		end
		pListenerFactories.add(factory)
	end
	
	/**
	 * \brief Add listener factory using block.
	 * 
	 * Block receives as parameter Instance and returns Listener.
	 */
	func void addListenerFactory(Block blockFactory)
		pListenerFactories.add(BlockListenerFactory.new(blockFactory))
	end
	
	/** \brief Visit listener factories with block with argument ListenerFactory. */
	func void forEachListenerFactory(Block ablock)
		pListenerFactories.forEach(ablock)
	end
	
	/** \brief Create listeners from factories adding them to behavior instance. */
	func void createListeners(Instance instance)
		pListenerFactories.forEach(block ListenerFactory each
			instance.addListener(each.createListener(instance))
		end)
	end
	
	
	
	/** \brief Get instance in element from owner element class. */
	func Instance instance(BehaviorElement element)
		return element.getInstanceAt(getInstanceIndex()) cast Instance
	end
	
	
	
	/**
	 * \brief Get behavior in element class or \em null if absent.
	 * 
	 * Use this method to check if a particular BehaviorElementClass contains a behavior
	 * of type ECBehaviorComponent.
	 */
	static func ECBehaviorTouching getBehaviorIn(BehaviorElementClass eclass)
		return eclass.findBehavior(block ECBehaviorTouching each
			return true
		end) cast ECBehaviorTouching
	end
	
	/**
	 * \brief Get behavior with id in element class or \em null if absent.
	 * 
	 * Use this method to check if a particular BehaviorElementClass contains a behavior
	 * of type ECBehaviorTouching with specific identifier.
	 */
	static func ECBehaviorTouching getBehaviorIn(BehaviorElementClass eclass, String id)
		return eclass.findBehavior(block ECBehaviorTouching each
			return each.getID().equals(id)
		end) cast ECBehaviorTouching
	end
	
	/**
	 * \brief Get list of all behaviors in element.
	 * 
	 * Returns list contains ECBehaviorTouching behaviors in the order they have
	 * been created in the element.
	 */
	static func Array getAllBehaviorsIn(BehaviorElementClass eclass)
		return eclass.collectBehaviors(block ECBehaviorTouching each
			return true
		end)
	end
	
	
	
	/**
	 * \brief Get instance in element or \em null if absent.
	 * 
	 * Use this method to check if a particular BehaviorElement contains a behavior instance
	 * of type ECBehaviorTouching.Instance . If more than one instance is present returns
	 * the first instance.
	 */
	static func Instance getInstanceIn(BehaviorElement element)
		return element.findInstance(block Instance each
			return true
		end) cast Instance
	end
	
	/**
	 * \brief Get instance with id in element or \em null if absent.
	 * 
	 * Use this method to check if a particular BehaviorElement contains a behavior instance
	 * of type ECBehaviorTouching.Instance with specific identifier.
	 */
	static func Instance getInstanceIn(BehaviorElement element, String id)
		return element.findInstance(block Instance each
			return each.getECBehavior().getID().equals(id)
		end) cast Instance
	end
	
	/**
	 * \brief Get list of all instances in element.
	 * 
	 * Returns list contains ECBehaviorTouching.Instance instances in the order they have
	 * been created in the element.
	 */
	static func Array getAllInstancesIn(BehaviorElement element)
		return element.collectInstances(block Instance each
			return true
		end)
	end
	
	
	
	/** \brief Create Behavior instance. */
	func ECBehaviorInstance createInstance(BehaviorElement element)
		return Instance.new(this, element)
	end
end
