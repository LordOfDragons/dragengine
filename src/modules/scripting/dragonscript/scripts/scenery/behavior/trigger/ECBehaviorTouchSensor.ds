/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */


namespace Dragengine.Scenery

pin Dragengine.Gui
pin Dragengine.LoadSave
pin Dragengine.Preloading
pin Dragengine.Utils


/**
 * \brief Behavior element behavior adding touch sensor support.
 * 
 * Attaches a TouchSensor resource to the behavior element. By default the collision filter
 * category is set to BaseGameApp.CollisionFilterBit.trigger and the collision filter mask is set to
 * BaseGameApp.CollisionFilterBit.actorAI . This causes actors to trigger this touch sensor unless they
 * have the CollisionFilterBit.trigger bit cleared. Modify the collision filter to allow other elements
 * to trigger this touch sensor.
 * 
 * Upon being touched the touch sensor notifies the listeners as well as setting a trigger
 * target in case a trigger table is present and the user set a trigger target name,
 * 
 * The TouchSensor resource can be queried for the colliders currently touching it.
 * Furthermore colliders entering and leaving trigger a notification allowing elements
 * to track elements of interest.
 * 
 * If the ECBehaviorCollider behavior is present in the behavior element the TouchSensor
 * is attached to the collider.
 * 
 * The behavior retrieves the owner of colliders inside the touch sensor. If these owners
 * are elements they are stored in a list of elements touched by the owner element. This
 * list is updated when elements enter or leave the touch sensor.
 * 
 * The owner behavior element as well as other ECBehavior subclasses can add a listener
 * to be notified if elements enter and exit the touch sensor.
 * 
 * This element behavior can be present multiple times in a BehaviorElement. In this case
 * use a unique identifier to distinguish the individual touch sensors.
 * 
 * Element class properties have the prefix "touchSensor{(identifier)}.".
 * 
 * This behavior does require the element class to be persistable (setPersistable).
 */
class ECBehaviorTouchSensor extends DefaultECBehavior
	/** \brief Listener for behavior instance events. */
	interface Listener
		/** \brief Element entered touch sensor. */
		func void elementEntered(Instance instance, Element element)
		
		/** \brief Element left touch sensor. */
		func void elementLeft(Instance instance, Element element)
		
		/**
		 * \brief Element can touch this touch sensor.
		 * 
		 * Element can touch is all listeners return true.
		 */
		func bool elementCanTouch(Instance instance, Element element)
	end
	
	/** \brief Default implementation of behavior instance listener. */
	class DefaultListener implements Listener
		/** \brief Create default listener. */
		func new()
		end
		
		/** \brief Element entered touch sensor. */
		func void elementEntered(Instance instance, Element element)
		end
		
		/** \brief Element left touch sensor. */
		func void elementLeft(Instance instance, Element element)
		end
		
		/**
		 * \brief Element can touch this touch sensor.
		 * 
		 * Element can touch is all listeners return true. Default implementation returns true.
		 */
		func bool elementCanTouch(Instance instance, Element element)
			return true
		end
	end
	
	/** \brief Implementation of behavior instance listener using BooleanBehaviorListener. */
	class BooleanListener extends DefaultListener
		var BooleanBehaviorListener pListener
		
		func new(BooleanBehaviorListener listener)
			pListener = listener
		end
		
		func void elementEntered(Instance instance, Element element)
			if instance.getTouchingElementCount() == 1
				pListener.enabled()
			end
		end
		
		func void elementLeft(Instance instance, Element element)
			if instance.getTouchingElementCount() == 0
				pListener.disabled()
			end
		end
	end
	
	/** \brief Factory creating listeners. */
	interface ListenerFactory
		/** \brief Create listener. */
		func Listener createListener(Instance instance)
	end
	
	/** \brief Factory creating listeners using block. */
	class BlockListenerFactory implements ListenerFactory
		var Block pBlock
		
		/** \brief Create factory using block receiving Instance as parameter returning Listener. */
		func new(Block blockFactory)
			if blockFactory == null
				throw ENullPointer.new()
			end
			pBlock = blockFactory
		end
		
		/** \brief Create listener. */
		func Listener createListener(Instance instance)
			return pBlock.run(instance) cast Listener
		end
	end
	
	/**
	 * \brief Behavior factory.
	 * \ref 1.25
	 * 
	 * Automatically assigns these behaviors if present before adding:
	 * - Optional: \ref ECBehaviorCollider
	 * 
	 * Example XML element class:
	 * \code{.xml}
	 * <behavior type='ECBehaviorTouchSensor'>
	 *   <!-- optional: set collision filter. default value '4:3' which means
	 *                  category BaseGameApp.CollisionFilterBit.trigger
	 *                  filter BaseGameApp.CollisionFilterBit.actorAI.
	 *                  format is '', 'category' or 'category:filter' where category and filter
	 *                  are a list of bits to set. -->
	 *   <string name='collisionFilter'>3:4 0</string>
	 * </behavior>
	 * 
	 * <!-- for adding multiple behaviors use unique identifiers -->
	 * <behavior type='ECBehaviorTouchSensor' id='second'>
	 *   ...
	 * </behavior>
	 * \endcode
	 * 
	 * Element class properties added by the behavior can also be set directly inside the tag
	 * be removing the property name prefix and starting with a "." (for exampler ".propertyName").
	 */
	class Factory implements BehaviorFactory
		func new()
		end
		
		func String factoryId()
			return "ECBehaviorTouchSensor"
		end
		
		func ECBehavior addBehavior(BehaviorElementClass eclass, String id, Dictionary parameters)
			var ECBehaviorTouchSensor behavior = ECBehaviorTouchSensor.new(eclass,\
				ECBehaviorCollider.getBehaviorIn(eclass), id)
			
			if parameters.has("collisionFilter")
				behavior.getCollisionFilter().setCollisionFilter(ElementClass.getSharedCodecPropertyString().\
					decodeCollisionFilter(parameters.getAt("collisionFilter") cast String))
			end
			
			BehaviorElementClass.sharedFactoryHelper.setPropertiesFromParameters(\
				eclass, parameters, "touchSensor", id)
			return behavior
		end
	end
	
	
	
	/** \brief Behavior instance. */
	class Instance extends DefaultECBehaviorInstance implements TouchSensorListener
		private class TrackedElement
			var Collider pCollider
			var Element pElement
			
			func new(Collider collider, Element element)
				pCollider = collider
				pElement = element
			end
			
			func Collider getCollider()
				return pCollider
			end
			
			func Element getElement()
				return pElement
			end
		end
		
		
		
		var ECBehaviorTouchSensor pECBehavior
		var ECBehaviorCollider.Instance pCollider
		var TouchSensor pTouchSensor
		var Array pTrackedElements
		var Array pTouchingElements
		var Array pListeners
		
		
		
		/** \brief Create element. */
		func new(ECBehaviorTouchSensor ecbehavior, BehaviorElement element) super(element)
			pECBehavior = ecbehavior
			pTrackedElements = Array.new()
			pListeners = Array.new()
		end
		
		/** \brief Dispose of behavior instance. */
		func void dispose()
			if pTouchSensor != null
				pTouchSensor.setListener(null)
				pTouchSensor = null
			end
			pTouchingElements = null
			pTrackedElements = null
			pCollider = null
			pListeners = null
			
			super.dispose()
		end
		
		
		
		/** \brief Initialize element from stub. */
		func void init(StubElement stub)
			pTouchSensor = createTouchSensor(stub)
			
			if pECBehavior.getCollider() != null
				pCollider = pECBehavior.getCollider().instance(getElement())
			end
			
			if pCollider != null and pCollider.getCollider() != null
				attachTouchSensor(stub, pCollider)
			end
			
			pTouchSensor.setListener(this)
			
			pECBehavior.createListeners(this)
		end
		
		/**
		 * \brief Create touch sensor.
		 */
		protected func TouchSensor createTouchSensor(StubElement stub)
			var TouchSensor touchSensor = TouchSensor.new()
			var BehaviorElement element = getElement()
			
			touchSensor.setPosition(element.getPosition())
			touchSensor.setOrientation(element.getOrientation())
			touchSensor.setCollisionFilter(pECBehavior.getCollisionFilter().getCollisionFilter())
			touchSensor.setTrackEnterLeave(true)
			touchSensor.setEnabled(pECBehavior.getTouching().getValue(stub))
			
			if pECBehavior.getShapeFromSize().getValue(stub)
				var ShapeList shape = ShapeList.new()
				shape.addBox(Vector.new(), stub.getScaling() * 0.5)
				touchSensor.setShape(shape)
				
			else
				touchSensor.setShape(pECBehavior.getShape().getShapeList(stub))
			end
			
			return touchSensor
		end
		
		/**
		 * \brief Attach touch sensor to collider.
		 * 
		 * Default implementation calls ECComposeAttachResource.attach().
		 */
		protected func void attachTouchSensor(StubElement stub, ECBehaviorCollider.Instance collider)
			pECBehavior.getAttach().attach(collider.getCollider(), pTouchSensor, stub)
		end
		
		
		
		/** \brief Behavior. */
		func ECBehaviorTouchSensor getECBehavior()
			return pECBehavior
		end
		
		/** \brief Collider behavior instance or null if not used. */
		func ECBehaviorCollider.Instance getCollider()
			return pCollider
		end
		
		/** \brief Touch sensor. */
		func TouchSensor getTouchSensor()
			return pTouchSensor
		end
		
		
		
		/** \brief Touch sensor is sensing touches. */
		func bool getTouching()
			return pTouchSensor.getEnabled()
		end
		
		/** \brief Set if touch sensor is sensing touches. */
		func void setTouching(bool touching)
			pTouchSensor.setEnabled(touching)
		end
		
		
		
		/** \brief Number of touching elements. */
		func int getTouchingElementCount()
			return pTrackedElements.getCount()
		end
		
		/** \brief Touching element at index. */
		func Element getTouchingElementAt(int index)
			prepareTouchingElements()
			return pTouchingElements.getAt(index) cast Element
		end
		
		/** \brief Element is touching. */
		func bool isElementTouching(Element element)
			prepareTouchingElements()
			return pTouchingElements.has(element)
		end
		
		/** \deprecated Use addTouchingElement(Collider,Element). */
		protected func void addTouchingElement(Element element)
			addTouchingElement(null, element)
		end
		
		/**
		 * \brief Add touching element.
		 * \version 1.19
		 */
		protected func void addTouchingElement(Collider collider, Element element)
			pTrackedElements.add(TrackedElement.new(collider, element))
			pTouchingElements = null
		end
		
		/** \brief Remove touching element. */
		protected func void removeTouchingElement(Element element)
			pTrackedElements.removeIf(block TrackedElement each
				return each.getElement() == element
			end)
			pTouchingElements = null
		end
		
		/** \brief Remove all touching elements. */
		protected func void removeAllTouchingElements()
			pTrackedElements.removeAll()
			pTouchingElements = null
		end
		
		/** \brief Visit touching elements with block with parameter Element. */
		func void forEachTouchingElement(Block ablock)
			prepareTouchingElements()
			pTouchingElements.forEach(ablock)
		end
		
		/** \brief Find touching elements with block with parameter Element. */
		func Element findTouchingElement(Block ablock)
			prepareTouchingElements()
			return pTouchingElements.find(ablock) cast Element
		end
		
		/**
		 * \brief Visit touching elements castable to block parameter.
		 * \version 1.19
		 */
		func void forEachTouchingElementCastable(Block ablock)
			prepareTouchingElements()
			pTouchingElements.forEachCastable(ablock)
		end
		
		/**
		 * \brief Find touching elements castable to block parameter.
		 * \version 1.19
		 */
		func Element findTouchingElementCastable(Block ablock)
			prepareTouchingElements()
			return pTouchingElements.findCastable(ablock) cast Element
		end
		
		/** \brief Visit touching elements with ElementVisitor. */
		func void visitTouchingElements(ElementVisitor visitor)
			pTrackedElements.forEach(block TrackedElement each
				each.getElement().visit(visitor)
			end)
		end
		
		
		
		/** \brief Determine if element can touch this touch sensor. */
		func bool canTouchElement(Element element)
			return pListeners.find(block Listener each
				return not each.elementCanTouch(this, element)
			end) == null
		end
		
		
		
		/** \brief Add listener. */
		func void addListener(Listener listener)
			if listener == null
				throw EInvalidParam.new()
			end
			pListeners.add(listener)
		end
		
		/** \brief Remove listener. */
		func void removeListener(Listener listener)
			pListeners.remove(listener)
		end
		
		
		
		/** \brief Add element to game world. */
		func void addToGameWorld()
			getElement().getGameWorld().getWorld().addTouchSensor(pTouchSensor)
		end
		
		/** \brief Remove element from game world. */
		func void removeFromGameWorld()
			prepareTouchingElements()
			pTrackedElements.removeAll()
			
			pTouchingElements.forEach(block Element element
				pListeners.forEach(block Listener listener
					listener.elementLeft(this, element)
				end)
			end)
			pTouchingElements = null
			
			getElement().getGameWorld().getWorld().removeTouchSensor(pTouchSensor)
		end
		
		
		
		/** \brief Collider entered sensor shape. */
		func void colliderEntered(Collider collider)
			if pTrackedElements.find(block TrackedElement each
				return each.getCollider().equals(collider)
			end) != null
				return
			end
			
			var Object owner = collider.getOwner()
			if not owner castable Element
				return
			end
			
			var Element element = owner cast Element
			if not canTouchElement(element)
				return
			end
			
			pTrackedElements.add(TrackedElement.new(collider, element))
			pTouchingElements = null
			
			pListeners.forEach(block Listener each
				each.elementEntered(this, element)
			end)
		end
		
		/** \brief Collider left sensor shape. */
		func void colliderLeft(Collider collider)
			var TrackedElement tracked = pTrackedElements.find(block TrackedElement each
				return each.getCollider().equals(collider)
			end) cast TrackedElement
			
			if tracked == null
				return
			end
			
			pTrackedElements.remove(tracked)
			pTouchingElements = null
			
			var Element element = tracked.getElement()
			pListeners.forEach(block Listener each
				each.elementLeft(this, element)
			end)
		end
		
		
		
		private func void prepareTouchingElements()
			if pTouchingElements == null
				pTouchingElements = pTrackedElements.map(block TrackedElement each
					return each.getElement()
				end)
			end
		end
		
		
		
		/** \brief Read element from file. */
		func void readFromFile(PersistencyEnvironment env, FileReader reader)
			select reader.readByte() // version
			case 0
				setTouching(env.readBool(reader))
				
			else
				throw EInvalidParam.new("unsupported version")
			end
		end
		
		/** \brief Write element to file. */
		func void writeToFile(PersistencyEnvironment env, FileWriter writer)
			writer.writeByte(0) // version
			
			env.writeBool(writer, getTouching())
		end
	end
	
	
	
	var ECBehaviorCollider pCollider
	var ECComposeCollisionFilter pCollisionFilter
	var ECPShapeList pShape
	var ECPBoolean pShapeFromSize
	var ECPBoolean pTouching
	var ECComposeAttachResource pAttach
	var Array pListenerFactories
	
	
	
	/**
	 * \brief Create behavior element class.
	 * 
	 * These values are optional and can be null: \em collider.
	 */
	func new(BehaviorElementClass eclass, ECBehaviorCollider collider) \
	this(eclass, collider, "")
	end
	
	func new(BehaviorElementClass eclass, ECBehaviorCollider collider, String id) \
	this(eclass, collider, id, id.empty() if "touchSensor." else "touchSensor(" + id + ").")
	end
	
	func new(BehaviorElementClass eclass, ECBehaviorCollider collider, \
	String id, String prefix) super(eclass, id)
		pCollider = collider
		pListenerFactories = Array.new()
		
		pShape = ECPShapeList.new(prefix + "shape", eclass.getCodecPropertyString())
		eclass.addProperty(pShape)
		
		pCollisionFilter = ECComposeCollisionFilter.new()
		pCollisionFilter.setCollisionFilter(CollisionFilter.new(\
			LayerMask.newWith(BaseGameApp.CollisionFilterBit.trigger), \
			LayerMask.newWith(BaseGameApp.CollisionFilterBit.actorAI)))
		
		pShapeFromSize = ECPBoolean.new(prefix + "shapeFromSize", false)
		eclass.addProperty(pShapeFromSize)
		
		pTouching = ECPBoolean.new(prefix + "touching", true)
		eclass.addProperty(pTouching)
		
		pAttach = ECComposeAttachResource.new(eclass, prefix)
		
		eclass.addBehavior(this)
	end
	
	/** \brief Dispose of behavior. */
	func void dispose()
		pCollider = null
		pListenerFactories = null
		super.dispose()
	end
	
	
	
	/** \brief Collider behavior or null if not used. */
	func ECBehaviorCollider getCollider()
		return pCollider
	end
	
	/** \brief Attach resource. */
	func ECComposeAttachResource getAttach()
		return pAttach
	end
	
	/** \brief Collision filter. */
	func ECComposeCollisionFilter getCollisionFilter()
		return pCollisionFilter
	end
	
	/** \brief Touch shape. */
	func ECPShapeList getShape()
		return pShape
	end
	
	/** \brief Use stub element scaling as touch sensor shape. */
	func ECPBoolean getShapeFromSize()
		return pShapeFromSize
	end
	
	/**
	 * \brief Touch sensor is initially touching.
	 * \version 1.19
	 */
	func ECPBoolean getTouching()
		return pTouching
	end
	
	/** \brief Add listener factory. */
	func void addListenerFactory(ListenerFactory factory)
		if factory == null
			throw ENullPointer.new()
		end
		pListenerFactories.add(factory)
	end
	
	/**
	 * \brief Add listener factory using block.
	 * 
	 * Block receives as parameter Instance and returns Listener.
	 */
	func void addListenerFactory(Block blockFactory)
		pListenerFactories.add(BlockListenerFactory.new(blockFactory))
	end
	
	/** \brief Visit listener factories with block with argument ListenerFactory. */
	func void forEachListenerFactory(Block ablock)
		pListenerFactories.forEach(ablock)
	end
	
	/** \brief Create listeners from factories adding them to behavior instance. */
	func void createListeners(Instance instance)
		pListenerFactories.forEach(block ListenerFactory each
			instance.addListener(each.createListener(instance))
		end)
	end
	
	
	
	/** \brief Get instance in element from owner element class. */
	func Instance instance(BehaviorElement element)
		return element.getInstanceAt(getInstanceIndex()) cast Instance
	end
	
	
	
	/**
	 * \brief Get behavior in element class or \em null if absent.
	 * 
	 * Use this method to check if a particular BehaviorElementClass contains a behavior
	 * of type ECBehaviorCollider.
	 */
	static func ECBehaviorTouchSensor getBehaviorIn(BehaviorElementClass eclass)
		return eclass.findBehavior(block ECBehaviorTouchSensor each
			return true
		end) cast ECBehaviorTouchSensor
	end
	
	/**
	 * \brief Get behavior with id in element class or \em null if absent.
	 * 
	 * Use this method to check if a particular BehaviorElementClass contains a behavior
	 * of type ECBehaviorTouchSensor with specific identifier.
	 */
	static func ECBehaviorTouchSensor getBehaviorIn(BehaviorElementClass eclass, String id)
		return eclass.findBehavior(block ECBehaviorTouchSensor each
			return each.getID().equals(id)
		end) cast ECBehaviorTouchSensor
	end
	
	/**
	 * \brief Get list of all behaviors in element.
	 * 
	 * Returns list contains ECBehaviorTouchSensor behaviors in the order they have
	 * been created in the element.
	 */
	static func Array getAllBehaviorsIn(BehaviorElementClass eclass)
		return eclass.collectBehaviors(block ECBehaviorTouchSensor each
			return true
		end)
	end
	
	
	
	/**
	 * \brief Get instance in element or \em null if absent.
	 * 
	 * Use this method to check if a particular BehaviorElement contains a behavior instance
	 * of type ECBehaviorTouchSensor.Instance . If more than one instance is present returns
	 * the first instance.
	 */
	static func Instance getInstanceIn(BehaviorElement element)
		return element.findInstance(block Instance each
			return true
		end) cast Instance
	end
	
	/**
	 * \brief Get instance with id in element or \em null if absent.
	 * 
	 * Use this method to check if a particular BehaviorElement contains a behavior instance
	 * of type ECBehaviorTouchSensor.Instance with specific identifier.
	 */
	static func Instance getInstanceIn(BehaviorElement element, String id)
		return element.findInstance(block Instance each
			return each.getECBehavior().getID().equals(id)
		end) cast Instance
	end
	
	/**
	 * \brief Get list of all instances in element.
	 * 
	 * Returns list contains ECBehaviorTouchSensor.Instance instances in the order they have
	 * been created in the element.
	 */
	static func Array getAllInstancesIn(BehaviorElement element)
		return element.collectInstances(block Instance each
			return true
		end)
	end
	
	
	
	/** \brief Create Behavior instance. */
	func ECBehaviorInstance createInstance(BehaviorElement element)
		return Instance.new(this, element)
	end
end
