/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */


namespace Dragengine.Scenery

pin Dragengine.Gui
pin Dragengine.LoadSave
pin Dragengine.Preloading
pin Dragengine.Utils
pin Dragengine.TriggerSystem
pin Dragengine.BehaviorTreeSystem
pin Dragengine.StateMachineSystem


/**
 * \brief Behavior element behavior evaluating trigger expression.
 * 
 * Fires and resets a trigger target depending on the evaluation state of a trigger expression.
 * Optionally pulses trigger target instead of just firing it.
 * 
 * Element class properties have the prefix "evaluate{(id)}.".
 * 
 * This behavior does not require the element class to be persistable (setPersistable).
 * 
 * \see https://developer.dragondreams.ch/wiki/doku.php/dragengine:modules:dragonscript:behavior_evaluate
 */
class ECBehaviorEvaluate extends DefaultECBehavior
	/** \brief Listener for behavior instance events. */
	interface Listener
		/** \brief Trigger expression changed to true. */
		func void evaluatesTrue(Instance instance)
		
		/** \brief Trigger expression changed to false. */
		func void evaluatesFalse(Instance instance)
	end
	
	/** \brief Default implementation of behavior instance listener. */
	class DefaultListener implements Listener
		/** \brief Create default listener. */
		func new()
		end
		
		/** \brief Trigger expression changed to true. */
		func void evaluatesTrue(Instance instance)
		end
		
		/** \brief Trigger expression changed to false. */
		func void evaluatesFalse(Instance instance)
		end
	end
	
	/** \brief Implementation of behavior instance listener using BooleanBehaviorListener. */
	class BooleanListener extends DefaultListener
		var BooleanBehaviorListener pListener
		
		func new(BooleanBehaviorListener listener)
			pListener = listener
		end
		
		func void evaluatesTrue(Instance instance)
			pListener.enabled()
		end
		
		func void evaluatesFalse(Instance instance)
			pListener.disabled()
		end
	end
	
	/** \brief Factory creating listeners. */
	interface ListenerFactory
		/** \brief Create listener. */
		func Listener createListener(Instance instance)
	end
	
	/** \brief Factory creating listeners using block. */
	class BlockListenerFactory implements ListenerFactory
		var Block pBlock
		
		/** \brief Create factory using block receiving Instance as parameter returning Listener. */
		func new(Block blockFactory)
			if blockFactory == null
				throw ENullPointer.new()
			end
			pBlock = blockFactory
		end
		
		/** \brief Create listener. */
		func Listener createListener(Instance instance)
			return pBlock.run(instance) cast Listener
		end
	end
	
	/**
	 * \brief Behavior factory.
	 * \version 1.25
	 * 
	 * Example XML element class:
	 * \code{.xml}
	 * <behavior type='ECBehaviorEvaluate'>
	 *   <!-- optional: use BaseGameApp trigger table. game can add more supported values.
	 *                  default is 'default' -->
	 *   <string name='triggerTable'>default</string>
	 *   
	 *   <!-- optional: identifier of ECBehaviorTriggered to synchronize with or empty
	 *                  string to not synchronize. default is empty string. -->
	 *   <string name='trigger.synchronize'>other</string>
	 *   
	 *   <!-- optional: add behavior trees. default adds all behavior trees. -->
	 *   <list name='behaviorTrees'>
	 *     <string/> <!-- add behavior with empty identifier -->
	 *     <string>default</string> <!-- add behavior with 'default' identifier -->
	 *   </list>
	 * 
	 *   <!-- optional: add state machines. default adds all state machines. -->
	 *   <list name='stateMachines'>
	 *     <string/> <!-- add behavior with empty identifier -->
	 *     <string>default</string> <!-- add behavior with 'default' identifier -->
	 *   </list>
	 * </behavior>
	 * 
	 * <!-- for adding multiple behaviors use unique identifiers -->
	 * <behavior type='ECBehaviorEvaluate' id='second'>
	 *   ...
	 * </behavior>
	 * \endcode
	 * 
	 * Element class properties added by the behavior can also be set directly inside the tag
	 * be removing the property name prefix and starting with a "." (for example ".propertyName").
	 */
	class Factory implements BehaviorFactory
		func new()
		end
		
		func String factoryId()
			return "ECBehaviorEvaluate"
		end
		
		func ECBehavior addBehavior(BehaviorElementClass eclass, String id, Dictionary parameters)
			var ECBehaviorEvaluate behavior = ECBehaviorEvaluate.new(eclass,\
				getTriggerTableFor(parameters.getAt("triggerTable", "default") cast String), id)
			
			behavior.getTriggered().setSynchronize(eclass,\
				parameters.getAt("trigger.synchronize", null) cast String)
			
			eclass.sharedFactoryHelper.allBTSM(behavior.getBTSMs(), eclass, parameters)
			
			eclass.sharedFactoryHelper.setPropertiesFromParameters(eclass, parameters, "evaluate", id)
			return behavior
		end
		
		/**
		 * \brief Trigger table matching value.
		 * 
		 * Default implementation returns \ref BaseGameApp#getTriggerTable() for value 'default'
		 * and null for all other values. Overwrite to accept other values.
		 */
		func TSTriggerTable getTriggerTableFor(String value)
			return BehaviorElementClass.sharedFactoryHelper.triggerTable(value)
		end
	end
	
	
	
	/** \brief Behavior instance. */
	class Instance extends DefaultECBehaviorInstance
		/**
		 * \brief Behavior tree action/condition "evaluate{(id)}.check".
		 * \version 1.26
		 */
		private class BTACheck extends BTSMActionCondition
			var Instance pInstance
			var String pPrefix
			
			func new(Instance instance, String prefix)
				pInstance = instance
				pPrefix = prefix
			end
			
			func BTResult runActionShared(Object context, Dictionary parameters)
				return check("", parameters) if BTResult.success\
					else (parameters.has("wait") if BTResult.running else BTResult.failure)
			end
			
			func bool evaluateConditionShared(Object context, Dictionary parameters)
				return check(pPrefix, parameters)
			end
			
			func bool check(String prefix, Dictionary parameters)
				var bool result = true
				var Object value
				
				value = parameters.getAt(prefix + "trigger", null)
				if value != null
					result &= pInstance.getTrigger().getState() == value.equals("true")
				end
				
				value = parameters.getAt(prefix + "target.fired", null)
				if value != null
					result &= pInstance.getTarget().getFired() == value.equals("true")
				end
				
				value = parameters.getAt(prefix + "target.everFired", null)
				if value != null
					result &= pInstance.getTarget().getHasFired() == value.equals("true")
				end
				
				return result
			end
		end
		
		/** \brief Trigger listener. */
		private class EvaluateListener extends ECBehaviorTriggered.DefaultListener
			var Instance pInstance
			
			func new(Instance instance)
				pInstance = instance
			end
			
			func void triggerExpressionTrue(ECBehaviorTriggered.Instance instance)
				pInstance.evaluate()
			end
			
			func void triggerExpressionFalse(ECBehaviorTriggered.Instance instance)
				pInstance.evaluate()
			end
		end
		
		
		
		var ECBehaviorEvaluate pECBehavior
		var ECBehaviorTriggered.Instance pTrigger
		var TSNamedTriggerTarget pTarget
		var bool pPulse
		var Array pListeners
		var ECComposeBTSM.Instance pBTSMs
		
		
		
		/** \brief Create element. */
		func new(ECBehaviorEvaluate ecbehavior, BehaviorElement element) super(element)
			pECBehavior = ecbehavior
			pPulse = false
			pListeners = Array.new()
		end
		
		/** \brief Dispose of composeable instance. */
		func void dispose()
			pTarget = null
			pTrigger = null
			pListeners = null
			pBTSMs = null
			
			super.dispose()
		end
		
		
		
		/** \brief Initialize element from stub. */
		func void init(StubElement stub)
			if pECBehavior.getTriggerTable() == null
				return
			end
			
			var BehaviorElement element = getElement()
			
			pTrigger = pECBehavior.getTriggered().synchronizedOrSelf().instance(element)
			pTrigger.addListener(EvaluateListener.new(this))
			
			pTarget = TSNamedTriggerTarget.new(pECBehavior.getTarget().getValue(stub))
			pPulse = pECBehavior.getPulse().getValue(stub)
			
			pECBehavior.createListeners(this)
			
			if pECBehavior.getBTSMs().hasAny()
				var String prefix = pECBehavior.getPrefix()
				pBTSMs = ECComposeBTSM.Instance.new(element, pECBehavior.getBTSMs())
				pBTSMs.addAllActionCondition(prefix + "check", BTACheck.new(this, prefix))
				pBTSMs.dropBTContexts()
			end
		end
		
		
		
		/** \brief Behavior. */
		func ECBehaviorEvaluate getECBehavior()
			return pECBehavior
		end
		
		/** \brief Trigger or \em null. */
		func ECBehaviorTriggered.Instance getTrigger()
			return pTrigger
		end
		
		/** \brief Trigger target or \em null. */
		func TSNamedTriggerTarget getTarget()
			return pTarget
		end
		
		/** \brief Pulse trigger target instead of fire. */
		func bool getPulse()
			return pPulse
		end
		
		
		
		/** \brief Evaluate trigger expression. */
		func void evaluate()
			if pTrigger.getState()
				if pTarget != null
					if pPulse
						pTarget.pulse()
						
					else
						pTarget.fire()
					end
				end
				
				pListeners.forEach(block Listener each
					each.evaluatesTrue(this)
				end)
				if pBTSMs != null
					pBTSMs.runEvent(pECBehavior.getPrefix() + "true")
				end
				
			else
				if pTarget != null
					pTarget.reset()
				end
				
				pListeners.forEach(block Listener each
					each.evaluatesFalse(this)
				end)
				if pBTSMs != null
					pBTSMs.runEvent(pECBehavior.getPrefix() + "false")
				end
			end
		end
		
		
		
		/** \brief Add listener. */
		func void addListener(Listener listener)
			if listener == null
				throw EInvalidParam.new()
			end
			pListeners.add(listener)
		end
		
		/** \brief Remove listener. */
		func void removeListener(Listener listener)
			pListeners.remove(listener)
		end
		
		
		
		/** \brief Add element to game world. */
		func void addToGameWorld()
			if pTarget == null
				return
			end
			
			pTarget.acquireTarget(pECBehavior.getTriggerTable())
			
			// this is required because ECBehaviorTriggered runs right before us
			if pTrigger.getState()
				if pPulse
					pTarget.pulse()
					
				else
					pTarget.fire()
				end
			end
		end
		
		/** \brief Remove element from game world. */
		func void removeFromGameWorld()
			if pTarget != null
				pTarget.dropTarget()
			end
		end
	end
	
	
	
	var ECBehaviorTriggered pTriggered
	var ECPString pTarget
	var ECPBoolean pPulse
	var TSTriggerTable pTriggerTable
	var Array pListenerFactories
	var ECComposeBTSM pBTSMs
	var String pPrefix
	
	
	
	/** \brief Create behavior element class. */
	func new(BehaviorElementClass eclass) \
	this(eclass, BaseGameApp.getApp().getTriggerTable(), "")
	end
	
	func new(BehaviorElementClass eclass, String id) \
	this(eclass, BaseGameApp.getApp().getTriggerTable(), id)
	end
	
	func new(BehaviorElementClass eclass, TSTriggerTable triggerTable) \
	this(eclass, triggerTable, "")
	end
	
	func new(BehaviorElementClass eclass, TSTriggerTable triggerTable, String id) \
	this(eclass, triggerTable, id, id.empty() if "evaluate" else "evaluate(" + id + ")")
	end
	
	func new(BehaviorElementClass eclass, TSTriggerTable triggerTable, String id, String subID) \
	this(eclass, triggerTable, id, subID, subID + ".")
	end
	
	func new(BehaviorElementClass eclass, TSTriggerTable triggerTable, \
	String id, String subID, String prefix) super(eclass, id)
		pPrefix = prefix
		pTriggerTable = triggerTable
		pBTSMs = ECComposeBTSM.new()
		
		pTriggered = ECBehaviorTriggered.new(eclass, triggerTable, subID, prefix + "trigger")
		pListenerFactories = Array.new()
		
		pTarget = ECPString.new(prefix + "target", null)
		eclass.addProperty(pTarget)
		
		pPulse = ECPBoolean.new(prefix + "pulse", false)
		eclass.addProperty(pPulse)
		
		eclass.addBehavior(this)
	end
	
	/** \brief Dispose of behavior. */
	func void dispose()
		pListenerFactories = null
		pBTSMs = null
		super.dispose()
	end
	
	
	
	/**
	 * \brief Prefix.
	 * \version 1.26
	 */
	func String getPrefix()
		return pPrefix
	end
	
	/** \brief Trigger to evaluate. */
	func ECBehaviorTriggered getTriggered()
		return pTriggered
	end
	
	/** \brief Trigger target to operate. */
	func ECPString getTarget()
		return pTarget
	end
	
	/** \brief Pulse trigger target instead of fire it. */
	func ECPBoolean getPulse()
		return pPulse
	end
	
	/** \brief Trigger table or \em null if not used. */
	func TSTriggerTable getTriggerTable()
		return pTriggerTable
	end
	
	/** \brief Set trigger table or \em null if not used. */
	protected func void setTriggerTable(TSTriggerTable triggerTable)
		pTriggerTable = triggerTable
	end
	
	/**
	 * \brief Compose behavior trees and state machines.
	 * \version 1.26
	 */
	func ECComposeBTSM getBTSMs()
		return pBTSMs
	end
	
	/** \brief Add listener factory. */
	func void addListenerFactory(ListenerFactory factory)
		if factory == null
			throw ENullPointer.new()
		end
		pListenerFactories.add(factory)
	end
	
	/**
	 * \brief Add listener factory using block.
	 * 
	 * Block receives as parameter Instance and returns Listener.
	 */
	func void addListenerFactory(Block blockFactory)
		pListenerFactories.add(BlockListenerFactory.new(blockFactory))
	end
	
	/** \brief Visit listener factories with block with argument ListenerFactory. */
	func void forEachListenerFactory(Block ablock)
		pListenerFactories.forEach(ablock)
	end
	
	/** \brief Create listeners from factories adding them to behavior instance. */
	func void createListeners(Instance instance)
		pListenerFactories.forEach(block ListenerFactory each
			instance.addListener(each.createListener(instance))
		end)
	end
	
	
	
	/** \brief Get instance in element from owner element class. */
	func Instance instance(BehaviorElement element)
		return element.getInstanceAt(getInstanceIndex()) cast Instance
	end
	
	
	
	/**
	 * \brief Get behavior in element class or \em null if absent.
	 * 
	 * Use this method to check if a particular BehaviorElementClass contains a behavior
	 * of type ECBehaviorComponent.
	 */
	static func ECBehaviorEvaluate getBehaviorIn(BehaviorElementClass eclass)
		return eclass.findBehavior(block ECBehaviorEvaluate each
			return true
		end) cast ECBehaviorEvaluate
	end
	
	/**
	 * \brief Get behavior with id in element class or \em null if absent.
	 * 
	 * Use this method to check if a particular BehaviorElementClass contains a behavior
	 * of type ECBehaviorEvaluate with specific identifier.
	 */
	static func ECBehaviorEvaluate getBehaviorIn(BehaviorElementClass eclass, String id)
		return eclass.findBehavior(block ECBehaviorEvaluate each
			return each.getID().equals(id)
		end) cast ECBehaviorEvaluate
	end
	
	/**
	 * \brief Get list of all behaviors in element.
	 * 
	 * Returns list contains ECBehaviorEvaluate behaviors in the order they have
	 * been created in the element.
	 */
	static func Array getAllBehaviorsIn(BehaviorElementClass eclass)
		return eclass.collectBehaviors(block ECBehaviorEvaluate each
			return true
		end)
	end
	
	
	
	/**
	 * \brief Get instance in element or \em null if absent.
	 * 
	 * Use this method to check if a particular BehaviorElement contains a behavior instance
	 * of type ECBehaviorEvaluate.Instance . If more than one instance is present returns
	 * the first instance.
	 */
	static func Instance getInstanceIn(BehaviorElement element)
		return element.findInstance(block Instance each
			return true
		end) cast Instance
	end
	
	/**
	 * \brief Get instance with id in element or \em null if absent.
	 * 
	 * Use this method to check if a particular BehaviorElement contains a behavior instance
	 * of type ECBehaviorEvaluate.Instance with specific identifier.
	 */
	static func Instance getInstanceIn(BehaviorElement element, String id)
		return element.findInstance(block Instance each
			return each.getECBehavior().getID().equals(id)
		end) cast Instance
	end
	
	/**
	 * \brief Get list of all instances in element.
	 * 
	 * Returns list contains ECBehaviorEvaluate.Instance instances in the order they have
	 * been created in the element.
	 */
	static func Array getAllInstancesIn(BehaviorElement element)
		return element.collectInstances(block Instance each
			return true
		end)
	end
	
	
	
	/** \brief Create Behavior instance. */
	func ECBehaviorInstance createInstance(BehaviorElement element)
		return Instance.new(this, element)
	end
end
