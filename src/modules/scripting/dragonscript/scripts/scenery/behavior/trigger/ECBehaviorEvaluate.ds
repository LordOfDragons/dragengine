/* 
 * Drag[en]gine DragonScript Script Module
 *
 * Copyright (C) 2020, Roland Pl√ºss (roland@rptd.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */


namespace Dragengine.Scenery

pin Dragengine.Gui
pin Dragengine.LoadSave
pin Dragengine.Preloading
pin Dragengine.Utils
pin Dragengine.TriggerSystem


/**
 * \brief Behavior element behavior evaluating trigger expression.
 * 
 * Fires and resets a trigger target depending on the evaluation state of a trigger expression.
 * Optionally pulses trigger target instead of just firing it.
 * 
 * Element class properties have the prefix "evaluate{(id)}.".
 * 
 * This behavior does not require the element class to be persistable (setPersistable).
 */
class ECBehaviorEvaluate extends DefaultECBehavior
	/** \brief Listener for behavior instance events. */
	interface Listener
		/** \brief Trigger expression changed to true. */
		func void evaluatesTrue( Instance instance )
		
		/** \brief Trigger expression changed to false. */
		func void evaluatesFalse( Instance instance )
	end
	
	/** \brief Default implementation of behavior instance listener. */
	class DefaultListener implements Listener
		/** \brief Create default listener. */
		public func new()
		end
		
		/** \brief Trigger expression changed to true. */
		public func void evaluatesTrue( Instance instance )
		end
		
		/** \brief Trigger expression changed to false. */
		public func void evaluatesFalse( Instance instance )
		end
	end
	
	/** \brief Implementation of behavior instance listener using BooleanBehaviorListener. */
	class BooleanListener extends DefaultListener
		private var BooleanBehaviorListener pListener
		
		public func new( BooleanBehaviorListener listener )
			this.pListener = listener
		end
		
		public func void evaluatesTrue( Instance instance )
			this.pListener.enabled()
		end
		
		public func void evaluatesFalse( Instance instance )
			this.pListener.disabled()
		end
	end
	
	/** \brief Factory creating listeners. */
	interface ListenerFactory
		/** \brief Create listener. */
		func Listener createListener( Instance instance )
	end
	
	/** \brief Factory creating listeners using block. */
	class BlockListenerFactory implements ListenerFactory
		private var Block pBlock
		
		/** \brief Create factory using block receiving Instance as parameter returning Listener. */
		public func new( Block blockFactory )
			if blockFactory == null
				throw ENullPointer.new()
			end
			this.pBlock = blockFactory
		end
		
		/** \brief Create listener. */
		public func Listener createListener( Instance instance )
			return this.pBlock.run( instance ) cast Listener
		end
	end
	
	
	
	/** \brief Behavior instance. */
	class Instance extends DefaultECBehaviorInstance
		/** \brief Trigger listener. */
		public class EvaluateListener extends ECBehaviorTriggered.DefaultListener
			private var Instance pInstance
			
			public func new( Instance instance )
				this.pInstance = instance
			end
			
			public func void triggerExpressionTrue( ECBehaviorTriggered.Instance instance )
				this.pInstance.evaluate()
			end
			
			public func void triggerExpressionFalse( ECBehaviorTriggered.Instance instance )
				this.pInstance.evaluate()
			end
		end
		
		
		
		private var ECBehaviorEvaluate pECBehavior
		private var ECBehaviorTriggered.Instance pTrigger
		private var TSNamedTriggerTarget pTarget
		private var bool pPulse
		private var Array pListeners
		
		
		
		/** \brief Create element. */
		public func new( ECBehaviorEvaluate ecbehavior, BehaviorElement element ) super( element )
			this.pECBehavior = ecbehavior
			this.pPulse = false
			this.pListeners = Array.new()
		end
		
		/** \brief Dispose of composeable instance. */
		public func void dispose()
			this.pTarget = null
			this.pTrigger = null
			this.pListeners = null
			
			super.dispose()
		end
		
		
		
		/** \brief Initialize element from stub. */
		public func void init( StubElement stub )
			if this.pECBehavior.getTriggerTable() == null
				return
			end
			
			this.pTrigger = this.pECBehavior.getTriggered().instance( this.getElement() )
			this.pTrigger.addListener( EvaluateListener.new( this ) )
			
			this.pTarget = TSNamedTriggerTarget.new( this.pECBehavior.getTarget().getValue( stub ) )
			this.pPulse = this.pECBehavior.getPulse().getValue( stub )
			
			this.pECBehavior.createListeners( this )
		end
		
		
		
		/** \brief Behavior. */
		public func ECBehaviorEvaluate getECBehavior()
			return this.pECBehavior
		end
		
		/** \brief Trigger or \em null. */
		public func ECBehaviorTriggered.Instance getTrigger()
			return this.pTrigger
		end
		
		/** \brief Trigger target or \em null. */
		public func TSNamedTriggerTarget getTarget()
			return this.pTarget
		end
		
		/** \brief Pulse trigger target instead of fire. */
		public func bool getPulse()
			return this.pPulse
		end
		
		
		
		/** \brief Evaluate trigger expression. */
		public func void evaluate()
			if this.pTrigger.getState()
				if this.pTarget != null
					if this.pPulse
						this.pTarget.pulse()
						
					else
						this.pTarget.fire()
					end
				end
				
				this.pListeners.forEach( block Listener each
					each.evaluatesTrue( this )
				end )
				
			else
				if this.pTarget != null
					this.pTarget.reset()
				end
				
				this.pListeners.forEach( block Listener each
					each.evaluatesFalse( this )
				end )
			end
		end
		
		
		
		/** \brief Add listener. */
		public func void addListener( Listener listener )
			if listener == null
				throw EInvalidParam.new()
			end
			this.pListeners.add( listener )
		end
		
		/** \brief Remove listener. */
		public func void removeListener( Listener listener )
			this.pListeners.remove( listener )
		end
		
		
		
		/** \brief Add element to game world. */
		public func void addToGameWorld()
			if this.pTarget != null
				this.pTarget.acquireTarget( this.pECBehavior.getTriggerTable() )
			end
		end
		
		/** \brief Remove element from game world. */
		public func void removeFromGameWorld()
			if this.pTarget != null
				this.pTarget.dropTarget()
			end
		end
	end
	
	
	
	private var ECBehaviorTriggered pTriggered
	private var ECPString pTarget
	private var ECPBoolean pPulse
	private var TSTriggerTable pTriggerTable
	private var Array pListenerFactories
	
	
	
	/** \brief Create behavior element class. */
	public func new( BehaviorElementClass eclass ) \
	this( eclass, BaseGameApp.getApp().getTriggerTable(), "" )
	end
	
	public func new( BehaviorElementClass eclass, String id ) \
	this( eclass, BaseGameApp.getApp().getTriggerTable(), id )
	end
	
	public func new( BehaviorElementClass eclass, TSTriggerTable triggerTable ) \
	this( eclass, triggerTable, "" )
	end
	
	public func new( BehaviorElementClass eclass, TSTriggerTable triggerTable, String id ) \
	this( eclass, triggerTable, id, id.empty() if "evaluate" else "evaluate(" + id + ")" )
	end
	
	public func new( BehaviorElementClass eclass, TSTriggerTable triggerTable, String id, String subID ) \
	this( eclass, triggerTable, id, subID, subID + "." )
	end
	
	public func new( BehaviorElementClass eclass, TSTriggerTable triggerTable, \
	String id, String subID, String prefix ) super( eclass, id )
		this.pTriggerTable = triggerTable
		
		this.pTriggered = ECBehaviorTriggered.new( eclass, triggerTable, subID, prefix + "trigger" )
		this.pListenerFactories = Array.new()
		
		this.pTarget = ECPString.new( prefix + "target", null )
		eclass.addProperty( this.pTarget )
		
		this.pPulse = ECPBoolean.new( prefix + "pulse", false )
		eclass.addProperty( this.pPulse )
		
		eclass.addBehavior( this )
	end
	
	/** \brief Dispose of behavior. */
	public func void dispose()
		this.pListenerFactories = null
		super.dispose()
	end
	
	
	
	/** \brief Trigger to evaluate. */
	public func ECBehaviorTriggered getTriggered()
		return this.pTriggered
	end
	
	/** \brief Trigger target to operate. */
	public func ECPString getTarget()
		return this.pTarget
	end
	
	/** \brief Pulse trigger target instead of fire it. */
	public func ECPBoolean getPulse()
		return this.pPulse
	end
	
	/** \brief Trigger table or \em null if not used. */
	public func TSTriggerTable getTriggerTable()
		return this.pTriggerTable
	end
	
	/** \brief Set trigger table or \em null if not used. */
	protected func void setTriggerTable( TSTriggerTable triggerTable )
		this.pTriggerTable = triggerTable
	end
	
	/** \brief Add listener factory. */
	public func void addListenerFactory( ListenerFactory factory )
		if factory == null
			throw ENullPointer.new()
		end
		this.pListenerFactories.add( factory )
	end
	
	/**
	 * \brief Add listener factory using block.
	 * 
	 * Block receives as parameter Instance and returns Listener.
	 */
	public func void addListenerFactory( Block blockFactory )
		this.pListenerFactories.add( BlockListenerFactory.new( blockFactory ) )
	end
	
	/** \brief Visit listener factories with block with argument ListenerFactory. */
	public func void forEachListenerFactory( Block ablock )
		this.pListenerFactories.forEach( ablock )
	end
	
	/** \brief Create listeners from factories adding them to behavior instance. */
	public func void createListeners( Instance instance )
		this.pListenerFactories.forEach( block ListenerFactory each
			instance.addListener( each.createListener( instance ) )
		end )
	end
	
	
	
	/** \brief Get instance in element from owner element class. */
	public func Instance instance( BehaviorElement element )
		return element.getInstanceAt( this.getInstanceIndex() ) cast Instance
	end
	
	
	
	/**
	 * \brief Get behavior in element class or \em null if absent.
	 * 
	 * Use this method to check if a particular BehaviorElementClass contains a behavior
	 * of type ECBehaviorComponent.
	 */
	static public func ECBehaviorEvaluate getBehaviorIn( BehaviorElementClass eclass )
		return eclass.findBehavior( block ECBehaviorEvaluate each
			return true
		end ) cast ECBehaviorEvaluate
	end
	
	/**
	 * \brief Get behavior with id in element class or \em null if absent.
	 * 
	 * Use this method to check if a particular BehaviorElementClass contains a behavior
	 * of type ECBehaviorEvaluate with specific identifier.
	 */
	static public func ECBehaviorEvaluate getBehaviorIn( BehaviorElementClass eclass, String id )
		return eclass.findBehavior( block ECBehaviorEvaluate each
			return each.getID().equals( id )
		end ) cast ECBehaviorEvaluate
	end
	
	/**
	 * \brief Get list of all behaviors in element.
	 * 
	 * Returns list contains ECBehaviorEvaluate behaviors in the order they have
	 * been created in the element.
	 */
	static public func Array getAllBehaviorsIn( BehaviorElementClass eclass )
		return eclass.collectBehaviors( block ECBehaviorEvaluate each
			return true
		end )
	end
	
	
	
	/**
	 * \brief Get instance in element or \em null if absent.
	 * 
	 * Use this method to check if a particular BehaviorElement contains a behavior instance
	 * of type ECBehaviorEvaluate.Instance . If more than one instance is present returns
	 * the first instance.
	 */
	static public func Instance getInstanceIn( BehaviorElement element )
		return element.findInstance( block Instance each
			return true
		end ) cast Instance
	end
	
	/**
	 * \brief Get instance with id in element or \em null if absent.
	 * 
	 * Use this method to check if a particular BehaviorElement contains a behavior instance
	 * of type ECBehaviorEvaluate.Instance with specific identifier.
	 */
	static public func Instance getInstanceIn( BehaviorElement element, String id )
		return element.findInstance( block Instance each
			return each.getECBehavior().getID().equals( id )
		end ) cast Instance
	end
	
	/**
	 * \brief Get list of all instances in element.
	 * 
	 * Returns list contains ECBehaviorEvaluate.Instance instances in the order they have
	 * been created in the element.
	 */
	static public func Array getAllInstancesIn( BehaviorElement element )
		return element.collectInstances( block Instance each
			return true
		end )
	end
	
	
	
	/** \brief Create Behavior instance. */
	public func ECBehaviorInstance createInstance( BehaviorElement element )
		return Instance.new( this, element )
	end
end
