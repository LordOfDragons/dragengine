/* 
 * Drag[en]gine DragonScript Script Module
 *
 * Copyright (C) 2020, Roland Pl√ºss (roland@rptd.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */


namespace Dragengine.Scenery

pin Dragengine.Gui
pin Dragengine.LoadSave
pin Dragengine.Preloading
pin Dragengine.Utils
pin Dragengine.TriggerSystem


/**
 * \brief Behavior element behavior adding trigger support.
 * 
 * Adds a trigger expression to the behavior element. If the trigger expression changes value
 * notifies the behavior element or other behaviors using listeners.
 * 
 * The default stub property name for the trigger expression is "trigger" if ID is empty
 * or "{id}.trigger" if the ID is not empty. The stub property name can be changed which
 * is typically done by ECBehavior using ECBehaviorTriggered in a composed way.
 * 
 * The initial state of the element is "false". If the element is added to the game world
 * notifyListeners() is only called if the trigger expression is "true" at this time.
 * 
 * Element class property is named "trigger{(id)}".
 * 
 * This behavior does not require the element class to be persistable (setPersistable).
 */
class ECBehaviorTriggered extends DefaultECBehavior
	/** \brief Listener for behavior instance events. */
	interface Listener
		/** \brief Trigger expression changed to true. */
		func void triggerExpressionTrue( Instance instance )
		
		/** \brief Trigger expression changed to false. */
		func void triggerExpressionFalse( Instance instance )
	end
	
	/** \brief Default implementation of behavior instance listener. */
	class DefaultListener implements Listener
		/** \brief Create default listener. */
		public func new()
		end
		
		/** \brief Trigger expression changed to true. */
		public func void triggerExpressionTrue( Instance instance )
		end
		
		/** \brief Trigger expression changed to false. */
		public func void triggerExpressionFalse( Instance instance )
		end
	end
	
	/** \brief Implementation of behavior instance listener using BooleanBehaviorListener. */
	class BooleanListener extends DefaultListener
		private var BooleanBehaviorListener pListener
		
		public func new( BooleanBehaviorListener listener )
			this.pListener = listener
		end
		
		public func void triggerExpressionTrue( Instance instance )
			this.pListener.enabled()
		end
		
		public func void triggerExpressionFalse( Instance instance )
			this.pListener.disabled()
		end
	end
	
	/** \brief Factory creating listeners. */
	interface ListenerFactory
		/** \brief Create listener. */
		func Listener createListener( Instance instance )
	end
	
	/** \brief Factory creating listeners using block. */
	class BlockListenerFactory implements ListenerFactory
		private var Block pBlock
		
		/** \brief Create factory using block receiving Instance as parameter returning Listener. */
		public func new( Block blockFactory )
			if blockFactory == null
				throw ENullPointer.new()
			end
			this.pBlock = blockFactory
		end
		
		/** \brief Create listener. */
		public func Listener createListener( Instance instance )
			return this.pBlock.run( instance ) cast Listener
		end
	end
	
	/** \brief Behavior instance. */
	class Instance extends DefaultECBehaviorInstance
		/** \brief Trigger listener. */
		public class TriggedListener implements TSTriggerListener
			private var Instance pInstance
			
			public func new( Instance instance )
				this.pInstance = instance
			end
			
			public func void triggerTargetChanged( TSTriggerTarget target )
				if this.pInstance.getTriggerExpression().evaluate()
					this.pInstance.notifyListeners()
				end
			end
		end
		
		
		
		private var ECBehaviorTriggered pECBehavior
		private var TSTriggerExpression pTriggerExpression
		private var TSTriggerTable pTriggerTable
		private var Array pListeners
		
		
		
		/** \brief Create element. */
		public func new( ECBehaviorTriggered ecbehavior, BehaviorElement element ) super( element )
			this.pECBehavior = ecbehavior
			this.pTriggerTable = ecbehavior.getTriggerTable()
			this.pListeners = Array.new()
		end
		
		/** \brief Dispose of composeable instance. */
		public func void dispose()
			this.pTriggerExpression = null
			this.pListeners = null
			
			super.dispose()
		end
		
		
		
		/** \brief Initialize element from stub. */
		public func void init( StubElement stub )
			var String value = this.pECBehavior.getTrigger().getValue( stub )
			if value.empty()
				return
			end
			
			this.pTriggerExpression = this.getElement().getClass() \
				.getTriggerExpressionParser().stringToExpression( value )
			
			this.pECBehavior.createListeners( this )
		end
		
		
		
		/** \brief Behavior. */
		public func ECBehaviorTriggered getECBehavior()
			return this.pECBehavior
		end
		
		
		
		/** \brief Trigger expression state. */
		public func bool getState()
			if this.pTriggerExpression != null
				return this.pTriggerExpression.getResult()
				
			else
				return false
			end
		end
		
		/** \brief Trigger expression state or default value if absent. */
		public func bool getState( bool defaultValue )
			if this.pTriggerExpression != null
				return this.pTriggerExpression.getResult()
				
			else
				return defaultValue
			end
		end
		
		
		
		/** \brief Trigger table to link trigger expression to. */
		public func TSTriggerTable getTriggerTable()
			return this.pTriggerTable
		end
		
		/** \brief Trigger table to link trigger expression to. */
		protected func void setTriggerTable( TSTriggerTable triggerTable )
			this.pTriggerTable = triggerTable
		end
		
		/** \brief Trigger expression or \em null if not used. */
		public func TSTriggerExpression getTriggerExpression()
			return this.pTriggerExpression
		end
		
		/** \brief Set trigger expression or \em null if not used. */
		protected func void setTriggerExpression( TSTriggerExpression expression )
			this.pTriggerExpression = expression
		end
		
		/** \brief Trigger expression is present. */
		public func bool hasTriggerExpression()
			return this.pTriggerExpression != null
		end
		
		
		
		/** \brief Add listener. */
		public func void addListener( Listener listener )
			if listener == null
				throw ENullPointer.new()
			end
			this.pListeners.add( listener )
		end
		
		/** \brief Remove listener. */
		public func void removeListener( Listener listener )
			this.pListeners.remove( listener )
		end
		
		/** \brief Notify listener trigger expression changed. */
		public func void notifyListeners()
			if this.pTriggerExpression == null
				return
			end
			
			if this.pTriggerExpression.getResult()
				this.pListeners.forEach( block Listener each
					each.triggerExpressionTrue( this )
				end )
				
			else
				this.pListeners.forEach( block Listener each
					each.triggerExpressionFalse( this )
				end )
			end
		end
		
		
		
		/** \brief Add element to game world. */
		public func void addToGameWorld()
			if this.pTriggerExpression == null
				return
			end
			
			this.pTriggerExpression.linkTriggerTargets( this.pTriggerTable, TriggedListener.new( this ) )
			if this.pTriggerExpression.getResult()
				this.notifyListeners()
			end
		end
		
		/** \brief Remove element from game world. */
		public func void removeFromGameWorld()
			if this.pTriggerExpression != null
				this.pTriggerExpression.linkTriggerTargets( null, null )
			end
		end
		
		
		
		/** \brief Behavior debug information as Dictionary. */
		public func Dictionary debugInformation()
			var Dictionary info = Dictionary.new()
			info.setAt( "expression", TSTriggerExpressionParser.new() \
				.expressionToString( this.pTriggerExpression ) )
			info.setAt( "result", this.getState() )
			info.setAt( "triggerTable", this.pTriggerTable != null )
			return info
		end
	end
	
	
	
	private var ECPString pTrigger
	private var TSTriggerTable pTriggerTable
	private var Array pListenerFactories
	
	
	
	/** \brief Create behavior element class. */
	public func new( BehaviorElementClass eclass ) \
	this( eclass, BaseGameApp.getApp().getTriggerTable(), "" )
	end
	
	/** \brief Create behavior element class. */
	public func new( BehaviorElementClass eclass, String id ) \
	this( eclass, BaseGameApp.getApp().getTriggerTable(), id )
	end
	
	/** \brief Create behavior element class. */
	public func new( BehaviorElementClass eclass, TSTriggerTable triggerTable ) \
	this( eclass, triggerTable, "" )
	end
	
	/** \brief Create behavior element class. */
	public func new( BehaviorElementClass eclass, TSTriggerTable triggerTable, String id ) \
	this( eclass, triggerTable, id, id.empty() if "trigger" else "trigger(" + id + ")" )
	end
	
	public func new( BehaviorElementClass eclass, TSTriggerTable triggerTable, \
	String id, String propertyName ) super( eclass, id )
		this.pTriggerTable = triggerTable
		this.pListenerFactories = Array.new()
		
		this.pTrigger = ECPString.new( propertyName, "" )
		eclass.addProperty( this.pTrigger )
		
		eclass.addBehavior( this )
	end
	
	/** \brief Dispose of behavior. */
	public func void dispose()
		this.pListenerFactories = null
		super.dispose()
	end
	
	
	
	/** \brief Trigger. */
	public func ECPString getTrigger()
		return this.pTrigger
	end
	
	/** \brief Trigger table. */
	public func TSTriggerTable getTriggerTable()
		return this.pTriggerTable
	end
	
	/** \brief Set trigger table. */
	protected func void setTriggerTable( TSTriggerTable triggerTable )
		this.pTriggerTable = triggerTable
	end
	
	/** \brief Add listener factory. */
	public func void addListenerFactory( ListenerFactory factory )
		if factory == null
			throw ENullPointer.new()
		end
		this.pListenerFactories.add( factory )
	end
	
	/**
	 * \brief Add listener factory using block.
	 * 
	 * Block receives as parameter Instance and returns Listener.
	 */
	public func void addListenerFactory( Block blockFactory )
		this.pListenerFactories.add( BlockListenerFactory.new( blockFactory ) )
	end
	
	/** \brief Visit listener factories with block with argument ListenerFactory. */
	public func void forEachListenerFactory( Block ablock )
		this.pListenerFactories.forEach( ablock )
	end
	
	/** \brief Create listeners from factories adding them to behavior instance. */
	public func void createListeners( Instance instance )
		this.pListenerFactories.forEach( block ListenerFactory each
			instance.addListener( each.createListener( instance ) )
		end )
	end
	
	
	
	/** \brief Get instance in element from owner element class. */
	public func Instance instance( BehaviorElement element )
		return element.getInstanceAt( this.getInstanceIndex() ) cast Instance
	end
	
	
	
	/**
	 * \brief Get behavior in element class or \em null if absent.
	 * 
	 * Use this method to check if a particular BehaviorElementClass contains a behavior
	 * of type ECBehaviorComponent.
	 */
	static public func ECBehaviorTriggered getBehaviorIn( BehaviorElementClass eclass )
		return eclass.findBehavior( block ECBehaviorTriggered each
			return true
		end ) cast ECBehaviorTriggered
	end
	
	/**
	 * \brief Get behavior with id in element class or \em null if absent.
	 * 
	 * Use this method to check if a particular BehaviorElementClass contains a behavior
	 * of type ECBehaviorTriggered with specific identifier.
	 */
	static public func ECBehaviorTriggered getBehaviorIn( BehaviorElementClass eclass, String id )
		return eclass.findBehavior( block ECBehaviorTriggered each
			return each.getID().equals( id )
		end ) cast ECBehaviorTriggered
	end
	
	/**
	 * \brief Get list of all behaviors in element.
	 * 
	 * Returns list contains ECBehaviorTriggered behaviors in the order they have
	 * been created in the element.
	 */
	static public func Array getAllBehaviorsIn( BehaviorElementClass eclass )
		return eclass.collectBehaviors( block ECBehaviorTriggered each
			return true
		end )
	end
	
	
	
	/**
	 * \brief Get instance in element or \em null if absent.
	 * 
	 * Use this method to check if a particular BehaviorElement contains a behavior instance
	 * of type ECBehaviorTriggered.Instance . If more than one instance is present returns
	 * the first instance.
	 */
	static public func Instance getInstanceIn( BehaviorElement element )
		return element.findInstance( block Instance each
			return true
		end ) cast Instance
	end
	
	/**
	 * \brief Get instance with id in element or \em null if absent.
	 * 
	 * Use this method to check if a particular BehaviorElement contains a behavior instance
	 * of type ECBehaviorTriggered.Instance with specific identifier.
	 */
	static public func Instance getInstanceIn( BehaviorElement element, String id )
		return element.findInstance( block Instance each
			return each.getECBehavior().getID().equals( id )
		end ) cast Instance
	end
	
	/**
	 * \brief Get list of all instances in element.
	 * 
	 * Returns list contains ECBehaviorTriggered.Instance instances in the order they have
	 * been created in the element.
	 */
	static public func Array getAllInstancesIn( BehaviorElement element )
		return element.collectInstances( block Instance each
			return true
		end )
	end
	
	
	
	/** \brief Create Behavior instance. */
	public func ECBehaviorInstance createInstance( BehaviorElement element )
		return Instance.new( this, element )
	end
end
