/* 
 * Drag[en]gine DragonScript Script Module
 *
 * Copyright (C) 2020, Roland Pl√ºss (roland@rptd.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */


namespace Dragengine.Scenery

pin Dragengine.Gui
pin Dragengine.LoadSave
pin Dragengine.Preloading
pin Dragengine.Utils
pin Dragengine.TriggerSystem


/**
 * \brief Behavior element behavior adding trigger support.
 * 
 * Adds a trigger expression to the behavior element. If the trigger expression changes value
 * notifies the behavior element or other behaviors using listeners.
 * 
 * The default stub property name for the trigger expression is "trigger" if ID is empty
 * or "{id}.trigger" if the ID is not empty. The stub property name can be changed which
 * is typically done by ECBehavior using ECBehaviorTriggered in a composed way.
 * 
 * The initial state of the element is "false". If the element is added to the game world
 * notifyListeners() is only called if the trigger expression is "true" at this time.
 * 
 * Element class property is named "trigger{(id)}".
 * 
 * This behavior does not require the element class to be persistable (setPersistable).
 */
class ECBehaviorTriggered extends DefaultECBehavior
	/** \brief Listener for behavior instance events. */
	interface Listener
		/** \brief Trigger expression changed to true. */
		func void triggerExpressionTrue(Instance instance)
		
		/** \brief Trigger expression changed to false. */
		func void triggerExpressionFalse(Instance instance)
	end
	
	/** \brief Default implementation of behavior instance listener. */
	class DefaultListener implements Listener
		/** \brief Create default listener. */
		func new()
		end
		
		/** \brief Trigger expression changed to true. */
		func void triggerExpressionTrue(Instance instance)
		end
		
		/** \brief Trigger expression changed to false. */
		func void triggerExpressionFalse(Instance instance)
		end
	end
	
	/** \brief Implementation of behavior instance listener using BooleanBehaviorListener. */
	class BooleanListener extends DefaultListener
		var BooleanBehaviorListener pListener
		
		func new(BooleanBehaviorListener listener)
			pListener = listener
		end
		
		func void triggerExpressionTrue(Instance instance)
			pListener.enabled()
		end
		
		func void triggerExpressionFalse(Instance instance)
			pListener.disabled()
		end
	end
	
	/** \brief Factory creating listeners. */
	interface ListenerFactory
		/** \brief Create listener. */
		func Listener createListener(Instance instance)
	end
	
	/** \brief Factory creating listeners using block. */
	class BlockListenerFactory implements ListenerFactory
		var Block pBlock
		
		/** \brief Create factory using block receiving Instance as parameter returning Listener. */
		func new(Block blockFactory)
			if blockFactory == null
				throw ENullPointer.new()
			end
			pBlock = blockFactory
		end
		
		/** \brief Create listener. */
		func Listener createListener(Instance instance)
			return pBlock.run(instance) cast Listener
		end
	end
	
	/** \brief Behavior instance. */
	class Instance extends DefaultECBehaviorInstance
		/** \brief Trigger listener. */
		public class TriggedListener implements TSTriggerListener
			var Instance pInstance
			
			func new(Instance instance)
				pInstance = instance
			end
			
			func void triggerTargetChanged(TSTriggerTarget target)
				if pInstance.getTriggerExpression().evaluate()
					pInstance.notifyListeners()
				end
			end
		end
		
		
		
		var ECBehaviorTriggered pECBehavior
		var TSTriggerExpression pTriggerExpression
		var TSTriggerTable pTriggerTable
		var Array pListeners
		var bool pLoading
		
		
		
		/** \brief Create element. */
		func new(ECBehaviorTriggered ecbehavior, BehaviorElement element) super(element)
			pECBehavior = ecbehavior
			pTriggerTable = ecbehavior.getTriggerTable()
			pListeners = Array.new()
		end
		
		/** \brief Dispose of composeable instance. */
		func void dispose()
			pTriggerExpression = null
			pListeners = null
			
			super.dispose()
		end
		
		
		
		/** \brief Initialize element from stub. */
		func void init(StubElement stub)
			var String value = pECBehavior.getTrigger().getValue(stub)
			if value.empty()
				return
			end
			
			pTriggerExpression = getElement().getClass() \
				.getTriggerExpressionParser().stringToExpression(value)
			
			pECBehavior.createListeners(this)
		end
		
		
		
		/** \brief Behavior. */
		func ECBehaviorTriggered getECBehavior()
			return pECBehavior
		end
		
		
		
		/** \brief Trigger expression state. */
		func bool getState()
			if pTriggerExpression != null
				return pTriggerExpression.getResult()
				
			else
				return false
			end
		end
		
		/** \brief Trigger expression state or default value if absent. */
		func bool getState(bool defaultValue)
			if pTriggerExpression != null
				return pTriggerExpression.getResult()
				
			else
				return defaultValue
			end
		end
		
		
		
		/** \brief Trigger table to link trigger expression to. */
		func TSTriggerTable getTriggerTable()
			return pTriggerTable
		end
		
		/** \brief Trigger table to link trigger expression to. */
		protected func void setTriggerTable(TSTriggerTable triggerTable)
			pTriggerTable = triggerTable
		end
		
		/** \brief Trigger expression or \em null if not used. */
		func TSTriggerExpression getTriggerExpression()
			return pTriggerExpression
		end
		
		/** \brief Set trigger expression or \em null if not used. */
		protected func void setTriggerExpression(TSTriggerExpression expression)
			pTriggerExpression = expression
		end
		
		/** \brief Trigger expression is present. */
		func bool hasTriggerExpression()
			return pTriggerExpression != null
		end
		
		
		
		/** \brief Add listener. */
		func void addListener(Listener listener)
			if listener == null
				throw ENullPointer.new()
			end
			pListeners.add(listener)
		end
		
		/** \brief Remove listener. */
		func void removeListener(Listener listener)
			pListeners.remove(listener)
		end
		
		/** \brief Notify listener trigger expression changed. */
		func void notifyListeners()
			if pTriggerExpression == null
				return
			end
			
			if pTriggerExpression.getResult()
				pListeners.forEach(block Listener each
					each.triggerExpressionTrue(this)
				end)
				
			else
				pListeners.forEach(block Listener each
					each.triggerExpressionFalse(this)
				end)
			end
		end
		
		
		
		/** \brief Add element to game world. */
		func void addToGameWorld()
			if pTriggerExpression == null
				return
			end
			
			pTriggerExpression.linkTriggerTargets(pTriggerTable, TriggedListener.new(this))
			
			if pLoading
				pLoading = false
				return // do not trigger while loading
			end
			
			if pTriggerExpression.getResult()
				notifyListeners()
			end
		end
		
		/** \brief Remove element from game world. */
		func void removeFromGameWorld()
			if pTriggerExpression != null
				pTriggerExpression.linkTriggerTargets(null, null)
			end
		end
		
		
		
		/** \brief Read behavior from file. */
		func void readFromFile(PersistencyEnvironment env, FileReader reader)
			super.readFromFile(env, reader)
			pLoading = true // prevent triggering while loading
		end
		
		
		
		/** \brief Behavior debug information as Dictionary. */
		func Dictionary debugInformation()
			var Dictionary info = Dictionary.new()
			info.setAt("expression", TSTriggerExpressionParser.new() \
				.expressionToString(pTriggerExpression))
			info.setAt("result", getState())
			info.setAt("triggerTable", pTriggerTable != null)
			return info
		end
	end
	
	
	
	var ECPString pTrigger
	var TSTriggerTable pTriggerTable
	var Array pListenerFactories
	
	
	
	/** \brief Create behavior element class. */
	func new(BehaviorElementClass eclass) \
	this(eclass, BaseGameApp.getApp().getTriggerTable(), "")
	end
	
	/** \brief Create behavior element class. */
	func new(BehaviorElementClass eclass, String id) \
	this(eclass, BaseGameApp.getApp().getTriggerTable(), id)
	end
	
	/** \brief Create behavior element class. */
	func new(BehaviorElementClass eclass, TSTriggerTable triggerTable) \
	this(eclass, triggerTable, "")
	end
	
	/** \brief Create behavior element class. */
	func new(BehaviorElementClass eclass, TSTriggerTable triggerTable, String id) \
	this(eclass, triggerTable, id, id.empty() if "trigger" else "trigger(" + id + ")")
	end
	
	func new(BehaviorElementClass eclass, TSTriggerTable triggerTable, \
	String id, String propertyName) super(eclass, id)
		pTriggerTable = triggerTable
		pListenerFactories = Array.new()
		
		pTrigger = ECPString.new(propertyName, "")
		eclass.addProperty(pTrigger)
		
		eclass.addBehavior(this)
	end
	
	/** \brief Dispose of behavior. */
	func void dispose()
		pListenerFactories = null
		super.dispose()
	end
	
	
	
	/** \brief Trigger. */
	func ECPString getTrigger()
		return pTrigger
	end
	
	/** \brief Trigger table. */
	func TSTriggerTable getTriggerTable()
		return pTriggerTable
	end
	
	/** \brief Set trigger table. */
	protected func void setTriggerTable(TSTriggerTable triggerTable)
		pTriggerTable = triggerTable
	end
	
	/** \brief Add listener factory. */
	func void addListenerFactory(ListenerFactory factory)
		if factory == null
			throw ENullPointer.new()
		end
		pListenerFactories.add(factory)
	end
	
	/**
	 * \brief Add listener factory using block.
	 * 
	 * Block receives as parameter Instance and returns Listener.
	 */
	func void addListenerFactory(Block blockFactory)
		pListenerFactories.add(BlockListenerFactory.new(blockFactory))
	end
	
	/** \brief Visit listener factories with block with argument ListenerFactory. */
	func void forEachListenerFactory(Block ablock)
		pListenerFactories.forEach(ablock)
	end
	
	/** \brief Create listeners from factories adding them to behavior instance. */
	func void createListeners(Instance instance)
		pListenerFactories.forEach(block ListenerFactory each
			instance.addListener(each.createListener(instance))
		end)
	end
	
	
	
	/** \brief Get instance in element from owner element class. */
	func Instance instance(BehaviorElement element)
		return element.getInstanceAt(getInstanceIndex()) cast Instance
	end
	
	
	
	/**
	 * \brief Get behavior in element class or \em null if absent.
	 * 
	 * Use this method to check if a particular BehaviorElementClass contains a behavior
	 * of type ECBehaviorComponent.
	 */
	static func ECBehaviorTriggered getBehaviorIn(BehaviorElementClass eclass)
		return eclass.findBehavior(block ECBehaviorTriggered each
			return true
		end) cast ECBehaviorTriggered
	end
	
	/**
	 * \brief Get behavior with id in element class or \em null if absent.
	 * 
	 * Use this method to check if a particular BehaviorElementClass contains a behavior
	 * of type ECBehaviorTriggered with specific identifier.
	 */
	static func ECBehaviorTriggered getBehaviorIn(BehaviorElementClass eclass, String id)
		return eclass.findBehavior(block ECBehaviorTriggered each
			return each.getID().equals(id)
		end) cast ECBehaviorTriggered
	end
	
	/**
	 * \brief Get list of all behaviors in element.
	 * 
	 * Returns list contains ECBehaviorTriggered behaviors in the order they have
	 * been created in the element.
	 */
	static func Array getAllBehaviorsIn(BehaviorElementClass eclass)
		return eclass.collectBehaviors(block ECBehaviorTriggered each
			return true
		end)
	end
	
	
	
	/**
	 * \brief Get instance in element or \em null if absent.
	 * 
	 * Use this method to check if a particular BehaviorElement contains a behavior instance
	 * of type ECBehaviorTriggered.Instance . If more than one instance is present returns
	 * the first instance.
	 */
	static func Instance getInstanceIn(BehaviorElement element)
		return element.findInstance(block Instance each
			return true
		end) cast Instance
	end
	
	/**
	 * \brief Get instance with id in element or \em null if absent.
	 * 
	 * Use this method to check if a particular BehaviorElement contains a behavior instance
	 * of type ECBehaviorTriggered.Instance with specific identifier.
	 */
	static func Instance getInstanceIn(BehaviorElement element, String id)
		return element.findInstance(block Instance each
			return each.getECBehavior().getID().equals(id)
		end) cast Instance
	end
	
	/**
	 * \brief Get list of all instances in element.
	 * 
	 * Returns list contains ECBehaviorTriggered.Instance instances in the order they have
	 * been created in the element.
	 */
	static func Array getAllInstancesIn(BehaviorElement element)
		return element.collectInstances(block Instance each
			return true
		end)
	end
	
	
	
	/** \brief Create Behavior instance. */
	func ECBehaviorInstance createInstance(BehaviorElement element)
		return Instance.new(this, element)
	end
end
