/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */


namespace Dragengine.Scenery

pin Dragengine.Gui
pin Dragengine.LoadSave
pin Dragengine.Preloading
pin Dragengine.Utils
pin Dragengine.TriggerSystem
pin Dragengine.BehaviorTreeSystem
pin Dragengine.StateMachineSystem


/**
 * \brief Behavior element behavior adding trigger support.
 * 
 * Adds a trigger expression to the behavior element. If the trigger expression changes value
 * notifies the behavior element or other behaviors using listeners.
 * 
 * The default stub property name for the trigger expression is "trigger" if ID is empty
 * or "{id}.trigger" if the ID is not empty. The stub property name can be changed which
 * is typically done by ECBehavior using ECBehaviorTriggered in a composed way.
 * 
 * The initial state of the element is "false". If the element is added to the game world
 * notifyListeners() is only called if the trigger expression is "true" at this time.
 * 
 * Optionally a synchronized trigger can be specified. If set users of this trigger should
 * use the synchronized trigger instead of this trigger. This allows setting a single trigger
 * expression in an element stub to affect multiple triggers in the same element class.
 * 
 * Element class property is named "trigger{(id)}".
 * 
 * This behavior does not require the element class to be persistable (setPersistable).
 * 
 * \see https://developer.dragondreams.ch/wiki/doku.php/dragengine:modules:dragonscript:behavior_triggered
 */
class ECBehaviorTriggered extends DefaultECBehavior
	/** \brief Listener for behavior instance events. */
	interface Listener
		/** \brief Trigger expression changed to true. */
		func void triggerExpressionTrue(Instance instance)
		
		/** \brief Trigger expression changed to false. */
		func void triggerExpressionFalse(Instance instance)
	end
	
	/** \brief Default implementation of behavior instance listener. */
	class DefaultListener implements Listener
		/** \brief Create default listener. */
		func new()
		end
		
		/** \brief Trigger expression changed to true. */
		func void triggerExpressionTrue(Instance instance)
		end
		
		/** \brief Trigger expression changed to false. */
		func void triggerExpressionFalse(Instance instance)
		end
	end
	
	/** \brief Implementation of behavior instance listener using BooleanBehaviorListener. */
	class BooleanListener extends DefaultListener
		var BooleanBehaviorListener pListener
		
		func new(BooleanBehaviorListener listener)
			pListener = listener
		end
		
		func void triggerExpressionTrue(Instance instance)
			pListener.enabled()
		end
		
		func void triggerExpressionFalse(Instance instance)
			pListener.disabled()
		end
	end
	
	/** \brief Factory creating listeners. */
	interface ListenerFactory
		/** \brief Create listener. */
		func Listener createListener(Instance instance)
	end
	
	/** \brief Factory creating listeners using block. */
	class BlockListenerFactory implements ListenerFactory
		var Block pBlock
		
		/** \brief Create factory using block receiving Instance as parameter returning Listener. */
		func new(Block blockFactory)
			if blockFactory == null
				throw ENullPointer.new()
			end
			pBlock = blockFactory
		end
		
		/** \brief Create listener. */
		func Listener createListener(Instance instance)
			return pBlock.run(instance) cast Listener
		end
	end
	
	/**
	 * \brief Behavior factory.
	 * \version 1.25
	 * 
	 * Example XML element class:
	 * \code{.xml}
	 * <behavior type='ECBehaviorTriggered'>
	 *   <!-- optional: use BaseGameApp trigger table. game can add more supported values.
	 *                  default is 'default' -->
	 *   <string name='triggerTable'>default</string>
	 *   
	 *   <!-- optional: name of trigger property. default is 'trigger' or 'trigger(id)'
	 *                  depending if id is empty string or not. -->
	 *   <string name='propertyName'>trigger</string>
	 *   
	 *   <!-- optional: identifier of ECBehaviorTriggered to synchronize with or empty
	 *                  string to not synchronize. default is empty string. -->
	 *   <string name='synchronize'>other</string>
	 *   
	 *   <!-- optional: use behavior tree with id instead of empty string -->
	 *   <string name='behaviorTree'>second</string>
	 *   
	 *   <!-- optional: use state machine with id instead of empty string -->
	 *   <string name='stateMachine'>second</string>
	 * </behavior>
	 * 
	 * <!-- for adding multiple behaviors use unique identifiers -->
	 * <behavior type='ECBehaviorTriggered' id='second'>
	 *   ...
	 * </behavior>
	 * \endcode
	 * 
	 * Element class properties added by the behavior can also be set directly inside the tag
	 * be removing the property name prefix and starting with a "." (for example ".propertyName").
	 */
	class Factory implements BehaviorFactory
		func new()
		end
		
		func String factoryId()
			return "ECBehaviorTriggered"
		end
		
		func ECBehavior addBehavior(BehaviorElementClass eclass, String id, Dictionary parameters)
			var ECBehaviorTriggered behavior
			
			if parameters.has("propertyName")
				behavior = ECBehaviorTriggered.new(eclass,\
					getTriggerTableFor(parameters.getAt("triggerTable", "default") cast String),\
					id, parameters.getAt("propertyName") cast String)
				
			else
				behavior = ECBehaviorTriggered.new(eclass,\
					getTriggerTableFor(parameters.getAt("triggerTable", "default") cast String), id)
			end
			
			behavior.setSynchronize(eclass, parameters.getAt("synchronize", null) cast String)
			behavior.setBehaviorTree(eclass.sharedFactoryHelper.defaultBehaviorTree(eclass, parameters))
			behavior.setStateMachine(eclass.sharedFactoryHelper.defaultStateMachine(eclass, parameters))
			
			return behavior
		end
		
		/**
		 * \brief Trigger table matching value.
		 * 
		 * Default implementation returns \ref BaseGameApp#getTriggerTable() for value 'default'
		 * and null for all other values. Overwrite to accept other values.
		 */
		func TSTriggerTable getTriggerTableFor(String value)
			return BehaviorElementClass.sharedFactoryHelper.triggerTable(value)
		end
	end
	
	/** \brief Behavior instance. */
	class Instance extends DefaultECBehaviorInstance
		/**
		 * \brief Behavior tree action/condition "trigger{(id)}.check".
		 * \version 1.26
		 */
		private class BTACheck extends BTSMActionCondition
			var Instance pInstance
			var String pPrefix
			
			func new(Instance instance, String prefix)
				pInstance = instance
				pPrefix = prefix
			end
			
			func BTResult runAction(Dictionary parameters)
				return check("", parameters) if BTResult.success\
					else (parameters.has("wait") if BTResult.running else BTResult.failure)
			end
			
			func bool evaluateCondition(Dictionary parameters)
				return check(pPrefix, parameters)
			end
			
			func bool check(String prefix, Dictionary parameters)
				var bool result = true
				var Object value
				
				value = parameters.getAt(prefix + "state", null)
				if value != null
					result &= pInstance.getState() == value.equals("true")
				end
				
				return result
			end
		end
		
		/** \brief Trigger listener. */
		private class TriggedListener implements TSTriggerListener
			var Instance pInstance
			
			func new(Instance instance)
				pInstance = instance
			end
			
			func void triggerTargetChanged(TSTriggerTarget target)
				if pInstance.getTriggerExpression().evaluate()
					pInstance.notifyListeners()
				end
			end
		end
		
		
		
		var ECBehaviorTriggered pECBehavior
		var TSTriggerExpression pTriggerExpression
		var TSTriggerTable pTriggerTable
		var Array pListeners
		var bool pLoading
		var SMContext pSMContext
		
		
		
		/** \brief Create element. */
		func new(ECBehaviorTriggered ecbehavior, BehaviorElement element) super(element)
			pECBehavior = ecbehavior
			pTriggerTable = ecbehavior.getTriggerTable()
			pListeners = Array.new()
		end
		
		/** \brief Dispose of composeable instance. */
		func void dispose()
			pTriggerExpression = null
			pListeners = null
			pSMContext = null
			
			super.dispose()
		end
		
		
		
		/** \brief Initialize element from stub. */
		func void init(StubElement stub)
			var String value = pECBehavior.getTrigger().getValueOrNull(stub)
			if value == null
				return
			end
			
			var BehaviorElement element = getElement()
			
			try
				pTriggerExpression = element.getClass().getTriggerExpressionParser().stringToExpression(value)
				
			catch Exception e
				throw EInvalidParam.new("Failed parsing trigger expression: '{}'".format(Array.newWith(value)))
			end
			
			pECBehavior.createListeners(this)
			
			if pECBehavior.getBehaviorTree() != null
				var String pnp = pECBehavior.getTrigger().getName() + "."
				var BTContext c = pECBehavior.getBehaviorTree().instance(element).getContext()
				var String name = pnp + "check"
				var BTACheck btacheck = BTACheck.new(this, pnp)
				c.setAction(name, btacheck)
				c.setCondition(name, btacheck)
			end
			
			if pECBehavior.getStateMachine() != null
				var String pnp = pECBehavior.getTrigger().getName() + "."
				pSMContext = pECBehavior.getStateMachine().instance(element).getContext()
				var String name = pnp + "check"
				var BTACheck btacheck = BTACheck.new(this, pnp)
				pSMContext.setAction(name, btacheck)
				pSMContext.setCondition(name, btacheck)
			end
		end
		
		
		
		/** \brief Behavior. */
		func ECBehaviorTriggered getECBehavior()
			return pECBehavior
		end
		
		
		
		/** \brief Trigger expression state. */
		func bool getState()
			if pTriggerExpression != null
				return pTriggerExpression.getResult()
				
			else
				return false
			end
		end
		
		/** \brief Trigger expression state or default value if absent. */
		func bool getState(bool defaultValue)
			if pTriggerExpression != null
				return pTriggerExpression.getResult()
				
			else
				return defaultValue
			end
		end
		
		
		
		/** \brief Trigger table to link trigger expression to. */
		func TSTriggerTable getTriggerTable()
			return pTriggerTable
		end
		
		/** \brief Trigger table to link trigger expression to. */
		protected func void setTriggerTable(TSTriggerTable triggerTable)
			pTriggerTable = triggerTable
		end
		
		/** \brief Trigger expression or \em null if not used. */
		func TSTriggerExpression getTriggerExpression()
			return pTriggerExpression
		end
		
		/** \brief Set trigger expression or \em null if not used. */
		protected func void setTriggerExpression(TSTriggerExpression expression)
			pTriggerExpression = expression
		end
		
		/** \brief Trigger expression is present. */
		func bool hasTriggerExpression()
			return pTriggerExpression != null
		end
		
		
		
		/** \brief Add listener. */
		func void addListener(Listener listener)
			if listener == null
				throw ENullPointer.new()
			end
			pListeners.add(listener)
		end
		
		/** \brief Remove listener. */
		func void removeListener(Listener listener)
			pListeners.remove(listener)
		end
		
		/** \brief Notify listener trigger expression changed. */
		func void notifyListeners()
			if pTriggerExpression == null
				return
			end
			
			if pTriggerExpression.getResult()
				pListeners.forEach(block Listener each
					each.triggerExpressionTrue(this)
				end)
				if pSMContext != null
					pSMContext.runEvent(pECBehavior.getTrigger().getName() + "true")
				end
				
			else
				pListeners.forEach(block Listener each
					each.triggerExpressionFalse(this)
				end)
				if pSMContext != null
					pSMContext.runEvent(pECBehavior.getTrigger().getName() + "false")
				end
			end
		end
		
		
		
		/** \brief Add element to game world. */
		func void addToGameWorld()
			if pTriggerExpression == null
				return
			end
			
			pTriggerExpression.linkTriggerTargets(pTriggerTable, TriggedListener.new(this))
			
			if pLoading
				pLoading = false
				return // do not trigger while loading
			end
			
			if pTriggerExpression.getResult()
				notifyListeners()
			end
		end
		
		/** \brief Remove element from game world. */
		func void removeFromGameWorld()
			if pTriggerExpression != null
				pTriggerExpression.linkTriggerTargets(null, null)
			end
		end
		
		
		
		/** \brief Read behavior from file. */
		func void readFromFile(PersistencyEnvironment env, FileReader reader)
			super.readFromFile(env, reader)
			pLoading = true // prevent triggering while loading
		end
		
		
		
		/** \brief Behavior debug information as Dictionary. */
		func Dictionary debugInformation()
			var Dictionary info = Dictionary.new()
			info.setAt("expression", TSTriggerExpressionParser.new() \
				.expressionToString(pTriggerExpression))
			info.setAt("result", getState())
			info.setAt("triggerTable", pTriggerTable != null)
			return info
		end
	end
	
	
	
	var ECPString pTrigger
	var TSTriggerTable pTriggerTable
	var Array pListenerFactories
	var ECBehaviorTriggered pSynchronize
	var ECBehaviorBehaviorTree pBehaviorTree
	var ECBehaviorStateMachine pStateMachine
	
	
	
	/** \brief Create behavior element class. */
	func new(BehaviorElementClass eclass) \
	this(eclass, BaseGameApp.getApp().getTriggerTable(), "")
	end
	
	/** \brief Create behavior element class. */
	func new(BehaviorElementClass eclass, String id) \
	this(eclass, BaseGameApp.getApp().getTriggerTable(), id)
	end
	
	/** \brief Create behavior element class. */
	func new(BehaviorElementClass eclass, TSTriggerTable triggerTable) \
	this(eclass, triggerTable, "")
	end
	
	/** \brief Create behavior element class. */
	func new(BehaviorElementClass eclass, TSTriggerTable triggerTable, String id) \
	this(eclass, triggerTable, id, id.empty() if "trigger" else "trigger(" + id + ")")
	end
	
	func new(BehaviorElementClass eclass, TSTriggerTable triggerTable, \
	String id, String propertyName) super(eclass, id)
		pTriggerTable = triggerTable
		pListenerFactories = Array.new()
		
		pTrigger = ECPString.new(propertyName, "")
		eclass.addProperty(pTrigger)
		
		eclass.addBehavior(this)
	end
	
	/** \brief Dispose of behavior. */
	func void dispose()
		pSynchronize = null
		pListenerFactories = null
		pBehaviorTree = null
		pStateMachine = null
		super.dispose()
	end
	
	
	
	/** \brief Trigger. */
	func ECPString getTrigger()
		return pTrigger
	end
	
	/** \brief Trigger table. */
	func TSTriggerTable getTriggerTable()
		return pTriggerTable
	end
	
	/** \brief Set trigger table. */
	func void setTriggerTable(TSTriggerTable triggerTable)
		pTriggerTable = triggerTable
	end
	
	/**
	 * \brief Trigger to synchronize with or null.
	 * \version 1.25
	 */
	func ECBehaviorTriggered getSynchronize()
		return pSynchronize
	end
	
	/**
	 * \brief Set trigger to synchronize with or null.
	 * \version 1.25
	 */
	func void setSynchronize(ECBehaviorTriggered behavior)
		pSynchronize = behavior
	end
	
	/**
	 * \brief Set trigger to synchronize with using identifier.
	 * \version 1.25
	 * 
	 * If identifier is null or empty string clears synchronize behavior. Otherwise looks up
	 * ECBehaviorTriggered with identifier. If behavior is absent throws an exception.
	 * 
	 * For use with behavior factories using ECBehaviorTriggered like this:
	 * \code{.ds}
	 * behavior.setSynchronize(eclass, parameters.getAt("trigger.synchronize", null) cast String)
	 * \endcode
	 */
	func void setSynchronize(BehaviorElementClass eclass, String id)
		if id == null or id.empty()
			pSynchronize = null
			return
		end
		
		pSynchronize = ECBehaviorTriggered.getBehaviorIn(eclass, id)
		if pSynchronize == null
			throw EInvalidParam.new("ECBehaviorTriggered not found: " + id)
		end
	end
	
	/**
	 * \brief Synchronize trigger if not null otherwise this.
	 * \version 1.25
	 * 
	 * Call this function to obtain the behavior to use supporting synchronize triggers.
	 */
	func ECBehaviorTriggered synchronizedOrSelf()
		return pSynchronize != null if pSynchronize else this
	end
	
	/**
	 * \brief Behavior tree or null.
	 * \version 1.26
	 */
	func ECBehaviorBehaviorTree getBehaviorTree()
		return pBehaviorTree
	end
	
	/**
	 * \brief Set behavior tree or null.
	 * \version 1.26
	 */
	func void setBehaviorTree(ECBehaviorBehaviorTree behaviorTree)
		pBehaviorTree = behaviorTree
	end
	
	/**
	 * \brief State machine or null.
	 * \version 1.26
	 */
	func ECBehaviorStateMachine getStateMachine()
		return pStateMachine
	end
	
	/**
	 * \brief Set state machine or null.
	 * \version 1.26
	 */
	func void setStateMachine(ECBehaviorStateMachine stateMachine)
		pStateMachine = stateMachine
	end
	
	/** \brief Add listener factory. */
	func void addListenerFactory(ListenerFactory factory)
		if factory == null
			throw ENullPointer.new()
		end
		pListenerFactories.add(factory)
	end
	
	/**
	 * \brief Add listener factory using block.
	 * 
	 * Block receives as parameter Instance and returns Listener.
	 */
	func void addListenerFactory(Block blockFactory)
		pListenerFactories.add(BlockListenerFactory.new(blockFactory))
	end
	
	/** \brief Visit listener factories with block with argument ListenerFactory. */
	func void forEachListenerFactory(Block ablock)
		pListenerFactories.forEach(ablock)
	end
	
	/** \brief Create listeners from factories adding them to behavior instance. */
	func void createListeners(Instance instance)
		pListenerFactories.forEach(block ListenerFactory each
			instance.addListener(each.createListener(instance))
		end)
	end
	
	
	
	/** \brief Get instance in element from owner element class. */
	func Instance instance(BehaviorElement element)
		return element.getInstanceAt(getInstanceIndex()) cast Instance
	end
	
	
	
	/**
	 * \brief Get behavior in element class or \em null if absent.
	 * 
	 * Use this method to check if a particular BehaviorElementClass contains a behavior
	 * of type ECBehaviorComponent.
	 */
	static func ECBehaviorTriggered getBehaviorIn(BehaviorElementClass eclass)
		return eclass.findBehavior(block ECBehaviorTriggered each
			return true
		end) cast ECBehaviorTriggered
	end
	
	/**
	 * \brief Get behavior with id in element class or \em null if absent.
	 * 
	 * Use this method to check if a particular BehaviorElementClass contains a behavior
	 * of type ECBehaviorTriggered with specific identifier.
	 */
	static func ECBehaviorTriggered getBehaviorIn(BehaviorElementClass eclass, String id)
		return eclass.findBehavior(block ECBehaviorTriggered each
			return each.getID().equals(id)
		end) cast ECBehaviorTriggered
	end
	
	/**
	 * \brief Get list of all behaviors in element.
	 * 
	 * Returns list contains ECBehaviorTriggered behaviors in the order they have
	 * been created in the element.
	 */
	static func Array getAllBehaviorsIn(BehaviorElementClass eclass)
		return eclass.collectBehaviors(block ECBehaviorTriggered each
			return true
		end)
	end
	
	
	
	/**
	 * \brief Get instance in element or \em null if absent.
	 * 
	 * Use this method to check if a particular BehaviorElement contains a behavior instance
	 * of type ECBehaviorTriggered.Instance . If more than one instance is present returns
	 * the first instance.
	 */
	static func Instance getInstanceIn(BehaviorElement element)
		return element.findInstance(block Instance each
			return true
		end) cast Instance
	end
	
	/**
	 * \brief Get instance with id in element or \em null if absent.
	 * 
	 * Use this method to check if a particular BehaviorElement contains a behavior instance
	 * of type ECBehaviorTriggered.Instance with specific identifier.
	 */
	static func Instance getInstanceIn(BehaviorElement element, String id)
		return element.findInstance(block Instance each
			return each.getECBehavior().getID().equals(id)
		end) cast Instance
	end
	
	/**
	 * \brief Get list of all instances in element.
	 * 
	 * Returns list contains ECBehaviorTriggered.Instance instances in the order they have
	 * been created in the element.
	 */
	static func Array getAllInstancesIn(BehaviorElement element)
		return element.collectInstances(block Instance each
			return true
		end)
	end
	
	
	
	/** \brief Create Behavior instance. */
	func ECBehaviorInstance createInstance(BehaviorElement element)
		return Instance.new(this, element)
	end
end
