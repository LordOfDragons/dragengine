/* 
 * Drag[en]gine DragonScript Script Module
 *
 * Copyright (C) 2020, Roland PlÃ¼ss (roland@rptd.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */


namespace Dragengine.Scenery

pin Dragengine.Gui
pin Dragengine.LoadSave
pin Dragengine.Preloading
pin Dragengine.Utils
pin Dragengine.TriggerSystem


/**
 * \brief Behavior element behavior timer trigger target.
 * 
 * Fires or resets trigger target after timeout after evaluation state of trigger expression
 * changes to true.
 * 
 * Element class properties have the prefix "timer{(id)}.".
 * 
 * This behavior does require the element class to be persistable (setPersistable).
 */
class ECBehaviorTimer extends DefaultECBehavior
	/** \brief Listener for behavior instance events. */
	interface Listener
		/** \brief Timer started. */
		func void timerStarted( Instance instance )
		
		/** \brief Timer elapsed. */
		func void timerElapsed( Instance instance )
		
		/** \brief Timer cancelled. */
		func void timerCancelled( Instance instance )
	end
	
	/** \brief Default implementation of behavior instance listener. */
	class DefaultListener implements Listener
		/** \brief Create default listener. */
		public func new()
		end
		
		/** \brief Timer started. */
		public func void timerStarted( Instance instance )
		end
		
		/** \brief Timer elapsed. */
		public func void timerElapsed( Instance instance )
		end
		
		/** \brief Timer cancelled. */
		public func void timerCancelled( Instance instance )
		end
	end
	
	/** \brief Factory creating listeners. */
	interface ListenerFactory
		/** \brief Create listener. */
		func Listener createListener( Instance instance )
	end
	
	/** \brief Factory creating listeners using block. */
	class BlockListenerFactory implements ListenerFactory
		private var Block pBlock
		
		/** \brief Create factory using block receiving Instance as parameter returning Listener. */
		public func new( Block blockFactory )
			if blockFactory == null
				throw ENullPointer.new()
			end
			this.pBlock = blockFactory
		end
		
		/** \brief Create listener. */
		public func Listener createListener( Instance instance )
			return this.pBlock.run( instance ) cast Listener
		end
	end
	
	
	
	/** \brief Behavior instance. */
	class Instance extends DefaultECBehaviorInstance
		/** \brief Trigger listener. */
		public class TimerListener extends ECBehaviorTriggered.DefaultListener
			private var Instance pInstance
			
			public func new( Instance instance )
				this.pInstance = instance
			end
			
			public func void triggerExpressionTrue( ECBehaviorTriggered.Instance instance )
				this.pInstance.armTimer()
			end
			
			public func void triggerExpressionFalse( ECBehaviorTriggered.Instance instance )
				if this.pInstance.getCancelOnReset()
					this.pInstance.cancelTimer()
				end
			end
		end
		
		
		
		private var ECBehaviorTimer pECBehavior
		private var ECBehaviorTriggered.Instance pTrigger
		private var TSNamedTriggerTarget pTarget
		private var float pTimeout
		private var bool pFireOnTimeout
		private var bool pStartActivated
		private var bool pFullReset
		private var bool pPulse
		private var bool pCancelOnReset
		private var float pRemainingTime
		private var bool pTimerRunning
		private var bool pApplyStartActivated
		private var Array pListeners
		
		
		
		/** \brief Create element. */
		public func new( ECBehaviorTimer ecbehavior, BehaviorElement element ) super( element )
			this.pECBehavior = ecbehavior
			this.pTimeout = 1
			this.pFireOnTimeout = true
			this.pFullReset = false
			this.pPulse = false
			this.pStartActivated = false
			this.pCancelOnReset = false
			this.pRemainingTime = 0.0
			this.pTimerRunning = false
			this.pApplyStartActivated = true
			this.pListeners = Array.new()
		end
		
		/** \brief Dispose of composeable instance. */
		public func void dispose()
			this.pTarget = null
			this.pTrigger = null
			this.pListeners = null
			
			super.dispose()
		end
		
		
		
		/** \brief Initialize element from stub. */
		public func void init( StubElement stub )
			if this.pECBehavior.getTriggerTable() == null
				return
			end
			
			this.pTrigger = this.pECBehavior.getTriggered().instance( this.getElement() )
			this.pTrigger.addListener( TimerListener.new( this ) )
			
			this.pTimeout = this.pECBehavior.getTimeout().getValue( stub )
			this.pFireOnTimeout = this.pECBehavior.getFireOnTimeout().getValue( stub )
			this.pFullReset = this.pECBehavior.getFullReset().getValue( stub )
			this.pPulse = this.pECBehavior.getPulse().getValue( stub )
			this.pStartActivated = this.pECBehavior.getStartActivated().getValue( stub )
			this.pCancelOnReset = this.pECBehavior.getCancelOnReset().getValue( stub )
			
			this.pTarget = TSNamedTriggerTarget.new( this.pECBehavior.getTarget().getValue( stub ) )
			
			this.pECBehavior.createListeners( this )
		end
		
		
		
		/** \brief Behavior. */
		public func ECBehaviorTimer getECBehavior()
			return this.pECBehavior
		end
		
		/** \brief Trigger or \em null. */
		public func ECBehaviorTriggered.Instance getTrigger()
			return this.pTrigger
		end
		
		/** \brief Trigger target or \em null. */
		public func TSNamedTriggerTarget getTarget()
			return this.pTarget
		end
		
		/** \brief Time in seconds until target is fired/reset after expression becomes true. */
		public func float getTimeout()
			return this.pTimeout
		end
		
		/** \brief Target is fired (true) or reset (false) after timeout elapses. */
		public func bool getFireOnTimeout()
			return this.pFireOnTimeout
		end
		
		/** \brief Full reset target instead of simple reset. */
		public func bool getFullReset()
			return this.pFullReset
		end
		
		/**
		 * \brief Pulse target if timeout elapses.
		 * 
		 * If FireOnTimeout is true invokes fire() then reset()/fullReset() on the target.
		 * If FireOnTimeout is false invokes reset()/fullReset() then fire() on the target.
		 * Using pulse avoids the need to use two TriggerTimer to trigger a target multiple
		 * times in a row.
		 */
		public func bool getPulse()
			return this.pPulse
		end
		
		/** \brief Trigger starts out activated. */
		public func bool getStartActivated()
			return this.pStartActivated
		end
		
		/** \brief Trigger timer is cancelled if trigger expression evaluates to false. */
		public func bool getCancelOnReset()
			return this.pCancelOnReset
		end
		
		/** \brief Remaining time until timeout. */
		public func float getRemainingTime()
			return this.pRemainingTime
		end
		
		/** \brief Timer is running. */
		public func bool getTimerRunning()
			return this.pTimerRunning
		end
		
		
		
		/** \brief Arm timer if timeout is larger than 0 otherwise operate target immediately. */
		public func void armTimer()
			if this.pTimerRunning and this.pRemainingTime > 0
				return
			end
			
			this.pListeners.forEach( block Listener each
				each.timerStarted( this )
			end )
			
			if this.pTimeout > 0.001
				this.pRemainingTime = this.pTimeout
				this.pTimerRunning = true
				this.setRequiresThink( true )
				
			else
				this.onTimeout()
			end
		end
		
		/** \brief Cancel timer if running. */
		public func void cancelTimer()
			if not this.pTimerRunning
				return
			end
			
			this.pRemainingTime = 0
			this.pTimerRunning = false
			this.setRequiresThink( false )
			
			this.pListeners.forEach( block Listener each
				each.timerCancelled( this )
			end )
		end
		
		/** \brief Operate target after timer elapsed. */
		public func void onTimeout()
			this.pRemainingTime = 0
			this.pTimerRunning = false
			this.setRequiresThink( false )
			
			if this.pTarget != null
				if this.pFireOnTimeout
					this.pTarget.fire()
					
					if this.pPulse
						if this.pFullReset
							this.pTarget.fullReset()
							
						else
							this.pTarget.reset()
						end
					end
					
				else
					if this.pFullReset
						this.pTarget.fullReset()
						
					else
						this.pTarget.reset()
					end
					
					if this.pPulse
						this.pTarget.fire()
					end
				end
			end
			
			this.pListeners.forEach( block Listener each
				each.timerElapsed( this )
			end )
		end
		
		
		
		/** \brief Add listener. */
		public func void addListener( Listener listener )
			if listener == null
				throw EInvalidParam.new()
			end
			this.pListeners.add( listener )
		end
		
		/** \brief Remove listener. */
		public func void removeListener( Listener listener )
			this.pListeners.remove( listener )
		end
		
		
		
		/** \brief Think about what to do for the next frame update. */
		public func void think( float elapsed )
			if not this.pTimerRunning
				return
			end
			
			this.pRemainingTime -= elapsed
			if this.pRemainingTime <= 0
				this.onTimeout()
			end
		end
		
		
		
		/** \brief Add element to game world. */
		public func void addToGameWorld()
			if this.pTarget == null
				return
			end
			
			this.pTarget.acquireTarget( this.pECBehavior.getTriggerTable() )
			
			if this.pApplyStartActivated
				this.pApplyStartActivated = false
				
				if this.pStartActivated
					this.armTimer()
				end
			end
		end
		
		/** \brief Remove element from game world. */
		public func void removeFromGameWorld()
			if this.pTarget != null
				this.pTarget.dropTarget()
			end
		end
		
		
		
		/** \brief Read behavior instance from file. */
		public func void readFromFile( PersistencyEnvironment env, FileReader reader )
			select reader.readByte() // version
			case 0
				this.pApplyStartActivated = false
				
				this.pRemainingTime = reader.readFloat()
				this.pTimerRunning = env.readBool( reader )
				
			else
				throw EInvalidParam.new( "unsupported version" )
			end
		end
		
		/** \brief Write behavior instance to file. */
		public func void writeToFile( PersistencyEnvironment env, FileWriter writer )
			writer.writeByte( 0 ) // version
			
			writer.writeFloat( this.pRemainingTime )
			env.writeBool( writer, this.pTimerRunning )
		end
	end
	
	
	
	private var ECBehaviorTriggered pTriggered
	private var ECPString pTarget
	private var ECPFloat pTimeout
	private var ECPBoolean pFireOnTimeout
	private var ECPBoolean pStartActivated
	private var ECPBoolean pFullReset
	private var ECPBoolean pPulse
	private var ECPBoolean pCancelOnReset
	private var TSTriggerTable pTriggerTable
	private var Array pListenerFactories
	
	
	
	/** \brief Create behavior element class. */
	public func new( BehaviorElementClass eclass ) \
	this( eclass, BaseGameApp.getApp().getTriggerTable(), "" )
	end
	
	public func new( BehaviorElementClass eclass, String id ) \
	this( eclass, BaseGameApp.getApp().getTriggerTable(), id )
	end
	
	public func new( BehaviorElementClass eclass, TSTriggerTable triggerTable ) \
	this( eclass, triggerTable, "" )
	end
	
	public func new( BehaviorElementClass eclass, TSTriggerTable triggerTable, String id ) \
	this( eclass, triggerTable, id, id.empty() if "timer" else "timer(" + id + ")" )
	end
	
	public func new( BehaviorElementClass eclass, TSTriggerTable triggerTable, String id, String subID ) \
	this( eclass, triggerTable, id, subID, subID + "." )
	end
	
	public func new( BehaviorElementClass eclass, TSTriggerTable triggerTable, \
	String id, String subID, String prefix ) super( eclass, id )
		this.pTriggerTable = triggerTable
		this.pListenerFactories = Array.new()
		
		this.pTriggered = ECBehaviorTriggered.new( eclass, triggerTable, subID, prefix + "trigger" )
		
		this.pTarget = ECPString.new( prefix + "target", null )
		eclass.addProperty( this.pTarget )
		
		this.pTimeout = ECPFloat.new( prefix + "timeout", 0, 0 )
		eclass.addProperty( this.pTimeout )
		
		this.pFireOnTimeout = ECPBoolean.new( prefix + "fireOnTimeout", true )
		eclass.addProperty( this.pFireOnTimeout )
		
		this.pStartActivated = ECPBoolean.new( prefix + "startActivated", false )
		eclass.addProperty( this.pStartActivated )
		
		this.pFullReset = ECPBoolean.new( prefix + "fullReset", false )
		eclass.addProperty( this.pFullReset )
		
		this.pPulse = ECPBoolean.new( prefix + "pulse", false )
		eclass.addProperty( this.pPulse )
		
		this.pCancelOnReset = ECPBoolean.new( prefix + "cancelOnReset", false )
		eclass.addProperty( this.pCancelOnReset )
		
		eclass.addBehavior( this )
	end
	
	/** \brief Dispose of behavior. */
	public func void dispose()
		this.pListenerFactories = null
		super.dispose()
	end
	
	
	
	/** \brief Trigger to start timer. */
	public func ECBehaviorTriggered getTriggered()
		return this.pTriggered
	end
	
	/** \brief Trigger target to operate. */
	public func ECPString getTarget()
		return this.pTarget
	end
	
	/** \brief Time in seconds until target is fired/reset after expression becomes true. */
	public func ECPFloat getTimeout()
		return this.pTimeout
	end
	
	/** \brief Target is fired (true) or reset (false) after timeout elapses. */
	public func ECPBoolean getFireOnTimeout()
		return this.pFireOnTimeout
	end
	
	/** \brief Full reset target instead of simple reset. */
	public func ECPBoolean getFullReset()
		return this.pFullReset
	end
	
	/**
	 * \brief Pulse target if timeout elapses.
	 * 
	 * If FireOnTimeout is true invokes fire() then reset()/fullReset() on the target.
	 * If FireOnTimeout is false invokes reset()/fullReset() then fire() on the target.
	 * Using pulse avoids the need to use two TriggerTimer to trigger a target multiple
	 * times in a row.
	 */
	public func ECPBoolean getPulse()
		return this.pPulse
	end
	
	/** \brief Trigger starts out activated. */
	public func ECPBoolean getStartActivated()
		return this.pStartActivated
	end
	
	/** \brief Trigger timer is cancelled if trigger expression evaluates to false. */
	public func ECPBoolean getCancelOnReset()
		return this.pCancelOnReset
	end
	
	/** \brief Trigger table or \em null if not used. */
	public func TSTriggerTable getTriggerTable()
		return this.pTriggerTable
	end
	
	/** \brief Set trigger table or \em null if not used. */
	protected func void setTriggerTable( TSTriggerTable triggerTable )
		this.pTriggerTable = triggerTable
	end
	
	/** \brief Add listener factory. */
	public func void addListenerFactory( ListenerFactory factory )
		if factory == null
			throw ENullPointer.new()
		end
		this.pListenerFactories.add( factory )
	end
	
	/**
	 * \brief Add listener factory using block.
	 * 
	 * Block receives as parameter Instance and returns Listener.
	 */
	public func void addListenerFactory( Block blockFactory )
		this.pListenerFactories.add( BlockListenerFactory.new( blockFactory ) )
	end
	
	/** \brief Visit listener factories with block with argument ListenerFactory. */
	public func void forEachListenerFactory( Block ablock )
		this.pListenerFactories.forEach( ablock )
	end
	
	/** \brief Create listeners from factories adding them to behavior instance. */
	public func void createListeners( Instance instance )
		this.pListenerFactories.forEach( block ListenerFactory each
			instance.addListener( each.createListener( instance ) )
		end )
	end
	
	
	
	/** \brief Get instance in element from owner element class. */
	public func Instance instance( BehaviorElement element )
		return element.getInstanceAt( this.getInstanceIndex() ) cast Instance
	end
	
	
	
	/**
	 * \brief Get behavior in element class or \em null if absent.
	 * 
	 * Use this method to check if a particular BehaviorElementClass contains a behavior
	 * of type ECBehaviorComponent.
	 */
	static public func ECBehaviorTimer getBehaviorIn( BehaviorElementClass eclass )
		return eclass.findBehavior( block ECBehaviorTimer each
			return true
		end ) cast ECBehaviorTimer
	end
	
	/**
	 * \brief Get behavior with id in element class or \em null if absent.
	 * 
	 * Use this method to check if a particular BehaviorElementClass contains a behavior
	 * of type ECBehaviorTimer with specific identifier.
	 */
	static public func ECBehaviorTimer getBehaviorIn( BehaviorElementClass eclass, String id )
		return eclass.findBehavior( block ECBehaviorTimer each
			return each.getID().equals( id )
		end ) cast ECBehaviorTimer
	end
	
	/**
	 * \brief Get list of all behaviors in element.
	 * 
	 * Returns list contains ECBehaviorTimer behaviors in the order they have
	 * been created in the element.
	 */
	static public func Array getAllBehaviorsIn( BehaviorElementClass eclass )
		return eclass.collectBehaviors( block ECBehaviorTimer each
			return true
		end )
	end
	
	
	
	/**
	 * \brief Get instance in element or \em null if absent.
	 * 
	 * Use this method to check if a particular BehaviorElement contains a behavior instance
	 * of type ECBehaviorTimer.Instance . If more than one instance is present returns
	 * the first instance.
	 */
	static public func Instance getInstanceIn( BehaviorElement element )
		return element.findInstance( block Instance each
			return true
		end ) cast Instance
	end
	
	/**
	 * \brief Get instance with id in element or \em null if absent.
	 * 
	 * Use this method to check if a particular BehaviorElement contains a behavior instance
	 * of type ECBehaviorTimer.Instance with specific identifier.
	 */
	static public func Instance getInstanceIn( BehaviorElement element, String id )
		return element.findInstance( block Instance each
			return each.getECBehavior().getID().equals( id )
		end ) cast Instance
	end
	
	/**
	 * \brief Get list of all instances in element.
	 * 
	 * Returns list contains ECBehaviorTimer.Instance instances in the order they have
	 * been created in the element.
	 */
	static public func Array getAllInstancesIn( BehaviorElement element )
		return element.collectInstances( block Instance each
			return true
		end )
	end
	
	
	
	/** \brief Create Behavior instance. */
	public func ECBehaviorInstance createInstance( BehaviorElement element )
		return Instance.new( this, element )
	end
end
