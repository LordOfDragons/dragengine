/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */


namespace Dragengine.Scenery

pin Dragengine.Gui
pin Dragengine.LoadSave
pin Dragengine.Preloading
pin Dragengine.Utils
pin Dragengine.TriggerSystem


/**
 * \brief Behavior element behavior toggling trigger target.
 * 
 * Toggles trigger target between fired and reset state whenever evaluation state of trigger
 * expression changes to true.
 * 
 * Element class properties have the prefix "toggle{(id)}.".
 * 
 * This behavior does not require the element class to be persistable (setPersistable).
 */
class ECBehaviorToggle extends DefaultECBehavior
	/** \brief Listener for behavior instance events. */
	interface Listener
		/** \brief Trigger target toggled. */
		func void toggled( Instance instance )
	end
	
	/** \brief Default implementation of behavior instance listener. */
	class DefaultListener implements Listener
		/** \brief Create default listener. */
		public func new()
		end
		
		/** \brief Trigger target toggled. */
		public func void toggled( Instance instance )
		end
	end
	
	/** \brief Factory creating listeners. */
	interface ListenerFactory
		/** \brief Create listener. */
		func Listener createListener( Instance instance )
	end
	
	/** \brief Factory creating listeners using block. */
	class BlockListenerFactory implements ListenerFactory
		private var Block pBlock
		
		/** \brief Create factory using block receiving Instance as parameter returning Listener. */
		public func new( Block blockFactory )
			if blockFactory == null
				throw ENullPointer.new()
			end
			this.pBlock = blockFactory
		end
		
		/** \brief Create listener. */
		public func Listener createListener( Instance instance )
			return this.pBlock.run( instance ) cast Listener
		end
	end
	
	/**
	 * \brief Behavior factory.
	 * \ref 1.25
	 * 
	 * Example XML element class:
	 * \code{.xml}
	 * <behavior type='ECBehaviorToggle'>
	 *   <!-- optional: use BaseGameApp trigger table. game can add more supported values.
	 *                  default is 'default' -->
	 *   <string name='triggerTable'>default</string>
	 * </behavior>
	 * 
	 * <!-- for adding multiple behaviors use unique identifiers -->
	 * <behavior type='ECBehaviorToggle' id='second'>
	 *   ...
	 * </behavior>
	 * \endcode
	 */
	class Factory implements BehaviorFactory
		func new()
		end
		
		func String factoryId()
			return "ECBehaviorToggle"
		end
		
		func ECBehavior addBehavior(BehaviorElementClass eclass, String id, Dictionary parameters)
			return ECBehaviorToggle.new(eclass,\
				getTriggerTableFor(parameters.getAt("triggerTable", "default") cast String), id)
		end
		
		/**
		 * \brief Trigger table matching value.
		 * 
		 * Default implementation returns \ref BaseGameApp#getTriggerTable() for value 'default'
		 * and null for all other values. Overwrite to accept other values.
		 */
		func TSTriggerTable getTriggerTableFor(String value)
			return BehaviorElementClass.sharedFactoryHelper.triggerTable(value)
		end
	end
	
	
	
	/** \brief Behavior instance. */
	class Instance extends DefaultECBehaviorInstance
		/** \brief Trigger listener. */
		public class ToggleListener extends ECBehaviorTriggered.DefaultListener
			private var Instance pInstance
			
			public func new( Instance instance )
				this.pInstance = instance
			end
			
			public func void triggerExpressionTrue( ECBehaviorTriggered.Instance instance )
				this.pInstance.toggle()
			end
		end
		
		
		
		private var ECBehaviorToggle pECBehavior
		private var ECBehaviorTriggered.Instance pTrigger
		private var TSNamedTriggerTarget pTarget
		private var bool pStartActivated
		private var bool pApplyStartActivated
		private var Array pListeners
		
		
		
		/** \brief Create element. */
		public func new( ECBehaviorToggle ecbehavior, BehaviorElement element ) super( element )
			this.pECBehavior = ecbehavior
			this.pListeners = Array.new()
			this.pApplyStartActivated = true
		end
		
		/** \brief Dispose of composeable instance. */
		public func void dispose()
			this.pTarget = null
			this.pTrigger = null
			this.pListeners = null
			
			super.dispose()
		end
		
		
		
		/** \brief Initialize element from stub. */
		public func void init( StubElement stub )
			if this.pECBehavior.getTriggerTable() == null
				return
			end
			
			this.pTrigger = this.pECBehavior.getTriggered().instance( this.getElement() )
			this.pTrigger.addListener( ToggleListener.new( this ) )
			
			this.pStartActivated = this.pECBehavior.getStartActivated().getValue( stub )
			
			this.pTarget = TSNamedTriggerTarget.new( this.pECBehavior.getTarget().getValue( stub ) )
			
			this.pECBehavior.createListeners( this )
		end
		
		
		
		/** \brief Behavior. */
		public func ECBehaviorToggle getECBehavior()
			return this.pECBehavior
		end
		
		/** \brief Trigger or \em null. */
		public func ECBehaviorTriggered.Instance getTrigger()
			return this.pTrigger
		end
		
		/** \brief Trigger target or \em null. */
		public func TSNamedTriggerTarget getTarget()
			return this.pTarget
		end
		
		/** \brief Initial state of trigger target when behavior is added to trigger table. */
		public func bool getStartActivated()
			return this.pStartActivated
		end
		
		
		
		/** \brief Toggle trigger expression. */
		public func void toggle()
			if this.pTarget != null
				if this.pTarget.getFired()
					this.pTarget.reset()
					
				else
					this.pTarget.fire()
				end
			end
			
			this.pListeners.forEach( block Listener each
				each.toggled( this )
			end )
		end
		
		
		
		/** \brief Add listener. */
		public func void addListener( Listener listener )
			if listener == null
				throw EInvalidParam.new()
			end
			this.pListeners.add( listener )
		end
		
		/** \brief Remove listener. */
		public func void removeListener( Listener listener )
			this.pListeners.remove( listener )
		end
		
		
		
		/** \brief Add element to game world. */
		public func void addToGameWorld()
			if this.pTarget == null
				return
			end
			
			this.pTarget.acquireTarget( this.pECBehavior.getTriggerTable() )
			
			if this.pApplyStartActivated
				this.pApplyStartActivated = false
				if this.pStartActivated
					this.pTarget.fire()
				end
			end
		end
		
		/** \brief Remove element from game world. */
		public func void removeFromGameWorld()
			if this.pTarget != null
				this.pTarget.dropTarget()
			end
		end
		
		
		
		/** \brief Read element from file. */
		public func void readFromFile( PersistencyEnvironment env, FileReader reader )
			super.readFromFile( env, reader ) // do not remove unless persisting states!
			this.pApplyStartActivated = false
		end
	end
	
	
	
	private var ECBehaviorTriggered pTriggered
	private var ECPString pTarget
	private var ECPBoolean pStartActivated
	private var TSTriggerTable pTriggerTable
	private var Array pListenerFactories
	
	
	
	/** \brief Create behavior element class. */
	public func new( BehaviorElementClass eclass ) \
	this( eclass, BaseGameApp.getApp().getTriggerTable(), "" )
	end
	
	public func new( BehaviorElementClass eclass, String id ) \
	this( eclass, BaseGameApp.getApp().getTriggerTable(), id )
	end
	
	public func new( BehaviorElementClass eclass, TSTriggerTable triggerTable ) \
	this( eclass, triggerTable, "" )
	end
	
	public func new( BehaviorElementClass eclass, TSTriggerTable triggerTable, String id ) \
	this( eclass, triggerTable, id, id.empty() if "toggle" else "toggle(" + id + ")" )
	end
	
	public func new( BehaviorElementClass eclass, TSTriggerTable triggerTable, String id, String subID ) \
	this( eclass, triggerTable, id, subID, subID + "." )
	end
	
	public func new( BehaviorElementClass eclass, TSTriggerTable triggerTable, \
	String id, String subID, String prefix ) super( eclass, id )
		this.pTriggerTable = triggerTable
		this.pListenerFactories = Array.new()
		
		this.pTriggered = ECBehaviorTriggered.new( eclass, triggerTable, subID, prefix + "trigger" )
		
		this.pTarget = ECPString.new( prefix + "target", null )
		eclass.addProperty( this.pTarget )
		
		this.pStartActivated = ECPBoolean.new( prefix + "startActivated", false )
		eclass.addProperty( this.pStartActivated )
		
		eclass.addBehavior( this )
	end
	
	/** \brief Dispose of behavior. */
	public func void dispose()
		this.pListenerFactories = null
		super.dispose()
	end
	
	
	
	/** \brief Trigger to toggle. */
	public func ECBehaviorTriggered getTriggered()
		return this.pTriggered
	end
	
	/** \brief Trigger target to operate. */
	public func ECPString getTarget()
		return this.pTarget
	end
	
	/** \brief Initial state of trigger target when behavior is added to trigger table. */
	public func ECPBoolean getStartActivated()
		return this.pStartActivated
	end
	
	/** \brief Trigger table or \em null if not used. */
	public func TSTriggerTable getTriggerTable()
		return this.pTriggerTable
	end
	
	/** \brief Set trigger table or \em null if not used. */
	protected func void setTriggerTable( TSTriggerTable triggerTable )
		this.pTriggerTable = triggerTable
	end
	
	/** \brief Add listener factory. */
	public func void addListenerFactory( ListenerFactory factory )
		if factory == null
			throw ENullPointer.new()
		end
		this.pListenerFactories.add( factory )
	end
	
	/**
	 * \brief Add listener factory using block.
	 * 
	 * Block receives as parameter Instance and returns Listener.
	 */
	public func void addListenerFactory( Block blockFactory )
		this.pListenerFactories.add( BlockListenerFactory.new( blockFactory ) )
	end
	
	/** \brief Visit listener factories with block with argument ListenerFactory. */
	public func void forEachListenerFactory( Block ablock )
		this.pListenerFactories.forEach( ablock )
	end
	
	/** \brief Create listeners from factories adding them to behavior instance. */
	public func void createListeners( Instance instance )
		this.pListenerFactories.forEach( block ListenerFactory each
			instance.addListener( each.createListener( instance ) )
		end )
	end
	
	
	
	/** \brief Get instance in element from owner element class. */
	public func Instance instance( BehaviorElement element )
		return element.getInstanceAt( this.getInstanceIndex() ) cast Instance
	end
	
	
	
	/**
	 * \brief Get behavior in element class or \em null if absent.
	 * 
	 * Use this method to check if a particular BehaviorElementClass contains a behavior
	 * of type ECBehaviorComponent.
	 */
	static public func ECBehaviorToggle getBehaviorIn( BehaviorElementClass eclass )
		return eclass.findBehavior( block ECBehaviorToggle each
			return true
		end ) cast ECBehaviorToggle
	end
	
	/**
	 * \brief Get behavior with id in element class or \em null if absent.
	 * 
	 * Use this method to check if a particular BehaviorElementClass contains a behavior
	 * of type ECBehaviorToggle with specific identifier.
	 */
	static public func ECBehaviorToggle getBehaviorIn( BehaviorElementClass eclass, String id )
		return eclass.findBehavior( block ECBehaviorToggle each
			return each.getID().equals( id )
		end ) cast ECBehaviorToggle
	end
	
	/**
	 * \brief Get list of all behaviors in element.
	 * 
	 * Returns list contains ECBehaviorToggle behaviors in the order they have
	 * been created in the element.
	 */
	static public func Array getAllBehaviorsIn( BehaviorElementClass eclass )
		return eclass.collectBehaviors( block ECBehaviorToggle each
			return true
		end )
	end
	
	
	
	/**
	 * \brief Get instance in element or \em null if absent.
	 * 
	 * Use this method to check if a particular BehaviorElement contains a behavior instance
	 * of type ECBehaviorToggle.Instance . If more than one instance is present returns
	 * the first instance.
	 */
	static public func Instance getInstanceIn( BehaviorElement element )
		return element.findInstance( block Instance each
			return true
		end ) cast Instance
	end
	
	/**
	 * \brief Get instance with id in element or \em null if absent.
	 * 
	 * Use this method to check if a particular BehaviorElement contains a behavior instance
	 * of type ECBehaviorToggle.Instance with specific identifier.
	 */
	static public func Instance getInstanceIn( BehaviorElement element, String id )
		return element.findInstance( block Instance each
			return each.getECBehavior().getID().equals( id )
		end ) cast Instance
	end
	
	/**
	 * \brief Get list of all instances in element.
	 * 
	 * Returns list contains ECBehaviorToggle.Instance instances in the order they have
	 * been created in the element.
	 */
	static public func Array getAllInstancesIn( BehaviorElement element )
		return element.collectInstances( block Instance each
			return true
		end )
	end
	
	
	
	/** \brief Create Behavior instance. */
	public func ECBehaviorInstance createInstance( BehaviorElement element )
		return Instance.new( this, element )
	end
end
