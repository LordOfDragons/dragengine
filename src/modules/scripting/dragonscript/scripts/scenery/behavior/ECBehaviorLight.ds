/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */


namespace Dragengine.Scenery

pin Dragengine.Gui
pin Dragengine.LoadSave
pin Dragengine.Preloading
pin Dragengine.Utils
pin Dragengine.TriggerSystem


/**
 * \brief Behavior element behavior adding light support.
 * 
 * Behavior adds a Light resource to the the behavior element. This behavior can be added
 * multiple times to an element. Each instance creates one light attached to the element
 * collider which can be individually modified. To distinguish the lights each instance
 * has an identifier which can be used to retrieve a specific instance. The prefix of the
 * light class properties is "light." . If the identifier is not empty the light element
 * class properties have the prefix "{id}.light.". This can be overwritten if required.
 * Hence to use more than one light use code like this in your subclass constructor:
 * 
 * \code{.ds}
 * class MyElement extends BehaviorElementClass
 *    func new()
 *       ECBehaviorLight.new(this)
 *       ECBehaviorLight.new(this, "subLight")
 *    end
 * end
 * \endcode
 * 
 * You can now define the parameters to use for both lights using for example the properties
 * "color" for the first light and "subLight.color" for the second light.
 * 
 * It is recommended to always specify an identifier even if only one light is used.
 * This avoids potentially name conflicts especially if other behaviors are added attaching
 * other resources too.
 * 
 * If the \em ECBehaviorCollider behavior is present in the behavior element before this
 * behavior is added the light is attached. The light is attached to the named bone if
 * defined otherwise it is attached statically.
 * 
 * Element class properties have the prefix "light{(id)}.".
 * 
 * 
 * 
 * \par Listening and Customized Light Handling
 * 
 * The owner element class and other behaviors can register a listener to be notified if the
 * light is (de)activated. This can be used to provide customized light handling support for
 * example flickering or dimmable lights.
 * 
 * If another behaviors wants to control the light parameters in response to these events it
 * should call setCustomLightHandling(true). In this case the behavior implementing the light
 * parameter handling has to use requiresThink() to think while the effect lasts.
 * 
 * 
 * 
 * \par Owner Element Visibility
 * 
 * The activated state of the light source is linked with the visibility state of the owner
 * element. If the owner element becomes invisible the light resource is always deactivated.
 * If the owner element becomes visible the light resource is activated if the behavior is
 * activated too.
 * 
 * If custom light handling is used the behavior resposible for the custom light handling is
 * required to listen to stateChanged() calls and act accordingly. The light resource will be
 * always activated no matter if the custom light handling is enabled or not. Only if the
 * behavior is (de)activated or the element becomes visible the light parameters are not
 * modified if custom light handling is enabled.
 * 
 * This behavior does require the element class to be persistable (setPersistable).
 */
class ECBehaviorLight extends DefaultECBehavior
	/** \brief Listener for behavior instance events. */
	interface Listener
		/** \brief Light has been activated. */
		func void lightActivated(Instance instance)
		
		/** \brief Light has been deactivated. */
		func void lightDeactivated(Instance instance)
		
		/** \brief Light parameters have been changed. */
		func void lightParametersChanged(Instance instance)
	end
	
	/** \brief Default implementation of behavior instance listener. */
	class DefaultListener implements Listener
		/** \brief Create default listener. */
		func new()
		end
		
		/** \brief Light has been activated. */
		func void lightActivated(Instance instance)
		end
		
		/** \brief Light has been deactivated. */
		func void lightDeactivated(Instance instance)
		end
		
		/** \brief Light parameters have been changed. */
		func void lightParametersChanged(Instance instance)
		end
	end
	
	/** \brief Factory creating listeners. */
	interface ListenerFactory
		/** \brief Create listener. */
		func Listener createListener(Instance instance)
	end
	
	/** \brief Factory creating listeners using block. */
	class BlockListenerFactory implements ListenerFactory
		var Block pBlock
		
		/** \brief Create factory using block receiving Instance as parameter returning Listener. */
		func new(Block blockFactory)
			if blockFactory == null
				throw ENullPointer.new()
			end
			pBlock = blockFactory
		end
		
		/** \brief Create listener. */
		func Listener createListener(Instance instance)
			return pBlock.run(instance) cast Listener
		end
	end
	
	/**
	 * \brief Behavior factory.
	 * \ref 1.25
	 * 
	 * Automatically assigns these behaviors if present before adding:
	 * - Optional: \ref ECBehaviorCollider
	 * 
	 * Example XML element class:
	 * \code{.xml}
	 * <behavior type='ECBehaviorLight'>
	 *   <!-- optional: set layer mask as list of bits to set. default is '0 1' which means
	 *                  BaseGameApp.WorldLayerBit.default, BaseGameApp.WorldLayerBit.envmap -->
	 *   <string name='layerMask'>0 1</string>
	 * 
	 *   <!-- optional: set shadow layer mask. default is same as 'layerMask' -->
	 *   <string name='layerMaskShadow'>0 1</string>
	 * 
	 *   <!-- optional: use BaseGameApp trigger table. game can add more supported values -->
	 *   <string name='triggerTable'>default</string>
	 * 
	 *   <!-- optional: sync trigger with light matching identifier -->
	 *   <string name='syncTrigger'>second</string>
	 * 
	 *   <!-- optional: component behaviors not casting shadows. list of behavior identifiers -->
	 *   <list name='shadowIgnoreComponents'>
	 *     <string>first</string>
	 *     <string>second</string>
	 *   </list>
	 * </behavior>
	 * 
	 * <!-- for adding multiple behaviors use unique identifiers -->
	 * <behavior type='ECBehaviorLight' id='second'>
	 *   ...
	 * </behavior>
	 * \endcode
	 */
	class Factory implements BehaviorFactory
		func new()
		end
		
		func String factoryId()
			return "ECBehaviorLight"
		end
		
		func ECBehavior addBehavior(BehaviorElementClass eclass, String id, Dictionary parameters)
			var ECBehaviorLight behavior = ECBehaviorLight.new(eclass,\
				ECBehaviorCollider.getBehaviorIn(eclass),\
				getTriggerTableFor(parameters.getAt("triggerTable", "default") cast String), id)
			
			if parameters.has("layerMask")
				behavior.getLight().setLayerMask(ElementClass.getSharedCodecPropertyString().\
					decodeLayerMask(parameters.getAt("layerMask") cast String))
			end
			
			if parameters.has("layerMaskShadow")
				behavior.getLight().setLayerMaskShadow(ElementClass.getSharedCodecPropertyString().\
					decodeLayerMask(parameters.getAt("layerMaskShadow") cast String))
			end
			
			if parameters.has("syncTrigger")
				var String bid = parameters.getAt("syncTrigger") cast String
				if bid != null
					behavior.setSyncTrigger(ECBehaviorLight.getBehaviorIn(eclass, bid))
				end
			end
			
			if parameters.has("shadowIgnoreComponents")
				(parameters.getAt("shadowIgnoreComponents") cast Array).forEach(block String each
					behavior.addShadowIgnoreComponent(ECBehaviorComponent.getBehaviorIn(eclass, each))
				end)
			end
			
			return behavior
		end
		
		/**
		 * \brief Trigger table matching value.
		 * 
		 * Default implementation returns \ref BaseGameApp#getTriggerTable() for value 'default'
		 * and null for all other values. Overwrite to accept other values.
		 */
		func TSTriggerTable getTriggerTableFor(String value)
			if value.equals("default")
				var BaseGameApp app = BaseGameApp.getApp()
				if app != null
					return app.getTriggerTable()
				end
			end
			return null
		end
	end
	
	/** \brief Behavior instance. */
	class Instance extends DefaultECBehaviorInstance
		/** \brief Trigger listener to activate light. */
		public class ActivateListener extends ECBehaviorTriggered.DefaultListener
			var Instance pInstance
			
			func new(Instance instance)
				pInstance = instance
			end
			
			func void triggerExpressionTrue(ECBehaviorTriggered.Instance instance)
				pInstance.setActivated(true)
			end
			
			func void triggerExpressionFalse(ECBehaviorTriggered.Instance instance)
				pInstance.setActivated(false)
			end
		end
		
		var ECBehaviorLight pECBehavior
		var ECBehaviorCollider.Instance pCollider
		var bool pActivated
		var Light pLight
		var ECBehaviorTriggered.Instance pTrigger
		var Array pListeners
		var bool pCustomLightHandling
		
		
		
		/** \brief Create element. */
		func new(ECBehaviorLight ecbehavior, BehaviorElement element) super(element)
			pECBehavior = ecbehavior
			pActivated = true
			pCustomLightHandling = false
			pListeners = Array.new()
		end
		
		/** \brief Dispose of composeable instance. */
		func void dispose()
			pTrigger = null
			pCollider = null
			pListeners = null
			super.dispose()
		end
		
		
		
		/** \brief Initialize element from stub. */
		func void init(StubElement stub)
			if pECBehavior.getCollider() != null
				pCollider = pECBehavior.getCollider().instance(getElement())
			end
			
			pLight = createLight(stub)
			if pLight == null
				return
			end
			
			addShadowIgnoreComponents(stub)
			pECBehavior.createListeners(this)
			
			if pECBehavior.getTriggerTable() != null
				pTrigger = getTriggerBehavior()
				pTrigger.addListener(ActivateListener.new(this))
			end
			
			if pTrigger != null and pTrigger.getTriggerExpression() != null
				// required because of createLight()
				pLight.setActivated(false)
				pActivated = false
				
			else
				setActivated(pLight.getActivated())
			end
			
			if pCollider != null and pCollider.getCollider() != null
				attachLight(stub, pCollider)
			end
		end
		
		/**
		 * \brief Create light.
		 * 
		 * Default implementation calls ECComposeLight.createLight().
		 */
		protected func Light createLight(StubElement stub)
			return pECBehavior.getLight().createLight(getElement(), stub)
		end
		
		/**
		 * \brief Add components to ignore while casting shadows.
		 * \version 1.4
		 * 
		 * Default implementation calls ECBehaviorLight.forEachIgnoreComponent() and adds
		 * all visited components as components to ignore.
		 */
		protected func void addShadowIgnoreComponents(StubElement stub)
			var BehaviorElement element = getElement()
			pECBehavior.forEachShadowIgnoreComponent(block ECBehaviorComponent each
				var Component component = each.instance(element).getComponent()
				if component != null
					pLight.addShadowIgnoreComponent(component)
				end
			end)
		end
		
		/**
		 * \brief Get activate trigger behavior.
		 * 
		 * Default implementation uses owner class trigger behavior. If getSyncTrigger()
		 * of parent ECBehaviorLight is not null uses referenced behavior trigger behavior.
		 */
		protected func ECBehaviorTriggered.Instance getTriggerBehavior()
			var ECBehaviorLight behavior = pECBehavior.getSyncTrigger()
			var BehaviorElement element = getElement()
			
			if behavior != null
				return behavior.instance(element).getTrigger()
				
			else
				return pECBehavior.getTrigger().instance(element)
			end
		end
		
		/**
		 * \brief Attach light to collider.
		 * 
		 * Default implementation calls ECComposeAttachResource.attach().
		 */
		protected func void attachLight(StubElement stub, ECBehaviorCollider.Instance collider)
			pECBehavior.getAttach().attach(collider.getCollider(), pLight, stub)
		end
		
		
		
		/** \brief Behavior. */
		func ECBehaviorLight getECBehavior()
			return pECBehavior
		end
		
		/** \brief Collider behavior or null if not attached. */
		func ECBehaviorCollider.Instance getCollider()
			return pCollider
		end
		
		/** \brief Trigger activate or \em null. */
		func ECBehaviorTriggered.Instance getTrigger()
			return pTrigger
		end
		
		/** \brief Light. */
		func Light getLight()
			return pLight
		end
		
		
		
		/** \brief Light is activated. */
		func bool getActivated()
			return pActivated
		end
		
		/** \brief Set if light is activated. */
		func void setActivated(bool activated)
			if activated == pActivated
				return
			end
			
			pActivated = activated
			
			if not pCustomLightHandling
				pLight.setActivated(activated and getElement().getVisible())
			end
			
			if activated
				pListeners.forEach(block Listener each
					each.lightActivated(this)
				end)
				
			else
				pListeners.forEach(block Listener each
					each.lightDeactivated(this)
				end)
			end
		end
		
		/** \brief Toggle light activated state. */
		func void toggle()
			setActivated(not pActivated)
		end
		
		
		
		/** \brief Light parameters are handled by another behavior. */
		func bool getCustomLightHandling()
			return pCustomLightHandling
		end
		
		/** \brief Set if light parameters are handled by another behavior. */
		func void setCustomLightHandling(bool customLightHandling)
			pCustomLightHandling = customLightHandling
		end
		
		/**
		 * \brief Notify listeners light parameters changed.
		 * 
		 * Call this method after changing light parameters other than (de)activating light.
		 */
		func void notifyParametersChanged()
			pListeners.forEach(block Listener each
				each.lightParametersChanged(this)
			end)
		end
		
		
		
		/** \brief Add listener. */
		func void addListener(Listener listener)
			if listener == null
				throw EInvalidParam.new()
			end
			pListeners.add(listener)
		end
		
		/** \brief Remove listener. */
		func void removeListener(Listener listener)
			pListeners.remove(listener)
		end
		
		
		
		/** \brief State changed (visible, touchable). */
		func void stateChanged()
			if pLight != null
				if getElement().getVisible()
					if not pCustomLightHandling
						pLight.setActivated(pActivated)
					end
					
				else
					pLight.setActivated(false)
				end
			end
		end
		
		/** \brief Add element to game world. */
		func void addToGameWorld()
			getElement().getGameWorld().getWorld().addLight(pLight)
		end
		
		/** \brief Remove element from game world. */
		func void removeFromGameWorld()
			getElement().getGameWorld().getWorld().removeLight(pLight)
		end
		
		
		
		/** \brief Read element from file. */
		func void readFromFile(PersistencyEnvironment env, FileReader reader)
			select reader.readByte() // version
			case 0
				setActivated(env.readBool(reader))
				
			else
				throw EInvalidParam.new("unsupported version")
			end
		end
		
		/** Writes the element to a file. */
		func void writeToFile(PersistencyEnvironment env, FileWriter writer)
			writer.writeByte(0) // version
			
			env.writeBool(writer, pActivated)
		end
	end
	
	
	
	var ECBehaviorCollider pCollider
	var ECComposeLight pLight
	var ECComposeAttachResource pAttach
	var ECBehaviorTriggered pTrigger
	var ECBehaviorLight pSyncTrigger
	var TSTriggerTable pTriggerTable
	var Array pShadowIgnoreComponents
	var Array pListenerFactories
	
	
	
	/**
	 * \brief Create behavior element class.
	 * 
	 * These values are optional and can be null: \em collider.
	 */
	func new(BehaviorElementClass eclass, ECBehaviorCollider collider) \
	this(eclass, collider, null cast TSTriggerTable, "")
	end
	
	func new(BehaviorElementClass eclass, ECBehaviorCollider collider, String id) \
	this(eclass, collider, null cast TSTriggerTable, id)
	end
	
	func new(BehaviorElementClass eclass, ECBehaviorCollider collider, \
	TSTriggerTable triggerTable) this(eclass, collider, triggerTable, "")
	end
	
	func new(BehaviorElementClass eclass, ECBehaviorCollider collider, \
	TSTriggerTable triggerTable, String id) this(eclass, collider, triggerTable, \
	id, id.empty() if "light" else "light(" + id + ")")
	end
	
	func new(BehaviorElementClass eclass, ECBehaviorCollider collider, \
	TSTriggerTable triggerTable, String id, String subID) \
	this(eclass, collider, triggerTable, id, subID, subID + ".")
	end
	
	func new(BehaviorElementClass eclass, ECBehaviorCollider collider, \
	TSTriggerTable triggerTable, String id, String subID, String prefix) super(eclass, id)
		pCollider = collider
		pTriggerTable = triggerTable
		pShadowIgnoreComponents = Array.new()
		pListenerFactories = Array.new()
		
		pLight = ECComposeLight.new(eclass, prefix)
		pAttach = ECComposeAttachResource.new(eclass, prefix)
		
		pTrigger = ECBehaviorTriggered.new(eclass, triggerTable, subID, prefix + "trigger")
		
		eclass.addBehavior(this)
	end
	
	/** \brief Dispose of behavior. */
	func void dispose()
		pCollider = null
		pSyncTrigger = null
		pShadowIgnoreComponents = null
		pListenerFactories = null
		super.dispose()
	end
	
	
	
	/** \brief Collider behavior or null to not attach. */
	func ECBehaviorCollider getCollider()
		return pCollider
	end
	
	/** \brief Composeable light for element class. */
	func ECComposeLight getLight()
		return pLight
	end
	
	/** \brief Attach resource. */
	func ECComposeAttachResource getAttach()
		return pAttach
	end
	
	/** \brief Trigger activate. */
	func ECBehaviorTriggered getTrigger()
		return pTrigger
	end
	
	/** \brief ECBehaviorLight to synchronize triggers with or \em null to disable. */
	func ECBehaviorLight getSyncTrigger()
		return pSyncTrigger
	end
	
	/** \brief Set ECBehaviorLight to synchronize triggers with or \em null to disable. */
	func void setSyncTrigger(ECBehaviorLight behavior)
		pSyncTrigger = behavior
	end
	
	/** \brief Trigger table or \em null if not used. */
	func TSTriggerTable getTriggerTable()
		return pTriggerTable
	end
	
	/** \brief Set trigger table or \em null if not used. */
	func void setTriggerTable(TSTriggerTable triggerTable)
		pTriggerTable = triggerTable
	end
	
	/**
	 * \brief Add component to ignore while casting shadows.
	 * \version 1.4
	 */
	func void addShadowIgnoreComponent(ECBehaviorComponent component)
		if component == null
			throw ENullPointer.new()
		end
		pShadowIgnoreComponents.add(component)
	end
	
	/**
	 * \brief Visit components to ignore while casting shadows using block with parameter ECBehaviorComponent.
	 * \version 1.4
	 */
	func void forEachShadowIgnoreComponent(Block ablock)
		pShadowIgnoreComponents.forEach(ablock)
	end
	
	/** \brief Add listener factory. */
	func void addListenerFactory(ListenerFactory factory)
		if factory == null
			throw ENullPointer.new()
		end
		pListenerFactories.add(factory)
	end
	
	/**
	 * \brief Add listener factory using block.
	 * 
	 * Block receives as parameter Instance and returns Listener.
	 */
	func void addListenerFactory(Block blockFactory)
		pListenerFactories.add(BlockListenerFactory.new(blockFactory))
	end
	
	/** \brief Visit listener factories with block with argument ListenerFactory. */
	func void forEachListenerFactory(Block ablock)
		pListenerFactories.forEach(ablock)
	end
	
	/** \brief Create listeners from factories adding them to behavior instance. */
	func void createListeners(Instance instance)
		pListenerFactories.forEach(block ListenerFactory each
			instance.addListener(each.createListener(instance))
		end)
	end
	
	
	
	/** \brief Get instance in element from owner element class. */
	func Instance instance(BehaviorElement element)
		return element.getInstanceAt(getInstanceIndex()) cast Instance
	end
	
	
	
	/**
	 * \brief Get behavior in element class or \em null if absent.
	 * 
	 * Use this method to check if a particular BehaviorElementClass contains a behavior
	 * of type ECBehaviorCollider.
	 */
	static func ECBehaviorLight getBehaviorIn(BehaviorElementClass eclass)
		return eclass.findBehavior(block ECBehaviorLight each
			return true
		end) cast ECBehaviorLight
	end
	
	/**
	 * \brief Get behavior with id in element class or \em null if absent.
	 * 
	 * Use this method to check if a particular BehaviorElementClass contains a behavior
	 * of type ECBehaviorLight with specific identifier.
	 */
	static func ECBehaviorLight getBehaviorIn(BehaviorElementClass eclass, String id)
		return eclass.findBehavior(block ECBehaviorLight each
			return each.getID().equals(id)
		end) cast ECBehaviorLight
	end
	
	/**
	 * \brief Get list of all behaviors in element.
	 * 
	 * Returns list contains ECBehaviorLight behaviors in the order they have
	 * been created in the element.
	 */
	static func Array getAllBehaviorsIn(BehaviorElementClass eclass)
		return eclass.collectBehaviors(block ECBehaviorLight each
			return true
		end)
	end
	
	
	
	/**
	 * \brief Get instance in element or \em null if absent.
	 * 
	 * Use this method to check if a particular BehaviorElement contains a behavior instance
	 * of type ECBehaviorLight.Instance . If more than one instance is present returns
	 * the first instance.
	 */
	static func Instance getInstanceIn(BehaviorElement element)
		return element.findInstance(block Instance each
			return true
		end) cast Instance
	end
	
	/**
	 * \brief Get instance with id in element or \em null if absent.
	 * 
	 * Use this method to check if a particular BehaviorElement contains a behavior instance
	 * of type ECBehaviorLight.Instance with specific identifier.
	 */
	static func Instance getInstanceIn(BehaviorElement element, String id)
		return element.findInstance(block Instance each
			return each.getECBehavior().getID().equals(id)
		end) cast Instance
	end
	
	/**
	 * \brief Get list of all instances in element.
	 * 
	 * Returns list contains ECBehaviorLight.Instance instances in the order they have
	 * been created in the element.
	 */
	static func Array getAllInstancesIn(BehaviorElement element)
		return element.collectInstances(block Instance each
			return true
		end)
	end
	
	
	
	/** \brief Create Behavior instance. */
	func ECBehaviorInstance createInstance(BehaviorElement element)
		return Instance.new(this, element)
	end
end
