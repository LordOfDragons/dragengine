/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */


namespace Dragengine.Scenery

pin Dragengine.Scenery
pin Dragengine.Preloading
pin Dragengine.Utils


/**
 * \brief Behavior adding support to elements to be avoided by actors.
 * 
 * Avoid shape is defined by position, half-size and radius. This allows to model spheres and
 * round boxes as avoid shapes projected to the ground. The behavior can be enabled and disabled
 * to allow define avoid shapes activate only at specific times. Although not prohibited shapes
 * should not move to allow behaviors doing avoiding to work the best way possible.
 * 
 * This behavior can be added multiple times to add multiple avoid shapes.
 * 
 * The property prefix is "avoidedByActor{(id)}".
 * 
 * This behavior does not require element class to be persistable (setPersistable).
 * 
 * \see https://developer.dragondreams.ch/wiki/doku.php/dragengine:modules:dragonscript:behavior_avoidedbyactor
 */
class ECBehaviorAvoidedByActor extends DefaultECBehavior
	/**
	 * \brief Behavior factory.
	 * \ref 1.25
	 * 
	 * Example XML element class:
	 * \code{.xml}
	 * <behavior type='ECBehaviorAvoidedByActor'/>
	 * \endcode
	 * 
	 * Element class properties added by the behavior can also be set directly inside the tag
	 * be removing the property name prefix and starting with a "." (for exampler ".propertyName").
	 */
	class Factory implements BehaviorFactory
		func new()
		end
		
		func String factoryId()
			return "ECBehaviorAvoidedByActor"
		end
		
		func ECBehavior addBehavior(BehaviorElementClass eclass, String id, Dictionary parameters)
			var ECBehaviorAvoidedByActor behavior = ECBehaviorAvoidedByActor.new(eclass, id)
			BehaviorElementClass.sharedFactoryHelper.setPropertiesFromParameters(\
				eclass, parameters, "avoidedByActor", id)
			return behavior
		end
	end
	
	/** \brief Behavior instance. */
	class Instance extends DefaultECBehaviorInstance
		var ECBehaviorAvoidedByActor pECBehavior
		var Vector pOrigin
		var Vector2 pSize
		var float pOrientation
		var float pRadius
		var bool pEnabled
		var bool pHasShape
		
		
		
		/** \brief Create behavior instance. */
		func new(ECBehaviorAvoidedByActor ecbehavior, BehaviorElement element) super(element)
			pECBehavior = ecbehavior
			pEnabled = true
			pHasShape = false
		end
		
		
		
		/** \brief Initialize behavior element from stub. */
		func void init(StubElement stub)
			var CodecPropertyString codec = getElement().getClass().getCodecPropertyString()
			
			pOrigin = pECBehavior.getOrigin().getVector(stub, codec)
			pOrientation = pECBehavior.getOrientation().getValue(stub)
			pRadius = pECBehavior.getRadius().getValue(stub)
			pSize = pECBehavior.getSize().getVector2(stub, codec)
			
			if pRadius <= 0.001 and pSize.isZero()
				pRadius = 0
				pSize = Vector2.new()
				
			else
				pHasShape = true
			end
		end
		
		
		
		/** \brief Behavior. */
		func ECBehaviorAvoidedByActor getECBehavior()
			return pECBehavior
		end
		
		
		
		/** \brief Origin of shape relative to owner element. */
		func Vector getOrigin()
			return pOrigin
		end
		
		/** \brief Set origin of shape relative to owner element. */
		protected func void setOrigin(Vector origin)
			pOrigin = origin
		end
		
		/** \brief Size of shape. */
		func Vector2 getSize()
			return pSize
		end
		
		/** \brief Set size of shape. */
		protected func void setSize(Vector2 size)
			pSize = Vector2.new().largest(size)
		end
		
		/** \brief Orientation in degrees of shape along Y-Axis. */
		func float getOrientation()
			return pOrientation
		end
		
		/** \brief Set orientation in degrees of shape along Y-Axis. */
		protected func void setOrientation(float orientation)
			pOrientation = orientation
		end
		
		/** \brief Border radius of shape. */
		func float getRadius()
			return pRadius
		end
		
		/** \brief Set border radius of shape. */
		protected func void setRadius(float radius)
			pRadius = DEMath.max(radius, 0.0)
		end
		
		/** \brief Behavior is enabled. */
		func bool getEnabled()
			return pEnabled
		end
		
		/** \brief Set if behavior is enabled. */
		func void setEnabled(bool enabled)
			pEnabled = enabled
		end
		
		
		
		/**
		 * \brief Has shape defined.
		 * \returns true if radius or size are not 0.
		 */
		func bool hasShape()
			return pHasShape
		end
		
		/**
		 * \brief Should be avoided by actors.
		 * \returns true if hasShape() and getEnabled() are true.
		 */
		func bool shouldBeAvoided()
			return pHasShape and pEnabled
		end
	end
	
	
	
	var ECPVector pOrigin
	var ECPVector2 pSize
	var ECPFloat pOrientation
	var ECPFloat pRadius
	
	
	
	/** \brief Create behavior element class. */
	func new(BehaviorElementClass eclass) this(eclass, "")
	end
	
	func new(BehaviorElementClass eclass, String id) this(eclass, id, \
	id.empty() if "avoidedByActor" else "avoidedByActor(" + id + ")")
	end
	
	func new(BehaviorElementClass eclass, String id, String subId) \
	this(eclass, id, subId, subId + ".")
	end
	
	func new(BehaviorElementClass eclass, String id, String subId, \
	String prefix) super(eclass, id)
		pOrigin = ECPVector.new(prefix + "origin", Vector.new())
		eclass.addProperty(pOrigin)
		
		pSize = ECPVector2.new(prefix + "size", Vector2.new())
		eclass.addProperty(pSize)
		
		pOrientation = ECPFloat.new(prefix + "orientation", 0)
		eclass.addProperty(pOrientation)
		
		pRadius = ECPFloat.new(prefix + "radius", 0, 0)
		eclass.addProperty(pRadius)
		
		eclass.addBehavior(this)
	end
	
	
	
	/** \brief Origin relative to element. */
	func ECPVector getOrigin()
		return pOrigin
	end
	
	/** \brief Size. */
	func ECPVector2 getSize()
		return pSize
	end
	
	/** \brief Orientation along world Y axis relative to element world Y orientation. */
	func ECPFloat getOrientation()
		return pOrientation
	end
	
	/** \brief Radius. */
	func ECPFloat getRadius()
		return pRadius
	end
	
	
	
	/** \brief Get instance in element from owner element class. */
	func Instance instance(BehaviorElement element)
		return element.getInstanceAt(getInstanceIndex()) cast Instance
	end
	
	
	
	/**
	 * \brief Get behavior in element class or \em null if absent.
	 * 
	 * Use this method to check if a particular BehaviorElementClass contains a behavior
	 * of type ECBehaviorCollider.
	 */
	static func ECBehaviorAvoidedByActor getBehaviorIn(BehaviorElementClass eclass)
		return eclass.findBehavior(block ECBehaviorAvoidedByActor each
			return true
		end) cast ECBehaviorAvoidedByActor
	end
	
	/**
	 * \brief Get behavior with id in element class or \em null if absent.
	 * 
	 * Use this method to check if a particular BehaviorElementClass contains a behavior
	 * of type ECBehaviorCamera with specific identifier.
	 */
	static func ECBehaviorAvoidedByActor getBehaviorIn(BehaviorElementClass eclass, String id)
		return eclass.findBehavior(block ECBehaviorAvoidedByActor each
			return each.getID().equals(id)
		end) cast ECBehaviorAvoidedByActor
	end
	
	/**
	 * \brief Get list of all behaviors in element.
	 * 
	 * Returns list contains ECBehaviorCamera behaviors in the order they have
	 * been created in the element.
	 */
	static func Array getAllBehaviorsIn(BehaviorElementClass eclass)
		return eclass.collectBehaviors(block ECBehaviorAvoidedByActor each
			return true
		end)
	end
	
	
	/**
	 * \brief Get instance in element or \em null if absent.
	 * 
	 * Use this method to check if a particular BehaviorElement contains a behavior instance
	 * of type ECBehaviorCamera.Instance . If more than one instance is present returns
	 * the first instance.
	 */
	static func Instance getInstanceIn(BehaviorElement element)
		return element.findInstance(block Instance each
			return true
		end) cast Instance
	end
	
	/**
	 * \brief Get instance with id in element or \em null if absent.
	 * 
	 * Use this method to check if a particular BehaviorElement contains a behavior instance
	 * of type ECBehaviorCamera.Instance with specific identifier.
	 */
	static func Instance getInstanceIn(BehaviorElement element, String id)
		return element.findInstance(block Instance each
			return each.getECBehavior().getID().equals(id)
		end) cast Instance
	end
	
	/**
	 * \brief Get list of all instances in element.
	 * 
	 * Returns list contains ECBehaviorCamera.Instance instances in the order they have
	 * been created in the element.
	 */
	static func Array getAllInstancesIn(BehaviorElement element)
		return element.collectInstances(block Instance each
			return true
		end)
	end
	
	
	
	/** \brief Create Behavior instance. */
	func ECBehaviorInstance createInstance(BehaviorElement element)
		return Instance.new(this, element)
	end
end
