/* 
 * Drag[en]gine DragonScript Script Module
 *
 * Copyright (C) 2020, Roland Pl√ºss (roland@rptd.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */


namespace Dragengine.Scenery

pin Dragengine.Scenery
pin Dragengine.Preloading
pin Dragengine.Utils


/**
 * \brief Behavior adding support to elements to be avoided by actors.
 * 
 * Avoid shape is defined by position, half-size and radius. This allows to model spheres and
 * round boxes as avoid shapes projected to the ground. The behavior can be enabled and disabled
 * to allow define avoid shapes activate only at specific times. Although not prohibited shapes
 * should not move to allow behaviors doing avoiding to work the best way possible.
 * 
 * This behavior can be added multiple times to add multiple avoid shapes.
 * 
 * The property prefix is "avoidedByActor{(id)}".
 * 
 * This behavior does not require element class to be persistable (setPersistable).
 */
class ECBehaviorAvoidedByActor extends DefaultECBehavior
	/** \brief Behavior instance. */
	class Instance extends DefaultECBehaviorInstance
		private var ECBehaviorAvoidedByActor pECBehavior
		private var Vector pOrigin
		private var Vector2 pSize
		private var float pOrientation
		private var float pRadius
		private var bool pEnabled
		private var bool pHasShape
		
		
		
		/** \brief Create behavior instance. */
		public func new( ECBehaviorAvoidedByActor ecbehavior, BehaviorElement element ) super( element )
			this.pECBehavior = ecbehavior
			this.pEnabled = true
			this.pHasShape = false
		end
		
		
		
		/** \brief Initialize behavior element from stub. */
		public func void init( StubElement stub )
			var CodecPropertyString codec = this.getElement().getClass().getCodecPropertyString()
			
			this.pOrigin = this.pECBehavior.getOrigin().getVector( stub, codec )
			this.pOrientation = this.pECBehavior.getOrientation().getValue( stub )
			this.pRadius = this.pECBehavior.getRadius().getValue( stub )
			this.pSize = this.pECBehavior.getSize().getVector2( stub, codec )
			
			if this.pRadius <= 0.001 and pSize.isZero()
				this.pRadius = 0
				this.pSize = Vector2.new()
				
			else
				this.pHasShape = true
			end
		end
		
		
		
		/** \brief Behavior. */
		public func ECBehaviorAvoidedByActor getECBehavior()
			return this.pECBehavior
		end
		
		
		
		/** \brief Origin of shape relative to owner element. */
		public func Vector getOrigin()
			return this.pOrigin
		end
		
		/** \brief Set origin of shape relative to owner element. */
		protected func void setOrigin( Vector origin )
			this.pOrigin = origin
		end
		
		/** \brief Size of shape. */
		public func Vector2 getSize()
			return this.pSize
		end
		
		/** \brief Set size of shape. */
		protected func void setSize( Vector2 size )
			this.pSize = Vector2.new().largest( size )
		end
		
		/** \brief Orientation in degrees of shape along Y-Axis. */
		public func float getOrientation()
			return this.pOrientation
		end
		
		/** \brief Set orientation in degrees of shape along Y-Axis. */
		protected func void setOrientation( float orientation )
			this.pOrientation = orientation
		end
		
		/** \brief Border radius of shape. */
		public func float getRadius()
			return this.pRadius
		end
		
		/** \brief Set border radius of shape. */
		protected func void setRadius( float radius )
			this.pRadius = DEMath.max( radius, 0.0 )
		end
		
		/** \brief Behavior is enabled. */
		public func bool getEnabled()
			return this.pEnabled
		end
		
		/** \brief Set if behavior is enabled. */
		public func void setEnabled( bool enabled )
			this.pEnabled = enabled
		end
		
		
		
		/**
		 * \brief Has shape defined.
		 * \returns true if radius or size are not 0.
		 */
		public func bool hasShape()
			return this.pHasShape
		end
		
		/**
		 * \brief Should be avoided by actors.
		 * \returns true if hasShape() and getEnabled() are true.
		 */
		public func bool shouldBeAvoided()
			return this.pHasShape and this.pEnabled
		end
	end
	
	
	
	private var ECPVector pOrigin
	private var ECPVector2 pSize
	private var ECPFloat pOrientation
	private var ECPFloat pRadius
	
	
	
	/** \brief Create behavior element class. */
	public func new( BehaviorElementClass eclass ) this( eclass, "" )
	end
	
	public func new( BehaviorElementClass eclass, String id ) this( eclass, id, \
	id.empty() if "avoidedByActor" else "avoidedByActor(" + id + ")" )
	end
	
	public func new( BehaviorElementClass eclass, String id, String subId ) \
	this( eclass, id, subId, subId + "." )
	end
	
	public func new( BehaviorElementClass eclass, String id, String subId, \
	String prefix ) super( eclass, id )
		this.pOrigin = ECPVector.new( prefix + "origin", Vector.new() )
		eclass.addProperty( this.pOrigin )
		
		this.pSize = ECPVector2.new( prefix + "size", Vector2.new() )
		eclass.addProperty( this.pSize )
		
		this.pOrientation = ECPFloat.new( prefix + "orientation", 0 )
		eclass.addProperty( this.pOrientation )
		
		this.pRadius = ECPFloat.new( prefix + "radius", 0, 0 )
		eclass.addProperty( this.pRadius )
		
		eclass.addBehavior( this )
	end
	
	
	
	/** \brief Origin relative to element. */
	public func ECPVector getOrigin()
		return this.pOrigin
	end
	
	/** \brief Size. */
	public func ECPVector2 getSize()
		return this.pSize
	end
	
	/** \brief Orientation along world Y axis relative to element world Y orientation. */
	public func ECPFloat getOrientation()
		return this.pOrientation
	end
	
	/** \brief Radius. */
	public func ECPFloat getRadius()
		return this.pRadius
	end
	
	
	
	/** \brief Get instance in element from owner element class. */
	public func Instance instance( BehaviorElement element )
		return element.getInstanceAt( this.getInstanceIndex() ) cast Instance
	end
	
	
	
	/**
	 * \brief Get behavior in element class or \em null if absent.
	 * 
	 * Use this method to check if a particular BehaviorElementClass contains a behavior
	 * of type ECBehaviorCollider.
	 */
	static public func ECBehaviorAvoidedByActor getBehaviorIn( BehaviorElementClass eclass )
		return eclass.findBehavior( block ECBehaviorAvoidedByActor each
			return true
		end ) cast ECBehaviorAvoidedByActor
	end
	
	/**
	 * \brief Get behavior with id in element class or \em null if absent.
	 * 
	 * Use this method to check if a particular BehaviorElementClass contains a behavior
	 * of type ECBehaviorCamera with specific identifier.
	 */
	static public func ECBehaviorAvoidedByActor getBehaviorIn( BehaviorElementClass eclass, String id )
		return eclass.findBehavior( block ECBehaviorAvoidedByActor each
			return each.getID().equals( id )
		end ) cast ECBehaviorAvoidedByActor
	end
	
	/**
	 * \brief Get list of all behaviors in element.
	 * 
	 * Returns list contains ECBehaviorCamera behaviors in the order they have
	 * been created in the element.
	 */
	static public func Array getAllBehaviorsIn( BehaviorElementClass eclass )
		return eclass.collectBehaviors( block ECBehaviorAvoidedByActor each
			return true
		end )
	end
	
	
	/**
	 * \brief Get instance in element or \em null if absent.
	 * 
	 * Use this method to check if a particular BehaviorElement contains a behavior instance
	 * of type ECBehaviorCamera.Instance . If more than one instance is present returns
	 * the first instance.
	 */
	static public func Instance getInstanceIn( BehaviorElement element )
		return element.findInstance( block Instance each
			return true
		end ) cast Instance
	end
	
	/**
	 * \brief Get instance with id in element or \em null if absent.
	 * 
	 * Use this method to check if a particular BehaviorElement contains a behavior instance
	 * of type ECBehaviorCamera.Instance with specific identifier.
	 */
	static public func Instance getInstanceIn( BehaviorElement element, String id )
		return element.findInstance( block Instance each
			return each.getECBehavior().getID().equals( id )
		end ) cast Instance
	end
	
	/**
	 * \brief Get list of all instances in element.
	 * 
	 * Returns list contains ECBehaviorCamera.Instance instances in the order they have
	 * been created in the element.
	 */
	static public func Array getAllInstancesIn( BehaviorElement element )
		return element.collectInstances( block Instance each
			return true
		end )
	end
	
	
	
	/** \brief Create Behavior instance. */
	public func ECBehaviorInstance createInstance( BehaviorElement element )
		return Instance.new( this, element )
	end
end
