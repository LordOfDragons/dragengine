/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */


namespace Dragengine.Scenery

pin Dragengine.Gui
pin Dragengine.LoadSave
pin Dragengine.Preloading
pin Dragengine.Utils
pin Dragengine.TriggerSystem


/**
 * \brief Behavior element behavior showing message to player if triggered.
 * 
 * By default message is printed on console. Typically a shout panel is used to show the
 * latest console messages for a short time. Optionally you can also use subtitle instead.
 * 
 * Element class properties have the prefix "showMessage{(id)}.".
 * 
 * This behavior does not require the element class to be persistable (setPersistable).
 */
class ECBehaviorShowMessage extends DefaultECBehavior
	/**
	 * \brief Behavior factory.
	 * \ref 1.25
	 * 
	 * Example XML element class:
	 * \code{.xml}
	 * <behavior type='ECBehaviorShowMessage'>
	 *   <!-- optional: use BaseGameApp trigger table. game can add more supported values. default is 'default' -->
	 *   <string name='triggerTable'>default</string>
	 * 
	 *   <!-- optional: use BaseGameApp console. game can add more supported values. default is 'default' -->
	 *   <string name='console'>default</string>
	 * </behavior>
	 * \endcode
	 */
	class Factory implements BehaviorFactory
		func new()
		end
		
		func String factoryId()
			return "ECBehaviorShowMessage"
		end
		
		func ECBehavior addBehavior(BehaviorElementClass eclass, String id, Dictionary parameters)
			return ECBehaviorShowMessage.new(eclass,\
				getTriggerTableFor(parameters.getAt("triggerTable", "default") cast String),\
				getConsoleFor(parameters.getAt("console", "default") cast String))
		end
		
		/**
		 * \brief Trigger table matching value.
		 * 
		 * Default implementation returns \ref BaseGameApp#getTriggerTable() for value 'default'
		 * and null for all other values. Overwrite to accept other values.
		 */
		func TSTriggerTable getTriggerTableFor(String value)
			if value.equals("default")
				var BaseGameApp app = BaseGameApp.getApp()
				if app != null
					return app.getTriggerTable()
				end
			end
			return null
		end
		
		/**
		 * \brief Console matching value.
		 * 
		 * Default implementation returns \ref BaseGameApp#getConsole() for value 'default'
		 * and null for all other values. Overwrite to accept other values.
		 */
		func Console getConsoleFor(String value)
			if value.equals("default")
				var BaseGameApp app = BaseGameApp.getApp()
				if app != null
					return app.getConsole()
				end
			end
			return null
		end
	end
	
	/** \brief Behavior instance. */
	class Instance extends DefaultECBehaviorInstance
		/** \brief Show message listener. */
		public class ShowMessageListener extends ECBehaviorTriggered.DefaultListener
			var Instance pInstance
			
			func new(Instance instance)
				pInstance = instance
			end
			
			func void triggerExpressionTrue(ECBehaviorTriggered.Instance instance)
				pInstance.showMessage()
			end
		end
		
		
		
		var ECBehaviorShowMessage pECBehavior
		var ECBehaviorTriggered.Instance pTrigger
		var String pMessage
		
		
		
		/** \brief Create element. */
		func new(ECBehaviorShowMessage ecbehavior, BehaviorElement element) super(element)
			pECBehavior = ecbehavior
		end
		
		/** \brief Dispose of composeable instance. */
		func void dispose()
			pTrigger = null
			super.dispose()
		end
		
		
		
		/** \brief Initialize element from stub. */
		func void init(StubElement stub)
			if pECBehavior.getTriggerTable() == null
				return
			end
			
			pTrigger = pECBehavior.getTriggered().instance(getElement())
			pTrigger.addListener(ShowMessageListener.new(this))
			
			pMessage = pECBehavior.getMessage().getValue(stub)
		end
		
		
		
		/** \brief Behavior. */
		func ECBehaviorShowMessage getECBehavior()
			return pECBehavior
		end
		
		/** \brief Trigger or \em null. */
		func ECBehaviorTriggered.Instance getTrigger()
			return pTrigger
		end
		
		/** \brief Message to show or \em null. */
		func String getMessage()
			return pMessage
		end
		
		
		
		/** \brief Show message. */
		func void showMessage()
			if pMessage.equals("")
				return
			end
			
			showConsoleMessage()
			showSubtitleMessage()
		end
		
		/** \brief Show console message. */
		func void showConsoleMessage()
			var Console console = pECBehavior.getConsole()
			if console != null
				console.addMessage(pMessage)
			end
		end
		
		/** \brief Show subtitle message. */
		func void showSubtitleMessage()
			// TODO
		end
	end
	
	
	
	var ECBehaviorTriggered pTriggered
	var ECPString pMessage
	var TSTriggerTable pTriggerTable
	var Console pConsole
	
	
	
	/** \brief Create behavior element class. */
	func new(BehaviorElementClass eclass) \
	this(eclass, BaseGameApp.getApp().getTriggerTable(), BaseGameApp.getApp().getConsole(), "")
	end
	
	func new(BehaviorElementClass eclass, String id) \
	this(eclass, BaseGameApp.getApp().getTriggerTable(), BaseGameApp.getApp().getConsole(), id)
	end
	
	func new(BehaviorElementClass eclass, TSTriggerTable triggerTable, Console console) \
	this(eclass, triggerTable, console, "")
	end
	
	func new(BehaviorElementClass eclass, TSTriggerTable triggerTable, Console console, String id) \
	this(eclass, triggerTable, console, id, id.empty() if "showMessage." else "showMessage(" + id + ").")
	end
	
	func new(BehaviorElementClass eclass, TSTriggerTable triggerTable, Console console, \
	String id, String prefix) super(eclass, id)
		pTriggerTable = triggerTable
		pConsole = console
		
		pTriggered = ECBehaviorTriggered.new(eclass, triggerTable, id, prefix + "trigger")
		
		pMessage = ECPString.new(prefix + "message", "")
		eclass.addProperty(pMessage)
		
		eclass.addBehavior(this)
	end
	
	
	
	/** \brief Trigger to show message. */
	func ECBehaviorTriggered getTriggered()
		return pTriggered
	end
	
	/** \brief Message to show. */
	func ECPString getMessage()
		return pMessage
	end
	
	/** \brief Trigger table or \em null if not used. */
	func TSTriggerTable getTriggerTable()
		return pTriggerTable
	end
	
	/** \brief Set trigger table or \em null if not used. */
	func void setTriggerTable(TSTriggerTable triggerTable)
		pTriggerTable = triggerTable
	end
	
	/** \brief Console. */
	func Console getConsole()
		return pConsole
	end
	
	/** \brief Set console. */
	func void setConsole(Console console)
		pConsole = console
	end
	
	
	
	/** \brief Get instance in element from owner element class. */
	func Instance instance(BehaviorElement element)
		return element.getInstanceAt(getInstanceIndex()) cast Instance
	end
	
	
	
	/**
	 * \brief Get behavior in element class or \em null if absent.
	 * 
	 * Use this method to check if a particular BehaviorElementClass contains a behavior
	 * of type ECBehaviorComponent.
	 */
	static func ECBehaviorShowMessage getBehaviorIn(BehaviorElementClass eclass)
		return eclass.findBehavior(block ECBehaviorShowMessage each
			return true
		end) cast ECBehaviorShowMessage
	end
	
	/**
	 * \brief Get behavior with id in element class or \em null if absent.
	 * 
	 * Use this method to check if a particular BehaviorElementClass contains a behavior
	 * of type ECBehaviorShowMessage with specific identifier.
	 */
	static func ECBehaviorShowMessage getBehaviorIn(BehaviorElementClass eclass, String id)
		return eclass.findBehavior(block ECBehaviorShowMessage each
			return each.getID().equals(id)
		end) cast ECBehaviorShowMessage
	end
	
	/**
	 * \brief Get list of all behaviors in element.
	 * 
	 * Returns list contains ECBehaviorShowMessage behaviors in the order they have
	 * been created in the element.
	 */
	static func Array getAllBehaviorsIn(BehaviorElementClass eclass)
		return eclass.collectBehaviors(block ECBehaviorShowMessage each
			return true
		end)
	end
	
	
	
	/**
	 * \brief Get instance in element or \em null if absent.
	 * 
	 * Use this method to check if a particular BehaviorElement contains a behavior instance
	 * of type ECBehaviorShowMessage.Instance . If more than one instance is present returns
	 * the first instance.
	 */
	static func Instance getInstanceIn(BehaviorElement element)
		return element.findInstance(block Instance each
			return true
		end) cast Instance
	end
	
	/**
	 * \brief Get instance with id in element or \em null if absent.
	 * 
	 * Use this method to check if a particular BehaviorElement contains a behavior instance
	 * of type ECBehaviorShowMessage.Instance with specific identifier.
	 */
	static func Instance getInstanceIn(BehaviorElement element, String id)
		return element.findInstance(block Instance each
			return each.getECBehavior().getID().equals(id)
		end) cast Instance
	end
	
	/**
	 * \brief Get list of all instances in element.
	 * 
	 * Returns list contains ECBehaviorShowMessage.Instance instances in the order they have
	 * been created in the element.
	 */
	static func Array getAllInstancesIn(BehaviorElement element)
		return element.collectInstances(block Instance each
			return true
		end)
	end
	
	
	
	/** \brief Create Behavior instance. */
	func ECBehaviorInstance createInstance(BehaviorElement element)
		return Instance.new(this, element)
	end
end
