/* 
 * Drag[en]gine DragonScript Script Module
 *
 * Copyright (C) 2020, Roland Pl√ºss (roland@rptd.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */


namespace Dragengine.Scenery

pin Dragengine.Gui
pin Dragengine.LoadSave
pin Dragengine.Preloading
pin Dragengine.Utils


/**
 * \brief Behavior element behavior adding collider support.
 * 
 * Colliders provide physical presence to elements allowing them to collide with other
 * colliders, attaching them to other colliders and moving the element through the game
 * world.
 * 
 * This element behavior is often required by other element behaviors to be present to
 * function correctly.
 * 
 * Since this collider repositions the element upon changing position and orientation
 * this element behavior can be present only once in a BehaviorElement. Trying to add
 * more than one instance results in an exception thrown.
 * 
 * If you need additional colliders for example to sense objects using collision detection
 * then you need to use other ECBehavior providing the desired behavior. These allow to be
 * added multiple times.
 * 
 * If the \em ECBehaviorComponent behavior is present in the behavior element before this
 * behavior is added a ColliderComponent is created. The component is used for collision
 * detection and updated automatically by the collider. This is required if you intend to
 * use per-bone collisions matching animation state or physical simulations like rag-dolls.
 * 
 * If the \em ECBehaviorComponent behavior is added after this behavior then a ColliderVolume
 * is created. The rig assigned to the component is only used for animation purpose.
 * The \em ECBehaviorComponent will then statically attach to the collider.
 * 
 * Hence these two use cases are possible depending on the order the behaviors are added:
 * 
 * \par Use Case 1: Shape Collision
 * 
 * Component is only visual. For collision only static collision shape is used.
 * The component is attached statically to the collider and does not collide.
 * If collider is dynamic physics simulation will be done using collision shape only.
 * 
 * \code{.ds}
 * class MyElementClass extends BehaviorElementClass
 *    public func new()
 *       var ECBehaviorCollider collider = ECBehaviorCollider.new(this, null)
 *       // assign collision shape or collision rig to the collider
 *       ECBehaviorComponent.new(this, collider)
 *    end
 * end
 * \endcode
 * 
 * \par Use Case 2: Component Collision
 * 
 * Component is used for collision detection. If collider is dynamic component bones will
 * be updated by the collider automatically.
 * 
 * \code{.ds}
 * class MyElementClass extends BehaviorElementClass
 *    public func new()
 *       var ECBehaviorComponent component = ECBehaviorComponent.new(this, null)
 *       ECBehaviorCollider.new(this, component)
 *    end
 * end
 * \endcode
 * 
 * Element class properties have the prefix "collider.".
 * 
 * \par Collision listening
 * 
 * The default collision behavior clears the linear and angular velocities. To add meaningful
 * collision behavior add listeners. If one or more listener are present the default collision
 * behavior is disabled and the listeners are responsible. At least one listener has to do
 * collision handling in a way that the current collision is not happening again. This can be
 * done by modifying the velocities of the affected colliders, changing collision filters or
 * removing elements from the game world altogether. The ECBehaviorCollider assigns the owner
 * BehaviorElement as owner of the collider. Hence you can retrieve the BehaviorElement
 * represented by a collider like this:
 * 
 * \code{.ds}
 * // check if a collider has been hit (other possibilities exist like height-terrain)
 * if info.getCollider() != null
 *    // check if the owner of the collider is of type BehaviorElement
 *    if info.getOwner() castable BehaviorElement
 *        var BehaviorElement element = info.getOwner() cast BehaviorElement
 *        // work with the element, for example check what behaviors it has attached
 *    end
 * end
 * \endcode
 * 
 * Another way is to subclass ElementVisitor. This is a more object-oriented approach and
 * keeps the code cleaner especially if the behavior is able to work with different types
 * of elements. This way would look roughly like this:
 * 
 * \code{.ds}
 * // check if a collider has been hit (other possibilities exist like height-terrain)
 * if info.getCollider() != null
 *    // check if the owner of the collider is of type Element
 *    if info.getOwner() castable Element
 *        // visit the element to apply the desired actions
 *        (info.getOwner() cast Element).visit(MyElementCollisionVisitor.new())
 *    end
 * end
 * \endcode
 * 
 * This behavior does require the element class to be persistable (setPersistable) only if
 * the physics type is set to anything else but CollisionResponse.none .
 * 
 * TODO: possible behaviors using this system:
 * - sliding collision response: slides kinematic colliders along walls like actors do
 * - power ups: typical example of a an element touched by the actor that vanishes when
 *              touched adding all kinds of abilities. this would be an example of behaviors
 *              on different elements interacting. requires two behaviors. one behavior is
 *              the power up itself which identifies the element as a power up that can be
 *              consumed. the second is the touch power up behavior placed on the interacting
 *              element. it uses getInstanceIn() to check if the hit element has the power up
 *              behvaior and if so removes it from the game world and applies the effects.
 */
class ECBehaviorCollider extends DefaultECBehavior
	/** \brief Listener for behavior instance events. */
	interface Listener
		/**
		 * \brief Collision detected.
		 * \param instance Behavior instance owning \em collider.
		 * \param collider Collider involded in the collision.
		 * \param info Information about collision partner.
		 */
		func void collisionResponse(Instance instance, Collider collider, CollisionInfo info)
	end
	
	/** \brief Default implementation of behavior instance listener. */
	class DefaultListener implements Listener
		/** \brief Create default listener. */
		public func new()
		end
		
		/**
		 * \brief Collision detected.
		 * \param instance Behavior instance owning \em collider.
		 * \param collider Collider involded in the collision.
		 * \param info Information about collision partner.
		 */
		public func void collisionResponse(Instance instance, Collider collider, CollisionInfo info)
		end
	end
	
	/** \brief Factory creating listeners. */
	interface ListenerFactory
		/** \brief Create listener. */
		func Listener createListener(Instance instance)
	end
	
	/** \brief Factory creating listeners using block. */
	class BlockListenerFactory implements ListenerFactory
		private var Block pBlock
		
		/** \brief Create factory using block receiving Instance as parameter returning Listener. */
		public func new(Block blockFactory)
			if blockFactory == null
				throw ENullPointer.new()
			end
			pBlock = blockFactory
		end
		
		/** \brief Create listener. */
		public func Listener createListener(Instance instance)
			return pBlock.run(instance) cast Listener
		end
	end
	
	/** \brief Behavior instance. */
	class Instance extends DefaultECBehaviorInstance implements ColliderListener
		private var ECBehaviorCollider pECBehavior
		private var Collider pCollider
		private var Array pListeners
		
		
		
		/** \brief Create element. */
		public func new(ECBehaviorCollider ecbehavior, BehaviorElement element) super(element)
			pECBehavior = ecbehavior
			pListeners = Array.new()
		end
		
		/** \brief Dispose of composeable instance. */
		public func void dispose()
			if pCollider != null
				pCollider.setColliderListener(null)
				pCollider.setOwner(null)
				pCollider.removeAllCollisionTests()
				pCollider.removeAllIgnoreColliders()
				//pCollider = null // not doing this prevents depending behaviors fail while disposing
			end
			pListeners = null
			
			super.dispose()
		end
		
		
		
		/** \brief Initialize element from stub. */
		public func void init(StubElement stub)
			var BehaviorElement element = getElement()
			
			var ECBehaviorComponent.Instance component
			if pECBehavior.getComponent() != null
				component = pECBehavior.getComponent().instance(element)
			end
			
			pCollider = createCollider(stub, component)
			pCollider.setColliderListener(this)
			pCollider.setOwner(getElement())
			pCollider.setGeometry(element.getPosition(), element.getOrientation(), element.getScaling())
			
			// if response type is dynamic update bone position. this is required for dynamic
			// rigs with bones. upon initializing the bones they are set to zero but bones
			// in colliders are in world space. without init dynamic bones end up everywhere
			// but not where we want them
			if pCollider.getResponseType() == CollisionResponse.dynamic \
			and pCollider castable ColliderComponent
				(pCollider cast ColliderComponent).copyStatesFromComponent()
			end
			
			pECBehavior.createListeners(this)
		end
		
		/**
		 * \brief Create collider.
		 * \param stub Stub to use.
		 * \param component Component to use or \em null if absent.
		 */
		protected func Collider createCollider(StubElement stub, ECBehaviorComponent.Instance component)
			var BehaviorElement element = getElement()
			var Collider collider
			
			if component != null
				collider = pECBehavior.getCollider().createCollider(\
					getElement(), stub, component.getComponent())
			end
			
			if collider == null
				collider = pECBehavior.getCollider().createCollider(getElement(), stub)
			end
			
			return collider
		end
		
		
		
		/** \brief Behavior. */
		public func ECBehaviorCollider getECBehavior()
			return pECBehavior
		end
		
		/** \brief Collider. */
		public func Collider getCollider()
			return pCollider
		end
		
		
		
		/** \brief Rig shape property or null if not possible.*/
		public func String getRigShapeProperty(int bone, int shape)
			if shape == -1 or pCollider == null or not pCollider castable ColliderRig
				return null
			end
			
			var Rig rig = (pCollider cast ColliderRig).getRig()
			if rig == null
				return null
			end
			
			if bone != -1
				return rig.boneShapeGetProperty(bone, shape)
				
			else
				return rig.shapeGetProperty(shape)
			end
		end
		
		/** \brief Rig shape property from collision or null if not possible. */
		public func String getRigShapeProperty(CollisionInfo info, bool owner)
			if owner
				return getRigShapeProperty(info.getOwnerBone(), info.getOwnerShape())
				
			elif info.hasBone() and info.hasShape()
				return getRigShapeProperty(info.getBone(), info.getShape())
				
			else
				return  null
			end
		end
		
		
		
		/** \brief Add listener. */
		public func void addListener(Listener listener)
			if listener == null
				throw EInvalidParam.new()
			end
			pListeners.add(listener)
		end
		
		/** \brief Remove listener. */
		public func void removeListener(Listener listener)
			pListeners.remove(listener)
		end
		
		
		
		/** \brief State changed (visble, touchable). */
		public func void stateChanged()
			pCollider.setEnabled(getElement().getTouchable())
		end
		
		/** \brief Position or orientation changed. */
		public func void geometryChanged()
			var BehaviorElement element = getElement()
			pCollider.setGeometry(element.getPosition(), element.getOrientation(), element.getScaling())
		end
		
		/** \brief Add element to game world. */
		public func void addToGameWorld()
			getElement().getGameWorld().getWorld().addCollider(pCollider)
		end
		
		/** \brief Remove element from game world. */
		public func void removeFromGameWorld()
			getElement().getGameWorld().getWorld().removeCollider(pCollider)
		end
		
		
		
		/** \brief Colliders can hit each other. */
		public func bool canHitCollider(Collider owner, Collider collider)
			return true
		end
		
		/**
		 * \brief Collision detected.
		 * 
		 * If listeners are present calls collisionResponse() on all listeners expecting them
		 * to handle collision properly. Otherwise for static and kinematic collision response
		 * clears linear and angular velocity. For dynamic collision response nothing is done.
		 */
		public func void collisionResponse(Collider owner, CollisionInfo info)
			if pListeners.getCount() > 0
				pListeners.forEach(block Listener each
					each.collisionResponse(this, owner, info)
				end)
				
			elif pCollider.getResponseType() != CollisionResponse.dynamic
				owner.setLinearVelocity(Vector.new())
				owner.setAngularVelocity(Vector.new())
			end
		end
		
		/** \brief Collider position and/or orientation changed. */
		public func void colliderChanged(Collider owner)
			getElement().setGeometry(owner.getPosition(), owner.getOrientation())
		end
		
		
		
		/** \brief Read behavior from file. */
		public func void readFromFile(PersistencyEnvironment env, FileReader reader)
			select reader.readByte() // version
			case 0
				readColliderState(env, reader)
				
			case 1
				readColliderState(env, reader)
				readBoneStates(env, reader)
				
			else
				throw EInvalidParam.new("unsupported version")
			end
		end
		
		/**
		 * \brief Read collider parameters from file.
		 * \version 1.15
		 */
		protected func void readColliderState(PersistencyEnvironment env, FileReader reader)
			var DVector position = DVector.readFromFile(reader)
			var Quaternion orientation = Quaternion.readFromFile(reader)
			var Vector scaling = Vector.readFromFile(reader)
			
			getElement().setGeometry(position, orientation, scaling)
			
			pCollider.setLinearVelocity(Vector.readFromFile(reader))
			pCollider.setAngularVelocity(Vector.readFromFile(reader))
		end
		
		/**
		 * \brief Read bone states from file.
		 * \version 1.15
		 * 
		 * Calls readBoneState() until the false is returned. If any bone states have been
		 * read and collider is castable to ColliderComponent then copyStatesToComponent() is
		 * called to ensure component bone states match collider bone states.
		 */
		protected func void readBoneStates(PersistencyEnvironment env, FileReader reader)
			var ColliderRig collider
			if pCollider castable ColliderRig
				collider = pCollider cast ColliderRig
			end
			
			var bool hasStates
			while readBoneState(env, reader, collider)
				hasStates = true
			end
			
			if hasStates and pCollider castable ColliderComponent
				(pCollider cast ColliderComponent).copyStatesToComponent()
			end
		end
		
		/**
		 * \brief Read bone state from file.
		 * \version 1.15
		 * 
		 * Reads first the bone name. If the name is empty string this marks the end of the bone
		 * state list and the function exits. Otherwise reads position (DVector), orientation
		 * (Quaternion), linear velocity (Vector) and angular velocity (Vector). If the bone name
		 * is found int he collider the respective bone parameters are set. If the bone name is
		 * not found in the rig nothing is done. This allows loading bone states from file in
		 * case the rig does not match anymore. The so restored bone states are potentially
		 * incomplete but at last the bone states can be successfully read from file.
		 * 
		 * The parameter collider can be null if collider is not of the matching type. In this
		 * case bone state has to be read but not applied as if the bone name is not found.
		 * 
		 * \returns true if bone state has been read or false if empty string has been read.
		 */
		protected func bool readBoneState(PersistencyEnvironment env, FileReader reader, ColliderRig collider)
			var String name = reader.readString8()
			if name.empty()
				return false
			end
			
			var DVector position = DVector.readFromFile(reader)
			var Quaternion orientation = Quaternion.readFromFile(reader)
			var Vector linearVelocity = Vector.readFromFile(reader)
			var Vector angularVelocity = Vector.readFromFile(reader)
			
			if collider != null
				var int bone = collider.getRig().indexOfBoneNamed(name)
				if bone != -1
					collider.boneSetPosition(bone, position)
					collider.boneSetOrientation(bone, orientation)
					collider.boneSetLinearVelocity(bone, linearVelocity)
					collider.boneSetAngularVelocity(bone, angularVelocity)
				end
			end
			
			return true
		end
		
		/** \brief Write behavior to file. */
		public func void writeToFile(PersistencyEnvironment env, FileWriter writer)
			writer.writeByte(1) // version
			
			var BehaviorElement element = getElement()
			element.getPosition().writeToFile(writer)
			element.getOrientation().writeToFile(writer)
			element.getScaling().writeToFile(writer)
			pCollider.getLinearVelocity().writeToFile(writer)
			pCollider.getAngularVelocity().writeToFile(writer)
			
			writeBoneStates(env, writer)
		end
		
		/**
		 * \brief Write bone states to file.
		 * \version 1.15
		 * 
		 * Subclass can overwrite to determine which bone states to write. Default implementation
		 * calls writeDynamicBoneStates() if collider response type is CollisionResponse.dynamic.
		 * For each bone state to write call writeBoneStates(). After writing all bone states
		 * write an empty 8-bit string to mark the end of the bone state list.
		 */
		protected func void writeBoneStates(PersistencyEnvironment env, FileWriter writer)
			if pCollider.getResponseType() == CollisionResponse.dynamic
				writeDynamicBoneStates(writer)
			end
			writer.writeString8("")
		end
		
		/**
		 * \brief Write dynamic bone states to file.
		 * \version 1.15
		 */
		protected func void writeDynamicBoneStates(FileWriter writer)
			if pCollider castable ColliderRig
				var ColliderRig colliderRig = pCollider cast ColliderRig
				var Rig rig = colliderRig.getRig()
				if rig != null
					var int i, count = rig.getBoneCount()
					for i = 0 to count
						if rig.boneGetDynamic(i)
							writeDynamicBoneState(writer, colliderRig, i)
						end
					end
				end
			end
		end
		
		/**
		 * \brief Write bone state to file.
		 * \version 1.15
		 * 
		 * Writes bone name as 8-bit string then position (DVector), orientation (Quaternion)
		 * linear velocity (Vector) and angular velocity (Vector).
		 */
		protected func void writeDynamicBoneState(FileWriter writer, ColliderRig collider, int bone)
			writer.writeString8(collider.getRig().boneGetName(bone))
			collider.boneGetPosition(bone).writeToFile(writer)
			collider.boneGetOrientation(bone).writeToFile(writer)
			collider.boneGetLinearVelocity(bone).writeToFile(writer)
			collider.boneGetAngularVelocity(bone).writeToFile(writer)
		end
	end
	
	
	
	private var ECComposeCollider pCollider
	private var ECBehaviorComponent pComponent
	private var Array pListenerFactories
	
	
	
	/**
	 * \brief Create behavior element class.
	 * 
	 * These values are optional and can be null: \em component.
	 */
	public func new(BehaviorElementClass eclass, ECBehaviorComponent component) \
	this(eclass, component, "collider.")
	end
	
	public func new(BehaviorElementClass eclass, ECBehaviorComponent component, \
	String prefix) super(eclass)
		if getBehaviorIn(eclass) != null
			throw BEMultipleInstanceException.new(eclass, this)
		end
		
		pComponent = component
		pListenerFactories = Array.new()
		
		pCollider = ECComposeCollider.new(eclass, prefix)
		
		var LayerMask cfCategory = LayerMask.newWith(BaseGameApp.CollisionFilterBit.geometry)
		
		var LayerMask cfFilter = LayerMask.new()
		cfFilter.setBit(BaseGameApp.CollisionFilterBit.dynamic)
		cfFilter.setBit(BaseGameApp.CollisionFilterBit.actor)
		cfFilter.setBit(BaseGameApp.CollisionFilterBit.actorAI)
		cfFilter.setBit(BaseGameApp.CollisionFilterBit.particle)
		
		pCollider.setCollisionFilter(CollisionFilter.new(cfCategory, cfFilter))
		
		eclass.addBehavior(this)
	end
	
	/** \brief Dispose of behavior. */
	public func void dispose()
		pComponent = null
		pListenerFactories = null
		super.dispose()
	end
	
	
	
	/**
	 * \brief Set up collider as ghost collider.
	 * 
	 * Ghost colliders have empty collision filter and a small sphere shape. They collide with
	 * nothing and are useful to attach elements composing only of resources like ECBehaviorLight. 
	 */
	public func void setGhost()
		pCollider.getPhysicsType().setEnumeration(CollisionResponse.kinematic)
		pCollider.getLocalGravity().setVector(Vector.new())
		pCollider.getWeight().setValue(1)
		pCollider.setCollisionFilter(CollisionFilter.new())
		// TODO setShape small spher once ECComposeCollider can do this
	end
	
	
	
	/** \brief Composeable collider for element class. */
	public func ECComposeCollider getCollider()
		return pCollider
	end
	
	/** \brief Component behavior. */
	public func ECBehaviorComponent getComponent()
		return pComponent
	end
	
	/** \brief Add listener factory. */
	public func void addListenerFactory(ListenerFactory factory)
		if factory == null
			throw ENullPointer.new()
		end
		pListenerFactories.add(factory)
	end
	
	/**
	 * \brief Add listener factory using block.
	 * 
	 * Block receives as parameter Instance and returns Listener.
	 */
	public func void addListenerFactory(Block blockFactory)
		pListenerFactories.add(BlockListenerFactory.new(blockFactory))
	end
	
	/** \brief Visit listener factories with block with argument ListenerFactory. */
	public func void forEachListenerFactory(Block ablock)
		pListenerFactories.forEach(ablock)
	end
	
	/** \brief Create listeners from factories adding them to behavior instance. */
	public func void createListeners(Instance instance)
		pListenerFactories.forEach(block ListenerFactory each
			instance.addListener(each.createListener(instance))
		end)
	end
	
	
	
	/** \brief Get instance in element from owner element class. */
	public func Instance instance(BehaviorElement element)
		return element.getInstanceAt(getInstanceIndex()) cast Instance
	end
	
	
	
	/**
	 * \brief Get behavior in element class or \em null if absent.
	 * 
	 * Use this method to check if a particular BehaviorElementClass contains a behavior
	 * of type ECBehaviorCollider.
	 */
	static public func ECBehaviorCollider getBehaviorIn(BehaviorElementClass eclass)
		return eclass.findBehavior(block ECBehaviorCollider each
			return true
		end) cast ECBehaviorCollider
	end
	
	/**
	 * \brief Get instance in element or \em null if absent.
	 * 
	 * Use this method to check if a particular BehaviorElement contains a behavior instance
	 * of type ECBehaviorCollider.Instance .
	 */
	static public func Instance getInstanceIn(BehaviorElement element)
		return element.findInstance(block Instance each
			return true
		end) cast Instance
	end
	
	
	
	/** \brief Create Behavior instance. */
	public func ECBehaviorInstance createInstance(BehaviorElement element)
		return Instance.new(this, element)
	end
end
