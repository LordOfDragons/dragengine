/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */


namespace Dragengine.Scenery

pin Dragengine.Gui
pin Dragengine.Preloading
pin Dragengine.Utils
pin Dragengine.Scenery


/**
 * \brief Behavior element behavior adding anchor element support.
 * 
 * Anchoring elements allows to locate elements in a GameWorld using a unique name set by the
 * mapper. This is useful for game commands send by conversations scripts.
 * 
 * Element class property has name "anchorID".
 * 
 * This element behavior can be present only once in a BehaviorElement. Trying to add more
 * than one instance results in an exception thrown.
 * 
 * This behavior does not require the element class to be persistable (setPersistable).
 * 
 * \see https://developer.dragondreams.ch/wiki/doku.php/dragengine:modules:dragonscript:behavior_anchorelement
 */
class ECBehaviorAnchorElement extends DefaultECBehavior
	/**
	 * \brief Behavior factory.
	 * \version 1.25
	 * 
	 * Example XML element class:
	 * \code{.xml}
	 * <behavior type='ECBehaviorAnchorElement'>
	 *   <!-- optional: set property name to use instead of 'anchorID' -->
	 *   <string name='propertyName'>anchorID</string>
	 * </behavior>
	 * \endcode
	 */
	class Factory extends DefaultBehaviorFactory
		func new() super("ECBehaviorAnchorElement")
		end
		
		func ECBehavior addBehavior(BehaviorElementClass eclass, String id, Dictionary parameters)
			if not id.empty()
				throw EInvalidParam.new("id is not empty string")
			end
			return ECBehaviorAnchorElement.new(eclass, parameters.getAt("propertyName", "anchorID") cast String)
		end
	end
	
	/** \brief Behavior instance. */
	class Instance extends DefaultECBehaviorInstance
		var ECBehaviorAnchorElement pECBehavior
		var StringID pAnchorID
		var bool pAnchorAdded
		
		
		
		/** \brief Create element. */
		func new(ECBehaviorAnchorElement ecbehavior, BehaviorElement element) super(element)
			pECBehavior = ecbehavior
		end
		
		
		
		/** \brief Initialize element from stub. */
		func void init(StubElement stub)
			pAnchorID = pECBehavior.getAnchorID().getValue(stub)
		end
		
		
		
		/** \brief Behavior. */
		func ECBehaviorAnchorElement getECBehavior()
			return pECBehavior
		end
		
		/** \brief Anchor name or null to not anchor. */
		func StringID getAnchorID()
			return pAnchorID
		end
		
		
		
		/** \brief Add element to game world. */
		func void addToGameWorld()
			// pAnchorAdded is used to avoid exceptions thrown in removeFromGameWorld
			// in case adding the anchor here throws an exception (duplicate ID).
			// this avoids disposing of a game world after an exception ending up in
			// another exception causing huge leak reports that are useless     
			if pAnchorID != null
				getElement().getGameWorld().getAnchoredElementList() \
					.add(pAnchorID, getElement())
				pAnchorAdded = true
			end
		end
		
		/** \brief Remove element from game world. */
		func void removeFromGameWorld()
			if pAnchorAdded
				getElement().getGameWorld().getAnchoredElementList().remove(pAnchorID)
				pAnchorAdded = false
			end
		end
	end
	
	
	
	var ECPStringID pAnchorID
	
	
	
	/** \brief Create behavior element class. */
	func new(BehaviorElementClass eclass) this(eclass, "anchorID")
	end
	
	func new(BehaviorElementClass eclass, String propertyName) super(eclass)
		if getBehaviorIn(eclass) != null
			throw BEMultipleInstanceException.new(eclass, this)
		end
		
		pAnchorID = ECPStringID.new(propertyName)
		eclass.addProperty(pAnchorID)
		
		eclass.addBehavior(this)
	end
	
	
	
	/** \brief Anchor name or empty string to not anchor. */
	func ECPStringID getAnchorID()
		return pAnchorID
	end
	
	
	
	/** \brief Get instance in element from owner element class. */
	func Instance instance(BehaviorElement element)
		return element.getInstanceAt(getInstanceIndex()) cast Instance
	end
	
	
	
	/**
	 * \brief Get behavior in element class or \em null if absent.
	 * 
	 * Use this method to check if a particular BehaviorElementClass contains a behavior
	 * of type ECBehaviorCollider.
	 */
	static func ECBehaviorAnchorElement getBehaviorIn(BehaviorElementClass eclass)
		return eclass.findBehavior(block ECBehaviorAnchorElement each
			return true
		end) cast ECBehaviorAnchorElement
	end
	
	/**
	 * \brief Get instance in element or \em null if absent.
	 * 
	 * Use this method to check if a particular BehaviorElement contains a behavior instance
	 * of type ECBehaviorAnchorElement.Instance . If more than one instance is present returns
	 * the first instance.
	 */
	static func Instance getInstanceIn(BehaviorElement element)
		return element.findInstance(block Instance each
			return true
		end) cast Instance
	end
	
	
	
	/** \brief Create Behavior instance. */
	func ECBehaviorInstance createInstance(BehaviorElement element)
		return Instance.new(this, element)
	end
end
