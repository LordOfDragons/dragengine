/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */


namespace Dragengine.Scenery

pin Dragengine.Gui
pin Dragengine.Preloading
pin Dragengine.Utils
pin Dragengine.Scenery


/**
 * \brief Behavior element behavior adding anchor element support.
 * 
 * Anchoring elements allows to locate elements in a GameWorld using a unique name set by the
 * mapper. This is useful for game commands send by conversations scripts.
 * 
 * Element class property has name "anchorID".
 * 
 * This element behavior can be present only once in a BehaviorElement. Trying to add more
 * than one instance results in an exception thrown.
 * 
 * This behavior does not require the element class to be persistable (setPersistable).
 */
class ECBehaviorAnchorElement extends DefaultECBehavior
	/** \brief Behavior instance. */
	class Instance extends DefaultECBehaviorInstance
		private var ECBehaviorAnchorElement pECBehavior
		private var StringID pAnchorID
		private var bool pAnchorAdded
		
		
		
		/** \brief Create element. */
		public func new( ECBehaviorAnchorElement ecbehavior, BehaviorElement element ) super( element )
			this.pECBehavior = ecbehavior
		end
		
		
		
		/** \brief Initialize element from stub. */
		public func void init( StubElement stub )
			this.pAnchorID = this.pECBehavior.getAnchorID().getValue( stub )
		end
		
		
		
		/** \brief Behavior. */
		public func ECBehaviorAnchorElement getECBehavior()
			return this.pECBehavior
		end
		
		/** \brief Anchor name or null to not anchor. */
		public func StringID getAnchorID()
			return this.pAnchorID
		end
		
		
		
		/** \brief Add element to game world. */
		public func void addToGameWorld()
			// pAnchorAdded is used to avoid exceptions thrown in removeFromGameWorld
			// in case adding the anchor here throws an exception (duplicate ID).
			// this avoids disposing of a game world after an exception ending up in
			// another exception causing huge leak reports that are useless     
			if this.pAnchorID != null
				this.getElement().getGameWorld().getAnchoredElementList() \
					.add( this.pAnchorID, this.getElement() )
				this.pAnchorAdded = true
			end
		end
		
		/** \brief Remove element from game world. */
		public func void removeFromGameWorld()
			if this.pAnchorAdded
				this.getElement().getGameWorld().getAnchoredElementList().remove( this.pAnchorID )
				this.pAnchorAdded = false
			end
		end
	end
	
	
	
	private var ECPStringID pAnchorID
	
	
	
	/** \brief Create behavior element class. */
	public func new( BehaviorElementClass eclass ) this( eclass, "anchorID" )
	end
	
	public func new( BehaviorElementClass eclass, String propertyName ) super( eclass )
		if getBehaviorIn( eclass ) != null
			throw BEMultipleInstanceException.new( eclass, this )
		end
		
		this.pAnchorID = ECPStringID.new( propertyName )
		eclass.addProperty( this.pAnchorID )
		
		eclass.addBehavior( this )
	end
	
	
	
	/** \brief Anchor name or empty string to not anchor. */
	public func ECPStringID getAnchorID()
		return this.pAnchorID
	end
	
	
	
	/** \brief Get instance in element from owner element class. */
	public func Instance instance( BehaviorElement element )
		return element.getInstanceAt( this.getInstanceIndex() ) cast Instance
	end
	
	
	
	/**
	 * \brief Get behavior in element class or \em null if absent.
	 * 
	 * Use this method to check if a particular BehaviorElementClass contains a behavior
	 * of type ECBehaviorCollider.
	 */
	static public func ECBehaviorAnchorElement getBehaviorIn( BehaviorElementClass eclass )
		return eclass.findBehavior( block ECBehaviorAnchorElement each
			return true
		end ) cast ECBehaviorAnchorElement
	end
	
	/**
	 * \brief Get instance in element or \em null if absent.
	 * 
	 * Use this method to check if a particular BehaviorElement contains a behavior instance
	 * of type ECBehaviorAnchorElement.Instance . If more than one instance is present returns
	 * the first instance.
	 */
	static public func Instance getInstanceIn( BehaviorElement element )
		return element.findInstance( block Instance each
			return true
		end ) cast Instance
	end
	
	
	
	/** \brief Create Behavior instance. */
	public func ECBehaviorInstance createInstance( BehaviorElement element )
		return Instance.new( this, element )
	end
end
