/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

namespace Dragengine.Scenery

pin Dragengine.LoadSave
pin Dragengine.Preloading
pin Dragengine.Utils


/**
 * \brief Behavior adding support to randomize creation.
 * \version 1.23
 * 
 * This behavior is typically used to add variation to game worlds by randomly creating
 * or not creating element. This affects only elements added to a game world. Loading
 * a game world does not trigger randomization.
 * 
 * This behavior uses \ref BehaviorPreventCreation to randomly prevent the element to
 * be created and added to the game world. This check is done after \ref BehaviorPrepareStub
 * supporting behaviors have potentially modified the \ref StubElement.
 * 
 * Default property prefix is "randomizeCreation."
 */
class ECBehaviorRandomizeCreation extends DefaultECBehavior implements BehaviorPreventCreation
	/**
	 * \brief Behavior factory.
	 * \ref 1.25
	 * 
	 * Example XML element class:
	 * \code{.xml}
	 * <behavior type='ECBehaviorRandomizeCreation'/>
	 * \endcode
	 */
	class Factory implements BehaviorFactory
		func new()
		end
		
		func String factoryId()
			return "ECBehaviorRandomizeCreation"
		end
		
		func ECBehavior addBehavior(BehaviorElementClass eclass, String id, Dictionary parameters)
			if not id.empty()
				throw EInvalidParam.new("id is not empty string")
			end
			return ECBehaviorRandomizeCreation.new(eclass)
		end
	end
	
	
	var ECPFloat pProbability
	
	
	/** \brief Create behavior. */
	func new(BehaviorElementClass eclass) super(eclass)
		var String prefix = "randomizeCreation."
		
		pProbability = ECPFloat.new(prefix + "probability", 1, 0, 1)
		eclass.addProperty(pProbability)
		
		eclass.addBehavior(this)
		eclass.addPreventCreationBehavior(this)
	end
	
	
	/**
	 * \brief Probability property.
	 * 
	 * Probability the element is created. Property name is "probability".
	 * Default value is 1. Minimum value is 0. Minimum value is 1.
	 */
	func ECPFloat getPrrobability()
		return pProbability
	end
	
	
	/**
	 * \brief Prevent creation of element.
	 * 
	 * Called by \ref BehaviorElementClass#createAndAddElement(StubElement,GameWorld)
	 * after \ref BehaviorPrepareStub interfaces have been processed. If true is
	 * returned the element is not created and added to the game world.
	 */
	func bool preventCreation(StubElement stub, GameWorld gameWorld)
		return not DEMath.probability(pProbability.getValue(stub))
	end
	
	
	/** \brief Create Behavior instance. */
	func ECBehaviorInstance createInstance(BehaviorElement element)
		return DefaultECBehaviorInstance.new(element)
	end
end
