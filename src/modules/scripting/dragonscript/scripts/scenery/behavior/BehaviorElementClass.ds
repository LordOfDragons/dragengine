/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */


namespace Dragengine.Scenery

pin Dragengine.Gui
pin Dragengine.Preloading
pin Dragengine.LoadSave
pin Dragengine.Utils


/**
 * \brief Behavior element element class.
 * 
 * Behavior elements are jack of all trade elements. They allow building complex element
 * behaviors by using behavior building blocks. These behavior building blocks are
 * provided by ECBehavior classes attached to the element class.
 * 
 * Behavior elements are suited for prototyping and rapid development since they require
 * little written code. For highly optimized elements building them using the conventional
 * way might be a better option. For all other uses behavior elements are fast and reusable.
 * 
 * To create an element based on BehaviorElement create a new subclass of BehaviorElementClass
 * and add all the desired ECBehavior instance. There is no need to subclas BehaviorElement.
 * When creating a new instance the BehaviorElement is filled with ECBehavior created
 * ECBehaviorInstance instances. These provide the actual behavior to the element.
 * 
 * Behaviors can also be created and added using XML element classes. Add the factories of
 * all behavior types allowed to be created using \ref #addBehaviorFactory(). By default no
 * factory is present disabling support for XML behavior creation.
 */
class BehaviorElementClass extends ElementClass
	var Array pBehaviors
	var Array pPrepareStubBehaviors
	var Array pPreventCreationBehaviors
	var Dictionary pBehaviorFactories
	
	public static var BehaviorFactoryHelper sharedFactoryHelper = BehaviorFactoryHelper.new()
	
	
	
	/** \brief Create element class using loaders from BaseGameApp. */
	func new() this("BehaviorElement", BaseGameApp.getApp().getLoaders())
	end
	
	/** \brief Create element class. */
	func new(Loaders loaders) this("BehaviorElement", loaders)
	end
	
	/** \brief Create element class using loaders from BaseGameApp. */
	func new(String className) this(className, BaseGameApp.getApp().getLoaders())
	end
	
	/** \brief Create element class. */
	func new(String className, Loaders loaders) super(className)
		pBehaviors = Array.new()
		pPrepareStubBehaviors = Array.new()
		pPreventCreationBehaviors = Array.new()
		pBehaviorFactories = Dictionary.new()
	end
	
	/** \brief Dispose of element class. */
	func void dispose()
		if pBehaviors != null
			pBehaviors.forEachReverse(block ECBehavior each
				each.dispose()
			end)
			pBehaviors = null
		end
		
		pPrepareStubBehaviors = null
		pPreventCreationBehaviors = null
		pBehaviorFactories = null
		
		super.dispose()
	end
	
	
	
	/** \brief Number of behaviors. */
	func int getBehaviorCount()
		return pBehaviors.getCount()
	end
	
	/** \brief Behavior at index. */
	func ECBehavior getBehaviorAt(int index)
		return pBehaviors.getAt(index) cast ECBehavior
	end
	
	/**
	 * \brief Add behavior.
	 * 
	 * This is called by constructors of class implementing ECBehavior. Usually you do not
	 * have to call this manually.
	 */
	func void addBehavior(ECBehavior behavior)
		if behavior == null or pBehaviors.has(behavior)
			throw EInvalidParam.new()
		end
		
		var int instanceIndex = pBehaviors.getCount()
		pBehaviors.add(behavior)
		behavior.assignInstanceIndex(instanceIndex)
	end
	
	/**
	 * \brief Visit behaviors with block.
	 * 
	 * Block is required to have one parameter of type ECBehavior or subclass thereof.
	 * Block is called only for behaviors castable to block parameter type.
	 */
	func void forEachBehavior(Block ablock)
		pBehaviors.forEachCastable(ablock)
	end
	
	/**
	 * \brief Find behavior with block.
	 * 
	 * Block is required to have one parameter ECBehavior or subclass thereof and returning
	 * true if the right behavior is found otherwise false. Block is called only for
	 * behaviors castable to block parameter type.
	 */
	func ECBehavior findBehavior(Block ablock)
		return pBehaviors.findCastable(ablock) cast ECBehavior
	end
	
	/**
	 * \brief Collect behaviors with block into Array.
	 * \version 1.5
	 * 
	 * Block is required to have one parameter ECBehavior or subclass thereof and returning
	 * true if the right behavior is found otherwise false. Block is called only for
	 * behaviors castable to block parameter type.
	 */
	func Array collectBehaviors(Block ablock)
		return pBehaviors.collectCastable(ablock)
	end
	
	/**
	 * \brief Visit behaviors with block.
	 * 
	 * Block is required to have one parameter of type ECBehavior. For use by BehaviorElement.
	 */
	func void forEachBehaviorDirect(Block ablock)
		pBehaviors.forEach(ablock)
	end
	
	
	
	/**
	 * \brief Add behavior to be notified before initialization is done.
	 * \version 1.17
	 * 
	 * Preinitializing allows behaviors to modify StubElement before Element.init() is called.
	 * This can be used to alter the behavior initialization procss my modifying the stub
	 * properties or textures.
	 * 
	 * Usually preinitializing is done for elements to be added to a game world. It is thus
	 * possible to use game world stub properties to alter the initialization. This can be
	 * used to adjust the behavior depending on what game world they are created for. It is
	 * also possible preinitialization is done without the element to be added to a specific
	 * game world. In this case gameWorld is null. Behaviors added for preinitializing have
	 * to be able to handle gameWorld being null.
	 */
	func void addPrepareStubBehavior(BehaviorPrepareStub behavior)
		if behavior == null
			throw ENullPointer.new("behavior")
		end
		
		pPrepareStubBehaviors.add(behavior)
	end
	
	/**
	 * \brief Visit prepare stub behaviors with block.
	 * version 1.23
	 * 
	 * Block is required to have one parameter of type ECBehavior or subclass thereof.
	 * Block is called only for behaviors castable to block parameter type.
	 */
	func void forEachPrepareStubBehavior(Block ablock)
		pPrepareStubBehaviors.forEachCastable(ablock)
	end
	
	/**
	 * \brief Call prepareStub on all prepare stub behaviors.
	 * \version 1.23
	 * 
	 * For use by subclasses overwriting \ref #createAndAddElement(StubElement,GameWorld)
	 * or \ref #loadAndAddElement(PersistencyEnvironment,StubElement,FileReader,GameWorld)
	 * without super calling.
	 * 
	 * \see BehaviorPrepareStub#prepareStub(StubElement,GameWorld,bool)
	 */
	func void prepareStubs(StubElement stub, GameWorld gameWorld, bool loading)
		pPrepareStubBehaviors.forEach(block BehaviorPrepareStub each
			each.prepareStub(stub, gameWorld, loading)
		end)
	end
	
	
	
	/**
	 * \brief Add behavior potentially preventing creation before initialization is done.
	 * \version 1.23
	 * 
	 * Preventing creation allows behaviors to cancel creating and adding an element
	 * before Element.init() is called. This can be used for to randomly create or not
	 * create an element as well as creating elements only if the player choose a certain
	 * difficulty level.
	 * 
	 * Usually preventing creation is done for elements to be added to a game world. It is
	 * thus possible to use game world stub properties to alter the prevention condition.
	 * It is possible preinitialization is done without the element to be added to a specific
	 * game world. In this case gameWorld is null. Behaviors added for preventing creation
	 * have to be able to handle gameWorld being null.
	 */
	func void addPreventCreationBehavior(BehaviorPreventCreation behavior)
		if behavior == null
			throw ENullPointer.new("behavior")
		end
		
		pPreventCreationBehaviors.add(behavior)
	end
	
	/**
	 * \brief Visit prevent creation behaviors with block.
	 * version 1.23
	 * 
	 * Block is required to have one parameter of type ECBehavior or subclass thereof.
	 * Block is called only for behaviors castable to block parameter type.
	 */
	func void forEachPreventCreationBehavior(Block ablock)
		pPreventCreationBehaviors.forEachCastable(ablock)
	end
	
	/**
	 * \brief Call prepareStub on all prepare stub behaviors.
	 * \version 1.23
	 * 
	 * For use by subclasses overwriting \ref #createAndAddElement(StubElement,GameWorld)
	 * without super calling.
	 * 
	 * \see BehaviorPreventCreation#preventCreation(StubElement,GameWorld)
	 */
	func bool preventCreation(StubElement stub, GameWorld gameWorld)
		return pPreventCreationBehaviors.find(block BehaviorPreventCreation each
			return each.preventCreation(stub, gameWorld)
		end) != null
	end
	
	
	
	/**
	 * \brief Add behavior factory replacing factory with same name if present.
	 * \version 1.25
	 */
	func void addBehaviorFactory(BehaviorFactory factory)
		if factory == null
			throw ENullPointer.new()
		end
		pBehaviorFactories.setAt(factory.factoryId(), factory)
	end
	
	/**
	 * \brief Remove behavior factory if present.
	 * \version 1.25
	 */
	func void removeBehaviorFactory(String id)
		pBehaviorFactories.removeIfExisting(id)
	end
	
	/**
	 * \brief Remove all behavior factories.
	 * \version 1.25
	 */
	func void removeAllBehaviorFactories()
		pBehaviorFactories.removeAll()
	end
	
	/**
	 * \brief Add all behavior factories present in the DragonScript module.
	 * \version 1.25
	 */
	func void addDefaultBehaviorFactories()
		sharedFactoryHelper.addAllFactories(this)
	end
	
	/**
	 * \brief Behavior factory with identifier or null if absent.
	 * \version 1.25
	 */
	func BehaviorFactory getBehaviorFactoryWithId(String id)
		return pBehaviorFactories.getAt(id, null) cast BehaviorFactory
	end
	
	/**
	 * \brief Visit behavior factories.
	 * \version 1.25
	 * 
	 * Block receives as only argument \ref BehaviorFactory.
	 */
	func void forEachBehaviorFactory(Block ablock)
		pBehaviorFactories.forEachValue(ablock)
	end
	
	
	
	/** \brief Create element instance. */
	protected func Element createElement()
		return BehaviorElement.new(this)
	end
	
	/**
	 * \brief Create element from given stub and add it to game world.
	 * 
	 * Calls \ref BehaviorPrepareStub#prepareStub(StubElement,GameWorld,bool) on behaviors
	 * supporting stub preparation. Then calls
	 * \ref BehaviorPreventCreation#preventCreation(StubElement,GameWorld) to check if
	 * creating and adding the element has to be cancelled. Then calls
	 * \ref #createElement(StubElement) to obtain new element instance. If returned element
	 * is null no further processing is done. Otherwise element is added to gameWorld.
	 */
	func void createAndAddElement(StubElement stub, GameWorld gameWorld)
		pPrepareStubBehaviors.forEach(block BehaviorPrepareStub each
			each.prepareStub(stub, gameWorld, false)
		end)
		
		if pPreventCreationBehaviors.find(block BehaviorPreventCreation each
			return each.preventCreation(stub, gameWorld)
		end) != null
			return
		end
		
		super.createAndAddElement(stub, gameWorld)
	end
	
	/**
	 * \brief Load element from file reader and add it to game world.
	 * 
	 * Calls \ref BehaviorPrepareStub#prepareStub(StubElement,GameWorld,bool) on behaviors
	 * supporting stub preparation. Then calls
	 * \ref #loadElement(PersistencyEnvironment,StubElement,FileReader) to obtain new
	 * element instance. If returned element is null no further processing is done.
	 * Otherwise element is added to gameWorld.
	 */
	func void loadAndAddElement(PersistencyEnvironment env, StubElement stub, \
	FileReader reader, GameWorld gameWorld)
		pPrepareStubBehaviors.forEach(block BehaviorPrepareStub each
			each.prepareStub(stub, gameWorld, true)
		end)
		
		super.loadAndAddElement(env, stub, reader, gameWorld)
	end
end
