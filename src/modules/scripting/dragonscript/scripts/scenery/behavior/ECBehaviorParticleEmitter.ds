/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */


namespace Dragengine.Scenery

pin Dragengine.Gui
pin Dragengine.LoadSave
pin Dragengine.Preloading
pin Dragengine.Utils
pin Dragengine.TriggerSystem
pin Dragengine.BehaviorTreeSystem
pin Dragengine.StateMachineSystem


/**
 * \brief Behavior element behavior adding particle emitter support.
 * 
 * Behavior adds a ParticleEmitter resource to the the behavior element. This behavior can be added
 * multiple times to an element. Each instance creates one particle emitter attached to the element
 * collider which can be individually modified. To distinguish the particle emitters each instance
 * has an identifier which can be used to retrieve a specific instance. The prefix of the
 * particle emitter class properties is "particleEmitter." . If the identifier is not empty the
 * particle emitter element class properties have the prefix "{id}.particleEmitter.". This can
 * be overwritten if required.
 * Hence to use more than one particle emitter use code like this in your subclass constructor:
 * 
 * \code{.ds}
 * class MyElement extends BehaviorElementClass
 *    func new()
 *       ECBehaviorParticleEmitter.new(this)
 *       ECBehaviorParticleEmitter.new(this, "subParticleEmitter")
 *    end
 * end
 * \endcode
 * 
 * You can now define the parameters to use for both particle emitters using for example the
 * properties "emitter" for the first particle emitter and "subParticleEmitter.emitter" for
 * the second particle emitter.
 * 
 * It is recommended to always specify an identifier even if only one particle emitter is used.
 * This avoids potentially name conflicts especially if other behaviors are added attaching
 * other resources too.
 * 
 * If the \em ECBehaviorCollider behavior is present in the behavior element before this
 * behavior is added the particle emitter is attached. The particle emitter is attached to
 * the named bone if defined otherwise it is attached statically.
 * 
 * Element class properties have the prefix "particleEmitter{(id)}.".
 * 
 * \par Listening
 * 
 * Behavior elements and other behaviors can add listeners to the ECBehaviorParticleEmitter.
 * Listeners are notified if the casting starts, casting stops and when the last particle of
 * a burst emission died. This can be used to synchronize actions to these events.
 * ECBehaviorParticleEmitter can also use trigger targets so listeners are not always required.
 * 
 * This behavior does require the element class to be persistable (setPersistable).
 * 
 * \see https://developer.dragondreams.ch/wiki/doku.php/dragengine:modules:dragonscript:behavior_particleemitter
 */
class ECBehaviorParticleEmitter extends DefaultECBehavior
	/** \brief Listener for behavior instance events. */
	interface Listener
		/** \brief Start casting particles. */
		func void startCasting(Instance instance)
		
		/** \brief Stop casting particles. */
		func void stopCasting(Instance instance)
		
		/** \brief Last particle of a burst emission died. */
		func void lastParticleDied(Instance instance)
		
		/**
		 * \brief Determine response for a custom particle collision.
		 * 
		 * Update \em collisionInfo with the particle response to use. Multiple listeners can
		 * potentially update \em collisionInfo. The last update is used. If no listener
		 * updates the information the particle will be destroyed.
		 */
		func void particleResponse(Instance instance, CollisionInfo collisionInfo)
	end
	
	/** \brief Default implementation of behavior instance listener. */
	class DefaultListener implements Listener
		/** \brief Create default listener. */
		func new()
		end
		
		/** \brief Start casting particles. */
		func void startCasting(Instance instance)
		end
		
		/** \brief Stop casting particles. */
		func void stopCasting(Instance instance)
		end
		
		/** \brief Last particle of a burst emission died. */
		func void lastParticleDied(Instance instance)
		end
		
		/**
		 * \brief Determine response for a custom particle collision.
		 * 
		 * Update \em collisionInfo with the particle response to use. Multiple listeners can
		 * potentially update \em collisionInfo. The last update is used. If no listener
		 * updates the information the particle will be destroyed.
		 * 
		 * The default implementation does not change \em collisionInfo.
		 */
		func void particleResponse(Instance instance, CollisionInfo collisionInfo)
		end
	end
	
	/** \brief Factory creating listeners. */
	interface ListenerFactory
		/** \brief Create listener. */
		func Listener createListener(Instance instance)
	end
	
	/** \brief Factory creating listeners using block. */
	class BlockListenerFactory implements ListenerFactory
		var Block pBlock
		
		/** \brief Create factory using block receiving Instance as parameter returning Listener. */
		func new(Block blockFactory)
			if blockFactory == null
				throw ENullPointer.new()
			end
			pBlock = blockFactory
		end
		
		/** \brief Create listener. */
		func Listener createListener(Instance instance)
			return pBlock.run(instance) cast Listener
		end
	end
	
	/**
	 * \brief Behavior factory.
	 * \version 1.25
	 * 
	 * Automatically assigns these behaviors if present before adding:
	 * - Optional: \ref ECBehaviorCollider
	 * 
	 * Example XML element class:
	 * \code{.xml}
	 * <behavior type='ECBehaviorParticleEmitter'>
	 *   <!-- optional: set collision filter. default value '5:0 1 2 6' which means
	 *                  category BaseGameApp.CollisionFilterBit.particle
	 *                  filter BaseGameApp.CollisionFilterBit.geometry,
	 *                         BaseGameApp.CollisionFilterBit.dynamic,
	 *                         BaseGameApp.CollisionFilterBit.actor,
	 *                         BaseGameApp.CollisionFilterBit.forceField.
	 *                  format is '', 'category' or 'category:filter' where category and filter
	 *                  are a list of bits to set. -->
	 *   <string name='collisionFilter'>5:0 1 2 6</string>
	 * 
	 *   <!-- optional: use BaseGameApp trigger table. game can add more supported values -->
	 *   <string name='triggerTable'>default</string>
	 * 
	 *   <!-- optional: sync trigger with particle emitter matching identifier -->
	 *   <string name='syncTrigger'>second</string>
	 *   
	 *   <!-- optional: identifier of ECBehaviorTriggered to synchronize with or empty
	 *                  string to not synchronize. default is empty string. -->
	 *   <string name='trigger.synchronize'>other</string>
	 *   
	 *   <!-- optional: use behavior tree with id instead of empty string -->
	 *   <string name='behaviorTree'>second</string>
	 *   
	 *   <!-- optional: use state machine with id instead of empty string -->
	 *   <string name='stateMachine'>second</string>
	 * </behavior>
	 * 
	 * <!-- for adding multiple behaviors use unique identifiers -->
	 * <behavior type='ECBehaviorParticleEmitter' id='second'>
	 *   ...
	 * </behavior>
	 * \endcode
	 * 
	 * Element class properties added by the behavior can also be set directly inside the tag
	 * be removing the property name prefix and starting with a "." (for example ".propertyName").
	 */
	class Factory implements BehaviorFactory
		func new()
		end
		
		func String factoryId()
			return "ECBehaviorParticleEmitter"
		end
		
		func ECBehavior addBehavior(BehaviorElementClass eclass, String id, Dictionary parameters)
			var ECBehaviorParticleEmitter behavior = ECBehaviorParticleEmitter.new(eclass,\
				ECBehaviorCollider.getBehaviorIn(eclass), BaseGameApp.getApp().getLoaders(),\
				getTriggerTableFor(parameters.getAt("triggerTable", "default") cast String), id)
			
			if parameters.has("collisionFilter")
				behavior.getParticleEmitter().getCollisionFilter().setCollisionFilter(\
					ElementClass.getSharedCodecPropertyString().decodeCollisionFilter(\
						parameters.getAt("collisionFilter") cast String))
			end
			
			if parameters.has("syncTrigger")
				var String bid = parameters.getAt("syncTrigger") cast String
				if bid != null
					behavior.setSyncTrigger(ECBehaviorParticleEmitter.getBehaviorIn(eclass, bid))
				end
			end
			
			behavior.getTrigger().setSynchronize(eclass,\
				parameters.getAt("trigger.synchronize", null) cast String)
			
			behavior.setBehaviorTree(eclass.sharedFactoryHelper.defaultBehaviorTree(eclass, parameters))
			behavior.setStateMachine(eclass.sharedFactoryHelper.defaultStateMachine(eclass, parameters))
			
			eclass.sharedFactoryHelper.setPropertiesFromParameters(\
				eclass, parameters, "particleEmitter", id)
			return behavior
		end
		
		/**
		 * \brief Trigger table matching value.
		 * 
		 * Default implementation returns \ref BaseGameApp#getTriggerTable() for value 'default'
		 * and null for all other values. Overwrite to accept other values.
		 */
		func TSTriggerTable getTriggerTableFor(String value)
			return BehaviorElementClass.sharedFactoryHelper.triggerTable(value)
		end
	end
	
	/** \brief Behavior instance. */
	class Instance extends DefaultECBehaviorInstance
		/**
		 * \brief Behavior tree action "particleEmitter{(id)}.set".
		 * \version 1.26
		 */
		private class BTASet extends BTSMActionCondition
			var Instance pInstance
			
			func new(Instance instance)
				pInstance = instance
			end
			
			func BTResult runAction(Dictionary parameters)
				var Object value
				
				value = parameters.getAt("casting", null)
				if value != null
					pInstance.setCasting(value.equals("true"))
				end
				
				return BTResult.success
			end
		end
		
		/**
		 * \brief Behavior tree action/condition "particleEmitter{(id)}.check".
		 * \version 1.26
		 */
		private class BTACheck extends BTSMActionCondition
			var Instance pInstance
			var String pPrefix
			
			func new(Instance instance, String prefix)
				pInstance = instance
				pPrefix = prefix
			end
			
			func BTResult runAction(Dictionary parameters)
				return check("", parameters) if BTResult.success\
					else (parameters.has("wait") if BTResult.running else BTResult.failure)
			end
			
			func bool evaluateCondition(Dictionary parameters)
				return check(pPrefix, parameters)
			end
			
			func bool check(String prefix, Dictionary parameters)
				var Object value
				
				value = parameters.getAt(prefix + "casting", null)
				if value != null and pInstance.getCasting() != value.equals("true")
					return false
				end
				
				return true
			end
		end
		
		/** \brief Trigger listener to toggle particle emitter casting state. */
		private class CastingListener extends ECBehaviorTriggered.DefaultListener
			var Instance pInstance
			
			func new(Instance instance)
				pInstance = instance
			end
			
			func void triggerExpressionTrue(ECBehaviorTriggered.Instance instance)
				pInstance.setCasting(true)
			end
			
			func void triggerExpressionFalse(ECBehaviorTriggered.Instance instance)
				pInstance.setCasting(false)
			end
		end
		
		/** \brief Particle listener. */
		private class ParticleListener implements ParticleEmitterInstanceListener
			var Instance pInstance
			
			func new(Instance instance)
				pInstance = instance
			end
			
			func void lastParticleDied(ParticleEmitterInstance instance)
				pInstance.notifyLastParticleDied()
			end
			
			func void collisionResponse(ParticleEmitterInstance instance, CollisionInfo collisionInfo)
				pInstance.notifyParticleResponse(collisionInfo)
			end
		end
		
		
		var ECBehaviorParticleEmitter pECBehavior
		var ECBehaviorCollider.Instance pCollider
		var bool pCasting
		var ParticleEmitterInstance pParticleEmitterInstance
		var ECBehaviorTriggered.Instance pTrigger
		var TSTriggerTable pTriggerTable
		var TSNamedTriggerTarget pTargetCasting
		var TSNamedTriggerTarget pTargetLastParticleDied
		var Array pListeners
		var SMContext pSMContext
		
		
		
		/** \brief Create behavior instance. */
		func new(ECBehaviorParticleEmitter ecbehavior, BehaviorElement element) super(element)
			pECBehavior = ecbehavior
			pListeners = Array.new()
			pTriggerTable = ecbehavior.getTriggerTable()
			pTargetCasting = TSNamedTriggerTarget.new()
			pTargetLastParticleDied = TSNamedTriggerTarget.new()
		end
		
		/** \brief Dispose of behavior instance. */
		func void dispose()
			if pParticleEmitterInstance != null
				pParticleEmitterInstance.setListener(null)
				pParticleEmitterInstance.removeAllIgnoreColliders()
			end
			
			pTrigger = null
			pTargetCasting = null
			pTargetLastParticleDied = null
			pCollider = null
			pListeners = null
			pSMContext = null
			super.dispose()
		end
		
		
		
		/** \brief Initialize element from stub. */
		func void init(StubElement stub)
			var BehaviorElement element = getElement()
			
			if pECBehavior.getCollider() != null
				pCollider = pECBehavior.getCollider().instance(element)
			end
			
			pParticleEmitterInstance = createParticleEmitterInstance(stub)
			if pParticleEmitterInstance == null
				return
			end
			
			pECBehavior.createListeners(this)
			
			pParticleEmitterInstance.setListener(ParticleListener.new(this))
			
			if pTriggerTable != null
				pTrigger = getTriggerBehavior()
				pTrigger.addListener(CastingListener.new(this))
				
				pTargetCasting.setName(pECBehavior.getTargetCasting().getValue(stub))
				pTargetLastParticleDied.setName(pECBehavior.getTargetLastParticleDied().getValue(stub))
			end
			
			if pTrigger == null or pTrigger.getTriggerExpression() == null
				setCasting(pECBehavior.getParticleEmitter().getCasting().getValue(stub))
			end
			
			if pCollider != null and pCollider.getCollider() != null
				attachEmitterInstance(stub, pCollider)
			end
			
			if pECBehavior.getBehaviorTree() != null
				var String pnp = pECBehavior.getPrefix()
				var BTContext c = pECBehavior.getBehaviorTree().instance(element).getContext()
				c.setAction(pnp + "set", BTASet.new(this))
				
				var String name = pnp + "check"
				var BTACheck btacheck = BTACheck.new(this, pnp)
				c.setAction(name, btacheck)
				c.setCondition(name, btacheck)
			end
			
			if pECBehavior.getStateMachine() != null
				var String pnp = pECBehavior.getPrefix()
				pSMContext = pECBehavior.getStateMachine().instance(element).getContext()
				pSMContext.setAction(pnp + "set", BTASet.new(this))
				
				var String name = pnp + "check"
				var BTACheck btacheck = BTACheck.new(this, pnp)
				pSMContext.setAction(name, btacheck)
				pSMContext.setCondition(name, btacheck)
			end
		end
		
		/**
		 * \brief Create particle emitter instance.
		 * 
		 * Default implementation calls ECComposeParticleEmitter.createParticleEmitterInstance().
		 */
		protected func ParticleEmitterInstance createParticleEmitterInstance(StubElement stub)
			return pECBehavior.getParticleEmitter().createParticleEmitterInstance(getElement(), stub)
		end
		
		/**
		 * \brief Get casting trigger behavior.
		 * 
		 * Default implementation uses owner class trigger behavior. If getSyncTrigger()
		 * of parent ECBehaviorParticleEmitter is not null uses referenced behavior trigger behavior.
		 */
		protected func ECBehaviorTriggered.Instance getTriggerBehavior()
			var ECBehaviorParticleEmitter behavior = pECBehavior.getSyncTrigger()
			var BehaviorElement element = getElement()
			
			if behavior != null
				return behavior.instance(element).getTrigger()
				
			else
				return pECBehavior.getTrigger().synchronizedOrSelf().instance(element)
			end
		end
		
		/**
		 * \brief Attach particle emitter instance to collider.
		 * 
		 * Default implementation calls ECComposeAttachResource.attach().
		 */
		protected func void attachEmitterInstance(StubElement stub, ECBehaviorCollider.Instance collider)
			pECBehavior.getAttach().attach(collider.getCollider(), pParticleEmitterInstance, stub)
		end
		
		
		
		/** \brief Behavior. */
		func ECBehaviorParticleEmitter getECBehavior()
			return pECBehavior
		end
		
		/** \brief Collider behavior or null if not attached. */
		func ECBehaviorCollider.Instance getCollider()
			return pCollider
		end
		
		/** \brief Trigger casting or \em null. */
		func ECBehaviorTriggered.Instance getTrigger()
			return pTrigger
		end
		
		/** \brief Particle emitter instance or null if not created. */
		func ParticleEmitterInstance getParticleEmitterInstance()
			return pParticleEmitterInstance
		end
		
		
		
		/** \brief Particle emitter instance is casting particles. */
		func bool getCasting()
			return pCasting
		end
		
		/** \brief Set if particle emitter instance is casting particles. */
		func void setCasting(bool casting)
			if casting == pCasting
				return
			end
			
			pCasting = casting
			
			if pParticleEmitterInstance != null
				if casting
					pParticleEmitterInstance.resetBurst()
				end
				pParticleEmitterInstance.setEnableCasting(casting and getElement().getVisible())
			end
			
			if casting
				pListeners.forEach(block Listener each
					each.startCasting(this)
				end)
				if pSMContext != null
					pSMContext.runEvent(pECBehavior.getPrefix() + "startCasting")
				end
				
			else
				pListeners.forEach(block Listener each
					each.stopCasting(this)
				end)
				if pSMContext != null
					pSMContext.runEvent(pECBehavior.getPrefix() + "stopCasting")
				end
			end
		end
		
		/** \brief Toggle particle emitter instance casting state. */
		func void toggle()
			setCasting(not pCasting)
		end
		
		/** \brief Trigger target reflecting casting state. */
		func TSNamedTriggerTarget getTargetCasting()
			return pTargetCasting
		end
		
		/** \brief Trigger target pulsed if particles died. */
		func TSNamedTriggerTarget getTargetLastParticleDied()
			return pTargetLastParticleDied
		end
		
		
		
		/** \brief Add listener. */
		func void addListener(Listener listener)
			if listener == null
				throw EInvalidParam.new()
			end
			pListeners.add(listener)
		end
		
		/** \brief Remove listener. */
		func void removeListener(Listener listener)
			pListeners.remove(listener)
		end
		
		/** \brief Notify listeners last particle died. */
		func void notifyLastParticleDied()
			pTargetLastParticleDied.pulse()
			pListeners.forEach(block Listener each
				each.lastParticleDied(this)
			end)
			if pSMContext != null
				pSMContext.runEvent(pECBehavior.getPrefix() + "lastParticleDied")
			end
		end
		
		/** \brief Notify listeners to calculate custom particle response. */
		func void notifyParticleResponse(CollisionInfo collisionInfo)
			pListeners.forEach(block Listener each
				each.particleResponse(this, collisionInfo)
			end)
		end
		
		
		
		/** \brief State changed (visble, touchable). */
		func void stateChanged()
			if pParticleEmitterInstance != null
				pParticleEmitterInstance.setEnableCasting(pCasting and getElement().getVisible())
			end
		end
		
		/** \brief Add element to game world. */
		func void addToGameWorld()
			if pParticleEmitterInstance != null
				getElement().getGameWorld().getWorld().addParticleEmitter(pParticleEmitterInstance)
			end
			
			pTargetCasting.acquireTarget(pTriggerTable)
			if pCasting
				pTargetCasting.fire()
				pListeners.forEach(block Listener each
					each.startCasting(this)
				end)
				if pSMContext != null
					pSMContext.runEvent(pECBehavior.getPrefix() + "startCasting")
				end
			end
			
			pTargetLastParticleDied.acquireTarget(pTriggerTable)
		end
		
		/** \brief Remove element from game world. */
		func void removeFromGameWorld()
			if pParticleEmitterInstance != null
				getElement().getGameWorld().getWorld().removeParticleEmitter(pParticleEmitterInstance)
			end
			
			pTargetCasting.dropTarget()
			pTargetLastParticleDied.dropTarget()
		end
		
		
		
		/** \brief Read element from file. */
		func void readFromFile(PersistencyEnvironment env, FileReader reader)
			select reader.readByte() // version
			case 0
				var PersistencyFlags flags = PersistencyFlags.new(1, reader)
				setCasting(flags.getAt(0))
				
			else
				throw EInvalidParam.new("unsupported version")
			end
		end
		
		/** Writes the element to a file. */
		func void writeToFile(PersistencyEnvironment env, FileWriter writer)
			writer.writeByte(0) // version
			
			var PersistencyFlags flags = PersistencyFlags.new(1)
			flags.setAt(0, pCasting)
			flags.writeToFile(writer)
		end
	end
	
	
	
	var ECBehaviorCollider pCollider
	var ECComposeParticleEmitter pParticleEmitter
	var ECComposeAttachResource pAttach
	var ECBehaviorTriggered pTrigger
	var ECBehaviorParticleEmitter pSyncTrigger
	var ECPString pTargetCasting
	var ECPString pTargetLastParticleDied
	var TSTriggerTable pTriggerTable
	var Array pListenerFactories
	var ECBehaviorBehaviorTree pBehaviorTree
	var ECBehaviorStateMachine pStateMachine
	var String pPrefix
	
	
	
	/**
	 * \brief Create behavior element class.
	 * 
	 * These values are optional and can be null: \em collider.
	 */
	func new(BehaviorElementClass eclass, ECBehaviorCollider collider) \
	this(eclass, collider, BaseGameApp.getApp().getLoaders(), null)
	end
	
	func new(BehaviorElementClass eclass, ECBehaviorCollider collider, String id) \
	this(eclass, collider, BaseGameApp.getApp().getLoaders(), null, id)
	end
	
	func new(BehaviorElementClass eclass, ECBehaviorCollider collider, Loaders loaders, \
	TSTriggerTable triggerTable) this(eclass, collider, loaders, triggerTable, "")
	end
	
	func new(BehaviorElementClass eclass, ECBehaviorCollider collider, Loaders loaders, \
	TSTriggerTable triggerTable, String id) this(eclass, collider, loaders, triggerTable, id, \
		id.empty() if "particleEmitter" else "particleEmitter(" + id + ")")
	end
	
	func new(BehaviorElementClass eclass, ECBehaviorCollider collider, \
	Loaders loaders, TSTriggerTable triggerTable, String id, String subID) \
	this(eclass, collider, loaders, triggerTable, id, subID, subID + ".")
	end
	
	func new(BehaviorElementClass eclass, ECBehaviorCollider collider, Loaders loaders, \
	TSTriggerTable triggerTable, String id, String subID, String prefix) super(eclass, id)
		pPrefix = prefix
		pCollider = collider
		pTriggerTable = triggerTable
		pListenerFactories = Array.new()
		
		pParticleEmitter = ECComposeParticleEmitter.new(eclass, loaders, prefix)
		pAttach = ECComposeAttachResource.new(eclass, prefix)
		
		pTrigger = ECBehaviorTriggered.new(eclass, triggerTable, subID, prefix + "trigger")
		
		pTargetCasting = ECPString.new(prefix + "targetCasting", "")
		eclass.addProperty(pTargetCasting)
		
		pTargetLastParticleDied = ECPString.new(prefix + "targetLastParticleDied", "")
		eclass.addProperty(pTargetLastParticleDied)
		
		eclass.addBehavior(this)
	end
	
	/** \brief Dispose of behavior. */
	func void dispose()
		pCollider = null
		pSyncTrigger = null
		pListenerFactories = null
		pBehaviorTree = null
		pStateMachine = null
		super.dispose()
	end
	
	
	
	/**
	 * \brief Prefix.
	 * \version 1.26
	 */
	func String getPrefix()
		return pPrefix
	end
	
	/** \brief Collider behavior or null to not attach. */
	func ECBehaviorCollider getCollider()
		return pCollider
	end
	
	/** \brief Composeable particle emitter for element class. */
	func ECComposeParticleEmitter getParticleEmitter()
		return pParticleEmitter
	end
	
	/** \brief Attach resource. */
	func ECComposeAttachResource getAttach()
		return pAttach
	end
	
	/** \brief Trigger casting. */
	func ECBehaviorTriggered getTrigger()
		return pTrigger
	end
	
	/** \brief ECBehaviorParticleEmitter to synchronize triggers with or \em null to disable. */
	func ECBehaviorParticleEmitter getSyncTrigger()
		return pSyncTrigger
	end
	
	/** \brief Set ECBehaviorParticleEmitter to synchronize triggers with or \em null to disable. */
	func void setSyncTrigger(ECBehaviorParticleEmitter behavior)
		pSyncTrigger = behavior
	end
	
	/** \brief Target casting. */
	func ECPString getTargetCasting()
		return pTargetCasting
	end
	
	/** \brief Target last particle died. */
	func ECPString getTargetLastParticleDied()
		return pTargetLastParticleDied
	end
	
	/** \brief Trigger table or \em null if not used. */
	func TSTriggerTable getTriggerTable()
		return pTriggerTable
	end
	
	/** \brief Set trigger table or \em null if not used. */
	func void setTriggerTable(TSTriggerTable triggerTable)
		pTriggerTable = triggerTable
	end
	
	/**
	 * \brief Behavior tree or null.
	 * \version 1.26
	 */
	func ECBehaviorBehaviorTree getBehaviorTree()
		return pBehaviorTree
	end
	
	/**
	 * \brief Set behavior tree or null.
	 * \version 1.26
	 */
	func void setBehaviorTree(ECBehaviorBehaviorTree behaviorTree)
		pBehaviorTree = behaviorTree
	end
	
	/**
	 * \brief State machine or null.
	 * \version 1.26
	 */
	func ECBehaviorStateMachine getStateMachine()
		return pStateMachine
	end
	
	/**
	 * \brief Set state machine or null.
	 * \version 1.26
	 */
	func void setStateMachine(ECBehaviorStateMachine stateMachine)
		pStateMachine = stateMachine
	end
	
	/** \brief Add listener factory. */
	func void addListenerFactory(ListenerFactory factory)
		if factory == null
			throw ENullPointer.new()
		end
		pListenerFactories.add(factory)
	end
	
	/**
	 * \brief Add listener factory using block.
	 * 
	 * Block receives as parameter Instance and returns Listener.
	 */
	func void addListenerFactory(Block blockFactory)
		pListenerFactories.add(BlockListenerFactory.new(blockFactory))
	end
	
	/** \brief Visit listener factories with block with argument ListenerFactory. */
	func void forEachListenerFactory(Block ablock)
		pListenerFactories.forEach(ablock)
	end
	
	/** \brief Create listeners from factories adding them to behavior instance. */
	func void createListeners(Instance instance)
		pListenerFactories.forEach(block ListenerFactory each
			instance.addListener(each.createListener(instance))
		end)
	end
	
	
	
	/** \brief Get instance in element from owner element class. */
	func Instance instance(BehaviorElement element)
		return element.getInstanceAt(getInstanceIndex()) cast Instance
	end
	
	
	
	/**
	 * \brief Get behavior in element class or \em null if absent.
	 * 
	 * Use this method to check if a particular BehaviorElementClass contains a behavior
	 * of type ECBehaviorCollider.
	 */
	static func ECBehaviorParticleEmitter getBehaviorIn(BehaviorElementClass eclass)
		return eclass.findBehavior(block ECBehaviorParticleEmitter each
			return true
		end) cast ECBehaviorParticleEmitter
	end
	
	/**
	 * \brief Get behavior with id in element class or \em null if absent.
	 * 
	 * Use this method to check if a particular BehaviorElementClass contains a behavior
	 * of type ECBehaviorParticleEmitter with specific identifier.
	 */
	static func ECBehaviorParticleEmitter getBehaviorIn(BehaviorElementClass eclass, String id)
		return eclass.findBehavior(block ECBehaviorParticleEmitter each
			return each.getID().equals(id)
		end) cast ECBehaviorParticleEmitter
	end
	
	/**
	 * \brief Get list of all behaviors in element.
	 * 
	 * Returns list contains ECBehaviorParticleEmitter behaviors in the order they have
	 * been created in the element.
	 */
	static func Array getAllBehaviorsIn(BehaviorElementClass eclass)
		return eclass.collectBehaviors(block ECBehaviorParticleEmitter each
			return true
		end)
	end
	
	
	
	/**
	 * \brief Get instance in element or \em null if absent.
	 * 
	 * Use this method to check if a particular BehaviorElement contains a behavior instance
	 * of type ECBehaviorParticleEmitter.Instance . If more than one instance is present returns
	 * the first instance.
	 */
	static func Instance getInstanceIn(BehaviorElement element)
		return element.findInstance(block Instance each
			return true
		end) cast Instance
	end
	
	/**
	 * \brief Get instance with id in element or \em null if absent.
	 * 
	 * Use this method to check if a particular BehaviorElement contains a behavior instance
	 * of type ECBehaviorParticleEmitter.Instance with specific identifier.
	 */
	static func Instance getInstanceIn(BehaviorElement element, String id)
		return element.findInstance(block Instance each
			return each.getECBehavior().getID().equals(id)
		end) cast Instance
	end
	
	/**
	 * \brief Get list of all instances in element.
	 * 
	 * Returns list contains ECBehaviorParticleEmitter.Instance instances in the order they have
	 * been created in the element.
	 */
	static func Array getAllInstancesIn(BehaviorElement element)
		return element.collectInstances(block Instance each
			return true
		end)
	end
	
	
	
	/** \brief Create Behavior instance. */
	func ECBehaviorInstance createInstance(BehaviorElement element)
		return Instance.new(this, element)
	end
end
