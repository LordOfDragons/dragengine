/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */


namespace Dragengine.Scenery

pin Dragengine.Gui
pin Dragengine.LoadSave
pin Dragengine.Preloading
pin Dragengine.Utils
pin Dragengine.TriggerSystem


/**
 * \brief Behavior element behavior adding day time sky support.
 * 
 * Updates day time controller of a day time supporting sky assigned to ECBehaviorSky.
 * To use add ECBehaviorSky and ECBehaviorDayTimeSky to behavior element then call
 * setDayTime() to adjust the day time to show.
 * 
 * This behavior can be present only once in the behavior element.
 * 
 * Element class properties have the prefix "dayTimeSky.".
 * 
 * This behavior supports persistable element class (setPersistable).
 * 
 * \see https://developer.dragondreams.ch/wiki/doku.php/dragengine:modules:dragonscript:behavior_daytimesky
 */
class ECBehaviorDayTimeSky extends DefaultECBehavior
	/**
	 * \brief Behavior factory.
	 * \version 1.25
	 * 
	 * Automatically assigns these behaviors if present before adding:
	 * - Required: \ref ECBehaviorSky
	 * 
	 * Example XML element class:
	 * \code{.xml}
	 * <behavior type='ECBehaviorDayTimeSky'/>
	 * \endcode
	 * 
	 * Element class properties added by the behavior can also be set directly inside the tag
	 * be removing the property name prefix and starting with a "." (for example ".propertyName").
	 */
	class Factory implements BehaviorFactory
		func new()
		end
		
		func String factoryId()
			return "ECBehaviorDayTimeSky"
		end
		
		func ECBehavior addBehavior(BehaviorElementClass eclass, String id, Dictionary parameters)
			if not id.empty()
				throw EInvalidParam.new("id is not empty string")
			end
			var ECBehaviorDayTimeSky behavior = ECBehaviorDayTimeSky.new(\
				eclass, ECBehaviorSky.getBehaviorIn(eclass))
			BehaviorElementClass.sharedFactoryHelper.setPropertiesFromParameters(\
				eclass, parameters, "dayTimeSky")
			return behavior
		end
	end
	
	/** \brief Behavior instance. */
	class Instance extends DefaultECBehaviorInstance
		private var ECBehaviorDayTimeSky pECBehavior
		private var SkyController pController
		private var ECBehaviorSky.Instance pSky
		
		
		/** \brief Create element. */
		public func new( ECBehaviorDayTimeSky ecbehavior, BehaviorElement element ) super( element )
			this.pECBehavior = ecbehavior
			this.pSky = ecbehavior.getSky().instance( element )
		end
		
		
		
		/** \brief Initialize element from stub. */
		public func void init( StubElement stub )
			var SkyInstance skyInstance = this.pSky.getSkyInstance()
			if skyInstance == null
				return
			end
			
			this.pController = skyInstance.getControllerNamed( \
				this.pECBehavior.getController().getValue( stub ) )
			
			this.setDayTime( this.pECBehavior.getDayTime().getValue( stub ) )
		end
		
		
		
		/** \brief Behavior. */
		public func ECBehaviorDayTimeSky getECBehavior()
			return this.pECBehavior
		end
		
		/** \brief ECBehaviorSky instance. */
		public func ECBehaviorSky.Instance getSky()
			return this.pSky
		end
		
		/** \brief Day time controller or null if not found. */
		public func SkyController getController()
			return this.pController
		end
		
		/** \brief Day time as hour of day in the range from 0 to 24. */
		public func float getDayTime()
			if this.pController != null
				return this.pController.getValue()
				
			else
				return 0
			end
		end
		
		/** \brief Set day time as hour of day in the range from 0 to 24. */
		public func void setDayTime( float time )
			if this.pController != null
				this.pController.setValue( time )
			end
		end
		
		
		
		/** \brief Read element from file. */
		public func void readFromFile( PersistencyEnvironment env, FileReader reader )
			select reader.readByte() // version
			case 0
				this.setDayTime( reader.readFloat() )
				
			else
				throw EInvalidParam.new( "unsupported version" )
			end
		end
		
		/** \brief Write element to file. */
		public func void writeToFile( PersistencyEnvironment env, FileWriter writer )
			writer.writeByte( 0 ) // version
			
			writer.writeFloat( this.getDayTime() )
		end
	end
	
	
	
	private var ECBehaviorSky pSky
	private var ECPString pController
	private var ECPFloat pDayTime
	
	
	
	/** \brief Create behavior element class. */
	public func new( BehaviorElementClass eclass, ECBehaviorSky sky ) \
	this( eclass, sky, "dayTimeSky." )
	end
	
	/** \brief Create behavior element class. */
	public func new( BehaviorElementClass eclass, ECBehaviorSky sky, String prefix ) super( eclass )
		if sky == null
			throw BERequiresBehaviorException.new( eclass, this, "ECBehaviorSky" )
		end
		
		this.pSky = sky
		
		this.pController = ECPString.new( prefix + "controllerDayTime", "daytime" )
		eclass.addProperty( this.pController )
		
		this.pDayTime = ECPFloat.new( prefix + "dayTime", 10, 0, 24 )
		eclass.addProperty( this.pDayTime )
		
		eclass.addBehavior( this )
	end
	
	
	
	/** \brief Sky behavior. */
	public func ECBehaviorSky getSky()
		return this.pSky
	end
	
	/** \brief Name of day time controller. */
	public func ECPString getController()
		return this.pController
	end
	
	/** \brief Day time as hour of day in the range from 0 to 24. */
	public func ECPFloat getDayTime()
		return this.pDayTime
	end
	
	
	
	/** \brief Get instance in element from owner element class. */
	public func Instance instance( BehaviorElement element )
		return element.getInstanceAt( this.getInstanceIndex() ) cast Instance
	end
	
	/**
	 * \brief Get behavior in element class or \em null if absent.
	 * 
	 * Use this method to check if a particular BehaviorElementClass contains a behavior
	 * of type ECBehaviorComponent.
	 */
	static public func ECBehaviorDayTimeSky getBehaviorIn( BehaviorElementClass eclass )
		return eclass.findBehavior( block ECBehaviorDayTimeSky each
			return true
		end ) cast ECBehaviorDayTimeSky
	end
	
	/**
	 * \brief Get instance in element or \em null if absent.
	 * 
	 * Use this method to check if a particular BehaviorElement contains a behavior instance
	 * of type ECBehaviorDayTimeSky.Instance .
	 */
	static public func Instance getInstanceIn( BehaviorElement element )
		return element.findInstance( block Instance each
			return true
		end ) cast Instance
	end
	
	
	
	/** \brief Create Behavior instance. */
	public func ECBehaviorInstance createInstance( BehaviorElement element )
		return Instance.new( this, element )
	end
end
