/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */


namespace Dragengine.Scenery

pin Dragengine.Gui
pin Dragengine.LoadSave
pin Dragengine.Preloading
pin Dragengine.Utils
pin Dragengine.TriggerSystem
pin Dragengine.BehaviorTreeSystem


/**
 * \brief Behavior element behavior adding day time sky support.
 * 
 * Updates day time controller of a day time supporting sky assigned to ECBehaviorSky.
 * To use add ECBehaviorSky and ECBehaviorDayTimeSky to behavior element then call
 * setDayTime() to adjust the day time to show.
 * 
 * This behavior can be present only once in the behavior element.
 * 
 * Element class properties have the prefix "dayTimeSky.".
 * 
 * This behavior supports persistable element class (setPersistable).
 * 
 * \see https://developer.dragondreams.ch/wiki/doku.php/dragengine:modules:dragonscript:behavior_daytimesky
 */
class ECBehaviorDayTimeSky extends DefaultECBehavior
	/**
	 * \brief Behavior factory.
	 * \version 1.25
	 * 
	 * Automatically assigns these behaviors if present before adding:
	 * - Required: \ref ECBehaviorSky
	 * 
	 * Example XML element class:
	 * \code{.xml}
	 * <behavior type='ECBehaviorDayTimeSky'>
	 *   <!-- optional: use behavior tree with id instead of empty string -->
	 *   <string name='behaviorTree'>second</string>
	 * </behavior>
	 * \endcode
	 * 
	 * Element class properties added by the behavior can also be set directly inside the tag
	 * be removing the property name prefix and starting with a "." (for example ".propertyName").
	 */
	class Factory implements BehaviorFactory
		func new()
		end
		
		func String factoryId()
			return "ECBehaviorDayTimeSky"
		end
		
		func ECBehavior addBehavior(BehaviorElementClass eclass, String id, Dictionary parameters)
			if not id.empty()
				throw EInvalidParam.new("id is not empty string")
			end
			var ECBehaviorDayTimeSky behavior = ECBehaviorDayTimeSky.new(\
				eclass, ECBehaviorSky.getBehaviorIn(eclass))
			
			behavior.setBehaviorTree(eclass.sharedFactoryHelper.optionalBehaviorTree(eclass, parameters))
			
			eclass.sharedFactoryHelper.setPropertiesFromParameters(eclass, parameters, "dayTimeSky")
			return behavior
		end
	end
	
	/** \brief Behavior instance. */
	class Instance extends DefaultECBehaviorInstance
		/**
		 * \brief Behavior tree action "dayTimeSky.set".
		 * \version 1.26
		 */
		class BTASet implements BTAction
			var Instance pInstance
			
			func new(Instance instance)
				pInstance = instance
			end
			
			func BTResult runAction(BTContext context, Dictionary parameters)
				var Object value
				
				value = parameters.getAt("time", null)
				if value != null
					pInstance.setDayTime((value cast String).toFloat())
				end
				
				return BTResult.success
			end
		end
		
		/**
		 * \brief Behavior tree action/condition "dayTimeSky.check".
		 * \version 1.26
		 */
		class BTACheck implements BTAction, BTCondition
			var Instance pInstance
			var String pPrefix
			
			func new(Instance instance, String prefix)
				pInstance = instance
				pPrefix = prefix
			end
			
			func BTResult runAction(BTContext context, Dictionary parameters)
				return check("", parameters) if BTResult.success else BTResult.failure
			end
			
			func bool evaluateCondition(BTContext context, Dictionary parameters)
				return check(pPrefix, parameters)
			end
			
			func bool check(String prefix, Dictionary parameters)
				var bool result = true
				var Object value
				
				value = parameters.getAt(prefix + "time.less", null)
				if value != null
					result &= pInstance.getDayTime() < (value cast String).toFloat()
				end
				
				value = parameters.getAt(prefix + "time.greater", null)
				if value != null
					result &= pInstance.getDayTime() > (value cast String).toFloat()
				end
				
				return result
			end
		end
		
		var ECBehaviorDayTimeSky pECBehavior
		var SkyController pController
		var ECBehaviorSky.Instance pSky
		
		
		/** \brief Create element. */
		func new(ECBehaviorDayTimeSky ecbehavior, BehaviorElement element) super(element)
			pECBehavior = ecbehavior
			pSky = ecbehavior.getSky().instance(element)
		end
		
		
		
		/** \brief Initialize element from stub. */
		func void init(StubElement stub)
			var SkyInstance skyInstance = pSky.getSkyInstance()
			if skyInstance == null
				return
			end
			
			pController = skyInstance.getControllerNamed(pECBehavior.getController().getValue(stub))
			
			setDayTime(pECBehavior.getDayTime().getValue(stub))
			
			if pECBehavior.getBehaviorTree() != null
				var String pnp = pECBehavior.getPrefix()
				var BTContext c = pECBehavior.getBehaviorTree().instance(getElement()).getContext()
				c.setAction(pnp + "set", BTASet.new(this))
				
				var String name = pnp + "check"
				var BTACheck btacheck = BTACheck.new(this, pnp)
				c.setAction(name, btacheck)
				c.setCondition(name, btacheck)
			end
		end
		
		
		
		/** \brief Behavior. */
		func ECBehaviorDayTimeSky getECBehavior()
			return pECBehavior
		end
		
		/** \brief ECBehaviorSky instance. */
		func ECBehaviorSky.Instance getSky()
			return pSky
		end
		
		/** \brief Day time controller or null if not found. */
		func SkyController getController()
			return pController
		end
		
		/** \brief Day time as hour of day in the range from 0 to 24. */
		func float getDayTime()
			if pController != null
				return pController.getValue()
				
			else
				return 0
			end
		end
		
		/** \brief Set day time as hour of day in the range from 0 to 24. */
		func void setDayTime(float time)
			if pController != null
				pController.setValue(time)
			end
		end
		
		
		
		/** \brief Read element from file. */
		func void readFromFile(PersistencyEnvironment env, FileReader reader)
			select reader.readByte() // version
			case 0
				setDayTime(reader.readFloat())
				
			else
				throw EInvalidParam.new("unsupported version")
			end
		end
		
		/** \brief Write element to file. */
		func void writeToFile(PersistencyEnvironment env, FileWriter writer)
			writer.writeByte(0) // version
			
			writer.writeFloat(getDayTime())
		end
	end
	
	
	
	var ECBehaviorSky pSky
	var ECPString pController
	var ECPFloat pDayTime
	var ECBehaviorBehaviorTree pBehaviorTree
	var String pPrefix
	
	
	
	/** \brief Create behavior element class. */
	func new(BehaviorElementClass eclass, ECBehaviorSky sky) this(eclass, sky, "dayTimeSky.")
	end
	
	/** \brief Create behavior element class. */
	func new(BehaviorElementClass eclass, ECBehaviorSky sky, String prefix) super(eclass)
		if sky == null
			throw BERequiresBehaviorException.new(eclass, this, "ECBehaviorSky")
		end
		
		pPrefix = prefix
		pSky = sky
		
		pController = ECPString.new(prefix + "controllerDayTime", "daytime")
		eclass.addProperty(pController)
		
		pDayTime = ECPFloat.new(prefix + "dayTime", 10, 0, 24)
		eclass.addProperty(pDayTime)
		
		eclass.addBehavior(this)
	end
	
	/** \brief Dispose of behavior. */
	func void dispose()
		pBehaviorTree = null
		super.dispose()
	end
	
	
	
	/**
	 * \brief Prefix.
	 * \version 1.26
	 */
	func String getPrefix()
		return pPrefix
	end
	
	/** \brief Sky behavior. */
	func ECBehaviorSky getSky()
		return pSky
	end
	
	/** \brief Name of day time controller. */
	func ECPString getController()
		return pController
	end
	
	/** \brief Day time as hour of day in the range from 0 to 24. */
	func ECPFloat getDayTime()
		return pDayTime
	end
	
	/**
	 * \brief Behavior tree or null.
	 * \version 1.26
	 */
	func ECBehaviorBehaviorTree getBehaviorTree()
		return pBehaviorTree
	end
	
	/**
	 * \brief Set behavior tree or null.
	 * \version 1.26
	 */
	func void setBehaviorTree(ECBehaviorBehaviorTree behaviorTree)
		pBehaviorTree = behaviorTree
	end
	
	
	
	/** \brief Get instance in element from owner element class. */
	func Instance instance(BehaviorElement element)
		return element.getInstanceAt(getInstanceIndex()) cast Instance
	end
	
	/**
	 * \brief Get behavior in element class or \em null if absent.
	 * 
	 * Use this method to check if a particular BehaviorElementClass contains a behavior
	 * of type ECBehaviorComponent.
	 */
	static func ECBehaviorDayTimeSky getBehaviorIn(BehaviorElementClass eclass)
		return eclass.findBehavior(block ECBehaviorDayTimeSky each
			return true
		end) cast ECBehaviorDayTimeSky
	end
	
	/**
	 * \brief Get instance in element or \em null if absent.
	 * 
	 * Use this method to check if a particular BehaviorElement contains a behavior instance
	 * of type ECBehaviorDayTimeSky.Instance .
	 */
	static func Instance getInstanceIn(BehaviorElement element)
		return element.findInstance(block Instance each
			return true
		end) cast Instance
	end
	
	
	
	/** \brief Create Behavior instance. */
	func ECBehaviorInstance createInstance(BehaviorElement element)
		return Instance.new(this, element)
	end
end
