/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */


namespace Dragengine.Scenery

pin Dragengine.Gui
pin Dragengine.LoadSave
pin Dragengine.Preloading
pin Dragengine.Utils
pin Dragengine.TriggerSystem


/**
 * \brief Behavior element behavior adding sky support.
 * 
 * Adds a SkyInstance resources to the world with support to mainpulate controllers.
 * If a playback controller is set it is updated with the elapsed time. Other behaviors
 * can update individual named controllers to add special effects.
 * 
 * Multiple skies can be added to a game world by different elements. In this case the
 * graphic module concatenates them as if one single sky is used. This allows to split
 * skies into multiple sky instances to add individual effects easily. To ensure the
 * correct drawing order each sky is required to have a unique order value. Higher
 * order values are rendered ontop of lower order values.
 * 
 * This behavior can be present only once in the behavior element.
 * 
 * Element class properties have the prefix "sky.".
 * 
 * This behavior supports persistable element class (setPersistable).
 */
class ECBehaviorSky extends DefaultECBehavior
	/**
	 * \brief Behavior factory.
	 * \ref 1.25
	 * 
	 * Automatically assigns these behaviors if present before adding:
	 * - Optional: \ref ECBehaviorCollider
	 * 
	 * Example XML element class:
	 * \code{.xml}
	 * <behavior type='ECBehaviorSky'>
	 *   <!-- optional: set layer mask (default empty). list of bits to set. -->
	 *   <string name='layerMask'>0 1 4</string>
	 * </behavior>
	 * \endcode
	 * 
	 * Element class properties added by the behavior can also be set directly inside the tag
	 * be removing the property name prefix and starting with a "." (for exampler ".propertyName").
	 */
	class Factory implements BehaviorFactory
		func new()
		end
		
		func String factoryId()
			return "ECBehaviorSky"
		end
		
		func ECBehavior addBehavior(BehaviorElementClass eclass, String id, Dictionary parameters)
			if not id.empty()
				throw EInvalidParam.new("id is not empty string")
			end
			var ECBehaviorSky behavior = ECBehaviorSky.new(eclass)
			
			if parameters.has("layerMask")
				behavior.setLayerMask(ElementClass.getSharedCodecPropertyString().\
					decodeLayerMask(parameters.getAt("layerMask") cast String))
			end
			
			BehaviorElementClass.sharedFactoryHelper.setPropertiesFromParameters(\
				eclass, parameters, "sky")
			return behavior
		end
	end
	
	/** \brief Behavior instance. */
	class Instance extends DefaultECBehaviorInstance
		var ECBehaviorSky pECBehavior
		var SkyInstance pSkyInstance
		var SkyController pControllerPlayback
		
		
		
		/** \brief Create element. */
		func new(ECBehaviorSky ecbehavior, BehaviorElement element) super(element)
			pECBehavior = ecbehavior
		end
		
		
		
		/** \brief Initialize element from stub. */
		func void init(StubElement stub)
			var Sky sky = pECBehavior.getSky().getSky(stub, getElement().getClass())
			if sky == null
				return
			end
			
			pSkyInstance = SkyInstance.new()
			pSkyInstance.setSky(sky)
			pSkyInstance.setOrder(pECBehavior.getOrder().getValue(stub))
			pSkyInstance.setLayerMask(pECBehavior.getLayerMask())
			
			var String name = pECBehavior.getControllerPlayback().getValue(stub)
			if not name.empty()
				pControllerPlayback = pSkyInstance.getControllerNamed(name)
			end
			
			setRequiresThink(pControllerPlayback != null)
		end
		
		
		
		/** \brief Behavior. */
		func ECBehaviorSky getECBehavior()
			return pECBehavior
		end
		
		/** \brief Sky instance. */
		func SkyInstance getSkyInstance()
			return pSkyInstance
		end
		
		/** \brief Playback controller or null if not used. */
		func SkyController getControllerPlayback()
			return pControllerPlayback
		end
		
		/** \brief Playback time. */
		func float getPlaybackTime()
			if pControllerPlayback != null
				return pControllerPlayback.getValue()
				
			else
				return 0
			end
		end
		
		/** \brief Set playback time. */
		func void setPlaybackTime(float time)
			if pControllerPlayback != null
				pControllerPlayback.setValue(time)
			end
		end
		
		
		
		/** \brief Add element to game world. */
		func void addToGameWorld()
			if pSkyInstance != null
				getElement().getGameWorld().getWorld().addSky(pSkyInstance)
			end
		end
		
		/** \brief Remove element from game world. */
		func void removeFromGameWorld()
			if pSkyInstance != null
				getElement().getGameWorld().getWorld().removeSky(pSkyInstance)
			end
		end
		
		/** \brief Think about what to do for the next frame update. */
		func void think(float elapsed)
			if pControllerPlayback == null
				pControllerPlayback.increment(elapsed)
			end
		end
		
		
		
		/** \brief Read element from file. */
		func void readFromFile(PersistencyEnvironment env, FileReader reader)
			select reader.readByte() // version
			case 0
				setPlaybackTime(reader.readFloat())
				
			else
				throw EInvalidParam.new("unsupported version")
			end
		end
		
		/** \brief Write element to file. */
		func void writeToFile(PersistencyEnvironment env, FileWriter writer)
			writer.writeByte(0) // version
			
			writer.writeFloat(getPlaybackTime())
		end
	end
	
	
	
	var ECPSky pSky
	var ECPInteger pOrder
	var ECPString pControllerPlayback
	var LayerMask pLayerMask
	
	
	
	/** \brief Create behavior element class. */
	func new(BehaviorElementClass eclass) this(eclass, BaseGameApp.getApp().getLoaders())
	end
	
	/** \brief Create behavior element class. */
	func new(BehaviorElementClass eclass, String prefix) \
	this(eclass, BaseGameApp.getApp().getLoaders(), prefix)
	end
	
	/** \brief Create behavior element class. */
	func new(BehaviorElementClass eclass, Loaders loaders) this(eclass, loaders, "sky.")
	end
	
	/** \brief Create behavior element class. */
	func new(BehaviorElementClass eclass, Loaders loaders, String prefix) super(eclass)
		pLayerMask = LayerMask.new()
		
		pSky = ECPSky.new(prefix + "path", loaders.getSky())
		eclass.addProperty(pSky)
		
		pOrder = ECPInteger.new(prefix + "order", 0)
		eclass.addProperty(pOrder)
		
		pControllerPlayback = ECPString.new(prefix + "controllerPlayback", "")
		eclass.addProperty(pControllerPlayback)
		
		eclass.addBehavior(this)
	end
	
	
	
	/** \brief Sky resource. */
	func ECPSky getSky()
		return pSky
	end
	
	/** \brief Order. */
	func ECPInteger getOrder()
		return pOrder
	end
	
	/** \brief Name of playback controller or empty string if not used. */
	func ECPString getControllerPlayback()
		return pControllerPlayback
	end
	
	/** \brief Layer mask. */
	func LayerMask getLayerMask()
		return pLayerMask
	end
	
	/** \brief Set layer mask. */
	func void setLayerMask(LayerMask layerMask)
		if layerMask == null
			throw EInvalidParam.new()
		end
		pLayerMask = layerMask
	end
	
	
	
	/** \brief Get instance in element from owner element class. */
	func Instance instance(BehaviorElement element)
		return element.getInstanceAt(getInstanceIndex()) cast Instance
	end
	
	/**
	 * \brief Get behavior in element class or \em null if absent.
	 * 
	 * Use this method to check if a particular BehaviorElementClass contains a behavior
	 * of type ECBehaviorComponent.
	 */
	static func ECBehaviorSky getBehaviorIn(BehaviorElementClass eclass)
		return eclass.findBehavior(block ECBehaviorSky each
			return true
		end) cast ECBehaviorSky
	end
	
	/**
	 * \brief Get instance in element or \em null if absent.
	 * 
	 * Use this method to check if a particular BehaviorElement contains a behavior instance
	 * of type ECBehaviorSky.Instance .
	 */
	static func Instance getInstanceIn(BehaviorElement element)
		return element.findInstance(block Instance each
			return true
		end) cast Instance
	end
	
	
	
	/** \brief Create Behavior instance. */
	func ECBehaviorInstance createInstance(BehaviorElement element)
		return Instance.new(this, element)
	end
end
