/* 
 * Drag[en]gine DragonScript Script Module
 *
 * Copyright (C) 2020, Roland Pl√ºss (roland@rptd.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */


namespace Dragengine.Scenery

pin Dragengine.Gui
pin Dragengine.LoadSave
pin Dragengine.Preloading
pin Dragengine.Utils


/**
 * \brief Behavior element behavior adding environment map probe support.
 * 
 * Attaches an EnvMapProbe resource to the behavior element.
 * 
 * If the \em ECBehaviorCollider behavior is present in the behavior element the
 * EnvMapProbe is attached to the collider.
 * 
 * Element class properties have the prefix "envMapProbe{(identifier)}.".
 * 
 * This behavior does require the element class to be persistable (setPersistable).
 */
class ECBehaviorEnvMapProbe extends DefaultECBehavior
	/** \brief Behavior instance. */
	class Instance extends DefaultECBehaviorInstance
		private var ECBehaviorEnvMapProbe pECBehavior
		private var ECBehaviorCollider.Instance pCollider
		private var EnvMapProbe pEnvMapProbe
		
		
		
		/** \brief Create element. */
		public func new( ECBehaviorEnvMapProbe ecbehavior, BehaviorElement element ) super( element )
			this.pECBehavior = ecbehavior
		end
		
		/** \brief Dispose of behavior instance. */
		public func void dispose()
			this.pCollider = null
			super.dispose()
		end
		
		
		
		/** \brief Initialize element from stub. */
		public func void init( StubElement stub )
			if this.pECBehavior.getCollider() != null
				this.pCollider = this.pECBehavior.getCollider().instance( this.getElement() )
			end
			
			this.pEnvMapProbe = this.createEnvMapProbe( stub )
			
			if this.pCollider != null and this.pCollider.getCollider() != null
				this.attachEnvMapProbe( stub, this.pCollider )
			end
		end
		
		/**
		 * \brief Create environment map probe.
		 * 
		 * Default implementation calls ECComposeEnvMapProbe.createEnvMapProbe().
		 */
		protected func EnvMapProbe createEnvMapProbe( StubElement stub )
			return this.pECBehavior.getEnvMapProbe().createEnvMapProbe( this.getElement(), stub )
		end
		
		/**
		 * \brief Attach environment map probe to collider.
		 * 
		 * Default implementation calls ECComposeAttachResource.attach().
		 */
		protected func void attachEnvMapProbe( StubElement stub, ECBehaviorCollider.Instance collider )
			this.pECBehavior.getAttach().attach( collider.getCollider(), this.pEnvMapProbe, stub )
		end
		
		
		
		/** \brief Behavior. */
		public func ECBehaviorEnvMapProbe getECBehavior()
			return this.pECBehavior
		end
		
		/** \brief Collider behavior or null if not attached. */
		public func ECBehaviorCollider.Instance getCollider()
			return this.pCollider
		end
		
		/** \brief Environment map probe. */
		public func EnvMapProbe getEnvMapProbe()
			return this.pEnvMapProbe
		end
		
		
		
		/** \brief Add element to game world. */
		public func void addToGameWorld()
			this.getElement().getGameWorld().getWorld().addEnvMapProbe( this.pEnvMapProbe )
		end
		
		/** \brief Remove element from game world. */
		public func void removeFromGameWorld()
			this.getElement().getGameWorld().getWorld().removeEnvMapProbe( this.pEnvMapProbe )
		end
	end
	
	
	
	private var ECBehaviorCollider pCollider
	private var ECComposeEnvMapProbe pEnvMapProbe
	private var ECComposeAttachResource pAttach
	
	
	
	/**
	 * \brief Create behavior element class.
	 * 
	 * These values are optional and can be null: \em collider.
	 */
	public func new( BehaviorElementClass eclass, ECBehaviorCollider collider ) \
	this( eclass, collider, "" )
	end
	
	public func new( BehaviorElementClass eclass, ECBehaviorCollider collider, String id ) \
	this( eclass, collider, id, id.empty() if "envMapProbe." else "envMapProbe(" + id + ")." )
	end
	
	public func new( BehaviorElementClass eclass, ECBehaviorCollider collider, \
	String id, String prefix ) super( eclass, id )
		this.pCollider = collider
		
		this.pEnvMapProbe = ECComposeEnvMapProbe.new( eclass, prefix )
		this.pAttach = ECComposeAttachResource.new( eclass, prefix )
		
		eclass.addBehavior( this )
	end
	
	/** \brief Dispose of behavior. */
	public func void dispose()
		this.pCollider = null
		super.dispose()
	end
	
	
	
	/** \brief Collider behavior or null to not attach. */
	public func ECBehaviorCollider getCollider()
		return this.pCollider
	end
	
	/** \brief Environment map probe. */
	public func ECComposeEnvMapProbe getEnvMapProbe()
		return this.pEnvMapProbe
	end
	
	/** \brief Attach resource. */
	public func ECComposeAttachResource getAttach()
		return this.pAttach
	end
	
	
	
	/** \brief Get instance in element from owner element class. */
	public func Instance instance( BehaviorElement element )
		return element.getInstanceAt( this.getInstanceIndex() ) cast Instance
	end
	
	
	
	/**
	 * \brief Get behavior in element class or \em null if absent.
	 * 
	 * Use this method to check if a particular BehaviorElementClass contains a behavior
	 * of type ECBehaviorCollider.
	 */
	static public func ECBehaviorEnvMapProbe getBehaviorIn( BehaviorElementClass eclass )
		return eclass.findBehavior( block ECBehaviorEnvMapProbe each
			return true
		end ) cast ECBehaviorEnvMapProbe
	end
	
	/**
	 * \brief Get behavior with id in element class or \em null if absent.
	 * 
	 * Use this method to check if a particular BehaviorElementClass contains a behavior
	 * of type ECBehaviorEnvMapProbe with specific identifier.
	 */
	static public func ECBehaviorEnvMapProbe getBehaviorIn( BehaviorElementClass eclass, String id )
		return eclass.findBehavior( block ECBehaviorEnvMapProbe each
			return each.getID().equals( id )
		end ) cast ECBehaviorEnvMapProbe
	end
	
	/**
	 * \brief Get list of all behaviors in element.
	 * 
	 * Returns list contains ECBehaviorEnvMapProbe behaviors in the order they have
	 * been created in the element.
	 */
	static public func Array getAllBehaviorsIn( BehaviorElementClass eclass )
		return eclass.collectBehaviors( block ECBehaviorEnvMapProbe each
			return true
		end )
	end
	
	
	
	/**
	 * \brief Get instance in element or \em null if absent.
	 * 
	 * Use this method to check if a particular BehaviorElement contains a behavior instance
	 * of type ECBehaviorEnvMapProbe.Instance . If more than one instance is present returns
	 * the first instance.
	 */
	static public func Instance getInstanceIn( BehaviorElement element )
		return element.findInstance( block Instance each
			return true
		end ) cast Instance
	end
	
	/**
	 * \brief Get instance with id in element or \em null if absent.
	 * 
	 * Use this method to check if a particular BehaviorElement contains a behavior instance
	 * of type ECBehaviorEnvMapProbe.Instance with specific identifier.
	 */
	static public func Instance getInstanceIn( BehaviorElement element, String id )
		return element.findInstance( block Instance each
			return each.getECBehavior().getID().equals( id )
		end ) cast Instance
	end
	
	/**
	 * \brief Get list of all instances in element.
	 * 
	 * Returns list contains ECBehaviorEnvMapProbe.Instance instances in the order they have
	 * been created in the element.
	 */
	static public func Array getAllInstancesIn( BehaviorElement element )
		return element.collectInstances( block Instance each
			return true
		end )
	end
	
	
	
	/** \brief Create Behavior instance. */
	public func ECBehaviorInstance createInstance( BehaviorElement element )
		return Instance.new( this, element )
	end
end
