/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */


namespace Dragengine.Scenery

pin Dragengine.Gui
pin Dragengine.LoadSave
pin Dragengine.Preloading
pin Dragengine.Utils
pin Dragengine.TriggerSystem


/**
 * \brief Behavior element behavior adding force field support.
 * 
 * Behavior adds a ForceField resource to the the behavior element. This behavior can be added
 * multiple times to an element. Each instance creates one force field attached to the element
 * collider which can be individually modified. To distinguish the force fields each instance
 * has an identifier which can be used to retrieve a specific instance. The prefix of the
 * force field class properties is "forceField." . If the identifier is not empty the force field
 * element class properties have the prefix "{id}.forceField.". This can be overwritten if required.
 * Hence to use more than one force field use code like this in your subclass constructor:
 * 
 * \code{.ds}
 * class MyElement extends BehaviorElementClass
 *    func new()
 *       ECBehaviorForceField.new(this)
 *       ECBehaviorForceField.new(this, "subForceField")
 *    end
 * end
 * \endcode
 * 
 * You can now define the parameters to use for both force fields using for example the properties
 * "color" for the first force field and "subForceField.color" for the second forceField.
 * 
 * It is recommended to always specify an identifier even if only one force field is used.
 * This avoids potentially name conflicts especially if other behaviors are added attaching
 * other resources too.
 * 
 * If the \em ECBehaviorCollider behavior is present in the behavior element before this
 * behavior is added the force field is attached. The force field is attached to the named bone if
 * defined otherwise it is attached statically.
 * 
 * Element class properties have the prefix "forceField{(id)}.".
 * 
 * 
 * 
 * \par Listening and Customized ForceField Handling
 * 
 * The owner element class and other behaviors can register a listener to be notified if the
 * force field is (de)enabled. This can be used to provide customized force field handling
 * support for example flickering or dimmable force fields.
 * 
 * If another behaviors wants to control the force field parameters in response to these events
 * it should call setCustomForceFieldHandling(true). In this case the behavior implementing the
 * force field parameter handling has to use requiresThink() to think while the effect lasts.
 * 
 * 
 * 
 * \par Owner Element Visibility
 * 
 * The enabled state of the force field is linked with the visibility state of the owner
 * element. If the owner element becomes invisible the force field resource is always disabled.
 * If the owner element becomes visible the force field resource is enabled if the behavior is
 * enabled too.
 * 
 * If custom force field handling is used the behavior resposible for the custom force field handling is
 * required to listen to stateChanged() calls and act accordingly. The force field resource will be
 * always enabled no matter if the custom force field handling is enabled or not. Only if the
 * behavior is (de)enabled or the element becomes visible the force field parameters are not
 * modified if custom force field handling is enabled.
 * 
 * This behavior does support element class to be persistable (setPersistable).
 * 
 * \see https://developer.dragondreams.ch/wiki/doku.php/dragengine:modules:dragonscript:behavior_forcefield
 */
class ECBehaviorForceField extends DefaultECBehavior
	/** \brief Listener for behavior instance events. */
	interface Listener
		/** \brief Force field has been enabled. */
		func void forceFieldEnabled(Instance instance)
		
		/** \brief Force field has been disabled. */
		func void forceFieldDisabled(Instance instance)
		
		/** \brief Force field parameters have been changed. */
		func void forceFieldParametersChanged(Instance instance)
	end
	
	/** \brief Default implementation of behavior instance listener. */
	class DefaultListener implements Listener
		/** \brief Create default listener. */
		func new()
		end
		
		/** \brief ForceField has been enabled. */
		func void forceFieldEnabled(Instance instance)
		end
		
		/** \brief ForceField has been disabled. */
		func void forceFieldDisabled(Instance instance)
		end
		
		/** \brief ForceField parameters have been changed. */
		func void forceFieldParametersChanged(Instance instance)
		end
	end
	
	/** \brief Factory creating listeners. */
	interface ListenerFactory
		/** \brief Create listener. */
		func Listener createListener(Instance instance)
	end
	
	/** \brief Factory creating listeners using block. */
	class BlockListenerFactory implements ListenerFactory
		var Block pBlock
		
		/** \brief Create factory using block receiving Instance as parameter returning Listener. */
		func new(Block blockFactory)
			if blockFactory == null
				throw ENullPointer.new()
			end
			pBlock = blockFactory
		end
		
		/** \brief Create listener. */
		func Listener createListener(Instance instance)
			return pBlock.run(instance) cast Listener
		end
	end
	
	/**
	 * \brief Behavior factory.
	 * \version 1.25
	 * 
	 * Automatically assigns these behaviors if present before adding:
	 * - Optional: \ref ECBehaviorCollider
	 * 
	 * Example XML element class:
	 * \code{.xml}
	 * <behavior type='ECBehaviorForceField'>
	 *   <!-- optional: set collision filter. default value '6:0 1 2 3 5' which means
	 *                  category BaseGameApp.CollisionFilterBit.forceField
	 *                  filter BaseGameApp.CollisionFilterBit.geometry,
	 *                         BaseGameApp.CollisionFilterBit.dynamic,
	 *                         BaseGameApp.CollisionFilterBit.actor,
	 *                         BaseGameApp.CollisionFilterBit.actorAI,
	 *                         BaseGameApp.CollisionFilterBit.particle.
	 *                  format is '', 'category' or 'category:filter' where category and filter
	 *                  are a list of bits to set. -->
	 *   <string name='collisionFilter'>6:0 1 2 3 5</string>
	 * 
	 *   <!-- optional: use BaseGameApp trigger table. game can add more
	 *                  supported values. default value is 'default' -->
	 *   <string name='triggerTable'>default</string>
	 * 
	 *   <!-- optional: sync trigger with force field matching identifier -->
	 *   <string name='syncTrigger'>second</string>
	 *   
	 *   <!-- optional: identifier of ECBehaviorTriggered to synchronize with or empty
	 *                  string to not synchronize. default is empty string. -->
	 *   <string name='trigger.synchronize'>other</string>
	 * </behavior>
	 * 
	 * <!-- for adding multiple behaviors use unique identifiers -->
	 * <behavior type='ECBehaviorForceField' id='second'>
	 *   ...
	 * </behavior>
	 * \endcode
	 * 
	 * Element class properties added by the behavior can also be set directly inside the tag
	 * be removing the property name prefix and starting with a "." (for exampler ".propertyName").
	 */
	class Factory implements BehaviorFactory
		func new()
		end
		
		func String factoryId()
			return "ECBehaviorForceField"
		end
		
		func ECBehavior addBehavior(BehaviorElementClass eclass, String id, Dictionary parameters)
			var ECBehaviorForceField behavior = ECBehaviorForceField.new(eclass,\
				ECBehaviorCollider.getBehaviorIn(eclass),\
				getTriggerTableFor(parameters.getAt("triggerTable", "default") cast String), id)
			
			if parameters.has("collisionFilter")
				behavior.getForceField().setCollisionFilter(ElementClass.getSharedCodecPropertyString().\
					decodeCollisionFilter(parameters.getAt("collisionFilter") cast String))
			end
			
			if parameters.has("syncTrigger")
				var String bid = parameters.getAt("syncTrigger") cast String
				if bid != null
					behavior.setSyncTrigger(ECBehaviorForceField.getBehaviorIn(eclass, bid))
				end
			end
			
			behavior.getTrigger().setSynchronize(eclass,\
				parameters.getAt("trigger.synchronize", null) cast String)
			
			BehaviorElementClass.sharedFactoryHelper.setPropertiesFromParameters(\
				eclass, parameters, "forceField", id)
			return behavior
		end
		
		/**
		 * \brief Trigger table matching value.
		 * 
		 * Default implementation returns \ref BaseGameApp#getTriggerTable() for value 'default'
		 * and null for all other values. Overwrite to accept other values.
		 */
		func TSTriggerTable getTriggerTableFor(String value)
			return BehaviorElementClass.sharedFactoryHelper.triggerTable(value)
		end
	end
	
	/** \brief Behavior instance. */
	class Instance extends DefaultECBehaviorInstance
		/** \brief Trigger listener to enable forceField. */
		public class ActivateListener extends ECBehaviorTriggered.DefaultListener
			var Instance pInstance
			
			func new(Instance instance)
				pInstance = instance
			end
			
			func void triggerExpressionTrue(ECBehaviorTriggered.Instance instance)
				pInstance.setEnabled(true)
			end
			
			func void triggerExpressionFalse(ECBehaviorTriggered.Instance instance)
				pInstance.setEnabled(false)
			end
		end
		
		var ECBehaviorForceField pECBehavior
		var ECBehaviorCollider.Instance pCollider
		var bool pEnabled
		var ForceField pForceField
		var ECBehaviorTriggered.Instance pTrigger
		var Array pListeners
		var bool pCustomForceFieldHandling
		
		
		
		/** \brief Create element. */
		func new(ECBehaviorForceField ecbehavior, BehaviorElement element) super(element)
			pECBehavior = ecbehavior
			pEnabled = true
			pCustomForceFieldHandling = false
			pListeners = Array.new()
		end
		
		/** \brief Dispose of behavior instance. */
		func void dispose()
			pTrigger = null
			pCollider = null
			pListeners = null
			super.dispose()
		end
		
		
		
		/** \brief Initialize element from stub. */
		func void init(StubElement stub)
			if pECBehavior.getCollider() != null
				pCollider = pECBehavior.getCollider().instance(getElement())
			end
			
			pForceField = createForceField(stub)
			if pForceField == null
				return
			end
			
			pECBehavior.createListeners(this)
			
			if pECBehavior.getTriggerTable() != null
				pTrigger = getTriggerBehavior()
				pTrigger.addListener(ActivateListener.new(this))
			end
			
			if pTrigger != null and pTrigger.getTriggerExpression() != null
				// required because of createForceField()
				pForceField.setEnabled(false)
				pEnabled = false
				
			else
				setEnabled(pForceField.getEnabled())
			end
			
			if pCollider != null and pCollider.getCollider() != null
				attachForceField(stub, pCollider)
			end
		end
		
		/**
		 * \brief Create forceField.
		 * 
		 * Default implementation calls ECComposeForceField.createForceField().
		 */
		protected func ForceField createForceField(StubElement stub)
			return pECBehavior.getForceField().createForceField(getElement(), stub)
		end
		
		/**
		 * \brief Get enable trigger behavior.
		 * 
		 * Default implementation uses owner class trigger behavior. If getSyncTrigger()
		 * of parent ECBehaviorForceField is not null uses referenced behavior trigger behavior.
		 */
		protected func ECBehaviorTriggered.Instance getTriggerBehavior()
			var ECBehaviorForceField behavior = pECBehavior.getSyncTrigger()
			var BehaviorElement element = getElement()
			
			if behavior != null
				return behavior.instance(element).getTrigger()
				
			else
				return pECBehavior.getTrigger().synchronizedOrSelf().instance(element)
			end
		end
		
		/**
		 * \brief Attach force field to collider.
		 * 
		 * Default implementation calls ECComposeAttachResource.attach().
		 */
		protected func void attachForceField(StubElement stub, ECBehaviorCollider.Instance collider)
			pECBehavior.getAttach().attach(collider.getCollider(), pForceField, stub)
		end
		
		
		
		/** \brief Behavior. */
		func ECBehaviorForceField getECBehavior()
			return pECBehavior
		end
		
		/** \brief Collider behavior or null if not attached. */
		func ECBehaviorCollider.Instance getCollider()
			return pCollider
		end
		
		/** \brief Trigger enable or \em null. */
		func ECBehaviorTriggered.Instance getTrigger()
			return pTrigger
		end
		
		/** \brief Force field. */
		func ForceField getForceField()
			return pForceField
		end
		
		
		
		/** \brief Force field is enabled. */
		func bool getEnabled()
			return pEnabled
		end
		
		/** \brief Set if force field is enabled. */
		func void setEnabled(bool enabled)
			if enabled == pEnabled
				return
			end
			
			pEnabled = enabled
			
			if not pCustomForceFieldHandling
				pForceField.setEnabled(enabled and getElement().getVisible())
			end
			
			if enabled
				pListeners.forEach(block Listener each
					each.forceFieldEnabled(this)
				end)
				
			else
				pListeners.forEach(block Listener each
					each.forceFieldDisabled(this)
				end)
			end
		end
		
		/** \brief Toggle force field enabled state. */
		func void toggle()
			setEnabled(not pEnabled)
		end
		
		
		
		/** \brief Force field parameters are handled by another behavior. */
		func bool getCustomForceFieldHandling()
			return pCustomForceFieldHandling
		end
		
		/** \brief Set if force field parameters are handled by another behavior. */
		func void setCustomForceFieldHandling(bool customForceFieldHandling)
			pCustomForceFieldHandling = customForceFieldHandling
		end
		
		/**
		 * \brief Notify listeners force field parameters changed.
		 * 
		 * Call this method after changing force field parameters other than (de)activating forceField.
		 */
		func void notifyParametersChanged()
			pListeners.forEach(block Listener each
				each.forceFieldParametersChanged(this)
			end)
		end
		
		
		
		/** \brief Add listener. */
		func void addListener(Listener listener)
			if listener == null
				throw EInvalidParam.new()
			end
			pListeners.add(listener)
		end
		
		/** \brief Remove listener. */
		func void removeListener(Listener listener)
			pListeners.remove(listener)
		end
		
		
		
		/** \brief State changed (visible, touchable). */
		func void stateChanged()
			if pForceField != null
				if getElement().getVisible()
					if not pCustomForceFieldHandling
						pForceField.setEnabled(pEnabled)
					end
					
				else
					pForceField.setEnabled(false)
				end
			end
		end
		
		/** \brief Add element to game world. */
		func void addToGameWorld()
			getElement().getGameWorld().getWorld().addForceField(pForceField)
		end
		
		/** \brief Remove element from game world. */
		func void removeFromGameWorld()
			getElement().getGameWorld().getWorld().removeForceField(pForceField)
		end
		
		
		
		/** \brief Read element from file. */
		func void readFromFile(PersistencyEnvironment env, FileReader reader)
			select reader.readByte() // version
			case 0
				setEnabled(env.readBool(reader))
				
			else
				throw EInvalidParam.new("unsupported version")
			end
		end
		
		/** Writes the element to a file. */
		func void writeToFile(PersistencyEnvironment env, FileWriter writer)
			writer.writeByte(0) // version
			
			env.writeBool(writer, pEnabled)
		end
	end
	
	
	
	var ECBehaviorCollider pCollider
	var ECComposeForceField pForceField
	var ECComposeAttachResource pAttach
	var ECBehaviorTriggered pTrigger
	var ECBehaviorForceField pSyncTrigger
	var TSTriggerTable pTriggerTable
	var Array pListenerFactories
	
	
	
	/**
	 * \brief Create behavior element class.
	 * 
	 * These values are optional and can be null: \em collider.
	 */
	func new(BehaviorElementClass eclass, ECBehaviorCollider collider) \
	this(eclass, collider, null cast TSTriggerTable, "")
	end
	
	func new(BehaviorElementClass eclass, ECBehaviorCollider collider, String id) \
	this(eclass, collider, null cast TSTriggerTable, id)
	end
	
	func new(BehaviorElementClass eclass, ECBehaviorCollider collider, \
	TSTriggerTable triggerTable) this(eclass, collider, triggerTable, "")
	end
	
	func new(BehaviorElementClass eclass, ECBehaviorCollider collider, \
	TSTriggerTable triggerTable, String id) this(eclass, collider, triggerTable, \
	id, id.empty() if "forceField" else "forceField(" + id + ")")
	end
	
	func new(BehaviorElementClass eclass, ECBehaviorCollider collider, \
	TSTriggerTable triggerTable, String id, String subID) \
	this(eclass, collider, triggerTable, id, subID, subID + ".")
	end
	
	func new(BehaviorElementClass eclass, ECBehaviorCollider collider, \
	TSTriggerTable triggerTable, String id, String subID, String prefix) super(eclass, id)
		pCollider = collider
		pTriggerTable = triggerTable
		pListenerFactories = Array.new()
		
		pForceField = ECComposeForceField.new(eclass, prefix)
		pAttach = ECComposeAttachResource.new(eclass, prefix)
		
		pTrigger = ECBehaviorTriggered.new(eclass, triggerTable, subID, prefix + "trigger")
		
		eclass.addBehavior(this)
	end
	
	/** \brief Dispose of behavior. */
	func void dispose()
		pCollider = null
		pSyncTrigger = null
		pListenerFactories = null
		super.dispose()
	end
	
	
	
	/** \brief Collider behavior or null to not attach. */
	func ECBehaviorCollider getCollider()
		return pCollider
	end
	
	/** \brief Composeable force field for element class. */
	func ECComposeForceField getForceField()
		return pForceField
	end
	
	/** \brief Attach resource. */
	func ECComposeAttachResource getAttach()
		return pAttach
	end
	
	/** \brief Trigger enable. */
	func ECBehaviorTriggered getTrigger()
		return pTrigger
	end
	
	/** \brief ECBehaviorForceField to synchronize triggers with or \em null to disable. */
	func ECBehaviorForceField getSyncTrigger()
		return pSyncTrigger
	end
	
	/** \brief ECBehaviorForceField to synchronize triggers with or \em null to disable. */
	func void setSyncTrigger(ECBehaviorForceField behavior)
		pSyncTrigger = behavior
	end
	
	/** \brief Trigger table or \em null if not used. */
	func TSTriggerTable getTriggerTable()
		return pTriggerTable
	end
	
	/** \brief Set trigger table or \em null if not used. */
	func void setTriggerTable(TSTriggerTable triggerTable)
		pTriggerTable = triggerTable
	end
	
	/** \brief Add listener factory. */
	func void addListenerFactory(ListenerFactory factory)
		if factory == null
			throw ENullPointer.new()
		end
		pListenerFactories.add(factory)
	end
	
	/**
	 * \brief Add listener factory using block.
	 * 
	 * Block receives as parameter Instance and returns Listener.
	 */
	func void addListenerFactory(Block blockFactory)
		pListenerFactories.add(BlockListenerFactory.new(blockFactory))
	end
	
	/** \brief Visit listener factories with block with argument ListenerFactory. */
	func void forEachListenerFactory(Block ablock)
		pListenerFactories.forEach(ablock)
	end
	
	/** \brief Create listeners from factories adding them to behavior instance. */
	func void createListeners(Instance instance)
		pListenerFactories.forEach(block ListenerFactory each
			instance.addListener(each.createListener(instance))
		end)
	end
	
	
	
	/** \brief Get instance in element from owner element class. */
	func Instance instance(BehaviorElement element)
		return element.getInstanceAt(getInstanceIndex()) cast Instance
	end
	
	
	
	/**
	 * \brief Get behavior in element class or \em null if absent.
	 * 
	 * Use this method to check if a particular BehaviorElementClass contains a behavior
	 * of type ECBehaviorCollider.
	 */
	static func ECBehaviorForceField getBehaviorIn(BehaviorElementClass eclass)
		return eclass.findBehavior(block ECBehaviorForceField each
			return true
		end) cast ECBehaviorForceField
	end
	
	/**
	 * \brief Get behavior with id in element class or \em null if absent.
	 * 
	 * Use this method to check if a particular BehaviorElementClass contains a behavior
	 * of type ECBehaviorForceField with specific identifier.
	 */
	static func ECBehaviorForceField getBehaviorIn(BehaviorElementClass eclass, String id)
		return eclass.findBehavior(block ECBehaviorForceField each
			return each.getID().equals(id)
		end) cast ECBehaviorForceField
	end
	
	/**
	 * \brief Get list of all behaviors in element.
	 * 
	 * Returns list contains ECBehaviorForceField behaviors in the order they have
	 * been created in the element.
	 */
	static func Array getAllBehaviorsIn(BehaviorElementClass eclass)
		return eclass.collectBehaviors(block ECBehaviorForceField each
			return true
		end)
	end
	
	
	
	/**
	 * \brief Get instance in element or \em null if absent.
	 * 
	 * Use this method to check if a particular BehaviorElement contains a behavior instance
	 * of type ECBehaviorForceField.Instance . If more than one instance is present returns
	 * the first instance.
	 */
	static func Instance getInstanceIn(BehaviorElement element)
		return element.findInstance(block Instance each
			return true
		end) cast Instance
	end
	
	/**
	 * \brief Get instance with id in element or \em null if absent.
	 * 
	 * Use this method to check if a particular BehaviorElement contains a behavior instance
	 * of type ECBehaviorForceField.Instance with specific identifier.
	 */
	static func Instance getInstanceIn(BehaviorElement element, String id)
		return element.findInstance(block Instance each
			return each.getECBehavior().getID().equals(id)
		end) cast Instance
	end
	
	/**
	 * \brief Get list of all instances in element.
	 * 
	 * Returns list contains ECBehaviorForceField.Instance instances in the order they have
	 * been created in the element.
	 */
	static func Array getAllInstancesIn(BehaviorElement element)
		return element.collectInstances(block Instance each
			return true
		end)
	end
	
	
	
	/** \brief Create Behavior instance. */
	func ECBehaviorInstance createInstance(BehaviorElement element)
		return Instance.new(this, element)
	end
end
