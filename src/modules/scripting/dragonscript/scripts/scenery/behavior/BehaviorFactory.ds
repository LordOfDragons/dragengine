/*
 * MIT License
 *
 * Copyright (C) 2025, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

namespace Dragengine.Scenery

pin Dragengine.LoadSave


/**
 * \brief Interface for factories supporting creating behaviors.
 * \version 1.25
 * 
 * For use with XML element classes to add behaviors. Added behaviors are required to find
 * the best matching dependency behavior. The user can assign specific behaviors later on.
 */
interface BehaviorFactory
	/**
	 * \brief Unique identifier of factory.
	 * 
	 * Should be the class name of the behavior. Factory identifiers are case sensitive.
	 */
	func String factoryId()
	
	/**
	 * \brief Add behavior to element class.
	 * 
	 * Some behaviors support parameters. Parameters are provided as a \ref Dictionary
	 * with parameter name as \ref String key and parameter value as \ref Object value.
	 * The type and format of value depends on the parameter name. Usually parameters
	 * indicate a dependency behavior to use. In this case the parameter name indicates the
	 * target behavior slot to assign the behavior to and the value is a \ref String with the
	 * identifier of the behavior to assign. The target slot defines what what existing behaviors
	 * are matched against this identifier. Value can be also null to assign the null behavior.
	 * 
	 * \param eclass Element class to add behavior to.
	 * \param id Identifier to use. Has to be unique amongst same type behaviors.
	 * \param parameters Parameters as \ref Dictionary with \ref String name and \ref Object value.
	 */
	func ECBehavior addBehavior(BehaviorElementClass eclass, String id, Dictionary parameters)
end
