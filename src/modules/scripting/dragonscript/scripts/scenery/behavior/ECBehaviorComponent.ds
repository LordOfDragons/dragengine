/* 
 * Drag[en]gine DragonScript Script Module
 *
 * Copyright (C) 2020, Roland Plüss (roland@rptd.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */


namespace Dragengine.Scenery

pin Dragengine.Gui
pin Dragengine.LoadSave
pin Dragengine.Preloading
pin Dragengine.Utils


/**
 * \brief Behavior element behavior adding component support.
 * 
 * Components provide visual appearance to elements. This behavior can be added multiple
 * times to an element. Each instance creates one component attached to the element collider
 * which can be individually modified. To distinguish the components each instance has an
 * identifier which can be used to retrieve a specific instance. The identifier is also
 * used as prefix for element class properties and stub properties if not empty. Hence to
 * use more than one component use code like this in your subclass constructor:
 * 
 * \code{.ds}
 * class MyElement extends BehaviorElementClass
 *    public func new()
 *       ECBehaviorComponent.new(this, null)
 *       ECBehaviorComponent.new(this, null, "subComponent")
 *    end
 * end
 * \endcode
 * 
 * You can now define the model to use for both components using the properties "model" for
 * the first component and "subComponent.model" for the second component.
 * 
 * If the \em ECBehaviorCollider behavior is present in the behavior element before this
 * behavior is added the component is statically attached. In this case the collider is a
 * ColliderVolume and the rig assigned to the component is only used for animation purpose.
 * 
 * If the \em ECBehaviorCollider behavior is added after this behavior then a ColliderComponent
 * is created. In this case the component is implicitly attached by \em ECBehaviorCollider
 * and the component rig is used for collision detection. This is required if you intend to
 * use per-bone collisions matching animation state or physical simulations like rag-dolls.
 * 
 * Hence these two use cases are possible depending on the order the behaviors are added:
 * 
 * \par Use Case 1: Shape Collision
 * 
 * Component is only visual. For collision only static collision shape is used.
 * The component is attached statically to the collider and does not collide.
 * If collider is dynamic physics simulation will be done using collision shape only.
 * 
 * \code{.ds}
 * class MyElementClass extends BehaviorElementClass
 *    public func new()
 *       var ECBehaviorCollider collider = ECBehaviorCollider.new(this, null)
 *       // assign collision shape or collision rig to the collider
 *       ECBehaviorComponent.new(this, collider)
 *    end
 * end
 * \endcode
 * 
 * \par Use Case 2: Component Collision
 * 
 * Component is used for collision detection. If collider is dynamic component bones will
 * be updated by the collider automatically.
 * 
 * \code{.ds}
 * class MyElementClass extends BehaviorElementClass
 *    public func new()
 *       var ECBehaviorComponent component = ECBehaviorComponent.new(this, null)
 *       ECBehaviorCollider.new(this, component)
 *    end
 * end
 * \endcode
 * 
 * Element class properties have the prefix "component{(id)}.".
 * 
 * This behavior does not require the element class to be persistable (setPersistable).
 */
class ECBehaviorComponent extends DefaultECBehavior
	/** \brief Behavior instance. */
	class Instance extends DefaultECBehaviorInstance
		private var ECBehaviorComponent pECBehavior
		private var Component pComponent
		
		
		
		/** \brief Create element. */
		public func new( ECBehaviorComponent ecbehavior, BehaviorElement element ) super( element )
			this.pECBehavior = ecbehavior
		end
		
		
		
		/** \brief Initialize element from stub. */
		public func void init( StubElement stub )
			this.pComponent = this.createComponent( stub )
			if this.pComponent == null
				return
			end
			
			if this.pECBehavior.getCollider() != null
				var ECBehaviorCollider.Instance collider = \
					this.pECBehavior.getCollider().instance( this.getElement() )
				if collider.getCollider() != null
					this.attachComponent( stub, collider )
				end
			end
		end
		
		/**
		 * \brief Create component for the element.
		 * 
		 * The default implementation creates a component using the component parameters
		 * stored in the element class. If not all required resources can be found an exception
		 * is thrown. Overwrite to modify component creation process using parameters stored
		 * in the sub if required.
		 */
		protected func Component createComponent( StubElement stub )
			var Component component = this.pECBehavior.getComponent().createComponent( this.getElement(), stub )
			if component == null
				return null
			end
			
			this.replaceComponentTextures( component, stub )
			component.setLayerMask( this.createLayerMask( stub ) )
			
			return component
		end
		
		/** \brief Replace textures using element class and a stub. */
		protected func void replaceComponentTextures( Component component, StubElement stub )
			if component != null
				this.pECBehavior.getComponent().replaceTextures( component, stub )
			end
		end
		
		/**
		 * \brief Create component layer mask.
		 * 
		 * Default implementation calls ECComposeComponent.createLayerMask.
		 */
		protected func LayerMask createLayerMask( StubElement stub )
			return this.pECBehavior.getComponent().createLayerMask( stub )
		end
		
		/**
		 * \brief Attach component to collider.
		 * 
		 * Called if \em ECBehaviorCollider is present in the behavior element. The default
		 * implementation attaches the component statically to the collider. For this to
		 * work the component has to be in the right position relative to the collider.
		 */
		protected func void attachComponent( StubElement stub, ECBehaviorCollider.Instance collider )
			collider.getCollider().attachStatic( this.pComponent )
		end
		
		
		
		/** \brief Behavior. */
		public func ECBehaviorComponent getECBehavior()
			return this.pECBehavior
		end
		
		/** \brief Texture replacements. */
		public func TextureReplacementList getTextureReplacements()
			return this.pECBehavior.getComponent().getTextureReplacements().getList()
		end
		
		/** \brief Component. */
		public func Component getComponent()
			return this.pComponent
		end
		
		
		
		/**
		 * \brief Skin in use for texture.
		 * 
		 * If component texture is set and skîn is assigned returns component texture skin.
		 * Otherwise returns component skin.
		 */
		public func Skin getUsedSkin( String texture )
			if this.pComponent == null
				return null
			end
			
			var int index = this.pComponent.indexOfTextureNamed( texture )
			if index == -1
				return null
			end
			
			var Skin skin = this.pComponent.getTextureSkinAt( index )
			if skin != null
				return skin
			end
			
			return this.pComponent.getSkin()
		end
		
		/**
		 * \brief Skin in use for texture.
		 * 
		 * If component texture is set and skîn is assigned returns component texture skin.
		 * Otherwise returns component skin.
		 */
		public func Skin getUsedSkin( String texture, ObjectReference textureNumber )
			if this.pComponent == null
				return null
			end
			
			var int index = this.pComponent.indexOfTextureNamed( texture )
			if index == -1
				return null
			end
			
			var Skin skin = this.pComponent.getTextureSkinAt( index )
			if skin == null
				skin = this.pComponent.getSkin()
			end
			
			if skin != null and textureNumber != null
				textureNumber.set( this.pComponent.getTextureTextureAt( index ) )
			end
			return skin
		end
		
		
		
		/** \brief State changed (visble, touchable). */
		public func void stateChanged()
			if this.pComponent != null
				this.pComponent.setVisible( this.getElement().getVisible() )
			end
		end
		
		/** \brief Add element to game world. */
		public func void addToGameWorld()
			if this.pComponent != null
				this.getElement().getGameWorld().getWorld().addComponent( this.pComponent )
			end
		end
		
		/** \brief Remove element from game world. */
		public func void removeFromGameWorld()
			if this.pComponent != null
				this.getElement().getGameWorld().getWorld().removeComponent( this.pComponent )
			end
		end
	end
	
	
	
	private var ECComposeComponent pComponent
	private var ECBehaviorCollider pCollider
	
	
	
	/**
	 * \brief Create behavior element class.
	 * 
	 * These values are optional and can be null: \em collider.
	 */
	public func new( BehaviorElementClass eclass, ECBehaviorCollider collider ) \
	this( eclass, collider, "" )
	end
	
	public func new( BehaviorElementClass eclass, ECBehaviorCollider collider, String id ) \
	this( eclass, collider, id, id.empty() if "component." else "component(" + id + ")." )
	end
	
	public func new( BehaviorElementClass eclass, ECBehaviorCollider collider, \
	String id, String prefix ) super( eclass, id )
		this.pCollider = collider
		
		this.pComponent = ECComposeComponent.new( eclass, \
			this.createTextureReplacements( prefix + "textureReplacements" ), prefix )
		
		eclass.addBehavior( this )
	end
	
	/** \brief Create texture replacements property. */
	protected func ECPTextureReplacementList createTextureReplacements( String propertyName )
		return ECPTextureReplacementList.new( propertyName )
	end
	
	/** \brief Dispose of behavior. */
	public func void dispose()
		this.pCollider = null
		super.dispose()
	end
	
	
	
	/** \brief Composeable component for element class. */
	public func ECComposeComponent getComponent()
		return this.pComponent
	end
	
	/** \brief Collider behavior. */
	public func ECBehaviorCollider getCollider()
		return this.pCollider
	end
	
	
	
	/**
	 * \brief Helper method to quickly set model, skin and rig path.
	 * 
	 * If \em model, \em skin or \em rig are null the respective path is not set.
	 */
	public  func void setCommonPath( String model, String skin, String rig )
		if model != null
			this.pComponent.getModel().setPath( model )
		end
		if skin != null
			this.pComponent.getSkin().setPath( skin )
		end
		if rig != null
			this.pComponent.getRig().setPath( rig )
		end
	end
	
	/**
	 * \brief Helper method to quickly set model, skin and rig path located in the same directory.
	 * 
	 * \em directory is not required to end with a slash. \em model, \em skin and \em rig
	 * can be relative or absolute path. If absolute directory is not used.
	 * 
	 * Set path will be:
	 * - "directory/model" or "model" if \em model is absolute path
	 * - "directory/skin" or "skin" if \em skin is absolute path
	 * - "directory/rig" or "rig" if \em rig is absolute path
	 * 
	 * If \em model, \em skin or \em rig are null the respective path is not set.
	 */
	public  func void setCommonPath( String directory, String model, String skin, String rig )
		if model != null
			this.pComponent.getModel().setPath( File.absolutePath( model, directory ).getPath() )
		end
		if skin != null
			this.pComponent.getSkin().setPath( File.absolutePath( skin, directory ).getPath() )
		end
		if rig != null
			this.pComponent.getRig().setPath( File.absolutePath( rig, directory ).getPath() )
		end
	end
	
	/**
	 * \brief Helper method to quickly set model, skin, rig, occlusion mesh and audio model path.
	 * 
	 * If \em model, \em skin, \em rig, \em occlusionMesh or \em audioModel are null the
	 * respective path is not set.
	 */
	public  func void setAllPath( String model, String skin, String rig, \
	String occlusionMesh, String audioModel )
		this.setCommonPath( model, skin, rig )
		if occlusionMesh != null
			this.pComponent.getOcclusionMesh().setPath( occlusionMesh )
		end
		if audioModel != null
			this.pComponent.getAudioModel().setPath( audioModel )
		end
	end
	
	/**
	 * \brief Helper method to quickly set model, skin, rig, occlusion mesh and audio model path located in the same directory.
	 * 
	 * \em directory is not required to end with a slash. \em model, \em skin, \em rig,
	 * \em occlusionMesh and \em audioModel can be relative or absolute path. If absolute
	 * directory is not used.
	 * 
	 * Set path will be:
	 * - "directory/model" or "model" if \em model is absolute path
	 * - "directory/skin" or "skin" if \em skin is absolute path
	 * - "directory/rig" or "rig" if \em rig is absolute path
	 * - "directory/occlusionMesh" or "occlusionMesh" if \em occlusionMesh is absolute path
	 * - "directory/audioModel" or "audioModel" if \em audioModel is absolute path
	 * 
	 * If \em model, \em skin, \em rig, \em occlusionMesh or \em audioModel are null the
	 * respective path is not set.
	 */
	public  func void setAllPath( String directory, String model, String skin, \
	String rig, String occlusionMesh, String audioModel )
		this.setCommonPath( directory, model, skin, rig )
		if occlusionMesh != null
			this.pComponent.getOcclusionMesh().setPath( File.absolutePath( occlusionMesh, directory ).getPath() )
		end
		if audioModel != null
			this.pComponent.getAudioModel().setPath( File.absolutePath( audioModel, directory ).getPath() )
		end
	end
	
	/**
	 * \brief Helper method to quickly add a texture replacement.
	 * 
	 * Replaces calls like this:
	 * \code{.ds}
	 * var TextureReplacement replacement = TextureReplacement.new("texture name")
	 * replacement.setPath("/path/to/material.deskin")
	 * replacement.setColorTint(Color.new(1, 0.8, 0.5))
	 * componentBehavior.getComponent().getTextureReplacements().getList().add(replacement)
	 * \endcode
	 */
	public func void addTextureReplacement( String name, String pathSkin )
		var TextureReplacement replacement = TextureReplacement.new( name )
		replacement.setPath( pathSkin )
		this.pComponent.getTextureReplacements().getList().add( replacement )
	end
	
	public func void addTextureReplacement( String name, String pathSkin, Vector2 tcScale )
		var TextureReplacement replacement = TextureReplacement.new( name )
		replacement.setPath( pathSkin )
		replacement.setTransform( TexMatrix2.newScaling( tcScale ) )
		this.pComponent.getTextureReplacements().getList().add( replacement )
	end
	
	public func void addTextureReplacement( String name, String pathSkin, Color tint )
		var TextureReplacement replacement = TextureReplacement.new( name )
		replacement.setPath( pathSkin )
		replacement.setColorTint( tint )
		this.pComponent.getTextureReplacements().getList().add( replacement )
	end
	
	public func void addTextureReplacement( String name, String pathSkin, Vector2 tcScale, Color tint )
		var TextureReplacement replacement = TextureReplacement.new( name )
		replacement.setPath( pathSkin )
		replacement.setTransform( TexMatrix2.newScaling( tcScale ) )
		replacement.setColorTint( tint )
		this.pComponent.getTextureReplacements().getList().add( replacement )
	end
	
	
	
	/** \brief Get instance in element from owner element class. */
	public func Instance instance( BehaviorElement element )
		return element.getInstanceAt( this.getInstanceIndex() ) cast Instance
	end
	
	
	
	/**
	 * \brief Get behavior in element class or \em null if absent.
	 * 
	 * Use this method to check if a particular BehaviorElementClass contains a behavior
	 * of type ECBehaviorCollider.
	 */
	static public func ECBehaviorComponent getBehaviorIn( BehaviorElementClass eclass )
		return eclass.findBehavior( block ECBehaviorComponent each
			return true
		end ) cast ECBehaviorComponent
	end
	
	/**
	 * \brief Get behavior with id in element class or \em null if absent.
	 * 
	 * Use this method to check if a particular BehaviorElementClass contains a behavior
	 * of type ECBehaviorComponent with specific identifier.
	 */
	static public func ECBehaviorComponent getBehaviorIn( BehaviorElementClass eclass, String id )
		return eclass.findBehavior( block ECBehaviorComponent each
			return each.getID().equals( id )
		end ) cast ECBehaviorComponent
	end
	
	/**
	 * \brief Get list of all behaviors in element.
	 * 
	 * Returns list contains ECBehaviorComponent behaviors in the order they have
	 * been created in the element.
	 */
	static public func Array getAllBehaviorsIn( BehaviorElementClass eclass )
		return eclass.collectBehaviors( block ECBehaviorComponent each
			return true
		end )
	end
	
	
	
	/**
	 * \brief Get instance in element or \em null if absent.
	 * 
	 * Use this method to check if a particular BehaviorElement contains a behavior instance
	 * of type ECBehaviorComponent.Instance . If more than one instance is present returns
	 * the first instance.
	 */
	static public func Instance getInstanceIn( BehaviorElement element )
		return element.findInstance( block Instance each
			return true
		end ) cast Instance
	end
	
	/**
	 * \brief Get instance with id in element or \em null if absent.
	 * 
	 * Use this method to check if a particular BehaviorElement contains a behavior instance
	 * of type ECBehaviorComponent.Instance with specific identifier.
	 */
	static public func Instance getInstanceIn( BehaviorElement element, String id )
		return element.findInstance( block Instance each
			return each.getECBehavior().getID().equals( id )
		end ) cast Instance
	end
	
	/**
	 * \brief Get list of all instances in element.
	 * 
	 * Returns list contains ECBehaviorComponent.Instance instances in the order they have
	 * been created in the element.
	 */
	static public func Array getAllInstancesIn( BehaviorElement element )
		return element.collectInstances( block Instance each
			return true
		end )
	end
	
	
	
	/** \brief Create Behavior instance. */
	public func ECBehaviorInstance createInstance( BehaviorElement element )
		return Instance.new( this, element )
	end
end
