/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */


namespace Dragengine.Scenery

pin Dragengine.Gui
pin Dragengine.LoadSave
pin Dragengine.Preloading
pin Dragengine.Utils
pin Dragengine.BehaviorTreeSystem
pin Dragengine.StateMachineSystem


/**
 * \brief Behavior element behavior adding turning player input.
 * 
 * Keeps track of turning player input and applies them to actor locomotion.
 * 
 * This behavior is typically used for vehicle type actors.
 * 
 * \see https://developer.dragondreams.ch/wiki/doku.php/dragengine:modules:dragonscript:behavior_playerinputturn
 */
class ECBehaviorPlayerInputTurn extends DefaultECBehavior
	/**
	 * \brief Behavior factory.
	 * \version 1.25
	 * 
	 * Automatically assigns these behaviors if present before adding:
	 * - Optional: \ref ECBehaviorLocomotion
	 * 
	 * Example XML element class:
	 * \code{.xml}
	 * <behavior type='ECBehaviorPlayerInputTurn'>
	 *   <!-- optional: use behavior tree with id instead of empty string -->
	 *   <string name='behaviorTree'>second</string>
	 *   
	 *   <!-- optional: use state machine with id instead of empty string -->
	 *   <string name='stateMachine'>second</string>
	 * </behavior>
	 * \endcode
	 * 
	 * Element class properties added by the behavior can also be set directly inside the tag
	 * be removing the property name prefix and starting with a "." (for example ".propertyName").
	 */
	class Factory implements BehaviorFactory
		func new()
		end
		
		func String factoryId()
			return "ECBehaviorPlayerInputTurn"
		end
		
		func ECBehavior addBehavior(BehaviorElementClass eclass, String id, Dictionary parameters)
			if not id.empty()
				throw EInvalidParam.new("id is not empty string")
			end
			var ECBehaviorPlayerInputTurn behavior = ECBehaviorPlayerInputTurn.new(\
				eclass, ECBehaviorLocomotion.getBehaviorIn(eclass))
			
			behavior.setBehaviorTree(eclass.sharedFactoryHelper.defaultBehaviorTree(eclass, parameters))
			behavior.setStateMachine(eclass.sharedFactoryHelper.defaultStateMachine(eclass, parameters))
			
			eclass.sharedFactoryHelper.setPropertiesFromParameters(\
				eclass, parameters, "playerInputTurn")
			return behavior
		end
	end
	
	/** \brief Behavior instance. */
	class Instance extends DefaultECBehaviorInstance
		/**
		 * \brief Behavior tree action "playerInputTurn.set".
		 * \version 1.26
		 */
		private class BTASet extends BTSMActionCondition
			var Instance pInstance
			
			func new(Instance instance)
				pInstance = instance
			end
			
			func BTResult runAction(Dictionary parameters)
				var Object value
				
				if parameters.has("reset")
					pInstance.reset()
				end
				
				value = parameters.getAt("left", null)
				if value != null
					pInstance.setTurnLeft(value.equals("true"))
				end
				
				if parameters.has("left.toggle")
					pInstance.toggleTurnLeft()
				end
				
				value = parameters.getAt("right", null)
				if value != null
					pInstance.setTurnRight(value.equals("true"))
				end
				
				if parameters.has("right.toggle")
					pInstance.toggleTurnRight()
				end
				
				value = parameters.getAt("speed", null)
				if value != null
					pInstance.setSpeedTurnHorizontal((value cast String).toFloat())
				end
				
				value = parameters.getAt("analog", null)
				if value != null
					pInstance.setAnalogTurnHorizontal((value cast String).toFloat())
				end
				
				value = parameters.getAt("analog.sticky", null)
				if value != null
					pInstance.setAnalogTurnHorizontalSticky((value cast String).toFloat())
				end
				
				value = parameters.getAt("canTurn", null)
				if value != null
					pInstance.setCanTurn(value.equals("true"))
				end
				
				if parameters.has("canTurn.toggle")
					pInstance.toggleCanTurn()
				end
				
				return BTResult.success
			end
		end
		
		/**
		 * \brief Behavior tree action/condition "playerInputTurn.check".
		 * \version 1.26
		 */
		private class BTACheck extends BTSMActionCondition
			var Instance pInstance
			var String pPrefix
			
			func new(Instance instance, String prefix)
				pInstance = instance
				pPrefix = prefix
			end
			
			func BTResult runAction(Dictionary parameters)
				return check("", parameters) if BTResult.success\
					else (parameters.has("wait") if BTResult.running else BTResult.failure)
			end
			
			func bool evaluateCondition(Dictionary parameters)
				return check(pPrefix, parameters)
			end
			
			func bool check(String prefix, Dictionary parameters)
				var bool result = true
				var Object value
				
				value = parameters.getAt(prefix + "left", null)
				if value != null
					result &= pInstance.getTurnLeft() == value.equals("true")
				end
				
				value = parameters.getAt(prefix + "right", null)
				if value != null
					result &= pInstance.getTurnRight() == value.equals("true")
				end
				
				value = parameters.getAt(prefix + "speed.less", null)
				if value != null
					result &= pInstance.getSpeedTurnHorizontal() < (value cast String).toFloat()
				end
				
				value = parameters.getAt(prefix + "speed.greater", null)
				if value != null
					result &= pInstance.getSpeedTurnHorizontal() > (value cast String).toFloat()
				end
				
				value = parameters.getAt(prefix + "analog.less", null)
				if value != null
					result &= pInstance.getAnalogTurnHorizontal() < (value cast String).toFloat()
				end
				
				value = parameters.getAt(prefix + "analog.greater", null)
				if value != null
					result &= pInstance.getAnalogTurnHorizontal() > (value cast String).toFloat()
				end
				
				value = parameters.getAt(prefix + "analog.sticky.less", null)
				if value != null
					result &= pInstance.getAnalogTurnHorizontalSticky() < (value cast String).toFloat()
				end
				
				value = parameters.getAt(prefix + "analog.sticky.greater", null)
				if value != null
					result &= pInstance.getAnalogTurnHorizontalSticky() > (value cast String).toFloat()
				end
				
				value = parameters.getAt(prefix + "canTurn", null)
				if value != null
					result &= pInstance.getCanTurn() == value.equals("true")
				end
				
				return result
			end
		end
		
		
		var ECBehaviorPlayerInputTurn pECBehavior
		var ECBehaviorLocomotion.Instance pLocomotion
		
		var bool pTurnLeft
		var bool pTurnRight
		var float pSpeedTurnHorizontal
		var float pAnalogTurnHorizontal
		var float pAnalogTurnHorizontalSticky
		var bool pCanTurn
		
		
		
		/** \brief Create instance. */
		func new(ECBehaviorPlayerInputTurn ecbehavior, BehaviorElement element) super(element)
			pECBehavior = ecbehavior
			
			pSpeedTurnHorizontal = 45
			pCanTurn = true
		end
		
		/** \brief Dispose of instance. */
		func void dispose()
			pLocomotion = null
			super.dispose()
		end
		
		
		
		/** \brief Initialize element from stub. */
		func void init(StubElement stub)
			var BehaviorElement element = getElement()
			
			pSpeedTurnHorizontal = pECBehavior.getSpeedTurnHorizontal().getValue(stub)
			
			if pECBehavior.getLocomotion() != null
				pLocomotion = pECBehavior.getLocomotion().instance(element)
			end
			
			if pECBehavior.getBehaviorTree() != null
				var String prefix = pECBehavior.getPrefix()
				var BTContext c = pECBehavior.getBehaviorTree().instance(element).getContext()
				c.setAction(prefix + "set", BTASet.new(this))
				
				var String name = prefix + "check"
				var BTACheck btacheck = BTACheck.new(this, prefix)
				c.setAction(name, btacheck)
				c.setCondition(name, btacheck)
			end
			
			if pECBehavior.getStateMachine() != null
				var String prefix = pECBehavior.getPrefix()
				var SMContext c = pECBehavior.getStateMachine().instance(element).getContext()
				c.setAction(prefix + "set", BTASet.new(this))
				
				var String name = prefix + "check"
				var BTACheck btacheck = BTACheck.new(this, prefix)
				c.setAction(name, btacheck)
				c.setCondition(name, btacheck)
			end
		end
		
		
		
		/** \brief Behavior. */
		func ECBehaviorPlayerInputTurn getECBehavior()
			return pECBehavior
		end
		
		/** \brief Locomotion behavior or null if absent. */
		func ECBehaviorLocomotion.Instance getLocomotion()
			return pLocomotion
		end
		
		
		
		/** \brief Turn left key is pressed. */
		func bool getTurnLeft()
			return pTurnLeft
		end
		
		/** \brief Set if turn left key is pressed. */
		func void setTurnLeft(bool pressed)
			pTurnLeft = pressed
		end
		
		/** \brief Toggle turn left key pressed. */
		func void toggleTurnLeft()
			pTurnLeft = not pTurnLeft
		end
		
		/** \brief Turn right key is pressed. */
		func bool getTurnRight()
			return pTurnRight
		end
		
		/** \brief Set if turn right key is pressed. */
		func void setTurnRight(bool pressed)
			pTurnRight = pressed
		end
		
		/** \brief Toggle turn right key pressed. */
		func void toggleTurnRight()
			pTurnRight = not pTurnRight
		end
		
		/** \brief Turn left right speed in degrees per second. */
		func float getSpeedTurnHorizontal()
			return pSpeedTurnHorizontal
		end
		
		/** \brief Set turn left right speed in degrees per second. */
		func void setSpeedTurnHorizontal(float speed)
			pSpeedTurnHorizontal = DEMath.max(speed, 0.0)
		end
		
		/** \brief Analog turn left right. */
		func float getAnalogTurnHorizontal()
			return pAnalogTurnHorizontal
		end
		
		/** \brief Set analog turn left right. */
		func void setAnalogTurnHorizontal(float value)
			pAnalogTurnHorizontal = value
		end
		
		/** \brief Sticky analog turn left right. */
		func float getAnalogTurnHorizontalSticky()
			return pAnalogTurnHorizontalSticky
		end
		
		/** \brief Set sticky analog turn left right. */
		func void setAnalogTurnHorizontalSticky(float value)
			pAnalogTurnHorizontalSticky = value
		end
		
		/** \brief player can turn. */
		func bool getCanTurn()
			return pCanTurn
		end
		
		/** \brief Set if player can turn. */
		func void setCanTurn(bool canTurn)
			pCanTurn = canTurn
		end
		
		/** \brief Toggle can turn. */
		func void toggleCanTurn()
			pCanTurn = not pCanTurn
		end
		
		/** \brief Calculate turn left right value and reset analog input. */
		func float calculateTurnHorizontal()
			var float value = 0
			
			if pCanTurn
				if pTurnLeft
					value += 1
				end
				if pTurnRight
					value -= 1
				end
				
				value += pAnalogTurnHorizontalSticky + pAnalogTurnHorizontal
				pAnalogTurnHorizontal = 0
			end
			
			return value * pSpeedTurnHorizontal
		end
		
		
		
		/** \brief Reset input. */
		func void reset()
			pTurnLeft = false
			pTurnRight = false
			pAnalogTurnHorizontal = 0
			pAnalogTurnHorizontalSticky = 0
		end
		
		
		
		/**
		 * \brief Update locomotion.
		 * 
		 * Calls calculateTurnHorizontal() to obtain the turning changes and applies using
		 * Locomotion.setTurnHorizontal().
		 * 
		 * \note This method conflicts with ECBehaviorPlayerInputMove.updateLocomotion() if
		 *       ECBehaviorPlayerInputMove is set to modify turning.
		 */
		func void updateLocomotion(float elapsed)
			if pLocomotion == null
				return
			end
			
			var Locomotion locomotion = pLocomotion.getLocomotion()
			locomotion.setTurnHorizontal(locomotion.getTurnHorizontal() + calculateTurnHorizontal() * elapsed)
		end
		
		
		
		/** \brief Read element from file. */
		func void readFromFile(PersistencyEnvironment env, FileReader reader)
			select reader.readByte() // version
			case 0
				var PersistencyFlags flags = PersistencyFlags.new(1, reader)
				pCanTurn = flags.getAt(0)
				
				pSpeedTurnHorizontal = reader.readFloat()
				
			else
				throw EInvalidParam.new("unsupported version")
			end
		end
		
		/** \brief Write element to file. */
		func void writeToFile(PersistencyEnvironment env, FileWriter writer)
			writer.writeByte(0) // version
			
			var PersistencyFlags flags = PersistencyFlags.new(1)
			flags.setAt(0, pCanTurn)
			flags.writeToFile(writer)
			
			writer.writeFloat(pSpeedTurnHorizontal)
		end
	end
	
	
	
	var ECBehaviorLocomotion pLocomotion
	var ECPFloat pSpeedTurnHorizontal
	var ECBehaviorBehaviorTree pBehaviorTree
	var ECBehaviorStateMachine pStateMachine
	var String pPrefix
	
	
	
	/** \brief Create behavior element class. */
	func new(BehaviorElementClass eclass, ECBehaviorLocomotion locomotion) \
	this(eclass, locomotion, "playerInputTurn.")
	end
	
	func new(BehaviorElementClass eclass, ECBehaviorLocomotion locomotion, \
	String prefix) super(eclass)
		if getBehaviorIn(eclass) != null
			throw BEMultipleInstanceException.new(eclass, this)
		end
		
		pPrefix = prefix
		pLocomotion = locomotion
		
		eclass.addProperty(pSpeedTurnHorizontal = ECPFloat.new(prefix + "speedTurnHorizontal", 45, 0))
		
		eclass.addBehavior(this)
	end
	
	/** \brief Dispose of behavior. */
	func void dispose()
		pLocomotion = null
		pBehaviorTree = null
		pStateMachine = null
		super.dispose()
	end
	
	
	
	/**
	 * \brief Prefix.
	 * \version 1.26
	 */
	func String getPrefix()
		return pPrefix
	end
	
	/** \brief Locomotion behavior or null. */
	func ECBehaviorLocomotion getLocomotion()
		return pLocomotion
	end
	
	/** \brief Turn left right speed in degrees per second. */
	func ECPFloat getSpeedTurnHorizontal()
		return pSpeedTurnHorizontal
	end
	
	/**
	 * \brief Behavior tree or null.
	 * \version 1.26
	 */
	func ECBehaviorBehaviorTree getBehaviorTree()
		return pBehaviorTree
	end
	
	/**
	 * \brief Set behavior tree or null.
	 * \version 1.26
	 */
	func void setBehaviorTree(ECBehaviorBehaviorTree behaviorTree)
		pBehaviorTree = behaviorTree
	end
	
	/**
	 * \brief State machine or null.
	 * \version 1.26
	 */
	func ECBehaviorStateMachine getStateMachine()
		return pStateMachine
	end
	
	/**
	 * \brief Set state machine or null.
	 * \version 1.26
	 */
	func void setStateMachine(ECBehaviorStateMachine stateMachine)
		pStateMachine = stateMachine
	end
	
	
	
	
	/** \brief Get instance in element from owner element class. */
	func Instance instance(BehaviorElement element)
		return element.getInstanceAt(getInstanceIndex()) cast Instance
	end
	
	
	
	/**
	 * \brief Get behavior in element class or \em null if absent.
	 * 
	 * Use this method to check if a particular BehaviorElementClass contains a behavior
	 * of type ECBehaviorPlayerInputTurn.
	 */
	static func ECBehaviorPlayerInputTurn getBehaviorIn(BehaviorElementClass eclass)
		return eclass.findBehavior(block ECBehaviorPlayerInputTurn each
			return true
		end) cast ECBehaviorPlayerInputTurn
	end
	
	/**
	 * \brief Get instance in element or \em null if absent.
	 * 
	 * Use this method to check if a particular BehaviorElement contains a behavior instance
	 * of type ECBehaviorPlayerInputTurn.Instance .
	 */
	static func Instance getInstanceIn(BehaviorElement element)
		return element.findInstance(block Instance each
			return true
		end) cast Instance
	end
	
	
	
	/** \brief Create Behavior instance. */
	func ECBehaviorInstance createInstance(BehaviorElement element)
		return Instance.new(this, element)
	end
end
