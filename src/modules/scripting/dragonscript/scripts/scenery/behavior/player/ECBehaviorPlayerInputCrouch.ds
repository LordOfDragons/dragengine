/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */


namespace Dragengine.Scenery

pin Dragengine.Gui
pin Dragengine.LoadSave
pin Dragengine.Preloading
pin Dragengine.Utils
pin Dragengine.BehaviorTreeSystem
pin Dragengine.StateMachineSystem


/**
 * \brief Behavior element behavior adding crouching player input.
 * 
 * Keeps track of crouching player input and applies them to actor locomotion.
 * 
 * This behavior supports persistable element class (setPersistable).
 * 
 * \see https://developer.dragondreams.ch/wiki/doku.php/dragengine:modules:dragonscript:behavior_playerinputcrouch
 */
class ECBehaviorPlayerInputCrouch extends DefaultECBehavior
	/**
	 * \brief Behavior factory.
	 * \version 1.25
	 * 
	 * Automatically assigns these behaviors if present before adding:
	 * - Optional: \ref ECBehaviorLocomotion
	 * 
	 * Example XML element class:
	 * \code{.xml}
	 * <behavior type='ECBehaviorPlayerInputCrouch'>
	 *   <!-- optional: add behavior trees. default adds all behavior trees. -->
	 *   <list name='behaviorTrees'>
	 *     <string/> <!-- add behavior with empty identifier -->
	 *     <string>default</string> <!-- add behavior with 'default' identifier -->
	 *   </list>
	 * 
	 *   <!-- optional: add state machines. default adds all state machines. -->
	 *   <list name='stateMachines'>
	 *     <string/> <!-- add behavior with empty identifier -->
	 *     <string>default</string> <!-- add behavior with 'default' identifier -->
	 *   </list>
	 * </behavior>
	 * \endcode
	 * 
	 * Element class properties added by the behavior can also be set directly inside the tag
	 * be removing the property name prefix and starting with a "." (for example ".propertyName").
	 */
	class Factory extends DefaultBehaviorFactory
		func new() super("ECBehaviorPlayerInputCrouch")
		end
		
		func ECBehavior addBehavior(BehaviorElementClass eclass, String id, Dictionary parameters)
			if not id.empty()
				throw EInvalidParam.new("id is not empty string")
			end
			var ECBehaviorPlayerInputCrouch behavior = ECBehaviorPlayerInputCrouch.new(\
				eclass, ECBehaviorLocomotion.getBehaviorIn(eclass))
			
			getHelper().allBTSM(behavior.getBTSMs(), eclass, parameters)
			
			getHelper().setPropertiesFromParameters(eclass, parameters, "playerInputCrouch")
			return behavior
		end
	end
	
	/** \brief Behavior instance. */
	class Instance extends DefaultECBehaviorInstance
		/**
		 * \brief Behavior tree action "playerInputCrouch.set".
		 * \version 1.26
		 */
		private class BTASet extends BTSMActionCondition
			var Instance pInstance
			
			func new(Instance instance)
				pInstance = instance
			end
			
			func BTResult runActionShared(Object context, Dictionary parameters)
				var Object value
				
				if parameters.has("reset")
					pInstance.reset()
				end
				
				value = parameters.getAt("crouch", null)
				if value != null
					pInstance.setCrouch(value.equals("true"))
				end
				
				if parameters.has("crouch.toggle")
					pInstance.toggleCrouch()
				end
				
				value = parameters.getAt("canCrouch", null)
				if value != null
					pInstance.setCanCrouch(value.equals("true"))
				end
				
				if parameters.has("canCrouch.toggle")
					pInstance.toggleCanCrouch()
				end
				
				value = parameters.getAt("stance", null)
				if value != null
					pInstance.setStance((value cast String).toFloat())
				end
				
				return BTResult.success
			end
		end
		
		/**
		 * \brief Behavior tree action "playerInputCrouch.update".
		 * \version 1.26
		 */
		private class BTAUpdate extends BTSMActionCondition
			var Instance pInstance
			
			func new(Instance instance)
				pInstance = instance
			end
			
			func BTResult runActionShared(Object context, Dictionary parameters)
				if parameters.has("locomotion")
					pInstance.updateLocomotion((context cast SMContext).getEventParameter() cast float)
				end
				
				return BTResult.success
			end
		end
		
		/**
		 * \brief Behavior tree action/condition "playerInputCrouch.check".
		 * \version 1.26
		 */
		private class BTACheck extends BTSMActionCondition
			var Instance pInstance
			var String pPrefix
			
			func new(Instance instance, String prefix)
				pInstance = instance
				pPrefix = prefix
			end
			
			func BTResult runActionShared(Object context, Dictionary parameters)
				return check("", parameters) if BTResult.success\
					else (parameters.has("wait") if BTResult.running else BTResult.failure)
			end
			
			func bool evaluateConditionShared(Object context, Dictionary parameters)
				return check(pPrefix, parameters)
			end
			
			func bool check(String prefix, Dictionary parameters)
				var bool result = true
				var Object value
				
				value = parameters.getAt(prefix + "crouch", null)
				if value != null
					result &= pInstance.getCrouch() == value.equals("true")
				end
				
				value = parameters.getAt(prefix + "canCrouch", null)
				if value != null
					result &= pInstance.getCanCrouch() == value.equals("true")
				end
				
				value = parameters.getAt(prefix + "stance.less", null)
				if value != null
					result &= pInstance.getStance() < (value cast String).toFloat()
				end
				
				value = parameters.getAt(prefix + "stance.greater", null)
				if value != null
					result &= pInstance.getStance() > (value cast String).toFloat()
				end
				
				return result
			end
		end
		
		
		var ECBehaviorPlayerInputCrouch pECBehavior
		var ECBehaviorLocomotion.Instance pLocomotion
		
		var bool pCrouch
		var bool pCanCrouch
		var float pStance
		
		
		
		/** \brief Create instance. */
		func new(ECBehaviorPlayerInputCrouch ecbehavior, BehaviorElement element) super(element)
			pECBehavior = ecbehavior
		end
		
		/** \brief Dispose of instance. */
		func void dispose()
			pLocomotion = null
			super.dispose()
		end
		
		
		
		/** \brief Initialize element from stub. */
		func void init(StubElement stub)
			var BehaviorElement element = getElement()
			
			if pECBehavior.getLocomotion() != null
				pLocomotion = pECBehavior.getLocomotion().instance(element)
			end
			
			if pECBehavior.getBTSMs().hasAny()
				var String prefix = pECBehavior.getPrefix()
				var ECComposeBTSM.Instance btsms = ECComposeBTSM.Instance.new(element, pECBehavior.getBTSMs())
				btsms.addAllAction(prefix, "set", BTASet.new(this))
				btsms.addAllAction(prefix, "update", BTAUpdate.new(this))
				btsms.addAllActionCondition(prefix, "check", BTACheck.new(this, prefix))
			end
		end
		
		
		
		/** \brief Behavior. */
		func ECBehaviorPlayerInputCrouch getECBehavior()
			return pECBehavior
		end
		
		/** \brief Locomotion behavior or null if absent. */
		func ECBehaviorLocomotion.Instance getLocomotion()
			return pLocomotion
		end
		
		
		
		/** \brief Player is crouching. */
		func bool getCrouch()
			return pCrouch
		end
		
		/** \brief Set if player is crouching. */
		func void setCrouch(bool crouch)
			if pCanCrouch
				pCrouch = crouch
				updateStance()
			end
		end
		
		/** \brief Toggle crouching. */
		func void toggleCrouch()
			if pCanCrouch
				pCrouch = not pCrouch
				updateStance()
			end
		end
		
		/** \brief Player can change crouch. */
		func bool getCanCrouch()
			return pCanCrouch
		end
		
		/** \brief Set if player can change crouch. */
		func void setCanCrouch(bool canChangeCrouch)
			pCanCrouch = canChangeCrouch
		end
		
		/** \brief Toggle can change crouch. */
		func void toggleCanCrouch()
			pCanCrouch = not pCanCrouch
		end
		
		
		
		/** \brief Reset input. */
		func void reset()
			pCrouch = false
			updateStance()
		end
		
		
		
		/** \brief Locomotion stance. */
		func float getStance()
			return pStance
		end
		
		/** \brief Set locomotion stance. */
		func void setStance(float stance)
			pStance = stance
		end
		
		/** \brief Update locomotion stance. */
		func void updateStance()
			if pCrouch
				pStance = 1
				
			else
				pStance = 0
			end
		end
		
		
		
		/** \brief Update locomotion. */
		func void updateLocomotion(float elapsed)
			if pLocomotion != null
				pLocomotion.getLocomotion().setStanceGoal(pStance)
			end
		end
		
		
		
		/** \brief Read element from file. */
		func void readFromFile(PersistencyEnvironment env, FileReader reader)
			select reader.readByte() // version
			case 0
				var PersistencyFlags flags = PersistencyFlags.new(2, reader)
				pCrouch = flags.getAt(0)
				pCanCrouch = flags.getAt(1)
				pStance = reader.readFloat()
				
			else
				throw EInvalidParam.new("unsupported version")
			end
		end
		
		/** \brief Write element to file. */
		func void writeToFile(PersistencyEnvironment env, FileWriter writer)
			writer.writeByte(0) // version
			
			var PersistencyFlags flags = PersistencyFlags.new(2)
			flags.setAt(0, pCrouch)
			flags.setAt(1, pCanCrouch)
			flags.writeToFile(writer)
			
			writer.writeFloat(pStance)
		end
	end
	
	
	
	var ECBehaviorLocomotion pLocomotion
	var ECComposeBTSM pBTSMs
	var String pPrefix
	
	
	
	/** \brief Create behavior element class. */
	func new(BehaviorElementClass eclass, ECBehaviorLocomotion locomotion) \
	this(eclass, locomotion, "playerInputCrouch.")
	end
	
	func new(BehaviorElementClass eclass, ECBehaviorLocomotion locomotion, \
	String prefix) super(eclass)
		if getBehaviorIn(eclass) != null
			throw BEMultipleInstanceException.new(eclass, this)
		end
		
		pPrefix = prefix
		pLocomotion = locomotion
		pBTSMs = ECComposeBTSM.new()
		
		eclass.addBehavior(this)
	end
	
	/** \brief Dispose of behavior. */
	func void dispose()
		pLocomotion = null
		pBTSMs = null
		super.dispose()
	end
	
	
	/**
	 * \brief Prefix.
	 * \version 1.26
	 */
	func String getPrefix()
		return pPrefix
	end
	
	/** \brief Locomotion behavior or null. */
	func ECBehaviorLocomotion getLocomotion()
		return pLocomotion
	end
	
	/**
	 * \brief Compose behavior trees and state machines.
	 * \version 1.26
	 */
	func ECComposeBTSM getBTSMs()
		return pBTSMs
	end
	
	
	
	
	/** \brief Get instance in element from owner element class. */
	func Instance instance(BehaviorElement element)
		return element.getInstanceAt(getInstanceIndex()) cast Instance
	end
	
	
	
	/**
	 * \brief Get behavior in element class or \em null if absent.
	 * 
	 * Use this method to check if a particular BehaviorElementClass contains a behavior
	 * of type ECBehaviorPlayerInputCrouch.
	 */
	static func ECBehaviorPlayerInputCrouch getBehaviorIn(BehaviorElementClass eclass)
		return eclass.findBehavior(block ECBehaviorPlayerInputCrouch each
			return true
		end) cast ECBehaviorPlayerInputCrouch
	end
	
	/**
	 * \brief Get instance in element or \em null if absent.
	 * 
	 * Use this method to check if a particular BehaviorElement contains a behavior instance
	 * of type ECBehaviorPlayerInputCrouch.Instance .
	 */
	static func Instance getInstanceIn(BehaviorElement element)
		return element.findInstance(block Instance each
			return true
		end) cast Instance
	end
	
	
	
	/** \brief Create Behavior instance. */
	func ECBehaviorInstance createInstance(BehaviorElement element)
		return Instance.new(this, element)
	end
end
