/* 
 * Drag[en]gine DragonScript Script Module
 *
 * Copyright (C) 2020, Roland Pl√ºss (roland@rptd.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */


namespace Dragengine.Scenery

pin Dragengine.Gui
pin Dragengine.LoadSave
pin Dragengine.Preloading
pin Dragengine.Utils


/**
 * \brief Behavior element behavior adding crouching player input.
 * 
 * Keeps track of crouching player input and applies them to actor locomotion.
 * 
 * This behavior supports persistable element class (setPersistable).
 */
class ECBehaviorPlayerInputCrouch extends DefaultECBehavior
	/** \brief Behavior instance. */
	class Instance extends DefaultECBehaviorInstance
		private var ECBehaviorPlayerInputCrouch pECBehavior
		private var ECBehaviorLocomotion.Instance pLocomotion
		
		private var bool pCrouch
		private var bool pCanCrouch
		private var float pStance
		
		
		
		/** \brief Create instance. */
		public func new( ECBehaviorPlayerInputCrouch ecbehavior, BehaviorElement element ) super( element )
			this.pECBehavior = ecbehavior
		end
		
		/** \brief Dispose of instance. */
		public func void dispose()
			this.pLocomotion = null
			super.dispose()
		end
		
		
		
		/** \brief Initialize element from stub. */
		public func void init( StubElement stub )
			if this.pECBehavior.getLocomotion() != null
				this.pLocomotion = this.pECBehavior.getLocomotion().instance( this.getElement() )
			end
		end
		
		
		
		/** \brief Behavior. */
		public func ECBehaviorPlayerInputCrouch getECBehavior()
			return this.pECBehavior
		end
		
		/** \brief Locomotion behavior or null if absent. */
		public func ECBehaviorLocomotion.Instance getLocomotion()
			return this.pLocomotion
		end
		
		
		
		/** \brief Player is crouching. */
		public func bool getCrouch()
			return this.pCrouch
		end
		
		/** \brief Set if player is crouching. */
		public func void setCrouch( bool crouch )
			if this.pCanCrouch
				this.pCrouch = crouch
				this.updateStance()
			end
		end
		
		/** \brief Toggle crouching. */
		public func void toggleCrouch()
			if this.pCanCrouch
				this.pCrouch = not this.pCrouch
				this.updateStance()
			end
		end
		
		/** \brief Player can change crouch. */
		public func bool getCanCrouch()
			return this.pCanCrouch
		end
		
		/** \brief Set if player can change crouch. */
		public func void setCanCrouch( bool canChangeCrouch )
			this.pCanCrouch = canChangeCrouch
		end
		
		/** \brief Toggle can change crouch. */
		public func void toggleCanCrouch()
			this.pCanCrouch = not this.pCanCrouch
		end
		
		
		
		/** \brief Reset input. */
		public func void reset()
			this.pCrouch = false
			this.updateStance()
		end
		
		
		
		/** \brief Locomotion stance. */
		public func float getStance()
			return this.pStance
		end
		
		/** \brief Set locomotion stance. */
		public func void setStance( float stance )
			this.pStance = stance
		end
		
		/** \brief Update locomotion stance. */
		public func void updateStance()
			if this.pCrouch
				this.pStance = 1
				
			else
				this.pStance = 0
			end
		end
		
		
		
		/** \brief Update locomotion. */
		public func void updateLocomotion( float elapsed )
			if this.pLocomotion != null
				this.pLocomotion.getLocomotion().setStanceGoal( this.pStance )
			end
		end
		
		
		
		/** \brief Read element from file. */
		public func void readFromFile( PersistencyEnvironment env, FileReader reader )
			select reader.readByte() // version
			case 0
				var PersistencyFlags flags = PersistencyFlags.new( 2, reader )
				this.pCrouch = flags.getAt( 0 )
				this.pCanCrouch = flags.getAt( 1 )
				this.pStance = reader.readFloat()
				
			else
				throw EInvalidParam.new( "unsupported version" )
			end
		end
		
		/** \brief Write element to file. */
		public func void writeToFile( PersistencyEnvironment env, FileWriter writer )
			writer.writeByte( 0 ) // version
			
			var PersistencyFlags flags = PersistencyFlags.new( 2 )
			flags.setAt( 0, this.pCrouch )
			flags.setAt( 1, this.pCanCrouch )
			flags.writeToFile( writer )
			
			writer.writeFloat( this.pStance )
		end
	end
	
	
	
	private var ECBehaviorLocomotion pLocomotion
	
	
	
	/** \brief Create behavior element class. */
	public func new( BehaviorElementClass eclass, ECBehaviorLocomotion locomotion ) \
	this( eclass, locomotion, "playerInputCrouch." )
	end
	
	public func new( BehaviorElementClass eclass, ECBehaviorLocomotion locomotion, \
	String prefix ) super( eclass )
		if this.getBehaviorIn( eclass ) != null
			throw BEMultipleInstanceException.new( eclass, this )
		end
		
		this.pLocomotion = locomotion
		
		eclass.addBehavior( this )
	end
	
	/** \brief Dispose of behavior. */
	public func void dispose()
		this.pLocomotion = null
		super.dispose()
	end
	
	
	
	/** \brief Locomotion behavior or null. */
	public func ECBehaviorLocomotion getLocomotion()
		return this.pLocomotion
	end
	
	
	
	/** \brief Get instance in element from owner element class. */
	public func Instance instance( BehaviorElement element )
		return element.getInstanceAt( this.getInstanceIndex() ) cast Instance
	end
	
	
	
	/**
	 * \brief Get behavior in element class or \em null if absent.
	 * 
	 * Use this method to check if a particular BehaviorElementClass contains a behavior
	 * of type ECBehaviorPlayerInputCrouch.
	 */
	static public func ECBehaviorPlayerInputCrouch getBehaviorIn( BehaviorElementClass eclass )
		return eclass.findBehavior( block ECBehaviorPlayerInputCrouch each
			return true
		end ) cast ECBehaviorPlayerInputCrouch
	end
	
	/**
	 * \brief Get instance in element or \em null if absent.
	 * 
	 * Use this method to check if a particular BehaviorElement contains a behavior instance
	 * of type ECBehaviorPlayerInputCrouch.Instance .
	 */
	static public func Instance getInstanceIn( BehaviorElement element )
		return element.findInstance( block Instance each
			return true
		end ) cast Instance
	end
	
	
	
	/** \brief Create Behavior instance. */
	public func ECBehaviorInstance createInstance( BehaviorElement element )
		return Instance.new( this, element )
	end
end
