/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */


namespace Dragengine.Scenery

pin Dragengine.Gui
pin Dragengine.LoadSave
pin Dragengine.Preloading
pin Dragengine.Utils
pin Dragengine.BehaviorTreeSystem
pin Dragengine.StateMachineSystem


/**
 * \brief Behavior element behavior adding player controlling support to actor.
 * 
 * Actors with this behavior can become the player controlled actor. Requires an instance of
 * ECBehaviorPlayerControllable.Tracker to be assigned. The instance keeps track of the active
 * player actor and is typically stored globally in the game. BaseGameApp provides such an
 * instance for easy use.
 * 
 * This behavior can be used only once in the behavior element.
 * 
 * This behavior does not require persistable element class (setPersistable).
 * 
 * If ECBehaviorConversationActor is present adds these conversation conditions and commands:
 * - ECBehaviorPlayerControllable.ConvoCondition
 * - ECBehaviorPlayerControllable.ConvoCommand
 * 
 * See the above mentioned classes for the supported syntax.
 * 
 * \see https://developer.dragondreams.ch/wiki/doku.php/dragengine:modules:dragonscript:behavior_playercontrollable
 */
class ECBehaviorPlayerControllable extends DefaultECBehavior
	/** \brief Keeps track of the active player actor. */
	class Tracker
		/** \brief Listener for tracker events. */
		interface Listener
			/** \brief Active actor changed. */
			func void activeActorChanged(Tracker tracker)
		end
		
		/** \brief Default implementation of tracker listener. */
		class DefaultListener implements Listener
			/** \brief Create default listener. */
			func new()
			end
			
			/** \brief Active actor changed. */
			func void activeActorChanged(Tracker tracker)
			end
		end
		
		
		
		var Instance pActor
		var Array pListeners
		
		
		
		/** \brief Create tracker. */
		func new()
			pListeners = Array.new()
		end
		
		
		
		/** \brief Active actor or null if not assigned. */
		func Instance getActor()
			return pActor
		end
		
		/** \brief Set active actor or null if not assigned. */
		func void setActor(Instance actor)
			if pActor == actor
				return
			end
			
			if pActor != null
				pActor.notifyPlayerReleasesControl()
			end
			
			pActor = actor
			
			if actor != null
				pActor.notifyPlayerTakesControl()
			end
			
			pListeners.forEach(block Listener each
				each.activeActorChanged(this)
			end)
		end
		
		
		
		/** \brief Add listener. */
		func void addListener(Listener listener)
			if listener == null
				throw EInvalidParam.new()
			end
			pListeners.add(listener)
		end
		
		/** \brief Remove listener. */
		func void removeListener(Listener listener)
			pListeners.remove(listener)
		end
	end
	
	/** \brief Listener for behavior instance events. */
	interface Listener
		/** \brief Became active player actor. */
		func void playerTakesControl(Instance instance)
		
		/** \brief Ceased being active player actor. */
		func void playerReleasesControl(Instance instance)
	end
	
	/** \brief Default implementation of behavior instance listener. */
	class DefaultListener implements Listener
		/** \brief Create default listener. */
		func new()
		end
		
		/** \brief Became active player actor. */
		func void playerTakesControl(Instance instance)
		end
		
		/** \brief Ceased being active player actor. */
		func void playerReleasesControl(Instance instance)
		end
	end
	
	/** \brief Factory creating listeners. */
	interface ListenerFactory
		/** \brief Create listener. */
		func Listener createListener(Instance instance)
	end
	
	/** \brief Factory creating listeners using block. */
	class BlockListenerFactory implements ListenerFactory
		var Block pBlock
		
		/** \brief Create factory using block receiving Instance as parameter returning Listener. */
		func new(Block blockFactory)
			if blockFactory == null
				throw ENullPointer.new()
			end
			pBlock = blockFactory
		end
		
		/** \brief Create listener. */
		func Listener createListener(Instance instance)
			return pBlock.run(instance) cast Listener
		end
	end
	
	/**
	 * \brief Conversation condition.
	 * 
	 * Syntax:
	 * playerControllable isPlayerControlled
	 *   Actor is the active player actor.
	 */
	class ConvoCondition implements ECBehaviorConversationActor.ConversationCondition
		var Instance pInstance
		
		func new(Instance instance)
			pInstance = instance
		end
		
		func bool evaluateCondition(ECBehaviorConversationActor.Instance instance, Array arguments)
			var String action = arguments.getAt(1) cast String
			
			if action.equals("isPlayerControlled")
				return pInstance.isPlayerControlled()
				
			else
				throw EInvalidParam.new("Unknown action '" + action + "'")
			end
		end
	end
	
	/**
	 * \brief Conversation command.
	 * 
	 * Syntax:
	 * playerControllable takeControl
	 *   Make actor become the active player actor.
	 */
	class ConvoCommand implements ECBehaviorConversationActor.ConversationCommand
		var Instance pInstance
		
		func new(Instance instance)
			pInstance = instance
		end
		
		func void runCommand(ECBehaviorConversationActor.Instance instance, Array arguments)
			var String action = arguments.getAt(1) cast String
			
			if action.equals("takeControl")
				pInstance.takeControl()
				
			else
				throw EInvalidParam.new("Unknown action '" + action + "'")
			end
		end
	end
	
	/**
	 * \brief Behavior factory.
	 * \version 1.25
	 * 
	 * Automatically assigns these behaviors if present before adding:
	 * - Optional: \ref ECBehaviorConversationActor
	 * 
	 * Example XML element class:
	 * \code{.xml}
	 * <behavior type='ECBehaviorPlayerControllable'>
	 *   <!-- optional: use BaseGameApp player controlled actor.
	 *                  game can add more supported values. default is 'default' -->
	 *   <string name='playerControlledActor'>default</string>
	 *   
	 *   <!-- optional: use behavior tree with id instead of empty string -->
	 *   <string name='behaviorTree'>second</string>
	 *   
	 *   <!-- optional: use state machine with id instead of empty string -->
	 *   <string name='stateMachine'>second</string>
	 * </behavior>
	 * \endcode
	 * 
	 * Element class properties added by the behavior can also be set directly inside the tag
	 * be removing the property name prefix and starting with a "." (for example ".propertyName").
	 */
	class Factory implements BehaviorFactory
		func new()
		end
		
		func String factoryId()
			return "ECBehaviorPlayerControllable"
		end
		
		func ECBehavior addBehavior(BehaviorElementClass eclass, String id, Dictionary parameters)
			if not id.empty()
				throw EInvalidParam.new("id is not empty string")
			end
			var ECBehaviorPlayerControllable behavior = ECBehaviorPlayerControllable.new(eclass,\
				getPlayerControlledActorFor(parameters.getAt("playerControlledActor", "default") cast String))
			
			behavior.setConversationActor(ECBehaviorConversationActor.getBehaviorIn(eclass))
			
			behavior.setBehaviorTree(eclass.sharedFactoryHelper.defaultBehaviorTree(eclass, parameters))
			behavior.setStateMachine(eclass.sharedFactoryHelper.defaultStateMachine(eclass, parameters))
			
			eclass.sharedFactoryHelper.setPropertiesFromParameters(eclass, parameters, "playerControllable")
			return behavior
		end
		
		/**
		 * \brief Trigger table matching value.
		 * 
		 * Default implementation returns \ref BaseGameApp#getTriggerTable() for value 'default'
		 * and null for all other values. Overwrite to accept other values.
		 */
		func Tracker getPlayerControlledActorFor(String value)
			return BehaviorElementClass.sharedFactoryHelper.playerControllableActor(value)
		end
	end
	
	
	
	/** \brief Behavior instance. */
	class Instance extends DefaultECBehaviorInstance
		/**
		 * \brief Behavior tree action "playerControllable.takeControl".
		 * \version 1.26
		 */
		private class BTATakeControl extends BTSMActionCondition
			var Instance pInstance
			
			func new(Instance instance)
				pInstance = instance
			end
			
			func BTResult runAction(Dictionary parameters)
				pInstance.takeControl()
				return BTResult.success
			end
		end
		
		/**
		 * \brief Behavior tree action/condition "playerControllable.check".
		 * \version 1.26
		 */
		private class BTACheck extends BTSMActionCondition
			var Instance pInstance
			var String pPrefix
			
			func new(Instance instance, String prefix)
				pInstance = instance
				pPrefix = prefix
			end
			
			func BTResult runAction(Dictionary parameters)
				return check("", parameters) if BTResult.success\
					else (parameters.has("wait") if BTResult.running else BTResult.failure)
			end
			
			func bool evaluateCondition(Dictionary parameters)
				return check(pPrefix, parameters)
			end
			
			func bool check(String prefix, Dictionary parameters)
				var bool result = true
				var Object value
				
				value = parameters.getAt(prefix + "playerControlled", null)
				if value != null
					result &= pInstance.isPlayerControlled() == value.equals("true")
				end
				
				return result
			end
		end
		
		
		var ECBehaviorPlayerControllable pECBehavior
		var ECBehaviorConversationActor.Instance pConversationActor
		var Tracker pTracker
		var Array pListeners
		
		
		
		/** \brief Create instance. */
		func new(ECBehaviorPlayerControllable ecbehavior, BehaviorElement element) super(element)
			pECBehavior = ecbehavior
			pTracker = ecbehavior.getTracker()
			pListeners = Array.new()
			
			if ecbehavior.getConversationActor() != null
				pConversationActor = ecbehavior.getConversationActor().instance(element)
			end
		end
		
		/** \brief Dispose of instance. */
		func void dispose()
			if pTracker != null
				if pTracker.getActor() == this
					pTracker.setActor(null)
				end
				pTracker = null
			end
			
			pListeners = null
			pConversationActor = null
			super.dispose()
		end
		
		
		
		/** \brief Initialize behavior from stub. */
		func void init(StubElement stub)
			var BehaviorElement element = getElement()
			
			if pConversationActor != null
				pConversationActor.addCondition("playerControllable", ConvoCondition.new(this))
				pConversationActor.addCommand("playerControllable", ConvoCommand.new(this))
			end
			
			pECBehavior.createListeners(this)
			
			if pECBehavior.getBehaviorTree() != null
				var String prefix = "playerControllable."
				var BTContext c = pECBehavior.getBehaviorTree().instance(element).getContext()
				c.setAction(prefix + "takeControl", BTATakeControl.new(this))
				
				var String name = prefix + "check"
				var BTACheck btacheck = BTACheck.new(this, prefix)
				c.setAction(name, btacheck)
				c.setCondition(name, btacheck)
			end
			
			if pECBehavior.getStateMachine() != null
				var String prefix = "playerControllable."
				var SMContext c = pECBehavior.getStateMachine().instance(element).getContext()
				c.setAction(prefix + "takeControl", BTATakeControl.new(this))
				
				var String name = prefix + "check"
				var BTACheck btacheck = BTACheck.new(this, prefix)
				c.setAction(name, btacheck)
				c.setCondition(name, btacheck)
			end
		end
		
		
		
		/** \brief Behavior. */
		func ECBehaviorPlayerControllable getECBehavior()
			return pECBehavior
		end
		
		/** \brief Tracker. */
		func Tracker getTracker()
			return pTracker
		end
		
		
		
		/** \brief Actor is the active player actor. */
		func bool isPlayerControlled()
			return pTracker.getActor() == this
		end
		
		/** \brief Actor is not the active player actor. */
		func bool isNotPlayerControlled()
			return pTracker.getActor() != this
		end
		
		/** \brief Take control of actor. */
		func void takeControl()
			pTracker.setActor(this)
		end
		
		/** \brief Active player actor. */
		func Instance getPlayerControlled()
			return pTracker.getActor()
		end
		
		/** \brief Called by Tracker to notify behavior listeners. */
		func void notifyPlayerTakesControl()
			pListeners.forEach(block Listener each
				each.playerTakesControl(this)
			end)
		end
		
		/** \brief Called by Tracker to notify behavior listeners. */
		func void notifyPlayerReleasesControl()
			pListeners.forEach(block Listener each
				each.playerReleasesControl(this)
			end)
		end
		
		
		
		/** \brief Add listener. */
		func void addListener(Listener listener)
			if listener == null
				throw EInvalidParam.new()
			end
			pListeners.add(listener)
		end
		
		/** \brief Remove listener. */
		func void removeListener(Listener listener)
			pListeners.remove(listener)
		end
	end
	
	
	
	var Tracker pTracker
	var ECBehaviorConversationActor pConversationActor
	var Array pListenerFactories
	var ECBehaviorBehaviorTree pBehaviorTree
	var ECBehaviorStateMachine pStateMachine
	
	
	/** \brief Create behavior element class. */
	func new(BehaviorElementClass eclass) \
	this(eclass, BaseGameApp.getApp().getPlayerControlledActor())
	end
	
	func new(BehaviorElementClass eclass, Tracker tracker) super(eclass)
		if tracker == null
			throw ENullPointer.new("tracker")
		end
		if getBehaviorIn(eclass) != null
			throw BEMultipleInstanceException.new(eclass, this)
		end
		
		pTracker = tracker
		pListenerFactories = Array.new()
		
		eclass.addBehavior(this)
	end
	
	/** \brief Dispose of behavior. */
	func void dispose()
		pConversationActor = null
		pListenerFactories = null
		pBehaviorTree = null
		pStateMachine = null
		super.dispose()
	end
	
	
	
	/** \brief Tracker. */
	func Tracker getTracker()
		return pTracker
	end
	
	/** \brief Set tracker. */
	func void setTracker(Tracker tracker)
		if tracker == null
			throw ENullPointer.new("tracker")
		end
		pTracker = tracker
	end
	
	/** \brief Conversation actor behavior or null. */
	func ECBehaviorConversationActor getConversationActor()
		return pConversationActor
	end
	
	/**
	 * \brief Set conversation actor or null.
	 * 
	 * If set adds conversation condition and command.
	 */
	func void setConversationActor(ECBehaviorConversationActor conversationActor)
		pConversationActor = conversationActor
	end
	
	/**
	 * \brief Behavior tree or null.
	 * \version 1.26
	 */
	func ECBehaviorBehaviorTree getBehaviorTree()
		return pBehaviorTree
	end
	
	/**
	 * \brief Set behavior tree or null.
	 * \version 1.26
	 */
	func void setBehaviorTree(ECBehaviorBehaviorTree behaviorTree)
		pBehaviorTree = behaviorTree
	end
	
	/**
	 * \brief State machine or null.
	 * \version 1.26
	 */
	func ECBehaviorStateMachine getStateMachine()
		return pStateMachine
	end
	
	/**
	 * \brief Set state machine or null.
	 * \version 1.26
	 */
	func void setStateMachine(ECBehaviorStateMachine stateMachine)
		pStateMachine = stateMachine
	end
	
	
	/** \brief Add listener factory. */
	func void addListenerFactory(ListenerFactory factory)
		if factory == null
			throw ENullPointer.new()
		end
		pListenerFactories.add(factory)
	end
	
	/**
	 * \brief Add listener factory using block.
	 * 
	 * Block receives as parameter Instance and returns Listener.
	 */
	func void addListenerFactory(Block blockFactory)
		pListenerFactories.add(BlockListenerFactory.new(blockFactory))
	end
	
	/** \brief Visit listener factories with block with argument ListenerFactory. */
	func void forEachListenerFactory(Block ablock)
		pListenerFactories.forEach(ablock)
	end
	
	/** \brief Create listeners from factories adding them to behavior instance. */
	func void createListeners(Instance instance)
		pListenerFactories.forEach(block ListenerFactory each
			instance.addListener(each.createListener(instance))
		end)
	end
	
	
	
	/** \brief Get instance in element from owner element class. */
	func Instance instance(BehaviorElement element)
		return element.getInstanceAt(getInstanceIndex()) cast Instance
	end
	
	
	
	/**
	 * \brief Get behavior in element class or \em null if absent.
	 * 
	 * Use this method to check if a particular BehaviorElementClass contains a behavior
	 * of type ECBehaviorPlayerControllable.
	 */
	static func ECBehaviorPlayerControllable getBehaviorIn(BehaviorElementClass eclass)
		return eclass.findBehavior(block ECBehaviorPlayerControllable each
			return true
		end) cast ECBehaviorPlayerControllable
	end
	
	/**
	 * \brief Get instance in element or \em null if absent.
	 * 
	 * Use this method to check if a particular BehaviorElement contains a behavior instance
	 * of type ECBehaviorPlayerControllable.Instance .
	 */
	static func Instance getInstanceIn(BehaviorElement element)
		return element.findInstance(block Instance each
			return true
		end) cast Instance
	end
	
	
	
	/** \brief Create Behavior instance. */
	func ECBehaviorInstance createInstance(BehaviorElement element)
		return Instance.new(this, element)
	end
end
