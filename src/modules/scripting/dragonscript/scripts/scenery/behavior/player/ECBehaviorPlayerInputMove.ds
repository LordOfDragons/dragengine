/* 
 * Drag[en]gine DragonScript Script Module
 *
 * Copyright (C) 2020, Roland PlÃ¼ss (roland@rptd.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */


namespace Dragengine.Scenery

pin Dragengine.Gui
pin Dragengine.LoadSave
pin Dragengine.Preloading
pin Dragengine.Utils


/**
 * \brief Behavior element behavior adding moving player input.
 * 
 * Keeps track of moving player input and applies them to actor locomotion. The type of
 * locomotion can be set to one of three typical configurations.
 * 
 * This behavior can be used for human actor and vehicle movement.
 * 
 * This behavior supports persistable element class (setPersistable).
 */
class ECBehaviorPlayerInputMove extends DefaultECBehavior
	/** \brief Locomotion type. */
	public enum LocomotionType
		/**
		 * Default locomotion working best for actors moving in a natural way. The actor
		 * moves into the direction it is looking. The body is oriented into the walking
		 * direction if the actor is moving.
		 * 
		 * Interferes with ECBehaviorPlayerInputTurn since both behaviors modify the locomotion
		 * turning value.
		 */
		natural
		
		/**
		 * Configuration useful for FPS type games where the actor is always oriented into
		 * the direction the player is looking. This configuration typically uses an
		 * 8-direction animator representing the actor moving into any direction relative to
		 * the looking direction.
		 * 
		 * Interferes with ECBehaviorPlayerInputTurn since both behaviors modify the locomotion
		 * turning value.
		 */
		fps
		
		/**
		 * Configuration useful for vehicle type actors like tanks which move into the
		 * direction their body is oriented while allowing to freely look around.
		 * 
		 * Does not interfere with ECBehaviorPlayerInputTurn since this behavior does not
		 * modify the locomotion turning value.
		 */
		vehicle
	end
	
	/** \brief Behavior instance. */
	class Instance extends DefaultECBehaviorInstance
		private var ECBehaviorPlayerInputMove pECBehavior
		private var ECBehaviorLocomotion.Instance pLocomotion
		
		private var LocomotionType pLocomotionType
		
		private var bool pMoveForward
		private var bool pMoveBackward
		private var bool pMoveLeft
		private var bool pMoveRight
		private var float pAnalogMoveForwardBackward
		private var float pAnalogMoveLeftRight
		private var float pAnalogMoveForwardBackwardSticky
		private var float pAnalogMoveLeftRightSticky
		private var bool pCanMove
		
		private var bool pRun
		private var float pSpeedWalk
		private var float pSpeedFactorWalkForward
		private var float pSpeedFactorWalkBackward
		private var float pSpeedFactorWalkLeft
		private var float pSpeedFactorWalkRight
		private var float pSpeedRun
		private var float pSpeedFactorRunForward
		private var float pSpeedFactorRunBackward
		private var float pSpeedFactorRunLeft
		private var float pSpeedFactorRunRight
		
		private var float pMovingDirection
		private var float pMovingBodyTurn
		private var float pMovingSpeed
		
		
		
		/** \brief Create instance. */
		public func new( ECBehaviorPlayerInputMove ecbehavior, BehaviorElement element ) super( element )
			this.pECBehavior = ecbehavior
			
			this.pLocomotionType = LocomotionType.natural
			this.pCanMove = true
			
			this.pSpeedFactorWalkForward = 1
			this.pSpeedFactorWalkBackward = 1
			this.pSpeedFactorWalkLeft = 1
			this.pSpeedFactorWalkRight = 1
			
			this.pSpeedFactorRunForward = 1
			this.pSpeedFactorRunBackward = 1
			this.pSpeedFactorRunLeft = 1
			this.pSpeedFactorRunRight = 1
		end
		
		/** \brief Dispose of instance. */
		public func void dispose()
			this.pLocomotion = null
			super.dispose()
		end
		
		
		
		/** \brief Initialize element from stub. */
		public func void init( StubElement stub )
			if this.pECBehavior.getLocomotion() != null
				this.pLocomotion = this.pECBehavior.getLocomotion().instance( this.getElement() )
			end
			
			this.pSpeedWalk = this.pECBehavior.getSpeedWalk().getValue( stub )
			this.pSpeedFactorWalkForward = this.pECBehavior.getSpeedFactorWalkForward().getValue( stub )
			this.pSpeedFactorWalkBackward = this.pECBehavior.getSpeedFactorWalkBackward().getValue( stub )
			this.pSpeedFactorWalkLeft = this.pECBehavior.getSpeedFactorWalkLeft().getValue( stub )
			this.pSpeedFactorWalkRight = this.pECBehavior.getSpeedFactorWalkRight().getValue( stub )
			
			this.pSpeedRun = this.pECBehavior.getSpeedRun().getValue( stub )
			this.pSpeedFactorRunForward = this.pECBehavior.getSpeedFactorRunForward().getValue( stub )
			this.pSpeedFactorRunBackward = this.pECBehavior.getSpeedFactorRunBackward().getValue( stub )
			this.pSpeedFactorRunLeft = this.pECBehavior.getSpeedFactorRunLeft().getValue( stub )
			this.pSpeedFactorRunRight = this.pECBehavior.getSpeedFactorRunRight().getValue( stub )
		end
		
		
		
		/** \brief Behavior. */
		public func ECBehaviorPlayerInputMove getECBehavior()
			return this.pECBehavior
		end
		
		/** \brief Locomotion behavior or null if absent. */
		public func ECBehaviorLocomotion.Instance getLocomotion()
			return this.pLocomotion
		end
		
		
		
		/** \brief Locomotion type. */
		public func LocomotionType getLocomotionType()
			return this.pLocomotionType
		end
		
		/** \brief Set locomotion type. */
		public func void setLocomotionType( LocomotionType type )
			this.pLocomotionType = type
		end
		
		
		
		/** \brief Move forward key is pressed. */
		public func bool getMoveForward()
			return this.pMoveForward
		end
		
		/** \brief Set if move forward key is pressed. */
		public func void setMoveForward( bool pressed )
			this.pMoveForward = pressed
		end
		
		/** \brief Toggle move forward key pressed. */
		public func void toggleMoveForward()
			this.pMoveForward = not this.pMoveForward
		end
		
		/** \brief Move backward key is pressed. */
		public func bool getMoveBackward()
			return this.pMoveBackward
		end
		
		/** \brief Set if move backward key is pressed. */
		public func void setMoveBackward( bool pressed )
			this.pMoveBackward = pressed
		end
		
		/** \brief Toggle move backward key pressed. */
		public func void toggleMoveBackward()
			this.pMoveBackward = not this.pMoveBackward
		end
		
		/** \brief Move left key is pressed. */
		public func bool getMoveLeft()
			return this.pMoveLeft
		end
		
		/** \brief Set if move left key is pressed. */
		public func void setMoveLeft( bool pressed )
			this.pMoveLeft = pressed
		end
		
		/** \brief Toggle move left key pressed. */
		public func void toggleMoveLeft()
			this.pMoveLeft = not this.pMoveLeft
		end
		
		/** \brief Move right key is pressed. */
		public func bool getMoveRight()
			return this.pMoveRight
		end
		
		/** \brief Set if move right key is pressed. */
		public func void setMoveRight( bool pressed )
			this.pMoveRight = pressed
		end
		
		/** \brief Toggle move right key pressed. */
		public func void toggleMoveRight()
			this.pMoveRight = not this.pMoveRight
		end
		
		/** \brief Analog move forward backward. */
		public func float getAnalogMoveForwardBackward()
			return this.pAnalogMoveForwardBackward
		end
		
		/** \brief Set analog move forward backward. */
		public func void setAnalogMoveForwardBackward( float value )
			this.pAnalogMoveForwardBackward = value
		end
		
		/** \brief Analog move left right. */
		public func float getAnalogMoveLeftRight()
			return this.pAnalogMoveLeftRight
		end
		
		/** \brief Set analog move left right. */
		public func void setAnalogMoveLeftRight( float value )
			this.pAnalogMoveLeftRight = value
		end
		
		/** \brief Sticky analog move forward backward. */
		public func float getAnalogMoveForwardBackwardSticky()
			return this.pAnalogMoveForwardBackwardSticky
		end
		
		/** \brief Set sticky analog move forward backward. */
		public func void setAnalogMoveForwardBackwardSticky( float value )
			this.pAnalogMoveForwardBackwardSticky = value
		end
		
		/** \brief Sticky analog move left right. */
		public func float getAnalogMoveLeftRightSticky()
			return this.pAnalogMoveLeftRightSticky
		end
		
		/** \brief Set sticky analog move left right. */
		public func void setAnalogMoveLeftRightSticky( float value )
			this.pAnalogMoveLeftRightSticky = value
		end
		
		/** \brief Player can move. */
		public func bool getCanMove()
			return this.pCanMove
		end
		
		/** \brief Set if player can move. */
		public func void setCanMove( bool canMove )
			this.pCanMove = canMove
		end
		
		/** \brief Toggle can move. */
		public func void toggleCanMove()
			this.pCanMove = not this.pCanMove
		end
		
		/** \brief Player is moving. */
		public func bool isMoving()
			return this.pCanMove and ( this.pMoveForward or this.pMoveBackward \
				or this.pMoveLeft or this.pMoveRight \
				or DEMath.fabs( this.pAnalogMoveForwardBackward ) > 0.01 \
				or DEMath.fabs( this.pAnalogMoveForwardBackwardSticky ) > 0.01 )
		end
		
		
		
		/** \brief Run key is pressed. */
		public func bool getRun()
			return this.pRun
		end
		
		/** \brief Set if run key is pressed. */
		public func void setRun( bool pressed )
			this.pRun = pressed
			this.updateMovingSpeed()
		end
		
		/** \brief Toggle run key pressed. */
		public func void toggleRun()
			this.pRun = not this.pRun
			this.updateMovingSpeed()
		end
		
		
		
		/** \brief Walk speed. */
		public func float getSpeedWalk()
			return this.pSpeedWalk
		end
		
		/** \brief Set walk speed. */
		public func void setSpeedWalk( float speed )
			this.pSpeedWalk = DEMath.max( speed, 0.0 )
			this.updateMovingSpeed()
		end
		
		/** \brief Speed factor Walk forward. */
		public func float getSpeedFactorWalkForward()
			return this.pSpeedFactorWalkForward
		end
		
		/** \brief Set speed factor walk forward. */
		public func void setSpeedFactorWalkForward( float speed )
			this.pSpeedFactorWalkForward = DEMath.max( speed, 0.0 )
			this.updateMovingSpeed()
		end
		
		/** \brief Speed factor walk backward. */
		public func float getSpeedFactorWalkBackward()
			return this.pSpeedFactorWalkBackward
		end
		
		/** \brief Set speed factor walk backward. */
		public func void setSpeedFactorWalkBackward( float speed )
			this.pSpeedFactorWalkBackward = DEMath.max( speed, 0.0 )
			this.updateMovingSpeed()
		end
		
		/** \brief Speed factor walk left. */
		public func float getSpeedFactorWalkLeft()
			return this.pSpeedFactorWalkLeft
		end
		
		/** \brief Set speed factor walk left. */
		public func void setSpeedFactorWalkLeft( float speed )
			this.pSpeedFactorWalkLeft = DEMath.max( speed, 0.0 )
			this.updateMovingSpeed()
		end
		
		/** \brief Speed factor walk right. */
		public func float getSpeedFactorWalkRight()
			return this.pSpeedFactorWalkRight
		end
		
		/** \brief Set speed factor walk right. */
		public func void setSpeedFactorWalkRight( float speed )
			this.pSpeedFactorWalkRight = DEMath.max( speed, 0.0 )
			this.updateMovingSpeed()
		end
		
		
		
		/** \brief Run speed. */
		public func float getSpeedRun()
			return this.pSpeedRun
		end
		
		/** \brief Set run speed. */
		public func void setSpeedRun( float speed )
			this.pSpeedRun = DEMath.max( speed, 0.0 )
			this.updateMovingSpeed()
		end
		
		/** \brief Speed factor run forward. */
		public func float getSpeedFactorRunForward()
			return this.pSpeedFactorRunForward
		end
		
		/** \brief Set speed factor walk forward. */
		public func void setSpeedFactorRunForward( float speed )
			this.pSpeedFactorRunForward = DEMath.max( speed, 0.0 )
			this.updateMovingSpeed()
		end
		
		/** \brief Speed factor run backward. */
		public func float getSpeedFactorRunBackward()
			return this.pSpeedFactorRunBackward
		end
		
		/** \brief Set speed factor walk backward. */
		public func void setSpeedFactorRunBackward( float speed )
			this.pSpeedFactorRunBackward = DEMath.max( speed, 0.0 )
			this.updateMovingSpeed()
		end
		
		/** \brief Speed factor run left. */
		public func float getSpeedFactorRunLeft()
			return this.pSpeedFactorRunLeft
		end
		
		/** \brief Set speed factor walk left. */
		public func void setSpeedFactorRunLeft( float speed )
			this.pSpeedFactorRunLeft = DEMath.max( speed, 0.0 )
			this.updateMovingSpeed()
		end
		
		/** \brief Speed factor run right. */
		public func float getSpeedFactorRunRight()
			return this.pSpeedFactorRunRight
		end
		
		/** \brief Set speed factor walk right. */
		public func void setSpeedFactorRunRight( float speed )
			this.pSpeedFactorRunRight = DEMath.max( speed, 0.0 )
			this.updateMovingSpeed()
		end
		
		
		
		/** \brief Reset input. */
		public func void reset()
			this.pMoveForward = false
			this.pMoveBackward = false
			this.pMoveLeft = false
			this.pMoveRight = false
			this.pAnalogMoveForwardBackward = 0
			this.pAnalogMoveLeftRight = 0
			this.pAnalogMoveForwardBackwardSticky = 0
			this.pAnalogMoveLeftRightSticky = 0
			this.pMovingDirection = 0
			this.pMovingBodyTurn = 0
			this.pMovingSpeed = 0
		end
		
		
		
		/** \brief Locomotion moving direction. */
		public func float getMovingDirection()
			return this.pMovingDirection
		end
		
		/** \brief Set locomotion moving direction. */
		public func void setMovingDirection( float direction )
			this.pMovingDirection = DEMath.normalize( direction, -180.0, 180.0 )
		end
		
		/** \brief Locomotion moving speed. */
		public func float getMovingSpeed()
			return this.pMovingSpeed
		end
		
		/** \brief Set locomotion moving speed. */
		public func void setMovingSpeed( float speed )
			this.pMovingSpeed = speed
		end
		
		
		
		/** \brief Calculate moving direction. */
		public func float calculateMovingDirection()
			// movement using analog input
			var float analogFB = this.pAnalogMoveForwardBackward + this.pAnalogMoveForwardBackwardSticky
			var float analogLR = this.pAnalogMoveLeftRight + this.pAnalogMoveLeftRightSticky
			var bool hasMovingDirectionAnalog = false
			var float movingDirectionAnalog = 0
			
			if DEMath.fabs( analogFB ) > 0.01 or DEMath.fabs( analogLR ) > 0
				movingDirectionAnalog = DEMath.atan2( -analogLR, analogFB )
				hasMovingDirectionAnalog = true
			end
			
			// movement using digital input
			var bool hasMovingDirectionDigital = false
			var float movingDirectionDigital = 0
			
			if this.pMoveForward
				if this.pMoveLeft
					movingDirectionDigital = 45
					
				elif this.pMoveRight
					movingDirectionDigital = -45
				end
				hasMovingDirectionDigital = true
				
			elif this.pMoveBackward
				if this.pMoveLeft
					movingDirectionDigital = 135
					
				elif this.pMoveRight
					movingDirectionDigital = -135
					
				else
					movingDirectionDigital = 180
				end
				hasMovingDirectionDigital = true
				
			elif this.pMoveLeft
				movingDirectionDigital = 90
				hasMovingDirectionDigital = true
				
			elif this.pMoveRight
				movingDirectionDigital = -90
				hasMovingDirectionDigital = true
			end
			
			// combine moving speeds
			if hasMovingDirectionAnalog and hasMovingDirectionDigital
				return ( movingDirectionDigital + movingDirectionAnalog ) * 0.5
				
			elif hasMovingDirectionAnalog
				return movingDirectionAnalog
				
			elif hasMovingDirectionDigital
				return movingDirectionDigital
				
			else
				return 0
			end
		end
		
		/** \brief Calculate moving speed. */
		public func float calculateMovingSpeed()
			if not this.pCanMove
				return 0
			end
			
			// analog movement
			var float analogFB = this.pAnalogMoveForwardBackward + this.pAnalogMoveForwardBackwardSticky
			var float analogLR = this.pAnalogMoveLeftRight + this.pAnalogMoveLeftRightSticky
			var float movingSpeedAnalog = Vector2.new( analogFB, analogLR ).getLength()
			
			if DEMath.fabs( movingSpeedAnalog ) > 0.001
				var float orientation = DEMath.atan2( -analogLR, analogFB )
				
				if orientation < -90
					movingSpeedAnalog *= DEMath.linearStep( orientation, -180.0, -90.0, \
						this.pSpeedFactorRunBackward, this.pSpeedFactorRunRight )
					
				elif orientation < 0
					movingSpeedAnalog *= DEMath.linearStep( orientation, -90.0, 0.0, \
						this.pSpeedFactorRunRight, this.pSpeedFactorRunForward )
					
				elif orientation < 90
					movingSpeedAnalog *= DEMath.linearStep( orientation, 0.0, 90.0, \
						this.pSpeedFactorRunForward, this.pSpeedFactorRunLeft )
					
				else
					movingSpeedAnalog *= DEMath.linearStep( orientation, 90.0, 180.0, \
						this.pSpeedFactorRunLeft, this.pSpeedFactorRunBackward )
				end
				
				movingSpeedAnalog *= this.pSpeedRun
				
			else
				movingSpeedAnalog = 0
			end
			
			// digital movement
			var float movingSpeedDigital = 0
			
			if this.pRun
				if this.pMoveForward
					if this.pMoveLeft
						movingSpeedDigital = this.pSpeedRun * ( this.pSpeedFactorRunForward + this.pSpeedFactorRunLeft ) * 0.5
						
					elif this.pMoveRight
						movingSpeedDigital = this.pSpeedRun * ( this.pSpeedFactorRunForward + this.pSpeedFactorRunRight ) * 0.5
						
					else
						movingSpeedDigital = this.pSpeedRun * this.pSpeedFactorRunForward
					end
					
				elif this.pMoveBackward
					if this.pMoveLeft
						movingSpeedDigital = this.pSpeedRun * ( this.pSpeedFactorRunBackward + this.pSpeedFactorRunLeft ) * 0.5
						
					elif this.pMoveRight
						movingSpeedDigital = this.pSpeedRun * ( this.pSpeedFactorRunBackward + this.pSpeedFactorRunRight ) * 0.5
						
					else
						movingSpeedDigital = this.pSpeedRun * this.pSpeedFactorRunBackward
					end
					
				elif this.pMoveLeft
					movingSpeedDigital = this.pSpeedRun * this.pSpeedFactorRunLeft
					
				elif this.pMoveRight
					movingSpeedDigital = this.pSpeedRun * this.pSpeedFactorRunRight
				end
				
			else
				if this.pMoveForward
					if this.pMoveLeft
						movingSpeedDigital = this.pSpeedWalk * ( this.pSpeedFactorWalkForward + this.pSpeedFactorWalkLeft ) * 0.5
						
					elif this.pMoveRight
						movingSpeedDigital = this.pSpeedWalk * ( this.pSpeedFactorWalkForward + this.pSpeedFactorWalkRight ) * 0.5
						
					else
						movingSpeedDigital = this.pSpeedWalk * this.pSpeedFactorWalkForward
					end
					
				elif this.pMoveBackward
					if this.pMoveLeft
						movingSpeedDigital = this.pSpeedWalk * ( this.pSpeedFactorWalkBackward + this.pSpeedFactorWalkLeft ) * 0.5
						
					elif this.pMoveRight
						movingSpeedDigital = this.pSpeedWalk * ( this.pSpeedFactorWalkBackward + this.pSpeedFactorWalkRight ) * 0.5
						
					else
						movingSpeedDigital = this.pSpeedWalk * this.pSpeedFactorWalkBackward
					end
					
				elif this.pMoveLeft
					movingSpeedDigital = this.pSpeedWalk * this.pSpeedFactorWalkLeft
					
				elif this.pMoveRight
					movingSpeedDigital = this.pSpeedWalk * this.pSpeedFactorWalkRight
				end
			end
			
			// combine moving speeds
			return DEMath.max( movingSpeedDigital, movingSpeedAnalog )
		end
		
		
		
		
		/** \brief Update moving direction and moving body turn. */
		public func void updateMovingDirection()
			this.pMovingDirection = this.calculateMovingDirection()
			
			// body turn
			if this.isMoving()
				// slightly larger than 90 degrees required to get normalizing affecting only
				// moving orientations pointing strictly backwards
				this.pMovingBodyTurn = DEMath.normalize( this.pMovingDirection, -90.1, 90.1 )
				
			else
				this.pMovingBodyTurn = 0
			end
		end
		
		/** \brief Update moving speed. */
		public func void updateMovingSpeed()
			this.pMovingSpeed = this.calculateMovingSpeed()
		end
		
		/**
		 * \brief Update locomotion.
		 */
		public func void updateLocomotion( float elapsed )
			this.updateMovingDirection()
			this.updateMovingSpeed()
			
			this.pAnalogMoveForwardBackward = 0
			this.pAnalogMoveLeftRight = 0
			
			if this.pLocomotion == null
				return
			end
			
			var Locomotion locomotion = this.pLocomotion.getLocomotion()
			locomotion.setAnalogMovingSpeed( this.pMovingSpeed )
			
			select this.pLocomotionType
			case LocomotionType.natural
				locomotion.setAnalogMovingHorizontalGoal( this.pMovingDirection + locomotion.getLookHorizontalGoal() )
				if this.pMovingSpeed > 0.001 or not locomotion.getCanTurnInPlace()
					locomotion.setTurnHorizontal( locomotion.getLookHorizontalGoal() + this.pMovingBodyTurn )
					
				else
					locomotion.setTurnHorizontal( 0 )
				end
				
			case LocomotionType.fps
				locomotion.setAnalogMovingHorizontalGoal( this.pMovingDirection )
				locomotion.setTurnHorizontal( locomotion.getLookHorizontalGoal() )
				
			case LocomotionType.vehicle
				locomotion.setAnalogMovingHorizontalGoal( this.pMovingDirection )
			end
		end
		
		
		
		/** \brief Read element from file. */
		public func void readFromFile( PersistencyEnvironment env, FileReader reader )
			select reader.readByte() // version
			case 0
				var PersistencyFlags flags = PersistencyFlags.new( 2, reader )
				this.pCanMove = flags.getAt( 0 )
				this.pRun = flags.getAt( 1 )
				
				this.pLocomotionType = LocomotionType.withOrder( reader.readByte() )
				
				this.pSpeedWalk = reader.readFloat()
				this.pSpeedFactorWalkForward = reader.readFloat()
				this.pSpeedFactorWalkBackward = reader.readFloat()
				this.pSpeedFactorWalkLeft = reader.readFloat()
				this.pSpeedFactorWalkRight = reader.readFloat()
				
				this.pSpeedRun = reader.readFloat()
				this.pSpeedFactorRunForward = reader.readFloat()
				this.pSpeedFactorRunBackward = reader.readFloat()
				this.pSpeedFactorRunLeft = reader.readFloat()
				this.pSpeedFactorRunRight = reader.readFloat()
				
			else
				throw EInvalidParam.new( "unsupported version" )
			end
		end
		
		/** \brief Write element to file. */
		public func void writeToFile( PersistencyEnvironment env, FileWriter writer )
			writer.writeByte( 0 ) // version
			
			var PersistencyFlags flags = PersistencyFlags.new( 2 )
			flags.setAt( 0, this.pCanMove )
			flags.setAt( 1, this.pRun )
			flags.writeToFile( writer )
			
			writer.writeByte( this.pLocomotionType.order() )
			
			writer.writeFloat( this.pSpeedWalk )
			writer.writeFloat( this.pSpeedFactorWalkForward )
			writer.writeFloat( this.pSpeedFactorWalkBackward )
			writer.writeFloat( this.pSpeedFactorWalkLeft )
			writer.writeFloat( this.pSpeedFactorWalkRight )
			
			writer.writeFloat( this.pSpeedRun )
			writer.writeFloat( this.pSpeedFactorRunForward )
			writer.writeFloat( this.pSpeedFactorRunBackward )
			writer.writeFloat( this.pSpeedFactorRunLeft )
			writer.writeFloat( this.pSpeedFactorRunRight )
		end
	end
	
	
	
	private var ECBehaviorLocomotion pLocomotion
	private var ECPFloat pSpeedWalk
	private var ECPFloat pSpeedRun
	private var ECPFloat pSpeedFactorWalkForward
	private var ECPFloat pSpeedFactorWalkBackward
	private var ECPFloat pSpeedFactorWalkLeft
	private var ECPFloat pSpeedFactorWalkRight
	private var ECPFloat pSpeedFactorRunForward
	private var ECPFloat pSpeedFactorRunBackward
	private var ECPFloat pSpeedFactorRunLeft
	private var ECPFloat pSpeedFactorRunRight
	
	
	
	/** \brief Create behavior element class. */
	public func new( BehaviorElementClass eclass, ECBehaviorLocomotion locomotion ) \
	this( eclass, locomotion, "playerInputMove." )
	end
	
	public func new( BehaviorElementClass eclass, ECBehaviorLocomotion locomotion, \
	String prefix ) super( eclass )
		if this.getBehaviorIn( eclass ) != null
			throw BEMultipleInstanceException.new( eclass, this )
		end
		
		this.pLocomotion = locomotion
		
		this.pSpeedWalk = ECPFloat.new( prefix + "speedWalk", 1.25, 0 )
		eclass.addProperty( this.pSpeedWalk )
		
		this.pSpeedRun = ECPFloat.new( prefix + "speedRun", 4, 0 )
		eclass.addProperty( this.pSpeedRun )
		
		this.pSpeedFactorWalkForward = ECPFloat.new( prefix + "speedFactorWalkForward", 1, 0 )
		eclass.addProperty( this.pSpeedFactorWalkForward )
		
		this.pSpeedFactorWalkBackward = ECPFloat.new( prefix + "speedFactorWalkBackward", 1, 0 )
		eclass.addProperty( this.pSpeedFactorWalkBackward )
		
		this.pSpeedFactorWalkLeft = ECPFloat.new( prefix + "speedFactorWalkLeft", 1, 0 )
		eclass.addProperty( this.pSpeedFactorWalkLeft )
		
		this.pSpeedFactorWalkRight = ECPFloat.new( prefix + "speedFactorWalkRight", 1, 0 )
		eclass.addProperty( this.pSpeedFactorWalkRight )
		
		this.pSpeedFactorRunForward = ECPFloat.new( prefix + "speedFactorRunForward", 1, 0 )
		eclass.addProperty( this.pSpeedFactorRunForward )
		
		this.pSpeedFactorRunBackward = ECPFloat.new( prefix + "speedFactorRunBackward", 1, 0 )
		eclass.addProperty( this.pSpeedFactorRunBackward )
		
		this.pSpeedFactorRunLeft = ECPFloat.new( prefix + "speedFactorRunLeft", 1, 0 )
		eclass.addProperty( this.pSpeedFactorRunLeft )
		
		this.pSpeedFactorRunRight = ECPFloat.new( prefix + "speedFactorRunRight", 1, 0 )
		eclass.addProperty( this.pSpeedFactorRunRight )
		
		eclass.addBehavior( this )
	end
	
	/** \brief Dispose of behavior. */
	public func void dispose()
		this.pLocomotion = null
		super.dispose()
	end
	
	
	
	/** \brief Locomotion behavior or null. */
	public func ECBehaviorLocomotion getLocomotion()
		return this.pLocomotion
	end
	
	/** \brief Walk speed. */
	public func ECPFloat getSpeedWalk()
		return this.pSpeedWalk
	end
	
	/** \brief Run speed. */
	public func ECPFloat getSpeedRun()
		return this.pSpeedRun
	end
	
	/** \brief Speed factor Walk forward. */
	public func ECPFloat getSpeedFactorWalkForward()
		return this.pSpeedFactorWalkForward
	end
	
	/** \brief Speed factor walk backward. */
	public func ECPFloat getSpeedFactorWalkBackward()
		return this.pSpeedFactorWalkBackward
	end
	
	/** \brief Speed factor walk left. */
	public func ECPFloat getSpeedFactorWalkLeft()
		return this.pSpeedFactorWalkLeft
	end
	
	/** \brief Speed factor walk right. */
	public func ECPFloat getSpeedFactorWalkRight()
		return this.pSpeedFactorWalkRight
	end
	
	/** \brief Speed factor Run forward. */
	public func ECPFloat getSpeedFactorRunForward()
		return this.pSpeedFactorRunForward
	end
	
	/** \brief Speed factor run backward. */
	public func ECPFloat getSpeedFactorRunBackward()
		return this.pSpeedFactorRunBackward
	end
	
	/** \brief Speed factor run left. */
	public func ECPFloat getSpeedFactorRunLeft()
		return this.pSpeedFactorRunLeft
	end
	
	/** \brief Speed factor run right. */
	public func ECPFloat getSpeedFactorRunRight()
		return this.pSpeedFactorRunRight
	end
	
	
	
	/** \brief Get instance in element from owner element class. */
	public func Instance instance( BehaviorElement element )
		return element.getInstanceAt( this.getInstanceIndex() ) cast Instance
	end
	
	
	
	/**
	 * \brief Get behavior in element class or \em null if absent.
	 * 
	 * Use this method to check if a particular BehaviorElementClass contains a behavior
	 * of type ECBehaviorPlayerInputMove.
	 */
	static public func ECBehaviorPlayerInputMove getBehaviorIn( BehaviorElementClass eclass )
		return eclass.findBehavior( block ECBehaviorPlayerInputMove each
			return true
		end ) cast ECBehaviorPlayerInputMove
	end
	
	/**
	 * \brief Get instance in element or \em null if absent.
	 * 
	 * Use this method to check if a particular BehaviorElement contains a behavior instance
	 * of type ECBehaviorPlayerInputMove.Instance .
	 */
	static public func Instance getInstanceIn( BehaviorElement element )
		return element.findInstance( block Instance each
			return true
		end ) cast Instance
	end
	
	
	
	/** \brief Create Behavior instance. */
	public func ECBehaviorInstance createInstance( BehaviorElement element )
		return Instance.new( this, element )
	end
end
