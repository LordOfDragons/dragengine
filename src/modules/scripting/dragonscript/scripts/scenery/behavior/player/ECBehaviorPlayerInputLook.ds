/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */


namespace Dragengine.Scenery

pin Dragengine.Gui
pin Dragengine.LoadSave
pin Dragengine.Preloading
pin Dragengine.Utils
pin Dragengine.BehaviorTreeSystem
pin Dragengine.StateMachineSystem


/**
 * \brief Behavior element behavior adding looking around player input.
 * 
 * Keeps track of looking around player input and applies them to actor locomotion.
 * 
 * This behavior supports persistable element class (setPersistable).
 * 
 * \par Digital Input
 * 
 * Supports digital input by player for looking left-right and up-down using digital input
 * devices like keyboard or game pad buttons. The setSpeedLookHorizontal() and
 * setSpeedLookVertical() methods set the speed of looking while the input is enabled.
 * The calculation of looking delta by digital input is this:
 * 
 * \code delta = (+/-) speed * elapsedTime \endcode
 * 
 * Whereas + is if left input is enabled while - is used if right input is enabled.
 * Using negative speed switches direction.
 * 
 * \par Analog Input
 * 
 * Supports analog input by player for looking left-right and up-down using analog input
 * devices like mouse, game pad analog sticksothers. The analog input can be set directly
 * from the input event (for example mouse move deltas). The setAnalogFactorLookHorizontal()
 * and setAnalogFactorLookVertical() methods set the sensitivity of the input value transforming
 * it into a value comparable to using digital input. The default value is 0.01 resulting
 * in analog input suitable for first person navigation. Smaller values make analog input
 * slower increasing accuracy pointing at specific locations while larger values make
 * analog input faster. The same holds true for changing the digital input speed.
 * The calculation of looking delta by analog input is this:
 * 
 * \code delta = analogInput * analogFactor * speed \endcode
 * 
 * This calculation applies only to non-sticky input as this originates from mouse input
 * devices only. Sticky inputs originating from game pads and similar used the elapsed
 * time instead of analogFactor and thus are similar to digital input.
 * 
 * Using negative factor switches direction. Using negative factor and speed keeps the
 * direction unchanged.
 * 
 * \see https://developer.dragondreams.ch/wiki/doku.php/dragengine:modules:dragonscript:behavior_playerinputlook
 */
class ECBehaviorPlayerInputLook extends DefaultECBehavior
	/**
	 * \brief Behavior factory.
	 * \version 1.25
	 * 
	 * Automatically assigns these behaviors if present before adding:
	 * - Optional: \ref ECBehaviorLocomotion
	 * 
	 * Example XML element class:
	 * \code{.xml}
	 * <behavior type='ECBehaviorPlayerInputLook'>
	 *   <!-- optional: use behavior tree with id instead of empty string -->
	 *   <string name='behaviorTree'>second</string>
	 *   
	 *   <!-- optional: use state machine with id instead of empty string -->
	 *   <string name='stateMachine'>second</string>
	 * </behavior>
	 * \endcode
	 * 
	 * Element class properties added by the behavior can also be set directly inside the tag
	 * be removing the property name prefix and starting with a "." (for example ".propertyName").
	 */
	class Factory implements BehaviorFactory
		func new()
		end
		
		func String factoryId()
			return "ECBehaviorPlayerInputLook"
		end
		
		func ECBehavior addBehavior(BehaviorElementClass eclass, String id, Dictionary parameters)
			if not id.empty()
				throw EInvalidParam.new("id is not empty string")
			end
			var ECBehaviorPlayerInputLook behavior = ECBehaviorPlayerInputLook.new(\
				eclass, ECBehaviorLocomotion.getBehaviorIn(eclass))
			
			behavior.setBehaviorTree(eclass.sharedFactoryHelper.defaultBehaviorTree(eclass, parameters))
			behavior.setStateMachine(eclass.sharedFactoryHelper.defaultStateMachine(eclass, parameters))
			
			eclass.sharedFactoryHelper.setPropertiesFromParameters(\
				eclass, parameters, "playerInputLook")
			return behavior
		end
	end
	
	/** \brief Behavior instance. */
	class Instance extends DefaultECBehaviorInstance
		/**
		 * \brief Behavior tree action "playerInputLook.set".
		 * \version 1.26
		 */
		private class BTASet extends BTSMActionCondition
			var Instance pInstance
			
			func new(Instance instance)
				pInstance = instance
			end
			
			func BTResult runAction(Dictionary parameters)
				var Object value
				
				if parameters.has("reset")
					pInstance.reset()
				end
				
				value = parameters.getAt("left", null)
				if value != null
					pInstance.setLookLeft(value.equals("true"))
				end
				
				if parameters.has("left.toggle")
					pInstance.toggleLookLeft()
				end
				
				value = parameters.getAt("right", null)
				if value != null
					pInstance.setLookRight(value.equals("true"))
				end
				
				if parameters.has("right.toggle")
					pInstance.toggleLookRight()
				end
				
				value = parameters.getAt("up", null)
				if value != null
					pInstance.setLookUp(value.equals("true"))
				end
				
				if parameters.has("up.toggle")
					pInstance.toggleLookUp()
				end
				
				value = parameters.getAt("down", null)
				if value != null
					pInstance.setLookDown(value.equals("true"))
				end
				
				if parameters.has("down.toggle")
					pInstance.toggleLookDown()
				end
				
				value = parameters.getAt("speed.horizontal", null)
				if value != null
					pInstance.setSpeedLookHorizontal((value cast String).toFloat())
				end
				
				value = parameters.getAt("analog.horizontal", null)
				if value != null
					pInstance.setAnalogLookHorizontal((value cast String).toFloat())
				end
				
				value = parameters.getAt("analog.horizontal.factor", null)
				if value != null
					pInstance.setAnalogFactorLookHorizontal((value cast String).toFloat())
				end
				
				value = parameters.getAt("analog.horizontal.sticky", null)
				if value != null
					pInstance.setAnalogLookHorizontalSticky((value cast String).toFloat())
				end
				
				value = parameters.getAt("speed.vertical", null)
				if value != null
					pInstance.setSpeedLookVertical((value cast String).toFloat())
				end
				
				value = parameters.getAt("analog.vertical", null)
				if value != null
					pInstance.setAnalogLookVertical((value cast String).toFloat())
				end
				
				value = parameters.getAt("analog.vertical.factor", null)
				if value != null
					pInstance.setAnalogFactorLookVertical((value cast String).toFloat())
				end
				
				value = parameters.getAt("analog.vertical.sticky", null)
				if value != null
					pInstance.setAnalogLookVerticalSticky((value cast String).toFloat())
				end
				
				return BTResult.success
			end
		end
		
		/**
		 * \brief Behavior tree action/condition "playerInputLook.check".
		 * \version 1.26
		 */
		private class BTACheck extends BTSMActionCondition
			var Instance pInstance
			var String pPrefix
			
			func new(Instance instance, String prefix)
				pInstance = instance
				pPrefix = prefix
			end
			
			func BTResult runAction(Dictionary parameters)
				return check("", parameters) if BTResult.success\
					else (parameters.has("wait") if BTResult.running else BTResult.failure)
			end
			
			func bool evaluateCondition(Dictionary parameters)
				return check(pPrefix, parameters)
			end
			
			func bool check(String prefix, Dictionary parameters)
				var bool result = true
				var Object value
				
				value = parameters.getAt(prefix + "left", null)
				if value != null
					result &= pInstance.getLookLeft() == value.equals("true")
				end
				
				value = parameters.getAt(prefix + "right", null)
				if value != null
					result &= pInstance.getLookRight() == value.equals("true")
				end
				
				value = parameters.getAt(prefix + "up", null)
				if value != null
					result &= pInstance.getLookUp() == value.equals("true")
				end
				
				value = parameters.getAt(prefix + "down", null)
				if value != null
					result &= pInstance.getLookDown() == value.equals("true")
				end
				
				value = parameters.getAt(prefix + "speed.horizontal.less", null)
				if value != null
					result &= pInstance.getSpeedLookHorizontal() < (value cast String).toFloat()
				end
				
				value = parameters.getAt(prefix + "speed.horizontal.greater", null)
				if value != null
					result &= pInstance.getSpeedLookHorizontal() > (value cast String).toFloat()
				end
				
				value = parameters.getAt(prefix + "analog.horizontal.less", null)
				if value != null
					result &= pInstance.getAnalogLookHorizontal() < (value cast String).toFloat()
				end
				
				value = parameters.getAt(prefix + "analog.horizontal.greater", null)
				if value != null
					result &= pInstance.getAnalogLookHorizontal() > (value cast String).toFloat()
				end
				
				value = parameters.getAt(prefix + "analog.horizontal.factor.less", null)
				if value != null
					result &= pInstance.getAnalogFactorLookHorizontal() < (value cast String).toFloat()
				end
				
				value = parameters.getAt(prefix + "analog.horizontal.factor.greater", null)
				if value != null
					result &= pInstance.getAnalogFactorLookHorizontal() > (value cast String).toFloat()
				end
				
				value = parameters.getAt(prefix + "analog.horizontal.sticky.less", null)
				if value != null
					result &= pInstance.getAnalogLookHorizontalSticky() < (value cast String).toFloat()
				end
				
				value = parameters.getAt(prefix + "analog.horizontal.sticky.greater", null)
				if value != null
					result &= pInstance.getAnalogLookHorizontalSticky() > (value cast String).toFloat()
				end
				
				value = parameters.getAt(prefix + "speed.vertical.less", null)
				if value != null
					result &= pInstance.getSpeedLookVertical() < (value cast String).toFloat()
				end
				
				value = parameters.getAt(prefix + "speed.vertical.greater", null)
				if value != null
					result &= pInstance.getSpeedLookVertical() > (value cast String).toFloat()
				end
				
				value = parameters.getAt(prefix + "analog.vertical.less", null)
				if value != null
					result &= pInstance.getAnalogLookVertical() < (value cast String).toFloat()
				end
				
				value = parameters.getAt(prefix + "analog.vertical.greater", null)
				if value != null
					result &= pInstance.getAnalogLookVertical() > (value cast String).toFloat()
				end
				
				value = parameters.getAt(prefix + "analog.vertical.factor.less", null)
				if value != null
					result &= pInstance.getAnalogFactorLookVertical() < (value cast String).toFloat()
				end
				
				value = parameters.getAt(prefix + "analog.vertical.factor.greater", null)
				if value != null
					result &= pInstance.getAnalogFactorLookVertical() > (value cast String).toFloat()
				end
				
				value = parameters.getAt(prefix + "analog.vertical.sticky.less", null)
				if value != null
					result &= pInstance.getAnalogLookVerticalSticky() < (value cast String).toFloat()
				end
				
				value = parameters.getAt(prefix + "analog.vertical.sticky.greater", null)
				if value != null
					result &= pInstance.getAnalogLookVerticalSticky() > (value cast String).toFloat()
				end
				
				return result
			end
		end
		
		
		var ECBehaviorPlayerInputLook pECBehavior
		var ECBehaviorLocomotion.Instance pLocomotion
		
		var bool pLookLeft
		var bool pLookRight
		var bool pLookUp
		var bool pLookDown
		var float pSpeedLookHorizontal
		var float pSpeedLookVertical
		var float pAnalogLookHorizontal
		var float pAnalogLookVertical
		var float pAnalogFactorLookHorizontal
		var float pAnalogFactorLookVertical
		var float pAnalogLookHorizontalSticky
		var float pAnalogLookVerticalSticky
		
		
		
		/** \brief Create instance. */
		func new(ECBehaviorPlayerInputLook ecbehavior, BehaviorElement element) super(element)
			pECBehavior = ecbehavior
			
			pAnalogFactorLookHorizontal = 0.01
			pAnalogFactorLookVertical = 0.01
			
			pSpeedLookHorizontal = 45
			pSpeedLookVertical = 45
		end
		
		/** \brief Dispose of instance. */
		func void dispose()
			pLocomotion = null
			super.dispose()
		end
		
		
		
		/** \brief Initialize element from stub. */
		func void init(StubElement stub)
			var BehaviorElement element = getElement()
			
			pSpeedLookHorizontal = pECBehavior.getSpeedLookHorizontal().getValue(stub)
			pSpeedLookVertical = pECBehavior.getSpeedLookVertical().getValue(stub)
			pAnalogFactorLookHorizontal = pECBehavior.getAnalogFactorLookHorizontal().getValue(stub)
			pAnalogFactorLookVertical = pECBehavior.getAnalogFactorLookVertical().getValue(stub)
			
			if pECBehavior.getLocomotion() != null
				pLocomotion = pECBehavior.getLocomotion().instance(element)
			end
			
			if pECBehavior.getBehaviorTree() != null
				var String prefix = pECBehavior.getPrefix()
				var BTContext c = pECBehavior.getBehaviorTree().instance(element).getContext()
				c.setAction(prefix + "set", BTASet.new(this))
				
				var String name = prefix + "check"
				var BTACheck btacheck = BTACheck.new(this, prefix)
				c.setAction(name, btacheck)
				c.setCondition(name, btacheck)
			end
			
			if pECBehavior.getStateMachine() != null
				var String prefix = pECBehavior.getPrefix()
				var SMContext c = pECBehavior.getStateMachine().instance(element).getContext()
				c.setAction(prefix + "set", BTASet.new(this))
				
				var String name = prefix + "check"
				var BTACheck btacheck = BTACheck.new(this, prefix)
				c.setAction(name, btacheck)
				c.setCondition(name, btacheck)
			end
		end
		
		
		
		/** \brief Behavior. */
		func ECBehaviorPlayerInputLook getECBehavior()
			return pECBehavior
		end
		
		/** \brief Locomotion behavior or null if absent. */
		func ECBehaviorLocomotion.Instance getLocomotion()
			return pLocomotion
		end
		
		
		
		/** \brief Llook left key is pressed. */
		func bool getLookLeft()
			return pLookLeft
		end
		
		/** \brief Set if look left key is pressed. */
		func void setLookLeft(bool pressed)
			pLookLeft = pressed
		end
		
		/** \brief Toggle look left key pressed. */
		func void toggleLookLeft()
			pLookLeft = not pLookLeft
		end
		
		/** \brief Look right key is pressed. */
		func bool getLookRight()
			return pLookRight
		end
		
		/** \brief Set if look right key is pressed. */
		func void setLookRight(bool pressed)
			pLookRight = pressed
		end
		
		/** \brief Toggle look right key pressed. */
		func void toggleLookRight()
			pLookRight = not pLookRight
		end
		
		/** \brief Look up key is pressed. */
		func bool getLookUp()
			return pLookUp
		end
		
		/** \brief Set if look up key is pressed. */
		func void setLookUp(bool pressed)
			pLookUp = pressed
		end
		
		/** \brief Toggle look up key pressed. */
		func void toggleLookUp()
			pLookUp = not pLookUp
		end
		
		/** \brief Look down key is pressed. */
		func bool getLookDown()
			return pLookDown
		end
		
		/** \brief Set if look down key is pressed. */
		func void setLookDown(bool pressed)
			pLookDown = pressed
		end
		
		/** \brief Toggle look down key pressed. */
		func void toggleLookDown()
			pLookDown = not pLookDown
		end
		
		/** \brief Look left right speed in degrees per second. */
		func float getSpeedLookHorizontal()
			return pSpeedLookHorizontal
		end
		
		/** \brief Set look left right speed in degrees per second. */
		func void setSpeedLookHorizontal(float speed)
			pSpeedLookHorizontal = speed
		end
		
		/** \brief Look up down speed in degrees per second. */
		func float getSpeedLookVertical()
			return pSpeedLookVertical
		end
		
		/** \brief Set look up down speed in degrees per second. */
		func void setSpeedLookVertical(float speed)
			pSpeedLookVertical = speed
		end
		
		/** \brief Analog look left right. */
		func float getAnalogLookHorizontal()
			return pAnalogLookHorizontal
		end
		
		/** \brief Set analog look left right. */
		func void setAnalogLookHorizontal(float value)
			pAnalogLookHorizontal = value
		end
		
		/** \brief Analog look up down. */
		func float getAnalogLookVertical()
			return pAnalogLookVertical
		end
		
		/** \brief Set analog look up down. */
		func void setAnalogLookVertical(float value)
			pAnalogLookVertical = value
		end
		
		/** \brief Analog Look left right factor relative to left right input speed. */
		func float getAnalogFactorLookHorizontal()
			return pAnalogFactorLookHorizontal
		end
		
		/**
		 * \brief Set analog look left right factor relative to left right input speed.
		 * 
		 * Use negative value to flip analog input direction.
		 */
		func void setAnalogFactorLookHorizontal(float factor)
			pAnalogFactorLookHorizontal = factor
		end
		
		/** \brief Analog Look up down factor relative to up down input speed. */
		func float getAnalogFactorLookVertical()
			return pAnalogFactorLookVertical
		end
		
		/**
		 * \brief Set analog look up down factor relative to up down input speed.
		 * 
		 * Use negative value to flip analog input direction.
		 */
		func void setAnalogFactorLookVertical(float factor)
			pAnalogFactorLookVertical = factor
		end
		
		/** \brief Sticky analog look left right. */
		func float getAnalogLookHorizontalSticky()
			return pAnalogLookHorizontalSticky
		end
		
		/** \brief Set sticky analog look left right. */
		func void setAnalogLookHorizontalSticky(float value)
			pAnalogLookHorizontalSticky = value
		end
		
		/** \brief Sticky analog look up down. */
		func float getAnalogLookVerticalSticky()
			return pAnalogLookVerticalSticky
		end
		
		/** \brief Set sticky analog look up down. */
		func void setAnalogLookVerticalSticky(float value)
			pAnalogLookVerticalSticky = value
		end
		
		
		
		/** \brief Calculate look left right delta value and reset analog input. */
		func float calculateLookHorizontal(float elapsed)
			var float value = 0
			
			if pLookLeft
				value += pSpeedLookHorizontal * elapsed
			end
			if pLookRight
				value -= pSpeedLookHorizontal * elapsed
			end
			
			value += pAnalogLookHorizontalSticky * pSpeedLookHorizontal * elapsed
			value += pAnalogLookHorizontal * pSpeedLookHorizontal * pAnalogFactorLookHorizontal
			pAnalogLookHorizontal = 0
			
			return value
		end
		
		/** \brief Calculate look up down delta value and reset analog input. */
		func float calculateLookVertical(float elapsed)
			var float value = 0
			
			if pLookUp
				value += pSpeedLookVertical * elapsed
			end
			if pLookDown
				value -= pSpeedLookVertical * elapsed
			end
			
			value += pAnalogLookVerticalSticky * pSpeedLookVertical * elapsed
			value += pAnalogLookVertical * pSpeedLookVertical * pAnalogFactorLookVertical
			pAnalogLookVertical = 0
			
			return value
		end
		
		
		
		/** \brief Reset input. */
		func void reset()
			pLookLeft = false
			pLookRight = false
			pLookUp = false
			pLookDown = false
			pAnalogLookHorizontal = 0
			pAnalogLookVertical = 0
			pAnalogLookHorizontalSticky = 0
			pAnalogLookVerticalSticky = 0
		end
		
		
		
		/**
		 * \brief Update locomotion.
		 * 
		 * Calls calculateLookHorizontal() and calculateLookVertical() to obtain the looking
		 * changes and applies using ECBehaviorLocomotion.applyLookAround().
		 */
		func void updateLocomotion(float elapsed)
			if pLocomotion == null
				return
			end
			
			var float deltaHorizontal = calculateLookHorizontal(elapsed)
			var float deltaVertical = calculateLookVertical(elapsed)
			pLocomotion.applyLookAround(deltaHorizontal, deltaVertical)
		end
		
		
		
		/** \brief Read element from file. */
		func void readFromFile(PersistencyEnvironment env, FileReader reader)
			select reader.readByte() // version
			case 0
				pSpeedLookHorizontal = reader.readFloat()
				pSpeedLookVertical = reader.readFloat()
				pAnalogFactorLookHorizontal = reader.readFloat()
				pAnalogFactorLookVertical = reader.readFloat()
				
			else
				throw EInvalidParam.new("unsupported version")
			end
		end
		
		/** \brief Write element to file. */
		func void writeToFile(PersistencyEnvironment env, FileWriter writer)
			writer.writeByte(0) // version
			
			writer.writeFloat(pSpeedLookHorizontal)
			writer.writeFloat(pSpeedLookVertical)
			writer.writeFloat(pAnalogFactorLookHorizontal)
			writer.writeFloat(pAnalogFactorLookVertical)
		end
	end
	
	
	
	var ECBehaviorLocomotion pLocomotion
	var ECPFloat pSpeedLookHorizontal
	var ECPFloat pSpeedLookVertical
	var ECPFloat pAnalogFactorLookHorizontal
	var ECPFloat pAnalogFactorLookVertical
	var ECBehaviorBehaviorTree pBehaviorTree
	var ECBehaviorStateMachine pStateMachine
	var String pPrefix
	
	
	
	/** \brief Create behavior element class. */
	func new(BehaviorElementClass eclass, ECBehaviorLocomotion locomotion) \
	this(eclass, locomotion, "playerInputLook.")
	end
	
	func new(BehaviorElementClass eclass, ECBehaviorLocomotion locomotion, \
	String prefix) super(eclass)
		if getBehaviorIn(eclass) != null
			throw BEMultipleInstanceException.new(eclass, this)
		end
		
		pPrefix = prefix
		pLocomotion = locomotion
		
		eclass.addProperty(pSpeedLookHorizontal = ECPFloat.new(prefix + "speedLookHorizontal", 45, 0))
		eclass.addProperty(pSpeedLookVertical = ECPFloat.new(prefix + "speedLookVertical", 45, 0))
		eclass.addProperty(pAnalogFactorLookHorizontal = ECPFloat.new(prefix + "analogFactorLookHorizontal", 0.01))
		eclass.addProperty(pAnalogFactorLookVertical = ECPFloat.new(prefix + "analogFactorLookVertical", 0.01))
		
		eclass.addBehavior(this)
	end
	
	/** \brief Dispose of behavior. */
	func void dispose()
		pLocomotion = null
		pBehaviorTree = null
		pStateMachine = null
		super.dispose()
	end
	
	
	
	/**
	 * \brief Prefix.
	 * \version 1.26
	 */
	func String getPrefix()
		return pPrefix
	end
	
	/** \brief Locomotion behavior or null. */
	func ECBehaviorLocomotion getLocomotion()
		return pLocomotion
	end
	
	/** \brief Look left right speed in degrees per second. */
	func ECPFloat getSpeedLookHorizontal()
		return pSpeedLookHorizontal
	end
	
	/** \brief Look up down speed in degrees per second. */
	func ECPFloat getSpeedLookVertical()
		return pSpeedLookVertical
	end
	
	/** \brief Analog Look left right factor relative to left right input speed. */
	func ECPFloat getAnalogFactorLookHorizontal()
		return pAnalogFactorLookHorizontal
	end
	
	/** \brief Analog Look up down factor relative to up down input speed. */
	func ECPFloat getAnalogFactorLookVertical()
		return pAnalogFactorLookVertical
	end
	
	/**
	 * \brief Behavior tree or null.
	 * \version 1.26
	 */
	func ECBehaviorBehaviorTree getBehaviorTree()
		return pBehaviorTree
	end
	
	/**
	 * \brief Set behavior tree or null.
	 * \version 1.26
	 */
	func void setBehaviorTree(ECBehaviorBehaviorTree behaviorTree)
		pBehaviorTree = behaviorTree
	end
	
	/**
	 * \brief State machine or null.
	 * \version 1.26
	 */
	func ECBehaviorStateMachine getStateMachine()
		return pStateMachine
	end
	
	/**
	 * \brief Set state machine or null.
	 * \version 1.26
	 */
	func void setStateMachine(ECBehaviorStateMachine stateMachine)
		pStateMachine = stateMachine
	end
	
	
	
	
	/** \brief Get instance in element from owner element class. */
	func Instance instance(BehaviorElement element)
		return element.getInstanceAt(getInstanceIndex()) cast Instance
	end
	
	
	
	/**
	 * \brief Get behavior in element class or \em null if absent.
	 * 
	 * Use this method to check if a particular BehaviorElementClass contains a behavior
	 * of type ECBehaviorPlayerInputLook.
	 */
	static func ECBehaviorPlayerInputLook getBehaviorIn(BehaviorElementClass eclass)
		return eclass.findBehavior(block ECBehaviorPlayerInputLook each
			return true
		end) cast ECBehaviorPlayerInputLook
	end
	
	/**
	 * \brief Get instance in element or \em null if absent.
	 * 
	 * Use this method to check if a particular BehaviorElement contains a behavior instance
	 * of type ECBehaviorPlayerInputLook.Instance .
	 */
	static func Instance getInstanceIn(BehaviorElement element)
		return element.findInstance(block Instance each
			return true
		end) cast Instance
	end
	
	
	
	/** \brief Create Behavior instance. */
	func ECBehaviorInstance createInstance(BehaviorElement element)
		return Instance.new(this, element)
	end
end
