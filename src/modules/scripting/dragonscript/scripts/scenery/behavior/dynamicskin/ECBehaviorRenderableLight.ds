/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */


namespace Dragengine.Scenery

pin Dragengine.Gui
pin Dragengine.LoadSave
pin Dragengine.Preloading
pin Dragengine.Utils


/**
 * \brief Behavior element behavior matching renderable to light intensity.
 * 
 * This behavior is useful for model with an emissive texture where the emissivity intensity
 * should be synchronized to light intensity. A typical example for this is a flashlight where
 * the front side texture lights up if the flashlight is switched on.
 * 
 * To use this behavior add an ECBehaviorDynamicSkin and an ECBehaviorLight to the element
 * class before adding this behavior. Create ECBehaviorRenderableLight behavior and set
 * the dynamic skin and light identifier.
 * 
 * The current light intensity and color can be used for the renderable. If the respective
 * renderable name is not empty string the value is applied. Each one adds an individual
 * renderable if used.
 * 
 * If intensity is applied the renderable is of type \em DynamicSkinRenderableType.value with the value set
 * to the light intensity multiplied by an intensity scaling factor. This factor defaults to 1
 * which roughly equals a light source covered by a diffuse glass panel. Usually emissivity is
 * stronger than the light intensity. The value to use here depends on various physical
 * properties and can go up to 32 to simulate looking straight into an uncovered light source.
 * 
 * If color is applied the renderable is of type \em DynamicSkinRenderableType.color with the value set to
 * the light color multiplied component wise by a color scaling factor. This allows tinting
 * textures depending on the light color.
 * 
 * Multiple ECBehaviorRenderableLight instances can be added to affect individual
 * dynamic skin textures synchronized to individual ECBehaviorLight instances using their
 * identifiers. The example below uses one component with one dynamic skin to two individual
 * renderables named "intensity1" and "intensity2" each synchrnoized to one of two individual
 * lights.
 * 
 * \code{.ds}
 * class MyElement extends BehaviorElementClass
 *    func new()
 *       var ECBehaviorComponent component = ECBehaviorComponent.new(this)
 *       var ECBehaviorDynamicSkin dynamicSkin = ECBehaviorDynamicSkin.new(this, component)
 *       
 *       var ECBehaviorLight light = ECBehaviorLight.new(this)
 *       var ECBehaviorLight light2 = ECBehaviorLight.new(this, "light2")
 *       
 *       var ECBehaviorRenderableLight behavior = ECBehaviorRenderableLight.new(this, dynamicSkin, light)
 *       behavior.getRenderableIntensity().setValue("intensity1")
 *       
 *       behavior = ECBehaviorRenderableLight.new(this, dynamicSkin, light2, "renderableLight2")
 *       behavior.getRenderableIntensity().setValue("intensity2")
 *    end
 * end
 * \endcode
 * 
 * Element class properties have the prefix "renderableLight{(id)}.".
 * 
 * This behavior does not require the element class to be persistable (setPersistable).
 * 
 * \see https://developer.dragondreams.ch/wiki/doku.php/dragengine:modules:dragonscript:behavior_renderablelight
 */
class ECBehaviorRenderableLight extends DefaultECBehavior
	/**
	 * \brief Behavior factory.
	 * \version 1.25
	 * 
	 * Automatically assigns these behaviors if present before adding:
	 * - Required: \ref ECBehaviorDynamicSkin
	 * - Required: \ref ECBehaviorLight
	 * 
	 * Example XML element class:
	 * \code{.xml}
	 * <behavior type='ECBehaviorRenderableLight'>
	 *   <!-- optional: use dynamic skin with id instead of empty string -->
	 *   <string name='dynamicSkin'>second</string>
	 * 
	 *   <!-- optional: use light with id instead of empty string -->
	 *   <string name='light'>second</string>
	 * </behavior>
	 * 
	 * <!-- for adding multiple behaviors use unique identifiers -->
	 * <behavior type='ECBehaviorRenderableLight' id='second'>
	 *   ...
	 * </behavior>
	 * \endcode
	 * 
	 * Element class properties added by the behavior can also be set directly inside the tag
	 * be removing the property name prefix and starting with a "." (for example ".propertyName").
	 */
	class Factory extends DefaultBehaviorFactory
		func new() super("ECBehaviorRenderableLight")
		end
		
		func ECBehavior addBehavior(BehaviorElementClass eclass, String id, Dictionary parameters)
			var ECBehaviorRenderableLight behavior = ECBehaviorRenderableLight.new(eclass,\
				getHelper().defaultDynamicSkin(eclass, parameters),\
				getHelper().defaultLight(eclass, parameters), id)
			getHelper().setPropertiesFromParameters(eclass, parameters, "renderableLight", id)
			return behavior
		end
	end
	
	/** \brief Behavior instance. */
	class Instance extends DefaultECBehaviorInstance
		/** \brief Update renderable listener. */
		public class UpdateRenderableListener extends ECBehaviorLight.DefaultListener
			var Instance pInstance
			
			func new(Instance instance)
				pInstance = instance
			end
			
			func void lightActivated(ECBehaviorLight.Instance instance)
				pInstance.updateRenderables()
			end
			
			func void lightDeactivated(ECBehaviorLight.Instance instance)
				pInstance.updateRenderables()
			end
			
			func void lightParametersChanged(ECBehaviorLight.Instance instance)
				pInstance.updateRenderables()
			end
		end
		
		
		
		var ECBehaviorRenderableLight pECBehavior
		var ECBehaviorDynamicSkin.Instance pDynamicSkin
		var ECBehaviorLight.Instance pLight
		var int pRenderableIntensity
		var int pRenderableColor
		var float pScaleIntensity
		var Color pScaleColor
		
		
		
		/** \brief Create element. */
		func new(ECBehaviorRenderableLight ecbehavior, BehaviorElement element) super(element)
			pECBehavior = ecbehavior
			pRenderableIntensity = -1
			pRenderableColor = -1
			pScaleIntensity = 1
			pScaleColor = Color.white
			
			pDynamicSkin = ecbehavior.getDynamicSkin().instance(element)
			pLight = ecbehavior.getLight().instance(element)
		end
		
		/** \brief Dispose of composeable instance. */
		func void dispose()
			pLight = null
			pDynamicSkin = null
			super.dispose()
		end
		
		
		
		/** \brief Initialize element from stub. */
		func void init(StubElement stub)
			var DynamicSkin dynamicSkin = pDynamicSkin.getDynamicSkin()
			var String value
			
			value = pECBehavior.getRenderableIntensity().getValue(stub)
			if not value.empty()
				pRenderableIntensity = dynamicSkin.getRenderableCount()
				dynamicSkin.addRenderable(value, DynamicSkinRenderableType.value)
			end
			
			value = pECBehavior.getRenderableColor().getValue(stub)
			if not value.empty()
				pRenderableColor = dynamicSkin.getRenderableCount()
				dynamicSkin.addRenderable(value, DynamicSkinRenderableType.color)
			end
			
			pLight.addListener(UpdateRenderableListener.new(this))
			
			pScaleIntensity = pECBehavior.getScaleIntensity().getValue(stub)
			pScaleColor = pECBehavior.getScaleColor().getColor(stub, \
				getElement().getClass().getCodecPropertyString())
			
			updateRenderables()
		end
		
		
		
		/** \brief Behavior. */
		func ECBehaviorRenderableLight getECBehavior()
			return pECBehavior
		end
		
		/** \brief Dynamic skin behavior. */
		func ECBehaviorDynamicSkin.Instance getDynamicSkin()
			return pDynamicSkin
		end
		
		/** \brief Light behavior. */
		func ECBehaviorLight.Instance getLight()
			return pLight
		end
		
		
		
		/** \brief Index of intensity renderable or -1 if not used. */
		func int getRenderableIntensity()
			return pRenderableIntensity
		end
		
		/** \brief Index of color renderable or -1 if not used. */
		func int getRenderableColor()
			return pRenderableColor
		end
		
		/** \brief Intensity scale factor. */
		func float getScaleIntensity()
			return pScaleIntensity
		end
		
		/** \brief Set intensity scale factor. */
		protected func void setScaleIntensity(float factor)
			pScaleIntensity = factor
		end
		
		/** \brief Color scale factor. */
		func Color getScaleColor()
			return pScaleColor
		end
		
		/** \brief Set color scale factor. */
		func void setScaleColor(Color factor)
			pScaleColor = factor
		end
		
		
		
		/** \brief Update renderables. */
		func void updateRenderables()
			if pLight == null or pDynamicSkin == null
				return
			end
			
			if pRenderableIntensity != -1
				if pLight.getLight().getActivated()
					pDynamicSkin.getDynamicSkin().setValueAt(pRenderableIntensity, \
						pLight.getLight().getIntensity() * pScaleIntensity)
					
				else
					pDynamicSkin.getDynamicSkin().setValueAt(pRenderableIntensity, 0)
				end
			end
			
			if pRenderableColor != -1
				pDynamicSkin.getDynamicSkin().setColorAt(pRenderableColor, \
					pLight.getLight().getColor() * pScaleColor)
			end
		end
	end
	
	
	
	var ECBehaviorDynamicSkin pDynamicSkin
	var ECBehaviorLight pLight
	var ECPString pRenderableIntensity
	var ECPFloat pScaleIntensity
	var ECPString pRenderableColor
	var ECPColor pScaleColor
	
	
	
	/** \brief Create behavior element class. */
	func new(BehaviorElementClass eclass, ECBehaviorDynamicSkin dynamicSkin, \
	ECBehaviorLight light) this(eclass, dynamicSkin, light, "")
	end
	
	/** \brief Create behavior element class. */
	func new(BehaviorElementClass eclass, ECBehaviorDynamicSkin dynamicSkin, \
	ECBehaviorLight light, String id) this(eclass, dynamicSkin, light, id, \
	id.empty() if "renderableLight." else "renderableLight(" + id + ").")
	end
	
	func new(BehaviorElementClass eclass, ECBehaviorDynamicSkin dynamicSkin, \
	ECBehaviorLight light, String id, String prefix) super(eclass, id)
		if dynamicSkin == null
			throw ENullPointer.new("dynamicSkin")
		end
		if light == null
			throw ENullPointer.new("light")
		end
		
		pDynamicSkin = dynamicSkin
		pLight = light
		
		eclass.addProperty(pRenderableIntensity = ECPString.new(prefix + "renderableIntensity", ""))
		eclass.addProperty(pScaleIntensity = ECPFloat.new(prefix + "scaleIntensity", 1))
		eclass.addProperty(pRenderableColor = ECPString.new(prefix + "renderableColor", ""))
		eclass.addProperty(pScaleColor = ECPColor.new(prefix + "scaleColor", Color.white))
		
		eclass.addBehavior(this)
	end
	
	/** \brief Dispose of behavior. */
	func void dispose()
		pDynamicSkin = null
		pLight = null
		super.dispose()
	end
	
	
	
	/** \brief Dynamic skin behavior to modify. */
	func ECBehaviorDynamicSkin getDynamicSkin()
		return pDynamicSkin
	end
	
	/** \brief Light behavior to use. */
	func ECBehaviorLight getLight()
		return pLight
	end
	
	/** \brief Name of renderable to create for intensity or empty string if not used. */
	func ECPString getRenderableIntensity()
		return pRenderableIntensity
	end
	
	/** \brief Scale factor to apply to light intensity. */
	func ECPFloat getScaleIntensity()
		return pScaleIntensity
	end
	
	/** \brief Name of renderable to create for color or empty string if not used. */
	func ECPString getRenderableColor()
		return pRenderableColor
	end
	
	/** \brief Scale factor to apply to light color. */
	func ECPColor getScaleColor()
		return pScaleColor
	end
	
	
	
	/** \brief Get instance in element from owner element class. */
	func Instance instance(BehaviorElement element)
		return element.getInstanceAt(getInstanceIndex()) cast Instance
	end
	
	
	
	/**
	 * \brief Get behavior in element class or \em null if absent.
	 * 
	 * Use this method to check if a particular BehaviorElementClass contains a behavior
	 * of type ECBehaviorComponent.
	 */
	static func ECBehaviorRenderableLight getBehaviorIn(BehaviorElementClass eclass)
		return eclass.findBehavior(block ECBehaviorRenderableLight each
			return true
		end) cast ECBehaviorRenderableLight
	end
	
	/**
	 * \brief Get behavior with id in element class or \em null if absent.
	 * 
	 * Use this method to check if a particular BehaviorElementClass contains a behavior
	 * of type ECBehaviorRenderableLight with specific identifier.
	 */
	static func ECBehaviorRenderableLight getBehaviorIn(BehaviorElementClass eclass, String id)
		return eclass.findBehavior(block ECBehaviorRenderableLight each
			return each.getID().equals(id)
		end) cast ECBehaviorRenderableLight
	end
	
	/**
	 * \brief Get list of all behaviors in element.
	 * 
	 * Returns list contains ECBehaviorRenderableLight behaviors in the order they have
	 * been created in the element.
	 */
	static func Array getAllBehaviorsIn(BehaviorElementClass eclass)
		return eclass.collectBehaviors(block ECBehaviorRenderableLight each
			return true
		end)
	end
	
	
	
	/**
	 * \brief Get instance in element or \em null if absent.
	 * 
	 * Use this method to check if a particular BehaviorElement contains a behavior instance
	 * of type ECBehaviorRenderableLight.Instance . If more than one instance is present returns
	 * the first instance.
	 */
	static func Instance getInstanceIn(BehaviorElement element)
		return element.findInstance(block Instance each
			return true
		end) cast Instance
	end
	
	/**
	 * \brief Get instance with id in element or \em null if absent.
	 * 
	 * Use this method to check if a particular BehaviorElement contains a behavior instance
	 * of type ECBehaviorRenderableLight.Instance with specific identifier.
	 */
	static func Instance getInstanceIn(BehaviorElement element, String id)
		return element.findInstance(block Instance each
			return each.getECBehavior().getID().equals(id)
		end) cast Instance
	end
	
	/**
	 * \brief Get list of all instances in element.
	 * 
	 * Returns list contains ECBehaviorRenderableLight.Instance instances in the order they have
	 * been created in the element.
	 */
	static func Array getAllInstancesIn(BehaviorElement element)
		return element.collectInstances(block Instance each
			return true
		end)
	end
	
	
	
	/** \brief Create Behavior instance. */
	func ECBehaviorInstance createInstance(BehaviorElement element)
		return Instance.new(this, element)
	end
end
