/* 
 * Drag[en]gine DragonScript Script Module
 *
 * Copyright (C) 2020, Roland Pl√ºss (roland@rptd.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */


namespace Dragengine.Scenery

pin Dragengine.Gui
pin Dragengine.LoadSave
pin Dragengine.Preloading
pin Dragengine.Utils


/**
 * \brief Behavior element behavior adding a renderable canvas view.
 * 
 * This behavior is useful for models with a complex dynamic texture where the content of the
 * texture is provided by one or more Canvas resources. Multiple other behaviors can add their
 * content to the canvas renderable to separate logic for reuse. A convenient base class to
 * use is ECBehaviorRenderableCanvasBase.
 * 
 * To use this behavior add an ECBehaviorDynamicSkin to the element class before adding this
 * behavior. Create ECBehaviorRenderableCanvas behavior and set the dynamic skin and canvas
 * background color or image. The background color empty by default so make sure to set an
 * appropriate background. Now you can add other behaviors targeting the
 * ECBehaviorRenderableCanvas to add Canvas resources to.
 * 
 * If the background is not set the behaviors using this canvas have to make sure they cover
 * the entire background to avoid artifacts. Background CanvasPaint or CanvasImage have
 * order 0 respective 1 if both are used. Both canvas can be used for example if the image
 * has transparency.
 * 
 * The canvas is created with a default size of 512x512 . You can change the size using the
 * element property to fit the texture requirements.
 * 
 * Multiple ECBehaviorRenderableCanvas instances can be added to affect individual
 * dynamic skin textures. The example below uses one component with one dynamic skin to two
 * individual renderables named "content1" and "content2" each allowing to be individiaully
 * filled with content by different behaviors.
 * 
 * \code{.ds}
 * class MyElement extends BehaviorElementClass
 *    public func new()
 *       ECBehaviorComponent.new(this)
 *       ECBehaviorDynamicSkin.new(this)
 *       
 *       ECBehaviorCanvas.new(this)
 *       ECBehaviorCanvas.new(this, "canvas2")
 *       
 *       var ECBehaviorRenderableCanvas behavior = ECBehaviorRenderableCanvas.new(this)
 *       behavior.getRenderable().setValue("content1")
 *       
 *       behavior = ECBehaviorRenderableCanvas.new(this, "renderableCanvas2")
 *       behavior.setBackgroundColor(Color.blue)
 *       behavior.getRenderable().setValue("intensity2")
 *    end
 * end
 * \endcode
 * 
 * Element class properties have the prefix "renderableCanvas{(id)}.".
 * 
 * This behavior does not require the element class to be persistable (setPersistable).
 */
class ECBehaviorRenderableCanvas extends DefaultECBehavior
	/** \brief Behavior instance. */
	class Instance extends DefaultECBehaviorInstance
		private var ECBehaviorRenderableCanvas pECBehavior
		private var ECBehaviorDynamicSkin.Instance pDynamicSkin
		private var int pRenderable
		private var CanvasView pCanvasView
		
		
		
		/** \brief Create element. */
		public func new( ECBehaviorRenderableCanvas ecbehavior, BehaviorElement element ) super( element )
			this.pECBehavior = ecbehavior
			this.pRenderable = -1
			
			this.pDynamicSkin = ecbehavior.getDynamicSkin().instance( element )
		end
		
		/** \brief Dispose of behavior instance. */
		public func void dispose()
			this.pDynamicSkin = null
			super.dispose()
		end
		
		
		
		/** \brief Initialize element from stub. */
		public func void init( StubElement stub )
			var String renderableName = this.pECBehavior.getRenderable().getValue( stub )
			if renderableName.empty()
				return
			end
			
			var ElementClass eclass = this.getElement().getClass()
			var CodecPropertyString codec = eclass.getCodecPropertyString()
			var Point size = this.pECBehavior.getSize().getPoint( stub, codec )
			var Color backgroundColor = this.pECBehavior.getBackgroundColor().getColor( stub, codec )
			var Image backgroundImage = this.pECBehavior.getBackgroundImage().getImage( stub, eclass )
			
			this.pCanvasView = CanvasView.new()
			this.pCanvasView.setSize( size )
			
			if backgroundColor != null
				var CanvasPaint canvasBackground = CanvasPaint.new()
				canvasBackground.setShapeType( CanvasPaintShape.rectangle )
				canvasBackground.setFillColor( backgroundColor )
				canvasBackground.setThickness( 0 )
				canvasBackground.setSize( size )
				canvasBackground.setOrder( this.pCanvasView.getCanvasCount() )
				this.pCanvasView.addCanvas( canvasBackground )
			end
			
			if backgroundImage != null
				var CanvasImage canvasImage = CanvasImage.new()
				canvasImage.setImage( backgroundImage )
				canvasImage.setSize( size )
				canvasImage.setOrder( this.pCanvasView.getCanvasCount() )
				this.pCanvasView.addCanvas( canvasImage )
			end
			
			var DynamicSkin dynamicSkin = this.pDynamicSkin.getDynamicSkin()
			this.pRenderable = dynamicSkin.getRenderableCount()
			dynamicSkin.addRenderable( renderableName, DynamicSkinRenderableType.canvas )
			dynamicSkin.setCanvasAt( this.pRenderable, this.pCanvasView )
		end
		
		
		
		/** \brief Behavior. */
		public func ECBehaviorRenderableCanvas getECBehavior()
			return this.pECBehavior
		end
		
		/** \brief Dynamic skin behavior instance. */
		public func ECBehaviorDynamicSkin.Instance getDynamicSkin()
			return this.pDynamicSkin
		end
		
		/** \brief Canvas view or \em null. */
		public func CanvasView getCanvasView()
			return this.pCanvasView
		end
	end
	
	
	
	private var ECBehaviorDynamicSkin pDynamicSkin
	private var ECPString pRenderable
	private var ECPPoint pSize
	private var ECPColor pBackgroundColor
	private var ECPImage pBackgroundImage
	
	
	
	/** \brief Create behavior element class. */
	public func new( BehaviorElementClass eclass, ECBehaviorDynamicSkin dynamicSkin ) \
	this( eclass, dynamicSkin, "" )
	end
	
	public func new( BehaviorElementClass eclass, ECBehaviorDynamicSkin dynamicSkin, String id ) \
	this( eclass, dynamicSkin, id, id.empty() if "renderableCanvas." else "renderableCanvas(" + id + ")." )
	end
	
	public func new( BehaviorElementClass eclass, ECBehaviorDynamicSkin dynamicSkin, \
	String id, String prefix ) super( eclass, id )
		if dynamicSkin == null
			throw ENullPointer.new( "dynamicSkin" )
		end
		
		this.pDynamicSkin = dynamicSkin
		
		this.pRenderable = ECPString.new( prefix + "renderable", "" )
		eclass.addProperty( this.pRenderable )
		
		this.pSize = ECPPoint.new( prefix + "size", Point.new( 512, 512 ) )
		eclass.addProperty( this.pSize )
		
		this.pBackgroundColor = ECPColor.new( prefix + "backgroundColor", null )
		eclass.addProperty( this.pBackgroundColor )
		
		this.pBackgroundImage = ECPImage.new( prefix + "backgroundImage", null )
		eclass.addProperty( this.pBackgroundImage )
		
		eclass.addBehavior( this )
	end
	
	/** \brief Dispose of behavior. */
	public func void dispose()
		this.pDynamicSkin = null
		super.dispose()
	end
	
	
	
	/** \brief Dynamic skin behavior. */
	public func ECBehaviorDynamicSkin getDynamicSkin()
		return this.pDynamicSkin
	end
	
	/** \brief Name of renderable to create or empty string if not used. */
	public func ECPString getRenderable()
		return this.pRenderable
	end
	
	/** \brief Size of canvas. */
	public func ECPPoint getSize()
		return this.pSize
	end
	
	/** \brief Background color of canvas. */
	public func ECPColor getBackgroundColor()
		return this.pBackgroundColor
	end
	
	/** \brief Background image of canvas. */
	public func ECPImage getBackgroundImage()
		return this.pBackgroundImage
	end
	
	
	
	/** \brief Get instance in element from owner element class. */
	public func Instance instance( BehaviorElement element )
		return element.getInstanceAt( this.getInstanceIndex() ) cast Instance
	end
	
	
	
	/**
	 * \brief Get behavior in element class or \em null if absent.
	 * 
	 * Use this method to check if a particular BehaviorElementClass contains a behavior
	 * of type ECBehaviorComponent.
	 */
	static public func ECBehaviorRenderableCanvas getBehaviorIn( BehaviorElementClass eclass )
		return eclass.findBehavior( block ECBehaviorRenderableCanvas each
			return true
		end ) cast ECBehaviorRenderableCanvas
	end
	
	/**
	 * \brief Get behavior with id in element class or \em null if absent.
	 * 
	 * Use this method to check if a particular BehaviorElementClass contains a behavior
	 * of type ECBehaviorRenderableCanvas with specific identifier.
	 */
	static public func ECBehaviorRenderableCanvas getBehaviorIn( BehaviorElementClass eclass, String id )
		return eclass.findBehavior( block ECBehaviorRenderableCanvas each
			return each.getID().equals( id )
		end ) cast ECBehaviorRenderableCanvas
	end
	
	/**
	 * \brief Get list of all behaviors in element.
	 * 
	 * Returns list contains ECBehaviorRenderableCanvas behaviors in the order they have
	 * been created in the element.
	 */
	static public func Array getAllBehaviorsIn( BehaviorElementClass eclass )
		return eclass.collectBehaviors( block ECBehaviorRenderableCanvas each
			return true
		end )
	end
	
	
	
	/**
	 * \brief Get instance in element or \em null if absent.
	 * 
	 * Use this method to check if a particular BehaviorElement contains a behavior instance
	 * of type ECBehaviorRenderableCanvas.Instance . If more than one instance is present returns
	 * the first instance.
	 */
	static public func Instance getInstanceIn( BehaviorElement element )
		return element.findInstance( block Instance each
			return true
		end ) cast Instance
	end
	
	/**
	 * \brief Get instance with id in element or \em null if absent.
	 * 
	 * Use this method to check if a particular BehaviorElement contains a behavior instance
	 * of type ECBehaviorRenderableCanvas.Instance with specific identifier.
	 */
	static public func Instance getInstanceIn( BehaviorElement element, String id )
		return element.findInstance( block Instance each
			return each.getECBehavior().getID().equals( id )
		end ) cast Instance
	end
	
	/**
	 * \brief Get list of all instances in element.
	 * 
	 * Returns list contains ECBehaviorRenderableCanvas.Instance instances in the order they have
	 * been created in the element.
	 */
	static public func Array getAllInstancesIn( BehaviorElement element )
		return element.collectInstances( block Instance each
			return true
		end )
	end
	
	
	
	/** \brief Create Behavior instance. */
	public func ECBehaviorInstance createInstance( BehaviorElement element )
		return Instance.new( this, element )
	end
end
