/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */


namespace Dragengine.Scenery

pin Dragengine.Gui
pin Dragengine.LoadSave
pin Dragengine.Preloading
pin Dragengine.Utils


/**
 * \brief Behavior element behavior adding a renderable canvas view.
 * 
 * This behavior is useful for models with a complex dynamic texture where the content of the
 * texture is provided by one or more Canvas resources. Multiple other behaviors can add their
 * content to the canvas renderable to separate logic for reuse. A convenient base class to
 * use is ECBehaviorRenderableCanvasBase.
 * 
 * To use this behavior add an ECBehaviorDynamicSkin to the element class before adding this
 * behavior. Create ECBehaviorRenderableCanvas behavior and set the dynamic skin and canvas
 * background color or image. The background color empty by default so make sure to set an
 * appropriate background. Now you can add other behaviors targeting the
 * ECBehaviorRenderableCanvas to add Canvas resources to.
 * 
 * If the background is not set the behaviors using this canvas have to make sure they cover
 * the entire background to avoid artifacts. Background CanvasPaint or CanvasImage have
 * order 0 respective 1 if both are used. Both canvas can be used for example if the image
 * has transparency.
 * 
 * The canvas is created with a default size of 512x512 . You can change the size using the
 * element property to fit the texture requirements.
 * 
 * Multiple ECBehaviorRenderableCanvas instances can be added to affect individual
 * dynamic skin textures. The example below uses one component with one dynamic skin to two
 * individual renderables named "content1" and "content2" each allowing to be individiaully
 * filled with content by different behaviors.
 * 
 * \code{.ds}
 * class MyElement extends BehaviorElementClass
 *    public func new()
 *       ECBehaviorComponent.new(this)
 *       ECBehaviorDynamicSkin.new(this)
 *       
 *       ECBehaviorCanvas.new(this)
 *       ECBehaviorCanvas.new(this, "canvas2")
 *       
 *       var ECBehaviorRenderableCanvas behavior = ECBehaviorRenderableCanvas.new(this)
 *       behavior.getRenderable().setValue("content1")
 *       
 *       behavior = ECBehaviorRenderableCanvas.new(this, "renderableCanvas2")
 *       behavior.setBackgroundColor(Color.blue)
 *       behavior.getRenderable().setValue("intensity2")
 *    end
 * end
 * \endcode
 * 
 * Element class properties have the prefix "renderableCanvas{(id)}.".
 * 
 * This behavior does not require the element class to be persistable (setPersistable).
 * 
 * \see https://developer.dragondreams.ch/wiki/doku.php/dragengine:modules:dragonscript:behavior_renderablecanvas
 */
class ECBehaviorRenderableCanvas extends DefaultECBehavior
	/**
	 * \brief Behavior factory.
	 * \version 1.25
	 * 
	 * Automatically assigns these behaviors if present before adding:
	 * - Required: \ref ECBehaviorDynamicSkin
	 * 
	 * Example XML element class:
	 * \code{.xml}
	 * <behavior type='ECBehaviorRenderableCanvas'>
	 *   <!-- optional: use dynamic skin with id instead of empty string -->
	 *   <string name='dynamicSkin'>second</string>
	 * </behavior>
	 * 
	 * <!-- for adding multiple behaviors use unique identifiers -->
	 * <behavior type='ECBehaviorRenderableCanvas' id='second'>
	 *   ...
	 * </behavior>
	 * \endcode
	 * 
	 * Element class properties added by the behavior can also be set directly inside the tag
	 * be removing the property name prefix and starting with a "." (for exampler ".propertyName").
	 */
	class Factory implements BehaviorFactory
		func new()
		end
		
		func String factoryId()
			return "ECBehaviorRenderableCanvas"
		end
		
		func ECBehavior addBehavior(BehaviorElementClass eclass, String id, Dictionary parameters)
			var ECBehaviorRenderableCanvas behavior = ECBehaviorRenderableCanvas.new(eclass,\
				eclass.sharedFactoryHelper.defaultDynamicSkin(eclass, parameters), id)
			BehaviorElementClass.sharedFactoryHelper.setPropertiesFromParameters(\
				eclass, parameters, "renderableCanvas", id)
			return behavior
		end
	end
	
	/** \brief Behavior instance. */
	class Instance extends DefaultECBehaviorInstance
		private var ECBehaviorRenderableCanvas pECBehavior
		private var ECBehaviorDynamicSkin.Instance pDynamicSkin
		private var int pRenderable
		private var CanvasView pCanvasView
		
		
		
		/** \brief Create element. */
		public func new(ECBehaviorRenderableCanvas ecbehavior, BehaviorElement element) super(element)
			pECBehavior = ecbehavior
			pRenderable = -1
			
			pDynamicSkin = ecbehavior.getDynamicSkin().instance(element)
		end
		
		/** \brief Dispose of behavior instance. */
		public func void dispose()
			pDynamicSkin = null
			super.dispose()
		end
		
		
		
		/** \brief Initialize element from stub. */
		public func void init(StubElement stub)
			var String renderableName = pECBehavior.getRenderable().getValue(stub)
			if renderableName.empty()
				return
			end
			
			var ElementClass eclass = getElement().getClass()
			var CodecPropertyString codec = eclass.getCodecPropertyString()
			var Point size = pECBehavior.getSize().getPoint(stub, codec)
			var Color backgroundColor = pECBehavior.getBackgroundColor().getColor(stub, codec)
			var Image backgroundImage = pECBehavior.getBackgroundImage().getImage(stub, eclass)
			
			pCanvasView = CanvasView.new()
			pCanvasView.setSize(size)
			
			if backgroundColor != null
				var CanvasPaint canvasBackground = CanvasPaint.new()
				canvasBackground.setShapeType(CanvasPaintShape.rectangle)
				canvasBackground.setFillColor(backgroundColor)
				canvasBackground.setThickness(0)
				canvasBackground.setSize(size)
				canvasBackground.setOrder(pCanvasView.getCanvasCount())
				pCanvasView.addCanvas(canvasBackground)
			end
			
			if backgroundImage != null
				var CanvasImage canvasImage = CanvasImage.new()
				canvasImage.setImage(backgroundImage)
				canvasImage.setSize(size)
				canvasImage.setOrder(pCanvasView.getCanvasCount())
				pCanvasView.addCanvas(canvasImage)
			end
			
			var DynamicSkin dynamicSkin = pDynamicSkin.getDynamicSkin()
			pRenderable = dynamicSkin.getRenderableCount()
			dynamicSkin.addRenderable(renderableName, DynamicSkinRenderableType.canvas)
			dynamicSkin.setCanvasAt(pRenderable, pCanvasView)
		end
		
		
		
		/** \brief Behavior. */
		public func ECBehaviorRenderableCanvas getECBehavior()
			return pECBehavior
		end
		
		/** \brief Dynamic skin behavior instance. */
		public func ECBehaviorDynamicSkin.Instance getDynamicSkin()
			return pDynamicSkin
		end
		
		/** \brief Canvas view or \em null. */
		public func CanvasView getCanvasView()
			return pCanvasView
		end
	end
	
	
	
	private var ECBehaviorDynamicSkin pDynamicSkin
	private var ECPString pRenderable
	private var ECPPoint pSize
	private var ECPColor pBackgroundColor
	private var ECPImage pBackgroundImage
	
	
	
	/** \brief Create behavior element class. */
	public func new(BehaviorElementClass eclass, ECBehaviorDynamicSkin dynamicSkin) \
	this(eclass, dynamicSkin, "")
	end
	
	public func new(BehaviorElementClass eclass, ECBehaviorDynamicSkin dynamicSkin, String id) \
	this(eclass, dynamicSkin, id, id.empty() if "renderableCanvas." else "renderableCanvas(" + id + ").")
	end
	
	public func new(BehaviorElementClass eclass, ECBehaviorDynamicSkin dynamicSkin, \
	String id, String prefix) super(eclass, id)
		if dynamicSkin == null
			throw ENullPointer.new("dynamicSkin")
		end
		
		pDynamicSkin = dynamicSkin
		
		pRenderable = ECPString.new(prefix + "renderable", "")
		eclass.addProperty(pRenderable)
		
		pSize = ECPPoint.new(prefix + "size", Point.new(512, 512))
		eclass.addProperty(pSize)
		
		pBackgroundColor = ECPColor.new(prefix + "backgroundColor", null)
		eclass.addProperty(pBackgroundColor)
		
		pBackgroundImage = ECPImage.new(prefix + "backgroundImage", null)
		eclass.addProperty(pBackgroundImage)
		
		eclass.addBehavior(this)
	end
	
	/** \brief Dispose of behavior. */
	public func void dispose()
		pDynamicSkin = null
		super.dispose()
	end
	
	
	
	/** \brief Dynamic skin behavior. */
	public func ECBehaviorDynamicSkin getDynamicSkin()
		return pDynamicSkin
	end
	
	/** \brief Name of renderable to create or empty string if not used. */
	public func ECPString getRenderable()
		return pRenderable
	end
	
	/** \brief Size of canvas. */
	public func ECPPoint getSize()
		return pSize
	end
	
	/** \brief Background color of canvas. */
	public func ECPColor getBackgroundColor()
		return pBackgroundColor
	end
	
	/** \brief Background image of canvas. */
	public func ECPImage getBackgroundImage()
		return pBackgroundImage
	end
	
	
	
	/** \brief Get instance in element from owner element class. */
	public func Instance instance(BehaviorElement element)
		return element.getInstanceAt(getInstanceIndex()) cast Instance
	end
	
	
	
	/**
	 * \brief Get behavior in element class or \em null if absent.
	 * 
	 * Use this method to check if a particular BehaviorElementClass contains a behavior
	 * of type ECBehaviorComponent.
	 */
	static public func ECBehaviorRenderableCanvas getBehaviorIn(BehaviorElementClass eclass)
		return eclass.findBehavior(block ECBehaviorRenderableCanvas each
			return true
		end) cast ECBehaviorRenderableCanvas
	end
	
	/**
	 * \brief Get behavior with id in element class or \em null if absent.
	 * 
	 * Use this method to check if a particular BehaviorElementClass contains a behavior
	 * of type ECBehaviorRenderableCanvas with specific identifier.
	 */
	static public func ECBehaviorRenderableCanvas getBehaviorIn(BehaviorElementClass eclass, String id)
		return eclass.findBehavior(block ECBehaviorRenderableCanvas each
			return each.getID().equals(id)
		end) cast ECBehaviorRenderableCanvas
	end
	
	/**
	 * \brief Get list of all behaviors in element.
	 * 
	 * Returns list contains ECBehaviorRenderableCanvas behaviors in the order they have
	 * been created in the element.
	 */
	static public func Array getAllBehaviorsIn(BehaviorElementClass eclass)
		return eclass.collectBehaviors(block ECBehaviorRenderableCanvas each
			return true
		end)
	end
	
	
	
	/**
	 * \brief Get instance in element or \em null if absent.
	 * 
	 * Use this method to check if a particular BehaviorElement contains a behavior instance
	 * of type ECBehaviorRenderableCanvas.Instance . If more than one instance is present returns
	 * the first instance.
	 */
	static public func Instance getInstanceIn(BehaviorElement element)
		return element.findInstance(block Instance each
			return true
		end) cast Instance
	end
	
	/**
	 * \brief Get instance with id in element or \em null if absent.
	 * 
	 * Use this method to check if a particular BehaviorElement contains a behavior instance
	 * of type ECBehaviorRenderableCanvas.Instance with specific identifier.
	 */
	static public func Instance getInstanceIn(BehaviorElement element, String id)
		return element.findInstance(block Instance each
			return each.getECBehavior().getID().equals(id)
		end) cast Instance
	end
	
	/**
	 * \brief Get list of all instances in element.
	 * 
	 * Returns list contains ECBehaviorRenderableCanvas.Instance instances in the order they have
	 * been created in the element.
	 */
	static public func Array getAllInstancesIn(BehaviorElement element)
		return element.collectInstances(block Instance each
			return true
		end)
	end
	
	
	
	/** \brief Create Behavior instance. */
	public func ECBehaviorInstance createInstance(BehaviorElement element)
		return Instance.new(this, element)
	end
end
