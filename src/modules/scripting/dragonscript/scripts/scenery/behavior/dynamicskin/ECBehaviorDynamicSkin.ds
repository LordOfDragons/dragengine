/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */


namespace Dragengine.Scenery

pin Dragengine.Gui
pin Dragengine.LoadSave
pin Dragengine.Preloading
pin Dragengine.Utils


/**
 * \brief Behavior element behavior adding dynamic skin support.
 * 
 * Dynamic skins are used to alter the visual appearance of ECBehaviorComponent. Dynamic skins
 * affect the skin assigned to the ECBehaviorComponent. By default the ECBehaviorComponent with
 * empty identifier is assigned the dynamic skin. Multiple ECBehaviorDynamicSkin can be added
 * targeting different ECBehaviorComponent using their identifier. It is not possible to add
 * multiple ECBehaviorDynamicSkin targeting the same ECBehaviorComponent.
 * 
 * To use this behavior make sure to add first the ECBehaviorComponent to assign the dynamic
 * skins to. The example below adds to components and dynamic skins for each of them.
 * 
 * \code{.ds}
 * class MyElement extends BehaviorElementClass
 *    public func new()
 *       var ECBehaviorComponent component = ECBehaviorComponent.new(this)
 *       ECBehaviorDynamicSkin.new(this, component)
 *       
 *       var ECBehaviorComponent subComponent = ECBehaviorComponent.new(this, "subComponent")
 *       ECBehaviorDynamicSkin.new(this, subComponent)
 *    end
 * end
 * \endcode
 * 
 * Dynamic skin behaviors have an own identifier so they can be properly targeted by other
 * behaviors.
 * 
 * This behavior provides the dynamic skin for the component. Other behaviors add renderables
 * to them to provide their functionality. Multiple behaviors should not target the same
 * named renderable unless they are crafted in a specific way to not interfere with each other.
 * 
 * No element class properties are added.
 * 
 * This behavior does not require the element class to be persistable (setPersistable).
 * 
 * \todo
 * Add "light id" and "particle emitter id" to allow the dynamic skin to attach also to lights
 * (as light skin) and particle emitters.
 * 
 * \see https://developer.dragondreams.ch/wiki/doku.php/dragengine:modules:dragonscript:behavior_dynamicskin
 */
class ECBehaviorDynamicSkin extends DefaultECBehavior
	/**
	 * \brief Behavior factory.
	 * \ref 1.25
	 * 
	 * Automatically assigns these behaviors if present before adding:
	 * - Required: \ref ECBehaviorComponent
	 * 
	 * Example XML element class:
	 * \code{.xml}
	 * <behavior type='ECBehaviorCamera'>
	 *   <!-- optional: use component with id instead of empty string -->
	 *   <string name='component'>second</string>
	 * </behavior>
	 * 
	 * <!-- for adding multiple behaviors use unique identifiers -->
	 * <behavior type='ECBehaviorCamera' id='second'>
	 *   ...
	 * </behavior>
	 * \endcode
	 * 
	 * Element class properties added by the behavior can also be set directly inside the tag
	 * be removing the property name prefix and starting with a "." (for exampler ".propertyName").
	 */
	class Factory implements BehaviorFactory
		func new()
		end
		
		func String factoryId()
			return "ECBehaviorDynamicSkin"
		end
		
		func ECBehavior addBehavior(BehaviorElementClass eclass, String id, Dictionary parameters)
			var ECBehaviorDynamicSkin behavior = ECBehaviorDynamicSkin.new(eclass,\
				eclass.sharedFactoryHelper.defaultComponent(eclass, parameters), id)
			BehaviorElementClass.sharedFactoryHelper.setPropertiesFromParameters(\
				eclass, parameters, "dynamicSkin", id)
			return behavior
		end
	end
	
	/** \brief Behavior instance. */
	class Instance extends DefaultECBehaviorInstance
		private var ECBehaviorDynamicSkin pECBehavior
		private var ECBehaviorComponent.Instance pComponent
		private var DynamicSkin pDynamicSkin
		
		
		
		/** \brief Create element. */
		public func new( ECBehaviorDynamicSkin ecbehavior, BehaviorElement element ) super( element )
			this.pECBehavior = ecbehavior
			this.pDynamicSkin = DynamicSkin.new()
			this.pComponent = ecbehavior.getComponent().instance( element )
		end
		
		/** \brief Dispose of composeable instance. */
		public func void dispose()
			this.pDynamicSkin = null
			this.pComponent = null
			super.dispose()
		end
		
		
		
		/** \brief Initialize element from stub. */
		public func void init( StubElement stub )
			this.pComponent.getComponent().setDynamicSkin( this.pDynamicSkin )
		end
		
		
		
		/** \brief Behavior. */
		public func ECBehaviorDynamicSkin getECBehavior()
			return this.pECBehavior
		end
		
		/** \brief Component behavior. */
		public func ECBehaviorComponent.Instance getComponent()
			return this.pComponent
		end
		
		/** \brief Dynamic skin. */
		public func DynamicSkin getDynamicSkin()
			return this.pDynamicSkin
		end
	end
	
	
	
	private var ECBehaviorComponent pComponent
	
	
	
	/** \brief Create behavior element class attaching to component with empty id. */
	public func new( BehaviorElementClass eclass, ECBehaviorComponent component ) \
	this( eclass, component, "" )
	end
	
	/** \brief Create behavior element class attaching to component with empty id. */
	public func new( BehaviorElementClass eclass, ECBehaviorComponent component, \
	String id ) super( eclass, id )
		if component == null
			throw ENullPointer.new( "component" )
		end
		
		this.pComponent = component
		
		eclass.addBehavior( this )
	end
	
	/** \brief Dispose of behavior. */
	public func void dispose()
		this.pComponent = null
		super.dispose()
	end
	
	
	
	/** \brief Component behavior. */
	public func ECBehaviorComponent getComponent()
		return this.pComponent
	end
	
	
	
	/** \brief Get instance in element from owner element class. */
	public func Instance instance( BehaviorElement element )
		return element.getInstanceAt( this.getInstanceIndex() ) cast Instance
	end
	
	
	
	/**
	 * \brief Get behavior in element class or \em null if absent.
	 * 
	 * Use this method to check if a particular BehaviorElementClass contains a behavior
	 * of type ECBehaviorComponent.
	 */
	static public func ECBehaviorDynamicSkin getBehaviorIn( BehaviorElementClass eclass )
		return eclass.findBehavior( block ECBehaviorDynamicSkin each
			return true
		end ) cast ECBehaviorDynamicSkin
	end
	
	/**
	 * \brief Get behavior with id in element class or \em null if absent.
	 * 
	 * Use this method to check if a particular BehaviorElementClass contains a behavior
	 * of type ECBehaviorDynamicSkin with specific identifier.
	 */
	static public func ECBehaviorDynamicSkin getBehaviorIn( BehaviorElementClass eclass, String id )
		return eclass.findBehavior( block ECBehaviorDynamicSkin each
			return each.getID().equals( id )
		end ) cast ECBehaviorDynamicSkin
	end
	
	/**
	 * \brief Get list of all behaviors in element.
	 * 
	 * Returns list contains ECBehaviorDynamicSkin behaviors in the order they have
	 * been created in the element.
	 */
	static public func Array getAllBehaviorsIn( BehaviorElementClass eclass )
		return eclass.collectBehaviors( block ECBehaviorDynamicSkin each
			return true
		end )
	end
	
	
	
	/**
	 * \brief Get instance in element or \em null if absent.
	 * 
	 * Use this method to check if a particular BehaviorElement contains a behavior instance
	 * of type ECBehaviorDynamicSkin.Instance . If more than one instance is present returns
	 * the first instance.
	 */
	static public func Instance getInstanceIn( BehaviorElement element )
		return element.findInstance( block Instance each
			return true
		end ) cast Instance
	end
	
	/**
	 * \brief Get instance with id in element or \em null if absent.
	 * 
	 * Use this method to check if a particular BehaviorElement contains a behavior instance
	 * of type ECBehaviorDynamicSkin.Instance with specific identifier.
	 */
	static public func Instance getInstanceIn( BehaviorElement element, String id )
		return element.findInstance( block Instance each
			return each.getECBehavior().getID().equals( id )
		end ) cast Instance
	end
	
	/**
	 * \brief Get list of all instances in element.
	 * 
	 * Returns list contains ECBehaviorDynamicSkin.Instance instances in the order they have
	 * been created in the element.
	 */
	static public func Array getAllInstancesIn( BehaviorElement element )
		return element.collectInstances( block Instance each
			return true
		end )
	end
	
	
	
	/** \brief Create Behavior instance. */
	public func ECBehaviorInstance createInstance( BehaviorElement element )
		return Instance.new( this, element )
	end
end
