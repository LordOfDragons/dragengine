/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */


namespace Dragengine.Scenery

pin Dragengine.Gui
pin Dragengine.LoadSave
pin Dragengine.Preloading
pin Dragengine.Utils


/**
 * \brief Behavior element behavior adding decal projected onto ECBehaviorComponent.
 * 
 * To use this behavior add first an ECBehaviorComponent. Then use setComponentID() to set
 * the component behavior to project the decal upon. Only this component will received a
 * decal instance.
 * 
 * Multiple ECBehaviorDecal instances can be added to add decals to individual
 * ECBehaviorComponent instances using their identifiers like this example below.
 * 
 * \code{.ds}
 * class MyElement extends BehaviorElementClass
 *    public func new()
 *       ECBehaviorComponent.new(this)
 *       ECBehaviorDecal.new(this)
 *       
 *       ECBehaviorComponent.new(this, "subComponent")
 *       var ECBehaviorDecal decal = ECBehaviorDecal.new(this, "subDecal")
 *       decal.setComponentID("subComponent")
 *    end
 * end
 * \endcode
 * 
 * The skin used on the decal is static. Use other behaviors to alter the decal at runtime.
 * 
 * Element class properties have the prefix "decal{(id)}.".
 * 
 * To apply decal to world elements (like decals loaded with game worlds) use ECBehaviorWorldDecal.
 * 
 * This behavior does not require the element class to be persistable (setPersistable).
 */
class ECBehaviorDecal extends DefaultECBehavior
	/**
	 * \brief Behavior factory.
	 * \ref 1.25
	 * 
	 * Automatically assigns these behaviors if present before adding:
	 * - Required: \ref ECBehaviorComponent
	 * 
	 * Example XML element class:
	 * \code{.xml}
	 * <behavior type='ECBehaviorDecal'>
	 *   <!-- optional: use component with id instead of empty string -->
	 *   <string name='component'>second</string>
	 * </behavior>
	 * 
	 * <!-- for adding multiple behaviors use unique identifiers -->
	 * <behavior type='ECBehaviorDecal' id='second'>
	 *   ...
	 * </behavior>
	 * \endcode
	 */
	class Factory implements BehaviorFactory
		func new()
		end
		
		func String factoryId()
			return "ECBehaviorDecal"
		end
		
		func ECBehavior addBehavior(BehaviorElementClass eclass, String id, Dictionary parameters)
			var ECBehaviorComponent component
			if parameters.has("component")
				var String bid = parameters.getAt("component") cast String
				if bid != null
					component = ECBehaviorComponent.getBehaviorIn(eclass, bid)
				end
				
			else
				component = ECBehaviorComponent.getBehaviorIn(eclass)
			end
			
			return ECBehaviorDecal.new(eclass, component, id)
		end
	end
	
	/** \brief Behavior instance. */
	class Instance extends DefaultECBehaviorInstance
		private var ECBehaviorDecal pECBehavior
		private var ECBehaviorComponent.Instance pComponent
		private var Decal pDecal
		
		
		
		/** \brief Create element. */
		public func new(ECBehaviorDecal ecbehavior, BehaviorElement element) super(element)
			pECBehavior = ecbehavior
			pComponent = ecbehavior.getComponent().instance(element)
		end
		
		/** \brief Dispose of behavior instance. */
		public func void dispose()
			pComponent = null
			super.dispose()
		end
		
		
		
		/** \brief Initialize element from stub. */
		public func void init(StubElement stub)
			var ElementClass eclass = getElement().getClass()
			var CodecPropertyString codec = eclass.getCodecPropertyString()
			
			pDecal = Decal.new()
			pDecal.setPosition(pECBehavior.getPosition().getVector(stub, codec))
			pDecal.setOrientation(Quaternion.newFromEuler(pECBehavior.getOrientation().getVector(stub, codec)))
			pDecal.setSize(pECBehavior.getSize().getVector(stub, codec))
			pDecal.setSkin(pECBehavior.getSkin().getSkin(stub, eclass))
			
			pComponent.getComponent().addDecal(pDecal)
		end
		
		
		
		/** \brief Behavior. */
		public func ECBehaviorDecal getECBehavior()
			return pECBehavior
		end
		
		/** \brief Component behavior instance. */
		public func ECBehaviorComponent.Instance getComponent()
			return pComponent
		end
		
		/** \brief Decal. */
		public func Decal getDecal()
			return pDecal
		end
	end
	
	
	
	private var ECBehaviorComponent pComponent
	private var ECPVector pPosition
	private var ECPVector pOrientation
	private var ECPVector pSize
	private var ECPSkin pSkin
	
	
	
	/** \brief Create behavior element class. */
	public func new(BehaviorElementClass eclass, ECBehaviorComponent component) \
	this(eclass, component, "")
	end
	
	public func new(BehaviorElementClass eclass, ECBehaviorComponent component, String id) \
	this(eclass, component, id, id.empty() if "decal." else "decal(" + id + ").")
	end
	
	public func new(BehaviorElementClass eclass, ECBehaviorComponent component, \
	String id, String prefix) super(eclass, id)
		if component == null
			throw ENullPointer.new("component")
		end
		
		pComponent = component
		
		pPosition = ECPVector.new(prefix + "position")
		eclass.addProperty(pPosition)
		
		pOrientation = ECPVector.new(prefix + "orientation")
		eclass.addProperty(pOrientation)
		
		pSize = ECPVector.new(prefix + "size", Vector.new(0.1, 0.1, 0.1))
		eclass.addProperty(pSize)
		
		pSkin = ECPSkin.new(prefix + "skin")
		eclass.addProperty(pSkin)
		
		eclass.addBehavior(this)
	end
	
	/** \brief Dispose of behavior. */
	public func void dispose()
		pComponent = null
		super.dispose()
	end
	
	
	
	/** \brief Component behavior to apply decal to. */
	public func ECBehaviorComponent getComponent()
		return pComponent
	end
	
	/** \brief Position to project decal from. */
	public func ECPVector getPosition()
		return pPosition
	end
	
	/** \brief Orientation to project decal from. */
	public func ECPVector getOrientation()
		return pOrientation
	end
	
	/** \brief Size of decal to project. */
	public func ECPVector getSize()
		return pSize
	end
	
	/** \brief Skin to apply to decal. */
	public func ECPSkin getSkin()
		return pSkin
	end
	
	
	
	/** \brief Get instance in element from owner element class. */
	public func Instance instance(BehaviorElement element)
		return element.getInstanceAt(getInstanceIndex()) cast Instance
	end
	
	
	
	/**
	 * \brief Get behavior in element class or \em null if absent.
	 * 
	 * Use this method to check if a particular BehaviorElementClass contains a behavior
	 * of type ECBehaviorCollider.
	 */
	static public func ECBehaviorDecal getBehaviorIn(BehaviorElementClass eclass)
		return eclass.findBehavior(block ECBehaviorDecal each
			return true
		end) cast ECBehaviorDecal
	end
	
	/**
	 * \brief Get behavior with id in element class or \em null if absent.
	 * 
	 * Use this method to check if a particular BehaviorElementClass contains a behavior
	 * of type ECBehaviorDecal with specific identifier.
	 */
	static public func ECBehaviorDecal getBehaviorIn(BehaviorElementClass eclass, String id)
		return eclass.findBehavior(block ECBehaviorDecal each
			return each.getID().equals(id)
		end) cast ECBehaviorDecal
	end
	
	/**
	 * \brief Get list of all behaviors in element.
	 * 
	 * Returns list contains ECBehaviorDecal behaviors in the order they have
	 * been created in the element.
	 */
	static public func Array getAllBehaviorsIn(BehaviorElementClass eclass)
		return eclass.collectBehaviors(block ECBehaviorDecal each
			return true
		end)
	end
	
	
	
	/**
	 * \brief Get instance in element or \em null if absent.
	 * 
	 * Use this method to check if a particular BehaviorElement contains a behavior instance
	 * of type ECBehaviorDecal.Instance . If more than one instance is present returns
	 * the first instance.
	 */
	static public func Instance getInstanceIn(BehaviorElement element)
		return element.findInstance(block Instance each
			return true
		end) cast Instance
	end
	
	/**
	 * \brief Get instance with id in element or \em null if absent.
	 * 
	 * Use this method to check if a particular BehaviorElement contains a behavior instance
	 * of type ECBehaviorDecal.Instance with specific identifier.
	 */
	static public func Instance getInstanceIn(BehaviorElement element, String id)
		return element.findInstance(block Instance each
			return each.getECBehavior().getID().equals(id)
		end) cast Instance
	end
	
	/**
	 * \brief Get list of all instances in element.
	 * 
	 * Returns list contains ECBehaviorDecal.Instance instances in the order they have
	 * been created in the element.
	 */
	static public func Array getAllInstancesIn(BehaviorElement element)
		return element.collectInstances(block Instance each
			return true
		end)
	end
	
	
	
	/** \brief Create Behavior instance. */
	public func ECBehaviorInstance createInstance(BehaviorElement element)
		return Instance.new(this, element)
	end
end
