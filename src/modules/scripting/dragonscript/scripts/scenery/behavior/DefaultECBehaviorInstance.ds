/* 
 * Drag[en]gine DragonScript Script Module
 *
 * Copyright (C) 2020, Roland Pl√ºss (roland@rptd.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */


namespace Dragengine.Scenery

pin Dragengine.Gui
pin Dragengine.LoadSave
pin Dragengine.Preloading
pin Dragengine.Utils


/**
 * \brief Default implementation of ECBehaviorInstance doing nothing.
 */
public class DefaultECBehaviorInstance implements ECBehaviorInstance
	private var BehaviorElement pElement
	private var int pInstanceIndex
	private var bool pRequiresThink
	private var bool pRequiresEnterFrame
	
	
	
	/** \brief Create default composeable instance. */
	public func new(BehaviorElement element)
		pElement = element
		pRequiresThink = false
		pRequiresEnterFrame = false
		pInstanceIndex = element.getInstanceCount()
	end
	
	/** \brief Dispose of behavior instance. */
	public func void dispose()
		pElement = null
	end
	
	
	
	/** \brief Behavior element to apply behavior to. */
	public func BehaviorElement getElement()
		return pElement
	end
	
	/** \brief Behavior instance index. */
	public func int getInstanceIndex()
		return pInstanceIndex
	end
	
	
	
	/** \brief Initialize element from stub. */
	public func void init(StubElement stub)
	end
	
	/** \brief State changed (visble, touchable). */
	public func void stateChanged()
	end
	
	/** \brief Position or orientation changed. */
	public func void geometryChanged()
	end
	
	/** \brief Add element to game world. */
	public func void addToGameWorld()
	end
	
	/** \brief Remove element from game world. */
	public func void removeFromGameWorld()
	end
	
	/** \brief Behavior instance requires enterFrame() to be called. */
	public func bool requiresEnterFrame()
		return pRequiresEnterFrame
	end
	
	/** \brief Set if behavior instance requires enterFrame() to be called. */
	protected func void setRequiresEnterFrame(bool required)
		pRequiresEnterFrame = required
	end
	
	/** \brief Frame update started. */
	public func void enterFrame()
	end
	
	/** \brief Behavior instance requires think() to be called. */
	public func bool requiresThink()
		return pRequiresThink
	end
	
	/**
	 * \brief Set if behavior instance requires think() to be called.
	 */
	protected func void setRequiresThink(bool required)
		if required == pRequiresThink
			return
		end
		pRequiresThink = required
		
		if pElement != null // dispose protection
			pElement.requiresThinkChanged()
		end
	end
	
	/** \brief Think about what to do for the next frame update. */
	public func void think(float elapsed)
	end
	
	/** \brief Post thinking after physics processing is finished. */
	public func void postThink(float elapsed)
	end
	
	/**
	 * \brief Attach element to object set by the mapper in the IGDE World Editor.
	 * 
	 * Behavior instance is responsible to call BehaviorElement.setParent() if the
	 * attaching succeedes. If multiple behaviors support attaching they have to negotiate
	 * with each other who does the attaching for example by using BehaviorElement.getParent().
	 */
	public func void attachToParent(Element parent)
	end
	
	/**
	 * \brief Read behavior instance from file.
	 * 
	 * The default implementation reads a single byte expecting value 0 indicating version 0.
	 * This allows subclasses to add persistency support by overwriting this method without
	 * super calling it.
	 */
	public func void readFromFile(PersistencyEnvironment env, FileReader reader)
		if reader.readByte() !=  0 // version
			throw EInvalidParam.new("unsupported version")
		end
	end
	
	/**
	 * \brief Write behavior instance to file.
	 * 
	 * The default implementation writes a single byte of value 0 indicating version 0.
	 * This allows subclasses to add persistency support by overwriting this method without
	 * super calling it.
	 */
	public func void writeToFile(PersistencyEnvironment env, FileWriter writer)
		writer.writeByte(0) // version
	end
end
