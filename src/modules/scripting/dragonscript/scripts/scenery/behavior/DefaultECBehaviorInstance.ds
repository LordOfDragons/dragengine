/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */


namespace Dragengine.Scenery

pin Dragengine.Gui
pin Dragengine.LoadSave
pin Dragengine.Preloading
pin Dragengine.Utils


/**
 * \brief Default implementation of ECBehaviorInstance doing nothing.
 */
class DefaultECBehaviorInstance implements ECBehaviorInstance
	var BehaviorElement pElement
	var int pInstanceIndex
	var bool pRequiresThink
	var bool pRequiresEnterFrame
	
	
	
	/** \brief Create default composeable instance. */
	func new(BehaviorElement element)
		pElement = element
		pRequiresThink = false
		pRequiresEnterFrame = false
		pInstanceIndex = element.getInstanceCount()
	end
	
	/** \brief Dispose of behavior instance. */
	func void dispose()
		pElement = null
	end
	
	
	
	/** \brief Behavior element to apply behavior to. */
	func BehaviorElement getElement()
		return pElement
	end
	
	/** \brief Behavior instance index. */
	func int getInstanceIndex()
		return pInstanceIndex
	end
	
	
	
	/** \brief Initialize element from stub. */
	func void init(StubElement stub)
	end
	
	/** \brief State changed (visble, touchable). */
	func void stateChanged()
	end
	
	/** \brief Position or orientation changed. */
	func void geometryChanged()
	end
	
	/** \brief Add element to game world. */
	func void addToGameWorld()
	end
	
	/** \brief Remove element from game world. */
	func void removeFromGameWorld()
	end
	
	/** \brief Behavior instance requires enterFrame() to be called. */
	func bool requiresEnterFrame()
		return pRequiresEnterFrame
	end
	
	/** \brief Set if behavior instance requires enterFrame() to be called. */
	protected func void setRequiresEnterFrame(bool required)
		pRequiresEnterFrame = required
	end
	
	/** \brief Frame update started. */
	func void enterFrame()
	end
	
	/** \brief Behavior instance requires think() to be called. */
	func bool requiresThink()
		return pRequiresThink
	end
	
	/**
	 * \brief Set if behavior instance requires think() to be called.
	 */
	protected func void setRequiresThink(bool required)
		if required == pRequiresThink
			return
		end
		pRequiresThink = required
		
		if pElement != null // dispose protection
			pElement.requiresThinkChanged()
		end
	end
	
	/** \brief Think about what to do for the next frame update. */
	func void think(float elapsed)
	end
	
	/** \brief Post thinking after physics processing is finished. */
	func void postThink(float elapsed)
	end
	
	/**
	 * \brief Attach element to object set by the mapper in the IGDE World Editor.
	 * 
	 * Behavior instance is responsible to call BehaviorElement.setParent() if the
	 * attaching succeedes. If multiple behaviors support attaching they have to negotiate
	 * with each other who does the attaching for example by using BehaviorElement.getParent().
	 */
	func void attachToParent(Element parent)
	end
	
	/**
	 * \brief Read behavior instance from file.
	 * 
	 * The default implementation reads a single byte expecting value 0 indicating version 0.
	 * This allows subclasses to add persistency support by overwriting this method without
	 * super calling it.
	 */
	func void readFromFile(PersistencyEnvironment env, FileReader reader)
		if reader.readByte() !=  0 // version
			throw EInvalidParam.new("unsupported version")
		end
	end
	
	/**
	 * \brief Write behavior instance to file.
	 * 
	 * The default implementation writes a single byte of value 0 indicating version 0.
	 * This allows subclasses to add persistency support by overwriting this method without
	 * super calling it.
	 */
	func void writeToFile(PersistencyEnvironment env, FileWriter writer)
		writer.writeByte(0) // version
	end
end
