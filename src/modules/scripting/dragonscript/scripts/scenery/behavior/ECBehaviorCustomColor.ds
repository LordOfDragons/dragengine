/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */


namespace Dragengine.Scenery

pin Dragengine.Gui
pin Dragengine.LoadSave
pin Dragengine.Preloading
pin Dragengine.Utils
pin Dragengine.TriggerSystem
pin Dragengine.BehaviorTreeSystem
pin Dragengine.StateMachineSystem


/**
 * \brief Behavior element behavior adding custom color support.
 * \version 1.5
 * 
 * Custom colors are typically used to allow players to customize the look of their player
 * actor by altering the color of individual body parts. This behavior allows to define
 * custom color slots the player or artist can manipulate. This behavior does not define
 * how custom colors are applied. This is left for other behaviors or game scripts to do.
 * 
 * Custom colors compose of a display name and the currently assigned color. This color
 * can be null to use the assigned default color. An optional list of colors can be used
 * to restrict the colors the player can select. If the list is empty the player can choose
 * the color unrestricted. In addition a display description can be added in case the
 * game developer would like to communicate additional information about the custom color.
 * 
 * This behavior can be added multiple times to an element. Each instance creates one custom
 * color the player can manipulate. To distinguish the custom colors each instance has an
 * identifier which can be used to retrieve a specific instance. The prefix of the element
 * class properties is "customColor." . If the identifier is not empty the element class
 * properties have the prefix "{id}.customColor.". This can be overwritten if required.
 * This is an example of the typical use of this behavior:
 * 
 * \code{.ds}
 * class MyElement extends BehaviorElementClass
 *    func new()
 *       ECBehaviorCustomColor.new(this, "color1", "Color 1", Color.blue)
 *       ECBehaviorCustomColor.new(this, "color2", "Color 2", Color.red)
 *    end
 * end
 * \endcode
 * 
 * This defines an element which contains two custom colors the player can choose at will.
 * You can now define the parameters to use for both custom colors using for example the
 * properties "customColor(color1).color" for the first custom color and
 * "customColor(color2).color" for the second custom color.
 * 
 * It is recommended to always specify an identifier even if only one custom color is used.
 * This avoids potentially name conflicts especially if other behaviors are added custom colors.
 * 
 * Element class properties have the prefix "customColor{(id)}.".
 * 
 * \par Listening
 * 
 * Since this behavior provides no support to apply the chosen color listening is used.
 * Behaviors knowing how to apply the color add a listener and are notified if the color
 * changes.
 * 
 * \par Persistency
 * 
 * This behavior supports persistable element class (setPersistable). Persists the selected
 * color.
 * 
 * \see https://developer.dragondreams.ch/wiki/doku.php/dragengine:modules:dragonscript:behavior_customcolor
 */
class ECBehaviorCustomColor extends DefaultECBehavior
	/** \brief Listener for behavior instance events. */
	interface Listener
		/** \brief Chosen color changed. */
		func void colorChanged(Instance instance)
	end
	
	/** \brief Default implementation of behavior instance listener. */
	class DefaultListener implements Listener
		/** \brief Create default listener. */
		func new()
		end
		
		/** \brief Chosen color changed. */
		func void colorChanged(Instance instance)
		end
	end
	
	/** \brief Factory creating listeners. */
	interface ListenerFactory
		/** \brief Create listener. */
		func Listener createListener(Instance instance)
	end
	
	/** \brief Factory creating listeners using block. */
	class BlockListenerFactory implements ListenerFactory
		var Block pBlock
		
		/** \brief Create factory using block receiving Instance as parameter returning Listener. */
		func new(Block blockFactory)
			if blockFactory == null
				throw ENullPointer.new()
			end
			pBlock = blockFactory
		end
		
		/** \brief Create listener. */
		func Listener createListener(Instance instance)
			return pBlock.run(instance) cast Listener
		end
	end
	
	/**
	 * \brief Behavior factory.
	 * \version 1.25
	 * 
	 * Example XML element class:
	 * \code{.xml}
	 * <behavior type='ECBehaviorCustomColor'>
	 *   <!-- optional: use behavior tree with id instead of empty string -->
	 *   <string name='behaviorTree'>second</string>
	 *   
	 *   <!-- optional: use state machine with id instead of empty string -->
	 *   <string name='stateMachine'>second</string>
	 * </behavior>
	 * 
	 * <!-- for adding multiple behaviors use unique identifiers -->
	 * <behavior type='ECBehaviorCustomColor' id='second'/>
	 * \endcode
	 * 
	 * Element class properties added by the behavior can also be set directly inside the tag
	 * be removing the property name prefix and starting with a "." (for example ".propertyName").
	 */
	class Factory implements BehaviorFactory
		func new()
		end
		
		func String factoryId()
			return "ECBehaviorCustomColor"
		end
		
		func ECBehavior addBehavior(BehaviorElementClass eclass, String id, Dictionary parameters)
			var ECBehaviorCustomColor behavior = ECBehaviorCustomColor.new(eclass, id)
			
			behavior.setBehaviorTree(eclass.sharedFactoryHelper.defaultBehaviorTree(eclass, parameters))
			behavior.setStateMachine(eclass.sharedFactoryHelper.defaultStateMachine(eclass, parameters))
			
			eclass.sharedFactoryHelper.setPropertiesFromParameters(eclass, parameters, "customColor", id)
			return behavior
		end
	end
	
	/** \brief Behavior instance. */
		/**
		 * \brief Behavior tree action "customColor{(id)}.set".
		 * \version 1.26
		 */
		class BTASet extends BTSMActionCondition
			var Instance pInstance
			
			func new(Instance instance)
				pInstance = instance
			end
			
			func BTResult runAction(Dictionary parameters)
				var Object value
				
				value = parameters.getAt("color", null)
				if value != null
					if value.equals("default")
						pInstance.setColor(null)
						
					else
						pInstance.setColor(pInstance.getElement().getClass().\
							getCodecPropertyString().decodeColor3(value cast String))
					end
				end
				
				return BTResult.success
			end
		end
		
		/**
		 * \brief Behavior tree action/condition "customColor{(id)}.check".
		 * \version 1.26
		 */
		class BTACheck extends BTSMActionCondition
			var Instance pInstance
			var String pPrefix
			
			func new(Instance instance, String prefix)
				pInstance = instance
				pPrefix = prefix
			end
			
			func BTResult runAction(Dictionary parameters)
				return check("", parameters) if BTResult.success else BTResult.failure
			end
			
			func bool evaluateCondition(Dictionary parameters)
				return check(pPrefix, parameters)
			end
			
			func bool check(String prefix, Dictionary parameters)
				var bool result = true
				var Object value
				
				value = parameters.getAt(prefix + "color.red.less", null)
				if value != null
					result &= pInstance.getColorOrDefault().getRed() < (value cast String).toFloat()
				end
				
				value = parameters.getAt(prefix + "color.red.greater", null)
				if value != null
					result &= pInstance.getColorOrDefault().getRed() > (value cast String).toFloat()
				end
				
				value = parameters.getAt(prefix + "color.green.less", null)
				if value != null
					result &= pInstance.getColorOrDefault().getGreen() < (value cast String).toFloat()
				end
				
				value = parameters.getAt(prefix + "color.green.greater", null)
				if value != null
					result &= pInstance.getColorOrDefault().getGreen() > (value cast String).toFloat()
				end
				
				value = parameters.getAt(prefix + "color.blue.less", null)
				if value != null
					result &= pInstance.getColorOrDefault().getBlue() < (value cast String).toFloat()
				end
				
				value = parameters.getAt(prefix + "color.blue.greater", null)
				if value != null
					result &= pInstance.getColorOrDefault().getBlue() > (value cast String).toFloat()
				end
				
				return result
			end
		end
		
	class Instance extends DefaultECBehaviorInstance
		var ECBehaviorCustomColor pECBehavior
		var UnicodeString pName
		var UnicodeString pDescription
		var Array pAllowedColors
		var Color pDefaultColor
		var Color pColor
		var Array pListeners
		var SMContext pSMContext
		
		
		
		/** \brief Create element. */
		func new(ECBehaviorCustomColor ecbehavior, BehaviorElement element) super(element)
			pECBehavior = ecbehavior
			pAllowedColors = Array.new()
			pListeners = Array.new()
		end
		
		/** \brief Dispose of composeable instance. */
		func void dispose()
			pListeners = null
			pSMContext = null
			super.dispose()
		end
		
		
		
		/** \brief Initialize element from stub. */
		func void init(StubElement stub)
			var BehaviorElement element = getElement()
			
			var CodecPropertyString codec = element.getClass().getCodecPropertyString()
			
			pName = pECBehavior.getName().getValue(stub)
			pDescription = pECBehavior.getDescription().getValue(stub)
			pAllowedColors = pECBehavior.getAllowedColors().getColors(stub)
			pDefaultColor = pECBehavior.getDefaultColor().getColor(stub, codec)
			
			pECBehavior.createListeners(this)
			
			setColor(pECBehavior.getColor().getColor(stub, codec))
			
			if pECBehavior.getBehaviorTree() != null
				var String prefix = pECBehavior.getPrefix()
				var BTContext c = pECBehavior.getBehaviorTree().instance(element).getContext()
				c.setAction(prefix + "set", BTASet.new(this))
				
				var String name = prefix + "check"
				var BTACheck btacheck = BTACheck.new(this, prefix)
				c.setAction(name, btacheck)
				c.setCondition(name, btacheck)
			end
			
			if pECBehavior.getStateMachine() != null
				var String prefix = pECBehavior.getPrefix()
				pSMContext = pECBehavior.getStateMachine().instance(element).getContext()
				pSMContext.setAction(prefix + "set", BTASet.new(this))
				
				var String name = prefix + "check"
				var BTACheck btacheck = BTACheck.new(this, prefix)
				pSMContext.setAction(name, btacheck)
				pSMContext.setCondition(name, btacheck)
			end
		end
		
		
		
		/** \brief Behavior. */
		func ECBehaviorCustomColor getECBehavior()
			return pECBehavior
		end
		
		
		
		/** \brief Name to display in UI. */
		func UnicodeString getName()
			return pName
		end
		
		/** \brief Set name to display in UI. */
		protected func void setName(UnicodeString name)
			if name == null
				throw ENullPointer.new("name")
			end
			pName = name
		end
		
		/** \brief Description to display in UI. */
		func UnicodeString getDescription()
			return pDescription
		end
		
		/** \brief Set description to display in UI. */
		protected func void setDescription(UnicodeString description)
			if description == null
				throw ENullPointer.new("description")
			end
			pDescription = description
		end
		
		
		
		/**
		 * \brief List of allowed colors or empty list to allow all colors.
		 * 
		 * Returns Array of Color.
		 */
		func Array getAllowedColors()
			return pAllowedColors
		end
		
		/** \brief Count of allowed colors. */
		func int getAllowedColorCount()
			return pAllowedColors.getCount()
		end
		
		/** \brief Allowed color at index. */
		func Color getAllowedColorAt(int index)
			return pAllowedColors.getAt(index) cast Color
		end
		
		/** \brief Random allowed color or null if list is empty. */
		func Color randomAllowedColor()
			if pAllowedColors.getCount() > 0
				return pAllowedColors.random() cast Color
				
			else
				return null
			end
		end
		
		/** \brief Add color. */
		protected func void addAllowedColor(Color color)
			if color == null
				throw ENullPointer.new("color")
			end
			pAllowedColors.add(color)
		end
		
		/** \brief Remove all allowed colors. */
		protected func void removeAllAllowedColors()
			pAllowedColors.removeAll()
		end
		
		
		
		/** \brief Default color if color is null. */
		func Color getDefaultColor()
			return pDefaultColor
		end
		
		/** \brief Set default color if color is null. */
		protected func void setDefaultColor(Color color)
			if color == null
				throw ENullPointer.new("color")
			end
			pDefaultColor = color
		end
		
		/** \brief Color or null to use the default color. */
		func Color getColor()
			return pColor
		end
		
		/** \brief Color or default color if color is null. */
		func Color getColorOrDefault()
			if pColor != null
				return pColor
				
			else
				return pDefaultColor
			end
		end
		
		/** \brief Set color or null to use the default color. */
		func void setColor(Color color)
			if pColor == color or (pColor != null and color != null and pColor.equals(color))
				return
			end
			
			pColor = color
			
			pListeners.forEach(block Listener each
				each.colorChanged(this)
			end)
			if pSMContext != null
				pSMContext.runEvent(pECBehavior.getPrefix() + "color")
			end
		end
		
		/** \brief Reset color to default color. */
		func void resetColor()
			setColor(pDefaultColor)
		end
		
		
		
		/** \brief Add listener. */
		func void addListener(Listener listener)
			if listener == null
				throw EInvalidParam.new()
			end
			pListeners.add(listener)
		end
		
		/** \brief Remove listener. */
		func void removeListener(Listener listener)
			pListeners.remove(listener)
		end
		
		
		
		/** \brief Read element from file. */
		func void readFromFile(PersistencyEnvironment env, FileReader reader)
			select reader.readByte() // version
			case 0
				var PersistencyFlags flags = PersistencyFlags.new(1, reader)
				
				if flags.getAt(0)
					setColor(Color.readFromFile(reader))
					
				else
					resetColor()
				end
				
			else
				throw EInvalidParam.new("unsupported version")
			end
		end
		
		/** Writes the element to a file. */
		func void writeToFile(PersistencyEnvironment env, FileWriter writer)
			writer.writeByte(0) // version
			
			var PersistencyFlags flags = PersistencyFlags.new(1)
			flags.setAt(0, pColor != null)
			flags.writeToFile(writer)
			
			if pColor != null
				pColor.writeToFile(writer)
			end
		end
	end
	
	
	
	var ECPUnicodeString pName
	var ECPUnicodeString pDescription
	var ECPColorList pAllowedColors
	var ECPColor pDefaultColor
	var ECPColor pColor
	var Array pListenerFactories
	var ECBehaviorBehaviorTree pBehaviorTree
	var ECBehaviorStateMachine pStateMachine
	var String pPrefix
	
	
	
	/**
	 * \brief Create behavior element class.
	 */
	func new(BehaviorElementClass eclass) this(eclass, "")
	end
	
	func new(BehaviorElementClass eclass, String id) \
	this(eclass, id, id.empty() if "customColor" else "customColor(" + id + ")")
	end
	
	func new(BehaviorElementClass eclass, String id, String subID)\
	this(eclass, id, subID, subID + ".")
	end
	
	func new(BehaviorElementClass eclass, String id, String subID, \
	String prefix) super(eclass, id)
		pPrefix = prefix
		pListenerFactories = Array.new()
		
		eclass.addProperty(pName = ECPUnicodeString.new(prefix + "name", UnicodeString.new()))
		eclass.addProperty(pDescription = ECPUnicodeString.new(prefix + "description", UnicodeString.new()))
		eclass.addProperty(pAllowedColors = ECPColorList.new(prefix + "allowedColors", eclass.getCodecPropertyString()))
		eclass.addProperty(pDefaultColor = ECPColor.new(prefix + "defaultColor", Color.white))
		eclass.addProperty(pColor = ECPColor.new(prefix + "color", null))
		
		eclass.addBehavior(this)
	end
	
	/** \brief Dispose of behavior. */
	func void dispose()
		pListenerFactories = null
		pBehaviorTree = null
		pStateMachine = null
		super.dispose()
	end
	
	
	
	/**
	 * \brief Prefix.
	 * \version 1.26
	 */
	func String getPrefix()
		return pPrefix
	end
	
	/** \brief Name to display in UI. */
	func ECPUnicodeString getName()
		return pName
	end
	
	/** \brief Description to display in UI. */
	func ECPUnicodeString getDescription()
		return pDescription
	end
	
	/** \brief List of allowed colors or empty list to allow all colors. */
	func ECPColorList getAllowedColors()
		return pAllowedColors
	end
	
	/** \brief Default color if color is null. */
	func ECPColor getDefaultColor()
		return pDefaultColor
	end
	
	/** \brief Color or null to use the default color. */
	func ECPColor getColor()
		return pColor
	end
	
	/**
	 * \brief Behavior tree or null.
	 * \version 1.26
	 */
	func ECBehaviorBehaviorTree getBehaviorTree()
		return pBehaviorTree
	end
	
	/**
	 * \brief Set behavior tree or null.
	 * \version 1.26
	 */
	func void setBehaviorTree(ECBehaviorBehaviorTree behaviorTree)
		pBehaviorTree = behaviorTree
	end
	
	/**
	 * \brief State machine or null.
	 * \version 1.26
	 */
	func ECBehaviorStateMachine getStateMachine()
		return pStateMachine
	end
	
	/**
	 * \brief Set state machine or null.
	 * \version 1.26
	 */
	func void setStateMachine(ECBehaviorStateMachine stateMachine)
		pStateMachine = stateMachine
	end
	
	/** \brief Add listener factory. */
	func void addListenerFactory(ListenerFactory factory)
		if factory == null
			throw ENullPointer.new()
		end
		pListenerFactories.add(factory)
	end
	
	/**
	 * \brief Add listener factory using block.
	 * 
	 * Block receives as parameter Instance and returns Listener.
	 */
	func void addListenerFactory(Block blockFactory)
		pListenerFactories.add(BlockListenerFactory.new(blockFactory))
	end
	
	/** \brief Visit listener factories with block with argument ListenerFactory. */
	func void forEachListenerFactory(Block ablock)
		pListenerFactories.forEach(ablock)
	end
	
	/** \brief Create listeners from factories adding them to behavior instance. */
	func void createListeners(Instance instance)
		pListenerFactories.forEach(block ListenerFactory each
			instance.addListener(each.createListener(instance))
		end)
	end
	
	
	
	/** \brief Get instance in element from owner element class. */
	func Instance instance(BehaviorElement element)
		return element.getInstanceAt(getInstanceIndex()) cast Instance
	end
	
	
	
	/**
	 * \brief Get behavior in element class or \em null if absent.
	 * 
	 * Use this method to check if a particular BehaviorElementClass contains a behavior
	 * of type ECBehaviorCollider.
	 */
	static func ECBehaviorCustomColor getBehaviorIn(BehaviorElementClass eclass)
		return eclass.findBehavior(block ECBehaviorCustomColor each
			return true
		end) cast ECBehaviorCustomColor
	end
	
	/**
	 * \brief Get behavior with id in element class or \em null if absent.
	 * 
	 * Use this method to check if a particular BehaviorElementClass contains a behavior
	 * of type ECBehaviorCustomColor with specific identifier.
	 */
	static func ECBehaviorCustomColor getBehaviorIn(BehaviorElementClass eclass, String id)
		return eclass.findBehavior(block ECBehaviorCustomColor each
			return each.getID().equals(id)
		end) cast ECBehaviorCustomColor
	end
	
	/**
	 * \brief Get list of all behaviors in element.
	 * 
	 * Returns list contains ECBehaviorCustomColor behaviors in the order they have
	 * been created in the element.
	 */
	static func Array getAllBehaviorsIn(BehaviorElementClass eclass)
		return eclass.collectBehaviors(block ECBehaviorCustomColor each
			return true
		end)
	end
	
	
	
	/**
	 * \brief Get instance in element or \em null if absent.
	 * 
	 * Use this method to check if a particular BehaviorElement contains a behavior instance
	 * of type ECBehaviorCustomColor.Instance . If more than one instance is present returns
	 * the first instance.
	 */
	static func Instance getInstanceIn(BehaviorElement element)
		return element.findInstance(block Instance each
			return true
		end) cast Instance
	end
	
	/**
	 * \brief Get instance with id in element or \em null if absent.
	 * 
	 * Use this method to check if a particular BehaviorElement contains a behavior instance
	 * of type ECBehaviorCustomColor.Instance with specific identifier.
	 */
	static func Instance getInstanceIn(BehaviorElement element, String id)
		return element.findInstance(block Instance each
			return each.getECBehavior().getID().equals(id)
		end) cast Instance
	end
	
	/**
	 * \brief Get list of all instances in element.
	 * 
	 * Returns list contains ECBehaviorCustomColor.Instance instances in the order they have
	 * been created in the element.
	 */
	static func Array getAllInstancesIn(BehaviorElement element)
		return element.collectInstances(block Instance each
			return true
		end)
	end
	
	
	
	/** \brief Create Behavior instance. */
	func ECBehaviorInstance createInstance(BehaviorElement element)
		return Instance.new(this, element)
	end
end
