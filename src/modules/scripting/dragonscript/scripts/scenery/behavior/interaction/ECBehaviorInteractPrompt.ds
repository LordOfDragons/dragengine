/* 
 * Drag[en]gine DragonScript Script Module
 *
 * Copyright (C) 2020, Roland Pl√ºss (roland@rptd.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */


namespace Dragengine.Scenery

pin Dragengine.Gui
pin Dragengine.LoadSave
pin Dragengine.Scenery
pin Dragengine.Preloading
pin Dragengine.Utils


/**
 * \brief Behavior adding support to elements to show interact prompt to player.
 * 
 * This is a passive behavior storing the information used by player prompt behaviors to
 * show to the player what he can do with the element for example when looking at it.
 * 
 * The promp information composes of an image/video, style, verb, description and command.
 * Not all information is shown by player prompt behaviors. Typically the image/video and
 * verb is shown sometimes only the image/video. If multiple interactions are possible
 * the command is usually also shown. The description can be used if the player needs
 * some more information that can not be easily given using an image/video or a simple
 * interact verb. The style is an optional information can be be used by the player prompt
 * behavior to tint the image/video, verb text or even the description. This can be used
 * to tell the player additional hints like if the interaction has potential caveats or
 * is currently not possible to be done. The meaning of the style value depends on the
 * prompt display widget used. A typical use of style is to be used as suffix for the
 * widget designer selector.
 * 
 * The player prompt behavior determines where the image/video, verb, command and
 * description text is shown.
 * 
 * This behavior has an enabled parameter. This can be used to temporarily disable the
 * interact prompt for example to enable it when certain conditions are met or if multiple
 * interact prompts are used for the same element. This allows to set them all up and
 * enabling only the active one.
 * 
 * The command parameter is the name of the command as present in the CommandManager used
 * by the player interact prompt display. If found the bindings used to trigger this
 * command are shown or the command name whever the prompt display decides to use.
 * 
 * Prompts are typically used with collision testing for example ECBehaviorLookAt and
 * likewise. In this situation it can be useful to assign prompts to individual areas
 * of a collider for example using hit bone name as produced by collision tests. For this
 * use case the bones parameter can be used. If this parameter is an not an empty list
 * this prompt shall only be considered if the hit bone is included in the list.
 * 
 * This behavior can be used multiple times on an element to add different interaction
 * prompts. Use the behavior identifier to tell them apart.
 * 
 * Default property prefix is "interactPrompt{(id)}."
 * 
 * Supports these properties:
 * - "interactPrompt{(id)}.image": ECPImage
 * - "interactPrompt{(id)}.video": ECPVideo
 * - "interactPrompt{(id)}.style": ECPString
 * - "interactPrompt{(id)}.verb": ECPUnicodeString
 * - "interactPrompt{(id)}.description": ECPUnicodeString
 * - "interactPrompt{(id)}.command": ECPString
 * - "interactPrompt{(id)}.enabled": ECPBoolean
 * - "interactPrompt{(id)}.bones": ECPStringList
 */
class ECBehaviorInteractPrompt extends DefaultECBehavior
	/** \brief Behavior instance. */
	class Instance extends DefaultECBehaviorInstance
		private var ECBehaviorInteractPrompt pECBehavior
		private var Image pImage
		private var Video pVideo
		private var String pStyle
		private var UnicodeString pVerb
		private var UnicodeString pDescription
		private var String pCommand
		private var bool pEnabled
		private var Array pBones
		
		
		
		/** \brief Create behavior instance. */
		public func new( ECBehaviorInteractPrompt ecbehavior, BehaviorElement element ) super( element )
			this.pECBehavior = ecbehavior
		end
		
		
		
		/** \brief Initialize element from stub. */
		public func void init( StubElement stub )
			var ElementClass eclass = this.getElement().getClass()
			var CodecPropertyString codec = eclass.getCodecPropertyString()
			
			this.pImage = this.pECBehavior.getImage().getImage( stub, eclass )
			this.pVideo = this.pECBehavior.getVideo().getVideo( stub, eclass )
			this.pStyle = this.pECBehavior.getStyle().getValue( stub )
			this.pVerb = this.pECBehavior.getVerb().getValue( stub )
			this.pDescription = this.pECBehavior.getDescription().getValue( stub )
			this.pCommand = this.pECBehavior.getCommand().getValue( stub )
			this.pEnabled = this.pECBehavior.getEnabled().getValue( stub )
			this.pBones = this.pECBehavior.getBones().getList( stub, codec )
		end
		
		
		
		/** \brief Behavior. */
		public func ECBehaviorInteractPrompt getECBehavior()
			return this.pECBehavior
		end
		
		/** \brief Image. */
		public func Image getImage()
			return this.pImage
		end
		
		/** \brief Set image. */
		public func void setImage( Image image )
			this.pImage = image
		end
		
		/** \brief Video. */
		public func Video getVideo()
			return this.pVideo
		end
		
		/** \brief Set video. */
		public func void setVideo( Video video )
			this.pVideo = video
		end
		
		/** \brief Style. */
		public func String getStyle()
			return this.pStyle
		end
		
		/** \brief Set style. */
		public func void setStyle( String style )
			if style == null
				throw ENullPointer.new( "style" )
			end
			this.pStyle = style
		end
		
		/** \brief Verb. */
		public func UnicodeString getVerb()
			return this.pVerb
		end
		
		/** \brief Set verb. */
		public func void setVerb( UnicodeString verb )
			if verb == null
				throw ENullPointer.new( "verb" )
			end
			this.pVerb = verb
		end
		
		/** \brief Description. */
		public func UnicodeString getDescription()
			return this.pDescription
		end
		
		/** \brief Set description. */
		public func void setDescription( UnicodeString description )
			if description == null
				throw ENullPointer.new( "description" )
			end
			this.pDescription = description
		end
		
		/** \brief Command. */
		public func String getCommand()
			return this.pCommand
		end
		
		/** \brief Set command. */
		public func void setCommand( String command )
			if command == null
				throw ENullPointer.new( "command" )
			end
			this.pCommand = command
		end
		
		/** \brief Prompt is enabled. */
		public func bool getEnabled()
			return this.pEnabled
		end
		
		/** \brief Set if prompt is enabled. */
		public func void setEnabled( bool enabled )
			this.pEnabled = enabled
		end
		
		
		
		/** \brief Count of bones this prompt is limited to. */
		public func int getBoneCount()
			return this.pBones.getCount()
		end
		
		/** \brief Bone at index this prompt is limited to. */
		public func String getBoneAt( int index )
			return this.pBones.getAt( index ) cast String
		end
		
		/** \brief Bone is included in list of bones this prompt is limited to. */
		public func bool hasBone( String bone )
			return this.pBones.has( bone )
		end
		
		/**
		 * \brief Visit bones bones this prompt is limited to using block.
		 * 
		 * Block receives as argument "String bone".
		 */
		public func void forEachBone( Block ablock )
			this.pBones.forEach( ablock )
		end
		
		/** \brief Set list of bones this prompt is limited to as Array of String. */
		protected func void setBones( Array bones )
			this.pBones = bones
		end
	end
	
	
	
	private var ECPImage pImage
	private var ECPVideo pVideo
	private var ECPString pStyle
	private var ECPUnicodeString pVerb
	private var ECPUnicodeString pDescription
	private var ECPString pCommand
	private var ECPBoolean pEnabled
	private var ECPStringList pBones
	
	
	
	/**
	 * \brief Create behavior element class.
	 */
	public func new( BehaviorElementClass eclass ) this( eclass, "" )
	end
	
	public func new( BehaviorElementClass eclass, String id ) this( eclass, id, \
	id.empty() if "interactPrompt" else "interactPrompt(" + id + ")" )
	end
	
	public func new( BehaviorElementClass eclass, String id, String subID ) \
	this( eclass, id, subID, subID + "." )
	end
	
	public func new( BehaviorElementClass eclass, String id, String subID, String prefix ) super( eclass, id )
		this.pImage = ECPImage.new( prefix + "image" )
		eclass.addProperty( this.pImage )
		
		this.pVideo = ECPVideo.new( prefix + "video" )
		eclass.addProperty( this.pVideo )
		
		this.pStyle = ECPString.new( prefix + "style", "" )
		eclass.addProperty( this.pStyle )
		
		this.pVerb = ECPUnicodeString.new( prefix + "verb", "" )
		eclass.addProperty( this.pVerb )
		
		this.pDescription = ECPUnicodeString.new( prefix + "description", "" )
		eclass.addProperty( this.pDescription )
		
		this.pCommand = ECPString.new( prefix + "command", "" )
		eclass.addProperty( this.pCommand )
		
		this.pEnabled = ECPBoolean.new( prefix + "enabled", true )
		eclass.addProperty( this.pEnabled )
		
		this.pBones = ECPStringList.new( prefix + "bones" )
		eclass.addProperty( this.pBones )
		
		eclass.addBehavior( this )
	end
	
	
	
	/** \brief Image. */
	public func ECPImage getImage()
		return this.pImage
	end
	
	/** \brief Video. */
	public func ECPVideo getVideo()
		return this.pVideo
	end
	
	/** \brief Style. */
	public func ECPString getStyle()
		return this.pStyle
	end
	
	/** \brief Verb. */
	public func ECPUnicodeString getVerb()
		return this.pVerb
	end
	
	/** \brief Description. */
	public func ECPUnicodeString getDescription()
		return this.pDescription
	end
	
	/** \brief Command. */
	public func ECPString getCommand()
		return this.pCommand
	end
	
	/** \brief Prompt is enabled. */
	public func ECPBoolean getEnabled()
		return this.pEnabled
	end
	
	/** \brief List of bones to restrict the prompt to. */
	public func ECPStringList getBones()
		return this.pBones
	end
	
	
	
	/** \brief Get instance in element from owner element class. */
	public func Instance instance( BehaviorElement element )
		return element.getInstanceAt( this.getInstanceIndex() ) cast Instance
	end
	
	
	
	/**
	 * \brief Get behavior in element class or \em null if absent.
	 * 
	 * Use this method to check if a particular BehaviorElementClass contains a behavior
	 * of type ECBehaviorInteractPrompt.
	 */
	static public func ECBehaviorInteractPrompt getBehaviorIn( BehaviorElementClass eclass )
		return eclass.findBehavior( block ECBehavior each
			return each castable ECBehaviorInteractPrompt
		end ) cast ECBehaviorInteractPrompt
	end
	
	/**
	 * \brief Get behavior with id in element class or \em null if absent.
	 * 
	 * Use this method to check if a particular BehaviorElementClass contains a behavior
	 * of type ECBehaviorInteractPrompt with specific identifier.
	 */
	static public func ECBehaviorInteractPrompt getBehaviorIn( BehaviorElementClass eclass, String id )
		return eclass.findBehavior( block ECBehaviorInteractPrompt each
			return each castable ECBehaviorInteractPrompt and \
				( each cast ECBehaviorInteractPrompt ).getID().equals( id )
		end ) cast ECBehaviorInteractPrompt
	end
	
	/**
	 * \brief Get list of all behaviors in element.
	 * 
	 * Returns list contains ECBehaviorInteractPrompt behaviors in the order they have
	 * been created in the element.
	 */
	static public func Array getAllBehaviorsIn( BehaviorElementClass eclass )
		var Array list = Array.new()
		eclass.forEachBehavior( block ECBehavior each
			if each castable ECBehaviorInteractPrompt
				list.add( each )
			end
		end )
		return list
	end
	
	
	
	/**
	 * \brief Get instance in element or \em null if absent.
	 * 
	 * Use this method to check if a particular BehaviorElement contains a behavior instance
	 * of type ECBehaviorInteractPrompt.Instance . If more than one instance is present returns
	 * the first instance.
	 */
	static public func Instance getInstanceIn( BehaviorElement element )
		return element.findInstance( block ECBehaviorInstance each
			return each castable Instance
		end ) cast Instance
	end
	
	/**
	 * \brief Get instance with id in element or \em null if absent.
	 * 
	 * Use this method to check if a particular BehaviorElement contains a behavior instance
	 * of type ECBehaviorInteractPrompt.Instance with specific identifier.
	 */
	static public func Instance getInstanceIn( BehaviorElement element, String id )
		return element.findInstance( block ECBehaviorInstance each
			return each castable Instance and \
				( each cast Instance ).getECBehavior().getID().equals( id )
		end ) cast Instance
	end
	
	/**
	 * \brief Get list of all instances in element.
	 * 
	 * Returns list contains ECBehaviorInteractPrompt.Instance instances in the order they have
	 * been created in the element.
	 */
	static public func Array getAllInstancesIn( BehaviorElement element )
		var Array list = Array.new()
		element.forEachInstance( block ECBehaviorInstance each
			if each castable Instance
				list.add( each )
			end
		end )
		return list
	end
	
	
	
	/**
	 * \brief Get list of all enabled instances in element.
	 * 
	 * Returns list contains ECBehaviorInteractPrompt.Instance instances in the order they have
	 * been created in the element.
	 */
	static public func Array getAllEnabledInstancesIn( BehaviorElement element )
		var Array list = Array.new()
		element.forEachInstance( block ECBehaviorInstance each
			if each castable Instance and ( each cast Instance ).getEnabled()
				list.add( each )
			end
		end )
		return list
	end
	
	
	
	/** \brief Create Behavior instance. */
	public func ECBehaviorInstance createInstance( BehaviorElement element )
		return Instance.new( this, element )
	end
end
