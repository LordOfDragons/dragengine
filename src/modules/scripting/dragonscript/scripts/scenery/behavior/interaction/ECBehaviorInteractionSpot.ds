/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */


namespace Dragengine.Scenery

pin Dragengine.Gui
pin Dragengine.LoadSave
pin Dragengine.Preloading
pin Dragengine.Utils


/**
 * \brief Behavior element behavior adding support to define interaction spot for actors.
 * 
 * Defines position and orientation actors or the player have to assume to properly interact
 * with the owner element. This is typically required to line up animations of the actor and
 * the element. Furthermore this allows to track if an actor is occupying the interaction
 * spot. Hence at most one actor can occpuy an interaction spot at each time.
 * 
 * Optionally a look-at position can be defined. If the occupier is using
 * ECBehaviorConversationActor it can use the look-at position to make actors train their
 * view on a specific point relative to the interaction spot owner element.
 * 
 * Elements able to occpuy an interaction spot have to use the ECBehaviorOccupier behavior.
 * Both the interaction spot and the occupier have to persist the other behavior.
 * During restoring no notifications are triggered this way.
 * 
 * Element class properties have the prefix "interactionSpot{(id)}.".
 * 
 * This behavior uses no other behaviors.
 * 
 * This behavior does require the element class to be persistable (setPersistable).
 * 
 * \see https://developer.dragondreams.ch/wiki/doku.php/dragengine:modules:dragonscript:behavior_interactionspot
 */
class ECBehaviorInteractionSpot extends DefaultECBehavior
	/** \brief Listener for behavior instance events. */
	interface Listener
		/** \brief Occupier has claimed spot. */
		func void spotClaimed(Instance instance, ECBehaviorOccupier.Instance occupier)
		
		/** \brief Occupier has release spot. */
		func void spotReleased(Instance instance, ECBehaviorOccupier.Instance occupier)
	end
	
	/** \brief Default implementation of behavior instance listener. */
	class DefaultListener implements Listener
		/** \brief Create default listener. */
		public func new()
		end
		
		/** \brief Occupier has claimed spot. */
		public func void spotClaimed(Instance instance, ECBehaviorOccupier.Instance occupier)
		end
		
		/** \brief Occupier has release spot. */
		public func void spotReleased(Instance instance, ECBehaviorOccupier.Instance occupier)
		end
	end
	
	/** \brief Factory creating listeners. */
	interface ListenerFactory
		/** \brief Create listener. */
		func Listener createListener(Instance instance)
	end
	
	/** \brief Factory creating listeners using block. */
	class BlockListenerFactory implements ListenerFactory
		private var Block pBlock
		
		/** \brief Create factory using block receiving Instance as parameter returning Listener. */
		public func new(Block blockFactory)
			if blockFactory == null
				throw ENullPointer.new()
			end
			pBlock = blockFactory
		end
		
		/** \brief Create listener. */
		public func Listener createListener(Instance instance)
			return pBlock.run(instance) cast Listener
		end
	end
	
	/**
	 * \brief Behavior factory.
	 * \version 1.25
	 * 
	 * Example XML element class:
	 * \code{.xml}
	 * <behavior type='ECBehaviorInteractionSpot'/>
	 * 
	 * <!-- for adding multiple behaviors use unique identifiers -->
	 * <behavior type='ECBehaviorInteractionSpot' id='second'/>
	 * \endcode
	 * 
	 * Element class properties added by the behavior can also be set directly inside the tag
	 * be removing the property name prefix and starting with a "." (for example ".propertyName").
	 */
	class Factory implements BehaviorFactory
		func new()
		end
		
		func String factoryId()
			return "ECBehaviorInteractionSpot"
		end
		
		func ECBehavior addBehavior(BehaviorElementClass eclass, String id, Dictionary parameters)
			var ECBehaviorInteractionSpot behavior = ECBehaviorInteractionSpot.new(eclass, id)
			eclass.sharedFactoryHelper.setPropertiesFromParameters(\
				eclass, parameters, "interactionSpot", id)
			return behavior
		end
	end
	
	
	
	/** \brief Behavior instance. */
	class Instance extends DefaultECBehaviorInstance
		private var ECBehaviorInteractionSpot pECBehavior
		private var Vector pPosition
		private var Quaternion pOrientation
		private var Matrix pMatrix
		private var Matrix pInverseMatrix
		private var Vector pLookAt
		private var ECBehaviorOccupier.Instance pOccupier
		private var ElementResolver pElementResolver
		private var Array pListeners
		
		
		
		/** \brief Create element. */
		public func new(ECBehaviorInteractionSpot ecbehavior, BehaviorElement element) super(element)
			pECBehavior = ecbehavior
			pListeners = Array.new()
		end
		
		/** \brief Dispose of behavior instance. */
		public func void dispose()
			release()
			
			pListeners = null
			pElementResolver = null
			
			super.dispose()
		end
		
		
		
		/** \brief Initialize element from stub. */
		public func void init(StubElement stub)
			var CodecPropertyString codec = getElement().getClass().getCodecPropertyString()
			pPosition = pECBehavior.getPosition().getVector(stub, codec)
			pOrientation = Quaternion.newFromEuler(pECBehavior.getOrientation().getVector(stub, codec))
			pLookAt = pECBehavior.getLookAt().getVector(stub, codec)
			
			pECBehavior.createListeners(this)
		end
		
		
		
		/** \brief Behavior. */
		public func ECBehaviorInteractionSpot getECBehavior()
			return pECBehavior
		end
		
		/** \brief Interaction position. */
		public func Vector getPosition()
			return pPosition
		end
		
		/** \brief Interaction orientation. */
		public func Quaternion getOrientation()
			return pOrientation
		end
		
		/** \brief Interaction matrix relative to element. */
		public func Matrix getMatrix()
			if pMatrix == null
				pMatrix = Matrix.newWorld(pPosition, pOrientation)
			end
			return pMatrix
		end
		
		/** \brief Inverse interaction matrix relative to element. */
		public func Matrix getInverseMatrix()
			if pInverseMatrix == null
				pInverseMatrix = getMatrix().getInverse()
			end
			return pInverseMatrix
		end
		
		/** \brief Interaction matrix in world space. */
		public func DMatrix getWorldMatrix()
			return DMatrix.newWorld(DVector.new(pPosition), pOrientation) \
				* getElement().getElementMatrix()
		end
		
		/** \brief Inverse interaction matrix in world space. */
		public func DMatrix getInverseWorldMatrix()
			return getWorldMatrix().getInverse()
		end
		
		/** \brief Look-at position for element to use while approaching or null if not used. */
		public func Vector getLookAt()
			return pLookAt
		end
		
		/** \brief Look-at position in world space for element to use while approaching or null if not used. */
		public func DVector getLookAtWorld()
			if pLookAt != null
				return getElement().getElementMatrix() * DVector.new(pLookAt)
			end
			return null
		end
		
		/** \brief Element resolver used during loading or \em null if not set. */
		public func ElementResolver getElementResolver()
			return pElementResolver
		end
		
		
		
		/** \brief Occupier or \em null. */
		public func ECBehaviorOccupier.Instance getOccupier()
			return pOccupier
		end
		
		/** \brief Spot is empty. */
		public func bool isEmpty()
			return pOccupier == null
		end
		
		/** \brief Spot is occupied. */
		public func bool isNotEmpty()
			return pOccupier != null
		end
		
		/** \brief Element is occupying spot. */
		public func bool isOccupying(BehaviorElement element)
			return pOccupier != null and pOccupier.getElement() == element
		end
		
		/** \brief Element is not occupying spot. */
		public func bool isNotOccupying(BehaviorElement element)
			return pOccupier == null or pOccupier.getElement() != element
		end
		
		/**
		 * \brief Occupier can claim spot.
		 * \retval false Spot is not empty.
		 * \retval false Occupier is already occupying another spot.
		 * \retval true Claiming is possible
		 */
		public func bool canClaim(ECBehaviorOccupier.Instance occupier)
			return pOccupier == null and not occupier.isOccupying()
		end
		
		
		/**
		 * \brief Claim spot.
		 * \throws EInvalidParam \em occupier is \em null.
		 * \throws EInvalidParam Spot is not empty.
		 * \throws EInvalidParam \em occupier is already occupying another spot.
		 */
		public func void claim(ECBehaviorOccupier.Instance occupier)
			if pOccupier != null or occupier.isOccupying()
				throw EInvalidParam.new()
			end
			
			occupier.setInteractionSpot(this)
			pOccupier = occupier
			
			pListeners.forEach(block Listener each
				each.spotClaimed(this, occupier)
			end)
		end
		
		/** \brief Release spot if claimed. */
		public func void release()
			if pOccupier == null
				return
			end
			
			var ECBehaviorOccupier.Instance occupier = pOccupier
			occupier.setInteractionSpot(null)
			pOccupier = null
			
			pListeners.forEach(block Listener each
				each.spotReleased(this, occupier)
			end)
		end
		
		
		
		/** \brief Add listener. */
		public func void addListener(Listener listener)
			if listener == null
				throw EInvalidParam.new()
			end
			pListeners.add(listener)
		end
		
		/** \brief Remove listener. */
		public func void removeListener(Listener listener)
			pListeners.remove(listener)
		end
		
		
		
		/** \brief Frame update started. */
		public func void enterFrame()
			if pElementResolver != null
				pElementResolver.resolve(getElement().getGameWorld())
				pElementResolver = null
			end
		end
		
		
		
		/** \brief Read element from file. */
		public func void readFromFile(PersistencyEnvironment env, FileReader reader)
			select reader.readByte() // version
			case 0
				var PersistencyFlags flags = PersistencyFlags.new(1, reader)
				
				if flags.getAt(0)
					pElementResolver = ElementResolver.new()
					pElementResolver.addBehavior(reader, block ECBehaviorOccupier.Instance occupier
						pOccupier = occupier
					end)
					setRequiresEnterFrame(true)
				end
				
			else
				throw EInvalidParam.new("unsupported version")
			end
		end
		
		/** \brief Write element to file. */
		public func void writeToFile(PersistencyEnvironment env, FileWriter writer)
			writer.writeByte(0) // version
			
			var PersistencyFlags flags = PersistencyFlags.new(1)
			flags.setAt(0, pOccupier != null)
			flags.writeToFile(writer)
			
			if pOccupier != null
				ElementResolver.writeToFileBehavior(writer, pOccupier)
			end
		end
	end
	
	
	
	private var ECPVector pPosition
	private var ECPVector pOrientation
	private var ECPVector pLookAt
	private var Array pListenerFactories
	
	
	
	/**
	 * \brief Create behavior element class.
	 */
	public func new(BehaviorElementClass eclass) this(eclass, "")
	end
	
	public func new(BehaviorElementClass eclass, String id) \
	this(eclass, id, id.empty() if "interactionSpot." else "interactionSpot(" + id + ").")
	end
	
	public func new(BehaviorElementClass eclass, String id, String prefix) super(eclass, id)
		pListenerFactories = Array.new()
		
		pPosition = ECPVector.new(prefix + "position")
		eclass.addProperty(pPosition)
		
		pOrientation = ECPVector.new(prefix + "orientation")
		eclass.addProperty(pOrientation)
		
		pLookAt = ECPVector.new(prefix + "lookAt", null)
		eclass.addProperty(pLookAt)
		
		eclass.addBehavior(this)
	end
	
	/** \brief Dispose of behavior. */
	public func void dispose()
		pListenerFactories = null
		super.dispose()
	end
	
	
	
	/** \brief Interaction position. */
	public func ECPVector getPosition()
		return pPosition
	end
	
	/** \brief Interaction orientation. */
	public func ECPVector getOrientation()
		return pOrientation
	end
	
	/** \brief Look-at position for element to use while approaching. */
	public func ECPVector getLookAt()
		return pLookAt
	end
	
	/** \brief Add listener factory. */
	public func void addListenerFactory(ListenerFactory factory)
		if factory == null
			throw ENullPointer.new()
		end
		pListenerFactories.add(factory)
	end
	
	/**
	 * \brief Add listener factory using block.
	 * 
	 * Block receives as parameter Instance and returns Listener.
	 */
	public func void addListenerFactory(Block blockFactory)
		pListenerFactories.add(BlockListenerFactory.new(blockFactory))
	end
	
	/** \brief Visit listener factories with block with argument ListenerFactory. */
	public func void forEachListenerFactory(Block ablock)
		pListenerFactories.forEach(ablock)
	end
	
	/** \brief Create listeners from factories adding them to behavior instance. */
	public func void createListeners(Instance instance)
		pListenerFactories.forEach(block ListenerFactory each
			instance.addListener(each.createListener(instance))
		end)
	end
	
	
	
	/** \brief Get instance in element from owner element class. */
	public func Instance instance(BehaviorElement element)
		return element.getInstanceAt(getInstanceIndex()) cast Instance
	end
	
	
	
	/**
	 * \brief Get behavior in element class or \em null if absent.
	 * 
	 * Use this method to check if a particular BehaviorElementClass contains a behavior
	 * of type ECBehaviorComponent.
	 */
	static public func ECBehaviorInteractionSpot getBehaviorIn(BehaviorElementClass eclass)
		return eclass.findBehavior(block ECBehaviorInteractionSpot each
			return true
		end) cast ECBehaviorInteractionSpot
	end
	
	/**
	 * \brief Get behavior with id in element class or \em null if absent.
	 * 
	 * Use this method to check if a particular BehaviorElementClass contains a behavior
	 * of type ECBehaviorInteractionSpot with specific identifier.
	 */
	static public func ECBehaviorInteractionSpot getBehaviorIn(BehaviorElementClass eclass, String id)
		return eclass.findBehavior(block ECBehaviorInteractionSpot each
			return each.getID().equals(id)
		end) cast ECBehaviorInteractionSpot
	end
	
	/**
	 * \brief Get list of all behaviors in element.
	 * 
	 * Returns list contains ECBehaviorInteractionSpot behaviors in the order they have
	 * been created in the element.
	 */
	static public func Array getAllBehaviorsIn(BehaviorElementClass eclass)
		return eclass.collectBehaviors(block ECBehaviorInteractionSpot each
			return true
		end)
	end
	
	
	
	/**
	 * \brief Get instance in element or \em null if absent.
	 * 
	 * Use this method to check if a particular BehaviorElement contains a behavior instance
	 * of type ECBehaviorInteractionSpot.Instance . If more than one instance is present returns
	 * the first instance.
	 */
	static public func Instance getInstanceIn(BehaviorElement element)
		return element.findInstance(block Instance each
			return true
		end) cast Instance
	end
	
	/**
	 * \brief Get instance with id in element or \em null if absent.
	 * 
	 * Use this method to check if a particular BehaviorElement contains a behavior instance
	 * of type ECBehaviorInteractionSpot.Instance with specific identifier.
	 */
	static public func Instance getInstanceIn(BehaviorElement element, String id)
		return element.findInstance(block Instance each
			return each.getECBehavior().getID().equals(id)
		end) cast Instance
	end
	
	/**
	 * \brief Get list of all instances in element.
	 * 
	 * Returns list contains ECBehaviorInteractionSpot.Instance instances in the order they have
	 * been created in the element.
	 */
	static public func Array getAllInstancesIn(BehaviorElement element)
		return element.collectInstances(block Instance each
			return true
		end)
	end
	
	
	
	/** \brief Create Behavior instance. */
	public func ECBehaviorInstance createInstance(BehaviorElement element)
		return Instance.new(this, element)
	end
end
