/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */


namespace Dragengine.Scenery

pin Dragengine.Gui
pin Dragengine.LoadSave
pin Dragengine.Preloading
pin Dragengine.Utils
pin Dragengine.Scenery
pin Dragengine.BehaviorTreeSystem
pin Dragengine.StateMachineSystem


/**
 * \brief Behavior element behavior adding support to uccipy an ECBehaviorInteractionSpot.
 * 
 * ECBehaviorInteractionSpot defines position and orientation actors or the player have to
 * assume to interact properly with this element. The ECBehaviorOccupier behavior provides
 * support to claim such interaction spots.
 * 
 * Usually an element has one instance of ECBehaviorOccupier but it is possible to use
 * multiple instance for example to track different interacions. Think of a chair the
 * actor can sit down upon. The actor can use one occupier to track sitting on the chair
 * while using another occupier to track interacting with something while being seated.
 * 
 * Element class properties have the prefix "occupier{(id)}.".
 * 
 * This behavior uses no other behaviors.
 * 
 * This behavior does not require the element class to be persistable (setPersistable).
 * 
 * \see https://developer.dragondreams.ch/wiki/doku.php/dragengine:modules:dragonscript:behavior_occupier
 */
class ECBehaviorOccupier extends DefaultECBehavior
	/** \brief Listener for behavior instance events. */
	interface Listener
		/** \brief Occupier claimed interaction spot. */
		func void spotClaimed(Instance instance, ECBehaviorInteractionSpot.Instance interactionSpot)
		
		/** \brief Occupier released interaction spot. */
		func void spotReleased(Instance instance, ECBehaviorInteractionSpot.Instance interactionSpot)
	end
	
	/** \brief Default implementation of behavior instance listener. */
	class DefaultListener implements Listener
		/** \brief Create default listener. */
		func new()
		end
		
		/** \brief Occupier claimed interaction spot. */
		func void spotClaimed(Instance instance, ECBehaviorInteractionSpot.Instance interactionSpot)
		end
		
		/** \brief Occupier released interaction spot. */
		func void spotReleased(Instance instance, ECBehaviorInteractionSpot.Instance interactionSpot)
		end
	end
	
	/** \brief Factory creating listeners. */
	interface ListenerFactory
		/** \brief Create listener. */
		func Listener createListener(Instance instance)
	end
	
	/** \brief Factory creating listeners using block. */
	class BlockListenerFactory implements ListenerFactory
		var Block pBlock
		
		/** \brief Create factory using block receiving Instance as parameter returning Listener. */
		func new(Block blockFactory)
			if blockFactory == null
				throw ENullPointer.new()
			end
			pBlock = blockFactory
		end
		
		/** \brief Create listener. */
		func Listener createListener(Instance instance)
			return pBlock.run(instance) cast Listener
		end
	end
	
	/**
	 * \brief Behavior factory.
	 * \version 1.25
	 * 
	 * Example XML element class:
	 * \code{.xml}
	 * <behavior type='ECBehaviorOccupier'>
	 *   <!-- optional: add behavior trees. default adds all behavior trees. -->
	 *   <list name='behaviorTrees'>
	 *     <string/> <!-- add behavior with empty identifier -->
	 *     <string>default</string> <!-- add behavior with 'default' identifier -->
	 *   </list>
	 * 
	 *   <!-- optional: add state machines. default adds all state machines. -->
	 *   <list name='stateMachines'>
	 *     <string/> <!-- add behavior with empty identifier -->
	 *     <string>default</string> <!-- add behavior with 'default' identifier -->
	 *   </list>
	 * </behavior>
	 * 
	 * <!-- for adding multiple behaviors use unique identifiers -->
	 * <behavior type='ECBehaviorOccupier' id='second'/>
	 * \endcode
	 * 
	 * Element class properties added by the behavior can also be set directly inside the tag
	 * be removing the property name prefix and starting with a "." (for example ".propertyName").
	 */
	class Factory extends DefaultBehaviorFactory
		func new() super("ECBehaviorOccupier")
		end
		
		func ECBehavior addBehavior(BehaviorElementClass eclass, String id, Dictionary parameters)
			var ECBehaviorOccupier behavior = ECBehaviorOccupier.new(eclass, id)
			
			getHelper().allBTSM(behavior.getBTSMs(), eclass, parameters)
			
			getHelper().setPropertiesFromParameters(eclass, parameters, "occupier", id)
			return behavior
		end
	end
	
	
	
	/** \brief Behavior instance. */
	class Instance extends DefaultECBehaviorInstance
		/**
		 * \brief Behavior tree action/condition "occupier{(id)}.update".
		 * \version 1.26
		 */
		private class BTAUpdate extends BTSMActionCondition
			var Instance pInstance
			
			func new(Instance instance)
				pInstance = instance
			end
			
			func BTResult runActionShared(Object context, Dictionary parameters)
				var Object value
				
				value = parameters.getAt("interactElement.assign", null)
				if value != null
					var ECBehaviorInteractionSpot.Instance ispot = pInstance.getInteractionSpot()
					if ispot == null
						return BTResult.failure
					end
					
					var ECBehaviorInteractionElement.Instance interactionElement =\
						ECBehaviorInteractionElement.getInstanceIn(pInstance.getElement(), value cast String)
					if interactionElement == null
						return BTResult.failure
					end
					
					interactionElement.setInteractionBehavior(ispot)
				end
				
				value = parameters.getAt("interact", null)
				if value != null
					if not ECBehaviorInteraction.checkInteraction(pInstance.getInteractionSpot(),\
					value cast String, parameters.getAt("interact.parameters", null) cast String,\
					pInstance.getElement())
						return BTResult.failure
					end
				end
				
				value = parameters.getAt("claim", null)
				if value != null
					var ECBehaviorInteractionSpot.Instance ispot = getInteractionElementISpot(\
						value, parameters.getAt("claim.id", ""))
					if ispot == null or not ispot.canClaim(pInstance)
						return BTResult.failure
					end
					
					pInstance.release()
					ispot.claim(pInstance)
				end
				
				value = parameters.getAt("move", null)
				if value != null
					var ECBehaviorInteractionSpot.Instance ispot = pInstance.getInteractionSpot()
					if ispot == null
						return BTResult.failure
					end
					
					var DVector position = ispot.getWorldMatrix().getPosition()
					var ECBehaviorActorMover.Instance actorMover =\
						ECBehaviorActorMover.getInstanceIn(pInstance.getElement())
					
					value = parameters.getAt("move.distance", null)
					if value != null
						actorMover.moveTo(position, (value cast String).toFloat())
						
					else
						actorMover.moveTo(position)
					end
				end
				
				value = parameters.getAt("align", null)
				if value != null
					var ECBehaviorInteractionSpot.Instance ispot = pInstance.getInteractionSpot()
					if ispot == null
						return BTResult.failure
					end
					
					var ECBehaviorAlignActor.Instance alignActor =\
						ECBehaviorAlignActor.getInstanceIn(pInstance.getElement())
					
					alignActor.setTarget(ispot.getElement(), DVector.new(ispot.getPosition()),\
						ispot.getOrientation().getEulerAngles().getY())
					
					if ispot.getLookAt() != null
						alignActor.setLookAt(ispot.getLookAtWorld())
					end
					
					alignActor.startAligning()
				end
				
				if parameters.has("release")
					pInstance.release()
				end
				
				return BTResult.success
			end
			
			func ECBehaviorInteractionSpot.Instance getInteractionElementISpot(Object id, Object ispotId)
				var ECBehaviorInteractionElement.Instance ie =\
					ECBehaviorInteractionElement.getInstanceIn(pInstance.getElement(), id cast String)
				if ie == null
					return null
				end
				
				var ECBehaviorInstance behavior = ie.getInteractionElementBehavior()
				if behavior != null and behavior castable ECBehaviorInteractionSpot.Instance
					return behavior cast ECBehaviorInteractionSpot.Instance
				end
				
				var BehaviorElement element = ie.getInteractionElement()
				if element == null
					return null
				end
				
				return ECBehaviorInteractionSpot.getInstanceIn(element, ispotId cast String)
			end
		end
		
		/**
		 * \brief Behavior tree action/condition "occupier{(id)}.check".
		 * \version 1.26
		 */
		private class BTACheck extends BTSMActionCondition
			var Instance pInstance
			var String pPrefix
			
			func new(Instance instance, String prefix)
				pInstance = instance
				pPrefix = prefix
			end
			
			func BTResult runActionShared(Object context, Dictionary parameters)
				return check("", parameters) if BTResult.success\
					else (parameters.has("wait") if BTResult.running else BTResult.failure)
			end
			
			func bool evaluateConditionShared(Object context, Dictionary parameters)
				return check(pPrefix, parameters)
			end
			
			func bool check(String prefix, Dictionary parameters)
				var bool result = true
				var Object value
				
				value = parameters.getAt(prefix + "occupying", null)
				if value != null
					result &= pInstance.isOccupying() == value.equals("true")
				end
				
				result &= ECBehaviorInteraction.checkInteractionBTSM(pInstance.getInteractionSpot(),\
					parameters, prefix + "interact.", pInstance.getElement())
				
				return result
			end
		end
		
		
		var ECBehaviorOccupier pECBehavior
		var ECBehaviorInteractionSpot.Instance pInteractionSpot
		var ElementResolver pElementResolver
		var Array pListeners
		var ECComposeBTSM.Instance pBTSMs
		
		
		
		/** \brief Create element. */
		func new(ECBehaviorOccupier ecbehavior, BehaviorElement element) super(element)
			pECBehavior = ecbehavior
			pListeners = Array.new()
		end
		
		/** \brief Dispose of claim spot. */
		func void dispose()
			release()
			
			pListeners = null
			pElementResolver = null
			pBTSMs = null
			
			super.dispose()
		end
		
		
		
		/** \brief Initialize behavior from stub. */
		func void init(StubElement stub)
			pECBehavior.createListeners(this)
			
			if pECBehavior.getBTSMs().hasAny()
				var String prefix = pECBehavior.getPrefix()
				pBTSMs = ECComposeBTSM.Instance.new(getElement(), pECBehavior.getBTSMs())
				pBTSMs.addAllAction(prefix, "update", BTAUpdate.new(this))
				pBTSMs.addAllActionCondition(prefix, "check", BTACheck.new(this, prefix))
				pBTSMs.dropBTContexts()
			end
		end
		
		
		
		/** \brief Behavior. */
		func ECBehaviorOccupier getECBehavior()
			return pECBehavior
		end
		
		/**
		 * \brief Element resolver used during loading or \em null if not set.
		 * \version 1.9
		 */
		func ElementResolver getElementResolver()
			return pElementResolver
		end
		
		
		
		/** \brief Occupied interaction spot or \em null. */
		func ECBehaviorInteractionSpot.Instance getInteractionSpot()
			return pInteractionSpot
		end
		
		/**
		 * \brief Set occupied interaction spot.
		 * \warning For use by ECBehaviorInteractionSpot only.
		 */
		func void setInteractionSpot(ECBehaviorInteractionSpot.Instance interactionSpot)
			if interactionSpot == pInteractionSpot
				return
			end
			
			if pInteractionSpot != null
				pListeners.forEach(block Listener each
					each.spotReleased(this, pInteractionSpot)
				end)
				if pBTSMs != null
					pBTSMs.runEvent(pECBehavior.getPrefix(), "released")
				end
			end
			
			pInteractionSpot = interactionSpot
			
			if interactionSpot != null
				pListeners.forEach(block Listener each
					each.spotClaimed(this, interactionSpot)
				end)
				if pBTSMs != null
					pBTSMs.runEvent(pECBehavior.getPrefix(), "claimed")
				end
			end
		end
		
		/** \brief Element is occupying an interaction spot. */
		func bool isOccupying()
			return pInteractionSpot != null
		end
		
		/** \brief Element is not occupying an interaction spot. */
		func bool isNotOccupying()
			return pInteractionSpot == null
		end
		
		/**
		 * \brief Claim interaction spot.
		 * \throws EInvalidParam \em spot is \em null.
		 * \throws EInvalidParam Already occupying an interaction spot.
		 * \throws EInvalidParam \em spot is not empty.
		 */
		func void claim(ECBehaviorInteractionSpot.Instance spot)
			spot.claim(this)
		end
		
		/** \brief Release interaction spot if occupying one. */
		func void release()
			if pInteractionSpot != null
				pInteractionSpot.release()
			end
		end
		
		/**
		 * \brief Safely claims a different interaction spot.
		 * 
		 * Convenience method for calling release() then claim() but checking problems before
		 * calling release(). This ensures the occupier keeps occupying the old spot in case
		 * something is wrong.
		 * 
		 * \note If the current interaction spot is the same as the new spot nothing is done.
		 */
		func void claimOther(ECBehaviorInteractionSpot.Instance spot)
			if spot == pInteractionSpot
				return
			end
			
			if spot.isNotEmpty()
				throw EInvalidParam.new()
			end
			
			release()
			claim(spot)
		end
		
		
		/** \brief Add listener. */
		func void addListener(Listener listener)
			if listener == null
				throw EInvalidParam.new()
			end
			pListeners.add(listener)
		end
		
		/** \brief Remove listener. */
		func void removeListener(Listener listener)
			pListeners.remove(listener)
		end
		
		
		
		/** \brief Frame update started. */
		func void enterFrame()
			if pElementResolver != null
				pElementResolver.resolve(getElement().getGameWorld())
				pElementResolver = null
			end
		end
		
		
		
		/** \brief Read element from file. */
		func void readFromFile(PersistencyEnvironment env, FileReader reader)
			select reader.readByte() // version
			case 0
				var PersistencyFlags flags = PersistencyFlags.new(1, reader)
				
				if flags.getAt(0)
					pElementResolver = ElementResolver.new()
					pElementResolver.addBehaviorAllowFail(reader, block ECBehaviorInteractionSpot.Instance spot
						pInteractionSpot = spot
					end)
					setRequiresEnterFrame(true)
				end
				
			else
				throw EInvalidParam.new("unsupported version")
			end
		end
		
		/** \brief Write element to file. */
		func void writeToFile(PersistencyEnvironment env, FileWriter writer)
			writer.writeByte(0) // version
			
			var PersistencyFlags flags = PersistencyFlags.new(1)
			flags.setAt(0, pInteractionSpot != null)
			flags.writeToFile(writer)
			
			if pInteractionSpot != null
				ElementResolver.writeToFileBehavior(writer, pInteractionSpot)
			end
		end
	end
	
	
	
	var Array pListenerFactories
	var ECComposeBTSM pBTSMs
	var String pPrefix
	
	
	
	/** \brief Create behavior element class. */
	func new(BehaviorElementClass eclass) this(eclass, "")
	end
	
	/** \brief Create behavior element class. */
	func new(BehaviorElementClass eclass, String id) \
	this(eclass, id, id.empty() if "occupier." else "occupier(" + id + ").")
	end
	
	func new(BehaviorElementClass eclass, String id, String prefix) super(eclass, id)
		pPrefix = prefix
		pListenerFactories = Array.new()
		pBTSMs = ECComposeBTSM.new(eclass, prefix)
		
		eclass.addBehavior(this)
	end
	
	/** \brief Dispose of behavior. */
	func void dispose()
		pListenerFactories = null
		pBTSMs = null
		super.dispose()
	end
	
	
	
	/**
	 * \brief Prefix.
	 * \version 1.26
	 */
	func String getPrefix()
		return pPrefix
	end
	
	/**
	 * \brief Compose behavior trees and state machines.
	 * \version 1.26
	 */
	func ECComposeBTSM getBTSMs()
		return pBTSMs
	end
	
	/** \brief Add listener factory. */
	func void addListenerFactory(ListenerFactory factory)
		if factory == null
			throw ENullPointer.new()
		end
		pListenerFactories.add(factory)
	end
	
	/**
	 * \brief Add listener factory using block.
	 * 
	 * Block receives as parameter Instance and returns Listener.
	 */
	func void addListenerFactory(Block blockFactory)
		pListenerFactories.add(BlockListenerFactory.new(blockFactory))
	end
	
	/** \brief Visit listener factories with block with argument ListenerFactory. */
	func void forEachListenerFactory(Block ablock)
		pListenerFactories.forEach(ablock)
	end
	
	/** \brief Create listeners from factories adding them to behavior instance. */
	func void createListeners(Instance instance)
		pListenerFactories.forEach(block ListenerFactory each
			instance.addListener(each.createListener(instance))
		end)
	end
	
	
	
	/** \brief Get instance in element from owner element class. */
	func Instance instance(BehaviorElement element)
		return element.getInstanceAt(getInstanceIndex()) cast Instance
	end
	
	
	
	/**
	 * \brief Get behavior in element class or \em null if absent.
	 * 
	 * Use this method to check if a particular BehaviorElementClass contains a behavior
	 * of type ECBehaviorComponent.
	 */
	static func ECBehaviorOccupier getBehaviorIn(BehaviorElementClass eclass)
		return eclass.findBehavior(block ECBehaviorOccupier each
			return true
		end) cast ECBehaviorOccupier
	end
	
	/**
	 * \brief Get behavior with id in element class or \em null if absent.
	 * 
	 * Use this method to check if a particular BehaviorElementClass contains a behavior
	 * of type ECBehaviorOccupier with specific identifier.
	 */
	static func ECBehaviorOccupier getBehaviorIn(BehaviorElementClass eclass, String id)
		return eclass.findBehavior(block ECBehaviorOccupier each
			return each.getID().equals(id)
		end) cast ECBehaviorOccupier
	end
	
	/**
	 * \brief Get list of all behaviors in element.
	 * 
	 * Returns list contains ECBehaviorOccupier behaviors in the order they have
	 * been created in the element.
	 */
	static func Array getAllBehaviorsIn(BehaviorElementClass eclass)
		return eclass.collectBehaviors(block ECBehaviorOccupier each
			return true
		end)
	end
	
	
	
	/**
	 * \brief Get instance in element or \em null if absent.
	 * 
	 * Use this method to check if a particular BehaviorElement contains a behavior instance
	 * of type ECBehaviorOccupier.Instance . If more than one instance is present returns
	 * the first instance.
	 */
	static func Instance getInstanceIn(BehaviorElement element)
		return element.findInstance(block Instance each
			return true
		end) cast Instance
	end
	
	/**
	 * \brief Get instance with id in element or \em null if absent.
	 * 
	 * Use this method to check if a particular BehaviorElement contains a behavior instance
	 * of type ECBehaviorOccupier.Instance with specific identifier.
	 */
	static func Instance getInstanceIn(BehaviorElement element, String id)
		return element.findInstance(block Instance each
			return each.getECBehavior().getID().equals(id)
		end) cast Instance
	end
	
	/**
	 * \brief Get list of all instances in element.
	 * 
	 * Returns list contains ECBehaviorOccupier.Instance instances in the order they have
	 * been created in the element.
	 */
	static func Array getAllInstancesIn(BehaviorElement element)
		return element.collectInstances(block Instance each
			return true
		end)
	end
	
	
	
	/** \brief Create Behavior instance. */
	func ECBehaviorInstance createInstance(BehaviorElement element)
		return Instance.new(this, element)
	end
end
