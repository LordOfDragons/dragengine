/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */


namespace Dragengine.Scenery

pin Dragengine.Gui
pin Dragengine.LoadSave
pin Dragengine.Preloading
pin Dragengine.Utils
pin Dragengine.BehaviorTreeSystem
pin Dragengine.StateMachineSystem


/**
 * \brief Behavior element behavior adding support to define grab spot for actors.
 * \version 1.9
 * 
 * Defines position and orientation where the actor can grab the owner element. Grab spots
 * are typically used for physics interaction like VR hand use but can be used also with
 * mouse interaction. The actual grabbing interaction, exact grab location and orientation
 * as well as attaching logic is handled by other behaviors using listening. This behavior
 * also tracks if an actor is grabbing the grab spot. Hence at most one actor can grab an
 * grab spot at each time.
 * 
 * Elements able to grab a grab spot have to use the ECBehaviorGrabber behavior. Both the
 * grab spot and the grabber have to persist the other behavior. During restoring no
 * notifications are triggered this way.
 * 
 * Element class properties have the prefix "grabSpot{(id)}.".
 * 
 * This behavior uses no other behaviors.
 * 
 * This behavior does require the element class to be persistable (setPersistable).
 * 
 * \see https://developer.dragondreams.ch/wiki/doku.php/dragengine:modules:dragonscript:behavior_grabspot
 */
class ECBehaviorGrabSpot extends DefaultECBehavior
	/** \brief Listener for behavior instance events. */
	interface Listener
		/** \brief Grabber has grabbed spot. */
		func void spotGrabbed(Instance instance, ECBehaviorGrabber.Instance grabber)
		
		/** \brief Grabber has release spot. */
		func void spotReleased(Instance instance, ECBehaviorGrabber.Instance grabber)
		
		/** \brief Grab spot enabled changed. */
		func void enabledChanged(Instance instance)
	end
	
	/** \brief Default implementation of behavior instance listener. */
	class DefaultListener implements Listener
		/** \brief Create default listener. */
		func new()
		end
		
		/** \brief Grabber has grabbed spot. */
		func void spotGrabbed(Instance instance, ECBehaviorGrabber.Instance grabber)
		end
		
		/** \brief Grabber has release spot. */
		func void spotReleased(Instance instance, ECBehaviorGrabber.Instance grabber)
		end
		
		/** \brief Grab spot enabled changed. */
		func void enabledChanged(Instance instance)
		end
	end
	
	/** \brief Factory creating listeners. */
	interface ListenerFactory
		/** \brief Create listener. */
		func Listener createListener(Instance instance)
	end
	
	/** \brief Factory creating listeners using block. */
	class BlockListenerFactory implements ListenerFactory
		var Block pBlock
		
		/** \brief Create factory using block receiving Instance as parameter returning Listener. */
		func new(Block blockFactory)
			if blockFactory == null
				throw ENullPointer.new("blockFactory")
			end
			pBlock = blockFactory
		end
		
		/** \brief Create listener. */
		func Listener createListener(Instance instance)
			return pBlock.run(instance) cast Listener
		end
	end
	
	/**
	 * \brief Behavior factory.
	 * \version 1.25
	 * 
	 * Automatically assigns these behaviors if present before adding:
	 * - Optional: \ref ECBehaviorCollider
	 * 
	 * Example XML element class:
	 * \code{.xml}
	 * <behavior type='ECBehaviorGrabSpot'>
	 *   <!-- optional: set collision filter. default value '4:1' which means
	 *                  category BaseGameApp.CollisionFilterBit.trigger
	 *                  filter BaseGameApp.CollisionFilterBit.dynamic.
	 *                  format is '', 'category' or 'category:filter' where category and filter
	 *                  are a list of bits to set. -->
	 *   <string name='collisionFilter'>4:1 2</string>
	 *   
	 *   <!-- optional: add behavior trees. default adds all behavior trees. -->
	 *   <list name='behaviorTrees'>
	 *     <string/> <!-- add behavior with empty identifier -->
	 *     <string>default</string> <!-- add behavior with 'default' identifier -->
	 *   </list>
	 * 
	 *   <!-- optional: add state machines. default adds all state machines. -->
	 *   <list name='stateMachines'>
	 *     <string/> <!-- add behavior with empty identifier -->
	 *     <string>default</string> <!-- add behavior with 'default' identifier -->
	 *   </list>
	 * </behavior>
	 * 
	 * <!-- for adding multiple behaviors use unique identifiers -->
	 * <behavior type='ECBehaviorGrabSpot' id='second'>
	 *   ...
	 * </behavior>
	 * \endcode
	 * 
	 * Element class properties added by the behavior can also be set directly inside the tag
	 * be removing the property name prefix and starting with a "." (for example ".propertyName").
	 */
	class Factory implements BehaviorFactory
		func new()
		end
		
		func String factoryId()
			return "ECBehaviorGrabSpot"
		end
		
		func ECBehavior addBehavior(BehaviorElementClass eclass, String id, Dictionary parameters)
			var ECBehaviorGrabSpot behavior = ECBehaviorGrabSpot.new(eclass,\
				ECBehaviorCollider.getBehaviorIn(eclass), id)
			
			if parameters.has("collisionFilter")
				behavior.getTouchCollider().setCollisionFilter(ElementClass.getSharedCodecPropertyString().\
					decodeCollisionFilter(parameters.getAt("collisionFilter") cast String))
			end
			
			eclass.sharedFactoryHelper.allBTSM(behavior.getBTSMs(), eclass, parameters)
			
			eclass.sharedFactoryHelper.setPropertiesFromParameters(eclass, parameters, "grabSpot", id)
			return behavior
		end
	end
	
	
	
	/** \brief Behavior instance. */
	class Instance extends DefaultECBehaviorInstance
		/**
		 * \brief Behavior tree action "grabSpot{(id)}.set".
		 * \version 1.26
		 */
		private class BTASet extends BTSMActionCondition
			var Instance pInstance
			
			func new(Instance instance)
				pInstance = instance
			end
			
			func BTResult runActionShared(Object context, Dictionary parameters)
				var Object value
				
				value = parameters.getAt("enabled", null)
				if value != null
					pInstance.setEnabled(value.equals("true"))
				end
				
				return BTResult.success
			end
		end
		
		/**
		 * \brief Behavior tree action "grabSpot{(id)}.release".
		 * \version 1.26
		 */
		private class BTARelease extends BTSMActionCondition
			var Instance pInstance
			
			func new(Instance instance)
				pInstance = instance
			end
			
			func BTResult runActionShared(Object context, Dictionary parameters)
				pInstance.release()
				return BTResult.success
			end
		end
		
		/**
		 * \brief Behavior tree action/condition "grabSpot{(id)}.check".
		 * \version 1.26
		 */
		private class BTACheck extends BTSMActionCondition
			var Instance pInstance
			var String pPrefix
			
			func new(Instance instance, String prefix)
				pInstance = instance
				pPrefix = prefix
			end
			
			func BTResult runActionShared(Object context, Dictionary parameters)
				return check("", parameters) if BTResult.success\
					else (parameters.has("wait") if BTResult.running else BTResult.failure)
			end
			
			func bool evaluateConditionShared(Object context, Dictionary parameters)
				return check(pPrefix, parameters)
			end
			
			func bool check(String prefix, Dictionary parameters)
				var bool result = true
				var Object value
				
				value = parameters.getAt(prefix + "enabled", null)
				if value != null
					result &= pInstance.getEnabled() == value.equals("true")
				end
				
				value = parameters.getAt(prefix + "grabbed", null)
				if value != null
					result &= pInstance.isGrabbed() == value.equals("true")
				end
				
				return result
			end
		end
		
		
		var ECBehaviorGrabSpot pECBehavior
		var ECBehaviorCollider.Instance pCollider
		var ECBehaviorGrabber.Instance pGrabber
		var ElementResolver pElementResolver
		var Collider pTouchCollider
		var bool pEnabled
		var Array pListeners
		var ECComposeBTSM.Instance pBTSMs
		
		
		
		/** \brief Create element. */
		func new(ECBehaviorGrabSpot ecbehavior, BehaviorElement element) super(element)
			pECBehavior = ecbehavior
			pEnabled = true
			pListeners = Array.new()
		end
		
		/** \brief Dispose of behavior instance. */
		func void dispose()
			release()
			
			pListeners = null
			if pTouchCollider != null
				pTouchCollider.setColliderListener(null)
				pTouchCollider.setOwner(null)
				pTouchCollider.removeAllCollisionTests()
				pTouchCollider.removeAllIgnoreColliders()
				//pTouchCollider = null // not doing this prevents depending behaviors fail while disposing
			end
			pElementResolver = null
			pCollider = null
			pBTSMs = null
			
			super.dispose()
		end
		
		
		
		/** \brief Initialize element from stub. */
		func void init(StubElement stub)
			var BehaviorElement element = getElement()
			
			if pECBehavior.getCollider() != null
				pCollider = pECBehavior.getCollider().instance(element)
			end
			
			// create collider
			pTouchCollider = createTouchCollider(stub)
			//pTouchCollider.setColliderListener(this)
			pTouchCollider.setOwner(element)
			pTouchCollider.setGeometry(element.getPosition(), element.getOrientation(), element.getScaling())
			
			// attach collider if not rig attached already
			if pCollider != null and pCollider.getCollider() != null
				attachTouchCollider(stub, pCollider)
			end
			
			pECBehavior.createListeners(this)
			
			updateTouchColliderEnabled()
			
			if pECBehavior.getBTSMs().hasAny()
				var String prefix = pECBehavior.getPrefix()
				pBTSMs = ECComposeBTSM.Instance.new(element, pECBehavior.getBTSMs())
				pBTSMs.addAllAction(prefix + "set", BTASet.new(this))
				pBTSMs.addAllAction(prefix + "release", BTARelease.new(this))
				pBTSMs.addAllActionCondition(prefix + "check", BTACheck.new(this, prefix))
				pBTSMs.dropBTContexts()
			end
		end
		
		/** \brief Create collider. */
		protected func Collider createTouchCollider(StubElement stub)
			var BehaviorElement element = getElement()
			var Collider collider
			
			if collider == null
				collider = pECBehavior.getTouchCollider().createCollider(element, stub)
			end
			
			return collider
		end
		
		/**
		 * \brief Attach touch collider to element collider.
		 * 
		 * Default implementation calls ECComposeAttachResource.attach().
		 */
		protected func void attachTouchCollider(StubElement stub, ECBehaviorCollider.Instance collider)
			pECBehavior.getAttachTouchCollider().attach(collider.getCollider(), pTouchCollider, stub)
		end
		
		
		
		/** \brief Behavior. */
		func ECBehaviorGrabSpot getECBehavior()
			return pECBehavior
		end
		
		/** \brief Collider behavior instance or null. */
		func ECBehaviorCollider.Instance getCollider()
			return pCollider
		end
		
		
		
		/** \brief Enable grab spot. */
		func bool getEnabled()
			return pEnabled
		end
		
		/** \brief Enable/disable grab spot. */
		func void setEnabled(bool enabled)
			if enabled == pEnabled
				return
			end
			
			pEnabled = enabled
			updateTouchColliderEnabled()
			
			pListeners.forEach(block Listener each
				each.enabledChanged(this)
			end)
			if pBTSMs != null
				pBTSMs.runEvent(pECBehavior.getPrefix() + (enabled if "enabled" else "disabled"))
			end
		end
		
		
		
		/** \brief Grabber or \em null. */
		func ECBehaviorGrabber.Instance getGrabber()
			return pGrabber
		end
		
		/** \brief Spot is not grabbed. */
		func bool isNotGrabbed()
			return pGrabber == null
		end
		
		/** \brief Spot is grabbed. */
		func bool isGrabbed()
			return pGrabber != null
		end
		
		/** \brief Element is grabbing spot. */
		func bool isGrabbing(BehaviorElement element)
			return pGrabber != null and pGrabber.getElement() == element
		end
		
		/** \brief Element is not grabbing spot. */
		func bool isNotGrabbing(BehaviorElement element)
			return pGrabber == null or pGrabber.getElement() != element
		end
		
		/**
		 * \brief Grabber can grab spot.
		 * \retval false Spot is not grabbed.
		 * \retval false Grabber is already grabbing another spot.
		 * \retval true Grabbing is possible
		 */
		func bool canGrab(ECBehaviorGrabber.Instance grabber)
			return pGrabber == null and not grabber.isGrabbing()
		end
		
		/**
		 * \brief Grab spot.
		 * \throws EInvalidParam \em grabber is \em null.
		 * \throws EInvalidParam Spot is grabbed.
		 * \throws EInvalidParam \em grabber is already grabbing another spot.
		 */
		func void grab(ECBehaviorGrabber.Instance grabber)
			if grabber == null
				throw ENullPointer.new("grabber")
			end
			if pGrabber != null
				throw EInvalidParam.new("grab spot is grabbed by another grabber")
			end
			if grabber.isGrabbing()
				throw EInvalidParam.new("grabber is grabbing  another grab slot")
			end
			
			grabber.setGrabSpot(this)
			pGrabber = grabber
			
			pListeners.forEach(block Listener each
				each.spotGrabbed(this, grabber)
			end)
			if pBTSMs != null
				pBTSMs.runEvent(pECBehavior.getPrefix() + "grabbed")
			end
		end
		
		/** \brief Release spot if grabbed. */
		func void release()
			if pGrabber == null
				return
			end
			
			var ECBehaviorGrabber.Instance grabber = pGrabber
			grabber.setGrabSpot(null)
			pGrabber = null
			
			pListeners.forEach(block Listener each
				each.spotReleased(this, grabber)
			end)
			if pBTSMs != null
				pBTSMs.runEvent(pECBehavior.getPrefix() + "released")
			end
		end
		
		
		
		/** \brief Touch collider. */
		func Collider getTouchCollider()
			return pTouchCollider
		end
		
		/** \brief Element resolver used during loading or \em null if not set. */
		func ElementResolver getElementResolver()
			return pElementResolver
		end
		
		
		
		/** \brief Add listener. */
		func void addListener(Listener listener)
			if listener == null
				throw ENullPointer.new("listener")
			end
			pListeners.add(listener)
		end
		
		/** \brief Remove listener. */
		func void removeListener(Listener listener)
			pListeners.remove(listener)
		end
		
		
		
		/** \brief Element has been added to game world. Start tracking device. */
		func void addToGameWorld()
			getElement().getGameWorld().getWorld().addCollider(pTouchCollider)
		end
		
		/** \brief Element has been removed from game world. Stop tracking device. */
		func void removeFromGameWorld()
			getElement().getGameWorld().getWorld().removeCollider(pTouchCollider)
		end
		
		/** \brief Frame update started. */
		func void enterFrame()
			if pElementResolver != null
				pElementResolver.resolve(getElement().getGameWorld())
				pElementResolver = null
			end
		end
		
		/** \brief Element state changed like visible. */
		func void stateChanged()
			updateTouchColliderEnabled()
		end
		
		/** \brief Update collider enabled state. */
		protected func void updateTouchColliderEnabled()
			if pTouchCollider != null
				var BehaviorElement element = getElement()
				pTouchCollider.setEnabled(pEnabled and element.getTouchable())
			end
		end
		
		
		
		/** \brief Read element from file. */
		func void readFromFile(PersistencyEnvironment env, FileReader reader)
			select reader.readByte() // version
			case 0
				var PersistencyFlags flags = PersistencyFlags.new(2, reader)
				
				pEnabled = flags.getAt(0)
				updateTouchColliderEnabled()
				
				if flags.getAt(1)
					pElementResolver = ElementResolver.new()
					pElementResolver.addBehavior(reader, block ECBehaviorGrabber.Instance grabber
						pGrabber = grabber
					end)
					setRequiresEnterFrame(true)
				end
				
			else
				throw EInvalidParam.new("unsupported version")
			end
		end
		
		/** \brief Write element to file. */
		func void writeToFile(PersistencyEnvironment env, FileWriter writer)
			writer.writeByte(0) // version
			
			var PersistencyFlags flags = PersistencyFlags.new(2)
			flags.setAt(0, pEnabled)
			flags.setAt(1, pGrabber != null)
			flags.writeToFile(writer)
			
			if pGrabber != null
				ElementResolver.writeToFileBehavior(writer, pGrabber)
			end
		end
	end
	
	
	
	var ECBehaviorCollider pCollider
	var ECComposeCollider pTouchCollider
	var ECComposeAttachResource pAttachTouchCollider
	var Array pListenerFactories
	var ECComposeBTSM pBTSMs
	var String pPrefix
	
	
	
	/**
	 * \brief Create behavior element class.
	 * 
	 * These behaviors can be null:
	 * - collider
	 */
	func new(BehaviorElementClass eclass, ECBehaviorCollider collider) this(eclass, collider, "")
	end
	
	func new(BehaviorElementClass eclass, ECBehaviorCollider collider, String id) \
	this(eclass, collider, id, id.empty() if "grabSpot." else "grabSpot(" + id + ").")
	end
	
	func new(BehaviorElementClass eclass, ECBehaviorCollider collider, String id, String prefix)\
	super(eclass, id)
		pPrefix = prefix
		pCollider = collider
		
		pListenerFactories = Array.new()
		pBTSMs = ECComposeBTSM.new()
		
		pTouchCollider = ECComposeCollider.new(eclass, prefix + "touchCollider.")
		pTouchCollider.getPhysicsType().setEnumeration(CollisionResponse.kinematic)
		pTouchCollider.getLocalGravity().setVector(Vector.new())
		pTouchCollider.setCollisionFilter(CollisionFilter.new( \
			LayerMask.newWith(BaseGameApp.CollisionFilterBit.dynamic), \
			LayerMask.newWith(BaseGameApp.CollisionFilterBit.trigger)))
		
		pAttachTouchCollider = ECComposeAttachResource.new(eclass, prefix)
		
		eclass.addBehavior(this)
	end
	
	/** \brief Dispose of behavior. */
	func void dispose()
		pListenerFactories = null
		pCollider = null
		pBTSMs = null
		super.dispose()
	end
	
	
	
	/**
	 * \brief Prefix.
	 * \version 1.26
	 */
	func String getPrefix()
		return pPrefix
	end
	
	/** \brief Collider behavior or null. */
	func ECBehaviorCollider getCollider()
		return pCollider
	end
	
	/** \brief Composeable touch collider. */
	func ECComposeCollider getTouchCollider()
		return pTouchCollider
	end
	
	/** \brief Attach touch collider. */
	func ECComposeAttachResource getAttachTouchCollider()
		return pAttachTouchCollider
	end
	
	/**
	 * \brief Compose behavior trees and state machines.
	 * \version 1.26
	 */
	func ECComposeBTSM getBTSMs()
		return pBTSMs
	end
	
	
	
	/** \brief Add listener factory. */
	func void addListenerFactory(ListenerFactory factory)
		if factory == null
			throw ENullPointer.new("factory")
		end
		pListenerFactories.add(factory)
	end
	
	/**
	 * \brief Add listener factory using block.
	 * 
	 * Block receives as parameter Instance and returns Listener.
	 */
	func void addListenerFactory(Block blockFactory)
		pListenerFactories.add(BlockListenerFactory.new(blockFactory))
	end
	
	/** \brief Visit listener factories with block with argument ListenerFactory. */
	func void forEachListenerFactory(Block ablock)
		pListenerFactories.forEach(ablock)
	end
	
	/** \brief Create listeners from factories adding them to behavior instance. */
	func void createListeners(Instance instance)
		pListenerFactories.forEach(block ListenerFactory each
			instance.addListener(each.createListener(instance))
		end)
	end
	
	
	
	/** \brief Get instance in element from owner element class. */
	func Instance instance(BehaviorElement element)
		return element.getInstanceAt(getInstanceIndex()) cast Instance
	end
	
	
	
	/**
	 * \brief Get behavior in element class or \em null if absent.
	 * 
	 * Use this method to check if a particular BehaviorElementClass contains a behavior
	 * of type ECBehaviorGrabSpot.
	 */
	static func ECBehaviorGrabSpot getBehaviorIn(BehaviorElementClass eclass)
		return eclass.findBehavior(block ECBehaviorGrabSpot each
			return true
		end) cast ECBehaviorGrabSpot
	end
	
	/**
	 * \brief Get behavior with id in element class or \em null if absent.
	 * 
	 * Use this method to check if a particular BehaviorElementClass contains a behavior
	 * of type ECBehaviorGrabSpot with specific identifier.
	 */
	static func ECBehaviorGrabSpot getBehaviorIn(BehaviorElementClass eclass, String id)
		return eclass.findBehavior(block ECBehaviorGrabSpot each
			return each.getID().equals(id)
		end) cast ECBehaviorGrabSpot
	end
	
	/**
	 * \brief Get list of all behaviors in element.
	 * 
	 * Returns list contains ECBehaviorGrabSpot behaviors in the order they have
	 * been created in the element.
	 */
	static func Array getAllBehaviorsIn(BehaviorElementClass eclass)
		return eclass.collectBehaviors(block ECBehaviorGrabSpot each
			return true
		end)
	end
	
	
	
	/**
	 * \brief Get instance in element or \em null if absent.
	 * 
	 * Use this method to check if a particular BehaviorElement contains a behavior instance
	 * of type ECBehaviorGrabSpot.Instance . If more than one instance is present returns
	 * the first instance.
	 */
	static func Instance getInstanceIn(BehaviorElement element)
		return element.findInstance(block Instance each
			return true
		end) cast Instance
	end
	
	/**
	 * \brief Get instance with id in element or \em null if absent.
	 * 
	 * Use this method to check if a particular BehaviorElement contains a behavior instance
	 * of type ECBehaviorGrabSpot.Instance with specific identifier.
	 */
	static func Instance getInstanceIn(BehaviorElement element, String id)
		return element.findInstance(block Instance each
			return each.getECBehavior().getID().equals(id)
		end) cast Instance
	end
	
	/**
	 * \brief Get list of all instances in element.
	 * 
	 * Returns list contains ECBehaviorGrabSpot.Instance instances in the order they have
	 * been created in the element.
	 */
	static func Array getAllInstancesIn(BehaviorElement element)
		return element.collectInstances(block Instance each
			return true
		end)
	end
	
	
	
	/** \brief Create Behavior instance. */
	func ECBehaviorInstance createInstance(BehaviorElement element)
		return Instance.new(this, element)
	end
end
