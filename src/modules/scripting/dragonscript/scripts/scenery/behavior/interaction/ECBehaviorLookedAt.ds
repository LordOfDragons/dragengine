/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */


namespace Dragengine.Scenery

pin Dragengine.Gui
pin Dragengine.Preloading
pin Dragengine.LoadSave
pin Dragengine.Utils
pin Dragengine.Scenery
pin Dragengine.BehaviorTreeSystem
pin Dragengine.StateMachineSystem


/**
 * \brief Behavior element behavior adding support to track if actors look at element.
 * 
 * This behavior tracks if actors are looking at the element. If actors start looking at the
 * element they are added to the list and listeners are notified. If the actors stop looking
 * at the element they are removed from the list and listeners are notified. The actors can
 * be an NPC or the player. The behavior itself is passive. It requires to be triggered by
 * the actor elements. The ECBehaviorLookAt behavior provides this functionality.
 * 
 * This behavior supports persistable element classes (setPersistable).
 * 
 * \see https://developer.dragondreams.ch/wiki/doku.php/dragengine:modules:dragonscript:behavior_lookedat
 */
class ECBehaviorLookedAt extends DefaultECBehavior
	/** \brief Listener for behavior instance events. */
	interface Listener
		/** \brief Actor starts looking at element. */
		func void actorStartsLookingAt(Instance instance, BehaviorElement actor)
		
		/** \brief Actor stops looking at element. */
		func void actorStopsLookingAt(Instance instance, BehaviorElement actor)
	end
	
	/** \brief Default implementation of behavior instance listener. */
	class DefaultListener implements Listener
		/** \brief Create default listener. */
		func new()
		end
		
		/** \brief Actor starts looking at element. */
		func void actorStartsLookingAt(Instance instance, BehaviorElement actor)
		end
		
		/** \brief Actor stops looking at element. */
		func void actorStopsLookingAt(Instance instance, BehaviorElement actor)
		end
	end
	
	/** \brief Factory creating listeners. */
	interface ListenerFactory
		/** \brief Create listener. */
		func Listener createListener(Instance instance)
	end
	
	/** \brief Factory creating listeners using block. */
	class BlockListenerFactory implements ListenerFactory
		var Block pBlock
		
		/** \brief Create factory using block receiving Instance as parameter returning Listener. */
		func new(Block blockFactory)
			if blockFactory == null
				throw ENullPointer.new()
			end
			pBlock = blockFactory
		end
		
		/** \brief Create listener. */
		func Listener createListener(Instance instance)
			return pBlock.run(instance) cast Listener
		end
	end
	
	/**
	 * \brief Behavior factory.
	 * \version 1.25
	 * 
	 * Example XML element class:
	 * \code{.xml}
	 * <behavior type='ECBehaviorLookedAt'>
	 *   <!-- optional: add behavior trees. default adds all behavior trees. -->
	 *   <list name='behaviorTrees'>
	 *     <string/> <!-- add behavior with empty identifier -->
	 *     <string>default</string> <!-- add behavior with 'default' identifier -->
	 *   </list>
	 * 
	 *   <!-- optional: add state machines. default adds all state machines. -->
	 *   <list name='stateMachines'>
	 *     <string/> <!-- add behavior with empty identifier -->
	 *     <string>default</string> <!-- add behavior with 'default' identifier -->
	 *   </list>
	 * </behavior>
	 * \endcode
	 * 
	 * Element class properties added by the behavior can also be set directly inside the tag
	 * be removing the property name prefix and starting with a "." (for example ".propertyName").
	 */
	class Factory implements BehaviorFactory
		func new()
		end
		
		func String factoryId()
			return "ECBehaviorLookedAt"
		end
		
		func ECBehavior addBehavior(BehaviorElementClass eclass, String id, Dictionary parameters)
			if not id.empty()
				throw EInvalidParam.new("id is not empty string")
			end
			var ECBehaviorLookedAt behavior = ECBehaviorLookedAt.new(eclass)
			
			eclass.sharedFactoryHelper.allBTSM(behavior.getBTSMs(), eclass, parameters)
			
			eclass.sharedFactoryHelper.setPropertiesFromParameters(eclass, parameters, "lookedAt")
			return behavior
		end
	end
	
	/** \brief Behavior instance. */
	class Instance extends DefaultECBehaviorInstance
		/**
		 * \brief Behavior tree action/condition "lookedAt.check".
		 * \version 1.26
		 */
		private class BTACheck extends BTSMActionCondition
			var Instance pInstance
			var String pPrefix
			
			func new(Instance instance, String prefix)
				pInstance = instance
				pPrefix = prefix
			end
			
			func BTResult runActionShared(Object context, Dictionary parameters)
				return check("", parameters) if BTResult.success\
					else (parameters.has("wait") if BTResult.running else BTResult.failure)
			end
			
			func bool evaluateConditionShared(Object context, Dictionary parameters)
				return check(pPrefix, parameters)
			end
			
			func bool check(String prefix, Dictionary parameters)
				var bool result = true
				var Object value
				
				value = parameters.getAt(prefix + "count", null)
				if value != null
					result &= pInstance.getLookingActorCount() == (value cast String).toInt()
				end
				
				value = parameters.getAt(prefix + "count.not", null)
				if value != null
					result &= pInstance.getLookingActorCount() != (value cast String).toInt()
				end
				
				value = parameters.getAt(prefix + "count.less", null)
				if value != null
					result &= pInstance.getLookingActorCount() < (value cast String).toInt()
				end
				
				value = parameters.getAt(prefix + "count.greater", null)
				if value != null
					result &= pInstance.getLookingActorCount() > (value cast String).toInt()
				end
				
				value = parameters.getAt(prefix + "player", null)
				if value != null
					result &= pInstance.isPlayerLooking() == value.equals("true")
				end
				
				return result
			end
		end
		
		
		var ECBehaviorLookedAt pECBehavior
		var ElementResolver pElementResolver
		var Array pLookingActors
		var Array pListeners
		var ECComposeBTSM.Instance pBTSMs
		
		
		
		/** \brief Create element. */
		func new(ECBehaviorLookedAt ecbehavior, BehaviorElement element) super(element)
			pECBehavior = ecbehavior
			pLookingActors = Array.new()
			pListeners = Array.new()
		end
		
		/** \brief Dispose of inventory. */
		func void dispose()
			pListeners = null
			pLookingActors = null
			pElementResolver = null
			pBTSMs = null
			super.dispose()
		end
		
		
		
		/** \brief Initialize behavior from stub. */
		func void init(StubElement stub)
			pECBehavior.createListeners(this)
			
			if pECBehavior.getBTSMs().hasAny()
				var String prefix = "lookedAt."
				pBTSMs = ECComposeBTSM.Instance.new(getElement(), pECBehavior.getBTSMs())
				pBTSMs.addAllActionCondition(prefix + "check", BTACheck.new(this, prefix))
				pBTSMs.dropBTContexts()
			end
		end
		
		
		
		/** \brief Behavior. */
		func ECBehaviorLookedAt getECBehavior()
			return pECBehavior
		end
		
		
		
		/** \brief Count of actors looking at element. */
		func int getLookingActorCount()
			return pLookingActors.getCount()
		end
		
		/** \brief Actor looking at element by index. */
		func BehaviorElement getLookingActorAt(int index)
			return pLookingActors.getAt(index) cast BehaviorElement
		end
		
		/** \brief Actor is looking at element. */
		func bool hasLookingActor(BehaviorElement element)
			return pLookingActors.has(element)
		end
		
		/**
		 * \brief Visit actors looking at element using block.
		 * 
		 * Block receives as first argument each element of type BehaviorElement.
		 */
		func void forEachLookingActor(Block ablock)
			pLookingActors.forEach(ablock)
		end
		
		/**
		 * \brief Find actor looking at element using block.
		 * 
		 * Block receives as first argument each element of type BehaviorElement and has
		 * to return true if the actor is found otherwise false. Method returns the found
		 * actor or null if not found.
		 */
		func BehaviorElement findLookingActor(Block ablock)
			return pLookingActors.find(ablock) cast BehaviorElement
		end
		
		/**
		 * \brief Checks if player is looking at element and if so returns the player actor.
		 * 
		 * Checks each actor in the list of actors looking at the element if it has
		 * ECBehaviorPlayerControllable and it is the active player actor. If found
		 * returns the player actor. If not found null is returned.
		 */
		func BehaviorElement getPlayerLooking()
			return pLookingActors.find(block BehaviorElement each
				var ECBehaviorPlayerControllable.Instance behavior = \
					ECBehaviorPlayerControllable.getInstanceIn(each)
				return behavior != null and behavior.isPlayerControlled()
			end) cast BehaviorElement
		end
		
		/**
		 * \brief Player is looking at element.
		 * 
		 * Checks each actor in the list of actors looking at the element if it has
		 * ECBehaviorPlayerControllable and it is the active player actor.
		 */
		func bool isPlayerLooking()
			return getPlayerLooking() != null
		end
		
		/**
		 * \brief Add actor to list if absent.
		 * 
		 * If actor is added to the list actorStartsLookingAt() is called on all listeners.
		 */
		func void addLookingActor(BehaviorElement actor)
			if actor == null
				throw ENullPointer.new()
			end
			
			if pLookingActors.has(actor)
				return
			end
			
			pLookingActors.add(actor)
			
			pListeners.forEach(block Listener each
				each.actorStartsLookingAt(this, actor)
			end)
			if pBTSMs != null
				pBTSMs.runEvent("lookedAt.start")
			end
		end
		
		/**
		 * \brief Remove actor from list if present.
		 * 
		 * If actor is removed from list actorStopsLookingAt() is called on all listeners.
		 */
		func void removeLookingActor(BehaviorElement actor)
			if actor == null
				throw ENullPointer.new()
			end
			
			if not pLookingActors.has(actor)
				return
			end
			
			pLookingActors.remove(actor)
			
			pListeners.forEach(block Listener each
				each.actorStopsLookingAt(this, actor)
			end)
			if pBTSMs != null
				pBTSMs.runEvent("lookedAt.stop")
			end
		end
		
		
		
		/** \brief Add listener. */
		func void addListener(Listener listener)
			if listener == null
				throw EInvalidParam.new("listener is null")
			end
			pListeners.add(listener)
		end
		
		/** \brief Remove listener. */
		func void removeListener(Listener listener)
			pListeners.remove(listener)
		end
		
		
		
		/** \brief Frame update started. */
		func void enterFrame()
			if pElementResolver != null
				pElementResolver.resolve(getElement().getGameWorld())
				pElementResolver = null
			end
		end
		
		
		
		/** \brief Read element from file. */
		func void readFromFile(PersistencyEnvironment env, FileReader reader)
			select reader.readByte() // version
			case 0
				var int i, count = reader.readUShort()
				if count == 0
					return
				end
				
				pElementResolver = ElementResolver.new()
				for i = 0 to count
					pElementResolver.add(reader, block BehaviorElement element
						pLookingActors.add(element)
					end)
				end
				setRequiresEnterFrame(true)
				
			else
				throw EInvalidParam.new("unsupported version")
			end
		end
		
		/** \brief Write element to file. */
		func void writeToFile(PersistencyEnvironment env, FileWriter writer)
			writer.writeByte(0) // version
			
			writer.writeUShort(pLookingActors.getCount())
			pLookingActors.forEach(block BehaviorElement each
				ElementResolver.writeToFile(writer, each)
			end)
		end
	end
	
	
	
	var Array pListenerFactories
	var ECComposeBTSM pBTSMs
	
	
	
	/** \brief Create behavior element class. */
	func new(BehaviorElementClass eclass) super(eclass)
		if getBehaviorIn(eclass) != null
			throw BEMultipleInstanceException.new(eclass, this)
		end
		
		pListenerFactories = Array.new()
		pBTSMs = ECComposeBTSM.new()
		
		eclass.addBehavior(this)
	end
	
	/** \brief Dispose of behavior. */
	func void dispose()
		pListenerFactories = null
		pBTSMs = null
		super.dispose()
	end
	
	
	/**
	 * \brief Compose behavior trees and state machines.
	 * \version 1.26
	 */
	func ECComposeBTSM getBTSMs()
		return pBTSMs
	end
	
	
	/** \brief Add listener factory. */
	func void addListenerFactory(ListenerFactory factory)
		if factory == null
			throw ENullPointer.new()
		end
		pListenerFactories.add(factory)
	end
	
	/**
	 * \brief Add listener factory using block.
	 * 
	 * Block receives as parameter Instance and returns Listener.
	 */
	func void addListenerFactory(Block blockFactory)
		pListenerFactories.add(BlockListenerFactory.new(blockFactory))
	end
	
	/** \brief Visit listener factories with block with argument ListenerFactory. */
	func void forEachListenerFactory(Block ablock)
		pListenerFactories.forEach(ablock)
	end
	
	/** \brief Create listeners from factories adding them to behavior instance. */
	func void createListeners(Instance instance)
		pListenerFactories.forEach(block ListenerFactory each
			instance.addListener(each.createListener(instance))
		end)
	end
	
	
	
	/** \brief Get instance in element from owner element class. */
	func Instance instance(BehaviorElement element)
		return element.getInstanceAt(getInstanceIndex()) cast Instance
	end
	
	
	
	/**
	 * \brief Get behavior in element class or \em null if absent.
	 * 
	 * Use this method to check if a particular BehaviorElementClass contains a behavior
	 * of type ECBehaviorComponent.
	 */
	static func ECBehaviorLookedAt getBehaviorIn(BehaviorElementClass eclass)
		return eclass.findBehavior(block ECBehaviorLookedAt each
			return true
		end) cast ECBehaviorLookedAt
	end
	
	/**
	 * \brief Get instance in element or \em null if absent.
	 * 
	 * Use this method to check if a particular BehaviorElement contains a behavior instance
	 * of type ECBehaviorLookedAt.Instance . If more than one instance is present returns
	 * the first instance.
	 */
	static func Instance getInstanceIn(BehaviorElement element)
		return element.findInstance(block Instance each
			return true
		end) cast Instance
	end
	
	
	
	/** \brief Create Behavior instance. */
	func ECBehaviorInstance createInstance(BehaviorElement element)
		return Instance.new(this, element)
	end
end
