/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */


namespace Dragengine.Scenery

pin Dragengine.Gui
pin Dragengine.Preloading
pin Dragengine.LoadSave
pin Dragengine.Utils
pin Dragengine.Scenery
pin Dragengine.BehaviorTreeSystem
pin Dragengine.StateMachineSystem


/**
 * \brief Behavior element behavior adding support to track if VR hands point at element.
 * \version 1.7
 * 
 * This behavior tracks if hand controllers are pointing at the element. If hand controllers
 * start pointing at the element they are added to the list and listeners are notified.
 * If the hand controllers stop pointing at the element they are removed from the list and
 * listeners are notified. The behavior itself is passive. It requires to be triggered by
 * the hand controllers elements. The ECBehaviorVRHandPointAt behavior provides this
 * functionality.
 * 
 * This behavior supports persistable element classes (setPersistable).
 * 
 * \see https://developer.dragondreams.ch/wiki/doku.php/dragengine:modules:dragonscript:behavior_vrhandpointedat
 */
class ECBehaviorVRHandPointedAt extends DefaultECBehavior
	/** \brief Listener for behavior instance events. */
	interface Listener
		/** \brief Hand starts pointing at element. */
		func void handStartsPointingAt(Instance instance, ECBehaviorVRHandPointAt.Instance hand)
		
		/** \brief Hand stops pointing at element. */
		func void handStopsPointingAt(Instance instance, ECBehaviorVRHandPointAt.Instance hand)
	end
	
	/** \brief Default implementation of behavior instance listener. */
	class DefaultListener implements Listener
		/** \brief Create default listener. */
		func new()
		end
		
		/** \brief Hand starts pointing at element. */
		func void handStartsPointingAt(Instance instance, ECBehaviorVRHandPointAt.Instance hand)
		end
		
		/** \brief Hand stops pointing at element. */
		func void handStopsPointingAt(Instance instance, ECBehaviorVRHandPointAt.Instance hand)
		end
	end
	
	/** \brief Factory creating listeners. */
	interface ListenerFactory
		/** \brief Create listener. */
		func Listener createListener(Instance instance)
	end
	
	/** \brief Factory creating listeners using block. */
	class BlockListenerFactory implements ListenerFactory
		var Block pBlock
		
		/** \brief Create fhandy using block receiving Instance as parameter returning Listener. */
		func new(Block blockFactory)
			if blockFactory == null
				throw ENullPointer.new()
			end
			pBlock = blockFactory
		end
		
		/** \brief Create listener. */
		func Listener createListener(Instance instance)
			return pBlock.run(instance) cast Listener
		end
	end
	
	/**
	 * \brief Behavior factory.
	 * \version 1.25
	 * 
	 * Example XML element class:
	 * \code{.xml}
	 * <behavior type='ECBehaviorVRHandPointedAt'>
	 *   <!-- optional: add behavior trees. default adds all behavior trees. -->
	 *   <list name='behaviorTrees'>
	 *     <string/> <!-- add behavior with empty identifier -->
	 *     <string>default</string> <!-- add behavior with 'default' identifier -->
	 *   </list>
	 * 
	 *   <!-- optional: add state machines. default adds all state machines. -->
	 *   <list name='stateMachines'>
	 *     <string/> <!-- add behavior with empty identifier -->
	 *     <string>default</string> <!-- add behavior with 'default' identifier -->
	 *   </list>
	 * </behavior>
	 * \endcode
	 * 
	 * Element class properties added by the behavior can also be set directly inside the tag
	 * be removing the property name prefix and starting with a "." (for example ".propertyName").
	 */
	class Factory implements BehaviorFactory
		func new()
		end
		
		func String factoryId()
			return "ECBehaviorVRHandPointedAt"
		end
		
		func ECBehavior addBehavior(BehaviorElementClass eclass, String id, Dictionary parameters)
			if not id.empty()
				throw EInvalidParam.new("id is not empty string")
			end
			var ECBehaviorVRHandPointedAt behavior = ECBehaviorVRHandPointedAt.new(eclass)
			
			eclass.sharedFactoryHelper.allBTSM(behavior.getBTSMs(), eclass, parameters)
			
			eclass.sharedFactoryHelper.setPropertiesFromParameters(eclass, parameters, "vrHandPointedAt")
			return behavior
		end
	end
	
	/** \brief Behavior instance. */
	class Instance extends DefaultECBehaviorInstance
		/**
		 * \brief Behavior tree action/condition "vrHandPointedAt.check".
		 * \version 1.26
		 */
		private class BTACheck extends BTSMActionCondition
			var Instance pInstance
			var String pPrefix
			
			func new(Instance instance, String prefix)
				pInstance = instance
				pPrefix = prefix
			end
			
			func BTResult runActionShared(Object context, Dictionary parameters)
				return check("", parameters) if BTResult.success\
					else (parameters.has("wait") if BTResult.running else BTResult.failure)
			end
			
			func bool evaluateConditionShared(Object context, Dictionary parameters)
				return check(pPrefix, parameters)
			end
			
			func bool check(String prefix, Dictionary parameters)
				var bool result = true
				var Object value
				
				value = parameters.getAt(prefix + "count", null)
				if value != null
					result &= pInstance.getPointingHandCount() == (value cast String).toInt()
				end
				
				value = parameters.getAt(prefix + "count.not", null)
				if value != null
					result &= pInstance.getPointingHandCount() != (value cast String).toInt()
				end
				
				value = parameters.getAt(prefix + "count.less", null)
				if value != null
					result &= pInstance.getPointingHandCount() < (value cast String).toInt()
				end
				
				value = parameters.getAt(prefix + "count.greater", null)
				if value != null
					result &= pInstance.getPointingHandCount() > (value cast String).toInt()
				end
				
				value = parameters.getAt(prefix + "player", null)
				if value != null
					result &= pInstance.isPlayerPointing() == value.equals("true")
				end
				
				return result
			end
		end
		
		
		var ECBehaviorVRHandPointedAt pECBehavior
		var Array pPointingHands
		var Array pListeners
		var ECComposeBTSM.Instance pBTSMs
		
		
		
		/** \brief Create element. */
		func new(ECBehaviorVRHandPointedAt ecbehavior, BehaviorElement element) super(element)
			pECBehavior = ecbehavior
			pPointingHands = Array.new()
			pListeners = Array.new()
		end
		
		/** \brief Dispose of inventory. */
		func void dispose()
			pListeners = null
			pPointingHands = null
			pBTSMs = null
			super.dispose()
		end
		
		
		
		/** \brief Initialize behavior from stub. */
		func void init(StubElement stub)
			pECBehavior.createListeners(this)
			
			if pECBehavior.getBTSMs().hasAny()
				var String prefix = "vrHandPointedAt."
				pBTSMs = ECComposeBTSM.Instance.new(getElement(), pECBehavior.getBTSMs())
				pBTSMs.addAllActionCondition(prefix + "check", BTACheck.new(this, prefix))
				pBTSMs.dropBTContexts()
			end
		end
		
		
		
		/** \brief Behavior. */
		func ECBehaviorVRHandPointedAt getECBehavior()
			return pECBehavior
		end
		
		
		
		/** \brief Count of hands pointing at element. */
		func int getPointingHandCount()
			return pPointingHands.getCount()
		end
		
		/** \brief Hand pointing at element by index. */
		func ECBehaviorVRHandPointAt.Instance getPointingHandAt(int index)
			return pPointingHands.getAt(index) cast ECBehaviorVRHandPointAt.Instance
		end
		
		/** \brief Hand is pointing at element. */
		func bool hasPointingHand(ECBehaviorVRHandPointAt.Instance element)
			return pPointingHands.has(element)
		end
		
		/**
		 * \brief Visit hands pointing at element using block.
		 * 
		 * Block receives as first argument each element of type ECBehaviorVRHandPointAt.Instance.
		 */
		func void forEachPointingHand(Block ablock)
			pPointingHands.forEach(ablock)
		end
		
		/**
		 * \brief Find hand pointing at element using block.
		 * 
		 * Block receives as first argument each element of type ECBehaviorVRHandPointAt.Instance
		 * and has to return true if the hand is found otherwise false. Method returns the found
		 * hand or null if not found.
		 */
		func ECBehaviorVRHandPointAt.Instance findPointingHand(Block ablock)
			return pPointingHands.find(ablock) cast ECBehaviorVRHandPointAt.Instance
		end
		
		/**
		 * \brief Checks if player is pointing at element and if so returns the player hand.
		 * 
		 * Checks each hand in the list of hands pointing at the element if it has
		 * ECBehaviorPlayerControllable and it is the active player hand. If found
		 * returns the player hand. If not found null is returned.
		 */
		func ECBehaviorVRHandPointAt.Instance getPlayerPointing()
			return pPointingHands.find(block ECBehaviorVRHandPointAt.Instance each
				var ECBehaviorPlayerControllable.Instance behavior = \
					ECBehaviorPlayerControllable.getInstanceIn(each.getElement())
				return behavior != null and behavior.isPlayerControlled()
			end) cast ECBehaviorVRHandPointAt.Instance
		end
		
		/**
		 * \brief Player is pointing at element.
		 * 
		 * Checks each hand in the list of hands pointing at the element if it has
		 * ECBehaviorPlayerControllable and it is the active player hand.
		 */
		func bool isPlayerPointing()
			return getPlayerPointing() != null
		end
		
		/**
		 * \brief Add hand to list if absent.
		 * 
		 * If hand is added to the list handStartsPointingAt() is called on all listeners.
		 */
		func void addPointingHand(ECBehaviorVRHandPointAt.Instance hand)
			if hand == null
				throw ENullPointer.new()
			end
			
			if pPointingHands.has(hand)
				return
			end
			
			pPointingHands.add(hand)
			
			pListeners.forEach(block Listener each
				each.handStartsPointingAt(this, hand)
			end)
			if pBTSMs != null
				pBTSMs.runEvent("vrHandPointedAt.start")
			end
		end
		
		/**
		 * \brief Remove hand from list if present.
		 * 
		 * If hand is removed from list handStopsPointingAt() is called on all listeners.
		 */
		func void removePointingHand(ECBehaviorVRHandPointAt.Instance hand)
			if hand == null
				throw ENullPointer.new()
			end
			
			if not pPointingHands.has(hand)
				return
			end
			
			pPointingHands.remove(hand)
			
			pListeners.forEach(block Listener each
				each.handStopsPointingAt(this, hand)
			end)
			if pBTSMs != null
				pBTSMs.runEvent("vrHandPointedAt.stop")
			end
		end
		
		
		
		/** \brief Add listener. */
		func void addListener(Listener listener)
			if listener == null
				throw ENullPointer.new("listener")
			end
			pListeners.add(listener)
		end
		
		/** \brief Remove listener. */
		func void removeListener(Listener listener)
			pListeners.remove(listener)
		end
		
		
		
		/** \brief Read element from file. */
		func void readFromFile(PersistencyEnvironment env, FileReader reader)
			select reader.readByte() // version
			case 0
				// 1.11.1 save/restore removed since this makes no sense
				var int i, count = reader.readUShort()
				if count == 0
					return
				end
				
				var ElementResolver resolver = ElementResolver.new()
				for i = 0 to count
					resolver.addBehavior(reader, block ECBehaviorVRHandPointAt.Instance instance
					end)
				end
				
			else
				throw EInvalidParam.new("unsupported version")
			end
		end
		
		/** \brief Write element to file. */
		func void writeToFile(PersistencyEnvironment env, FileWriter writer)
			writer.writeByte(0) // version
			
			writer.writeUShort(0) // save/restore removed since this makes no sense
		end
	end
	
	
	
	var Array pListenerFactories
	var ECComposeBTSM pBTSMs
	
	
	
	/** \brief Create behavior element class. */
	func new(BehaviorElementClass eclass) super(eclass)
		if getBehaviorIn(eclass) != null
			throw BEMultipleInstanceException.new(eclass, this)
		end
		
		pListenerFactories = Array.new()
		pBTSMs = ECComposeBTSM.new()
		
		eclass.addBehavior(this)
	end
	
	/** \brief Dispose of behavior. */
	func void dispose()
		pListenerFactories = null
		pBTSMs = null
		super.dispose()
	end
	
	
	/**
	 * \brief Compose behavior trees and state machines.
	 * \version 1.26
	 */
	func ECComposeBTSM getBTSMs()
		return pBTSMs
	end
	
	
	/** \brief Add listener fhandy. */
	func void addListenerFactory(ListenerFactory fhandy)
		if fhandy == null
			throw ENullPointer.new()
		end
		pListenerFactories.add(fhandy)
	end
	
	/**
	 * \brief Add listener fhandy using block.
	 * 
	 * Block receives as parameter Instance and returns Listener.
	 */
	func void addListenerFactory(Block blockFactory)
		pListenerFactories.add(BlockListenerFactory.new(blockFactory))
	end
	
	/** \brief Visit listener fhandies with block with argument ListenerFactory. */
	func void forEachListenerFactory(Block ablock)
		pListenerFactories.forEach(ablock)
	end
	
	/** \brief Create listeners from fhandies adding them to behavior instance. */
	func void createListeners(Instance instance)
		pListenerFactories.forEach(block ListenerFactory each
			instance.addListener(each.createListener(instance))
		end)
	end
	
	
	
	/** \brief Get instance in element from owner element class. */
	func Instance instance(BehaviorElement element)
		return element.getInstanceAt(getInstanceIndex()) cast Instance
	end
	
	
	
	/**
	 * \brief Get behavior in element class or \em null if absent.
	 * 
	 * Use this method to check if a particular BehaviorElementClass contains a behavior
	 * of type ECBehaviorComponent.
	 */
	static func ECBehaviorVRHandPointedAt getBehaviorIn(BehaviorElementClass eclass)
		return eclass.findBehavior(block ECBehaviorVRHandPointedAt each
			return true
		end) cast ECBehaviorVRHandPointedAt
	end
	
	/**
	 * \brief Get instance in element or \em null if absent.
	 * 
	 * Use this method to check if a particular BehaviorElement contains a behavior instance
	 * of type ECBehaviorVRHandPointedAt.Instance . If more than one instance is present returns
	 * the first instance.
	 */
	static func Instance getInstanceIn(BehaviorElement element)
		return element.findInstance(block Instance each
			return true
		end) cast Instance
	end
	
	
	
	/** \brief Create Behavior instance. */
	func ECBehaviorInstance createInstance(BehaviorElement element)
		return Instance.new(this, element)
	end
end
