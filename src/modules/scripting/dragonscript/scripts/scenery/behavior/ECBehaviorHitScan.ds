/* 
 * Drag[en]gine DragonScript Script Module
 *
 * Copyright (C) 2020, Roland Pl√ºss (roland@rptd.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */


namespace Dragengine.Scenery

pin Dragengine.Gui
pin Dragengine.LoadSave
pin Dragengine.Preloading
pin Dragengine.Utils


/**
 * \brief Behavior adding hit-scan support to elements.
 * 
 * Behavior supports using one or more collider collision tests to do one or more hit scans
 * for example to check for weapon projectile impacts. Hit scans are done once then the
 * result can be examine. To use this behavior add ECBehaviorCollider then this behavior.
 * The collider is used to carry the collision tests.
 * 
 * To start a series of hit-scans call one of the start() methods to set up the hit-scans.
 * You can set up the hit-scans manually or use the convenience methods to set up hit-scans
 * matching typical use cases. Starting hit scans has to be done during think() time.
 * 
 * After setting up hit scans during think() the physics module carries out the desired
 * collision tests. The result can be evaluated during the following postThink() or the the
 * next think() call.
 * 
 * A typical scenario is a projectile weapon triggered by the actor. The weapon element
 * has the ECBehaviorHitScan. When the player triggers the weapon the hit-scan is started()
 * in the think() phase and the hits evaluated in the postThink() phase.
 * 
 * \code{.ds}
 * // Weapon element befitted with hit-scan support
 * class MyWeaponClass extends BehaviorElementClass
 *    public var ECBehaviorCollider collider
 *    public var ECBehaviorHitScan hitScan
 *    
 *    public func new()
 *       collider = ECBehaviorCollider.new(this, null)
 *       hitScan = ECBehaviorHitScan.new(this, collider)
 *       hitScan.getCollisionFilter().setCollisionFilter(...)
 *    end
 * end
 * 
 * // Player actor action triggering the weapon
 * class MyPlayerAction extends BAAFirstPerson
 *    public func new()
 *    end
 *    
 *    public var bool doesFireWeapon
 *    
 *    public func void think(float elapsed)
 *       super.think(elapsed)
 *       
 *       if doesPlayerFireWeapon()
 *          var BehaviorElement weapon = getPlayerWeapon()
 *          ECBehaviorHitScan.getInstanceIn(weapon).start( ... )
 *          doesFireWeapon = true
 *       end
 *    end
 *    
 *    public func void postThink(float elapsed)
 *       super.postThink(elapsed)
 *       
 *       if doesFireWeapon
 *          doesFireWeapon = false
 *          
 *          var BehaviorElement weapon = getPlayerWeapon()
 *          ECBehaviorHitScan.getInstanceIn(weapon).forEachHit(block ColliderCollisionTest test
 *              // evaluate hits for example damaging first hit for each hit-scan if present
 *              if test.hitCollider(0) != null
 *                 var BehaviorElement target = test.hitCollider(0).getOwner() cast BehaviorElement
 *                 // damage target
 *              end
 *          end)
 *       end
 *    end
 * end
 * \endcode
 * 
 * Another possibility is to create a behavior attached to the weapon element doing the same.
 * This moves the weapon hit and damage logic to a behavior with the actor only triggering
 * the behavior and having nothing to do with it.
 */
class ECBehaviorHitScan extends DefaultECBehavior
	/** \brief Behavior instance. */
	class Instance extends DefaultECBehaviorInstance
		private var ECBehaviorHitScan pECBehavior
		private var ECBehaviorCollider.Instance pCollider
		private var ECBehaviorComponent.Instance pComponent
		
		private var CollisionFilter pCollisionFilter
		private var float pRange
		private var Vector pOrigin
		private var Vector pDirection
		private var Quaternion pOrientation
		private var Matrix pViewMatrix
		private var String pBone
		private var Array pTests
		
		
		
		/** \brief Create element. */
		public func new( ECBehaviorHitScan ecbehavior, BehaviorElement element ) super( element )
			this.pECBehavior = ecbehavior
			this.pTests = Array.new()
			
			this.pCollider = ecbehavior.getCollider().instance( element )
		end
		
		/** \brief Dispose of composeable instance. */
		public func void dispose()
			this.pTests = null
			this.pCollider = null
			this.pComponent = null
			super.dispose()
		end
		
		
		
		/** \brief Initialize element from stub. */
		public func void init( StubElement stub )
			var BehaviorElement element = this.getElement()
			
			if this.pECBehavior.getComponent() != null
				this.pComponent = this.pECBehavior.getComponent().instance( element )
			end
			
			var CodecPropertyString codec = element.getClass().getCodecPropertyString()
			this.pCollisionFilter = this.pECBehavior.getCollisionFilter().getCollisionFilter()
			this.pRange = DEMath.max( this.pECBehavior.getRange().getValue( stub ), 0.0 )
			this.pOrigin = this.pECBehavior.getOrigin().getVector( stub, codec )
			this.pDirection = this.pECBehavior.getDirection().getVector( stub, codec ).normalize()
			this.pOrientation = Quaternion.newFromEuler( this.pECBehavior.getOrientation().getVector( stub, codec ) )
			this.pBone = this.pECBehavior.getBone().getValue( stub )
			
			this.pViewMatrix = Matrix.newFromQuaternion( this.pOrientation )
		end
		
		
		
		/** \brief Behavior. */
		public func ECBehaviorHitScan getECBehavior()
			return this.pECBehavior
		end
		
		/** \brief Collider behavior. */
		public func ECBehaviorCollider.Instance getCollider()
			return this.pCollider
		end
		
		/** \brief Collider behavior or null if not used. */
		public func ECBehaviorComponent.Instance getComponent()
			return this.pComponent
		end
		
		
		
		/** \brief Test range. */
		public func float getRange()
			return this.pRange
		end
		
		/** \brief Set test range. */
		public func void setRange( float range )
			range = DEMath.max( range, 0.0 )
			if DEMath.fabs( range - this.pRange ) < 0.001
				return
			end
			
			this.pRange = range
			
			this.resetTestDirections()
		end
		
		/** \brief Test origin. */
		public func Vector getOrigin()
			return this.pOrigin
		end
		
		/** \brief Set test origin. */
		public func void setOrigin( Vector origin )
			if origin.equals( this.pOrigin )
				return
			end
			
			this.pOrigin = origin
			
			this.pTests.forEach( block ColliderCollisionTest each
				each.setOrigin( origin )
			end )
		end
		
		/** \brief Normalized test direction. */
		public func Vector getDirection()
			return this.pDirection
		end
		
		/** \brief Set normalized test direction. */
		public func void setDirection( Vector direction )
			direction = direction.normalize()
			if direction.equals( this.pDirection )
				return
			end
			
			this.pDirection = direction
			
			this.resetTestDirections()
		end
		
		/** \brief Test orientation. */
		public func Quaternion getOrientation()
			return this.pOrientation
		end
		
		/** \brief Set test orientation. */
		public func void setOrientation( Quaternion orientation )
			if orientation.equals( this.pOrientation )
				return
			end
			
			this.pOrientation = orientation
			this.pViewMatrix = Matrix.newFromQuaternion( orientation )
			
			this.resetTestDirections()
		end
		
		/** \brief Test bone. */
		public func String getBone()
			return this.pBone
		end
		
		/** \brief Set test bone. */
		public func void setBone( String bone )
			if bone.equals( this.pBone )
				return
			end
			
			this.pBone = bone
			
			this.pTests.forEach( block ColliderCollisionTest each
				each.setBone( bone )
			end )
		end
		
		/** \brief Collision filter. */
		public func CollisionFilter getCollisionFilter()
			return this.pCollisionFilter
		end
		
		/** \brief Set collision filter. */
		public func void setCollisionFilter( CollisionFilter collisionFilter )
			this.pCollisionFilter = collisionFilter
			
			this.pTests.forEach( block ColliderCollisionTest each
				each.setCollisionFilter( collisionFilter )
			end )
		end
		
		
		
		/**
		 * \brief Start a single collision test.
		 * 
		 * After call returns one collision tests is attached to the collider and ready to
		 * run using the last configuration used.
		 */
		public func void start()
			this.start( 1 )
		end
		
		/**
		 * \brief Start collision tests.
		 * 
		 * After call returns the given number of collision tests are attached to the collider
		 * and ready to run using the last configuration used.
		 */
		public func void start( int count )
			if count < 1
				throw EInvalidParam.new( "count < 1" )
			end
			
			var ColliderCollisionTest test
			
			if this.pTests.getCount() < count
				var Vector testDirection = this.pViewMatrix * ( this.pDirection * this.pRange )
				var Collider collider = this.pCollider.getCollider()
				var Component component
				if this.pComponent != null
					component = this.pComponent.getComponent()
				end
				
				while this.pTests.getCount() < count
					test = ColliderCollisionTest.new( this.pCollisionFilter, component, \
						this.pBone, this.pOrigin, testDirection )
					collider.addCollisionTest( test )
					this.pTests.add( test )
				end
				
			elif this.pTests.getCount() > count
				var Collider collider = this.pCollider.getCollider()
				
				while this.pTests.getCount() > count
					test = this.pTests.getAt( this.pTests.getCount() - 1 ) cast ColliderCollisionTest
					collider.removeCollisionTest( test )
					this.pTests.remove( test )
				end
			end
			
			this.pTests.forEach( block ColliderCollisionTest each
				each.setEnabled( true )
			end )
			
			this.setRequiresThink( true )
		end
		
		/**
		 * \brief Start collision tests arranging them in a circular pattern.
		 * 
		 * After call returns the given number of collision tests are attached to the collider
		 * and ready to run using the last configuration used.
		 * 
		 * \param angle Opening angle in degrees (angle across diameter).
		 */
		public func void startCircular( int count, float angle )
			this.start( count )
			if angle < 0.001
				return
			end
			
			angle *= 0.5
			var float radius = DEMath.sin( angle ) * this.pRange
			var float distance = DEMath.cos( angle ) * this.pRange
			var float factor = 360.0 / count
			var int i
			
			for i = 0 to count
				angle = factor * i
				( this.pTests.getAt( i ) cast ColliderCollisionTest ).setDirection( \
					this.pViewMatrix * ( Vector.new( \
						DEMath.sin( angle ) * radius, \
						DEMath.cos( angle ) * radius, \
						distance ) ) )
			end
		end
		
		/**
		 * \brief Start collision tests arranging them randomly in a small cone cap.
		 * 
		 * After call returns the given number of collision tests are attached to the collider
		 * and ready to run using the last configuration used.
		 * 
		 * This method can be used for weapons with multiple projectiles like buck shots.
		 * 
		 * \param angle Opening angle in degrees (angle across diameter).
		 */
		public func void startCone( int count, float angle )
			this.start( count )
			if angle < 0.001
				return
			end
			
			var float radius, rotation, distance, testAngle
			angle *= 0.5
			
			this.pTests.forEach( block ColliderCollisionTest each
				testAngle = DEMath.random( 0.0, angle )
				radius = DEMath.sin( testAngle ) * this.pRange
				distance = DEMath.cos( testAngle ) * this.pRange
				rotation = DEMath.random( 0.0, 360.0 )
				each.setDirection( this.pViewMatrix * ( Vector.new( \
					DEMath.sin( rotation ) * radius, \
					DEMath.cos( rotation ) * radius, \
					distance ) ) )
			end )
		end
		
		/**
		 * \brief Start collision tests arranging them randomly across a small sphere segment.
		 * 
		 * After call returns the given number of collision tests are attached to the collider
		 * and ready to run using the last configuration used.
		 * 
		 * The segment has a rectangular shape. This method can be used for weapons with
		 * rectangular spreads like a duckbill modification.
		 * 
		 * \param angleX Horizontal opening angle in degrees (angle across width).
		 * \param angleY Vertical opening angle in degrees (angle across height).
		 */
		public func void startRectangular( int count, float angleX, float angleY )
			this.start( count )
			if angleX < 0.001 or angleY < 0.001
				return
			end
			
			var float toX = angleX * 0.5
			var float fromX = -toX
			var float toY = angleY * 0.5
			var float fromY = -toY
			var float positionY, testAngle, radius
			
			this.pTests.forEach( block ColliderCollisionTest each
				testAngle = DEMath.random( fromY, toY )
				positionY = DEMath.sin( testAngle ) * this.pRange
				radius = DEMath.cos( testAngle ) * this.pRange
				
				testAngle = DEMath.random( fromX, toX )
				each.setDirection( this.pViewMatrix * ( Vector.new( \
					DEMath.sin( testAngle ) * radius, \
					positionY, \
					DEMath.cos( testAngle ) * radius ) ) )
			end )
		end
		
		/**
		 * \brief Start collision tests arranging them evenly across a small sphere segment.
		 * 
		 * After call returns the given number of collision tests are attached to the collider
		 * and ready to run using the last configuration used.
		 * 
		 * The segment has a rectangular shape. This method can be used for testing actor
		 * visibility by using the actor height and size.
		 * 
		 * \param countX Count of columns.
		 * \param countY Count of rows.
		 * \param angleX Horizontal opening angle in degrees (angle across width).
		 * \param angleY Vertical opening angle in degrees (angle across height).
		 */
		public func void startRectangularUniform( int countX, int countY, float angleX, float angleY )
			if countX < 1
				throw EInvalidParam.new( "countX < 1" )
			end
			if countY < 1
				throw EInvalidParam.new( "countY < 1" )
			end
			this.start( countX * countY )
			if angleX < 0.001 or angleY < 0.001
				return
			end
			
			var int x, y, index = 0
			var float positionY, testAngle, radius
			var float firstX = angleX * -0.5
			var float factorX = angleX / DEMath.max( countX - 1, 1 )
			var float firstY = angleY * -0.5
			var float factorY = angleY / DEMath.max( countY - 1, 1 )
			
			for y = 0 to countY
				testAngle = firstY + factorY * y
				positionY = DEMath.sin( testAngle ) * this.pRange
				radius = DEMath.cos( testAngle ) * this.pRange
				
				for x = 0 to countX
					testAngle = firstX + factorX * x
					( this.pTests.getAt( index++ ) cast ColliderCollisionTest ).setDirection( \
						this.pViewMatrix * ( Vector.new( \
							DEMath.sin( testAngle ) * radius, \
							positionY, \
							DEMath.cos( testAngle ) * radius ) ) )
				end
			end
		end
		
		/** \brief Stop hit scans. */
		public func void stop()
			this.setRequiresThink( false )
			
			this.pTests.forEach( block ColliderCollisionTest each
				each.setEnabled( false )
			end )
		end
		
		/** \brief Stop hit scans clearing results as if nothing is hit. */
		public func void clear()
			this.pTests.forEach( block ColliderCollisionTest each
				each.reset()
				each.setEnabled( false )
			end )
		end
		
		/** \brief Set direction of all tests to viewMatrix * direction * range. */
		public func void resetTestDirections()
			var Vector direction = this.pViewMatrix * ( this.pDirection * this.pRange )
			this.pTests.forEach( block ColliderCollisionTest each
				each.setDirection( direction )
			end )
		end
		
		
		
		/** \brief Count of collision tests. */
		public func int getTestCount()
			return this.pTests.getCount()
		end
		
		/** \brief Collision test at index. */
		public func ColliderCollisionTest getTestAt( int index )
			return this.pTests.getAt( index ) cast ColliderCollisionTest
		end
		
		/**
		 * \brief Visit collision tests using block.
		 * 
		 * Block receives ColliderCollisionTest as argument.
		 */
		public func void forEachTest( Block ablock )
			this.pTests.forEach( ablock )
		end
		
		/**
		 * \brief Visit collision tests with found collisions.
		 * 
		 * Block receives ColliderCollisionTest as argument.
		 */
		public func void forEachHit( Block ablock )
			this.pTests.forEach( block ColliderCollisionTest each
				if each.getHasCollision()
					ablock.run( each )
				end
			end )
		end
		
		
		
		/**
		 * \brief Post thinking after physics processing is finished.
		 * 
		 * Stops tests. Results can be examined by other behaviors.
		 */
		public func void postThink( float elapsed )
			this.stop()
		end
	end
	
	
	
	private var ECBehaviorCollider pCollider
	private var ECBehaviorComponent pComponent
	private var ECComposeCollisionFilter pCollisionFilter
	private var ECPFloat pRange
	private var ECPVector pOrigin
	private var ECPVector pDirection
	private var ECPVector pOrientation
	private var ECPString pBone
	
	
	
	/**
	 * \brief Create behavior element class.
	 * 
	 * These values are optional and can be null: \em component.
	 */
	public func new( BehaviorElementClass eclass, ECBehaviorCollider collider, \
	ECBehaviorComponent component ) this( eclass, collider, component, "" )
	end
	
	public func new( BehaviorElementClass eclass, ECBehaviorCollider collider, \
	ECBehaviorComponent component, String id ) this( eclass, collider, component, \
	id, id.empty() if "hitScan." else "hitScan(" + id + ")." )
	end
	
	public func new( BehaviorElementClass eclass, ECBehaviorCollider collider, \
	ECBehaviorComponent component, String id, String prefix ) super( eclass, id )
		if collider == null
			throw ENullPointer.new( "collider" )
		end
		
		this.pCollider = collider
		this.pComponent = component
		
		var LayerMask cfCategory = LayerMask.newWith( BaseGameApp.CollisionFilterBit.dynamic )
		
		var LayerMask cfFilter = LayerMask.new()
		cfFilter.setBit( BaseGameApp.CollisionFilterBit.geometry )
		cfFilter.setBit( BaseGameApp.CollisionFilterBit.dynamic )
		cfFilter.setBit( BaseGameApp.CollisionFilterBit.actor )
		
		this.pCollisionFilter = ECComposeCollisionFilter.new( CollisionFilter.new( cfCategory, cfFilter ) )
		
		eclass.addBehavior( this )
		
		this.pRange = ECPFloat.new( prefix + "range", 20, 0 )
		eclass.addProperty( this.pRange )
		
		this.pOrigin = ECPVector.new( prefix + "origin", Vector.new() )
		eclass.addProperty( this.pOrigin )
		
		this.pDirection = ECPVector.new( prefix + "direction", Vector.new( 0, 0, 1 ) )
		eclass.addProperty( this.pDirection )
		
		this.pOrientation = ECPVector.new( prefix + "orientation", Vector.new() )
		eclass.addProperty( this.pOrientation )
		
		this.pBone = ECPString.new( prefix + "bone", "" )
		eclass.addProperty( this.pBone )
	end
	
	/** \brief Dispose of behavior. */
	public func void dispose()
		this.pCollider = null
		this.pComponent = null
		super.dispose()
	end
	
	
	
	/** \brief Collider behavior or null. */
	public func ECBehaviorCollider getCollider()
		return this.pCollider
	end
	
	/** \brief Component behavior or null. */
	public func ECBehaviorComponent getComponent()
		return this.pComponent
	end
	
	
	
	/** \brief Collision filter for AI collider. */
	public func ECComposeCollisionFilter getCollisionFilter()
		return this.pCollisionFilter
	end
	
	/** \brief Test range. */
	public func ECPFloat getRange()
		return this.pRange
	end
	
	/** \brief Test origin. */
	public func ECPVector getOrigin()
		return this.pOrigin
	end
	
	/** \brief Normalized test direction. */
	public func ECPVector getDirection()
		return this.pDirection
	end
	
	/** \brief Test orientation. */
	public func ECPVector getOrientation()
		return this.pOrientation
	end
	
	/** \brief Test bone. */
	public func ECPString getBone()
		return this.pBone
	end
	
	
	
	/** \brief Get instance in element from owner element class. */
	public func Instance instance( BehaviorElement element )
		return element.getInstanceAt( this.getInstanceIndex() ) cast Instance
	end
	
	
	
	/**
	 * \brief Get behavior in element class or \em null if absent.
	 * 
	 * Use this method to check if a particular BehaviorElementClass contains a behavior
	 * of type ECBehaviorCollider.
	 */
	static public func ECBehaviorHitScan getBehaviorIn( BehaviorElementClass eclass )
		return eclass.findBehavior( block ECBehaviorHitScan each
			return true
		end ) cast ECBehaviorHitScan
	end
	
	/**
	 * \brief Get behavior with id in element class or \em null if absent.
	 * 
	 * Use this method to check if a particular BehaviorElementClass contains a behavior
	 * of type ECBehaviorHitScan with specific identifier.
	 */
	static public func ECBehaviorHitScan getBehaviorIn( BehaviorElementClass eclass, String id )
		return eclass.findBehavior( block ECBehaviorHitScan each
			return each.getID().equals( id )
		end ) cast ECBehaviorHitScan
	end
	
	/**
	 * \brief Get list of all behaviors in element.
	 * 
	 * Returns list contains ECBehaviorHitScan behaviors in the order they have
	 * been created in the element.
	 */
	static public func Array getAllBehaviorsIn( BehaviorElementClass eclass )
		return eclass.collectBehaviors( block ECBehaviorHitScan each
			return true
		end )
	end
	
	
	
	/**
	 * \brief Get instance in element or \em null if absent.
	 * 
	 * Use this method to check if a particular BehaviorElement contains a behavior instance
	 * of type ECBehaviorHitScan.Instance . If more than one instance is present returns
	 * the first instance.
	 */
	static public func Instance getInstanceIn( BehaviorElement element )
		return element.findInstance( block Instance each
			return true
		end ) cast Instance
	end
	
	/**
	 * \brief Get instance with id in element or \em null if absent.
	 * 
	 * Use this method to check if a particular BehaviorElement contains a behavior instance
	 * of type ECBehaviorHitScan.Instance with specific identifier.
	 */
	static public func Instance getInstanceIn( BehaviorElement element, String id )
		return element.findInstance( block Instance each
			return each.getECBehavior().getID().equals( id )
		end ) cast Instance
	end
	
	/**
	 * \brief Get list of all instances in element.
	 * 
	 * Returns list contains ECBehaviorHitScan.Instance instances in the order they have
	 * been created in the element.
	 */
	static public func Array getAllInstancesIn( BehaviorElement element )
		return element.collectInstances( block Instance each
			return true
		end )
	end
	
	
	
	/** \brief Create Behavior instance. */
	public func ECBehaviorInstance createInstance( BehaviorElement element )
		return Instance.new( this, element )
	end
end
