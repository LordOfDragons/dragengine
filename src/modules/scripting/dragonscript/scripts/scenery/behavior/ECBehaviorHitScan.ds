/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */


namespace Dragengine.Scenery

pin Dragengine.Gui
pin Dragengine.LoadSave
pin Dragengine.Preloading
pin Dragengine.Utils
pin Dragengine.BehaviorTreeSystem


/**
 * \brief Behavior adding hit-scan support to elements.
 * 
 * Behavior supports using one or more collider collision tests to do one or more hit scans
 * for example to check for weapon projectile impacts. Hit scans are done once then the
 * result can be examine. To use this behavior add ECBehaviorCollider then this behavior.
 * The collider is used to carry the collision tests.
 * 
 * To start a series of hit-scans call one of the start() methods to set up the hit-scans.
 * You can set up the hit-scans manually or use the convenience methods to set up hit-scans
 * matching typical use cases. Starting hit scans has to be done during think() time.
 * 
 * After setting up hit scans during think() the physics module carries out the desired
 * collision tests. The result can be evaluated during the following postThink() or the the
 * next think() call.
 * 
 * A typical scenario is a projectile weapon triggered by the actor. The weapon element
 * has the ECBehaviorHitScan. When the player triggers the weapon the hit-scan is started()
 * in the think() phase and the hits evaluated in the postThink() phase.
 * 
 * \code{.ds}
 * // Weapon element befitted with hit-scan support
 * class MyWeaponClass extends BehaviorElementClass
 *    public var ECBehaviorCollider collider
 *    public var ECBehaviorHitScan hitScan
 *    
 *    func new()
 *       collider = ECBehaviorCollider.new(this, null)
 *       hitScan = ECBehaviorHitScan.new(this, collider)
 *       hitScan.getCollisionFilter().setCollisionFilter(...)
 *    end
 * end
 * 
 * // Player actor action triggering the weapon
 * class MyPlayerAction extends BAAFirstPerson
 *    func new()
 *    end
 *    
 *    public var bool doesFireWeapon
 *    
 *    func void think(float elapsed)
 *       super.think(elapsed)
 *       
 *       if doesPlayerFireWeapon()
 *          var BehaviorElement weapon = getPlayerWeapon()
 *          ECBehaviorHitScan.getInstanceIn(weapon).start(...)
 *          doesFireWeapon = true
 *       end
 *    end
 *    
 *    func void postThink(float elapsed)
 *       super.postThink(elapsed)
 *       
 *       if doesFireWeapon
 *          doesFireWeapon = false
 *          
 *          var BehaviorElement weapon = getPlayerWeapon()
 *          ECBehaviorHitScan.getInstanceIn(weapon).forEachHit(block ColliderCollisionTest test
 *              // evaluate hits for example damaging first hit for each hit-scan if present
 *              if test.hitCollider(0) != null
 *                 var BehaviorElement target = test.hitCollider(0).getOwner() cast BehaviorElement
 *                 // damage target
 *              end
 *          end)
 *       end
 *    end
 * end
 * \endcode
 * 
 * Another possibility is to create a behavior attached to the weapon element doing the same.
 * This moves the weapon hit and damage logic to a behavior with the actor only triggering
 * the behavior and having nothing to do with it.
 * 
 * \see https://developer.dragondreams.ch/wiki/doku.php/dragengine:modules:dragonscript:behavior_hitscan
 */
class ECBehaviorHitScan extends DefaultECBehavior
	/**
	 * \brief Behavior factory.
	 * \version 1.25
	 * 
	 * Automatically assigns these behaviors if present before adding:
	 * - Required: \ref ECBehaviorCollider
	 * - Optional: \ref ECBehaviorComponent
	 * 
	 * Example XML element class:
	 * \code{.xml}
	 * <behavior type='ECBehaviorHitScan'>
	 *   <!-- optional: use component with id instead of empty string -->
	 *   <string name='component'>second</string>
	 * 
	 *   <!-- optional: set collision filter. default value '1:0 1 2' which means
	 *                  category BaseGameApp.CollisionFilterBit.dynamic
	 *                  filter BaseGameApp.CollisionFilterBit.geometry,
	 *                         BaseGameApp.CollisionFilterBit.dynamic,
	 *                         BaseGameApp.CollisionFilterBit.actor.
	 *                  format is '', 'category' or 'category:filter' where category and filter
	 *                  are a list of bits to set. -->
	 *   <string name='collisionFilter'>1:0 1 2</string>
	 *   
	 *   <!-- optional: use behavior tree with id instead of empty string -->
	 *   <string name='behaviorTree'>second</string>
	 * </behavior>
	 * 
	 * <!-- for adding multiple behaviors use unique identifiers -->
	 * <behavior type='ECBehaviorHitScan' id='second'>
	 *   ...
	 * </behavior>
	 * \endcode
	 * 
	 * Element class properties added by the behavior can also be set directly inside the tag
	 * be removing the property name prefix and starting with a "." (for example ".propertyName").
	 */
	class Factory implements BehaviorFactory
		func new()
		end
		
		func String factoryId()
			return "ECBehaviorHitScan"
		end
		
		func ECBehavior addBehavior(BehaviorElementClass eclass, String id, Dictionary parameters)
			var ECBehaviorHitScan behavior = ECBehaviorHitScan.new(eclass,\
				ECBehaviorCollider.getBehaviorIn(eclass),\
				eclass.sharedFactoryHelper.defaultComponent(eclass, parameters), id)
			
			if parameters.has("collisionFilter")
				behavior.getCollisionFilter().setCollisionFilter(eclass.getSharedCodecPropertyString().\
					decodeCollisionFilter(parameters.getAt("collisionFilter") cast String))
			end
			
			eclass.sharedFactoryHelper.setPropertiesFromParameters(eclass, parameters, "hitScan", id)
			return behavior
		end
	end
	
	/** \brief Behavior instance. */
	class Instance extends DefaultECBehaviorInstance
		/**
		 * \brief Behavior tree action "hitScan.start".
		 * \version 1.26
		 */
		class BTAStart implements BTAction
			var Instance pInstance
			
			func new(Instance instance)
				pInstance = instance
			end
			
			func BTResult runAction(BTContext context, Dictionary parameters)
				var Object value = parameters.getAt("type")
				if value.equals("circular")
					pInstance.startCircular(\
						(parameters.getAt("count") cast String).toInt(),\
						(parameters.getAt("angle") cast String).toFloat())
					
				elif value.equals("cone")
					pInstance.startCone(\
						(parameters.getAt("count") cast String).toInt(),\
						(parameters.getAt("angle") cast String).toFloat())
					
				elif value.equals("rectangular")
					pInstance.startRectangular(\
						(parameters.getAt("count") cast String).toInt(),\
						(parameters.getAt("angle.horizontal") cast String).toFloat(),\
						(parameters.getAt("angle.vertical") cast String).toFloat())
					
				elif value.equals("rectangular.uniform")
					pInstance.startRectangularUniform(\
						(parameters.getAt("count.columns") cast String).toInt(),\
						(parameters.getAt("count.rows") cast String).toInt(),\
						(parameters.getAt("angle.horizontal") cast String).toFloat(),\
						(parameters.getAt("angle.vertical") cast String).toFloat())
					
				else
					return BTResult.failure
				end
				
				return BTResult.success
			end
		end
		
		/**
		 * \brief Behavior tree action "hitScan.stop".
		 * \version 1.26
		 */
		class BTAStop implements BTAction
			var Instance pInstance
			
			func new(Instance instance)
				pInstance = instance
			end
			
			func BTResult runAction(BTContext context, Dictionary parameters)
				if parameters.has("clear")
					pInstance.clear()
					
				else
					pInstance.stop()
				end
				return BTResult.success
			end
		end
		
		/**
		 * \brief Behavior tree action/condition "hitScan.check".
		 * \version 1.26
		 */
		class BTACheck implements BTAction, BTCondition
			var Instance pInstance
			var String pPrefix
			
			func new(Instance instance, String prefix)
				pInstance = instance
				pPrefix = prefix
			end
			
			func BTResult runAction(BTContext context, Dictionary parameters)
				return check("", parameters) if BTResult.success else BTResult.failure
			end
			
			func bool evaluateCondition(BTContext context, Dictionary parameters)
				return check(pPrefix, parameters)
			end
			
			func bool check(String prefix, Dictionary parameters)
				var bool result = true
				var Object value
				
				value = parameters.getAt(prefix + "running", null)
				if value != null
					result &= pInstance.isRunning() == value.equals("true")
				end
				
				value = parameters.getAt(prefix + "hits", null)
				if value != null
					result &= pInstance.getHitCount() == (value cast String).toInt()
				end
				
				value = parameters.getAt(prefix + "hits.not", null)
				if value != null
					result &= pInstance.getHitCount() != (value cast String).toInt()
				end
				
				value = parameters.getAt(prefix + "hits.less", null)
				if value != null
					result &= pInstance.getHitCount() < (value cast String).toInt()
				end
				
				value = parameters.getAt(prefix + "hits.greater", null)
				if value != null
					result &= pInstance.getHitCount() > (value cast String).toInt()
				end
				
				value = parameters.getAt(prefix + "hits.percentage.less", null)
				if value != null
					result &= pInstance.getHitPercentage() < (value cast String).toInt()
				end
				
				value = parameters.getAt(prefix + "hits.percentage.greater", null)
				if value != null
					result &= pInstance.getHitPercentage() > (value cast String).toInt()
				end
				
				return result
			end
		end
		
		
		var ECBehaviorHitScan pECBehavior
		var ECBehaviorCollider.Instance pCollider
		var ECBehaviorComponent.Instance pComponent
		
		var CollisionFilter pCollisionFilter
		var float pRange
		var float pOffset
		var Vector pOrigin
		var Vector pDirection
		var Quaternion pOrientation
		var Matrix pViewMatrix
		var String pBone
		var Array pTests
		var float pOffsetByRange
		
		
		
		/** \brief Create element. */
		func new(ECBehaviorHitScan ecbehavior, BehaviorElement element) super(element)
			pECBehavior = ecbehavior
			pTests = Array.new()
			
			pCollider = ecbehavior.getCollider().instance(element)
		end
		
		/** \brief Dispose of composeable instance. */
		func void dispose()
			pTests = null
			pCollider = null
			pComponent = null
			super.dispose()
		end
		
		
		
		/** \brief Initialize element from stub. */
		func void init(StubElement stub)
			var BehaviorElement element = getElement()
			
			if pECBehavior.getComponent() != null
				pComponent = pECBehavior.getComponent().instance(element)
			end
			
			var CodecPropertyString codec = element.getClass().getCodecPropertyString()
			pCollisionFilter = pECBehavior.getCollisionFilter().getCollisionFilter()
			pRange = DEMath.max(pECBehavior.getRange().getValue(stub), 0.0)
			pOffset = DEMath.max(pECBehavior.getOffset().getValue(stub), 0.0)
			pOrigin = pECBehavior.getOrigin().getVector(stub, codec)
			pDirection = pECBehavior.getDirection().getVector(stub, codec).normalize()
			pOrientation = Quaternion.newFromEuler(pECBehavior.getOrientation().getVector(stub, codec))
			pBone = pECBehavior.getBone().getValue(stub)
			
			pViewMatrix = Matrix.newFromQuaternion(pOrientation)
			pOffsetByRange = pOffset / pRange
			
			if pECBehavior.getBehaviorTree() != null
				var String pnp = pECBehavior.getPrefix()
				var BTContext c = pECBehavior.getBehaviorTree().instance(element).getContext()
				c.setAction(pnp + "start", BTAStart.new(this))
				c.setAction(pnp + "stop", BTAStop.new(this))
				
				var String name = pnp + "check"
				var BTACheck btacheck = BTACheck.new(this, pnp)
				c.setAction(name, btacheck)
				c.setCondition(name, btacheck)
			end
		end
		
		
		
		/** \brief Behavior. */
		func ECBehaviorHitScan getECBehavior()
			return pECBehavior
		end
		
		/** \brief Collider behavior. */
		func ECBehaviorCollider.Instance getCollider()
			return pCollider
		end
		
		/** \brief Collider behavior or null if not used. */
		func ECBehaviorComponent.Instance getComponent()
			return pComponent
		end
		
		
		
		/** \brief Test range. */
		func float getRange()
			return pRange
		end
		
		/** \brief Set test range. */
		func void setRange(float range)
			range = DEMath.max(range, 0.0)
			if DEMath.fabs(range - pRange) < 0.001
				return
			end
			
			pRange = range
			pOffsetByRange = pOffset / pRange
			
			resetTestDirections()
		end
		
		/**
		 * \brief Test origin offset.
		 * \version 1.22
		 */
		func float getOffset()
			return pOffset
		end
		
		/** \brief Set test origin offset. */
		func void setOffset(float offset)
			offset = DEMath.max(offset, 0.0)
			if DEMath.fabs(offset - pOffset) < 0.001
				return
			end
			
			pOffset = offset
			pOffsetByRange = pOffset / pRange
			
			resetTestOrigins()
		end
		
		/** \brief Test origin. */
		func Vector getOrigin()
			return pOrigin
		end
		
		/** \brief Set test origin. */
		func void setOrigin(Vector origin)
			if origin.equals(pOrigin)
				return
			end
			
			pOrigin = origin
			
			resetTestOrigins()
		end
		
		/** \brief Normalized test direction. */
		func Vector getDirection()
			return pDirection
		end
		
		/** \brief Set normalized test direction. */
		func void setDirection(Vector direction)
			direction = direction.normalize()
			if direction.equals(pDirection)
				return
			end
			
			pDirection = direction
			
			resetTestDirections()
			resetTestOrigins()
		end
		
		/** \brief Test orientation. */
		func Quaternion getOrientation()
			return pOrientation
		end
		
		/** \brief Set test orientation. */
		func void setOrientation(Quaternion orientation)
			if orientation.equals(pOrientation)
				return
			end
			
			pOrientation = orientation
			pViewMatrix = Matrix.newFromQuaternion(orientation)
			
			resetTestDirections()
		end
		
		/**
		 * \brief View matrix.
		 * \brief 1.22
		 * 
		 * Same as \ref Matrix#newFromQuaternion(Quaternion) called with \ref #getOrientation()
		 * as parameter.
		 * 
		 * This matrix is useful if you want to manually set the test direction of individual
		 * tests after starting hit scanning. The Z-Axis of the matrix points into the direction
		 * of the zero vector similar to \ref #resetTestDirections().
		 */
		func Matrix getViewMatrix()
			return pViewMatrix
		end
		
		/** \brief Test bone. */
		func String getBone()
			return pBone
		end
		
		/** \brief Set test bone. */
		func void setBone(String bone)
			if bone.equals(pBone)
				return
			end
			
			pBone = bone
			
			pTests.forEach(block ColliderCollisionTest each
				each.setBone(bone)
			end)
		end
		
		/** \brief Collision filter. */
		func CollisionFilter getCollisionFilter()
			return pCollisionFilter
		end
		
		/** \brief Set collision filter. */
		func void setCollisionFilter(CollisionFilter collisionFilter)
			pCollisionFilter = collisionFilter
			
			pTests.forEach(block ColliderCollisionTest each
				each.setCollisionFilter(collisionFilter)
			end)
		end
		
		
		
		/**
		 * \brief Start a single collision test.
		 * 
		 * After call returns one collision tests is attached to the collider and ready to
		 * run using the last configuration used.
		 */
		func void start()
			start(1)
		end
		
		/**
		 * \brief Start collision tests.
		 * 
		 * After call returns the given number of collision tests are attached to the collider
		 * and ready to run using the last configuration used.
		 */
		func void start(int count)
			if count < 1
				throw EInvalidParam.new("count < 1")
			end
			
			var ColliderCollisionTest test
			
			if pTests.getCount() < count
				var Vector testDirection = pViewMatrix.transformNormal(pDirection * pRange)
				var Vector testOrigin = pOrigin + testDirection * pOffsetByRange
				var Collider collider = pCollider.getCollider()
				var Component component
				if pComponent != null
					component = pComponent.getComponent()
				end
				
				while pTests.getCount() < count
					test = ColliderCollisionTest.new(pCollisionFilter, component,\
						pBone, testOrigin, testDirection)
					collider.addCollisionTest(test)
					pTests.add(test)
				end
				
			elif pTests.getCount() > count
				var Collider collider = pCollider.getCollider()
				
				while pTests.getCount() > count
					test = pTests.getAt(pTests.getCount() - 1) cast ColliderCollisionTest
					collider.removeCollisionTest(test)
					pTests.remove(test)
				end
			end
			
			pTests.forEach(block ColliderCollisionTest each
				each.setEnabled(true)
			end)
			
			setRequiresThink(true)
		end
		
		/**
		 * \brief Start collision tests arranging them in a circular pattern.
		 * 
		 * After call returns the given number of collision tests are attached to the collider
		 * and ready to run using the last configuration used.
		 * 
		 * \param angle Opening angle in degrees (angle across diameter).
		 */
		func void startCircular(int count, float angle)
			start(count)
			if angle < 0.001
				return
			end
			
			angle *= 0.5
			var float radius = DEMath.sin(angle) * pRange
			var float distance = DEMath.cos(angle) * pRange
			var float factor = 360.0 / count
			var ColliderCollisionTest cct
			var Vector direction
			var int i
			
			for i = 0 to count
				angle = factor * i
				direction = pViewMatrix.transformNormal(Vector.new(\
					DEMath.sin(angle) * radius,\
					DEMath.cos(angle) * radius,\
					distance))
				cct = pTests.getAt(i) cast ColliderCollisionTest
				cct.setDirection(direction)
				cct.setOrigin(pOrigin + direction * pOffsetByRange)
			end
		end
		
		/**
		 * \brief Start collision tests arranging them randomly in a small cone cap.
		 * 
		 * After call returns the given number of collision tests are attached to the collider
		 * and ready to run using the last configuration used.
		 * 
		 * This method can be used for weapons with multiple projectiles like buck shots.
		 * 
		 * \param angle Opening angle in degrees (angle across diameter).
		 */
		func void startCone(int count, float angle)
			start(count)
			if angle < 0.001
				return
			end
			
			var float radius, rotation, distance, testAngle
			var Vector direction
			angle *= 0.5
			
			pTests.forEach(block ColliderCollisionTest each
				testAngle = DEMath.random(0.0, angle)
				radius = DEMath.sin(testAngle) * pRange
				distance = DEMath.cos(testAngle) * pRange
				rotation = DEMath.random(0.0, 360.0)
				direction = pViewMatrix.transformNormal(Vector.new(\
					DEMath.sin(rotation) * radius,\
					DEMath.cos(rotation) * radius,\
					distance))
				each.setDirection(direction)
				each.setOrigin(pOrigin + direction * pOffsetByRange)
			end)
		end
		
		/**
		 * \brief Start collision tests arranging them randomly across a small sphere segment.
		 * 
		 * After call returns the given number of collision tests are attached to the collider
		 * and ready to run using the last configuration used.
		 * 
		 * The segment has a rectangular shape. This method can be used for weapons with
		 * rectangular spreads like a duckbill modification.
		 * 
		 * \param angleX Horizontal opening angle in degrees (angle across width).
		 * \param angleY Vertical opening angle in degrees (angle across height).
		 */
		func void startRectangular(int count, float angleX, float angleY)
			start(count)
			if angleX < 0.001 or angleY < 0.001
				return
			end
			
			var float toX = angleX * 0.5
			var float fromX = -toX
			var float toY = angleY * 0.5
			var float fromY = -toY
			var float positionY, testAngle, radius
			var Vector direction
			
			pTests.forEach(block ColliderCollisionTest each
				testAngle = DEMath.random(fromY, toY)
				positionY = DEMath.sin(testAngle) * pRange
				radius = DEMath.cos(testAngle) * pRange
				
				testAngle = DEMath.random(fromX, toX)
				direction = pViewMatrix.transformNormal(Vector.new(\
					DEMath.sin(testAngle) * radius, \
					positionY, \
					DEMath.cos(testAngle) * radius))
				each.setDirection(direction)
				each.setOrigin(pOrigin + direction * pOffsetByRange)
			end)
		end
		
		/**
		 * \brief Start collision tests arranging them evenly across a small sphere segment.
		 * 
		 * After call returns the given number of collision tests are attached to the collider
		 * and ready to run using the last configuration used.
		 * 
		 * The segment has a rectangular shape. This method can be used for testing actor
		 * visibility by using the actor height and size.
		 * 
		 * \param countX Count of columns.
		 * \param countY Count of rows.
		 * \param angleX Horizontal opening angle in degrees (angle across width).
		 * \param angleY Vertical opening angle in degrees (angle across height).
		 */
		func void startRectangularUniform(int countX, int countY, float angleX, float angleY)
			if countX < 1
				throw EInvalidParam.new("countX < 1")
			end
			if countY < 1
				throw EInvalidParam.new("countY < 1")
			end
			start(countX * countY)
			if angleX < 0.001 or angleY < 0.001
				return
			end
			
			var ColliderCollisionTest cct
			var int x, y, index = 0
			var float testAngleX, testAngleY
			var float firstX = angleX * -0.5
			var float factorX = angleX / DEMath.max(countX - 1, 1)
			var float firstY = angleY * -0.5
			var float factorY = angleY / DEMath.max(countY - 1, 1)
			var Vector direction
			
			for y = 0 to countY
				testAngleY = firstY + factorY * y
				
				for x = 0 to countX
					testAngleX = firstX + factorX * x
					direction = pViewMatrix.transformNormal(\
						Matrix.newRotation(testAngleY, testAngleX, 0).getViewVector())
					cct = pTests.getAt(index++) cast ColliderCollisionTest
					cct.setDirection(direction * pRange)
					cct.setOrigin(pOrigin + direction * pOffset)
				end
			end
		end
		
		/** \brief Stop hit scans. */
		func void stop()
			setRequiresThink(false)
			
			pTests.forEach(block ColliderCollisionTest each
				each.setEnabled(false)
			end)
		end
		
		/** \brief Stop hit scans clearing results as if nothing is hit. */
		func void clear()
			pTests.forEach(block ColliderCollisionTest each
				each.reset()
				each.setEnabled(false)
			end)
		end
		
		/** \brief Set direction of all tests to viewMatrix * direction * range. */
		func void resetTestDirections()
			var Vector direction = pViewMatrix.transformNormal(pDirection * pRange)
			pTests.forEach(block ColliderCollisionTest each
				each.setDirection(direction)
			end)
		end
		
		/**
		 * \brief Set origin of all tests to getOrigin().
		 * \version 1.22
		 */
		func void resetTestOrigins()
			pTests.forEach(block ColliderCollisionTest each
				each.setOrigin(pOrigin)
			end)
		end
		
		/**
		 * \brief Set direction of test to aim at target.
		 * \version 1.22
		 * 
		 * \param target Target position to test.
		 */
		func void aimAtTarget(int test, DVector target)
			var ColliderCollisionTest cct = pTests.getAt(test) cast ColliderCollisionTest
			var Vector direction = (pCollider.getCollider().getInverseMatrix() * target).toVector()
			cct.setDirection(direction)
			cct.setOrigin(pOrigin + direction.normalize() * pOffset)
		end
		
		/**
		 * \brief Hit scan is running.
		 * \version 1.22
		 */
		func bool isRunning()
			return pTests.getCount() > 0 and (pTests.getAt(0) cast ColliderCollisionTest).getEnabled()
		end
		
		
		
		/** \brief Count of collision tests. */
		func int getTestCount()
			return pTests.getCount()
		end
		
		/** \brief Collision test at index. */
		func ColliderCollisionTest getTestAt(int index)
			return pTests.getAt(index) cast ColliderCollisionTest
		end
		
		/**
		 * \brief Visit collision tests using block.
		 * 
		 * Block receives ColliderCollisionTest as argument.
		 */
		func void forEachTest(Block ablock)
			pTests.forEach(ablock)
		end
		
		/**
		 * \brief Visit collision tests with found collisions.
		 * 
		 * Block receives ColliderCollisionTest as argument.
		 */
		func void forEachHit(Block ablock)
			pTests.forEach(block ColliderCollisionTest each
				if each.getHasCollision()
					ablock.run(each)
				end
			end)
		end
		
		/**
		 * \brief Count of collsion tests with a hit found.
		 * \version 1.26
		 */
		func int getHitCount()
			return pTests.count(block ColliderCollisionTest each
				return each.getHasCollision()
			end)
		end
		
		/**
		 * \brief Percentage of collsion tests with a hit found.
		 * \version 1.26
		 */
		func float getHitPercentage()
			var int count = pTests.getCount()
			if count == 0
				return 0
			end
			
			return pTests.count(block ColliderCollisionTest each
				return each.getHasCollision()
			end) cast float / count
		end
		
		
		
		/**
		 * \brief Post thinking after physics processing is finished.
		 * 
		 * Stops tests. Results can be examined by other behaviors.
		 */
		func void postThink(float elapsed)
			stop()
		end
	end
	
	
	
	var ECBehaviorCollider pCollider
	var ECBehaviorComponent pComponent
	var ECComposeCollisionFilter pCollisionFilter
	var ECPFloat pRange
	var ECPFloat pOffset
	var ECPVector pOrigin
	var ECPVector pDirection
	var ECPVector pOrientation
	var ECPString pBone
	var ECBehaviorBehaviorTree pBehaviorTree
	var String pPrefix
	
	
	
	/**
	 * \brief Create behavior element class.
	 * 
	 * These values are optional and can be null: \em component.
	 */
	func new(BehaviorElementClass eclass, ECBehaviorCollider collider, \
	ECBehaviorComponent component) this(eclass, collider, component, "")
	end
	
	func new(BehaviorElementClass eclass, ECBehaviorCollider collider, \
	ECBehaviorComponent component, String id) this(eclass, collider, component, \
	id, id.empty() if "hitScan." else "hitScan(" + id + ").")
	end
	
	func new(BehaviorElementClass eclass, ECBehaviorCollider collider, \
	ECBehaviorComponent component, String id, String prefix) super(eclass, id)
		if collider == null
			throw ENullPointer.new("collider")
		end
		
		pPrefix = prefix
		pCollider = collider
		pComponent = component
		
		var LayerMask cfCategory = LayerMask.newWith(BaseGameApp.CollisionFilterBit.dynamic)
		
		var LayerMask cfFilter = LayerMask.newWith(\
			BaseGameApp.CollisionFilterBit.geometry,\
			BaseGameApp.CollisionFilterBit.dynamic,\
			BaseGameApp.CollisionFilterBit.actor)
		
		pCollisionFilter = ECComposeCollisionFilter.new(CollisionFilter.new(cfCategory, cfFilter))
		
		eclass.addProperty(pRange = ECPFloat.new(prefix + "range", 20, 0))
		eclass.addProperty(pOffset = ECPFloat.new(prefix + "offset", 0, 0))
		eclass.addProperty(pOrigin = ECPVector.new(prefix + "origin", Vector.new()))
		eclass.addProperty(pDirection = ECPVector.new(prefix + "direction", Vector.new(0, 0, 1)))
		eclass.addProperty(pOrientation = ECPVector.new(prefix + "orientation", Vector.new()))
		eclass.addProperty(pBone = ECPString.new(prefix + "bone", ""))
		
		eclass.addBehavior(this)
	end
	
	/** \brief Dispose of behavior. */
	func void dispose()
		pCollider = null
		pComponent = null
		pBehaviorTree = null
		super.dispose()
	end
	
	
	
	/**
	 * \brief Prefix.
	 * \version 1.26
	 */
	func String getPrefix()
		return pPrefix
	end
	
	/** \brief Collider behavior or null. */
	func ECBehaviorCollider getCollider()
		return pCollider
	end
	
	/** \brief Component behavior or null. */
	func ECBehaviorComponent getComponent()
		return pComponent
	end
	
	
	
	/** \brief Collision filter for AI collider. */
	func ECComposeCollisionFilter getCollisionFilter()
		return pCollisionFilter
	end
	
	/** \brief Test range. */
	func ECPFloat getRange()
		return pRange
	end
	
	/**
	 * \brief Test origin offset.
	 * \version 1.22
	 */
	func ECPFloat getOffset()
		return pOffset
	end
	
	/** \brief Test origin. */
	func ECPVector getOrigin()
		return pOrigin
	end
	
	/** \brief Normalized test direction. */
	func ECPVector getDirection()
		return pDirection
	end
	
	/** \brief Test orientation. */
	func ECPVector getOrientation()
		return pOrientation
	end
	
	/** \brief Test bone. */
	func ECPString getBone()
		return pBone
	end
	
	/**
	 * \brief Behavior tree or null.
	 * \version 1.26
	 */
	func ECBehaviorBehaviorTree getBehaviorTree()
		return pBehaviorTree
	end
	
	/**
	 * \brief Set behavior tree or null.
	 * \version 1.26
	 */
	func void setBehaviorTree(ECBehaviorBehaviorTree behaviorTree)
		pBehaviorTree = behaviorTree
	end
	
	
	
	/** \brief Get instance in element from owner element class. */
	func Instance instance(BehaviorElement element)
		return element.getInstanceAt(getInstanceIndex()) cast Instance
	end
	
	
	
	/**
	 * \brief Get behavior in element class or \em null if absent.
	 * 
	 * Use this method to check if a particular BehaviorElementClass contains a behavior
	 * of type ECBehaviorCollider.
	 */
	static func ECBehaviorHitScan getBehaviorIn(BehaviorElementClass eclass)
		return eclass.findBehavior(block ECBehaviorHitScan each
			return true
		end) cast ECBehaviorHitScan
	end
	
	/**
	 * \brief Get behavior with id in element class or \em null if absent.
	 * 
	 * Use this method to check if a particular BehaviorElementClass contains a behavior
	 * of type ECBehaviorHitScan with specific identifier.
	 */
	static func ECBehaviorHitScan getBehaviorIn(BehaviorElementClass eclass, String id)
		return eclass.findBehavior(block ECBehaviorHitScan each
			return each.getID().equals(id)
		end) cast ECBehaviorHitScan
	end
	
	/**
	 * \brief Get list of all behaviors in element.
	 * 
	 * Returns list contains ECBehaviorHitScan behaviors in the order they have
	 * been created in the element.
	 */
	static func Array getAllBehaviorsIn(BehaviorElementClass eclass)
		return eclass.collectBehaviors(block ECBehaviorHitScan each
			return true
		end)
	end
	
	
	
	/**
	 * \brief Get instance in element or \em null if absent.
	 * 
	 * Use this method to check if a particular BehaviorElement contains a behavior instance
	 * of type ECBehaviorHitScan.Instance . If more than one instance is present returns
	 * the first instance.
	 */
	static func Instance getInstanceIn(BehaviorElement element)
		return element.findInstance(block Instance each
			return true
		end) cast Instance
	end
	
	/**
	 * \brief Get instance with id in element or \em null if absent.
	 * 
	 * Use this method to check if a particular BehaviorElement contains a behavior instance
	 * of type ECBehaviorHitScan.Instance with specific identifier.
	 */
	static func Instance getInstanceIn(BehaviorElement element, String id)
		return element.findInstance(block Instance each
			return each.getECBehavior().getID().equals(id)
		end) cast Instance
	end
	
	/**
	 * \brief Get list of all instances in element.
	 * 
	 * Returns list contains ECBehaviorHitScan.Instance instances in the order they have
	 * been created in the element.
	 */
	static func Array getAllInstancesIn(BehaviorElement element)
		return element.collectInstances(block Instance each
			return true
		end)
	end
	
	
	
	/** \brief Create Behavior instance. */
	func ECBehaviorInstance createInstance(BehaviorElement element)
		return Instance.new(this, element)
	end
end
