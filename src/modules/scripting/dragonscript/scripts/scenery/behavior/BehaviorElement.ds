/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */


namespace Dragengine.Scenery

pin Dragengine.Gui
pin Dragengine.LoadSave
pin Dragengine.Preloading
pin Dragengine.Utils


/**
 * \brief Behavior element.
 * 
 * Behavior elements are jack of all trade elements. They allow building complex element
 * behaviors by using behavior building blocks. Theye behavior building blocks are
 * provided by ECBehavior classes attached to the element class.
 * 
 * Behavior elements are suited for prototyping or rapid development since they require
 * little written code. Building element classes the conventional way though is usually
 * preferred.
 * 
 * To create an element based on BehaviorElement create a new subclass of BehaviorElementClass
 * and add all the desired ECBehavior instance. There is no need to subclas BehaviorElement.
 * When creating a new instance the BehaviorElement is filled with ECBehavior created
 * ECBehaviorInstance instances. These provide the actual behavior to the element.
 */
class BehaviorElement extends Element
	var Array pInstances
	var Array pThinkingInstances
	var bool pRequiresEnterFrame
	var bool pRequiresThink
	var bool pRequiresAttachToParent
	var bool pIsChangingGameWorld
	var bool pIsThinker
	
	
	
	/** \brief Create element. */
	func new(BehaviorElementClass eclass) super(eclass)
		pInstances = Array.new()
		pRequiresEnterFrame = false
		pRequiresThink = false
		pRequiresAttachToParent = true
		
		eclass.forEachBehaviorDirect(block ECBehavior each
			pInstances.add(each.createInstance(this))
		end)
	end
	
	/** \brief Dispose of element. */
	func void dispose()
		if pInstances != null
			pInstances.forEachReverse(block ECBehaviorInstance each
				each.dispose()
			end)
			pInstances = null
		end
		
		pThinkingInstances = null
		
		super.dispose()
	end
	
	
	
	/** \brief Initialize element from stub. */
	func void init(StubElement stub)
		super.init(stub)
		
		pInstances.forEach(block ECBehaviorInstance each
			each.init(stub)
		end)
	end
	
	
	
	/** \brief Number of behavior instances. */
	func int getInstanceCount()
		return pInstances.getCount()
	end
	
	/** \brief Behavior instance at index. */
	func ECBehaviorInstance getInstanceAt(int index)
		return pInstances.getAt(index) cast ECBehaviorInstance
	end
	
	/**
	 * \brief Visit behavior instances with block.
	 * 
	 * Block is required to have one parameter of type ECBehaviorInstance or subclass
	 * thereof. Block is called only for instances castable to block parameter type.
	 */
	func void forEachInstance(Block ablock)
		pInstances.forEachCastable(ablock)
	end
	
	/**
	 * \brief Visit behavior instances with block in reverse order.
	 * 
	 * Block is required to have one parameter ECBehaviorInstance or subclass thereof.
	 * Block is called only for instances castable to block parameter type.
	 */
	func void forEachInstanceReverse(Block ablock)
		pInstances.forEachReverseCastable(ablock)
	end
	
	/**
	 * \brief Find behavior instance with block.
	 * 
	 * Block is required to have one parameter ECBehaviorInstance or subclass thereof and
	 * returning true if the right instance is found otherwise false. Block is called
	 * only for instances castable to block parameter type.
	 */
	func ECBehaviorInstance findInstance(Block ablock)
		return pInstances.findCastable(ablock) cast ECBehaviorInstance
	end
	
	/**
	 * \brief Collect behavior instance with block into Array.
	 * \version 1.5
	 * 
	 * Block is required to have one parameter ECBehaviorInstance or subclass thereof and
	 * returning true for instances to collect. Block is called only for instances castable
	 * to block parameter type.
	 */
	func Array collectInstances(Block ablock)
		return pInstances.collectCastable(ablock)
	end
	
	
	
	/** \brief Sub-class requires enterFrame() to be called. */
	func bool getRequiresEnterFrame()
		return pRequiresEnterFrame
	end
	
	/** \brief Set if sub-class requires enterFrame() to be called. */
	protected func void setRequiresEnterFrame(bool requiresEnterFrame)
		pRequiresEnterFrame = requiresEnterFrame
	end
	
	/** \brief Sub-class requires think() to be called. */
	func bool getRequiresThink()
		return pRequiresThink
	end
	
	/** \brief Set if sub-class requires think() to be called. */
	protected func void setRequiresThink(bool requiresThink)
		pRequiresThink = requiresThink
	end
	
	/** \brief Attach to parent has not been processed yet. */
	func bool getRequiresAttachToParent()
		return pRequiresAttachToParent
	end
	
	/**
	 * \brief Set if attach to parent has not been processed yet.
	 * \version 1.15
	 * 
	 * Use this method if you need to reattach the element to the parent defined in the
	 * StubElement the next time it enters a game world.
	 */
	func void setRequiresAttachToParent(bool requiresAttachToParent)
		pRequiresAttachToParent = requiresAttachToParent
	end
	
	
	
	/**
	 * \brief Requires thinking changed.
	 * 
	 * Called by ECBehaviorInstance if their requirement for thinking changed. This means
	 * the requiresThink() implementation returns a different value than the last time
	 * it has been checked.
	 * 
	 * This call will cause the behavior element to check again all behavior instances for
	 * their thinking requirement and will addThinker()/removeThinker() accordingly.
	 * 
	 * Using this method helps to reduce the script processing load by not making the
	 * element think() method called if no behavior requires it.
	 */
	func void requiresThinkChanged()
		updateThinking()
	end
	
	
	
	/**
	 * \brief Behavior element is in progress of beeing added to or removed from a GameWorld.
	 * \version 1.5
	 * 
	 * Returns true while inside addToGameWorld() or removeFromGameWorld(). This knowledge
	 * is required by certain behaviors to produce correct result.
	 * 
	 * For example ECBehaviorTwoStateAnimated requires  In this situation the behavior
	 * element layout can look like this:
	 * - ECBehaviorTriggered
	 * - ECBehaviorTwoStateAnimated
	 * 
	 * The ECBehaviorTriggered has been added by ECBehaviorTwoStateAnimated.
	 * 
	 * The rule of ECBehaviorTwoStateAnimated is that if the trigger changes while the element
	 * is in a GameWorld then activate() or deactivate() is called to start the transition
	 * process. If the element is not in a GameWorld then setActivated() or setDeactivated()
	 * has to be called instead. This is required to ensure the element starts out in the
	 * activated state when added to a game world in which the trigger expression happens to
	 * eavluate to true.
	 * 
	 * When the element is added to the game world the following call-chain happens:
	 * - BehaviorElement.addToGameWorld() // GameWorld will be set now
	 * - ECBehaviorTriggered.addToGameWorld()
	 * - ECBehaviorTwoStateAnimated.addToGameWorld()
	 * 
	 * ECBehaviorTriggered.addToGameWorld() evaluates the trigger expression using the GameWorld
	 * the element is beeing added to. Since the trigger expression evaluates to true all
	 * listeners are notified about the ECBehaviorTriggered state having changed to true.
	 * This causes ECBehaviorTwoStateAnimated.SwitchStateListener to be fired. At this point
	 * in time the BehaviorElement already returns the GameWorld instance instead of null and
	 * the ECBehaviorTwoStateAnimated thinks it needs to do an activate() instead of a
	 * setActivated().
	 * 
	 * By using isChangingGameWorld() the ECBehaviorTwoStateAnimated can figure out that
	 * it should not call activate() but setActivated().
	 */
	func bool isChangingGameWorld()
		return pIsChangingGameWorld
	end
	
	/**
	 * \brief Element is in GameWorld and not in progress of beeing removed from it.
	 * \version 1.5
	 * 
	 * Convenience method returning true if getGameWorld() returns not null and
	 * isChangingGameWorld() returns false.
	 */
	func bool isReallyInGameWorld()
		return not pIsChangingGameWorld and getGameWorld() != null
	end
	
	
	
	/** \brief Position changed. */
	func void onSetPosition()
		pInstances.forEach(block ECBehaviorInstance each
			each.geometryChanged()
		end)
	end
	
	/** \brief Orientation changed. */
	func void onSetOrientation()
		pInstances.forEach(block ECBehaviorInstance each
			each.geometryChanged()
		end)
	end
	
	/** \brief Scaling changed. */
	func void onSetScaling()
		pInstances.forEach(block ECBehaviorInstance each
			each.geometryChanged()
		end)
	end
	
	/** \brief Position and orientation changed. */
	func void onSetGeometry()
		pInstances.forEach(block ECBehaviorInstance each
			each.geometryChanged()
		end)
	end
	
	/** \brief Visible state changed. */
	func void onSetVisible()
		pInstances.forEach(block ECBehaviorInstance each
			each.stateChanged()
		end)
	end
	
	/** \brief Touchable state changed. */
	func void onSetTouchable()
		pInstances.forEach(block ECBehaviorInstance each
			each.stateChanged()
		end)
	end
	
	
	
	/** \brief Add element to game world. */
	func void addToGameWorld()
		super.addToGameWorld()
		
		try
			pIsChangingGameWorld = true
			
			pInstances.forEach(block ECBehaviorInstance each
				each.addToGameWorld()
			end)
			
			if pRequiresEnterFrame \
			or getStub().getAttachTo() != null \
			or pInstances.find(block ECBehaviorInstance each
				return each.requiresEnterFrame()
			end) != null
				getGameWorld().addEnterFrameOnce(this)
			end
			
			updateThinking()
			
			pIsChangingGameWorld = false
			
		catch Exception e
			pIsChangingGameWorld = false
			throw
		end
	end
	
	/** \brief Remove element from game world if set. */
	func void removeFromGameWorld()
		try
			pIsChangingGameWorld = true
			
			pInstances.forEachReverse(block ECBehaviorInstance each
				each.removeFromGameWorld()
			end)
			
			var GameWorld gameWorld = getGameWorld()
			if pIsThinker
				gameWorld.removeThinker(this)
				pIsThinker = false
			end
			gameWorld.removeEnterFrameOnce(this)
			
			pIsChangingGameWorld = false
			
		catch Exception e
			pIsChangingGameWorld = false
			throw
		end
		
		super.removeFromGameWorld()
	end
	
	/** \brief Frame update started. */
	func void enterFrame()
		super.enterFrame()
		
		pInstances.forEach(block ECBehaviorInstance each
			each.enterFrame()
		end)
		
		var StubElement stub = getStub()
		var UniqueID attachTo = stub.getAttachTo()
		if attachTo != null and pRequiresAttachToParent
			// we do not call stub.setAttachTo(null) because behaviors are responsible to
			// clear the stub attach-to if they handle it themselves
			
			// it is possible an element is moved between game worlds. in this case enterFrame()
			// is called each time the element enters a game world. if we have attached the
			// element already trying to attach against throws an exception
			pRequiresAttachToParent = false
			
			var Element element = getGameWorld().getElementWithID(attachTo)
			if element == null
				throw EElementNotFound.new(attachTo, "Attach " \
					+ stub.getID() + " at " + getPosition() + " to")
			end
			
			attachToParent(element)
		end
	end
	
	/**
	 * \brief Attach element to object set by the mapper in the IGDE World Editor.
	 * 
	 * Attach-To parameter in the StubElement assigned to this element is set to null before
	 * this method is called. Calls ECBehaviorInstance.attachToParent() on each behavior
	 * to do the actual attaching.
	 */
	func void attachToParent(Element parent)
		pInstances.forEach(block ECBehaviorInstance each
			each.attachToParent(parent)
		end)
	end
	
	/** \brief Think about what the element is going to do in this frame. */
	func void think(float elapsed)
		if pThinkingInstances == null
			return
		end
		
		pThinkingInstances.forEach(block ECBehaviorInstance each
			each.think(elapsed)
		end)
	end
	
	/** \brief Post thinking after physics processing is finished. */
	func void postThink(float elapsed)
		if pThinkingInstances == null
			return
		end
		
		pThinkingInstances.forEach(block ECBehaviorInstance each
			each.postThink(elapsed)
		end)
	end
	
	
	
	/** \brief Update thinking. */
	protected func void updateThinking()
		var GameWorld gameWorld = getGameWorld()
		if gameWorld == null
			pThinkingInstances = null
			return
		end
		
		pThinkingInstances = pInstances.collect(block ECBehaviorInstance each
			return each.requiresThink()
		end)
		
		if pRequiresThink or pThinkingInstances.getCount() > 0
			if not pIsThinker
				gameWorld.addThinker(this)
				pIsThinker = true
			end
			
		else
			pThinkingInstances = null
			if pIsThinker
				gameWorld.removeThinker(this)
				pIsThinker = false
			end
		end
	end
	
	/** \brief Stop thinking even though it would be required by behaviors. */
	protected func void stopThinking()
		pThinkingInstances = null
		
		if pIsThinker
			var GameWorld gameWorld = getGameWorld()
			if gameWorld != null
				gameWorld.removeThinker(this)
			end
			pIsThinker = false
		end
	end
	
	
	
	/** \brief Read element from file. */
	func void readFromFile(PersistencyEnvironment env, FileReader reader)
		select reader.readByte() // version
		case 0
			pInstances.forEach(block ECBehaviorInstance each
				each.readFromFile(env, reader)
			end)
			
		case 1
			var BehaviorElementClass eclass = getClass() cast BehaviorElementClass
			
			var Dictionary map = Dictionary.new()
			pInstances.forEach(block int index, ECBehaviorInstance each
				map.setAt((eclass.getBehaviorAt(index) cast BehaviorCompatiblePersistency).getBehaviorID(), each)
			end)
			
			var int i, dataLength, count = reader.readShort()
			var ECBehaviorInstance instance
			var String identifier
			//var int nextPosition
			
			for i = 0 to count
				identifier = reader.readString8()
				instance = map.getAt(identifier, null) cast ECBehaviorInstance
				dataLength = reader.readInt()
				
				if instance != null
					//nextPosition = reader.getPosition() + dataLength
					instance.readFromFile(env, reader)
					/*
					if reader.getPosition() != nextPosition
						throw EInvalidAction.new("next file position mismatch after reading behavior " + identifier)
					end
					*/
					
				elif pInstances.find(block int index, ECBehaviorInstance each
					var BehaviorCompatiblePersistency bcp = eclass.getBehaviorAt(index) cast BehaviorCompatiblePersistency
					if bcp.supportsBehaviorID(identifier)
						//nextPosition = reader.getPosition() + dataLength
						bcp.loadSupportedData(identifier, env, reader, each)
						/*
						if reader.getPosition() != nextPosition
							throw EInvalidAction.new("next file position mismatch after compatibility reading behavior " + identifier)
						end
						*/
						return true
						
					else
						return false
					end
					
				end) == null
					reader.movePosition(dataLength)
				end
			end
			
		else
			throw EInvalidParam.new("unsupported version")
		end
	end
	
	/** \brief Write element to file. */
	func void writeToFile(PersistencyEnvironment env, FileWriter writer)
		var BehaviorElementClass eclass = getClass() cast BehaviorElementClass
		var MemoryFile behaviorData = MemoryFile.new("behaviorData")
		
		writer.writeByte(1) // version
		writer.writeShort(pInstances.getCount())
		
		pInstances.forEach(block int index, ECBehaviorInstance each
			each.writeToFile(env, behaviorData.getWriter(false))
			writer.writeString8((eclass.getBehaviorAt(index) cast BehaviorCompatiblePersistency).getBehaviorID())
			writer.writeInt(behaviorData.getSize())
			writer.writeData(behaviorData.getReader())
		end)
	end
	
	
	
	/** \brief Visit element. */
	func void visit(ElementVisitor visitor)
		visitor.visitBehaviorElement(this)
	end
end
