/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */


namespace Dragengine.Scenery

pin Dragengine.Gui
pin Dragengine.Preloading
pin Dragengine.LoadSave
pin Dragengine.Utils
pin Dragengine.Scenery


/**
 * \brief Behavior for element allowing to create and add child elements.
 * 
 * This behavior is useful to create element classes which automatically create and attach
 * child elements without using the world editor.
 * 
 * This behavior defines an element class property "composed.children". This is a list type
 * property containing one map entry for each child element to create and attach. Children are
 * created in the order they are defined. The map entry requires at least a string value with
 * name "class" indicating the element class to use. Optionally a list value with name
 * "properties" can be used containing stub element properties to use for creating the element.
 * Values in this list are string values where the name is the property key and the string
 * value is the property value.
 * 
 * Example "composed.children" element class property in XML attaching a backpack element
 * using ECBehaviorAttachable which is attached to an attach slot defined in the owner class:
 * \code{.xml}
 * <list name='composed.children'>
 *    <map>
 *        <string key='class'>Backpack</string>
 *        <list key='properties'>
 *            <string key='attachToParent.attachSlot'>backpack</string>
 *        </map>
 *    </map>
 * </list>
 * \endcode
 * 
 * Depending on the needs ECBehaviorAttachments should be added to this element class.
 * 
 * Element classes to compose with this element class should contain behaviors for attaching.
 * Add ECBehaviorAttachToParent and optionally ECBehaviorAttachable if child element has to
 * be attached to ECBehaviorAttachSlot. To configure the behaviors in the child elements use
 * "properties" in "composed.children" entries.
 * 
 * \see https://developer.dragondreams.ch/wiki/doku.php/dragengine:modules:dragonscript:behavior_composed
 */
class ECBehaviorComposed extends DefaultECBehavior
	/** \brief Child element definition. */
	class ChildElement
		var String pClassname
		var ElementClass pElementClass
		var StubWithProperties pProperties
		
		/** \brief Create child element definition. */
		func new(String classname)
			if classname == null
				throw EInvalidParam.new()
			end
			pClassname = classname
			pProperties = StubWithProperties.new()
		end
		
		/**
		 * \brief Create copy of child element definition.
		 * \version 1.17
		 */
		func new(ChildElement child)
			pClassname = child.pClassname
			pProperties = StubWithProperties.new(child.pProperties)
		end
		
		/** \brief Class name. */
		func String getClassname()
			return pClassname
		end
		
		/** \brief Element class or null if not resolved or failed to resolve. */
		func ElementClass getElementClass()
			return pElementClass
		end
		
		/** \brief Set element class or null if not resolved or failed to resolve. */
		func void setElementClass(ElementClass elementClass)
			pElementClass = elementClass
		end
		
		/** \brief Properties. */
		func StubWithProperties getProperties()
			return pProperties
		end
	end
	
	/**
	 * \brief Children element class property.
	 * 
	 * Set first the list of allowed element classes.
	 */
	class ECPChildren extends ElementClassProperty
		var ElementClassList pElementClassList
		var Array pAllowedElementClasses //<! Array of ElementClass
		var Array pChildren //<! Array of ChildElement
		var PreloadCounter pCounter
		var bool pHasPreloaded
		
		
		/** \brief Create property. */
		func new(String name, ElementClassList eclassList) super(name)
			if eclassList == null
				throw EInvalidParam.new()
			end
			pElementClassList = eclassList
			pAllowedElementClasses = Array.new()
			pChildren = Array.new()
		end
		
		/** \brief Dispose of element class property to break reference loops. */
		func void dispose()
			pElementClassList = null
			pAllowedElementClasses = null
			pChildren = null
		end
		
		
		/** \brief Element class manager to look up element class in. */
		func ElementClassList getElementClassList()
			return pElementClassList
		end
		
		/** \brief Allowed element classes as Array of ElementClass. */
		func Array getAllowedElementClasses()
			return pAllowedElementClasses
		end
		
		/** \brief Children as Array of ChildElement. */
		func Array getChildren()
			return pChildren
		end
		
		/** \brief Property has been preloaded. */
		func bool getHasPreloaded()
			return pHasPreloaded
		end
		
		
		/** \brief Set value of property from XML decoded value. */
		func void setValue(Object value)
			pChildren.removeAll()
			
			(value cast Array).forEach(block Dictionary entries
				var ChildElement child = ChildElement.new(entries.getAt("class") cast String)
				
				var Dictionary valueProperties = entries.getAt("properties", null) cast Dictionary
				if valueProperties != null
					valueProperties.forEach(block String key, String value
						child.getProperties().setPropertyValueFor(key, value)
					end)
				end
				
				pChildren.add(child)
			end)
		end
		
		/**
		 * \brief Copy value from another element class property of the same type.
		 * \version 1.17
		 */
		func void copyValue(ElementClass elementClass, ElementClassProperty property)
			pChildren = (property cast ECPChildren).pChildren.map(block ChildElement each
				return ChildElement.new(each)
			end)
		end
		
		
		/** \brief Preload resources if supported. */
		func void preloadResources(ElementClass elementClass, PreloadCounter counter)
			if pHasPreloaded
				return
			end
			
			pHasPreloaded = true
			pCounter = counter
			
			pChildren.forEach(block ChildElement each
				each.setElementClass(pElementClassList.getNamed(each.getClassname()))
			end)
		end
		
		/**
		* \brief Log preloading problems.
		* \returns True if problems are present.
		*/
		func bool logPreloadProblems(ElementClass elementClass, Console console)
			return pChildren.inject(false, block bool hasProblems, ChildElement each
				if each.getElementClass() == null
					console.addMessage("Property {}.{}: Unknown element class {}".format(\
						Array.newWith(elementClass.getClassname(), getName(), each.getClassname())))
					return true
				end
				
				if pAllowedElementClasses.getCount() > 0 \
				and not pAllowedElementClasses.has(each.getElementClass())
					console.addMessage("Property {}.{}: Element class {} not allowed".format(\
						Array.newWith(elementClass.getClassname(), getName(), each.getClassname())))
					return true
				end
				
				return hasProblems
			end) cast bool
		end
	end
	
	/**
	 * \brief Behavior factory.
	 * \version 1.25
	 * 
	 * Example XML element class:
	 * \code{.xml}
	 * <behavior type='ECBehaviorComposed'/>
	 * 
	 * <!-- for adding multiple behaviors use unique identifiers -->
	 * <behavior type='ECBehaviorComposed' id='second'/>
	 * \endcode
	 * 
	 * Element class properties added by the behavior can also be set directly inside the tag
	 * be removing the property name prefix and starting with a "." (for example ".propertyName").
	 */
	class Factory implements BehaviorFactory
		func new()
		end
		
		func String factoryId()
			return "ECBehaviorComposed"
		end
		
		func ECBehavior addBehavior(BehaviorElementClass eclass, String id, Dictionary parameters)
			var ECBehaviorComposed behavior = ECBehaviorComposed.new(eclass, id)
			BehaviorElementClass.sharedFactoryHelper.setPropertiesFromParameters(\
				eclass, parameters, "composed", id)
			return behavior
		end
	end
	
	
	
	/** \brief Behavior instance. */
	class Instance extends DefaultECBehaviorInstance
		var ECBehaviorComposed pECBehavior
		var bool pChildrenCreated
		
		
		/** \brief Create element. */
		func new(ECBehaviorComposed ecbehavior, BehaviorElement element) super(element)
			pECBehavior = ecbehavior
		end
		
		
		/** \brief Behavior. */
		func ECBehaviorComposed getECBehavior()
			return pECBehavior
		end
		
		
		/** \brief Children have been created. */
		func bool getChildrenCreated()
			return pChildrenCreated
		end
		
		
		/** \brief Add element to game world. */
		func void addToGameWorld()
			if pChildrenCreated
				return
			end
			
			pChildrenCreated = true
			createAndAddChildren()
		end
		
		/** \brief Create and add children. */
		protected func void createAndAddChildren()
			var MutableID idGenerator = pECBehavior.getIDGenerator()
			var BehaviorElement element = getElement()
			var GameWorld gameWorld = element.getGameWorld()
			var UniqueID id = UniqueID.new()
			var Element childElement
			var StubElement stub
			
			pECBehavior.getChildren().getChildren().forEach(block ChildElement each
				if idGenerator != null
					id = idGenerator.nextID()
				end
				stub = StubElement.new(each.getElementClass(), id, each.getProperties())
				childElement = stub.createElement()
				
				try
					gameWorld.addElement(childElement)
					if childElement castable BehaviorElement
						(childElement cast BehaviorElement).attachToParent(element)
					end
					
				catch Exception e
					childElement.safeDispose()
					throw
				end
			end)
		end
		
		
		
		/** \brief Read element from file. */
		func void readFromFile(PersistencyEnvironment env, FileReader reader)
			select reader.readByte() // version
			case 0
				var PersistencyFlags flags = PersistencyFlags.new(1, reader)
				pChildrenCreated = flags.getAt(0)
				
			else
				throw EInvalidParam.new("unsupported version")
			end
		end
		
		/** Writes the element to a file. */
		func void writeToFile(PersistencyEnvironment env, FileWriter writer)
			writer.writeByte(0) // version
			
			var PersistencyFlags flags = PersistencyFlags.new(1)
			flags.setAt(0, pChildrenCreated)
			flags.writeToFile(writer)
		end
	end
	
	
	
	var ECPChildren pChildren
	var MutableID pIDGenerator
	
	
	
	/** \brief Create behavior element class. */
	func new(BehaviorElementClass eclass) this(eclass, \
	BaseGameApp.getApp().getElementClassList(), BaseGameApp.getApp().getIDGenerator())
	end
	
	func new(BehaviorElementClass eclass, String id) this(eclass, \
	BaseGameApp.getApp().getElementClassList(), BaseGameApp.getApp().getIDGenerator(), id)
	end
	
	func new(BehaviorElementClass eclass, String id, String subID) this(eclass, \
	BaseGameApp.getApp().getElementClassList(), BaseGameApp.getApp().getIDGenerator(), \
	id, subID, subID + ".")
	end
	
	func new(BehaviorElementClass eclass, String id, String subID, String prefix) \
	this(eclass, BaseGameApp.getApp().getElementClassList(), BaseGameApp.getApp().getIDGenerator(), \
	id, subID, prefix)
	end
	
	func new(BehaviorElementClass eclass, ElementClassList elementClassList, \
	MutableID idGenerator) this(eclass, elementClassList, idGenerator, "")
	end
	
	func new(BehaviorElementClass eclass, ElementClassList elementClassList, \
	MutableID idGenerator, String id) this(eclass, elementClassList, idGenerator, \
	id, id.empty() if "composed" else "composed(" + id + ")")
	end
	
	func new(BehaviorElementClass eclass, ElementClassList elementClassList, \
	MutableID idGenerator, String id, String subID) this(eclass, elementClassList, \
	idGenerator, id, subID, subID + ".")
	end
	
	func new(BehaviorElementClass eclass, ElementClassList elementClassList, \
	MutableID idGenerator, String id, String subID, String prefix) super(eclass, id)
		pIDGenerator = idGenerator
		
		pChildren = ECPChildren.new(prefix + "children", elementClassList)
		eclass.addProperty(pChildren)
		
		eclass.addBehavior(this)
	end
	
	
	
	/** \brief Children. */
	func ECPChildren getChildren()
		return pChildren
	end
	
	/** \brief ID Generator. */
	func MutableID getIDGenerator()
		return pIDGenerator
	end
	
	/** \brief Set ID Generator. */
	func void setIDGenerator(MutableID idGenerator)
		pIDGenerator = idGenerator
	end
	
	
	
	/** \brief Get instance in element from owner element class. */
	func Instance instance(BehaviorElement element)
		return element.getInstanceAt(getInstanceIndex()) cast Instance
	end
	
	
	
	/**
	 * \brief Get behavior in element class or \em null if absent.
	 * 
	 * Use this method to check if a particular BehaviorElementClass contains a behavior
	 * of type ECBehaviorCollider.
	 */
	static func ECBehaviorComposed getBehaviorIn(BehaviorElementClass eclass)
		return eclass.findBehavior(block ECBehaviorComposed each
			return true
		end) cast ECBehaviorComposed
	end
	
	/**
	 * \brief Get behavior with id in element class or \em null if absent.
	 * 
	 * Use this method to check if a particular BehaviorElementClass contains a behavior
	 * of type ECBehaviorComposed with specific identifier.
	 */
	static func ECBehaviorComposed getBehaviorIn(BehaviorElementClass eclass, String id)
		return eclass.findBehavior(block ECBehaviorComposed each
			return each.getID().equals(id)
		end) cast ECBehaviorComposed
	end
	
	/**
	 * \brief Get list of all behaviors in element.
	 * 
	 * Returns list contains ECBehaviorComposed behaviors in the order they have
	 * been created in the element.
	 */
	static func Array getAllBehaviorsIn(BehaviorElementClass eclass)
		return eclass.collectBehaviors(block ECBehaviorComposed each
			return true
		end)
	end
	
	
	
	/**
	 * \brief Get instance in element or \em null if absent.
	 * 
	 * Use this method to check if a particular BehaviorElement contains a behavior instance
	 * of type ECBehaviorComposed.Instance . If more than one instance is present returns
	 * the first instance.
	 */
	static func Instance getInstanceIn(BehaviorElement element)
		return element.findInstance(block Instance each
			return true
		end) cast Instance
	end
	
	/**
	 * \brief Get instance with id in element or \em null if absent.
	 * 
	 * Use this method to check if a particular BehaviorElement contains a behavior instance
	 * of type ECBehaviorComposed.Instance with specific identifier.
	 */
	static func Instance getInstanceIn(BehaviorElement element, String id)
		return element.findInstance(block Instance each
			return each.getECBehavior().getID().equals(id)
		end) cast Instance
	end
	
	/**
	 * \brief Get list of all instances in element.
	 * 
	 * Returns list contains ECBehaviorComposed.Instance instances in the order they have
	 * been created in the element.
	 */
	static func Array getAllInstancesIn(BehaviorElement element)
		return element.collectInstances(block Instance each
			return true
		end)
	end
	
	
	
	/** \brief Create Behavior instance. */
	func ECBehaviorInstance createInstance(BehaviorElement element)
		return Instance.new(this, element)
	end
end
