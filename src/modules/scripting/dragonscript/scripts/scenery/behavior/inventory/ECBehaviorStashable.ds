/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */


namespace Dragengine.Scenery

pin Dragengine.Gui
pin Dragengine.Preloading
pin Dragengine.Utils
pin Dragengine.Scenery
pin Dragengine.BehaviorTreeSystem
pin Dragengine.StateMachineSystem


/**
 * \brief Behavior element behavior adding support for elements to be placed in ECBehaviorInventory.
 * 
 * Element class properties have the prefix "stashable.".
 * 
 * This behavior does not require the element class to be persistable (setPersistable).
 * 
 * \see https://developer.dragondreams.ch/wiki/doku.php/dragengine:modules:dragonscript:behavior_stashable
 */
class ECBehaviorStashable extends DefaultECBehavior
	/** \brief Listener for behavior instance events. */
	interface Listener
		/** \brief Stashable has been added to inventory. */
		func void addedToInventory(Instance instance, ECBehaviorInventory.Instance inventory)
		
		/** \brief Stashable has been remove from inventory. */
		func void removedFromInventory(Instance instance, ECBehaviorInventory.Instance inventory)
	end
	
	/** \brief Default implementation of behavior instance listener. */
	class DefaultListener implements Listener
		/** \brief Create default listener. */
		func new()
		end
		
		/** \brief Stashable has been added to inventory. */
		func void addedToInventory(Instance instance, ECBehaviorInventory.Instance inventory)
		end
		
		/** \brief Stashable has been remove from inventory. */
		func void removedFromInventory(Instance instance, ECBehaviorInventory.Instance inventory)
		end
	end
	
	/** \brief Factory creating listeners. */
	interface ListenerFactory
		/** \brief Create listener. */
		func Listener createListener(Instance instance)
	end
	
	/** \brief Factory creating listeners using block. */
	class BlockListenerFactory implements ListenerFactory
		var Block pBlock
		
		/** \brief Create factory using block receiving Instance as parameter returning Listener. */
		func new(Block blockFactory)
			if blockFactory == null
				throw ENullPointer.new()
			end
			pBlock = blockFactory
		end
		
		/** \brief Create listener. */
		func Listener createListener(Instance instance)
			return pBlock.run(instance) cast Listener
		end
	end
	
	/**
	 * \brief Behavior factory.
	 * \version 1.25
	 * 
	 * Example XML element class:
	 * \code{.xml}
	 * <behavior type='ECBehaviorStashable'>
	 *   <!-- optional: use behavior tree with id instead of empty string -->
	 *   <string name='behaviorTree'>second</string>
	 *   
	 *   <!-- optional: use state machine with id instead of empty string -->
	 *   <string name='stateMachine'>second</string>
	 * </behavior>
	 * \endcode
	 * 
	 * Element class properties added by the behavior can also be set directly inside the tag
	 * be removing the property name prefix and starting with a "." (for example ".propertyName").
	 */
	class Factory implements BehaviorFactory
		func new()
		end
		
		func String factoryId()
			return "ECBehaviorStashable"
		end
		
		func ECBehavior addBehavior(BehaviorElementClass eclass, String id, Dictionary parameters)
			if not id.empty()
				throw EInvalidParam.new("id is not empty string")
			end
			var ECBehaviorStashable behavior = ECBehaviorStashable.new(eclass)
			
			behavior.setBehaviorTree(eclass.sharedFactoryHelper.defaultBehaviorTree(eclass, parameters))
			behavior.setStateMachine(eclass.sharedFactoryHelper.defaultStateMachine(eclass, parameters))
			
			eclass.sharedFactoryHelper.setPropertiesFromParameters(eclass, parameters, "stashable")
			return behavior
		end
	end
	
	/** \brief Behavior instance. */
	class Instance extends DefaultECBehaviorInstance
		/**
		 * \brief Behavior tree action "stashable.remove".
		 * \version 1.26
		 */
		class BTARemove extends BTSMActionCondition
			var Instance pInstance
			
			func new(Instance instance)
				pInstance = instance
			end
			
			func BTResult runAction(Dictionary parameters)
				if parameters.has("dispose")
					pInstance.removeFromInventoryAndDispose()
					
				else
					pInstance.removeFromInventory()
				end
				return BTResult.success
			end
		end
		
		/**
		 * \brief Behavior tree action/condition "stashable.check".
		 * \version 1.26
		 */
		class BTACheck extends BTSMActionCondition
			var Instance pInstance
			var String pPrefix
			
			func new(Instance instance, String prefix)
				pInstance = instance
				pPrefix = prefix
			end
			
			func BTResult runAction(Dictionary parameters)
				return check("", parameters) if BTResult.success else BTResult.failure
			end
			
			func bool evaluateCondition(Dictionary parameters)
				return check(pPrefix, parameters)
			end
			
			func bool check(String prefix, Dictionary parameters)
				var bool result = true
				var Object value
				
				value = parameters.getAt(prefix + "stashed", null)
				if value != null
					result &= pInstance.isStashed() == value.equals("true")
				end
				
				return result
			end
		end
		
		
		var ECBehaviorStashable pECBehavior
		var ECBehaviorInventory.Instance pInventory
		var Image pImage
		var Video pVideo
		var UnicodeString pName
		var UnicodeString pDescription
		var Array pListeners
		var SMContext pSMContext
		
		
		
		/** \brief Create element. */
		func new(ECBehaviorStashable ecbehavior, BehaviorElement element) super(element)
			pECBehavior = ecbehavior
			pListeners = Array.new()
		end
		
		/** \brief Dispose of inventory. */
		func void dispose()
			removeFromInventory()
			pListeners = null
			pSMContext = null
			super.dispose()
		end
		
		
		
		/** \brief Initialize element from stub. */
		func void init(StubElement stub)
			var BehaviorElement element = getElement()
			
			var ElementClass eclass = element.getClass()
			pImage = pECBehavior.getImage().getImage(stub, eclass)
			pVideo = pECBehavior.getVideo().getVideo(stub, eclass)
			pName = pECBehavior.getName().getValue(stub)
			pDescription = pECBehavior.getDescription().getValue(stub)
			
			pECBehavior.createListeners(this)
			
			if pECBehavior.getBehaviorTree() != null
				var String pnp = pECBehavior.getPrefix()
				var BTContext c = pECBehavior.getBehaviorTree().instance(element).getContext()
				c.setAction(pnp + "remove", BTARemove.new(this))
				
				var String name = pnp + "check"
				var BTACheck btacheck = BTACheck.new(this, pnp)
				c.setAction(name, btacheck)
				c.setCondition(name, btacheck)
			end
			
			if pECBehavior.getStateMachine() != null
				var String pnp = pECBehavior.getPrefix()
				pSMContext = pECBehavior.getStateMachine().instance(element).getContext()
				pSMContext.setAction(pnp + "remove", BTARemove.new(this))
				
				var String name = pnp + "check"
				var BTACheck btacheck = BTACheck.new(this, pnp)
				pSMContext.setAction(name, btacheck)
				pSMContext.setCondition(name, btacheck)
			end
		end
		
		
		
		/** \brief Behavior. */
		func ECBehaviorStashable getECBehavior()
			return pECBehavior
		end
		
		
		
		/** \brief Image to display. */
		func Image getImage()
			return pImage
		end
		
		/** \brief Video to display. */
		func Video getVideo()
			return pVideo
		end
		
		/** \brief Name to display. */
		func UnicodeString getName()
			return pName
		end
		
		/** \brief Description to display. */
		func UnicodeString getDescription()
			return pDescription
		end
		
		
		
		/** \brief Inventory this element is part of or \em null. */
		func ECBehaviorInventory.Instance getInventory()
			return pInventory
		end
		
		/**
		 * \brief Set inventory.
		 * \warning For use by ECBehaviorInventory only.
		 */
		func void setInventory(ECBehaviorInventory.Instance inventory)
			if inventory == pInventory
				return
			end
			
			if pInventory != null
				pListeners.forEach(block Listener each
					each.removedFromInventory(this, pInventory)
				end)
				if pSMContext != null
					pSMContext.runEvent(pECBehavior.getPrefix() + "removed")
				end
			end
			
			pInventory = inventory
			
			if inventory != null
				pListeners.forEach(block Listener each
					each.addedToInventory(this, inventory)
				end)
				if pSMContext != null
					pSMContext.runEvent(pECBehavior.getPrefix() + "added")
				end
			end
		end
		
		/** \brief Element is part of an inventory. */
		func bool isStashed()
			return pInventory != null
		end
		
		/**
		 * \brief Add to inventory.
		 * \throws EInvalidParam \em inventory is \em null.
		 * \throws EInvalidParam Already part of an inventory.
		 */
		func void addToInventory(ECBehaviorInventory.Instance inventory)
			inventory.add(this)
		end
		
		/** \brief Remove from inventory if part of one. */
		func void removeFromInventory()
			if pInventory != null
				pInventory.remove(this)
			end
		end
		
		/** \brief Remove from inventory if part of one and safely disposes of the element. */
		func void removeFromInventoryAndDispose()
			removeFromInventory()
			getElement().safeDispose()
		end
		
		/**
		 * \brief Safely moves to a different inventory.
		 * 
		 * Convenience method for calling removeFromInventory() then addToInventory() or
		 * doing nothing if the inventory is the same.
		 */
		func void moveToInventory(ECBehaviorInventory.Instance inventory)
			if inventory == pInventory
				return
			end
			if inventory == null
				throw EInvalidParam.new("inventory is null")
			end
			
			removeFromInventory()
			addToInventory(inventory)
		end
		
		
		
		/** \brief Add listener. */
		func void addListener(Listener listener)
			if listener == null
				throw EInvalidParam.new("listener is null")
			end
			pListeners.add(listener)
		end
		
		/** \brief Remove listener. */
		func void removeListener(Listener listener)
			pListeners.remove(listener)
		end
	end
	
	
	
	var ECPImage pImage
	var ECPVideo pVideo
	var ECPUnicodeString pName
	var ECPUnicodeString pDescription
	var Array pListenerFactories
	var ECBehaviorBehaviorTree pBehaviorTree
	var ECBehaviorStateMachine pStateMachine
	var String pPrefix
	
	
	
	/** \brief Create behavior element class. */
	func new(BehaviorElementClass eclass) this(eclass, "stashable.")
	end
	
	/** \brief Create behavior element class. */
	func new(BehaviorElementClass eclass, String prefix) super(eclass)
		if getBehaviorIn(eclass) != null
			throw BEMultipleInstanceException.new(eclass, this)
		end
		
		pPrefix = prefix
		pListenerFactories = Array.new()
		
		eclass.addProperty(pImage = ECPImage.new(prefix + "image"))
		eclass.addProperty(pVideo = ECPVideo.new(prefix + "video"))
		eclass.addProperty(pName = ECPUnicodeString.new(prefix + "name", UnicodeString.new()))
		eclass.addProperty(pDescription = ECPUnicodeString.new(prefix + "description", UnicodeString.new()))
		
		eclass.addBehavior(this)
	end
	
	/** \brief Dispose of behavior. */
	func void dispose()
		pListenerFactories = null
		pBehaviorTree = null
		pStateMachine = null
		super.dispose()
	end
	
	
	
	/**
	 * \brief Prefix.
	 * \version 1.26
	 */
	func String getPrefix()
		return pPrefix
	end
	
	/** \brief Image to display. */
	func ECPImage getImage()
		return pImage
	end
	
	/** \brief Video to display. */
	func ECPVideo getVideo()
		return pVideo
	end
	
	/** \brief Name to display. */
	func ECPUnicodeString getName()
		return pName
	end
	
	/** \brief Description to display. */
	func ECPUnicodeString getDescription()
		return pDescription
	end
	
	/**
	 * \brief Behavior tree or null.
	 * \version 1.26
	 */
	func ECBehaviorBehaviorTree getBehaviorTree()
		return pBehaviorTree
	end
	
	/**
	 * \brief Set behavior tree or null.
	 * \version 1.26
	 */
	func void setBehaviorTree(ECBehaviorBehaviorTree behaviorTree)
		pBehaviorTree = behaviorTree
	end
	
	/**
	 * \brief State machine or null.
	 * \version 1.26
	 */
	func ECBehaviorStateMachine getStateMachine()
		return pStateMachine
	end
	
	/**
	 * \brief Set state machine or null.
	 * \version 1.26
	 */
	func void setStateMachine(ECBehaviorStateMachine stateMachine)
		pStateMachine = stateMachine
	end
	
	/** \brief Add listener factory. */
	func void addListenerFactory(ListenerFactory factory)
		if factory == null
			throw ENullPointer.new()
		end
		pListenerFactories.add(factory)
	end
	
	/**
	 * \brief Add listener factory using block.
	 * 
	 * Block receives as parameter Instance and returns Listener.
	 */
	func void addListenerFactory(Block blockFactory)
		pListenerFactories.add(BlockListenerFactory.new(blockFactory))
	end
	
	/** \brief Visit listener factories with block with argument ListenerFactory. */
	func void forEachListenerFactory(Block ablock)
		pListenerFactories.forEach(ablock)
	end
	
	/** \brief Create listeners from factories adding them to behavior instance. */
	func void createListeners(Instance instance)
		pListenerFactories.forEach(block ListenerFactory each
			instance.addListener(each.createListener(instance))
		end)
	end
	
	
	
	/** \brief Get instance in element from owner element class. */
	func Instance instance(BehaviorElement element)
		return element.getInstanceAt(getInstanceIndex()) cast Instance
	end
	
	
	
	/**
	 * \brief Get behavior in element class or \em null if absent.
	 * 
	 * Use this method to check if a particular BehaviorElementClass contains a behavior
	 * of type ECBehaviorComponent.
	 */
	static func ECBehaviorStashable getBehaviorIn(BehaviorElementClass eclass)
		return eclass.findBehavior(block ECBehaviorStashable each
			return true
		end) cast ECBehaviorStashable
	end
	
	/**
	 * \brief Get instance in element or \em null if absent.
	 * 
	 * Use this method to check if a particular BehaviorElement contains a behavior instance
	 * of type ECBehaviorStashable.Instance . If more than one instance is present returns
	 * the first instance.
	 */
	static func Instance getInstanceIn(BehaviorElement element)
		return element.findInstance(block Instance each
			return true
		end) cast Instance
	end
	
	
	
	/** \brief Create Behavior instance. */
	func ECBehaviorInstance createInstance(BehaviorElement element)
		return Instance.new(this, element)
	end
end
