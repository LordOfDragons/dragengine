/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */


namespace Dragengine.Scenery

pin Dragengine.Gui
pin Dragengine.LoadSave
pin Dragengine.Preloading
pin Dragengine.Utils
pin Dragengine.BehaviorTreeSystem
pin Dragengine.StateMachineSystem


/**
 * \brief Behavior element behavior inventory support.
 * 
 * Adds inventory where stashable elements can be put into.
 * 
 * This behavior does require the element class to be persistable (setPersistable).
 * 
 * \see https://developer.dragondreams.ch/wiki/doku.php/dragengine:modules:dragonscript:behavior_inventory
 */
class ECBehaviorInventory extends DefaultECBehavior
	/** \brief Listener for behavior instance events. */
	interface Listener
		/** \brief Stashable has been added to inventory. */
		func void stashableAdded(Instance instance, ECBehaviorStashable.Instance stashable)
		
		/** \brief Stashable has been removed from slot. */
		func void stashableRemoved(Instance instance, ECBehaviorStashable.Instance stashable)
	end
	
	/** \brief Default implementation of behavior instance listener. */
	class DefaultListener implements Listener
		/** \brief Create default listener. */
		func new()
		end
		
		/** \brief Stashable has been attached to slot. */
		func void stashableAdded(Instance instance, ECBehaviorStashable.Instance stashable)
		end
		
		/** \brief Stashable has been removed from slot. */
		func void stashableRemoved(Instance instance, ECBehaviorStashable.Instance stashable)
		end
	end
	
	/** \brief Factory creating listeners. */
	interface ListenerFactory
		/** \brief Create listener. */
		func Listener createListener(Instance instance)
	end
	
	/** \brief Factory creating listeners using block. */
	class BlockListenerFactory implements ListenerFactory
		var Block pBlock
		
		/** \brief Create factory using block receiving Instance as parameter returning Listener. */
		func new(Block blockFactory)
			if blockFactory == null
				throw ENullPointer.new()
			end
			pBlock = blockFactory
		end
		
		/** \brief Create listener. */
		func Listener createListener(Instance instance)
			return pBlock.run(instance) cast Listener
		end
	end
	
	/**
	 * \brief Behavior factory.
	 * \version 1.25
	 * 
	 * Example XML element class:
	 * \code{.xml}
	 * <behavior type='ECBehaviorInventory'>
	 *   <!-- optional: use behavior tree with id instead of empty string -->
	 *   <string name='behaviorTree'>second</string>
	 *   
	 *   <!-- optional: use state machine with id instead of empty string -->
	 *   <string name='stateMachine'>second</string>
	 * </behavior>
	 * 
	 * <!-- for adding multiple behaviors use unique identifiers -->
	 * <behavior type='ECBehaviorInventory' id='second'/>
	 * \endcode
	 * 
	 * Element class properties added by the behavior can also be set directly inside the tag
	 * be removing the property name prefix and starting with a "." (for example ".propertyName").
	 */
	class Factory implements BehaviorFactory
		func new()
		end
		
		func String factoryId()
			return "ECBehaviorInventory"
		end
		
		func ECBehavior addBehavior(BehaviorElementClass eclass, String id, Dictionary parameters)
			var ECBehaviorInventory behavior = ECBehaviorInventory.new(eclass, id)
			
			behavior.setBehaviorTree(eclass.sharedFactoryHelper.defaultBehaviorTree(eclass, parameters))
			behavior.setStateMachine(eclass.sharedFactoryHelper.defaultStateMachine(eclass, parameters))
			
			eclass.sharedFactoryHelper.setPropertiesFromParameters(eclass, parameters, "inventory", id)
			return behavior
		end
	end
	
	/** \brief Behavior instance. */
	class Instance extends DefaultECBehaviorInstance
		/**
		 * \brief Behavior tree action/condition "inventory{(id)}.check".
		 * \version 1.26
		 */
		class BTACheck extends BTSMActionCondition
			var Instance pInstance
			var String pPrefix
			
			func new(Instance instance, String prefix)
				pInstance = instance
				pPrefix = prefix
			end
			
			func BTResult runAction(Dictionary parameters)
				return check("", parameters) if BTResult.success\
					else (parameters.has("wait") if BTResult.running else BTResult.failure)
			end
			
			func bool evaluateCondition(Dictionary parameters)
				return check(pPrefix, parameters)
			end
			
			func bool check(String prefix, Dictionary parameters)
				var bool result = true
				var Object value
				
				value = parameters.getAt(prefix + "count", null)
				if value != null
					result &= pInstance.getCount() == (value cast String).toInt()
				end
				
				value = parameters.getAt(prefix + "count.not", null)
				if value != null
					result &= pInstance.getCount() != (value cast String).toInt()
				end
				
				value = parameters.getAt(prefix + "count.less", null)
				if value != null
					result &= pInstance.getCount() < (value cast String).toInt()
				end
				
				value = parameters.getAt(prefix + "count.greater", null)
				if value != null
					result &= pInstance.getCount() > (value cast String).toInt()
				end
				
				return result
			end
		end
		
		
		var ECBehaviorInventory pECBehavior
		var ECBehaviorStashable.Instance pStashable
		var Array pStashables
		var ElementResolver pElementResolver
		var Array pListeners
		var SMContext pSMContext
		
		
		
		/** \brief Create element. */
		func new(ECBehaviorInventory ecbehavior, BehaviorElement element) super(element)
			pECBehavior = ecbehavior
			pStashables = Array.new()
			pListeners = Array.new()
		end
		
		/** \brief Dispose of composeable instance. */
		func void dispose()
			if pStashables != null
				var int count = pStashables.getCount()
				while count > 0
					count--
					(pStashables.getAt(count) cast ECBehaviorStashable.Instance).getElement().safeDispose()
					if count < pStashables.getCount()
						pStashables.removeFrom(count)
					end
				end
				pStashables = null
			end
			
			pListeners = null
			pElementResolver = null
			pSMContext = null
			
			super.dispose()
		end
		
		
		
		/** \brief Initialize element from stub. */
		func void init(StubElement stub)
			pECBehavior.createListeners(this)
			
			if pECBehavior.getBehaviorTree() != null
				var String pnp = pECBehavior.getPrefix()
				var BTContext c = pECBehavior.getBehaviorTree().instance(getElement()).getContext()
				var String name = pnp + "check"
				var BTACheck btacheck = BTACheck.new(this, pnp)
				c.setAction(name, btacheck)
				c.setCondition(name, btacheck)
			end
			
			if pECBehavior.getStateMachine() != null
				var String pnp = pECBehavior.getPrefix()
				pSMContext = pECBehavior.getStateMachine().instance(getElement()).getContext()
				var String name = pnp + "check"
				var BTACheck btacheck = BTACheck.new(this, pnp)
				pSMContext.setAction(name, btacheck)
				pSMContext.setCondition(name, btacheck)
			end
		end
		
		
		
		/** \brief Behavior. */
		func ECBehaviorInventory getECBehavior()
			return pECBehavior
		end
		
		
		
		/** \brief Count of stashables. */
		func int getCount()
			return pStashables.getCount()
		end
		
		/** \brief Stashable at index. */
		func ECBehaviorStashable.Instance getAt(int index)
			return pStashables.getAt(index) cast ECBehaviorStashable.Instance
		end
		
		/** \brief Stashable is present. */
		func bool has(ECBehaviorStashable.Instance stashable)
			return pStashables.has(stashable)
		end
		
		/**
		 * \brief Visit stashables with block.
		 * 
		 * Block receives as only argument ECBehaviorStashable.Instance stashable.
		 */
		func void forEach(Block ablock)
			pStashables.forEach(ablock)
		end
		
		/**
		 * \brief Collect stashables with block.
		 * 
		 * Block receives as only argument ECBehaviorStashable.Instance stashable and has to
		 * return true to include the stashable in the returned Array of
		 * ECBehaviorStashable.Instance .
		 */
		func Array collect(Block ablock)
			return pStashables.collect(ablock)
		end
		
		/**
		 * \brief Find stashables with block.
		 * 
		 * Block receives as only argument ECBehaviorStashable.Instance stashable and has to
		 * return true if the matching stashable is found.
		 */
		func ECBehaviorStashable.Instance find(Block ablock)
			return pStashables.find(ablock) cast ECBehaviorStashable.Instance
		end
		
		/** \brief Inventory is empty. */
		func bool isEmpty()
			return pStashables.getCount() == 0
		end
		
		/** \brief Inventory is not empty. */
		func bool isNotEmpty()
			return pStashables.getCount() > 0
		end
		
		/**
		 * \brief Stashable can be added to this inventory.
		 * \retval false Stashable is already in another inventory.
		 * \retval true Adding is possible
		 */
		func bool canAdd(ECBehaviorStashable.Instance stashable)
			return pStashable == null and not stashable.isStashed()
		end
		
		/**
		 * \brief Add stashable to inventory.
		 * \throws EInvalidParam \em stashable is \em null.
		 * \throws EInvalidParam \em stashable is already in another inventory.
		 */
		func void add(ECBehaviorStashable.Instance stashable)
			if stashable.isStashed()
				throw EInvalidParam.new("stashable is already stashed")
			end
			
			pStashables.add(stashable)
			stashable.setInventory(this)
			
			pListeners.forEach(block Listener each
				each.stashableAdded(this, stashable)
			end)
			if pSMContext != null
				pSMContext.runEvent(pECBehavior.getPrefix() + "added")
			end
		end
		
		/** \brief Remove stashable without disposing of it. */
		func void remove(ECBehaviorStashable.Instance stashable)
			pStashables.remove(stashable)
			stashable.setInventory(null)
			
			pListeners.forEach(block Listener each
				each.stashableRemoved(this, stashable)
			end)
			if pSMContext != null
				pSMContext.runEvent(pECBehavior.getPrefix() + "removed")
			end
		end
		
		/**
		 * \brief Remove stashable and dispose of it.
		 * 
		 * Calls removeFromGameWorldIfPresent() then dispose() on the stashable.
		 */
		func void removeAndDispose(ECBehaviorStashable.Instance stashable)
			remove(stashable)
			stashable.getElement().safeDispose()
		end
		
		/** \brief Element resolver used during loading or \em null if not set. */
		func ElementResolver getElementResolver()
			return pElementResolver
		end
		
		
		
		/** \brief Add listener. */
		func void addListener(Listener listener)
			if listener == null
				throw EInvalidParam.new("listener is null")
			end
			pListeners.add(listener)
		end
		
		/** \brief Remove listener. */
		func void removeListener(Listener listener)
			pListeners.remove(listener)
		end
		
		
		
		/** \brief Frame update started. */
		func void enterFrame()
			if pElementResolver != null
				pElementResolver.resolve(getElement().getGameWorld())
				pElementResolver = null
			end
		end
		
		
		
		/** \brief Add element to game world. */
		func void addToGameWorld()
			var GameWorld gameWorld = getElement().getGameWorld()
			pStashables.forEach(block ECBehaviorStashable.Instance each
				var BehaviorElement element = each.getElement()
				if element.getGameWorld() == null
					gameWorld.addElement(element)
				end
			end)
		end
		
		/** \brief Remove element from game world. */
		func void removeFromGameWorld()
			pStashables.forEach(block ECBehaviorStashable.Instance each
				each.getElement().removeFromGameWorldIfPresent()
			end)
		end
		
		
		
		/** \brief Read element from file. */
		func void readFromFile(PersistencyEnvironment env, FileReader reader)
			select reader.readByte() // version
			case 0
				var int i, count = reader.readUShort()
				if count > 0
					pElementResolver = ElementResolver.new()
					for i = 0 to count
						pElementResolver.addBehavior(reader, block ECBehaviorStashable.Instance behavior
							add(behavior)
						end)
					end
					setRequiresEnterFrame(true)
				end
				
			else
				throw EInvalidParam.new("unsupported version")
			end
		end
		
		/** \brief Write element to file. */
		func void writeToFile(PersistencyEnvironment env, FileWriter writer)
			writer.writeByte(0) // version
			
			writer.writeUShort(pStashables.getCount())
			pStashables.forEach(block ECBehaviorStashable.Instance each
				ElementResolver.writeToFileBehavior(writer, each)
			end)
		end
	end
	
	
	
	var Array pListenerFactories
	var ECBehaviorBehaviorTree pBehaviorTree
	var ECBehaviorStateMachine pStateMachine
	var String pPrefix
	
	
	
	/** \brief Create behavior element class. */
	func new(BehaviorElementClass eclass) this(eclass, "")
	end
	
	/** \brief Create behavior element class. */
	func new(BehaviorElementClass eclass, String id) \
	this(eclass, id, id.empty() if "inventory." else "inventory(" + id + ").")
	end
	
	func new(BehaviorElementClass eclass, String id, String prefix) super(eclass, id)
		pPrefix = prefix
		pListenerFactories = Array.new()
		
		eclass.addBehavior(this)
	end
	
	/** \brief Dispose of behavior. */
	func void dispose()
		pListenerFactories = null
		pBehaviorTree = null
		pStateMachine = null
		super.dispose()
	end
	
	
	
	/** \brief Get instance in element from owner element class. */
	func Instance instance(BehaviorElement element)
		return element.getInstanceAt(getInstanceIndex()) cast Instance
	end
	
	
	/**
	 * \brief Prefix.
	 * \version 1.26
	 */
	func String getPrefix()
		return pPrefix
	end
	
	/**
	 * \brief Behavior tree or null.
	 * \version 1.26
	 */
	func ECBehaviorBehaviorTree getBehaviorTree()
		return pBehaviorTree
	end
	
	/**
	 * \brief Set behavior tree or null.
	 * \version 1.26
	 */
	func void setBehaviorTree(ECBehaviorBehaviorTree behaviorTree)
		pBehaviorTree = behaviorTree
	end
	
	/**
	 * \brief State machine or null.
	 * \version 1.26
	 */
	func ECBehaviorStateMachine getStateMachine()
		return pStateMachine
	end
	
	/**
	 * \brief Set state machine or null.
	 * \version 1.26
	 */
	func void setStateMachine(ECBehaviorStateMachine stateMachine)
		pStateMachine = stateMachine
	end
	
	
	/** \brief Add listener factory. */
	func void addListenerFactory(ListenerFactory factory)
		if factory == null
			throw ENullPointer.new()
		end
		pListenerFactories.add(factory)
	end
	
	/**
	 * \brief Add listener factory using block.
	 * 
	 * Block receives as parameter Instance and returns Listener.
	 */
	func void addListenerFactory(Block blockFactory)
		pListenerFactories.add(BlockListenerFactory.new(blockFactory))
	end
	
	/** \brief Visit listener factories with block with argument ListenerFactory. */
	func void forEachListenerFactory(Block ablock)
		pListenerFactories.forEach(ablock)
	end
	
	/** \brief Create listeners from factories adding them to behavior instance. */
	func void createListeners(Instance instance)
		pListenerFactories.forEach(block ListenerFactory each
			instance.addListener(each.createListener(instance))
		end)
	end
	
	
	
	/**
	 * \brief Get behavior in element class or \em null if absent.
	 * 
	 * Use this method to check if a particular BehaviorElementClass contains a behavior
	 * of type ECBehaviorComponent.
	 */
	static func ECBehaviorInventory getBehaviorIn(BehaviorElementClass eclass)
		return eclass.findBehavior(block ECBehaviorInventory each
			return true
		end) cast ECBehaviorInventory
	end
	
	/**
	 * \brief Get behavior with id in element class or \em null if absent.
	 * 
	 * Use this method to check if a particular BehaviorElementClass contains a behavior
	 * of type ECBehaviorInventory with specific identifier.
	 */
	static func ECBehaviorInventory getBehaviorIn(BehaviorElementClass eclass, String id)
		return eclass.findBehavior(block ECBehaviorInventory each
			return each.getID().equals(id)
		end) cast ECBehaviorInventory
	end
	
	/**
	 * \brief Get list of all behaviors in element.
	 * 
	 * Returns list contains ECBehaviorInventory behaviors in the order they have
	 * been created in the element.
	 */
	static func Array getAllBehaviorsIn(BehaviorElementClass eclass)
		return eclass.collectBehaviors(block ECBehaviorInventory each
			return true
		end)
	end
	
	
	
	/**
	 * \brief Get instance in element or \em null if absent.
	 * 
	 * Use this method to check if a particular BehaviorElement contains a behavior instance
	 * of type ECBehaviorInventory.Instance . If more than one instance is present returns
	 * the first instance.
	 */
	static func Instance getInstanceIn(BehaviorElement element)
		return element.findInstance(block Instance each
			return true
		end) cast Instance
	end
	
	/**
	 * \brief Get instance with id in element or \em null if absent.
	 * 
	 * Use this method to check if a particular BehaviorElement contains a behavior instance
	 * of type ECBehaviorInventory.Instance with specific identifier.
	 */
	static func Instance getInstanceIn(BehaviorElement element, String id)
		return element.findInstance(block Instance each
			return each.getECBehavior().getID().equals(id)
		end) cast Instance
	end
	
	/**
	 * \brief Get list of all instances in element.
	 * 
	 * Returns list contains ECBehaviorInventory.Instance instances in the order they have
	 * been created in the element.
	 */
	static func Array getAllInstancesIn(BehaviorElement element)
		return element.collectInstances(block Instance each
			return true
		end)
	end
	
	
	
	/** \brief Create Behavior instance. */
	func ECBehaviorInstance createInstance(BehaviorElement element)
		return Instance.new(this, element)
	end
end
