/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */


namespace Dragengine.Scenery

pin Dragengine.Gui
pin Dragengine.LoadSave
pin Dragengine.Preloading
pin Dragengine.Utils
pin Dragengine.TriggerSystem
pin Dragengine.BehaviorTreeSystem
pin Dragengine.StateMachineSystem


/**
 * \brief Behavior element behavior adding animation support.
 * 
 * Playings back an animation using an animator for an ECBehaviorComponent. By default the
 * ECBehaviorComponent with empty identifier is animated. Multiple ECBehaviorAnimated
 * can be added targeting different ECBehaviorComponent using their identifier. It is
 * also possible to add multiple ECBehaviorAnimated manipulating the same ECBehaviorComponent
 * as long as the animators used are properly crafted. This can be used for example to add
 * overlayed animations like gestures onto an actor.
 * 
 * To use this behavior make sure to add first the ECBehaviorComponent to animate.
 * The example below adds to components and animates each using an own animator.
 * 
 * \code{.ds}
 * class MyElement extends BehaviorElementClass
 *    func new()
 *       var ECBehaviorComponent component1 = ECBehaviorComponent.new(this)
 *       ECBehaviorAnimated.new(this, component1)
 *       
 *       var ECBehaviorComponent component2 = ECBehaviorComponent.new(this, "subComponent")
 *       ECBehaviorAnimated.new(this, component2)
 *    end
 * end
 * \endcode
 * 
 * Because multiple animator behaviors can animate the same component behavior the
 * animator behavior has an own identifier. In the example above the first string parameter
 * is the animator behavior identifier while the second string parameter is the component
 * behavior identifier to animate.
 * 
 * Element class properties have the prefix "animated{(id)}.".
 * 
 * \par Listening
 * 
 * Behavior elements and other behaviors can add listeners to the ECBehaviorAnimated.
 * Listeners are notified if the animation starts playing and when it stops playing. This
 * can be used to synchronize actions to these events. ECBehaviorAnimated can also use
 * trigger targets so listeners are not always required.
 * 
 * Another use for listeners is update animator controllers not handled by ECBehaviorAnimated
 * itself. ECBehaviorAnimated calls AnimatorInstance.apply() before it exits thinking.
 * If other behaviors modify the animator controller later on they need to call
 * AnimatorInstance.apply() again. If multiple behaviors affect the same animated component
 * this can put strain on the game engine modules and reduce performance. For this reason
 * listeners are also asked to update animator controllers. This allows multiple behaviors
 * to update individual controllers with AnimatorInstance.apply() to be called only once.
 * 
 * It is important to note that using listeners behaviors are asked to update animator
 * controllers before their think() method is called. For such behaviors it is best to
 * do their thinking inside the listener call avoiding think() to be used at all.
 * 
 * A typical usage pattern for such behaviors is to locate the animator controller to update
 * during construction time and to manipulated the controllers inside updateControllers().
 * This example shows this concept:
 * 
 * \code{.ds}
 * class MyListener extends ECBehaviorInstance.DefaultListener
 *    protected var AnimatorController pController
 *    
 *    func new(ECBehaviorAnimated behavior)
 *       pController = behavior.getAnimatorInstance().getControllerNamed("special controller")
 *    end
 *    
 *    func void updateControllers(Instance instance, float elapsed)
 *       pController.increment(elapsed)
 *    end
 * end
 * \endcode
 * 
 * This behavior does require the element class to be persistable (setPersistable).
 * 
 * \see https://developer.dragondreams.ch/wiki/doku.php/dragengine:modules:dragonscript:behavior_animated
 */
class ECBehaviorAnimated extends DefaultECBehavior
	/** \brief Listener for behavior instance events. */
	interface Listener
		/** \brief Start playing back. */
		func void startPlaying(Instance instance)
		
		/** \brief Stop playing. */
		func void stopPlaying(Instance instance)
		
		/** \brief Update controllers if required. */
		func void updateControllers(Instance instance, float elapsed)
		
		/** \brief Animation has been applied. */
		func void animationApplied(Instance instance)
	end
	
	/** \brief Default implementation of behavior instance listener. */
	class DefaultListener implements Listener
		/** \brief Create default listener. */
		func new()
		end
		
		/** \brief Start playing back. */
		func void startPlaying(Instance instance)
		end
		
		/** \brief Stop playing. */
		func void stopPlaying(Instance instance)
		end
		
		/** \brief Update controllers if required. */
		func void updateControllers(Instance instance, float elapsed)
		end
		
		/** \brief Animation has been applied. */
		func void animationApplied(Instance instance)
		end
	end
	
	/** \brief Implementation of behavior instance listener using BooleanBehaviorListener. */
	class BooleanListener extends DefaultListener
		var BooleanBehaviorListener pListener
		
		func new(BooleanBehaviorListener listener)
			pListener = listener
		end
		
		func void startPlaying(Instance instance)
			pListener.enabled()
		end
		
		func void stopPlaying(Instance instance)
			pListener.disabled()
		end
	end
	
	/** \brief Factory creating listeners. */
	interface ListenerFactory
		/** \brief Create listener. */
		func Listener createListener(Instance instance)
	end
	
	/** \brief Factory creating listeners using block. */
	class BlockListenerFactory implements ListenerFactory
		var Block pBlock
		
		/** \brief Create factory using block receiving Instance as parameter returning Listener. */
		func new(Block blockFactory)
			if blockFactory == null
				throw ENullPointer.new()
			end
			pBlock = blockFactory
		end
		
		/** \brief Create listener. */
		func Listener createListener(Instance instance)
			return pBlock.run(instance) cast Listener
		end
	end
	
	/**
	 * \brief Behavior factory.
	 * \version 1.25
	 * 
	 * Automatically assigns these behaviors if present before adding:
	 * - Required: \ref ECBehaviorComponent
	 * 
	 * Example XML element class:
	 * \code{.xml}
	 * <behavior type='ECBehaviorAnimated'>
	 *   <!-- optional: use component with id instead of empty string -->
	 *   <string name='component'>second</string>
	 * 
	 *   <!-- optional: use BaseGameApp trigger table. game can add more supported values. default is 'default' -->
	 *   <string name='triggerTable'>default</string>
	 *   
	 *   <!-- optional: identifier of ECBehaviorTriggered to synchronize with or empty
	 *                  string to not synchronize. default is empty string. -->
	 *   <string name='trigger.synchronize'>other</string>
	 * 
	 *   <!-- optional: use named controller instead of first controller. default is empty string -->
	 *   <string name='controllerName'>playback</string>
	 *   
	 *   <!-- optional: use behavior tree with id instead of empty string -->
	 *   <string name='behaviorTree'>second</string>
	 *   
	 *   <!-- optional: use state machine with id instead of empty string -->
	 *   <string name='stateMachine'>second</string>
	 * </behavior>
	 * 
	 * <!-- for adding multiple behaviors use unique identifiers -->
	 * <behavior type='ECBehaviorAnimated' id='second'>
	 *   ...
	 * </behavior>
	 * \endcode
	 * 
	 * Element class properties added by the behavior can also be set directly inside the tag
	 * be removing the property name prefix and starting with a "." (for example ".propertyName").
	 */
	class Factory implements BehaviorFactory
		func new()
		end
		
		func String factoryId()
			return "ECBehaviorAnimated"
		end
		
		func ECBehavior addBehavior(BehaviorElementClass eclass, String id, Dictionary parameters)
			var ECBehaviorAnimated behavior = ECBehaviorAnimated.new(eclass,\
				eclass.sharedFactoryHelper.defaultComponent(eclass, parameters),\
				BaseGameApp.getApp().getLoaders(),\
				getTriggerTableFor(parameters.getAt("triggerTable", "default") cast String), id)
			
			behavior.setControllerName(parameters.getAt("controllerName", null) cast String)
			
			behavior.getTrigger().setSynchronize(eclass,\
				parameters.getAt("trigger.synchronize", null) cast String)
			
			behavior.setBehaviorTree(eclass.sharedFactoryHelper.defaultBehaviorTree(eclass, parameters))
			behavior.setStateMachine(eclass.sharedFactoryHelper.defaultStateMachine(eclass, parameters))
			
			eclass.sharedFactoryHelper.setPropertiesFromParameters(eclass, parameters, "animated", id)
			return behavior
		end
		
		/**
		 * \brief Trigger table matching value.
		 * 
		 * Default implementation returns \ref BaseGameApp#getTriggerTable() for value 'default'
		 * and null for all other values. Overwrite to accept other values.
		 */
		func TSTriggerTable getTriggerTableFor(String value)
			return BehaviorElementClass.sharedFactoryHelper.triggerTable(value)
		end
	end
	
	
	
	/** \brief Behavior instance. */
	class Instance extends DefaultECBehaviorInstance
		/**
		 * \brief Behavior tree action "animated{(id)}.set".
		 * \version 1.26
		 */
		class BTASet extends BTSMActionCondition
			var Instance pInstance
			
			func new(Instance instance)
				pInstance = instance
			end
			
			func BTResult runAction(Dictionary parameters)
				var Object value
				
				value = parameters.getAt("playing", null)
				if value != null
					pInstance.setPlaying(value.equals("true"))
				end
				
				value = parameters.getAt("time", null)
				if value != null
					pInstance.setTime((value cast String).toFloat())
				end
				
				value = parameters.getAt("time.relative", null)
				if value != null
					pInstance.setTimeRelative((value cast String).toFloat())
				end
				
				return BTResult.success
			end
		end
		
		/**
		 * \brief Behavior tree action/condition "animated{(id)}.check".
		 * \version 1.26
		 */
		class BTACheck extends BTSMActionCondition
			var Instance pInstance
			var String pPrefix
			
			func new(Instance instance, String prefix)
				pInstance = instance
				pPrefix = prefix
			end
			
			func BTResult runAction(Dictionary parameters)
				return check("", parameters) if BTResult.success\
					else (parameters.has("wait") if BTResult.running else BTResult.failure)
			end
			
			func bool evaluateCondition(Dictionary parameters)
				return check(pPrefix, parameters)
			end
			
			func bool check(String prefix, Dictionary parameters)
				var bool result = true
				var Object value
				
				value = parameters.getAt(prefix + "playing", null)
				if value != null
					result &= pInstance.getPlaying() == value.equals("true")
				end
				
				value = parameters.getAt(prefix + "time.less", null)
				if value != null
					result &= pInstance.getTime() < (value cast String).toFloat()
				end
				
				value = parameters.getAt(prefix + "time.greater", null)
				if value != null
					result &= pInstance.getTime() > (value cast String).toFloat()
				end
				
				value = parameters.getAt(prefix + "time.relative.less", null)
				if value != null
					result &= pInstance.getTimeRelative() < (value cast String).toFloat()
				end
				
				value = parameters.getAt(prefix + "time.relative.greater", null)
				if value != null
					result &= pInstance.getTimeRelative() > (value cast String).toFloat()
				end
				
				return result
			end
		end
		
		/** \brief Trigger listener to start playing back. */
		public class PlayingListener extends ECBehaviorTriggered.DefaultListener
			var Instance pInstance
			
			func new(Instance instance)
				pInstance = instance
			end
			
			func void triggerExpressionTrue(ECBehaviorTriggered.Instance instance)
				pInstance.setPlaying(true)
			end
			
			func void triggerExpressionFalse(ECBehaviorTriggered.Instance instance)
				pInstance.setPlaying(false)
			end
		end
		
		
		
		var ECBehaviorAnimated pECBehavior
		var AnimatorInstance pAnimatorInstance
		var ECComposeAnimator.Playback pPlayback
		var ECBehaviorTriggered.Instance pTrigger
		var TSTriggerTable pTriggerTable
		var TSNamedTriggerTarget pTargetPlaying
		var bool pApplyPostThink
		var Array pListeners
		
		var ECBehaviorComponent.Instance pComponent
		var SMContext pSMContext
		
		
		
		/** \brief Create element. */
		func new(ECBehaviorAnimated ecbehavior, BehaviorElement element) super(element)
			pECBehavior = ecbehavior
			pListeners = Array.new()
			pTriggerTable = ecbehavior.getTriggerTable()
			pTargetPlaying = TSNamedTriggerTarget.new()
			pApplyPostThink = ecbehavior.getApplyPostThink().getValue()
			
			pComponent = ecbehavior.getComponent().instance(element)
		end
		
		/** \brief Dispose of composeable instance. */
		func void dispose()
			pPlayback = null
			pTrigger = null
			pTargetPlaying = null
			pListeners = null
			pSMContext = null
			
			super.dispose()
		end
		
		
		
		/** \brief Initialize element from stub. */
		func void init(StubElement stub)
			var BehaviorElement element = getElement()
			
			pAnimatorInstance = createAnimatorInstance(stub)
			
			if pAnimatorInstance != null
				pAnimatorInstance.setComponent(pComponent.getComponent())
			end
			
			pPlayback = createPlayback(stub)
			
			if pECBehavior.getControllerName() != null
				pPlayback.setControllerNamed(pECBehavior.getControllerName())
			end
			
			if pTriggerTable != null
				pTrigger = pECBehavior.getTrigger().synchronizedOrSelf().instance(element)
				pTrigger.addListener(PlayingListener.new(this))
				
				pTargetPlaying.setName(pECBehavior.getTargetPlaying().getValue(stub))
			end
			
			if pPlayback.getPlaying()
				setRequiresThink(true)
				
				if pPlayback.getController() == null
					pPlayback.apply() // apply once since no update happens later
				end
				
			else
				pPlayback.apply() // apply once since no update happens later
			end
			
			pECBehavior.createListeners(this)
			
			if pECBehavior.getBehaviorTree() != null
				var String pnp = pECBehavior.getPrefix()
				var BTContext c = pECBehavior.getBehaviorTree().instance(element).getContext()
				c.setAction(pnp + "set", BTASet.new(this))
				
				var String name = pnp + "check"
				var BTACheck btacheck = BTACheck.new(this, pnp)
				c.setAction(name, btacheck)
				c.setCondition(name, btacheck)
			end
			
			if pECBehavior.getStateMachine() != null
				var String pnp = pECBehavior.getPrefix()
				pSMContext = pECBehavior.getStateMachine().instance(element).getContext()
				pSMContext.setAction(pnp + "set", BTASet.new(this))
				
				var String name = pnp + "check"
				var BTACheck btacheck = BTACheck.new(this, pnp)
				pSMContext.setAction(name, btacheck)
				pSMContext.setCondition(name, btacheck)
			end
		end
		
		/**
		 * \brief Create animator instance for the element.
		 * 
		 * Default implementation uses ECComposeAnimator.createAnimatorInstance().
		 */
		protected func AnimatorInstance createAnimatorInstance(StubElement stub)
			return pECBehavior.getAnimator().createAnimatorInstance(getElement(), stub, pComponent.getComponent())
		end
		
		/**
		 * \brief Create playback instance helper.
		 * 
		 * Default implementation uses ECComposeAnimator.createPlayback().
		 */
		protected func ECComposeAnimator.Playback createPlayback(StubElement stub)
			return pECBehavior.getAnimator().createPlayback(pAnimatorInstance, stub)
		end
		
		
		
		/** \brief Behavior. */
		func ECBehaviorAnimated getECBehavior()
			return pECBehavior
		end
		
		/** \brief Component behavior. */
		func ECBehaviorComponent.Instance getComponent()
			return pComponent
		end
		
		/** \brief Trigger playing or \em null. */
		func ECBehaviorTriggered.Instance getTrigger()
			return pTrigger
		end
		
		/** \brief Animator instance. */
		func AnimatorInstance getAnimatorInstance()
			return pAnimatorInstance
		end
		
		/** \brief Playback. */
		func ECComposeAnimator.Playback getPlayback()
			return pPlayback
		end
		
		/** \brief Playing back. */
		func bool getPlaying()
			return pPlayback.getPlaying()
		end
		
		/** \brief Set if playing back. */
		func void setPlaying(bool playing)
			if playing == pPlayback.getPlaying()
				return
			end
			
			if playing and not pPlayback.getLooping()
				pPlayback.rewind()
			end
			pPlayback.setPlaying(playing)
			setRequiresThink(pPlayback.getPlaying())
			
			if pPlayback.getPlaying()
				pTargetPlaying.fire()
				pListeners.forEach(block Listener each
					each.startPlaying(this)
				end)
				if pSMContext != null
					pSMContext.runEvent(pECBehavior.getPrefix() + "startPlaying")
				end
				
				if pPlayback.getController() == null and not pPlayback.getLooping()
					// animator is missing or incorrectly set up while playback is not looping.
					// without this check the behavior would never stop playing. instead stop
					// which prevents scripts from breaking if waiting for animation to stop
					pPlayback.setPlaying(false)
				end
				
			else
				pTargetPlaying.reset()
				pListeners.forEach(block Listener each
					each.stopPlaying(this)
				end)
				if pSMContext != null
					pSMContext.runEvent(pECBehavior.getPrefix() + "stopPlaying")
				end
			end
		end
		
		/** \brief Playback time. */
		func float getTime()
			return pPlayback.getTime()
		end
		
		/** \brief Set playback time. */
		func void setTime(float time)
			pPlayback.setTime(time)
		end
		
		/**
		 * \brief Relative playback time in the range from 0 to 1.
		 * \version 1.26
		 */
		func float getTimeRelative()
			return pPlayback.getTimeRelative()
		end
		
		/**
		 * \brief Set relative playback time in the range from 0 to 1.
		 * \version 1.26
		 */
		func void setTimeRelative(float time)
			pPlayback.setTimeRelative(time)
		end
		
		/**
		 * \brief Apply animator during post think instead off during think.
		 * \version 1.7
		 */
		func bool getApplyPostThink()
			return pApplyPostThink
		end
		
		
		
		/** \brief Trigger table to link trigger expression to or \em null if not set. */
		func TSTriggerTable getTriggerTable()
			return pTriggerTable
		end
		
		/** \brief Trigger table to link trigger expression to or \em null if not set. */
		protected func void setTriggerTable(TSTriggerTable triggerTable)
			pTriggerTable = triggerTable
		end
		
		/** \brief Trigger target to reflect playing state. */
		func TSNamedTriggerTarget getTargetPlaying()
			return pTargetPlaying
		end
		
		
		
		/** \brief Add listener. */
		func void addListener(Listener listener)
			if listener == null
				throw EInvalidParam.new()
			end
			pListeners.add(listener)
		end
		
		/** \brief Remove listener. */
		func void removeListener(Listener listener)
			pListeners.remove(listener)
		end
		
		
		
		/** \brief Add element to game world. */
		func void addToGameWorld()
			if pTriggerTable == null
				return
			end
			
			if pTrigger == null or pTrigger.getTriggerExpression() == null
				setPlaying(pPlayback.getPlaying())
			end
			
			pTargetPlaying.acquireTarget(pTriggerTable)
			if pPlayback.getPlaying()
				pTargetPlaying.fire()
				pListeners.forEach(block Listener each
					each.startPlaying(this)
				end)
				if pSMContext != null
					pSMContext.runEvent(pECBehavior.getPrefix() + "startPlaying")
				end
			end
		end
		
		/** \brief Remove element from game world. */
		func void removeFromGameWorld()
			pTargetPlaying.dropTarget()
		end
		
		/** \brief Think about what to do for the next frame update. */
		func void think(float elapsed)
			if not pApplyPostThink
				applyAnimator(elapsed)
			end
		end
		
		/** Post think. */
		func void postThink(float elapsed)
			if pApplyPostThink
				applyAnimator(elapsed)
			end
		end
		
		/** Apply animator. */
		protected func void applyAnimator(float elapsed)
			if not pPlayback.getPlaying()
				return
			end
			
			if pPlayback.getController() != null
				var AnimatorController controller = pPlayback.getController()
				if controller != null
					controller.increment(elapsed * pPlayback.getPlaySpeed())
				end
				
				pListeners.forEach(block Listener each
					each.updateControllers(this, elapsed)
				end)
				
				pPlayback.apply()
				
				pListeners.forEach(block Listener each
					each.animationApplied(this)
				end)
				
				if not controller.getClamp() or not controller.isAtUpper()
					return
				end
			end
			
			// finished
			pPlayback.setPlaying(false)
			setRequiresThink(false)
			pTargetPlaying.reset()
			pListeners.forEach(block Listener each
				each.stopPlaying(this)
			end)
			if pSMContext != null
				pSMContext.runEvent(pECBehavior.getPrefix() + "stopPlaying")
			end
		end
		
		
		
		/** \brief Read element from file. */
		func void readFromFile(PersistencyEnvironment env, FileReader reader)
			select reader.readByte() // version
			case 0
				pPlayback.readFromFile(env, reader)
				
				if pPlayback.getPlaying()
					setRequiresThink(true)
					
				else
					// apply animator at least once
					pPlayback.apply()
				end
				
			else
				throw EInvalidParam.new("unsupported version")
			end
		end
		
		/** \brief Write element to file. */
		func void writeToFile(PersistencyEnvironment env, FileWriter writer)
			writer.writeByte(0) // version
			
			pPlayback.writeToFile(env, writer)
		end
	end
	
	
	
	var ECBehaviorComponent pComponent
	var ECComposeAnimator pAnimator
	var String pControllerName
	var ECBehaviorTriggered pTrigger
	var ECPString pTargetPlaying
	var ECPBoolean pApplyPostThink
	var TSTriggerTable pTriggerTable
	var Array pListenerFactories
	var ECBehaviorBehaviorTree pBehaviorTree
	var ECBehaviorStateMachine pStateMachine
	var String pPrefix
	
	
	
	/** \brief Create behavior element class. */
	func new(BehaviorElementClass eclass, ECBehaviorComponent component) \
	this(eclass, component, BaseGameApp.getApp().getLoaders(), null, "")
	end
	
	/** \brief Create behavior element class. */
	func new(BehaviorElementClass eclass, ECBehaviorComponent component, String id) \
	this(eclass, component, BaseGameApp.getApp().getLoaders(), null, id)
	end
	
	/** \brief Create behavior element class. */
	func new(BehaviorElementClass eclass, ECBehaviorComponent component, String id, String subID) \
	this(eclass, component, BaseGameApp.getApp().getLoaders(), null, id, subID)
	end
	
	/** \brief Create behavior element class. */
	func new(BehaviorElementClass eclass, ECBehaviorComponent component, Loaders loaders, \
	TSTriggerTable triggerTable) this(eclass, component, loaders, triggerTable, "")
	end
	
	/** \brief Create behavior element class. */
	func new(BehaviorElementClass eclass, ECBehaviorComponent component, Loaders loaders, \
	TSTriggerTable triggerTable, String id) this(eclass, component, loaders, triggerTable, id, \
	id.empty() if "animated" else "animated(" + id + ")")
	end
	
	func new(BehaviorElementClass eclass, ECBehaviorComponent component, Loaders loaders, \
	TSTriggerTable triggerTable, String id, String subID) \
	this(eclass, component, loaders, triggerTable, id, subID, subID + ".")
	end
	
	func new(BehaviorElementClass eclass, ECBehaviorComponent component, Loaders loaders, \
	TSTriggerTable triggerTable, String id, String subID, String prefix) super(eclass, id)
		if component == null
			throw ENullPointer.new("component")
		end
		
		pPrefix = prefix
		pComponent = component
		pTriggerTable = triggerTable
		pListenerFactories = Array.new()
		
		pAnimator = ECComposeAnimator.new(eclass, loaders, prefix)
		
		pTrigger = ECBehaviorTriggered.new(eclass, triggerTable, subID, prefix + "trigger")
		
		pTargetPlaying = ECPString.new(prefix + "targetPlaying", "")
		eclass.addProperty(pTargetPlaying)
		
		pApplyPostThink = ECPBoolean.new(prefix + "applyPostThink", false)
		eclass.addProperty(pApplyPostThink)
		
		eclass.addBehavior(this)
	end
	
	/** \brief Dispose of behavior. */
	func void dispose()
		pComponent = null
		pListenerFactories = null
		pBehaviorTree = null
		pStateMachine = null
		super.dispose()
	end
	
	
	
	/**
	 * \brief Prefix.
	 * \version 1.26
	 */
	func String getPrefix()
		return pPrefix
	end
	
	/** \brief Component behavior to animate. */
	func ECBehaviorComponent getComponent()
		return pComponent
	end
	
	/** \brief Composeable animator for element class. */
	func ECComposeAnimator getAnimator()
		return pAnimator
	end
	
	/** \brief Controller name or null to use first controller. */
	func String getControllerName()
		return pControllerName
	end
	
	/** \brief Set controller name or null to use first controller. */
	func void setControllerName(String name)
		pControllerName = name
	end
	
	/** \brief Trigger playing. */
	func ECBehaviorTriggered getTrigger()
		return pTrigger
	end
	
	/** \brief Target playing. */
	func ECPString getTargetPlaying()
		return pTargetPlaying
	end
	
	/**
	 * \brief Apply animator during post think instead off during think.
	 * \version 1.7
	 */
	func ECPBoolean getApplyPostThink()
		return pApplyPostThink
	end
	
	/** \brief Trigger table or \em null if not used. */
	func TSTriggerTable getTriggerTable()
		return pTriggerTable
	end
	
	/** \brief Set trigger table or \em null if not used. */
	func void setTriggerTable(TSTriggerTable triggerTable)
		pTriggerTable = triggerTable
	end
	
	/**
	 * \brief Behavior tree or null.
	 * \version 1.26
	 */
	func ECBehaviorBehaviorTree getBehaviorTree()
		return pBehaviorTree
	end
	
	/**
	 * \brief Set behavior tree or null.
	 * \version 1.26
	 */
	func void setBehaviorTree(ECBehaviorBehaviorTree behaviorTree)
		pBehaviorTree = behaviorTree
	end
	
	/**
	 * \brief State machine or null.
	 * \version 1.26
	 */
	func ECBehaviorStateMachine getStateMachine()
		return pStateMachine
	end
	
	/**
	 * \brief Set state machine or null.
	 * \version 1.26
	 */
	func void setStateMachine(ECBehaviorStateMachine stateMachine)
		pStateMachine = stateMachine
	end
	
	/** \brief Add listener factory. */
	func void addListenerFactory(ListenerFactory factory)
		if factory == null
			throw ENullPointer.new()
		end
		pListenerFactories.add(factory)
	end
	
	/**
	 * \brief Add listener factory using block.
	 * 
	 * Block receives as parameter Instance and returns Listener.
	 */
	func void addListenerFactory(Block blockFactory)
		pListenerFactories.add(BlockListenerFactory.new(blockFactory))
	end
	
	/** \brief Visit listener factories with block with argument ListenerFactory. */
	func void forEachListenerFactory(Block ablock)
		pListenerFactories.forEach(ablock)
	end
	
	/** \brief Create listeners from factories adding them to behavior instance. */
	func void createListeners(Instance instance)
		pListenerFactories.forEach(block ListenerFactory each
			instance.addListener(each.createListener(instance))
		end)
	end
	
	
	
	/** \brief Get instance in element from owner element class. */
	func Instance instance(BehaviorElement element)
		return element.getInstanceAt(getInstanceIndex()) cast Instance
	end
	
	
	
	/**
	 * \brief Get behavior in element class or \em null if absent.
	 * 
	 * Use this method to check if a particular BehaviorElementClass contains a behavior
	 * of type ECBehaviorComponent.
	 */
	static func ECBehaviorAnimated getBehaviorIn(BehaviorElementClass eclass)
		return eclass.findBehavior(block ECBehaviorAnimated each
			return true
		end) cast ECBehaviorAnimated
	end
	
	/**
	 * \brief Get behavior with id in element class or \em null if absent.
	 * 
	 * Use this method to check if a particular BehaviorElementClass contains a behavior
	 * of type ECBehaviorAnimated with specific identifier.
	 */
	static func ECBehaviorAnimated getBehaviorIn(BehaviorElementClass eclass, String id)
		return eclass.findBehavior(block ECBehaviorAnimated each
			return each.getID().equals(id)
		end) cast ECBehaviorAnimated
	end
	
	/**
	 * \brief Get list of all behaviors in element.
	 * 
	 * Returns list contains ECBehaviorAnimated behaviors in the order they have
	 * been created in the element.
	 */
	static func Array getAllBehaviorsIn(BehaviorElementClass eclass)
		return eclass.collectBehaviors(block ECBehaviorAnimated each
			return true
		end)
	end
	
	
	
	/**
	 * \brief Get instance in element or \em null if absent.
	 * 
	 * Use this method to check if a particular BehaviorElement contains a behavior instance
	 * of type ECBehaviorAnimated.Instance . If more than one instance is present returns
	 * the first instance.
	 */
	static func Instance getInstanceIn(BehaviorElement element)
		return element.findInstance(block Instance each
			return true
		end) cast Instance
	end
	
	/**
	 * \brief Get instance with id in element or \em null if absent.
	 * 
	 * Use this method to check if a particular BehaviorElement contains a behavior instance
	 * of type ECBehaviorAnimated.Instance with specific identifier.
	 */
	static func Instance getInstanceIn(BehaviorElement element, String id)
		return element.findInstance(block Instance each
			return each.getECBehavior().getID().equals(id)
		end) cast Instance
	end
	
	/**
	 * \brief Get list of all instances in element.
	 * 
	 * Returns list contains ECBehaviorAnimated.Instance instances in the order they have
	 * been created in the element.
	 */
	static func Array getAllInstancesIn(BehaviorElement element)
		return element.collectInstances(block Instance each
			return true
		end)
	end
	
	
	
	/** \brief Create Behavior instance. */
	func ECBehaviorInstance createInstance(BehaviorElement element)
		return Instance.new(this, element)
	end
end
