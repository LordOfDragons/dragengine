/* 
 * Drag[en]gine DragonScript Script Module
 *
 * Copyright (C) 2020, Roland Pl√ºss (roland@rptd.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */


namespace Dragengine.Scenery

pin Dragengine.Gui
pin Dragengine.LoadSave
pin Dragengine.Preloading
pin Dragengine.Utils
pin Dragengine.TriggerSystem


/**
 * \brief Behavior element behavior adding animation support.
 * 
 * Playings back an animation using an animator for an ECBehaviorComponent. By default the
 * ECBehaviorComponent with empty identifier is animated. Multiple ECBehaviorAnimated
 * can be added targeting different ECBehaviorComponent using their identifier. It is
 * also possible to add multiple ECBehaviorAnimated manipulating the same ECBehaviorComponent
 * as long as the animators used are properly crafted. This can be used for example to add
 * overlayed animations like gestures onto an actor.
 * 
 * To use this behavior make sure to add first the ECBehaviorComponent to animate.
 * The example below adds to components and animates each using an own animator.
 * 
 * \code{.ds}
 * class MyElement extends BehaviorElementClass
 *    public func new()
 *       var ECBehaviorComponent component1 = ECBehaviorComponent.new(this)
 *       ECBehaviorAnimated.new(this, component1)
 *       
 *       var ECBehaviorComponent component2 = ECBehaviorComponent.new(this, "subComponent")
 *       ECBehaviorAnimated.new(this, component2)
 *    end
 * end
 * \endcode
 * 
 * Because multiple animator behaviors can animate the same component behavior the
 * animator behavior has an own identifier. In the example above the first string parameter
 * is the animator behavior identifier while the second string parameter is the component
 * behavior identifier to animate.
 * 
 * Element class properties have the prefix "animated{(id)}.".
 * 
 * \par Listening
 * 
 * Behavior elements and other behaviors can add listeners to the ECBehaviorAnimated.
 * Listeners are notified if the animation starts playing and when it stops playing. This
 * can be used to synchronize actions to these events. ECBehaviorAnimated can also use
 * trigger targets so listeners are not always required.
 * 
 * Another use for listeners is update animator controllers not handled by ECBehaviorAnimated
 * itself. ECBehaviorAnimated calls AnimatorInstance.apply() before it exits thinking.
 * If other behaviors modify the animator controller later on they need to call
 * AnimatorInstance.apply() again. If multiple behaviors affect the same animated component
 * this can put strain on the game engine modules and reduce performance. For this reason
 * listeners are also asked to update animator controllers. This allows multiple behaviors
 * to update individual controllers with AnimatorInstance.apply() to be called only once.
 * 
 * It is important to note that using listeners behaviors are asked to update animator
 * controllers before their think() method is called. For such behaviors it is best to
 * do their thinking inside the listener call avoiding think() to be used at all.
 * 
 * A typical usage pattern for such behaviors is to locate the animator controller to update
 * during construction time and to manipulated the controllers inside updateControllers().
 * This example shows this concept:
 * 
 * \code{.ds}
 * class MyListener extends ECBehaviorInstance.DefaultListener
 *    protected var AnimatorController pController
 *    
 *    public func new(ECBehaviorAnimated behavior)
 *       pController = behavior.getAnimatorInstance().getControllerNamed("special controller")
 *    end
 *    
 *    public func void updateControllers(Instance instance, float elapsed)
 *       pController.increment(elapsed)
 *    end
 * end
 * \endcode
 * 
 * This behavior does require the element class to be persistable (setPersistable).
 */
class ECBehaviorAnimated extends DefaultECBehavior
	/** \brief Listener for behavior instance events. */
	interface Listener
		/** \brief Start playing back. */
		func void startPlaying(Instance instance)
		
		/** \brief Stop playing. */
		func void stopPlaying(Instance instance)
		
		/** \brief Update controllers if required. */
		func void updateControllers(Instance instance, float elapsed)
		
		/** \brief Animation has been applied. */
		func void animationApplied(Instance instance)
	end
	
	/** \brief Default implementation of behavior instance listener. */
	class DefaultListener implements Listener
		/** \brief Create default listener. */
		public func new()
		end
		
		/** \brief Start playing back. */
		public func void startPlaying(Instance instance)
		end
		
		/** \brief Stop playing. */
		public func void stopPlaying(Instance instance)
		end
		
		/** \brief Update controllers if required. */
		public func void updateControllers(Instance instance, float elapsed)
		end
		
		/** \brief Animation has been applied. */
		public func void animationApplied(Instance instance)
		end
	end
	
	/** \brief Implementation of behavior instance listener using BooleanBehaviorListener. */
	class BooleanListener extends DefaultListener
		private var BooleanBehaviorListener pListener
		
		public func new(BooleanBehaviorListener listener)
			pListener = listener
		end
		
		public func void startPlaying(Instance instance)
			pListener.enabled()
		end
		
		public func void stopPlaying(Instance instance)
			pListener.disabled()
		end
	end
	
	/** \brief Factory creating listeners. */
	interface ListenerFactory
		/** \brief Create listener. */
		func Listener createListener(Instance instance)
	end
	
	/** \brief Factory creating listeners using block. */
	class BlockListenerFactory implements ListenerFactory
		private var Block pBlock
		
		/** \brief Create factory using block receiving Instance as parameter returning Listener. */
		public func new(Block blockFactory)
			if blockFactory == null
				throw ENullPointer.new()
			end
			pBlock = blockFactory
		end
		
		/** \brief Create listener. */
		public func Listener createListener(Instance instance)
			return pBlock.run(instance) cast Listener
		end
	end
	
	
	
	/** \brief Behavior instance. */
	class Instance extends DefaultECBehaviorInstance
		/** \brief Trigger listener to start playing back. */
		public class PlayingListener extends ECBehaviorTriggered.DefaultListener
			private var Instance pInstance
			
			public func new(Instance instance)
				pInstance = instance
			end
			
			public func void triggerExpressionTrue(ECBehaviorTriggered.Instance instance)
				pInstance.setPlaying(true)
			end
			
			public func void triggerExpressionFalse(ECBehaviorTriggered.Instance instance)
				pInstance.setPlaying(false)
			end
		end
		
		
		
		private var ECBehaviorAnimated pECBehavior
		private var AnimatorInstance pAnimatorInstance
		private var ECComposeAnimator.Playback pPlayback
		private var ECBehaviorTriggered.Instance pTrigger
		private var TSTriggerTable pTriggerTable
		private var TSNamedTriggerTarget pTargetPlaying
		private var bool pApplyPostThink
		private var Array pListeners
		
		private var ECBehaviorComponent.Instance pComponent
		
		
		
		/** \brief Create element. */
		public func new(ECBehaviorAnimated ecbehavior, BehaviorElement element) super(element)
			pECBehavior = ecbehavior
			pListeners = Array.new()
			pTriggerTable = ecbehavior.getTriggerTable()
			pTargetPlaying = TSNamedTriggerTarget.new()
			pApplyPostThink = ecbehavior.getApplyPostThink().getValue()
			
			pComponent = ecbehavior.getComponent().instance(element)
		end
		
		/** \brief Dispose of composeable instance. */
		public func void dispose()
			pPlayback = null
			pTrigger = null
			pTargetPlaying = null
			pListeners = null
			
			super.dispose()
		end
		
		
		
		/** \brief Initialize element from stub. */
		public func void init(StubElement stub)
			var BehaviorElement element = getElement()
			
			pAnimatorInstance = createAnimatorInstance(stub)
			
			if pAnimatorInstance != null
				pAnimatorInstance.setComponent(pComponent.getComponent())
			end
			
			pPlayback = createPlayback(stub)
			
			if pECBehavior.getControllerName() != null
				pPlayback.setControllerNamed(pECBehavior.getControllerName())
			end
			
			if pTriggerTable != null
				pTrigger = pECBehavior.getTrigger().instance(element)
				pTrigger.addListener(PlayingListener.new(this))
				
				pTargetPlaying.setName(pECBehavior.getTargetPlaying().getValue(stub))
			end
			
			setRequiresThink(pPlayback.getPlaying())
			
			pECBehavior.createListeners(this)
		end
		
		/**
		 * \brief Create animator instance for the element.
		 * 
		 * Default implementation uses ECComposeAnimator.createAnimatorInstance().
		 */
		protected func AnimatorInstance createAnimatorInstance(StubElement stub)
			return pECBehavior.getAnimator().createAnimatorInstance(getElement(), stub)
		end
		
		/**
		 * \brief Create playback instance helper.
		 * 
		 * Default implementation uses ECComposeAnimator.createPlayback().
		 */
		protected func ECComposeAnimator.Playback createPlayback(StubElement stub)
			return pECBehavior.getAnimator().createPlayback(pAnimatorInstance, stub)
		end
		
		
		
		/** \brief Behavior. */
		public func ECBehaviorAnimated getECBehavior()
			return pECBehavior
		end
		
		/** \brief Component behavior. */
		public func ECBehaviorComponent.Instance getComponent()
			return pComponent
		end
		
		/** \brief Trigger playing or \em null. */
		public func ECBehaviorTriggered.Instance getTrigger()
			return pTrigger
		end
		
		/** \brief Animator instance. */
		public func AnimatorInstance getAnimatorInstance()
			return pAnimatorInstance
		end
		
		/** \brief Playback. */
		public func ECComposeAnimator.Playback getPlayback()
			return pPlayback
		end
		
		/** \brief Playing back. */
		public func bool getPlaying()
			return pPlayback.getPlaying()
		end
		
		/** \brief Set if playing back. */
		public func void setPlaying(bool playing)
			if playing == pPlayback.getPlaying()
				return
			end
			
			if playing and not pPlayback.getLooping()
				pPlayback.rewind()
			end
			pPlayback.setPlaying(playing)
			setRequiresThink(pPlayback.getPlaying())
			
			if pPlayback.getPlaying()
				pTargetPlaying.fire()
				pListeners.forEach(block Listener each
					each.startPlaying(this)
				end)
				
				if pPlayback.getController() == null and not pPlayback.getLooping()
					// animator is missing or incorrectly set up while playback is not looping.
					// without this check the behavior would never stop playing. instead stop
					// which prevents scripts from breaking if waiting for animation to stop
					pPlayback.setPlaying(false)
				end
				
			else
				pTargetPlaying.reset()
				pListeners.forEach(block Listener each
					each.stopPlaying(this)
				end)
			end
		end
		
		/** \brief Playback time. */
		public func float getTime()
			return pPlayback.getTime()
		end
		
		/** \brief Set playback time. */
		public func void setTime(float time)
			pPlayback.setTime(time)
		end
		
		/**
		 * \brief Apply animator during post think instead off during think.
		 * \version 1.7
		 */
		public func bool getApplyPostThink()
			return pApplyPostThink
		end
		
		
		
		/** \brief Trigger table to link trigger expression to or \em null if not set. */
		public func TSTriggerTable getTriggerTable()
			return pTriggerTable
		end
		
		/** \brief Trigger table to link trigger expression to or \em null if not set. */
		protected func void setTriggerTable(TSTriggerTable triggerTable)
			pTriggerTable = triggerTable
		end
		
		/** \brief Trigger target to reflect playing state. */
		public func TSNamedTriggerTarget getTargetPlaying()
			return pTargetPlaying
		end
		
		
		
		/** \brief Add listener. */
		public func void addListener(Listener listener)
			if listener == null
				throw EInvalidParam.new()
			end
			pListeners.add(listener)
		end
		
		/** \brief Remove listener. */
		public func void removeListener(Listener listener)
			pListeners.remove(listener)
		end
		
		
		
		/** \brief Add element to game world. */
		public func void addToGameWorld()
			if pTriggerTable == null
				return
			end
			
			if pTrigger == null or pTrigger.getTriggerExpression() == null
				setPlaying(pPlayback.getPlaying())
			end
			
			pTargetPlaying.acquireTarget(pTriggerTable)
			if pPlayback.getPlaying()
				pTargetPlaying.fire()
				pListeners.forEach(block Listener each
					each.startPlaying(this)
				end)
			end
		end
		
		/** \brief Remove element from game world. */
		public func void removeFromGameWorld()
			pTargetPlaying.dropTarget()
		end
		
		/** \brief Think about what to do for the next frame update. */
		public func void think(float elapsed)
			if not pApplyPostThink
				applyAnimator(elapsed)
			end
		end
		
		/** Post think. */
		public func void postThink(float elapsed)
			if pApplyPostThink
				applyAnimator(elapsed)
			end
		end
		
		/** Apply animator. */
		protected func void applyAnimator(float elapsed)
			if not pPlayback.getPlaying()
				return
			end
			
			if pPlayback.getController() != null
				var AnimatorController controller = pPlayback.getController()
				if controller != null
					controller.increment(elapsed * pPlayback.getPlaySpeed())
				end
				
				pListeners.forEach(block Listener each
					each.updateControllers(this, elapsed)
				end)
				
				pPlayback.apply()
				
				pListeners.forEach(block Listener each
					each.animationApplied(this)
				end)
				
				if not controller.getClamp() or not controller.isAtUpper()
					return
				end
			end
			
			// finished
			pPlayback.setPlaying(false)
			setRequiresThink(false)
			pTargetPlaying.reset()
			pListeners.forEach(block Listener each
				each.stopPlaying(this)
			end)
		end
		
		
		
		/** \brief Read element from file. */
		public func void readFromFile(PersistencyEnvironment env, FileReader reader)
			select reader.readByte() // version
			case 0
				pPlayback.readFromFile(env, reader)
				setRequiresThink(pPlayback.getPlaying())
				
			else
				throw EInvalidParam.new("unsupported version")
			end
		end
		
		/** \brief Write element to file. */
		public func void writeToFile(PersistencyEnvironment env, FileWriter writer)
			writer.writeByte(0) // version
			
			pPlayback.writeToFile(env, writer)
		end
	end
	
	
	
	private var ECBehaviorComponent pComponent
	private var ECComposeAnimator pAnimator
	private var String pControllerName
	private var ECBehaviorTriggered pTrigger
	private var ECPString pTargetPlaying
	private var ECPBoolean pApplyPostThink
	private var TSTriggerTable pTriggerTable
	private var Array pListenerFactories
	
	
	
	/** \brief Create behavior element class. */
	public func new(BehaviorElementClass eclass, ECBehaviorComponent component) \
	this(eclass, component, BaseGameApp.getApp().getLoaders(), null, "")
	end
	
	/** \brief Create behavior element class. */
	public func new(BehaviorElementClass eclass, ECBehaviorComponent component, String id) \
	this(eclass, component, BaseGameApp.getApp().getLoaders(), null, id)
	end
	
	/** \brief Create behavior element class. */
	public func new(BehaviorElementClass eclass, ECBehaviorComponent component, String id, String subID) \
	this(eclass, component, BaseGameApp.getApp().getLoaders(), null, id, subID)
	end
	
	/** \brief Create behavior element class. */
	public func new(BehaviorElementClass eclass, ECBehaviorComponent component, Loaders loaders, \
	TSTriggerTable triggerTable) this(eclass, component, loaders, triggerTable, "")
	end
	
	/** \brief Create behavior element class. */
	public func new(BehaviorElementClass eclass, ECBehaviorComponent component, Loaders loaders, \
	TSTriggerTable triggerTable, String id) this(eclass, component, loaders, triggerTable, id, \
	id.empty() if "animated" else "animated(" + id + ")")
	end
	
	public func new(BehaviorElementClass eclass, ECBehaviorComponent component, Loaders loaders, \
	TSTriggerTable triggerTable, String id, String subID) \
	this(eclass, component, loaders, triggerTable, id, subID, subID + ".")
	end
	
	public func new(BehaviorElementClass eclass, ECBehaviorComponent component, Loaders loaders, \
	TSTriggerTable triggerTable, String id, String subID, String prefix) super(eclass, id)
		if component == null
			throw ENullPointer.new("component")
		end
		
		pComponent = component
		pTriggerTable = triggerTable
		pListenerFactories = Array.new()
		
		pAnimator = ECComposeAnimator.new(eclass, loaders, prefix)
		
		pTrigger = ECBehaviorTriggered.new(eclass, triggerTable, subID, prefix + "trigger")
		
		pTargetPlaying = ECPString.new(prefix + "targetPlaying", "")
		eclass.addProperty(pTargetPlaying)
		
		pApplyPostThink = ECPBoolean.new(prefix + "applyPostThink", false)
		eclass.addProperty(pApplyPostThink)
		
		eclass.addBehavior(this)
	end
	
	/** \brief Dispose of behavior. */
	public func void dispose()
		pComponent = null
		pListenerFactories = null
		super.dispose()
	end
	
	
	
	/** \brief Component behavior to animate. */
	public func ECBehaviorComponent getComponent()
		return pComponent
	end
	
	/** \brief Composeable animator for element class. */
	public func ECComposeAnimator getAnimator()
		return pAnimator
	end
	
	/** \brief Controller name or null to use first controller. */
	public func String getControllerName()
		return pControllerName
	end
	
	/** \brief Set controller name or null to use first controller. */
	public func void setControllerName(String name)
		pControllerName = name
	end
	
	/** \brief Trigger playing. */
	public func ECBehaviorTriggered getTrigger()
		return pTrigger
	end
	
	/** \brief Target playing. */
	public func ECPString getTargetPlaying()
		return pTargetPlaying
	end
	
	/**
	 * \brief Apply animator during post think instead off during think.
	 * \version 1.7
	 */
	public func ECPBoolean getApplyPostThink()
		return pApplyPostThink
	end
	
	/** \brief Trigger table or \em null if not used. */
	public func TSTriggerTable getTriggerTable()
		return pTriggerTable
	end
	
	/** \brief Set trigger table or \em null if not used. */
	protected func void setTriggerTable(TSTriggerTable triggerTable)
		pTriggerTable = triggerTable
	end
	
	/** \brief Add listener factory. */
	public func void addListenerFactory(ListenerFactory factory)
		if factory == null
			throw ENullPointer.new()
		end
		pListenerFactories.add(factory)
	end
	
	/**
	 * \brief Add listener factory using block.
	 * 
	 * Block receives as parameter Instance and returns Listener.
	 */
	public func void addListenerFactory(Block blockFactory)
		pListenerFactories.add(BlockListenerFactory.new(blockFactory))
	end
	
	/** \brief Visit listener factories with block with argument ListenerFactory. */
	public func void forEachListenerFactory(Block ablock)
		pListenerFactories.forEach(ablock)
	end
	
	/** \brief Create listeners from factories adding them to behavior instance. */
	public func void createListeners(Instance instance)
		pListenerFactories.forEach(block ListenerFactory each
			instance.addListener(each.createListener(instance))
		end)
	end
	
	
	
	/** \brief Get instance in element from owner element class. */
	public func Instance instance(BehaviorElement element)
		return element.getInstanceAt(getInstanceIndex()) cast Instance
	end
	
	
	
	/**
	 * \brief Get behavior in element class or \em null if absent.
	 * 
	 * Use this method to check if a particular BehaviorElementClass contains a behavior
	 * of type ECBehaviorComponent.
	 */
	static public func ECBehaviorAnimated getBehaviorIn(BehaviorElementClass eclass)
		return eclass.findBehavior(block ECBehaviorAnimated each
			return true
		end) cast ECBehaviorAnimated
	end
	
	/**
	 * \brief Get behavior with id in element class or \em null if absent.
	 * 
	 * Use this method to check if a particular BehaviorElementClass contains a behavior
	 * of type ECBehaviorAnimated with specific identifier.
	 */
	static public func ECBehaviorAnimated getBehaviorIn(BehaviorElementClass eclass, String id)
		return eclass.findBehavior(block ECBehaviorAnimated each
			return each.getID().equals(id)
		end) cast ECBehaviorAnimated
	end
	
	/**
	 * \brief Get list of all behaviors in element.
	 * 
	 * Returns list contains ECBehaviorAnimated behaviors in the order they have
	 * been created in the element.
	 */
	static public func Array getAllBehaviorsIn(BehaviorElementClass eclass)
		return eclass.collectBehaviors(block ECBehaviorAnimated each
			return true
		end)
	end
	
	
	
	/**
	 * \brief Get instance in element or \em null if absent.
	 * 
	 * Use this method to check if a particular BehaviorElement contains a behavior instance
	 * of type ECBehaviorAnimated.Instance . If more than one instance is present returns
	 * the first instance.
	 */
	static public func Instance getInstanceIn(BehaviorElement element)
		return element.findInstance(block Instance each
			return true
		end) cast Instance
	end
	
	/**
	 * \brief Get instance with id in element or \em null if absent.
	 * 
	 * Use this method to check if a particular BehaviorElement contains a behavior instance
	 * of type ECBehaviorAnimated.Instance with specific identifier.
	 */
	static public func Instance getInstanceIn(BehaviorElement element, String id)
		return element.findInstance(block Instance each
			return each.getECBehavior().getID().equals(id)
		end) cast Instance
	end
	
	/**
	 * \brief Get list of all instances in element.
	 * 
	 * Returns list contains ECBehaviorAnimated.Instance instances in the order they have
	 * been created in the element.
	 */
	static public func Array getAllInstancesIn(BehaviorElement element)
		return element.collectInstances(block Instance each
			return true
		end)
	end
	
	
	
	/** \brief Create Behavior instance. */
	public func ECBehaviorInstance createInstance(BehaviorElement element)
		return Instance.new(this, element)
	end
end
