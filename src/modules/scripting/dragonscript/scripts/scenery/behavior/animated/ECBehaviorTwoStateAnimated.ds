/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */


namespace Dragengine.Scenery

pin Dragengine.Gui
pin Dragengine.LoadSave
pin Dragengine.Preloading
pin Dragengine.Utils
pin Dragengine.TriggerSystem
pin Dragengine.BehaviorTreeSystem
pin Dragengine.Gui.Events


/**
 * \brief Behavior element behavior adding two state animation support.
 * 
 * Plays back animations for behavior elements in two different states with transition
 * between them. Animators are required to have controllers name the right way to work with
 * this behavior. Controllers not matching the require name are ignored. It is not necessary
 * to have all controller names covered. Actually this behavior optimizes at runtime if not
 * all controllers are used.
 * 
 * - "deactivated": Controller used while the behavior is in deactivated state.
 *                  This is typically an unclamped controller. If missing behavior does
 *                  not think consuming no processing time.
 * - "activated": Controller used while the behavior is in activated state.
 *                This is typically an unclamped controller. If missing behavior does
 *                not think consuming no processing time.
 * - "activating": Controller used while behavior is transitioning from deactivated state
 *                 to activated state. The transition ends when the controller reaches
 *                 the upper limit. For this reason the controller has to be a clamped
 *                 controller otherwise the transition never ends. If missing behavior
 *                 transitions immediately to activated state.
 * - "deactivating": Controller used while behavior is transitioning from activated state
 *                   to deactivated state. The transition ends when the controller reaches
 *                   the upper limit. For this reason the controller has to be a clamped
 *                   controller otherwise the transition never ends. If missing behavior
 *                   transitions immediately to deactivated state.
 * 
 * The controller names can be changed using the setControllerName*() methods.
 * 
 * \par Activate Trigger
 * 
 * When changing to true the element is switched to the activated state. When changing to
 * false the element is switched to the deactivated state. If the switch happens during
 * transition time the transition is finished before switching.
 * 
 * \par Configuration
 * 
 * By default the ECBehaviorComponent with empty identifier is animated. Multiple
 * ECBehaviorTwoStateAnimated can be added targeting different ECBehaviorComponent using
 * their identifier. It is also possible to add multiple ECBehaviorTwoStateAnimated
 * manipulating the same ECBehaviorComponent as long as the animators used are properly
 * crafted. This can be used for example to add overlayed animations.
 * 
 * To use this behavior make sure to add first the ECBehaviorComponent to animate.
 * The example below adds to components and animates each using an own animator.
 * 
 * \code{.ds}
 * class MyElement extends BehaviorElementClass
 *    var ECBehaviorComponent component
 *    var ECBehaviorComponent subComponent
 *    
 *    func new()
 *       component = ECBehaviorComponent.new(this)
 *       ECBehaviorTwoStateAnimated.new(this, component)
 *       
 *       subComponent = ECBehaviorComponent.new(this, "subComponent")
 *       ECBehaviorTwoStateAnimated.new(this, subComponent, "subAnimator")
 *    end
 * end
 * \endcode
 * 
 * Because multiple animator behaviors can animate the same component behavior the
 * animator behavior has an own identifier. In the example above the first string parameter
 * is the animator behavior identifier while the second string parameter is the component
 * behavior identifier to animate.
 * 
 * Element class properties have the prefix "twoStateAnimated{(id)}.".
 * 
 * This behavior does require the element class to be persistable (setPersistable).
 * 
 * \see https://developer.dragondreams.ch/wiki/doku.php/dragengine:modules:dragonscript:behavior_twostateanimated
 */
class ECBehaviorTwoStateAnimated extends DefaultECBehavior
	/** \brief Listener for behavior instance events. */
	interface Listener
		/** \brief Start transition from deactivated state to activated state. */
		func void startActivate(Instance instance)
		
		/** \brief Finished transition from deactivated state to activated state. */
		func void stopActivate(Instance instance)
		
		/** \brief Start transition from activated state to deactivated state. */
		func void startDeactivate(Instance instance)
		
		/** \brief Finished transition from activated state to deactivated state. */
		func void stopDeactivate(Instance instance)
		
		/** \brief Update controllers if required. */
		func void updateControllers(Instance instance, float elapsed)
		
		/** \brief Animation has been applied. */
		func void animationApplied(Instance instance)
	end
	
	/** \brief Default implementation of behavior instance listener. */
	class DefaultListener implements Listener
		/** \brief Create default listener. */
		func new()
		end
		
		/** \brief Start transition from deactivated state to activated state. */
		func void startActivate(Instance instance)
		end
		
		/** \brief Finished transition from deactivated state to activated state. */
		func void stopActivate(Instance instance)
		end
		
		/** \brief Start transition from activated state to deactivated state. */
		func void startDeactivate(Instance instance)
		end
		
		/** \brief FInished transition from activated state to deactivated state. */
		func void stopDeactivate(Instance instance)
		end
		
		/** \brief Update controllers if required. */
		func void updateControllers(Instance instance, float elapsed)
		end
		
		/** \brief Animation has been applied. */
		func void animationApplied(Instance instance)
		end
	end
	
	/** \brief Implementation of behavior instance listener using BooleanBehaviorListener. */
	class BooleanListener extends DefaultListener
		var BooleanBehaviorListener pListener
		var bool pFull
		
		/** \brief Create boolean listener operating on stopActivate() and startDeactivate(). */
		func new(BooleanBehaviorListener listener) this(listener, false)
		end
		
		/**
		 * \brief Create boolean listener.
		 * \param full If true operates on startActivate() and stopDeactivate() otherwise
		 *             operates on stopActivate() and startDeactivate().
		 */
		func new(BooleanBehaviorListener listener, bool full)
			pListener = listener
			pFull = full
		end
		
		func void startActivate(Instance instance)
			if pFull
				pListener.enabled()
			end
		end
		
		func void stopDeactivate(Instance instance)
			if pFull
				pListener.disabled()
			end
		end
		
		func void stopActivate(Instance instance)
			if not pFull
				pListener.enabled()
			end
		end
		
		func void startDeactivate(Instance instance)
			if not pFull
				pListener.disabled()
			end
		end
	end
	
	/** \brief Factory creating listeners. */
	interface ListenerFactory
		/** \brief Create listener. */
		func Listener createListener(Instance instance)
	end
	
	/** \brief Factory creating listeners using block. */
	class BlockListenerFactory implements ListenerFactory
		var Block pBlock
		
		/** \brief Create factory using block receiving Instance as parameter returning Listener. */
		func new(Block blockFactory)
			if blockFactory == null
				throw ENullPointer.new()
			end
			pBlock = blockFactory
		end
		
		/** \brief Create listener. */
		func Listener createListener(Instance instance)
			return pBlock.run(instance) cast Listener
		end
	end
	
	/**
	 * \brief Behavior factory.
	 * \version 1.25
	 * 
	 * Automatically assigns these behaviors if present before adding:
	 * - Optional: \ref ECBehaviorComponent
	 * 
	 * Example XML element class:
	 * \code{.xml}
	 * <behavior type='ECBehaviorTwoStateAnimated'>
	 *   <!-- optional: use component with id instead of empty string -->
	 *   <string name='component'>second</string>
	 * 
	 *   <!-- optional: use BaseGameApp trigger table. game can add more supported values. default is 'default' -->
	 *   <string name='triggerTable'>default</string>
	 *   
	 *   <!-- optional: identifier of ECBehaviorTriggered to synchronize with or empty
	 *                  string to not synchronize. default is empty string. -->
	 *   <string name='trigger.synchronize'>other</string>
	 * 
	 *   <!-- optional: name of deactivated controller. default is 'deactivated' -->
	 *   <string name='controllerNameDeactivated'>deactivated</string>
	 * 
	 *   <!-- optional: name of activated controller. default is 'activated' -->
	 *   <string name='controllerNameActivated'>activated</string>
	 * 
	 *   <!-- optional: name of activating controller. default is 'activating' -->
	 *   <string name='controllerNameActivating'>activating</string>
	 * 
	 *   <!-- optional: name of deactivating controller. default is 'deactivating' -->
	 *   <string name='controllerNameDeactivating'>deactivating</string>
	 *   
	 *   <!-- optional: use behavior tree with id instead of empty string -->
	 *   <string name='behaviorTree'>second</string>
	 * </behavior>
	 * 
	 * <!-- for adding multiple behaviors use unique identifiers -->
	 * <behavior type='ECBehaviorTwoStateAnimated' id='second'>
	 *   ...
	 * </behavior>
	 * \endcode
	 * 
	 * Element class properties added by the behavior can also be set directly inside the tag
	 * be removing the property name prefix and starting with a "." (for example ".propertyName").
	 */
	class Factory implements BehaviorFactory
		func new()
		end
		
		func String factoryId()
			return "ECBehaviorTwoStateAnimated"
		end
		
		func ECBehavior addBehavior(BehaviorElementClass eclass, String id, Dictionary parameters)
			var ECBehaviorTwoStateAnimated behavior = ECBehaviorTwoStateAnimated.new(eclass,\
				eclass.sharedFactoryHelper.defaultComponent(eclass, parameters),\
				BaseGameApp.getApp().getLoaders(),\
				getTriggerTableFor(parameters.getAt("triggerTable", "default") cast String), id)
			
			var String value = parameters.getAt("controllerNameDeactivated", null) cast String
			if value != null
				behavior.setControllerNameDeactivated(value)
			end
			
			value = parameters.getAt("controllerNameActivated", null) cast String
			if value != null
				behavior.setControllerNameActivated(value)
			end
			
			value = parameters.getAt("controllerNameActivating", null) cast String
			if value != null
				behavior.setControllerNameActivating(value)
			end
			
			value = parameters.getAt("controllerNameDeactivating", null) cast String
			if value != null
				behavior.setControllerNameDeactivating(value)
			end
			
			behavior.getTrigger().setSynchronize(eclass,\
				parameters.getAt("trigger.synchronize", null) cast String)
			
			behavior.setBehaviorTree(eclass.sharedFactoryHelper.optionalBehaviorTree(eclass, parameters))
			
			eclass.sharedFactoryHelper.setPropertiesFromParameters(\
				eclass, parameters, "twoStateAnimated", id)
			return behavior
		end
		
		/**
		 * \brief Trigger table matching value.
		 * 
		 * Default implementation returns \ref BaseGameApp#getTriggerTable() for value 'default'
		 * and null for all other values. Overwrite to accept other values.
		 */
		func TSTriggerTable getTriggerTableFor(String value)
			return BehaviorElementClass.sharedFactoryHelper.triggerTable(value)
		end
	end
	
	
	
	/** \brief Behavior instance. */
	class Instance extends DefaultECBehaviorInstance
		/** \brief State. */
		public enum State
			deactivated
			activating
			activated
			deactivating
		end
		
		/**
		 * \brief Behavior tree action "twoStateAnimated{(id)}.set".
		 * \version 1.26
		 */
		class BTASet implements BTAction
			var Instance pInstance
			
			func new(Instance instance)
				pInstance = instance
			end
			
			func BTResult runAction(BTContext context, Dictionary parameters)
				if parameters.has("activate")
					pInstance.activate()
					
				elif parameters.has("deactivate")
					pInstance.deactivate()
					
				elif parameters.has("reverse.activating")
					pInstance.reverseActivating()
					
				elif parameters.has("reverse.deactivating")
					pInstance.reverseDeactivating()
					
				elif parameters.has("set.deactivated")
					pInstance.setDeactivated()
					
				elif parameters.has("set.activating")
					pInstance.activate(0, true)
					
				elif parameters.has("set.activated")
					pInstance.setActivated()
					
				elif parameters.has("set.deactivating")
					pInstance.deactivate(0, true)
				end
				
				return BTResult.success
			end
		end
		
		/**
		 * \brief Behavior tree action/condition "twoStateAnimated{(id)}.check".
		 * \version 1.26
		 */
		class BTACheck implements BTAction, BTCondition
			var Instance pInstance
			var String pPrefix
			
			func new(Instance instance, String prefix)
				pInstance = instance
				pPrefix = prefix
			end
			
			func BTResult runAction(BTContext context, Dictionary parameters)
				return check("", parameters) if BTResult.success else BTResult.failure
			end
			
			func bool evaluateCondition(BTContext context, Dictionary parameters)
				return check(pPrefix, parameters)
			end
			
			func bool check(String prefix, Dictionary parameters)
				var bool result = true
				var Object value
				
				value = parameters.getAt(prefix + "deactivated", null)
				if value != null
					return pInstance.isDeactivated() == value.equals("true")
				end
				
				value = parameters.getAt(prefix + "activated", null)
				if value != null
					return pInstance.isActivated() == value.equals("true")
				end
				
				value = parameters.getAt(prefix + "activating", null)
				if value != null
					return pInstance.isActivating() == value.equals("true")
				end
				
				value = parameters.getAt(prefix + "deactivating", null)
				if value != null
					return pInstance.isDeactivating() == value.equals("true")
				end
				
				value = parameters.getAt(prefix + "progress.activate.less", null)
				if value != null
					result &= pInstance.getPercentageDoneActivate() < (value cast String).toFloat()
				end
				
				value = parameters.getAt(prefix + "progress.activate.greater", null)
				if value != null
					result &= pInstance.getPercentageDoneActivate() > (value cast String).toFloat()
				end
				
				value = parameters.getAt(prefix + "progress.deactivate.less", null)
				if value != null
					result &= pInstance.getPercentageDoneDeactivate() < (value cast String).toFloat()
				end
				
				value = parameters.getAt(prefix + "progress.deactivate.greater", null)
				if value != null
					result &= pInstance.getPercentageDoneDeactivate() > (value cast String).toFloat()
				end
				
				return result
			end
		end
		
		/** \brief Trigger listener to switch state. */
		public class SwitchStateListener extends ECBehaviorTriggered.DefaultListener
			var Instance pInstance
			
			func new(Instance instance)
				pInstance = instance
			end
			
			func void triggerExpressionTrue(ECBehaviorTriggered.Instance instance)
				if pInstance.getElement().isReallyInGameWorld()
					pInstance.activate()
					
				else
					pInstance.setActivated()
				end
			end
			
			func void triggerExpressionFalse(ECBehaviorTriggered.Instance instance)
				if pInstance.getElement().isReallyInGameWorld()
					pInstance.deactivate()
					
				else
					pInstance.setDeactivated()
				end
			end
		end
		
		
		
		var ECBehaviorTwoStateAnimated pECBehavior
		var State pState
		var AnimatorInstance pAnimatorInstance
		var float pPlaySpeed
		var ECBehaviorTriggered.Instance pTrigger
		var TSTriggerTable pTriggerTable
		var AnimatorController pControllerDeactivated
		var AnimatorController pControllerActivate
		var AnimatorController pControllerDeactivate
		var AnimatorController pControllerActivated
		var TSNamedTriggerTarget pTargetActivated
		var TSNamedTriggerTarget pTargetActivating
		var TSNamedTriggerTarget pTargetDeactivating
		var Array pListeners
		
		var ECBehaviorComponent.Instance pComponent
		
		
		
		/** \brief Create element. */
		func new(ECBehaviorTwoStateAnimated ecbehavior, BehaviorElement element) super(element)
			pECBehavior = ecbehavior
			pState = State.deactivated
			pPlaySpeed = pECBehavior.getPlaySpeed().getValue()
			pTriggerTable = ecbehavior.getTriggerTable()
			pTargetActivated = TSNamedTriggerTarget.new()
			pTargetActivating = TSNamedTriggerTarget.new()
			pTargetDeactivating = TSNamedTriggerTarget.new()
			pListeners = Array.new()
			
			pComponent = ecbehavior.getComponent().instance(element)
		end
		
		/** \brief Dispose of composeable instance. */
		func void dispose()
			pTrigger = null
			pTargetActivated = null
			pTargetActivating = null
			pTargetDeactivating = null
			pListeners = null
			
			super.dispose()
		end
		
		
		
		/** \brief Initialize element from stub. */
		func void init(StubElement stub)
			var BehaviorElement element = getElement()
			
			pAnimatorInstance = createAnimatorInstance(stub)
			if pAnimatorInstance != null
				pControllerDeactivated = pAnimatorInstance.getControllerNamed(\
					pECBehavior.getControllerNameDeactivated())
				pControllerActivate = pAnimatorInstance.getControllerNamed(\
					pECBehavior.getControllerNameActivating())
				pControllerDeactivate = pAnimatorInstance.getControllerNamed(\
					pECBehavior.getControllerNameDeactivating())
				pControllerActivated = pAnimatorInstance.getControllerNamed(\
					pECBehavior.getControllerNameActivated())
				
				pAnimatorInstance.setComponent(getComponent().getComponent())
			end
			
			setPlaySpeed(stub.getPropertyFloatFor(pECBehavior.getPlaySpeed().getName(), pPlaySpeed))
			
			if pTriggerTable != null
				pTrigger = pECBehavior.getTrigger().synchronizedOrSelf().instance(element)
			end
			
			pTargetActivated.setName(pECBehavior.getTargetActivated().getValue(stub))
			pTargetActivating.setName(pECBehavior.getTargetActivating().getValue(stub))
			pTargetDeactivating.setName(pECBehavior.getTargetDeactivating().getValue(stub))
			
			updateRequiresThink()
			
			pECBehavior.createListeners(this)
		end
		
		/**
		 * \brief Create animator instance for the element.
		 * 
		 * Default implementation uses createAnimatorInstance().
		 */
		protected func AnimatorInstance createAnimatorInstance(StubElement stub)
			return pECBehavior.createAnimatorInstance(getElement(), stub)
		end
		
		/**
		 * \brief Source identification for use with exceptions only.
		 * 
		 * Default implementation returns relevant stub parameter or class property depending on
		 * which one is set.
		 */
		protected func String getAnimatorSource(StubElement stub)
			return stub.getPropertyValueFor(pECBehavior.getAnimator().getName(), \
				pECBehavior.getAnimator().getPath())
		end
		
		
		
		/** \brief Behavior. */
		func ECBehaviorTwoStateAnimated getECBehavior()
			return pECBehavior
		end
		
		/** \brief Component behavior. */
		func ECBehaviorComponent.Instance getComponent()
			return pComponent
		end
		
		
		
		/** \brief Animator instance. */
		func AnimatorInstance getAnimatorInstance()
			return pAnimatorInstance
		end
		
		/** \brief Deactivated playback animator controller or null. */
		func AnimatorController getControllerDeactivated()
			return pControllerDeactivated
		end
		
		/** \brief Activate animator controller or null. */
		func AnimatorController getControllerActivate()
			return pControllerActivate
		end
		
		/** \brief Deactivate animator controller or null. */
		func AnimatorController getControllerDeactivate()
			return pControllerDeactivate
		end
		
		/** \brief Activated playback animator controller or null. */
		func AnimatorController getControllerActivated()
			return pControllerActivated
		end
		
		
		
		/** \brief Playback speed. */
		func float getPlaySpeed()
			return pPlaySpeed
		end
		
		/** \brief Set playback speed. */
		func void setPlaySpeed(float playSpeed)
			pPlaySpeed = DEMath.max(playSpeed, 0.001)
		end
		
		
		
		/** \brief Trigger table to link trigger expression to or \em null if not set. */
		func TSTriggerTable getTriggerTable()
			return pTriggerTable
		end
		
		/** \brief Trigger table to link trigger expression to or \em null if not set. */
		protected func void setTriggerTable(TSTriggerTable triggerTable)
			pTriggerTable = triggerTable
		end
		
		/** \brief Activate trigger or \em null if not used. */
		func ECBehaviorTriggered.Instance getTrigger()
			return pTrigger
		end
		
		/** \brief Trigger target to reflect activated state. */
		func TSNamedTriggerTarget getTargetActivated()
			return pTargetActivated
		end
		
		/** \brief Trigger target to reflect activating state. */
		func TSNamedTriggerTarget getTargetActivating()
			return pTargetActivating
		end
		
		/** \brief Trigger target to reflect deactivating state. */
		func TSNamedTriggerTarget getTargetDeactivating()
			return pTargetDeactivating
		end
		
		
		
		/** \brief State. */
		func State getState()
			return pState
		end
		
		/** \brief Is in activated state. */
		func bool isActivated()
			return pState == State.activated
		end
		
		/** \brief Is in deactivated state. */
		func bool isDeactivated()
			return pState == State.deactivated
		end
		
		/** \brief Is activating. */
		func bool isActivating()
			return pState == State.activating
		end
		
		/** \brief Is deactivating. */
		func bool isDeactivating()
			return pState == State.deactivating
		end
		
		/** \brief Percentage of activating done in the range from 0 to 1. */
		func float getPercentageDoneActivate()
			if pControllerActivate != null
				return pControllerActivate.getRelativeValue()
				
			else
				return 0
			end
		end
		
		/** \brief Percentage of deactivating done in the range from 0 to 1. */
		func float getPercentageDoneDeactivate()
			if pControllerDeactivate != null
				return pControllerDeactivate.getRelativeValue()
				
			else
				return 0
			end
		end
		
		/** \brief Set state. */
		protected func void setState(State state)
			pState = state
		end
		
		
		
		/**
		 * \brief If in deactivated state start transition to activated state.
		 */
		func void activate()
			activate(0)
		end
		
		/**
		 * \brief If in deactivated state start transition to activated state.
		 * 
		 * \param startTime Set playback time startTime after controller lower value.
		 */
		func void activate(float startTime)
			activate(startTime, false)
		end
		
		/**
		 * \brief If in deactivated state start transition to activated state.
		 * 
		 * \param startTime Set playback time startTime after controller lower value.
		 */
		func void activate(float startTime, bool force)
			if pAnimatorInstance == null
				return
			end
			
			if pState != State.deactivated
				if not force or pState == State.activated
					return
				end
				
				if pState == State.deactivating
					pListeners.forEach(block Listener each
						each.stopDeactivate(this)
					end)
				end
			end
			
			if pControllerActivate == null
				setActivated()
				return
			end
			
			pState = State.activating
			
			pControllerActivate.setToLower()
			pControllerActivate.increment(startTime)
			
			if pControllerDeactivate != null
				pControllerDeactivate.setToLower()
			end
			if pControllerActivated != null
				pControllerActivated.setToLower()
			end
			updateRequiresThink()
			
			pTargetActivating.fire()
			
			pListeners.forEach(block Listener each
				each.startActivate(this)
			end)
		end
		
		/**
		 * \brief If in activated state start transition to deactivated state.
		 */
		func void deactivate()
			deactivate(0)
		end
		
		/**
		 * \brief If in activated state start transition to deactivated state.
		 * 
		 * \param startTime Set playback time startTime after controller lower value.
		 */
		func void deactivate(float startTime)
			deactivate(startTime, false)
		end
		
		/**
		 * \brief If in activated state start transition to deactivated state.
		 * 
		 * \param startTime Set playback time startTime after controller lower value.
		 */
		func void deactivate(float startTime, bool force)
			if pAnimatorInstance == null
				return
			end
			
			if pState != State.activated
				if not force or pState == State.deactivated
					return
				end
				
				if pState == State.activating
					pListeners.forEach(block Listener each
						each.stopActivate(this)
					end)
				end
			end
			
			if pControllerDeactivate == null
				setDeactivated()
				return
			end
			
			pState = State.deactivating
			
			pControllerDeactivate.setToLower()
			pControllerDeactivate.increment(startTime)
			
			if pControllerDeactivated != null
				pControllerDeactivated.setToUpper()
			end
			if pControllerActivate != null
				pControllerActivate.setToUpper()
			end
			updateRequiresThink()
			
			pTargetDeactivating.fire()
			
			pListeners.forEach(block Listener each
				each.startDeactivate(this)
			end)
		end
		
		/**
		 * \brief Reverse activating.
		 * 
		 * If activating notifies stopActivate() then startDeactivate() and switches
		 * to deactivating with deactivate controller set to mirror activate controller.
		 * If the animator is properly crafted this allows to reverse the animation while
		 * in progress for example to simulate a door stop closing because something is
		 * blocking the door.
		 */
		func void reverseActivating()
			if pState != State.activating or pAnimatorInstance == null
				return
			end
			
			// we could set the state immediately to deactivating then sending stopActivate and
			// startDeactivate notification. this can though cause problems if the listeners are
			// set up in an unfortunate way. to avoid such problems first switch to activated state
			// then to deactivating state. this way listeners should not end up in a bad state
			
			// new value to use for deactivate
			var float value = 0
			if pControllerActivate != null
				value = 1.0 - pControllerActivate.getRelativeValue()
			end
			
			// switch to actived state and send stopActivate notification
			pState = State.activated
			
			if pControllerActivate != null
				pControllerActivate.setToUpper()
			end
			if pControllerDeactivate != null
				pControllerDeactivate.setToLower()
			end
			if pControllerActivated != null
				pControllerActivated.setToLower()
			end
			
			pTargetActivating.reset()
			
			pListeners.forEach(block Listener each
				each.stopActivate(this)
			end)
			
			// it is possible a listener switched our state. if this is the case stick with
			// the new state and do nothing. the listener is responsible for potential problems
			if pState != State.activated
				return
			end
			
			// switch to deactivating and send startDeactivate notification
			if pControllerDeactivate == null
				setDeactivated()
				return
			end
			
			pState = State.deactivating
			
			if pControllerDeactivate != null
				pControllerDeactivate.setRelativeValue(value)
			end
			if pControllerDeactivated != null
				pControllerDeactivated.setToUpper()
			end
			updateRequiresThink()
			
			pTargetDeactivating.fire()
			
			pListeners.forEach(block Listener each
				each.startDeactivate(this)
			end)
		end
		
		/**
		 * \brief Reverse deactivating.
		 * 
		 * If deactivating notifies stopDeactivate() and startActivate() and switches
		 * to activating with activate controller set to mirror deactivate controller.
		 * If the animator is properly crafted this allows to reverse the animation while
		 * in progress for example to simulate a door stop closing because something is
		 * blocking the door.
		 */
		func void reverseDeactivating()
			if pState != State.deactivating or pAnimatorInstance == null
				return
			end
			
			// we could set the state immediately to activating then sending stopDeactivate and
			// startActivate notification. this can though cause problems if the listeners are
			// set up in an unfortunate way. to avoid such problems first switch to deactivated
			// state then to activating state. this way listeners should not end up in a bad state
			
			// new value to use for deactivate
			var float value = 0
			if pControllerDeactivate != null
				value = 1.0 - pControllerDeactivate.getRelativeValue()
			end
			
			// switch to deactived state and send stopActivate notification
			pState = State.deactivated
			
			if pControllerDeactivated != null
				pControllerDeactivated.setToLower()
			end
			if pControllerActivate != null
				pControllerActivate.setToLower()
			end
			if pControllerDeactivate != null
				pControllerDeactivate.setToLower()
			end
			
			pTargetDeactivating.reset()
				
			pListeners.forEach(block Listener each
				each.stopDeactivate(this)
			end)
			
			// it is possible a listener switched our state. if this is the case stick with
			// the new state and do nothing. the listener is responsible for potential problems
			if pState != State.deactivated
				return
			end
			
			// switch to deactivating and send startDeactivate notification
			if pControllerActivate == null
				setActivated()
				return
			end
			
			pState = State.activating
			
			if pControllerActivate != null
				pControllerActivate.setRelativeValue(value)
			end
			if pControllerActivated != null
				pControllerActivated.setToLower()
			end
			updateRequiresThink()
			
			pTargetActivating.fire()
			
			pListeners.forEach(block Listener each
				each.startActivate(this)
			end)
		end
		
		/**
		 * \brief Set to deactivated state immediately.
		 * 
		 * Applies the animator instance before returning. If you need to modify controllers
		 * other than those controlled by this behavior change them before calling this method.
		 */
		func void setDeactivated()
			if pAnimatorInstance == null
				return
			end
			
			var bool doNotify = pState != State.deactivated
			
			pState = State.deactivated
			
			if pControllerDeactivated != null
				pControllerDeactivated.setToLower()
			end
			if pControllerActivate != null
				pControllerActivate.setToLower()
			end
			if pControllerDeactivate != null
				pControllerDeactivate.setToLower()
			end
			updateRequiresThink()
			applyAnimation()
			
			pTargetActivated.reset()
			pTargetActivating.reset()
			pTargetDeactivating.reset()
			
			if doNotify
				pListeners.forEach(block Listener each
					each.startDeactivate(this)
				end)
				
				pListeners.forEach(block Listener each
					each.stopDeactivate(this)
				end)
			end
		end
		
		/**
		 * \brief Set to activated state immediately.
		 * 
		 * Applies the animator instance before returning. If you need to modify controllers
		 * other than those controlled by this behavior change them before calling this method.
		 */
		func void setActivated()
			if pAnimatorInstance == null
				return
			end
			
			var bool doNotify = pState != State.activated
			
			pState = State.activated
			
			if pControllerActivate != null
				pControllerActivate.setToUpper()
			end
			if pControllerDeactivate != null
				pControllerDeactivate.setToLower()
			end
			if pControllerActivated != null
				pControllerActivated.setToLower()
			end
			updateRequiresThink()
			applyAnimation()
			
			pTargetActivated.fire()
			pTargetActivating.reset()
			pTargetDeactivating.reset()
			
			if doNotify
				pListeners.forEach(block Listener each
					each.startActivate(this)
					each.stopActivate(this)
				end)
			end
		end
		
		
		
		/** \brief Add listener. */
		func void addListener(Listener listener)
			if listener == null
				throw EInvalidParam.new()
			end
			pListeners.add(listener)
		end
		
		/** \brief Remove listener. */
		func void removeListener(Listener listener)
			pListeners.remove(listener)
		end
		
		
		
		/** \brief Add element to game world. */
		func void addToGameWorld()
			if pAnimatorInstance != null
				applyAnimation()
			end
			
			if pTriggerTable == null
				return
			end
			
			pTargetActivated.acquireTarget(pTriggerTable)
			pTargetActivating.acquireTarget(pTriggerTable)
			pTargetDeactivating.acquireTarget(pTriggerTable)
			
			if pTrigger != null and pTrigger.getTriggerExpression() != null
				if pTrigger.getState()
					setActivated()
					
				else
					setDeactivated()
				end
				
				pTrigger.addListener(SwitchStateListener.new(this))
			end
		end
		
		/** \brief Remove element from game world. */
		func void removeFromGameWorld()
			pTargetActivated.dropTarget()
			pTargetActivating.dropTarget()
			pTargetDeactivating.dropTarget()
		end
		
		/** \brief Update requires think. */
		func void updateRequiresThink()
			select pState
			case State.deactivated
				setRequiresThink(pControllerDeactivated != null)
				
			case State.activated
				setRequiresThink(pControllerActivated != null)
				
			case State.activating, State.deactivating
				setRequiresThink(true)
				
			else
				setRequiresThink(false)
			end
		end
		
		/** \brief Think about what to do for the next frame update. */
		func void think(float elapsed)
			if pAnimatorInstance == null
				return
			end
			
			updateAnimator(elapsed)
			applyAnimation()
		end
		
		
		
		/** \brief Update animator. */
		protected func void updateAnimator(float elapsed)
			if pControllerDeactivated != null
				pControllerDeactivated.increment(elapsed * pPlaySpeed)
			end
			if pControllerActivated != null
				pControllerActivated.increment(elapsed * pPlaySpeed)
			end
			
			select pState
			case State.activating
				pControllerActivate.increment(elapsed * pPlaySpeed)
				if not pControllerActivate.isAtUpper()
					break
				end
				
				pState = State.activated
				updateRequiresThink()
				
				pTargetActivated.fire()
				pTargetActivating.reset()
				
				pListeners.forEach(block Listener each
					each.stopActivate(this)
				end)
				
				if pTrigger != null and not pTrigger.getState(true)
					deactivate()
				end
				
			case State.deactivating
				pControllerDeactivate.increment(elapsed * pPlaySpeed)
				if not pControllerDeactivate.isAtUpper()
					break
				end
				
				if pControllerActivate != null
					pControllerActivate.setToLower()
				end
				if pControllerDeactivate != null
					pControllerDeactivate.setToLower()
				end
				pState = State.deactivated
				updateRequiresThink()
				
				pTargetActivated.reset()
				pTargetDeactivating.reset()
				
				pListeners.forEach(block Listener each
					each.stopDeactivate(this)
				end)
				
				if pTrigger != null and pTrigger.getState(false)
					activate()
				end
			end
			
			pListeners.forEach(block Listener each
				each.updateControllers(this, elapsed)
			end)
		end
		
		/** \brief Apply animation. */
		func void applyAnimation()
			if pAnimatorInstance != null
				pAnimatorInstance.apply()
			end
			
			pListeners.forEach(block Listener each
				each.animationApplied(this)
			end)
		end
		
		
		
		/**
		 * \brief Read element from file.
		 * 
		 * Applies the animator instance before returning. If you need to modify controllers
		 * other than those controlled by this behavior change them before super calling method.
		 */
		func void readFromFile(PersistencyEnvironment env, FileReader reader)
			select reader.readByte() // version
			case 0
				pState = State.withOrder(reader.readByte())
				
				var float value = reader.readFloat()
				if pControllerDeactivated != null
					pControllerDeactivated.setValue(value)
				end
				
				value = reader.readFloat()
				if pControllerActivate != null
					pControllerActivate.setValue(value)
				end
				
				value = reader.readFloat()
				if pControllerDeactivate != null
					pControllerDeactivate.setValue(value)
				end
				
				value = reader.readFloat()
				if pControllerActivated != null
					pControllerActivated.setValue(value)
				end
				
				updateRequiresThink()
				
				if pAnimatorInstance != null
					pAnimatorInstance.apply()
				end
				
			else
				throw EInvalidParam.new("unsupported version")
			end
		end
		
		/** \brief Write element to file. */
		func void writeToFile(PersistencyEnvironment env, FileWriter writer)
			writer.writeByte(0) // version
			
			writer.writeByte(pState.order())
			writer.writeFloat(pControllerDeactivated != null \
				if pControllerDeactivated.getValue() else 0)
			writer.writeFloat(pControllerActivate != null \
				if pControllerActivate.getValue() else 0)
			writer.writeFloat(pControllerDeactivate != null \
				if pControllerDeactivate.getValue() else 0)
			writer.writeFloat(pControllerActivated != null \
				if pControllerActivated.getValue() else 0)
		end
		
		
		
		/** \brief Behavior debug information as Dictionary. */
		func Dictionary debugInformation()
			var Dictionary info = Dictionary.new()
			info.setAt("state", pState)
			info.setAt("animator", pAnimatorInstance != null and pAnimatorInstance.getAnimator() != null)
			info.setAt("playSpeed", pPlaySpeed)
			info.setAt("trigger", pTrigger != null if pTrigger.debugInformation() else null)
			info.setAt("triggerTable", pTriggerTable != null)
			info.setAt("controllerDeactivated", pControllerDeactivated != null)
			info.setAt("controllerActivate", pControllerActivate != null)
			info.setAt("controllerDeactivate", pControllerDeactivate != null)
			info.setAt("controllerActivated", pControllerActivated != null)
			info.setAt("targetActivated", pTargetActivated != null)
			info.setAt("targetActivating", pTargetActivating != null)
			info.setAt("targetDeactivating", pTargetDeactivating != null)
			return info
		end
	end
	
	
	
	var ECBehaviorComponent pComponent
	var ECPAnimator pAnimator
	var ECPAnimation pAnimation
	var ECPFloat pPlaySpeed
	var ECBehaviorTriggered pTrigger
	var ECPString pTargetActivated, pTargetActivating, pTargetDeactivating
	var TSTriggerTable pTriggerTable
	var String pControllerNameDeactivated, pControllerNameActivated
	var String pControllerNameActivating, pControllerNameDeactivating
	var Array pListenerFactories
	var ECBehaviorBehaviorTree pBehaviorTree
	var String pPrefix
	
	
	
	/** \brief Create behavior element class. */
	func new(BehaviorElementClass eclass, ECBehaviorComponent component) \
	this(eclass, component, BaseGameApp.getApp().getLoaders(), null, "")
	end
	
	/** \brief Create behavior element class. */
	func new(BehaviorElementClass eclass, ECBehaviorComponent component, String id) \
	this(eclass, component, BaseGameApp.getApp().getLoaders(), null, id)
	end
	
	/** \brief Create behavior element class. */
	func new(BehaviorElementClass eclass, ECBehaviorComponent component, Loaders loaders, \
	TSTriggerTable triggerTable) this(eclass, component, loaders, triggerTable, "")
	end
	
	/** \brief Create behavior element class. */
	func new(BehaviorElementClass eclass, ECBehaviorComponent component, Loaders loaders, \
	TSTriggerTable triggerTable, String id) this(eclass, component, loaders, triggerTable, id, \
		id.empty() if "twoStateAnimated" else "twoStateAnimated(" + id + ")")
	end
	
	func new(BehaviorElementClass eclass, ECBehaviorComponent component, Loaders loaders, \
	TSTriggerTable triggerTable, String id, String subID) \
	this(eclass, component, loaders, triggerTable, id, subID, subID + ".")
	end
	
	func new(BehaviorElementClass eclass, ECBehaviorComponent component, Loaders loaders, \
	TSTriggerTable triggerTable, String id, String subID, String prefix) super(eclass, id)
		if component == null
			throw ENullPointer.new("component")
		end
		
		pPrefix = prefix
		pComponent = component
		pTriggerTable = triggerTable
		pControllerNameDeactivated = "deactivated"
		pControllerNameActivated = "activated"
		pControllerNameActivating = "activating"
		pControllerNameDeactivating = "deactivating"
		pListenerFactories = Array.new()
		
		eclass.addProperty(pAnimator = ECPAnimator.new(prefix + "animator", loaders.getAnimator()))
		eclass.addProperty(pAnimation = ECPAnimation.new(prefix + "animation"))
		eclass.addProperty(pPlaySpeed = ECPFloat.new(prefix + "playSpeed", 1, 0.001))
		
		pTrigger = ECBehaviorTriggered.new(eclass, triggerTable, subID, prefix + "trigger")
		
		eclass.addProperty(pTargetActivated = ECPString.new(prefix + "targetActivated", ""))
		eclass.addProperty(pTargetActivating = ECPString.new(prefix + "targetActivating", ""))
		eclass.addProperty(pTargetDeactivating = ECPString.new(prefix + "targetDeactivating", ""))
		
		eclass.addBehavior(this)
	end
	
	/** \brief Dispose of behavior. */
	func void dispose()
		pComponent = null
		pListenerFactories = null
		pBehaviorTree = null
		super.dispose()
	end
	
	
	
	/**
	 * \brief Prefix.
	 * \version 1.26
	 */
	func String getPrefix()
		return pPrefix
	end
	
	/** \brief Component behavior to animate. */
	func ECBehaviorComponent getComponent()
		return pComponent
	end
	
	/** \brief Animator resource. */
	func ECPAnimator getAnimator()
		return pAnimator
	end
	
	/** \brief Animation resource. */
	func ECPAnimation getAnimation()
		return pAnimation
	end
	
	/** \brief Play speed. */
	func ECPFloat getPlaySpeed()
		return pPlaySpeed
	end
	
	/** \brief Trigger activate. */
	func ECBehaviorTriggered getTrigger()
		return pTrigger
	end
	
	/** \brief Target activate. */
	func ECPString getTargetActivated()
		return pTargetActivated
	end
	
	/** \brief Target activating. */
	func ECPString getTargetActivating()
		return pTargetActivating
	end
	
	/** \brief Target deactivating. */
	func ECPString getTargetDeactivating()
		return pTargetDeactivating
	end
	
	/** \brief Trigger table or \em null if not used. */
	func TSTriggerTable getTriggerTable()
		return pTriggerTable
	end
	
	/** \brief Set trigger table or \em null if not used. */
	func void setTriggerTable(TSTriggerTable triggerTable)
		pTriggerTable = triggerTable
	end
	
	/** \brief Name of deactivated controller. */
	func String getControllerNameDeactivated()
		return pControllerNameDeactivated
	end
	
	/** \brief Set name of deactivated controller. */
	func void setControllerNameDeactivated(String name)
		pControllerNameDeactivated = name
	end
	
	/** \brief Name of activated controller. */
	func String getControllerNameActivated()
		return pControllerNameActivated
	end
	
	/** \brief Set name of activated controller. */
	func void setControllerNameActivated(String name)
		pControllerNameActivated = name
	end
	
	/** \brief Name of activate controller. */
	func String getControllerNameActivating()
		return pControllerNameActivating
	end
	
	/** \brief Set name of activate controller. */
	func void setControllerNameActivating(String name)
		pControllerNameActivating = name
	end
	
	/** \brief Name of deactivate controller. */
	func String getControllerNameDeactivating()
		return pControllerNameDeactivating
	end
	
	/** \brief Set name of deactivate controller. */
	func void setControllerNameDeactivating(String name)
		pControllerNameDeactivating = name
	end
	
	/** \brief Set names of controllers. */
	func void setControllerNames(String deactivated, String activated, \
	String activating, String deactivating)
		pControllerNameDeactivated = deactivated
		pControllerNameActivated = activated
		pControllerNameActivating = activating
		pControllerNameDeactivating = deactivating
	end
	
	/**
	 * \brief Behavior tree or null.
	 * \version 1.26
	 */
	func ECBehaviorBehaviorTree getBehaviorTree()
		return pBehaviorTree
	end
	
	/**
	 * \brief Set behavior tree or null.
	 * \version 1.26
	 */
	func void setBehaviorTree(ECBehaviorBehaviorTree behaviorTree)
		pBehaviorTree = behaviorTree
	end
	
	/** \brief Add listener factory. */
	func void addListenerFactory(ListenerFactory factory)
		if factory == null
			throw ENullPointer.new()
		end
		pListenerFactories.add(factory)
	end
	
	/**
	 * \brief Add listener factory using block.
	 * 
	 * Block receives as parameter Instance and returns Listener.
	 */
	func void addListenerFactory(Block blockFactory)
		pListenerFactories.add(BlockListenerFactory.new(blockFactory))
	end
	
	/** \brief Visit listener factories with block with argument ListenerFactory. */
	func void forEachListenerFactory(Block ablock)
		pListenerFactories.forEach(ablock)
	end
	
	/** \brief Create listeners from factories adding them to behavior instance. */
	func void createListeners(Instance instance)
		pListenerFactories.forEach(block ListenerFactory each
			instance.addListener(each.createListener(instance))
		end)
	end
	
	
	
	/** \brief Get instance in element from owner element class. */
	func Instance instance(BehaviorElement element)
		return element.getInstanceAt(getInstanceIndex()) cast Instance
	end
	
	
	
	/**
	 * \brief Get behavior in element class or \em null if absent.
	 * 
	 * Use this method to check if a particular BehaviorElementClass contains a behavior
	 * of type ECBehaviorComponent.
	 */
	static func ECBehaviorTwoStateAnimated getBehaviorIn(BehaviorElementClass eclass)
		return eclass.findBehavior(block ECBehaviorTwoStateAnimated each
			return true
		end) cast ECBehaviorTwoStateAnimated
	end
	
	/**
	 * \brief Get behavior with id in element class or \em null if absent.
	 * 
	 * Use this method to check if a particular BehaviorElementClass contains a behavior
	 * of type ECBehaviorTwoStateAnimated with specific identifier.
	 */
	static func ECBehaviorTwoStateAnimated getBehaviorIn(BehaviorElementClass eclass, String id)
		return eclass.findBehavior(block ECBehaviorTwoStateAnimated each
			return each.getID().equals(id)
		end) cast ECBehaviorTwoStateAnimated
	end
	
	/**
	 * \brief Get list of all behaviors in element.
	 * 
	 * Returns list contains ECBehaviorTwoStateAnimated behaviors in the order they have
	 * been created in the element.
	 */
	static func Array getAllBehaviorsIn(BehaviorElementClass eclass)
		return eclass.collectBehaviors(block ECBehaviorTwoStateAnimated each
			return true
		end)
	end
	
	
	
	/**
	 * \brief Get instance in element or \em null if absent.
	 * 
	 * Use this method to check if a particular BehaviorElement contains a behavior instance
	 * of type ECBehaviorTwoStateAnimated.Instance . If more than one instance is present returns
	 * the first instance.
	 */
	static func Instance getInstanceIn(BehaviorElement element)
		return element.findInstance(block Instance each
			return true
		end) cast Instance
	end
	
	/**
	 * \brief Get instance with id in element or \em null if absent.
	 * 
	 * Use this method to check if a particular BehaviorElement contains a behavior instance
	 * of type ECBehaviorTwoStateAnimated.Instance with specific identifier.
	 */
	static func Instance getInstanceIn(BehaviorElement element, String id)
		return element.findInstance(block Instance each
			return each.getECBehavior().getID().equals(id)
		end) cast Instance
	end
	
	/**
	 * \brief Get list of all instances in element.
	 * 
	 * Returns list contains ECBehaviorTwoStateAnimated.Instance instances in the order they have
	 * been created in the element.
	 */
	static func Array getAllInstancesIn(BehaviorElement element)
		return element.collectInstances(block Instance each
			return true
		end)
	end
	
	
	
	/** \brief Create Behavior instance. */
	func ECBehaviorInstance createInstance(BehaviorElement element)
		return Instance.new(this, element)
	end
	
	
	
	/**
	 * \brief Initialize animator instance for element from stub.
	 * 
	 * Assigns the animator and animation to the instance. If at least one controller is
	 * present then the first controller is initialized as playback controller. The clamping
	 * around and frozen state are set to the looping, respectivily playing parameter
	 * The element is responsible to assign a Component to the animator instance.
	 */
	func AnimatorInstance createAnimatorInstance(Element element, StubElement stub)
		var Animator animator = pAnimator.getAnimator()
		var Animation animation = pAnimation.getAnimation()
		var String value
		
		// animator resource
		value = stub.getPropertyValueFor(pAnimator.getName(), "")
		if not value.empty()
			try
				animator = pAnimator.getLoader().loadFromFile(value)
				
			catch Exception e
				throw ELoadResourceFailed.new(value, element.getClass().getClassname())
			end
		end
		
		// animation resource
		value = stub.getPropertyValueFor(pAnimation.getName(), "")
		if not value.empty()
			try
				animation = Animation.new(value)
				
			catch Exception e
				throw ELoadResourceFailed.new(value, element.getClass().getClassname())
			end
		end
		
		if animator == null
			return null
		end
		
		// create animator instance
		var AnimatorInstance inst = AnimatorInstance.new()
		inst.setAnimator(animator)
		inst.setAnimation(animation)
		return inst
	end
end
