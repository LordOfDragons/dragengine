/*
 * MIT License
 *
 * Copyright (C) 2025, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

namespace Dragengine.Scenery
pin Dragengine.Utils
pin Dragengine.TriggerSystem
pin Dragengine.Commands
pin Dragengine.ConversationSystem
pin Dragengine.Gui

/**
 * \brief Default implementation of \ref BehaviorFactory.
 * \version 1.28
 * 
 * This class provides a couple of helper methods to use \ref BehaviorFactoryHelper in a portable
 * way. For this the helper assigned to \ref BehaviorElementClass#sharedFactoryHelper is stored
 * during construction time. This allows scripts to assign different factory helpers for loading
 * different parts of the application their own way.
 * 
 * Subclass must implement \ref BehaviorFactory#addBehavior().
 */
abstract class DefaultBehaviorFactory implements BehaviorFactory
	var String pFactoryId
	var BehaviorFactoryHelper pHelper
	
	
	func new(String id)
		pFactoryId = id
		pHelper = BehaviorElementClass.sharedFactoryHelper
	end
	
	
	func String factoryId()
		return pFactoryId
	end
	
	/** \brief Helper to use. */
	func BehaviorFactoryHelper getHelper()
		return pHelper
	end
	
	/** \brief Set helper to use. */
	func void setHelper(BehaviorFactoryHelper helper)
		if helper == null
			throw ENullPointer.new()
		end
		pHelper = helper
	end
	
	
	/**
	 * \brief Trigger table matching value.
	 * 
	 * Default implementation returns \ref BaseGameApp#getTriggerTable() for value 'default'
	 * and null for all other values. Overwrite to accept other values.
	 */
	func TSTriggerTable getTriggerTableFor(String value)
		return pHelper.triggerTable(value)
	end
	
	/**
	 * \brief Command manager matching value.
	 * 
	 * Default implementation returns \ref BaseGameApp#getCommandManager() for value 'default'
	 * and null for all other values. Overwrite to accept other values.
	 */
	func CommandManager getCommandManagerFor(String value)
		return pHelper.commandManager(value)
	end
	
	/**
	 * \brief Binding manager matching value.
	 * 
	 * Default implementation returns \ref BaseGameApp#getTriggerTable() for value 'default'
	 * and null for all other values. Overwrite to accept other values.
	 */
	func BindingManager getBindingManagerFor(String value)
		return pHelper.bindingManager(value)
	end
	
	/**
	 * \brief Conversation playback subtitle matching value.
	 * 
	 * Default implementation returns \ref BaseGameApp#getWindowSubTitle() for value 'default'
	 * and null for all other values. Overwrite to accept other values.
	 */
	func ConversationPlaybackSubTitle getSubTitleFor(String value)
		return pHelper.subtitle(value)
	end
	
	/**
	 * \brief Subtitle gui theme matching value.
	 * 
	 * Default implementation returns \ref WindowSubTitle#getGuiTheme()
	 * on \ref BaseGameApp#getWindowSubTitle() for value 'default', loads gui theme if value
	 * begins with 'path:' or null for all other values. Overwrite to accept other values.
	 */
	func GuiTheme getSubtitleThemeFor(String value)
		return pHelper.subtitleTheme(value)
	end
	
	/**
	 * \brief Simple conversation converter matching value.
	 * 
	 * Default implementation returns \ref BaseGameApp#getSimpleConversationConverter()
	 * for value 'default' and null for all other values. Overwrite to accept other values.
	 */
	func SimpleConversationConverter getSimpleConversationConverterFor(String value)
		return pHelper.simpleConversationConverter(value)
	end
	
	/**
	 * \brief Player controllable actor matching value.
	 * 
	 * Default implementation returns \ref BaseGameApp#getPlayerControlledActor() for value
	 * 'default' and null for all other values. Overwrite to accept other values.
	 */
	func ECBehaviorPlayerControllable.Tracker getPlayerControllableActorFor(String value)
		return pHelper.playerControlledActor(value)
	end
	
	/**
	 * \brief Translation manager matching value.
	 * 
	 * Default implementation returns \ref BaseGameApp#getTranslationManager() for value
	 * 'default' and null for all other values. Overwrite to accept other values.
	 */
	func TranslationManager getTranslationManagerFor(String value)
		return pHelper.translationManager(value)
	end
	
	/**
	 * \brief Trigger table matching value.
	 * 
	 * Default implementation returns \ref BaseGameApp#getTriggerTable() for value 'default'
	 * and null for all other values. Overwrite to accept other values.
	 */
	func ECBehaviorPlayerControllable.Tracker getPlayerControlledActorFor(String value)
		return pHelper.playerControlledActor(value)
	end
end
