/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */


namespace Dragengine.Scenery

pin Dragengine.StateMachineSystem
pin Dragengine.Gui
pin Dragengine.LoadSave
pin Dragengine.Preloading
pin Dragengine.Utils
pin Dragengine.BehaviorTreeSystem


/**
 * \brief Behavior element behavior adding StateMachine support.
 * \version 1.3
 * 
 * Loads state machine from file and creates a SMContext. Other behaviors can add actions
 * and conditions to this state machine allowing to compose state machine actions and
 * conditions easily.
 * 
 * This behavior can be used in different ways depending on the needs.
 * 
 * \par Single State Machine Usage
 * 
 * This is the most simple solution where only one state machine is used. For many
 * situations this is enough and is the most simple solution to use. Add one
 * ECBehaviorStateMachine with no ID to the element and as many other behaviors adding
 * actions and conditions as required. Set the "stateMachine.path" property to define
 * the state machine to load. Then use behavior listeners to run events on the state
 * machine at the appropriate time. This is an example code for such a setup:
 * 
 * \code{.ds}
 * class MyElementClass extends BehaviorElementClass
 *    func new()
 *       var ECBehaviorStateMachine smbehavior = ECBehaviorStateMachine.new(this)
 *       smbehavior.getPath().setValue("/content/myBehavior.desm")
 *       
 *       // here you can add now behaviors assigining actions and conditions for
 *       // the state machine to use
 *       ...
 *       
 *       // add listeners to behaviors to send events to the state machine
 *       var ECBehaviorTwoStateAnimated animated = ...
 *       animated.addActionConditionFactory(MyEventListener.Factory.new(smbehavior))
 *    end
 *    
 *    // two state listeners used to send events
 *    class MyEventListener extends ECBehaviorTwoStateAnimated.DefaultListener
 *       class Factory implements ECBehaviorTwoStateAnimated.ActionConditionFactory
 *          public var ECBehaviorStateMachine stateMachine
 *          
 *          func new(ECBehaviorStateMachine stateMachine)
 *             stateMachine = stateMachine
 *          end
 *          
 *          func ECBehaviorTwoStateAnimated.Listener createListener(ECBehaviorTwoStateAnimated.Instance instance)
 *             return MyEventListener.new(stateMachine.instance(instance.getElement()))
 *          end
 *      end
 *      
 *      public var ECBehaviorStateMachine.Instance stateMachine
 *      
 *      func new(ECBehaviorStateMachine.Instance stateMachine)
 *         stateMachine = stateMachine
 *      end
 *      
 *      func void stopActivate(ECBehaviorTwoStateAnimated.Instance instance)
 *         stateMachine.runEvent("animated activated")
 *      end
 *      
 *      func void stopDeactivate(ECBehaviorTwoStateAnimated.Instance instance)
 *         stateMachine.runEvent("animated deactivated")
 *      end
 *   end
 * end
 * \endcode
 * 
 * \par Multiple State Machine Usage
 * 
 * You can add multiple instances of ECBehaviorStateMachine to the element to load and
 * use multiple state machines. This can be for using multiple state machines together
 * to model complex logic. In this situation behaviors assigining actions and conditions
 * do add them to all instances of ECBehaviorStateMachine. This is usually not a problem
 * since the state machines are written to use only the actions and conditions making
 * sense to be used. This is an example code for such a setup:
 * 
 * \code{.ds}
 * class MyElementClass extends BehaviorElementClass
 *    func new()
 *       var ECBehaviorStateMachine smSpecific = ECBehaviorStateMachine.new(this, "specific")
 *       smSpecific.getPath().setValue("/content/mySpecificBehavior.desm")
 *       
 *       var ECBehaviorStateMachine smGeneric = ECBehaviorStateMachine.new(this, "idle")
 *       smGeneric.getPath().setValue("/content/myGenericBehavior.desm")
 *       
 *       // here you can add now behaviors assigining actions and conditions for both
 *       // state machines to use
 *       ...
 *       
 *       // add listeners to behaviors to send events to the state machine. the same
 *       // MyEventListener is used as in the single state machine example. the example
 *       // here uses two animated behaviors each sending events to one of the state
 *       // machines. in general using multiple state machines the events should be
 *       // disjoint but it is fully valid to send the same event to both if the
 *       // state machines are written to deal with this properly.
 *       var ECBehaviorTwoStateAnimated animated1 = ...
 *       animated1.addActionConditionFactory(MyEventListener.Factory.new(smSpecific))
 *       
 *       var ECBehaviorTwoStateAnimated animated2 = ...
 *       animated2.addActionConditionFactory(MyEventListener.Factory.new(smGeneric))
 *    end
 * end
 * \endcode
 * 
 * The above example loads and runs two state machines. The first one is running specific
 * state machine. The second state machine provides two separate state machines able to
 * handle multiple logic at the same time. By writing the state machines properly the two
 * state machienes do not interfere with each other and allow to split up state machines
 * into multiple ones which can help create complex logic more simple and stable.
 * 
 * \par Action and Condition Factory
 * 
 * You can assign actions and conditions without using other behaviors by using one or more
 * factories. The factories are added to the behavior. Upon creating the behavior instances
 * the factories are asked to create and assign SMAction and SMCondition. The example below
 * shows how to use a factory to add a condition checking for a trigger and an action
 * manipulating a trigger.
 * 
 * \code{.ds}
 * class MyElementClass extends BehaviorElementClass
 *    func new()
 *       var ECBehaviorStateMachine smbehavior = ECBehaviorStateMachine.new(this)
 *       smbehavior.getPath().setValue("/content/mySpecificBehavior.desm")
 *       
 *       // add factory to create actions and conditions later on. this example uses
 *       // a code block for simplicity. using classes implementing ActionConditionFactory
 *       // is preferred since it allows to reuse factories across element classes.
 *       smbehavior.setActionConditionFactory(block ECBehaviorStateMachine.Instance instance
 *          // add condition evaluating to true if "player.insideZone" trigger is in fired state.
 *          // the condition can be used in the state machine using the name "player is inside zone".
 *          instance.setCondition("player is inside zone", SMConditionTrigger.new(\
 *             "player.insideZone", SMConditionTrigger.TestMode.fired))
 *          
 *          // add action pulsing (fire and immediately reset) "player.damage" trigger.
 *          // the action can be run in the state machine using the name "hurt playe".
 *          instance.setAction("hurt player", SMActionTrigger.new("player.damage", SMActionTrigger.Action.pulse))
 *       end)
 *    end
 * end
 * \endcode
 * 
 * This behavior does require the element class to be persistable (setPersistable) only if
 * the context is run by the behavior itself.
 * 
 * \see https://developer.dragondreams.ch/wiki/doku.php/dragengine:modules:dragonscript:behavior_statemachine
 */
class ECBehaviorStateMachine extends DefaultECBehavior
	/** \brief Factory assigining actions and conditions to state machine. */
	interface ActionConditionFactory
		/** \brief Assign actions and conditions to state machine. */
		func void setActionsConditions(Instance instance)
	end
	
	/** \brief Factory assigining actions and conditions to state machine using a block. */
	class BlockActionConditionFactory implements ActionConditionFactory
		var Block pBlock
		
		/** \brief Create factory using block receiving Instance as parameter. */
		func new(Block factoryBlock)
			if factoryBlock == null
				throw ENullPointer.new()
			end
			pBlock = factoryBlock
		end
		
		/** \brief Assign actions and conditions to state machine. */
		func void setActionsConditions(Instance instance)
			pBlock.run(instance)
		end
	end
	
	/**
	 * \brief Behavior factory.
	 * \version 1.25
	 * 
	 * Automatically assigns these behaviors if present before adding:
	 * - Optional: \ref ECBehaviorCollider
	 * 
	 * Example XML element class:
	 * \code{.xml}
	 * <behavior type='ECBehaviorStateMachine'>
	 *   <!-- optional: use behavior tree with id instead of empty string -->
	 *   <string name='behaviorTree'>second</string>
	 * </behavior>
	 * 
	 * <!-- for adding multiple behaviors use unique identifiers -->
	 * <behavior type='ECBehaviorStateMachine' id='second'/>
	 * \endcode
	 * 
	 * Element class properties added by the behavior can also be set directly inside the tag
	 * be removing the property name prefix and starting with a "." (for example ".propertyName").
	 */
	class Factory implements BehaviorFactory
		func new()
		end
		
		func String factoryId()
			return "ECBehaviorStateMachine"
		end
		
		func ECBehavior addBehavior(BehaviorElementClass eclass, String id, Dictionary parameters)
			var ECBehaviorStateMachine behavior = ECBehaviorStateMachine.new(eclass, id)
			
			behavior.setBehaviorTree(eclass.sharedFactoryHelper.defaultBehaviorTree(eclass, parameters))
			
			eclass.sharedFactoryHelper.setPropertiesFromParameters(\
				eclass, parameters, "stateMachine", id)
			return behavior
		end
	end
	
	
	/** \brief Behavior instance. */
	class Instance extends DefaultECBehaviorInstance implements BehaviorPostInit
		/**
		 * \brief Behavior tree action "stateMachine{(id)}.set".
		 * \version 1.26
		 */
		private class BTASet implements BTAction
			var Instance pInstance
			
			func new(Instance instance)
				pInstance = instance
			end
			
			func BTResult runAction(BTContext context, Dictionary parameters)
				var Object value
				
				if parameters.has("reset")
					pInstance.getContext().reset()
				end
				
				value = parameters.getAt("state", null)
				if value != null
					var SMState state = pInstance.getStateMachine().getStateAt(value cast String)
					if state == null
						return BTResult.failure
					end
					pInstance.getContext().setCurrentState(state)
				end
				
				return BTResult.success
			end
		end
		
		/**
		 * \brief Behavior tree action "stateMachine{(id)}.event".
		 * \version 1.26
		 */
		private class BTAEvent implements BTAction
			var Instance pInstance
			
			func new(Instance instance)
				pInstance = instance
			end
			
			func BTResult runAction(BTContext context, Dictionary parameters)
				if pInstance.runEvent(parameters.getAt("id") cast String)
					return BTResult.success
				end
				return parameters.has("required") if BTResult.failure else BTResult.success
			end
		end
		
		/**
		 * \brief Behavior tree action/condition "stateMachine{(id)}.check".
		 * \version 1.26
		 */
		private class BTACheck implements BTAction, BTCondition
			var Instance pInstance
			var String pPrefix
			
			func new(Instance instance, String prefix)
				pInstance = instance
				pPrefix = prefix
			end
			
			func BTResult runAction(BTContext context, Dictionary parameters)
				return check("", parameters) if BTResult.success\
					else (parameters.has("wait") if BTResult.running else BTResult.failure)
			end
			
			func bool evaluateCondition(BTContext context, Dictionary parameters)
				return check(pPrefix, parameters)
			end
			
			func bool check(String prefix, Dictionary parameters)
				var SMState state = pInstance.getContext().getCurrentState()
				var String stateid = state.getID()
				var bool result = true
				var Object value
				
				value = parameters.getAt(prefix + "state", null)
				if value != null
					result &= stateid.equals(value cast String)
				end
				
				value = parameters.getAt(prefix + "state.not", null)
				if value != null
					result &= not stateid.equals(value cast String)
				end
				
				value = parameters.getAt(prefix + "state.starts", null)
				if value != null
					result &= stateid.startsWith(value cast String)
				end
				
				value = parameters.getAt(prefix + "state.starts.not", null)
				if value != null
					result &= not stateid.startsWith(value cast String)
				end
				
				value = parameters.getAt(prefix + "state.ends", null)
				if value != null
					result &= stateid.endsWith(value cast String)
				end
				
				value = parameters.getAt(prefix + "state.ends.not", null)
				if value != null
					result &= not stateid.endsWith(value cast String)
				end
				
				value = parameters.getAt(prefix + "state.contains", null)
				if value != null
					result &= stateid.findString(value cast String) != -1
				end
				
				value = parameters.getAt(prefix + "state.contains.not", null)
				if value != null
					result &= stateid.findString(value cast String) == -1
				end
				
				return result
			end
		end
		
		
		var ECBehaviorStateMachine pECBehavior
		var StateMachine pStateMachine
		var SMContext pContext
		
		
		
		/** \brief Create element. */
		func new(ECBehaviorStateMachine ecbehavior, BehaviorElement element) super(element)
			pECBehavior = ecbehavior
			setRequiresEnterFrame(true)
		end
		
		/** \brief Dispose of composeable instance. */
		func void dispose()
			pContext = null
			pStateMachine = null
			super.dispose()
		end
		
		
		
		/** \brief Initialize element from stub. */
		func void init(StubElement stub)
			pStateMachine = loadStateMachine(stub)
			if pStateMachine == null
				pStateMachine = StateMachine.newEmpty()
			end
			
			pContext = createContext(stub, pStateMachine)
			if BaseGameApp.getApp() != null
				pContext.setConsole(BaseGameApp.getApp().getConsole())
			end
			
			var String debug = pECBehavior.getDebug().getValueOrNull(stub)
			if debug != null
				pContext.setLoggingName(debug)
				pContext.setLogTransitions(true)
				pContext.setLogStateChanges(true)
				pContext.setLogActions(true)
			end
			
			pECBehavior.setActionsConditions(this)
			
			var BehaviorElement element = getElement()
			
			if pECBehavior.getBehaviorTree() != null
				var String pnp = pECBehavior.getPrefix()
				var BTContext c = pECBehavior.getBehaviorTree().instance(element).getContext()
				c.setAction(pnp + "set", BTASet.new(this))
				c.setAction(pnp + "event", BTAEvent.new(this))
				
				var String name = pnp + "check"
				var BTACheck btacheck = BTACheck.new(this, pnp)
				c.setAction(name, btacheck)
				c.setCondition(name, btacheck)
			end
			
			element.registerPostInit(this)
		end
		
		func void postInit(StubElement stub)
			runEvent("init")
		end
		
		/** \brief Load state machine. */
		protected func StateMachine loadStateMachine(StubElement stub)
			return pECBehavior.getStateMachine().getStateMachine(stub, getElement().getClass())
		end
		
		/** \brief Create context. */
		protected func SMContext createContext(StubElement stub, StateMachine stateMachine)
			return SMContext.new(stateMachine)
		end
		
		
		
		/** \brief Behavior. */
		func ECBehaviorStateMachine getECBehavior()
			return pECBehavior
		end
		
		/** \brief State machine or null if not loaded. */
		func StateMachine getStateMachine()
			return pStateMachine
		end
		
		/** \brief Context. */
		func SMContext getContext()
			return pContext
		end
		
		
		
		/**
		 * \brief Run event on state machine.
		 * \returns true if context is present and current state understands event.
		 */
		func bool runEvent(String event)
			return pContext.runEvent(event)
		end
		
		/**
		 * \brief Reset state machine to initial state.
		 */
		protected func void reset()
			pContext.reset()
		end
		
		/**
		 * \brief Set action to state machine.
		 */
		func void setAction(String name, SMAction action)
			pContext.setAction(name, action)
		end
		
		/**
		 * \brief Set action to state machine using block.
		 * 
		 * Block receives arguments SMContext context and Dictionary parameters.
		 */
		func void setAction(String name, Block actionBlock)
			pContext.setAction(name, actionBlock)
		end
		
		/**
		 * \brief Set condition to state machine.
		 */
		func void setCondition(String name, SMCondition condition)
			pContext.setCondition(name, condition)
		end
		
		/**
		 * \brief Set condition to state machine using block.
		 * 
		 * Block receives arguments SMContext context and Dictionary parameters and returns bool.
		 */
		func void setCondition(String name, Block conditionBlock)
			pContext.setCondition(name, conditionBlock)
		end
		
		
		
		func void addToGameWorld()
			runEvent("addToGameWorld")
		end
		
		func void removeFromGameWorld()
			runEvent("removeFromGameWorld")
		end
		
		func void enterFrame()
			runEvent("enterFrame")
		end
		
		
		
		/** \brief Read element from file. */
		func void readFromFile(PersistencyEnvironment env, FileReader reader)
			select reader.readByte() // version
			case 0
				var PersistencyFlags flags = PersistencyFlags.new(1, reader)
				
				if flags.getAt(0)
					pContext.readFromFile(env, reader)
				end
				
			else
				throw EInvalidParam.new("unsupported version")
			end
		end
		
		/** \brief Write element to file. */
		func void writeToFile(PersistencyEnvironment env, FileWriter writer)
			writer.writeByte(0) // version
			
			var PersistencyFlags flags = PersistencyFlags.new(1)
			flags.setAt(0, true)
			flags.writeToFile(writer)
			
			pContext.writeToFile(env, writer)
		end
	end
	
	
	
	var ECPStateMachine pStateMachine
	var ECPString pDebug
	var Array pActionConditionFactories
	var ECBehaviorBehaviorTree pBehaviorTree
	var String pPrefix
	
	
	
	/** \brief Create behavior element class. */
	func new(BehaviorElementClass eclass) this(eclass, BaseGameApp.getApp().getLoaders(), "")
	end
	
	/** \brief Create behavior element class. */
	func new(BehaviorElementClass eclass, String id)\
	this(eclass, BaseGameApp.getApp().getLoaders(), id)
	end
	
	/** \brief Create behavior element class. */
	func new(BehaviorElementClass eclass, String id, String prefix)\
	this(eclass, BaseGameApp.getApp().getLoaders(), id, prefix)
	end
	
	/** \brief Create behavior element class. */
	func new(BehaviorElementClass eclass, Loaders loaders) this(eclass, loaders, "")
	end
	
	/** \brief Create behavior element class. */
	func new(BehaviorElementClass eclass, Loaders loaders, String id)\
	this(eclass, loaders, id, id.empty() if "stateMachine" else "stateMachine(" + id + ")")
	end
	
	func new(BehaviorElementClass eclass, Loaders loaders, String id, String subID)\
	this(eclass, loaders, id, subID, subID + ".")
	end
	
	func new(BehaviorElementClass eclass, Loaders loaders, String id, String subID, String prefix)\
	super(eclass, id)
		pPrefix = prefix
		
		eclass.addProperty(pStateMachine = ECPStateMachine.new(prefix + "path", loaders.getStateMachine()))
		eclass.addProperty(pDebug = ECPString.new(prefix + "debug", null))
		
		pActionConditionFactories = Array.new()
		
		eclass.addBehavior(this)
	end
	
	/** \brief Dispose of behavior. */
	func void dispose()
		pActionConditionFactories = null
		pBehaviorTree = null
		super.dispose()
	end
	
	
	
	/**
	 * \brief Prefix.
	 * \version 1.26
	 */
	func String getPrefix()
		return pPrefix
	end
	
	/** \brief State machine. */
	func ECPStateMachine getStateMachine()
		return pStateMachine
	end
	
	/**
	 * \brief Debug mode prefix.
	 * \version 1.26
	 * 
	 * If not empty string enables debug mode with prefix to locate log messages easily.
	 */
	func ECPString getDebug()
		return pDebug
	end
	
	/**
	 * \brief Behavior tree or null.
	 * \version 1.26
	 */
	func ECBehaviorBehaviorTree getBehaviorTree()
		return pBehaviorTree
	end
	
	/**
	 * \brief Set behavior tree or null.
	 * \version 1.26
	 */
	func void setBehaviorTree(ECBehaviorBehaviorTree behaviorTree)
		pBehaviorTree = behaviorTree
	end
	
	/** \brief Add action and condition factory. */
	func void addActionConditionFactory(ActionConditionFactory factory)
		if factory == null
			throw ENullPointer.new()
		end
		pActionConditionFactories.add(factory)
	end
	
	/**
	 * \brief Add action and condition factory using block receiving Instance as parameter.
	 * 
	 * This is a convenience method for using BlockActionConditionFactory.
	 */
	func void addActionConditionFactory(Block factory)
		addActionConditionFactory(BlockActionConditionFactory.new(factory))
	end
	
	/** \brief Visit listener factories with block with argument ActionConditionFactory. */
	func void forEachActionConditionFactory(Block ablock)
		pActionConditionFactories.forEach(ablock)
	end
	
	/** \brief Assign actions and conditions to behavior instance. */
	func void setActionsConditions(Instance instance)
		pActionConditionFactories.forEach(block ActionConditionFactory each
			each.setActionsConditions(instance)
		end)
	end
	
	
	
	/** \brief Get instance in element from owner element class. */
	func Instance instance(BehaviorElement element)
		return element.getInstanceAt(getInstanceIndex()) cast Instance
	end
	
	
	
	/**
	 * \brief Get behavior in element class or \em null if absent.
	 * 
	 * Use this method to check if a particular BehaviorElementClass contains a behavior
	 * of type ECBehaviorCollider.
	 */
	static func ECBehaviorStateMachine getBehaviorIn(BehaviorElementClass eclass)
		return eclass.findBehavior(block ECBehaviorStateMachine each
			return true
		end) cast ECBehaviorStateMachine
	end
	
	/**
	 * \brief Get behavior with id in element class or \em null if absent.
	 * 
	 * Use this method to check if a particular BehaviorElementClass contains a behavior
	 * of type ECBehaviorStateMachine with specific identifier.
	 */
	static func ECBehaviorStateMachine getBehaviorIn(BehaviorElementClass eclass, String id)
		return eclass.findBehavior(block ECBehaviorStateMachine each
			return each.getID().equals(id)
		end) cast ECBehaviorStateMachine
	end
	
	/**
	 * \brief Get list of all behaviors in element.
	 * 
	 * Returns list contains ECBehaviorStateMachine behaviors in the order they have
	 * been created in the element.
	 */
	static func Array getAllBehaviorsIn(BehaviorElementClass eclass)
		return eclass.collectBehaviors(block ECBehaviorStateMachine each
			return true
		end)
	end
	
	
	
	/**
	 * \brief Get instance in element or \em null if absent.
	 * 
	 * Use this method to check if a particular BehaviorElement contains a behavior instance
	 * of type ECBehaviorStateMachine.Instance . If more than one instance is present returns
	 * the first instance.
	 */
	static func Instance getInstanceIn(BehaviorElement element)
		return element.findInstance(block Instance each
			return true
		end) cast Instance
	end
	
	/**
	 * \brief Get instance with id in element or \em null if absent.
	 * 
	 * Use this method to check if a particular BehaviorElement contains a behavior instance
	 * of type ECBehaviorStateMachine.Instance with specific identifier.
	 */
	static func Instance getInstanceIn(BehaviorElement element, String id)
		return element.findInstance(block Instance each
			return each.getECBehavior().getID().equals(id)
		end) cast Instance
	end
	
	/**
	 * \brief Get list of all instances in element.
	 * 
	 * Returns list contains ECBehaviorStateMachine.Instance instances in the order they have
	 * been created in the element.
	 */
	static func Array getAllInstancesIn(BehaviorElement element)
		return element.collectInstances(block Instance each
			return true
		end)
	end
	
	
	
	/** \brief Create Behavior instance. */
	func ECBehaviorInstance createInstance(BehaviorElement element)
		return Instance.new(this, element)
	end
end
