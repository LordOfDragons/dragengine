/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */


namespace Dragengine.Scenery

pin Dragengine.Gui
pin Dragengine.LoadSave
pin Dragengine.Preloading
pin Dragengine.Utils
pin Dragengine.TriggerSystem


/**
 * \brief Behavior element behavior adding speaker support.
 * 
 * Behavior adds a Speaker resource to the the behavior element. This behavior can be added
 * multiple times to an element. Each instance creates one speaker attached to the element
 * collider which can be individually modified. To distinguish the speakers each instance
 * has an identifier which can be used to retrieve a specific instance. Hence to use more
 * than one speaker use code like this in your subclass constructor:
 * 
 * \code{.ds}
 * class MyElement extends BehaviorElementClass
 *    public func new()
 *       ECBehaviorSpeaker.new(this)
 *       ECBehaviorSpeaker.new(this, "subSpeaker")
 *    end
 * end
 * \endcode
 * 
 * You can now define the parameters to use for both speakers using for example the properties
 * "speaker.volume" for the first speaker and "speaker(subSpeaker).volume" for the second speaker.
 * 
 * It is recommended to always specify an identifier even if only one speaker is used.
 * This avoids potentially name conflicts especially if other behaviors are added attaching
 * other resources too.
 * 
 * If the \em ECBehaviorCollider behavior is present in the behavior element before this
 * behavior is added the speaker is attached. The speaker is attached to the named bone if
 * defined otherwise it is attached statically.
 * 
 * Element class properties have the prefix "speaker{(id)}.".
 * 
 * This behavior does require the element class to be persistable (setPersistable).
 * 
 * 
 * \par Synthesizer Handling
 * 
 * Speakers can play either a static Sound resource or use a Synthesizer. By using a synthesizer
 * dynamic sound can be played. To use a synthesizer use the "speaker{(id)}.synthesizer" property
 * instead of the "speaker{(id)}.sound" property. If both properties are present the synthesizer
 * one is used if valid otherwise sound.
 * 
 * If synthesizer is valid a SynthesizerInstance will be created. Subclasses of ECBehaviorSpeaker
 * or other behaviors can then obtain SynthesizerController from the SynthesizerInstance to
 * modify the played sound. Since controllers use curves behaviors have to set the value ahead
 * of time before playing back the speaker. It is possible to change the controller curves while
 * sound is playing. In this case though care has to be taken to be set the curve early enough
 * since audio modules typically render sound into buffered blocks. If the curve is changed too
 * late the changes can be missed or result in strange sound jumping.
 */
class ECBehaviorSpeaker extends DefaultECBehavior
	/** \brief Listener for behavior instance events. */
	interface Listener
		/** \brief Start playing back. */
		func void startPlaying(Instance instance)
		
		/** \brief Stop playing. */
		func void stopPlaying(Instance instance)
		
		/** \brief Muted. */
		func void muted(Instance instance)
		
		/** \brief Unmuted. */
		func void unmuted(Instance instance)
	end
	
	/** \brief Default implementation of behavior instance listener. */
	class DefaultListener implements Listener
		/** \brief Create default listener. */
		public func new()
		end
		
		/** \brief Start playing back. */
		public func void startPlaying(Instance instance)
		end
		
		/** \brief Stop playing. */
		public func void stopPlaying(Instance instance)
		end
		
		/** \brief Muted. */
		public func void muted(Instance instance)
		end
		
		/** \brief Unmuted. */
		public func void unmuted(Instance instance)
		end
	end
	
	/** \brief Factory creating listeners. */
	interface ListenerFactory
		/** \brief Create listener. */
		func Listener createListener(Instance instance)
	end
	
	/** \brief Factory creating listeners using block. */
	class BlockListenerFactory implements ListenerFactory
		private var Block pBlock
		
		/** \brief Create factory using block receiving Instance as parameter returning Listener. */
		public func new(Block blockFactory)
			if blockFactory == null
				throw ENullPointer.new()
			end
			pBlock = blockFactory
		end
		
		/** \brief Create listener. */
		public func Listener createListener(Instance instance)
			return pBlock.run(instance) cast Listener
		end
	end
	
	/** \brief Behavior instance. */
	class Instance extends DefaultECBehaviorInstance
		/** \brief Trigger listener to change playing state of speaker. */
		public class PlayingListener extends ECBehaviorTriggered.DefaultListener
			private var Instance pInstance
			
			public func new(Instance instance)
				pInstance = instance
			end
			
			public func void triggerExpressionTrue(ECBehaviorTriggered.Instance instance)
				pInstance.setPlaying(true)
			end
			
			public func void triggerExpressionFalse(ECBehaviorTriggered.Instance instance)
				pInstance.setPlaying(false)
			end
		end
		
		/** \brief Trigger listener to change muted state of speaker. */
		public class MuteListener extends ECBehaviorTriggered.DefaultListener
			private var Instance pInstance
			
			public func new(Instance instance)
				pInstance = instance
			end
			
			public func void triggerExpressionTrue(ECBehaviorTriggered.Instance instance)
				pInstance.setMuted(true)
			end
			
			public func void triggerExpressionFalse(ECBehaviorTriggered.Instance instance)
				pInstance.setMuted(false)
			end
		end
		
		private var ECBehaviorSpeaker pECBehavior
		private var ECBehaviorCollider.Instance pCollider
		private var bool pPlaying
		private var bool pMuted
		private var Speaker pSpeaker
		private var ECBehaviorTriggered.Instance pTrigger
		private var ECBehaviorTriggered.Instance pTriggerMuted
		private var Array pListeners
		
		
		
		/** \brief Create element. */
		public func new(ECBehaviorSpeaker ecbehavior, BehaviorElement element) super(element)
			pECBehavior = ecbehavior
			pListeners = Array.new()
			pPlaying = false
			pMuted = false
		end
		
		/** \brief Dispose of behavior instance. */
		public func void dispose()
			if pSpeaker != null
				pSpeaker.setOwner(null)
				pSpeaker = null
			end
			pTrigger = null
			pTriggerMuted = null
			pCollider = null
			pListeners = null
			
			super.dispose()
		end
		
		
		
		/** \brief Initialize element from stub. */
		public func void init(StubElement stub)
			if pECBehavior.getCollider() != null
				pCollider = pECBehavior.getCollider().instance(getElement())
			end
			
			pSpeaker = createSpeaker(stub)
			if pSpeaker == null
				return
			end
			
			pECBehavior.createListeners(this)
			
			pSpeaker.setOwner(getElement())
			
			if pECBehavior.getTriggerTable() != null
				pTrigger = getTriggerBehavior()
				pTrigger.addListener(PlayingListener.new(this))
				
				pTriggerMuted = getTriggerMutedBehavior()
				pTriggerMuted.addListener(MuteListener.new(this))
			end
			
			if pTriggerMuted == null or pTriggerMuted.getTriggerExpression() == null
				setMuted(pSpeaker.getMuted())
			end
			
			if pTrigger != null and pTrigger.getTriggerExpression() != null
				pSpeaker.stop() // required because of createSpeaker() starting playing
				pPlaying = false
				
			else
				setPlaying(pSpeaker.getPlaying())
			end
			
			if pCollider != null and pCollider.getCollider() != null
				attachSpeaker(stub, pCollider)
			end
		end
		
		/**
		 * \brief Create speaker.
		 * 
		 * Default implementation calls ECComposeSpeaker.createSpeaker().
		 */
		protected func Speaker createSpeaker(StubElement stub)
			return pECBehavior.getSpeaker().createSpeaker(getElement(), stub)
		end
		
		/**
		 * \brief Get playing trigger behavior.
		 * 
		 * Default implementation uses owner class trigger behavior. If getSyncTrigger()
		 * of parent ECBehaviorSpeaker is not null uses referenced behavior trigger behavior.
		 */
		protected func ECBehaviorTriggered.Instance getTriggerBehavior()
			var ECBehaviorSpeaker behavior = pECBehavior.getSyncTrigger()
			var BehaviorElement element = getElement()
			
			if behavior != null
				return behavior.instance(element).getTrigger()
				
			else
				return pECBehavior.getTrigger().instance(element)
			end
		end
		
		/**
		 * \brief Get muted trigger behavior.
		 * 
		 * Default implementation uses owner class trigger behavior. If getSyncTrigger()
		 * of parent ECBehaviorSpeaker is not null uses referenced behavior trigger behavior.
		 */
		protected func ECBehaviorTriggered.Instance getTriggerMutedBehavior()
			var ECBehaviorSpeaker behavior = pECBehavior.getSyncTrigger()
			var BehaviorElement element = getElement()
			
			if behavior != null
				return behavior.instance(element).getTriggerMuted()
				
			else
				return pECBehavior.getTriggerMuted().instance(element)
			end
		end
		
		/**
		 * \brief Attach speaker to collider.
		 * 
		 * Default implementation calls ECComposeAttachResource.attach().
		 */
		protected func void attachSpeaker(StubElement stub, ECBehaviorCollider.Instance collider)
			pECBehavior.getAttach().attach(collider.getCollider(), pSpeaker, stub)
		end
		
		/**
		 * \brief Create speaker layer mask.
		 * 
		 * Default implementation calls ECComposeSpeaker.createLayerMask.
		 */
		/*protected func LayerMask createLayerMask(StubElement stub)
			return pECBehavior.getSpeaker().createLayerMask(stub)
		end*/
		
		
		
		/** \brief Behavior. */
		public func ECBehaviorSpeaker getECBehavior()
			return pECBehavior
		end
		
		/** \brief Speaker. */
		public func Speaker getSpeaker()
			return pSpeaker
		end
		
		/** \brief Synthesizer instance or \em null if not used. */
		public func SynthesizerInstance getSynthesizerInstance()
			return pSpeaker.getSynthesizer()
		end
		
		/** \brief Snthesizer controller or \em null if not used. */
		public func SynthesizerController getSynthesizerControllerAt(int index)
			var SynthesizerInstance synthInst = pSpeaker.getSynthesizer()
			if synthInst != null
				return synthInst.getControllerAt(index)
			end
			return null
		end
		
		/** \brief Named snthesizer controller or \em null if not used. */
		public func SynthesizerController getSynthesizerControllerNamed(String name)
			var SynthesizerInstance synthInst = pSpeaker.getSynthesizer()
			if synthInst != null
				return synthInst.getControllerNamed(name)
			end
			return null
		end
		
		
		
		/** \brief Speaker is playing. */
		public func bool getPlaying()
			return pPlaying
		end
		
		/** \brief Set if speaker is playing. */
		public func void setPlaying(bool playing)
			if playing == pPlaying
				return
			end
			
			pPlaying = playing
			
			if playing
				pSpeaker.play()
				pListeners.forEach(block Listener each
					each.startPlaying(this)
				end)
				
			elif pSpeaker.getLooping()
				pSpeaker.stop()
				pListeners.forEach(block Listener each
					each.stopPlaying(this)
				end)
			end
		end
		
		/** \brief Start playing. */
		public func void play()
			setPlaying(true)
		end
		
		/** \brief Stop playing. */
		public func void stop()
			setPlaying(false)
		end
		
		/** \brief Toggle speaker playing state. */
		public func void toggle()
			setPlaying(not pPlaying)
		end
		
		
		
		/** \brief Speaker is muted. */
		public func bool getMuted()
			return pMuted
		end
		
		/** \brief Set if speaker is muted. */
		public func void setMuted(bool muted)
			if muted == pMuted
				return
			end
			
			pMuted = muted
			
			pSpeaker.setMuted(muted and getElement().getVisible())
			
			if muted
				pListeners.forEach(block Listener each
					each.muted(this)
				end)
				
			else
				pListeners.forEach(block Listener each
					each.unmuted(this)
				end)
			end
		end
		
		/** \brief Toggle speaker muted state. */
		public func void toggleMuted()
			setMuted(not pMuted)
		end
		
		
		
		/** \brief Playing speaker trigger expression or \em null if not used. */
		public func ECBehaviorTriggered.Instance getTrigger()
			return pTrigger
		end
		
		/** \brief Muted speaker trigger expression or \em null if not used. */
		public func ECBehaviorTriggered.Instance getTriggerMuted()
			return pTriggerMuted
		end
		
		
		
		/** \brief Add listener. */
		public func void addListener(Listener listener)
			if listener == null
				throw EInvalidParam.new()
			end
			pListeners.add(listener)
		end
		
		/** \brief Remove listener. */
		public func void removeListener(Listener listener)
			pListeners.remove(listener)
		end
		
		
		
		/** \brief State changed (visble, touchable). */
		public func void stateChanged()
			if pSpeaker != null
				pSpeaker.setMuted(pMuted and getElement().getVisible())
			end
		end
		
		/** \brief Add element to game world. */
		public func void addToGameWorld()
			getElement().getGameWorld().getWorld().addSpeaker(pSpeaker)
		end
		
		/** \brief Remove element from game world. */
		public func void removeFromGameWorld()
			getElement().getGameWorld().getWorld().removeSpeaker(pSpeaker)
		end
		
		
		
		/** \brief Read element from file. */
		public func void readFromFile(PersistencyEnvironment env, FileReader reader)
			select reader.readByte() // version
			case 0
				var PersistencyFlags flags = PersistencyFlags.new(2, reader)
				var bool playing = flags.getAt(0)
				var bool muted = flags.getAt(1)
				
				setMuted(muted)
				setPlaying(playing)
				
			else
				throw EInvalidParam.new("unsupported version")
			end
		end
		
		/** Writes the element to a file. */
		public func void writeToFile(PersistencyEnvironment env, FileWriter writer)
			writer.writeByte(0) // version
			
			var PersistencyFlags flags = PersistencyFlags.new(2)
			flags.setAt(0, pPlaying)
			flags.setAt(1, pMuted)
			flags.writeToFile(writer)
		end
	end
	
	
	
	private var ECBehaviorCollider pCollider
	private var ECComposeSpeaker pSpeaker
	private var ECComposeAttachResource pAttach
	private var ECBehaviorTriggered pTrigger
	private var ECBehaviorTriggered pTriggerMuted
	private var ECBehaviorSpeaker pSyncTrigger
	private var TSTriggerTable pTriggerTable
	private var Array pListenerFactories
	
	
	
	/**
	 * \brief Create behavior element class.
	 * 
	 * These value are optional and can be null: \em collider.
	 */
	public func new(BehaviorElementClass eclass, ECBehaviorCollider collider) \
	this(eclass, collider, BaseGameApp.getApp().getLoaders(), null)
	end
	
	/** \brief Create behavior element class. */
	public func new(BehaviorElementClass eclass, ECBehaviorCollider collider, String id) \
	this(eclass, collider, BaseGameApp.getApp().getLoaders(), null, id)
	end
	
	/** \brief Create behavior element class. */
	public func new(BehaviorElementClass eclass, ECBehaviorCollider collider, Loaders loaders, \
	TSTriggerTable triggerTable) this(eclass, collider, loaders, triggerTable, "")
	end
	
	/** \brief Create behavior element class. */
	public func new(BehaviorElementClass eclass, ECBehaviorCollider collider, Loaders loaders, \
	TSTriggerTable triggerTable, String id) this(eclass, collider, loaders, triggerTable, \
	id, id.empty() if "speaker" else "speaker(" + id + ")")
	end
	
	public func new(BehaviorElementClass eclass, ECBehaviorCollider collider, \
	Loaders loaders, TSTriggerTable triggerTable, String id, String subID) \
	this(eclass, collider, loaders, triggerTable, id, subID, subID + ".")
	end
	
	public func new(BehaviorElementClass eclass, ECBehaviorCollider collider, Loaders loaders, \
	TSTriggerTable triggerTable, String id, String subID, String prefix) super(eclass, id)
		pCollider = collider
		pTriggerTable = triggerTable
		pListenerFactories = Array.new()
		
		pSpeaker = ECComposeSpeaker.new(eclass, loaders, prefix)
		pAttach = ECComposeAttachResource.new(eclass, prefix)
		
		pTrigger = ECBehaviorTriggered.new(eclass, triggerTable, subID, prefix + "trigger")
		
		pTriggerMuted = ECBehaviorTriggered.new(eclass, triggerTable, \
			prefix + "muted", prefix + "trigger(muted)")
		
		eclass.addBehavior(this)
	end
	
	/** \brief Dispose of behavior. */
	public func void dispose()
		pCollider = null
		pSyncTrigger = null
		pListenerFactories = null
		super.dispose()
	end
	
	
	
	/** \brief Collider behavior or null to not attach. */
	public func ECBehaviorCollider getCollider()
		return pCollider
	end
	
	/** \brief Composeable speaker for element class. */
	public func ECComposeSpeaker getSpeaker()
		return pSpeaker
	end
	
	/** \brief Attach resource. */
	public func ECComposeAttachResource getAttach()
		return pAttach
	end
	
	/** \brief Trigger playing. */
	public func ECBehaviorTriggered getTrigger()
		return pTrigger
	end
	
	/** \brief Trigger muted. */
	public func ECBehaviorTriggered getTriggerMuted()
		return pTriggerMuted
	end
	
	/** \brief ECBehaviorSpeaker to synchronize triggers with or \em null to disable. */
	public func ECBehaviorSpeaker getSyncTrigger()
		return pSyncTrigger
	end
	
	/** \brief Set ECBehaviorSpeaker to synchronize triggers with or \em null to disable. */
	public func void setSyncTrigger(ECBehaviorSpeaker behavior)
		pSyncTrigger = behavior
	end
	
	/** \brief Trigger table or \em null if not used. */
	public func TSTriggerTable getTriggerTable()
		return pTriggerTable
	end
	
	/** \brief Set trigger table or \em null if not used. */
	protected func void setTriggerTable(Loaders loaders, TSTriggerTable triggerTable)
		pTriggerTable = triggerTable
	end
	
	/** \brief Add listener factory. */
	public func void addListenerFactory(ListenerFactory factory)
		if factory == null
			throw ENullPointer.new()
		end
		pListenerFactories.add(factory)
	end
	
	/**
	 * \brief Add listener factory using block.
	 * 
	 * Block receives as parameter Instance and returns Listener.
	 */
	public func void addListenerFactory(Block blockFactory)
		pListenerFactories.add(BlockListenerFactory.new(blockFactory))
	end
	
	/** \brief Visit listener factories with block with argument ListenerFactory. */
	public func void forEachListenerFactory(Block ablock)
		pListenerFactories.forEach(ablock)
	end
	
	/** \brief Create listeners from factories adding them to behavior instance. */
	public func void createListeners(Instance instance)
		pListenerFactories.forEach(block ListenerFactory each
			instance.addListener(each.createListener(instance))
		end)
	end
	
	
	
	/**
	 * \brief Set to point speaker with parameters.
	 * 
	 * Helper method to quickly set up playing sound.
	 */
	public func void set(String sound, float range, float volume)
		set(sound, range, volume, Vector.new(), Vector.new(), "")
	end
	
	public func void set(String sound, float range, float volume, Vector position)
		set(sound, range, volume, position, Vector.new(), "")
	end
	
	public func void set(String sound, float range, float volume, Vector position, \
	Vector orientation)
		set(sound, range, volume, position, orientation, "")
	end
	
	public func void set(String sound, float range, float volume, Vector position, \
	Vector orientation, String bone)
		pSpeaker.getSpeakerType().setValue(SpeakerType.point)
		pSpeaker.getSound().setPath(sound)
		pSpeaker.getRange().setValue(range)
		pSpeaker.getVolume().setValue(volume)
		pSpeaker.getRollOff().setValue(1)
		pSpeaker.getDistanceOffset().setValue(0)
		pSpeaker.getPlaySpeed().setValue(1)
		pAttach.getPosition().setVector(position)
		pAttach.getOrientation().setVector(orientation)
		pAttach.getBone().setValue(bone)
	end
	
	
	
	/** \brief Get instance in element from owner element class. */
	public func Instance instance(BehaviorElement element)
		return element.getInstanceAt(getInstanceIndex()) cast Instance
	end
	
	
	
	/**
	 * \brief Get behavior in element class or \em null if absent.
	 * 
	 * Use this method to check if a particular BehaviorElementClass contains a behavior
	 * of type ECBehaviorCollider.
	 */
	static public func ECBehaviorSpeaker getBehaviorIn(BehaviorElementClass eclass)
		return eclass.findBehavior(block ECBehaviorSpeaker each
			return true
		end) cast ECBehaviorSpeaker
	end
	
	/**
	 * \brief Get behavior with id in element class or \em null if absent.
	 * 
	 * Use this method to check if a particular BehaviorElementClass contains a behavior
	 * of type ECBehaviorSpeaker with specific identifier.
	 */
	static public func ECBehaviorSpeaker getBehaviorIn(BehaviorElementClass eclass, String id)
		return eclass.findBehavior(block ECBehaviorSpeaker each
			return each.getID().equals(id)
		end) cast ECBehaviorSpeaker
	end
	
	/**
	 * \brief Get list of all behaviors in element.
	 * 
	 * Returns list contains ECBehaviorSpeaker behaviors in the order they have
	 * been created in the element.
	 */
	static public func Array getAllBehaviorsIn(BehaviorElementClass eclass)
		return eclass.collectBehaviors(block ECBehaviorSpeaker each
			return true
		end)
	end
	
	
	
	/**
	 * \brief Get instance in element or \em null if absent.
	 * 
	 * Use this method to check if a particular BehaviorElement contains a behavior instance
	 * of type ECBehaviorSpeaker.Instance . If more than one instance is present returns
	 * the first instance.
	 */
	static public func Instance getInstanceIn(BehaviorElement element)
		return element.findInstance(block Instance each
			return true
		end) cast Instance
	end
	
	/**
	 * \brief Get instance with id in element or \em null if absent.
	 * 
	 * Use this method to check if a particular BehaviorElement contains a behavior instance
	 * of type ECBehaviorSpeaker.Instance with specific identifier.
	 */
	static public func Instance getInstanceIn(BehaviorElement element, String id)
		return element.findInstance(block Instance each
			return each.getECBehavior().getID().equals(id)
		end) cast Instance
	end
	
	/**
	 * \brief Get list of all instances in element.
	 * 
	 * Returns list contains ECBehaviorSpeaker.Instance instances in the order they have
	 * been created in the element.
	 */
	static public func Array getAllInstancesIn(BehaviorElement element)
		return element.collectInstances(block Instance each
			return true
		end)
	end
	
	
	
	/** \brief Create Behavior instance. */
	public func ECBehaviorInstance createInstance(BehaviorElement element)
		return Instance.new(this, element)
	end
end
