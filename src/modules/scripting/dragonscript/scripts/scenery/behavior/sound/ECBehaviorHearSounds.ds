/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */


namespace Dragengine.Scenery

pin Dragengine.Gui
pin Dragengine.LoadSave
pin Dragengine.Preloading
pin Dragengine.Utils


/**
 * \brief Behavior element behavior adding hearing sounds support.
 * 
 * Uses a SoundLevelMeter resources to hear what sounds are playing in the audible range
 * of the element.
 * 
 * SoundLevelMeter resources take sound properties of the environment into account like
 * occlusion and how sound propagates through the world geometry. This allows game entities
 * to hear the world similar to how a player hears the world what goes for sound volumes.
 * 
 * The SoundLevelMeter resource can be queried for the speakers currently in audible range
 * and the volume they exhibit. Advanced effects audible to players like frequency band
 * specific gains or special effects are disregarded. Furthermore speakers entering and
 * leaving trigger a notification allowing elements to track elements of interest.
 * 
 * If the \em ECBehaviorCollider behavior is present in the behavior element the
 * SoundLevelMeter is attached to the collider.
 * 
 * The behavior retrieves the owner of Speakers inside the audible range. If these owners
 * are elements they are stored in a list of elements heared by the owner element. This
 * list is updated when elements enter or leave the audible range. The volume of an element
 * can be queried if required but is not stored.
 * 
 * The owner behavior element as well as other ECBehavior subclasses can add a listener
 * to be notified if elements enter and exit the audible range.
 * 
 * This element behavior can be present only once in a BehaviorElement. Trying to add more
 * than one instance results in an exception thrown.
 * 
 * Element class properties have the prefix "hearSound.".
 * 
 * This behavior does require the element class to be persistable (setPersistable).
 */
class ECBehaviorHearSounds extends DefaultECBehavior
	/** \brief Listener for behavior instance events. */
	interface Listener
		/** \brief Element become audible. */
		func void elementAudible(Instance instance, Element element)
		
		/** \brief Element became inaudible. */
		func void elementInaudible(Instance instance, Element element)
	end
	
	/** \brief Default implementation of behavior instance listener. */
	class DefaultListener implements Listener
		/** \brief Create default listener. */
		func new()
		end
		
		/** \brief Element become audible. */
		func void elementAudible(Instance instance, Element element)
		end
		
		/** \brief Element became inaudible. */
		func void elementInaudible(Instance instance, Element element)
		end
	end
	
	/** \brief Factory creating listeners. */
	interface ListenerFactory
		/** \brief Create listener. */
		func Listener createListener(Instance instance)
	end
	
	/** \brief Factory creating listeners using block. */
	class BlockListenerFactory implements ListenerFactory
		var Block pBlock
		
		/** \brief Create factory using block receiving Instance as parameter returning Listener. */
		func new(Block blockFactory)
			if blockFactory == null
				throw ENullPointer.new()
			end
			pBlock = blockFactory
		end
		
		/** \brief Create listener. */
		func Listener createListener(Instance instance)
			return pBlock.run(instance) cast Listener
		end
	end
	
	/**
	 * \brief Behavior factory.
	 * \ref 1.25
	 * 
	 * Automatically assigns these behaviors if present before adding:
	 * - Optional: \ref ECBehaviorCollider
	 * 
	 * Example XML element class:
	 * \code{.xml}
	 * <behavior type='ECBehaviorHearSounds'>
	 *   <!-- optional: set layer mask (default '2' meaning BaseGameApp.WorldLayerBit.audio).
	 *                  list of bits to set. -->
	 *   <string name='layerMask'>0 1 4</string>
	 * </behavior>
	 * \endcode
	 */
	class Factory implements BehaviorFactory
		func new()
		end
		
		func String factoryId()
			return "ECBehaviorHearSounds"
		end
		
		func ECBehavior addBehavior(BehaviorElementClass eclass, String id, Dictionary parameters)
			var ECBehaviorHearSounds behavior = ECBehaviorHearSounds.new(eclass,\
				ECBehaviorCollider.getBehaviorIn(eclass), id)
			
			if parameters.has("layerMask")
				behavior.setLayerMask(ElementClass.getSharedCodecPropertyString().\
					decodeLayerMask(parameters.getAt("layerMask") cast String))
			end
			
			return behavior
		end
	end
	
	/** \brief Behavior instance. */
	class Instance extends DefaultECBehaviorInstance implements SoundLevelMeterListener
		private class TrackedElement
			var Speaker pSpeaker
			var Element pElement
			
			func new(Speaker speaker, Element element)
				pSpeaker = speaker
				pElement = element
			end
			
			func Speaker getSpeaker()
				return pSpeaker
			end
			
			func Element getElement()
				return pElement
			end
		end
		
		
		
		var ECBehaviorHearSounds pECBehavior
		var ECBehaviorCollider.Instance pCollider
		var SoundLevelMeter pSoundLevelMeter
		var float pAudibleDistance
		var float pVolumeThreshold
		var Array pTrackedElements
		var Array pAudibleElements
		var Array pListeners
		
		
		
		/** \brief Create element. */
		func new(ECBehaviorHearSounds ecbehavior, BehaviorElement element) super(element)
			pECBehavior = ecbehavior
			pAudibleDistance = ecbehavior.getAudibleDistance().getValue()
			pVolumeThreshold = ecbehavior.getVolumeThreshold().getValue()
			pTrackedElements = Array.new()
			pListeners = Array.new()
		end
		
		/** \brief Dispose of behavior instance. */
		func void dispose()
			if pSoundLevelMeter != null
				pSoundLevelMeter.setListener(null)
				pSoundLevelMeter = null
			end
			pAudibleElements = null
			pTrackedElements = null
			pCollider = null
			pListeners = null
			
			super.dispose()
		end
		
		
		
		/** \brief Initialize element from stub. */
		func void init(StubElement stub)
			if pECBehavior.getCollider() != null
				pCollider = pECBehavior.getCollider().instance(getElement())
			end
			
			pSoundLevelMeter = createSoundLevelMeter(stub)
			
			if pCollider != null and pCollider.getCollider() != null
				attachSoundLevelMeter(stub, pCollider)
			end
			
			pSoundLevelMeter.setListener(this)
			
			pECBehavior.createListeners(this)
		end
		
		/**
		 * \brief Create sound level meter.
		 */
		protected func SoundLevelMeter createSoundLevelMeter(StubElement stub)
			var SoundLevelMeter soundLevelMeter = SoundLevelMeter.new()
			
			soundLevelMeter.setPosition(getElement().getPosition())
			soundLevelMeter.setOrientation(getElement().getOrientation())
			
			soundLevelMeter.setAudibleDistance(stub.getPropertyFloatFor(\
				pECBehavior.getAudibleDistance().getName(), pAudibleDistance))
			
			soundLevelMeter.setLayerMask(pECBehavior.getLayerMask())
			
			return soundLevelMeter
		end
		
		/**
		 * \brief Attach sound level meter to collider.
		 * 
		 * Default implementation calls ECComposeAttachResource.attach().
		 */
		protected func void attachSoundLevelMeter(StubElement stub, ECBehaviorCollider.Instance collider)
			pECBehavior.getAttach().attach(collider.getCollider(), pSoundLevelMeter, stub)
		end
		
		
		
		/** \brief Behavior. */
		func ECBehaviorHearSounds getECBehavior()
			return pECBehavior
		end
		
		/** \brief Collider behavior or null if not attached. */
		func ECBehaviorCollider.Instance getCollider()
			return pCollider
		end
		
		/** \brief Sound level meter. */
		func SoundLevelMeter getSoundLevelMeter()
			return pSoundLevelMeter
		end
		
		/** \brief Audible distance in meters. */
		func float getAudibleDistance()
			return pAudibleDistance
		end
		
		/** \brief Set audible range in meters. */
		protected func void setAudibleDistance(float range)
			pAudibleDistance = DEMath.max(range, 1.0)
			pSoundLevelMeter.setAudibleDistance(pAudibleDistance)
		end
		
		/** \brief Volume threshold required for elements to be considered audible. */
		func float getVolumeThreshold()
			return pVolumeThreshold
		end
		
		/** \brief Set volume threshold required for elements to be considered audible. */
		protected func void setVolumeThreshold(float volume)
			pVolumeThreshold = DEMath.max(volume, 0.0)
			// pSoundLevelMeter.setVolumeThreshold(pVolumeThreshold)
		end
		
		
		
		/** \brief Behavior element is listening. */
		func bool getListening()
			return pSoundLevelMeter.getEnabled()
		end
		
		/** \brief Set if behavior element is listening. */
		func void setListening(bool listening)
			pSoundLevelMeter.setEnabled(listening)
		end
		
		
		
		/** \brief Number of audible elements. */
		func int getAudibleElementCount()
			return pTrackedElements.getCount()
		end
		
		/** \brief Audible element at index. */
		func Element getAudibleElementAt(int index)
			prepareAudibleElements()
			return pAudibleElements.getAt(index) cast Element
		end
		
		/** \brief Element is audible. */
		func bool isElementAudible(Element element)
			prepareAudibleElements()
			return pAudibleElements.has(element)
		end
		
		/** \deprecated Use addAudibleElement(Speaker,Element). */
		protected func void addAudibleElement(Element element)
			var int i, count = pSoundLevelMeter.getAudibleSpeakerCount()
			var SoundLevelMeterSpeaker speaker
			for i = 0 to count
				speaker = pSoundLevelMeter.getAudibleSpeakerAt(i)
				if speaker.getSpeaker().getOwner() == element
					addAudibleElement(speaker.getSpeaker(), element)
					return
				end
			end
		end
		
		/**
		 * \brief Add audible element.
		 * \version 1.19
		 */
		protected func void addAudibleElement(Speaker speaker, Element element)
			pTrackedElements.add(TrackedElement.new(speaker, element))
			pAudibleElements = null
		end
		
		/** \brief Remove audible element. */
		protected func void removeAudibleElement(Element element)
			pTrackedElements.removeIf(block TrackedElement each
				return each.getElement() == element
			end)
			pAudibleElements = null
		end
		
		/** \brief Remove all audible elements. */
		protected func void removeAllAudibleElements()
			pTrackedElements.removeAll()
			pAudibleElements = null
		end
		
		/** \brief Get volume of element. */
		func float getAudibleElementVolume(Element element)
			var TrackedElement tracked = pTrackedElements.find(block TrackedElement each
				return each.getElement() == element
			end) cast TrackedElement
			
			return tracked != null if tracked.getSpeaker().getVolume() else 0
		end
		
		/** \brief Visit audible elements with block with parameter Element. */
		func void forEachAudibleElement(Block ablock)
			prepareAudibleElements()
			pAudibleElements.forEach(ablock)
		end
		
		
		
		/** \brief Add listener. */
		func void addListener(Listener listener)
			if listener == null
				throw EInvalidParam.new()
			end
			pListeners.add(listener)
		end
		
		/** \brief Remove listener. */
		func void removeListener(Listener listener)
			pListeners.remove(listener)
		end
		
		
		
		/** \brief Add element to game world. */
		func void addToGameWorld()
			getElement().getGameWorld().getWorld().addSoundLevelMeter(pSoundLevelMeter)
		end
		
		/** \brief Remove element from game world. */
		func void removeFromGameWorld()
			prepareAudibleElements()
			pTrackedElements.removeAll()
			
			pAudibleElements.forEach(block Element element
				pListeners.forEach(block Listener listener
					listener.elementInaudible(this, element)
				end)
			end)
			pAudibleElements = null
			
			getElement().getGameWorld().getWorld().removeSoundLevelMeter(pSoundLevelMeter)
		end
		
		
		
		/** \brief Speaker become audible. */
		func void speakerAudible(SoundLevelMeterSpeaker speaker)
			var Speaker engSpeaker = speaker.getSpeaker()
			
			if pTrackedElements.find(block TrackedElement each
				return each.getSpeaker().equals(engSpeaker)
			end) != null
				return
			end
			
			var Object owner = engSpeaker.getOwner()
			if not owner castable Element
				return
			end
			
			var Element element = owner cast Element
			
			pTrackedElements.add(TrackedElement.new(engSpeaker, element))
			pAudibleElements = null
			
			pListeners.forEach(block Listener each
				each.elementAudible(this, element)
			end)
		end
		
		/** \brief Speaker became inaudible. */
		func void speakerInaudible(Speaker speaker)
			var TrackedElement tracked = pTrackedElements.find(block TrackedElement each
				return each.getSpeaker().equals(speaker)
			end) cast TrackedElement
			
			if tracked == null
				return
			end
			
			pTrackedElements.remove(tracked)
			pAudibleElements = null
			
			var Element element = tracked.getElement()
			pListeners.forEach(block Listener each
				each.elementInaudible(this, element)
			end)
		end
		
		
		
		private func void prepareAudibleElements()
			if pAudibleElements == null
				pAudibleElements = pTrackedElements.map(block TrackedElement each
					return each.getElement()
				end)
			end
		end
		
		
		
		/** \brief Read element from file. */
		func void readFromFile(PersistencyEnvironment env, FileReader reader)
			select reader.readByte() // version
			case 0
				setListening(env.readBool(reader))
				
			else
				throw EInvalidParam.new("unsupported version")
			end
		end
		
		/** \brief Write element to file. */
		func void writeToFile(PersistencyEnvironment env, FileWriter writer)
			writer.writeByte(0) // version
			
			env.writeBool(writer, getListening())
		end
	end
	
	
	
	var ECBehaviorCollider pCollider
	var ECComposeAttachResource pAttach
	var ECPFloat pAudibleDistance
	var ECPFloat pVolumeThreshold
	var LayerMask pLayerMask
	var Array pListenerFactories
	
	
	
	/**
	 * \brief Create behavior element class.
	 * 
	 * These values are optional and can be null: \em collider.
	 */
	func new(BehaviorElementClass eclass, ECBehaviorCollider collider) \
	this(eclass, collider, "hearSound.")
	end
	
	func new(BehaviorElementClass eclass, ECBehaviorCollider collider, \
	String prefix) super(eclass)
		if getBehaviorIn(eclass) != null
			throw BEMultipleInstanceException.new(eclass, this)
		end
		
		pCollider = collider
		pListenerFactories = Array.new()
		
		pAudibleDistance = ECPFloat.new(prefix + "audibleDistance", 100, 1)
		eclass.addProperty(pAudibleDistance)
		
		pVolumeThreshold = ECPFloat.new(prefix + "volumeThreshold", 0.01, 0)
		eclass.addProperty(pVolumeThreshold)
		
		pLayerMask = LayerMask.newWith(BaseGameApp.WorldLayerBit.audio)
		
		eclass.addBehavior(this)
	end
	
	/** \brief Dispose of behavior. */
	func void dispose()
		pCollider = null
		pListenerFactories = null
		super.dispose()
	end
	
	
	
	/** \brief Collider behavior or null to not attach. */
	func ECBehaviorCollider getCollider()
		return pCollider
	end
	
	/** \brief Attach resource. */
	func ECComposeAttachResource getAttach()
		return pAttach
	end
	
	/** \brief Audible distance. */
	func ECPFloat getAudibleDistance()
		return pAudibleDistance
	end
	
	/** \brief Volume threshold required for elements to be considered audible. */
	func ECPFloat getVolumeThreshold()
		return pVolumeThreshold
	end
	
	/** \brief Layer mask. */
	func LayerMask getLayerMask()
		return pLayerMask
	end
	
	/** \brief Set layer mask. */
	func void setLayerMask(LayerMask layerMask)
		pLayerMask = layerMask
	end
	
	/** \brief Add listener factory. */
	func void addListenerFactory(ListenerFactory factory)
		if factory == null
			throw ENullPointer.new()
		end
		pListenerFactories.add(factory)
	end
	
	/**
	 * \brief Add listener factory using block.
	 * 
	 * Block receives as parameter Instance and returns Listener.
	 */
	func void addListenerFactory(Block blockFactory)
		pListenerFactories.add(BlockListenerFactory.new(blockFactory))
	end
	
	/** \brief Visit listener factories with block with argument ListenerFactory. */
	func void forEachListenerFactory(Block ablock)
		pListenerFactories.forEach(ablock)
	end
	
	/** \brief Create listeners from factories adding them to behavior instance. */
	func void createListeners(Instance instance)
		pListenerFactories.forEach(block ListenerFactory each
			instance.addListener(each.createListener(instance))
		end)
	end
	
	
	
	/** \brief Get instance in element from owner element class. */
	func Instance instance(BehaviorElement element)
		return element.getInstanceAt(getInstanceIndex()) cast Instance
	end
	
	
	
	/**
	 * \brief Get behavior in element class or \em null if absent.
	 * 
	 * Use this method to check if a particular BehaviorElementClass contains a behavior
	 * of type ECBehaviorHearSounds.
	 */
	static func ECBehaviorHearSounds getBehaviorIn(BehaviorElementClass eclass)
		return eclass.findBehavior(block ECBehaviorHearSounds each
			return true
		end) cast ECBehaviorHearSounds
	end
	
	/**
	 * \brief Get instance in element or \em null if absent.
	 * 
	 * Use this method to check if a particular BehaviorElement contains a behavior instance
	 * of type ECBehaviorHearSounds.Instance .
	 */
	static func Instance getInstanceIn(BehaviorElement element)
		return element.findInstance(block Instance each
			return true
		end) cast Instance
	end
	
	
	
	/** \brief Create Behavior instance. */
	func ECBehaviorInstance createInstance(BehaviorElement element)
		return Instance.new(this, element)
	end
end
