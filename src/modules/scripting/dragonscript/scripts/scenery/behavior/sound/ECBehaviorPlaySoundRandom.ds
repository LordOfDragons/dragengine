/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */


namespace Dragengine.Scenery

pin Dragengine.Gui
pin Dragengine.LoadSave
pin Dragengine.Preloading
pin Dragengine.Utils
pin Dragengine.TriggerSystem


/**
 * \brief Extends ECBehaviorPlaySound to pick sound to play randomly from a list of sounds.
 * 
 * Useful for situations where random sounds from a list of sounds have to be played each
 * time the behavior is triggered. If random sound list is empty behaves the same as
 * ECBehaviorPlaySound.
 * 
 * This behavior does not require the element class to be persistable (setPersistable).
 * 
 * \see https://developer.dragondreams.ch/wiki/doku.php/dragengine:modules:dragonscript:behavior_playsoundrandom
 */
class ECBehaviorPlaySoundRandom extends ECBehaviorPlaySound
	/**
	 * \brief Behavior factory.
	 * \version 1.25
	 * \see ECBehaviorPlaySound#Factory
	 * 
	 * Example XML element class:
	 * \code{.xml}
	 * <behavior type='ECBehaviorPlaySoundRandom'>
	 *   ...
	 * </behavior>
	 * 
	 * <!-- for adding multiple behaviors use unique identifiers -->
	 * <behavior type='ECBehaviorPlaySoundRandom' id='second'>
	 *   ...
	 * </behavior>
	 * \endcode
	 */
	class Factory extends ECBehaviorPlaySound.Factory
		func new()
		end
		
		func String factoryId()
			return "ECBehaviorPlaySoundRandom"
		end
		
		func ECBehavior addBehavior(BehaviorElementClass eclass, String id, Dictionary parameters)
			var ECBehaviorPlaySoundRandom behavior = ECBehaviorPlaySoundRandom.new(eclass,\
				eclass.sharedFactoryHelper.defaultComponent(eclass, parameters),\
				ECBehaviorCollider.getBehaviorIn(eclass),\
				getTriggerTableFor(parameters.getAt("triggerTable", "default") cast String), id)
			
			if parameters.has("layerMask")
				behavior.setLayerMask(ElementClass.getSharedCodecPropertyString().\
					decodeLayerMask(parameters.getAt("layerMask") cast String))
			end
			
			BehaviorElementClass.sharedFactoryHelper.setPropertiesFromParameters(\
				eclass, parameters, "playSound", id)
			return behavior
		end
	end
	
	/** \brief Behavior instance. */
	class Instance extends ECBehaviorPlaySound.Instance
		private var ECBehaviorPlaySoundRandom pECBehaviorRandom
		
		
		/** \brief Create element. */
		public func new(ECBehaviorPlaySoundRandom ecbehavior, BehaviorElement element) \
		super(ecbehavior, element)
			pECBehaviorRandom = ecbehavior
		end
		
		
		/** \brief Random sound or \em null if the list is empty. */
		public func Sound randomSound()
			return pECBehaviorRandom.getSounds().getRandom()
		end
		
		/** \brief Create speaker modified to use random sound. */
		protected func Speaker createSpeaker()
			var Speaker speaker = super.createSpeaker()
			
			var Sound sound = randomSound()
			if sound != null
				speaker.setSound(sound)
			end
			
			return speaker
		end
	end
	
	
	
	private var ECPSoundList pSounds
	
	
	
	/** \brief Create behavior element class. */
	public func new(BehaviorElementClass eclass, ECBehaviorComponent component, \
	ECBehaviorCollider collider) this(eclass, component, collider, null cast TSTriggerTable, "")
	end
	
	/** \brief Create behavior element class. */
	public func new(BehaviorElementClass eclass, ECBehaviorComponent component, \
	ECBehaviorCollider collider, String id) this(eclass, component, collider, null cast TSTriggerTable, id)
	end
	
	/** \brief Create behavior element class. */
	public func new(BehaviorElementClass eclass, ECBehaviorComponent component, \
	ECBehaviorCollider collider, String id, String prefix) \
	this(eclass, component, collider, null cast TSTriggerTable, id, prefix)
	end
	
	/** \brief Create behavior element class. */
	public func new(BehaviorElementClass eclass, ECBehaviorComponent component, \
	ECBehaviorCollider collider, TSTriggerTable triggerTable) \
	this(eclass, component, collider, triggerTable, "")
	end
	
	/** \brief Create behavior element class. */
	public func new(BehaviorElementClass eclass, ECBehaviorComponent component, \
	ECBehaviorCollider collider, TSTriggerTable triggerTable, String id) \
	this(eclass, component, collider, triggerTable, id,\
	id.empty() if "playSound" else "playSound(" + id + ")")
	end
	
	public func new(BehaviorElementClass eclass, ECBehaviorComponent component, \
	ECBehaviorCollider collider, TSTriggerTable triggerTable, String id, String subId) \
	this(eclass, component, collider, triggerTable, id, subId, subId + ".")
	end
	
	public func new(BehaviorElementClass eclass, ECBehaviorComponent component, \
	ECBehaviorCollider collider, TSTriggerTable triggerTable, String id, String subId, String prefix) \
	super(eclass, component, collider, triggerTable, id, subId, prefix)
		pSounds = ECPSoundList.new(prefix + "sounds")
		eclass.addProperty(pSounds)
	end
	
	
	
	/** \brief Speaker sounds. */
	public func ECPSoundList getSounds()
		return pSounds
	end
	
	
	
	/** \brief Create Behavior instance. */
	public func ECBehaviorInstance createInstance(BehaviorElement element)
		return Instance.new(this, element)
	end
end
