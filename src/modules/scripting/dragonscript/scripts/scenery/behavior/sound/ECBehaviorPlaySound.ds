/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */


namespace Dragengine.Scenery

pin Dragengine.Gui
pin Dragengine.LoadSave
pin Dragengine.Preloading
pin Dragengine.Utils
pin Dragengine.TriggerSystem
pin Dragengine.BehaviorTreeSystem


/**
 * \brief Behavior element behavior play sound using one shot speaker.
 * 
 * Behavior is comparable to ECBehaviorSpeaker but does not add a permanent speaker to the
 * element. Instead GWBehaviorOneShotSpeaker.addSpeaker() is used to play a short sound event.
 * One shot speakers are constructed the same way as ECBehaviorSpeaker does. Once deployed
 * the one shot speaker stays in place and vanishes once it finished playing. This is the
 * preferred way to play short sound events like a door lock toggling or firing gun shots.
 * 
 * This behavior can be added multiple times to an element. This allows to play different
 * sound events. Each instance has an identifier which can be used to retrieve a specific
 * instance to play a one shot speaker. The prefix of the speaker class properties is
 * "playSound." . If the identifier is not empty the speaker element class properties have
 * the prefix "{id}.playSound." . This can be overwritten if required.
 * 
 * Hence to use more than one speaker use code like this in your subclass constructor:
 * 
 * \code{.ds}
 * class MyElementClass extends BehaviorElementClass
 *    func new()
 *       ECBehaviorPlaySound.new(this, null, null)
 *       ECBehaviorPlaySound.new(this, null, null, "subPlaySound")
 *    end
 * end
 * \endcode
 * 
 * You can now define the parameters to use for both speakers using for example the properties
 * "volume" for the first speaker and "subPlaySound.volume" for the second speaker.
 * 
 * It is recommended to always specify an identifier even if only one speaker is used.
 * This avoids potentially name conflicts especially if other behaviors are added attaching
 * other resources too.
 * 
 * Typical parameters can be set quickly using ECBehaviorPlaySound.set() methods. This is an
 * example of door element class playing a sound for opening and a sound for closing. Both
 * sounds have a range of 30m and play at a volume of 0.8 and play at the center of the door.
 * In XML element classes these sound parameters can be modified using "playSound.open.*"
 * and "playSound.close.*".
 * 
 * Element class properties have the prefix "playSound{(id)}.".
 * 
 * \code{.ds}
 * class DoorClass extends BehaviorElementClass
 *    public ECBehaviorPlaySound playSoundOpen
 *    public ECBehaviorPlaySound playSoundClose
 *    
 *    func new()
 *       // create and add play sound behavior for open door sound
 *       playSoundOpen = ECBehaviorPlaySound.new(this, null, null, "open")
 *       playSoundOpen.set("/content/door/open.ogg", 30.0, 0.8, Vector.new(0, 1, 0))
 *       
 *       // create and add play sound behavior for close door sound
 *       playSoundClose = ECBehaviorPlaySound.new(this, null, null, "close")
 *       playSoundClose.set("/content/door/close.ogg", 30.0, 0.8, Vector.new(0, 1, 0))
 *    end
 * end
 * 
 * class Door extends BehaviorElement
 *    public ECBehaviorPlaySound.Instance playSoundOpen
 *    public ECBehaviorPlaySound.Instance playSoundClose
 *    
 *    func new(DoorClass eclass) super(eclass)
 *       // find and store the behavior instances. it is not necessary to store them away
 *       // but doing so is faster especially if playing sound many times and quickly
 *       playSoundOpen = ECBehaviorPlaySound.getInstanceIn(this, null, null, "open")
 *       playSoundClose = ECBehaviorPlaySound.getInstanceIn(this, null, null, "close")
 *    end
 *    
 *    func void openDoor()
 *       // do what is needed to open the door
 *       playSoundOpen.play()
 *    end
 *    
 *    func void closeDoor()
 *       // do what is needed to close the door
 *       playSoundClose.play()
 *    end
 * end
 * \endcode
 * 
 * If a trigger table is set the trigger expression "triggerPlay" or "{prefix}.triggerPlay"
 * can be used to play sound each time the trigger expression changes and evaluates to true.
 * Using a trigger table is usually only useful if the element can be used by mappers.
 * 
 * This behavior does not require the element class to be persistable (setPersistable).
 * 
 * \see https://developer.dragondreams.ch/wiki/doku.php/dragengine:modules:dragonscript:behavior_playsound
 */
class ECBehaviorPlaySound extends DefaultECBehavior
	/**
	 * \brief Behavior factory.
	 * \version 1.25
	 * 
	 * Automatically assigns these behaviors if present before adding:
	 * - Optional: \ref ECBehaviorCollider
	 * 
	 * Example XML element class:
	 * \code{.xml}
	 * <behavior type='ECBehaviorPlaySound'>
	 *   <!-- optional: set layer mask (default '2' meaning BaseGameApp.WorldLayerBit.audio).
	 *                  list of bits to set. -->
	 *   <string name='layerMask'>0 1 4</string>
	 * 
	 *   <!-- optional: use component with id instead of empty string -->
	 *   <string name='component'>second</string>
	 * 
	 *   <!-- optional: use BaseGameApp trigger table. game can add more supported values.
	 *                  default is 'default' -->
	 *   <string name='triggerTable'>default</string>
	 *   
	 *   <!-- optional: identifier of ECBehaviorTriggered to synchronize with or empty
	 *                  string to not synchronize. default is empty string. -->
	 *   <string name='trigger.synchronize'>other</string>
	 *   
	 *   <!-- optional: use behavior tree with id instead of empty string -->
	 *   <string name='behaviorTree'>second</string>
	 * </behavior>
	 * 
	 * <!-- for adding multiple behaviors use unique identifiers -->
	 * <behavior type='ECBehaviorPlaySound' id='second'>
	 *   ...
	 * </behavior>
	 * \endcode
	 * 
	 * Element class properties added by the behavior can also be set directly inside the tag
	 * be removing the property name prefix and starting with a "." (for example ".propertyName").
	 */
	class Factory extends DefaultBehaviorFactory
		func new() super("ECBehaviorPlaySound")
		end
		
		func ECBehavior addBehavior(BehaviorElementClass eclass, String id, Dictionary parameters)
			var ECBehaviorPlaySound behavior = ECBehaviorPlaySound.new(eclass,\
				getHelper().defaultComponent(eclass, parameters),\
				ECBehaviorCollider.getBehaviorIn(eclass),\
				getTriggerTableFor(parameters.getAt("triggerTable", "default") cast String), id)
			
			if parameters.has("layerMask")
				behavior.setLayerMask(ElementClass.getSharedCodecPropertyString().\
					decodeLayerMask(parameters.getAt("layerMask") cast String))
			end
			
			behavior.getTrigger().setSynchronize(eclass,\
				parameters.getAt("trigger.synchronize", null) cast String)
			
			behavior.setBehaviorTree(getHelper().defaultBehaviorTree(eclass, parameters))
			
			getHelper().setPropertiesFromParameters(eclass, parameters, "playSound", id)
			return behavior
		end
	end
	
	/** \brief Behavior instance. */
	class Instance extends DefaultECBehaviorInstance
		/**
		 * \brief Behavior tree action "playSound{(id)}.play".
		 * \version 1.26
		 */
		class BTAPlay implements BTAction
			var Instance pInstance
			
			func new(Instance instance)
				pInstance = instance
			end
			
			func BTResult runAction(BTContext context, Dictionary parameters)
				pInstance.play()
				return BTResult.success
			end
		end
		
		/** \brief Trigger listener to play soubd. */
		public class PlayListener extends ECBehaviorTriggered.DefaultListener
			var Instance pInstance
			
			func new(Instance instance)
				pInstance = instance
			end
			
			func void triggerExpressionTrue(ECBehaviorTriggered.Instance instance)
				pInstance.play()
			end
		end
		
		
		
		var ECBehaviorPlaySound pECBehavior
		var ECBehaviorComponent.Instance pComponent
		var ECBehaviorCollider.Instance pCollider
		var SpeakerType pSpeakerType
		var Sound pSound
		var float pVolume
		var float pRange
		var float pRollOff
		var float pDistanceOffset
		var float pPlaySpeed
		var Vector pPosition
		var Quaternion pOrientation
		var String pBone
		var int pBoneIndex
		var DMatrix pPlaySoundMatrix
		var ECBehaviorTriggered.Instance pTrigger
		
		
		
		/** \brief Create element. */
		func new(ECBehaviorPlaySound ecbehavior, BehaviorElement element) super(element)
			pECBehavior = ecbehavior
			pBoneIndex = -1
			
			pSpeakerType = ecbehavior.getSpeakerType().getEnumeration() cast SpeakerType
			pSound = ecbehavior.getSound().getSound()
			pVolume = ecbehavior.getVolume().getValue()
			pRange = ecbehavior.getRange().getValue()
			pRollOff = ecbehavior.getRollOff().getValue()
			pDistanceOffset = ecbehavior.getDistanceOffset().getValue()
			pPlaySpeed = ecbehavior.getPlaySpeed().getValue()
			pPosition = ecbehavior.getPosition().getVector()
			pOrientation = Quaternion.newFromEuler(ecbehavior.getOrientation().getVector())
			pBone = ecbehavior.getBone().getValue()
			pPlaySoundMatrix = DMatrix.newWorld(DVector.new(pPosition), pOrientation)
		end
		
		/** \brief Dispose of composeable instance. */
		func void dispose()
			pTrigger = null
			pCollider = null
			pComponent = null
			super.dispose()
		end
		
		
		
		/** \brief Initialize element from stub. */
		func void init(StubElement stub)
			var BehaviorElement element = getElement()
			
			if pECBehavior.getComponent() != null
				pComponent = pECBehavior.getComponent().instance(element)
			end
			if pECBehavior.getCollider() != null
				pCollider = pECBehavior.getCollider().instance(element)
			end
			
			updateBoneIndex()
			
			if pECBehavior.getTriggerTable() != null
				pTrigger = pECBehavior.getTrigger().synchronizedOrSelf().instance(getElement())
				pTrigger.addListener(PlayListener.new(this))
			end
			
			if pECBehavior.getBehaviorTree() != null
				var String pnp = pECBehavior.getPrefix()
				var BTContext c = pECBehavior.getBehaviorTree().instance(element).getContext()
				c.setAction(pnp + "play", BTAPlay.new(this))
			end
		end
		
		
		
		/** \brief Create speaker. */
		protected func Speaker createSpeaker()
			var Speaker speaker = Speaker.new()
			speaker.setType(pSpeakerType)
			speaker.setSound(pSound)
			speaker.setVolume(pVolume)
			speaker.setRange(pRange)
			speaker.setRollOff(pRollOff)
			speaker.setDistanceOffset(pDistanceOffset)
			speaker.setPlaySpeed(pPlaySpeed)
			speaker.setLayerMask(pECBehavior.getLayerMask())
			return speaker
		end
		
		/**
		 * \brief Position speaker.
		 * 
		 * If bone and collider is present speaker is attached.
		 */
		protected func void positionSpeaker(Speaker speaker)
			var DMatrix matrix = pPlaySoundMatrix
			
			if pComponent != null
				var Component component = pComponent.getComponent()
				
				if pBoneIndex != -1
					component.updateBones()
					matrix = matrix * component.boneGetMatrix(pBoneIndex).toDMatrix() * component.getMatrix()
					
				else
					matrix = matrix * component.getMatrix()
				end
				
			else
				matrix = matrix * getElement().getElementMatrix()
			end
			
			speaker.setPosition(matrix.getPosition())
			speaker.setOrientation(matrix.toQuaternion())
			
			if pBoneIndex != -1 and pCollider != null
				var Collider collider = pCollider.getCollider()
				if collider != null and collider castable ColliderRig
					(collider cast ColliderRig).attachBone(speaker, pBone, pPosition, pOrientation)
				end
			end
		end
		
		
		
		/** \brief Behavior. */
		func ECBehaviorPlaySound getECBehavior()
			return pECBehavior
		end
		
		/** \brief Component or null if not used. */
		func ECBehaviorComponent.Instance getComponent()
			return pComponent
		end
		
		/** \brief Collider or null if not used. */
		func ECBehaviorCollider.Instance getCollider()
			return pCollider
		end
		
		/** \brief Speaker type. */
		func SpeakerType getSpeakerType()
			return pSpeakerType
		end
		
		/** \brief Set speaker type. */
		protected func void setSpeakerType(SpeakerType type)
			pSpeakerType = type
		end
		
		/** \brief Sound to play. */
		func Sound getSound()
			return pSound
		end
		
		/** \brief Set sound to play. */
		protected func void setSound(Sound sound)
			pSound = sound
		end
		
		/** \brief Volume. */
		func float getVolume()
			return pVolume
		end
		
		/** \brief Set volume. */
		protected func void setVolume(float volume)
			pVolume = DEMath.max(volume, 0.0)
		end
		
		/** \brief Range. */
		func float getRange()
			return pRange
		end
		
		/** \brief Set range. */
		protected func void setRange(float range)
			pRange = DEMath.max(range, 0.0)
		end
		
		/** \brief Roll-off factor. */
		func float getRollOff()
			return pRollOff
		end
		
		/** \brief Set roll-off factor. */
		protected func void setRollOff(float rollOff)
			pRollOff = DEMath.max(rollOff, 0.0)
		end
		
		/**
		 * \brief Distance offset for attenuation calculation.
		 * \version 1.12
		 * 
		 * For use by distance sounds. Offsets the true distance to the sound source for attenuation
		 * calculation to make the sound appear coming from far away. Requires increasing the volume
		 * to compensate for the distance increased attenuation.
		 */
		func float getDistanceOffset()
			return pDistanceOffset
		end
		
		/**
		 * \brief Set distance offset for attenuation calculation.
		 * \version 1.12
		 * 
		 * For use by distance sounds. Offsets the true distance to the sound source for attenuation
		 * calculation to make the sound appear coming from far away. Requires increasing the volume
		 * to compensate for the distance increased attenuation.
		 */
		func void setDistanceOffset(float distanceOffset)
			pDistanceOffset = DEMath.max(distanceOffset, 0.0)
		end
		
		/** \brief Play speed. */
		func float getPlaySpeed()
			return pPlaySpeed
		end
		
		/** \brief Set play speed. */
		protected func void setPlaySpeed(float playSpeed)
			pPlaySpeed = playSpeed
		end
		
		/** \brief Relative position. */
		func Vector getPosition()
			return pPosition
		end
		
		/** \brief Set relative position. */
		protected func void setPosition(Vector position)
			pPosition = position
		end
		
		/** \brief Relative orientation. */
		func Quaternion getOrientation()
			return pOrientation
		end
		
		/** \brief Set relative orientation. */
		protected func void setOrientation(Quaternion orientation)
			pOrientation = orientation
		end
		
		/** \brief Relative bone or \em null. */
		func String getBone()
			return pBone
		end
		
		/** \brief Set relative bone or \em null. */
		protected func void setBone(String bone)
			pBone = bone
			updateBoneIndex()
		end
		
		/** \brief Relative bone index. */
		func int getBoneIndex()
			return pBoneIndex
		end
		
		/** \brief Trigger play or null if not used. */
		func ECBehaviorTriggered.Instance getTrigger()
			return pTrigger
		end
		
		
		
		/** \brief Update bone index. */
		func void updateBoneIndex()
			pBoneIndex = -1
			if pBone == null or pBone.empty() or pComponent == null
				return
			end
			var Component component = pComponent.getComponent()
			if component != null
				pBoneIndex = component.indexOfBoneNamed(pBone)
			end
		end
		
		
		
		/**
		 * \brief Play sound as one shot speaker.
		 * 
		 * \par 1.16
		 * 
		 * Returns speaker added to game world or null if unable to play sound.
		 */
		func Speaker play()
			var BehaviorElement element = getElement()
			var GameWorld gameWorld = element.getGameWorld()
			if gameWorld == null
				return null
			end
			
			var Speaker speaker = createSpeaker()
			positionSpeaker(speaker)
			speaker.setOwner(element)
			speaker.play()
			
			gameWorld.getBehaviorOneShotSpeaker().addSpeaker(speaker)
			return speaker
		end
	end
	
	
	
	var ECBehaviorComponent pComponent
	var ECBehaviorCollider pCollider
	var String pPrefix
	var ECPEnumeration pSpeakerType
	var ECPSound pSound
	var ECPFloat pVolume
	var ECPFloat pRange
	var ECPFloat pRollOff
	var ECPFloat pDistanceOffset
	var ECPFloat pPlaySpeed
	var ECPVector pPosition
	var ECPVector pOrientation
	var ECPString pBone
	var ECBehaviorTriggered pTrigger
	var LayerMask pLayerMask
	var TSTriggerTable pTriggerTable
	var ECBehaviorBehaviorTree pBehaviorTree
	
	
	
	/**
	 * \brief Create behavior element class.
	 * 
	 * These values are optional and can be null: \em component, \em collider.
	 */
	func new(BehaviorElementClass eclass, ECBehaviorComponent component, \
	ECBehaviorCollider collider) this(eclass, component, collider, null cast TSTriggerTable, "")
	end
	
	/** \brief Create behavior element class. */
	func new(BehaviorElementClass eclass, ECBehaviorComponent component, \
	ECBehaviorCollider collider, String id) \
	this(eclass, component, collider, null cast TSTriggerTable, id)
	end
	
	/** \brief Create behavior element class. */
	func new(BehaviorElementClass eclass, ECBehaviorComponent component, \
	ECBehaviorCollider collider, String id, String prefix) \
	this(eclass, component, collider, null cast TSTriggerTable, id, prefix)
	end
	
	/** \brief Create behavior element class. */
	func new(BehaviorElementClass eclass, ECBehaviorComponent component, \
	ECBehaviorCollider collider, TSTriggerTable triggerTable) \
	this(eclass, component, collider, triggerTable, "")
	end
	
	/** \brief Create behavior element class. */
	func new(BehaviorElementClass eclass, ECBehaviorComponent component, \
	ECBehaviorCollider collider, TSTriggerTable triggerTable, String id) \
	this(eclass, component, collider, triggerTable, id, \
	id.empty() if "playSound" else "playSound(" + id + ")")
	end
	
	func new(BehaviorElementClass eclass, ECBehaviorComponent component, \
	ECBehaviorCollider collider, TSTriggerTable triggerTable, String id, \
	String subID) this(eclass, component, collider, triggerTable, id, subID, subID + ".")
	end
	
	func new(BehaviorElementClass eclass, ECBehaviorComponent component, \
	ECBehaviorCollider collider, TSTriggerTable triggerTable, String id, \
	String subID, String prefix) super(eclass, id)
		pComponent = component
		pCollider = collider
		
		pPrefix = prefix
		pTriggerTable = triggerTable
		
		pLayerMask = LayerMask.newWith(BaseGameApp.WorldLayerBit.audio)
		
		eclass.addProperty(pSpeakerType = ECPEnumeration.new(\
			prefix + "type", SpeakerType.all(), SpeakerType.point))
		eclass.addProperty(pSound = ECPSound.new(prefix + "sound"))
		eclass.addProperty(pVolume = ECPFloat.new(prefix + "volume", 1, 0))
		eclass.addProperty(pRange = ECPFloat.new(prefix + "range", 30, 0))
		eclass.addProperty(pRollOff = ECPFloat.new(prefix + "rollOff", 1, 0))
		eclass.addProperty(pDistanceOffset = ECPFloat.new(prefix + "distanceOffset", 0, 0))
		eclass.addProperty(pPlaySpeed = ECPFloat.new(prefix + "playSpeed", 1))
		eclass.addProperty(pPosition = ECPVector.new(prefix + "position", Vector.new()))
		eclass.addProperty(pOrientation = ECPVector.new(prefix + "orientation", Vector.new()))
		eclass.addProperty(pBone = ECPString.new(prefix + "bone", null))
		
		pTrigger = ECBehaviorTriggered.new(eclass, triggerTable, subID, prefix + "trigger")
		
		eclass.addBehavior(this)
	end
	
	/** \brief Dispose of behavior. */
	func void dispose()
		pComponent = null
		pCollider = null
		pBehaviorTree = null
		super.dispose()
	end
	
	
	
	/** \brief Component behavior or null if not used. */
	func ECBehaviorComponent getComponent()
		return pComponent
	end
	
	/** \brief Collider behavior or null if not used. */
	func ECBehaviorCollider getCollider()
		return pCollider
	end
	
	/** \brief Prefix. */
	func String getPrefix()
		return pPrefix
	end
	
	/** \brief Speaker type. */
	func ECPEnumeration getSpeakerType()
		return pSpeakerType
	end
	
	/** \brief Speaker sound. */
	func ECPSound getSound()
		return pSound
	end
	
	/** \brief Speaker volume. */
	func ECPFloat getVolume()
		return pVolume
	end
	
	/** \brief Speaker range. */
	func ECPFloat getRange()
		return pRange
	end
	
	/** \brief Half volume distance. */
	func ECPFloat getRollOff()
		return pRollOff
	end
	
	/**
	 * \brief Distance offset for attenuation calculation.
	 * \version 1.12
	 * 
	 * For use by distance sounds. Offsets the true distance to the sound source for attenuation
	 * calculation to make the sound appear coming from far away. Requires increasing the volume
	 * to compensate for the distance increased attenuation.
	 */
	func ECPFloat getDistanceOffset()
		return pDistanceOffset
	end
	
	/** \brief Play speed. */
	func ECPFloat getPlaySpeed()
		return pPlaySpeed
	end
	
	/** \brief Position relative to element. */
	func ECPVector getPosition()
		return pPosition
	end
	
	/** \brief Orientation relative to element. */
	func ECPVector getOrientation()
		return pOrientation
	end
	
	/** \brief Name of bone to use to \em null if not used. */
	func ECPString getBone()
		return pBone
	end
	
	/** \brief Trigger play sound. */
	func ECBehaviorTriggered getTrigger()
		return pTrigger
	end
	
	/** \brief Layer mask. */
	func LayerMask getLayerMask()
		return pLayerMask
	end
	
	/** \brief Set layer mask. */
	func void setLayerMask(LayerMask layerMask)
		if layerMask == null
			throw EInvalidParam.new()
		end
		pLayerMask = layerMask
	end
	
	/** \brief Trigger table or \em null if not used. */
	func TSTriggerTable getTriggerTable()
		return pTriggerTable
	end
	
	/** \brief Set trigger table or \em null if not used. */
	protected func void setTriggerTable(TSTriggerTable triggerTable)
		pTriggerTable = triggerTable
	end
	
	/**
	 * \brief Behavior tree or null.
	 * \version 1.26
	 */
	func ECBehaviorBehaviorTree getBehaviorTree()
		return pBehaviorTree
	end
	
	/**
	 * \brief Set behavior tree or null.
	 * \version 1.26
	 */
	func void setBehaviorTree(ECBehaviorBehaviorTree behaviorTree)
		pBehaviorTree = behaviorTree
	end
	
	
	
	/**
	 * \brief Set to point speaker with parameters.
	 * 
	 * Helper method to quickly set up playing sound.
	 */
	func void set(String sound, float range, float volume)
		set(sound, range, volume, Vector.new(), Vector.new(), null)
	end
	
	func void set(String sound, float range, float volume, Vector position)
		set(sound, range, volume, position, Vector.new(), null)
	end
	
	func void set(String sound, float range, float volume, Vector position, \
	Vector orientation)
		set(sound, range, volume, position, orientation, null)
	end
	
	func void set(String sound, float range, float volume, Vector position, \
	Vector orientation, String bone)
		pSpeakerType.setEnumeration(SpeakerType.point)
		pSound.setPath(sound)
		pRange.setValue(range)
		pVolume.setValue(volume)
		pRollOff.setValue(1)
		pDistanceOffset.setValue(0)
		pPlaySpeed.setValue(1)
		pPosition.setVector(position)
		pOrientation.setVector(orientation)
		pBone.setValue(bone)
	end
	
	
	
	/** \brief Get instance in element from owner element class. */
	func Instance instance(BehaviorElement element)
		return element.getInstanceAt(getInstanceIndex()) cast Instance
	end
	
	
	
	/**
	 * \brief Get behavior in element class or \em null if absent.
	 * 
	 * Use this method to check if a particular BehaviorElementClass contains a behavior
	 * of type ECBehaviorCollider.
	 */
	static func ECBehaviorPlaySound getBehaviorIn(BehaviorElementClass eclass)
		return eclass.findBehavior(block ECBehaviorPlaySound each
			return true
		end) cast ECBehaviorPlaySound
	end
	
	/**
	 * \brief Get behavior with id in element class or \em null if absent.
	 * 
	 * Use this method to check if a particular BehaviorElementClass contains a behavior
	 * of type ECBehaviorPlaySound with specific identifier.
	 */
	static func ECBehaviorPlaySound getBehaviorIn(BehaviorElementClass eclass, String id)
		return eclass.findBehavior(block ECBehaviorPlaySound each
			return each.getID().equals(id)
		end) cast ECBehaviorPlaySound
	end
	
	/**
	 * \brief Get list of all behaviors in element.
	 * 
	 * Returns list contains ECBehaviorPlaySound behaviors in the order they have
	 * been created in the element.
	 */
	static func Array getAllBehaviorsIn(BehaviorElementClass eclass)
		return eclass.collectBehaviors(block ECBehaviorPlaySound each
			return true
		end)
	end
	
	
	
	/**
	 * \brief Get instance in element or \em null if absent.
	 * 
	 * Use this method to check if a particular BehaviorElement contains a behavior instance
	 * of type ECBehaviorPlaySound.Instance . If more than one instance is present returns
	 * the first instance.
	 */
	static func Instance getInstanceIn(BehaviorElement element)
		return element.findInstance(block Instance each
			return true
		end) cast Instance
	end
	
	/**
	 * \brief Get instance with id in element or \em null if absent.
	 * 
	 * Use this method to check if a particular BehaviorElement contains a behavior instance
	 * of type ECBehaviorPlaySound.Instance with specific identifier.
	 */
	static func Instance getInstanceIn(BehaviorElement element, String id)
		return element.findInstance(block Instance each
			return each.getECBehavior().getID().equals(id)
		end) cast Instance
	end
	
	/**
	 * \brief Get list of all instances in element.
	 * 
	 * Returns list contains ECBehaviorPlaySound.Instance instances in the order they have
	 * been created in the element.
	 */
	static func Array getAllInstancesIn(BehaviorElement element)
		return element.collectInstances(block Instance each
			return true
		end)
	end
	
	
	
	/** \brief Create Behavior instance. */
	func ECBehaviorInstance createInstance(BehaviorElement element)
		return Instance.new(this, element)
	end
end
