/* 
 * Drag[en]gine DragonScript Script Module
 *
 * Copyright (C) 2020, Roland Pl√ºss (roland@rptd.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */


namespace Dragengine.Scenery

pin Dragengine.Gui
pin Dragengine.LoadSave
pin Dragengine.Preloading
pin Dragengine.Utils
pin Dragengine.TriggerSystem


/**
 * \brief Behavior element behavior play sound using one shot speaker.
 * 
 * Behavior is comparable to ECBehaviorSpeaker but does not add a permanent speaker to the
 * element. Instead GameWorld.addOneShotSpeaker() is used to play a short sound event.
 * One shot speakers are constructed the same way as ECBehaviorSpeaker does. Once deployed
 * the one shot speaker stays in place and vanishes once it finished playing. This is the
 * preferred way to play short sound events like a door lock toggling or firing gun shots.
 * 
 * This behavior can be added multiple times to an element. This allows to play different
 * sound events. Each instance has an identifier which can be used to retrieve a specific
 * instance to play a one shot speaker. The prefix of the speaker class properties is
 * "playSound." . If the identifier is not empty the speaker element class properties have
 * the prefix "{id}.playSound." . This can be overwritten if required.
 * 
 * Hence to use more than one speaker use code like this in your subclass constructor:
 * 
 * \code{.ds}
 * class MyElementClass extends BehaviorElementClass
 *    public func new()
 *       ECBehaviorPlaySound.new(this, null, null)
 *       ECBehaviorPlaySound.new(this, null, null, "subPlaySound")
 *    end
 * end
 * \endcode
 * 
 * You can now define the parameters to use for both speakers using for example the properties
 * "volume" for the first speaker and "subPlaySound.volume" for the second speaker.
 * 
 * It is recommended to always specify an identifier even if only one speaker is used.
 * This avoids potentially name conflicts especially if other behaviors are added attaching
 * other resources too.
 * 
 * Typical parameters can be set quickly using ECBehaviorPlaySound.set() methods. This is an
 * example of door element class playing a sound for opening and a sound for closing. Both
 * sounds have a range of 30m and play at a volume of 0.8 and play at the center of the door.
 * In XML element classes these sound parameters can be modified using "playSound.open.*"
 * and "playSound.close.*".
 * 
 * Element class properties have the prefix "playSound{(id)}.".
 * 
 * \code{.ds}
 * class DoorClass extends BehaviorElementClass
 *    public ECBehaviorPlaySound playSoundOpen
 *    public ECBehaviorPlaySound playSoundClose
 *    
 *    public func new()
 *       // create and add play sound behavior for open door sound
 *       playSoundOpen = ECBehaviorPlaySound.new(this, null, null, "open")
 *       playSoundOpen.set("/content/door/open.ogg", 30.0, 0.8, Vector.new(0, 1, 0))
 *       
 *       // create and add play sound behavior for close door sound
 *       playSoundClose = ECBehaviorPlaySound.new(this, null, null, "close")
 *       playSoundClose.set("/content/door/close.ogg", 30.0, 0.8, Vector.new(0, 1, 0))
 *    end
 * end
 * 
 * class Door extends BehaviorElement
 *    public ECBehaviorPlaySound.Instance playSoundOpen
 *    public ECBehaviorPlaySound.Instance playSoundClose
 *    
 *    public func new(DoorClass eclass) super(eclass)
 *       // find and store the behavior instances. it is not necessary to store them away
 *       // but doing so is faster especially if playing sound many times and quickly
 *       playSoundOpen = ECBehaviorPlaySound.getInstanceIn(this, null, null, "open")
 *       playSoundClose = ECBehaviorPlaySound.getInstanceIn(this, null, null, "close")
 *    end
 *    
 *    public func void openDoor()
 *       // do what is needed to open the door
 *       playSoundOpen.play()
 *    end
 *    
 *    public func void closeDoor()
 *       // do what is needed to close the door
 *       playSoundClose.play()
 *    end
 * end
 * \endcode
 * 
 * If a trigger table is set the trigger expression "triggerPlay" or "{prefix}.triggerPlay"
 * can be used to play sound each time the trigger expression changes and evaluates to true.
 * Using a trigger table is usually only useful if the element can be used by mappers.
 * 
 * This behavior does not require the element class to be persistable (setPersistable).
 */
class ECBehaviorPlaySound extends DefaultECBehavior
	/** \brief Behavior instance. */
	class Instance extends DefaultECBehaviorInstance
		/** \brief Trigger listener to play soubd. */
		public class PlayListener extends ECBehaviorTriggered.DefaultListener
			private var Instance pInstance
			
			public func new( Instance instance )
				this.pInstance = instance
			end
			
			public func void triggerExpressionTrue( ECBehaviorTriggered.Instance instance )
				this.pInstance.play()
			end
		end
		
		
		
		private var ECBehaviorPlaySound pECBehavior
		private var ECBehaviorComponent.Instance pComponent
		private var ECBehaviorCollider.Instance pCollider
		private var SpeakerType pSpeakerType
		private var Sound pSound
		private var float pVolume
		private var float pRange
		private var float pRollOff
		private var float pPlaySpeed
		private var Vector pPosition
		private var Quaternion pOrientation
		private var String pBone
		private var int pBoneIndex
		private var DMatrix pPlaySoundMatrix
		private var ECBehaviorTriggered.Instance pTrigger
		
		
		
		/** \brief Create element. */
		public func new( ECBehaviorPlaySound ecbehavior, BehaviorElement element ) super( element )
			this.pECBehavior = ecbehavior
			this.pBoneIndex = -1
			
			this.pSpeakerType = ecbehavior.getSpeakerType().getEnumeration() cast SpeakerType
			this.pSound = ecbehavior.getSound().getSound()
			this.pVolume = ecbehavior.getVolume().getValue()
			this.pRange = ecbehavior.getRange().getValue()
			this.pRollOff = ecbehavior.getRollOff().getValue()
			this.pPlaySpeed = ecbehavior.getPlaySpeed().getValue()
			this.pPosition = ecbehavior.getPosition().getVector()
			this.pOrientation = Quaternion.newFromEuler( ecbehavior.getOrientation().getVector() )
			this.pBone = ecbehavior.getBone().getValue()
			this.pPlaySoundMatrix = DMatrix.newWorld( DVector.new( this.pPosition ), this.pOrientation )
		end
		
		/** \brief Dispose of composeable instance. */
		public func void dispose()
			this.pTrigger = null
			this.pCollider = null
			this.pComponent = null
			super.dispose()
		end
		
		
		
		/** \brief Initialize element from stub. */
		public func void init( StubElement stub )
			var BehaviorElement element = this.getElement()
			
			if this.pECBehavior.getComponent() != null
				this.pComponent = this.pECBehavior.getComponent().instance( element )
			end
			if this.pECBehavior.getCollider() != null
				this.pCollider = this.pECBehavior.getCollider().instance( element )
			end
			
			this.updateBoneIndex()
			
			if this.pECBehavior.getTriggerTable() != null
				this.pTrigger = this.pECBehavior.getTrigger().instance( this.getElement() )
				this.pTrigger.addListener( PlayListener.new( this ) )
			end
		end
		
		
		
		/** \brief Create speaker. */
		protected func Speaker createSpeaker()
			var Speaker speaker = Speaker.new()
			speaker.setType( this.pSpeakerType )
			speaker.setSound( this.pSound )
			speaker.setVolume( this.pVolume )
			speaker.setRange( this.pRange )
			speaker.setRollOff( this.pRollOff )
			speaker.setPlaySpeed( this.pPlaySpeed )
			speaker.setLayerMask( this.pECBehavior.getLayerMask() )
			return speaker
		end
		
		/**
		 * \brief Position speaker.
		 * 
		 * If bone and collider is present speaker is attached.
		 */
		protected func void positionSpeaker( Speaker speaker )
			var DMatrix matrix = this.pPlaySoundMatrix
			
			if this.pComponent != null
				var Component component = this.pComponent.getComponent()
				
				if this.pBoneIndex != -1
					component.updateBones()
					matrix = matrix * component.boneGetMatrix( this.pBoneIndex ).toDMatrix() * component.getMatrix()
					
				else
					matrix = matrix * component.getMatrix()
				end
				
			else
				matrix = matrix * this.getElement().getElementMatrix()
			end
			
			speaker.setPosition( matrix.getPosition() )
			speaker.setOrientation( matrix.toQuaternion() )
			
			if this.pBoneIndex != -1 and this.pCollider != null
				var Collider collider = this.pCollider.getCollider()
				if collider != null and collider castable ColliderRig
					( collider cast ColliderRig ).attachBone( speaker, \
						this.pBone, this.pPosition, this.pOrientation )
				end
			end
		end
		
		
		
		/** \brief Behavior. */
		public func ECBehaviorPlaySound getECBehavior()
			return this.pECBehavior
		end
		
		/** \brief Component or null if not used. */
		public func ECBehaviorComponent.Instance getComponent()
			return this.pComponent
		end
		
		/** \brief Collider or null if not used. */
		public func ECBehaviorCollider.Instance getCollider()
			return this.pCollider
		end
		
		/** \brief Speaker type. */
		public func SpeakerType getSpeakerType()
			return this.pSpeakerType
		end
		
		/** \brief Set speaker type. */
		protected func void setSpeakerType( SpeakerType type )
			this.pSpeakerType = type
		end
		
		/** \brief Sound to play. */
		public func Sound getSound()
			return this.pSound
		end
		
		/** \brief Set sound to play. */
		protected func void setSound( Sound sound )
			this.pSound = sound
		end
		
		/** \brief Volume. */
		public func float getVolume()
			return this.pVolume
		end
		
		/** \brief Set volume. */
		protected func void setVolume( float volume )
			this.pVolume = DEMath.max( volume, 0.0 )
		end
		
		/** \brief Range. */
		public func float getRange()
			return this.pRange
		end
		
		/** \brief Set range. */
		protected func void setRange( float range )
			this.pRange = DEMath.max( range, 0.0 )
		end
		
		/** \brief Roll-off factor. */
		public func float getRollOff()
			return this.pRollOff
		end
		
		/** \brief Set roll-off factor. */
		protected func void setRollOff( float rollOff )
			this.pRollOff = DEMath.max( rollOff, 0.0 )
		end
		
		/** \brief Play speed. */
		public func float getPlaySpeed()
			return this.pPlaySpeed
		end
		
		/** \brief Set play speed. */
		protected func void setPlaySpeed( float playSpeed )
			this.pPlaySpeed = playSpeed
		end
		
		/** \brief Relative position. */
		public func Vector getPosition()
			return this.pPosition
		end
		
		/** \brief Set relative position. */
		protected func void setPosition( Vector position )
			this.pPosition = position
		end
		
		/** \brief Relative orientation. */
		public func Quaternion getOrientation()
			return this.pOrientation
		end
		
		/** \brief Set relative orientation. */
		protected func void setOrientation( Quaternion orientation )
			this.pOrientation = orientation
		end
		
		/** \brief Relative bone or \em null. */
		public func String getBone()
			return this.pBone
		end
		
		/** \brief Set relative bone or \em null. */
		protected func void setBone( String bone )
			this.pBone = bone
			this.updateBoneIndex()
		end
		
		/** \brief Relative bone index. */
		public func int getBoneIndex()
			return this.pBoneIndex
		end
		
		/** \brief Trigger play or null if not used. */
		public func ECBehaviorTriggered.Instance getTrigger()
			return this.pTrigger
		end
		
		
		
		/** \brief Update bone index. */
		public func void updateBoneIndex()
			this.pBoneIndex = -1
			if this.pBone == null or this.pBone.empty() or this.pComponent == null
				return
			end
			var Component component = this.pComponent.getComponent()
			if component != null
				this.pBoneIndex = component.indexOfBoneNamed( this.pBone )
			end
		end
		
		
		
		/** \brief Play sound as one shot speaker. */
		public func void play()
			var BehaviorElement element = this.getElement()
			var GameWorld gameWorld = element.getGameWorld()
			if gameWorld == null
				return
			end
			
			var Speaker speaker = this.createSpeaker()
			this.positionSpeaker( speaker )
			speaker.setOwner( element )
			speaker.play()
			
			gameWorld.addOneShotSpeaker( speaker )
		end
	end
	
	
	
	private var ECBehaviorComponent pComponent
	private var ECBehaviorCollider pCollider
	private var String pPrefix
	private var ECPEnumeration pSpeakerType
	private var ECPSound pSound
	private var ECPFloat pVolume
	private var ECPFloat pRange
	private var ECPFloat pRollOff
	private var ECPFloat pPlaySpeed
	private var ECPVector pPosition
	private var ECPVector pOrientation
	private var ECPString pBone
	private var ECBehaviorTriggered pTrigger
	private var LayerMask pLayerMask
	private var TSTriggerTable pTriggerTable
	
	
	
	/**
	 * \brief Create behavior element class.
	 * 
	 * These values are optional and can be null: \em component, \em collider.
	 */
	public func new( BehaviorElementClass eclass, ECBehaviorComponent component, \
	ECBehaviorCollider collider ) this( eclass, component, collider, null cast TSTriggerTable, "" )
	end
	
	/** \brief Create behavior element class. */
	public func new( BehaviorElementClass eclass, ECBehaviorComponent component, \
	ECBehaviorCollider collider, String id ) \
	this( eclass, component, collider, null cast TSTriggerTable, id )
	end
	
	/** \brief Create behavior element class. */
	public func new( BehaviorElementClass eclass, ECBehaviorComponent component, \
	ECBehaviorCollider collider, String id, String prefix ) \
	this( eclass, component, collider, null cast TSTriggerTable, id, prefix )
	end
	
	/** \brief Create behavior element class. */
	public func new( BehaviorElementClass eclass, ECBehaviorComponent component, \
	ECBehaviorCollider collider, TSTriggerTable triggerTable ) \
	this( eclass, component, collider, triggerTable, "" )
	end
	
	/** \brief Create behavior element class. */
	public func new( BehaviorElementClass eclass, ECBehaviorComponent component, \
	ECBehaviorCollider collider, TSTriggerTable triggerTable, String id ) \
	this( eclass, component, collider, triggerTable, id, \
	id.empty() if "playSound" else "playSound(" + id + ")" )
	end
	
	public func new( BehaviorElementClass eclass, ECBehaviorComponent component, \
	ECBehaviorCollider collider, TSTriggerTable triggerTable, String id, \
	String subID ) this( eclass, component, collider, triggerTable, id, subID, subID + "." )
	end
	
	public func new( BehaviorElementClass eclass, ECBehaviorComponent component, \
	ECBehaviorCollider collider, TSTriggerTable triggerTable, String id, \
	String subID, String prefix ) super( eclass, id )
		this.pComponent = component
		this.pCollider = collider
		
		this.pPrefix = prefix
		this.pTriggerTable = triggerTable
		
		this.pLayerMask = LayerMask.newWith( BaseGameApp.WorldLayerBit.audio )
		
		this.pSpeakerType = ECPEnumeration.new( prefix + "type", SpeakerType.all(), SpeakerType.point )
		eclass.addProperty( this.pSpeakerType )
		
		this.pSound = ECPSound.new( prefix + "sound" )
		eclass.addProperty( this.pSound )
		
		this.pVolume = ECPFloat.new( prefix + "volume", 1.0, 0.0 )
		eclass.addProperty( this.pVolume )
		
		this.pRange = ECPFloat.new( prefix + "range", 30.0, 0.0 )
		eclass.addProperty( this.pRange )
		
		this.pRollOff = ECPFloat.new( prefix + "rollOff", 1.0, 0.0 )
		eclass.addProperty( this.pRollOff )
		
		this.pPlaySpeed = ECPFloat.new( prefix + "playSpeed", 1.0 )
		eclass.addProperty( this.pPlaySpeed )
		
		this.pPosition = ECPVector.new( prefix + "position", Vector.new() )
		eclass.addProperty( this.pPosition )
		
		this.pOrientation = ECPVector.new( prefix + "orientation", Vector.new() )
		eclass.addProperty( this.pOrientation )
		
		this.pBone = ECPString.new( prefix + "bone", null )
		eclass.addProperty( this.pBone )
		
		this.pTrigger = ECBehaviorTriggered.new( eclass, triggerTable, subID, prefix + "trigger" )
		
		eclass.addBehavior( this )
	end
	
	/** \brief Dispose of behavior. */
	public func void dispose()
		this.pComponent = null
		this.pCollider = null
		super.dispose()
	end
	
	
	
	/** \brief Component behavior or null if not used. */
	public func ECBehaviorComponent getComponent()
		return this.pComponent
	end
	
	/** \brief Collider behavior or null if not used. */
	public func ECBehaviorCollider getCollider()
		return this.pCollider
	end
	
	/** \brief Prefix. */
	public func String getPrefix()
		return this.pPrefix
	end
	
	/** \brief Speaker type. */
	public func ECPEnumeration getSpeakerType()
		return this.pSpeakerType
	end
	
	/** \brief Speaker sound. */
	public func ECPSound getSound()
		return this.pSound
	end
	
	/** \brief Speaker volume. */
	public func ECPFloat getVolume()
		return this.pVolume
	end
	
	/** \brief Speaker range. */
	public func ECPFloat getRange()
		return this.pRange
	end
	
	/** \brief Half volume distance. */
	public func ECPFloat getRollOff()
		return this.pRollOff
	end
	
	/** \brief Play speed. */
	public func ECPFloat getPlaySpeed()
		return this.pPlaySpeed
	end
	
	/** \brief Position relative to element. */
	public func ECPVector getPosition()
		return this.pPosition
	end
	
	/** \brief Orientation relative to element. */
	public func ECPVector getOrientation()
		return this.pOrientation
	end
	
	/** \brief Name of bone to use to \em null if not used. */
	public func ECPString getBone()
		return this.pBone
	end
	
	/** \brief Trigger play sound. */
	public func ECBehaviorTriggered getTrigger()
		return this.pTrigger
	end
	
	/** \brief Layer mask. */
	public func LayerMask getLayerMask()
		return this.pLayerMask
	end
	
	/** \brief Set layer mask. */
	public func void setLayerMask( LayerMask layerMask )
		if layerMask == null
			throw EInvalidParam.new()
		end
		this.pLayerMask = layerMask
	end
	
	/** \brief Trigger table or \em null if not used. */
	public func TSTriggerTable getTriggerTable()
		return this.pTriggerTable
	end
	
	/** \brief Set trigger table or \em null if not used. */
	protected func void setTriggerTable( TSTriggerTable triggerTable )
		this.pTriggerTable = triggerTable
	end
	
	
	
	/**
	 * \brief Set to point speaker with parameters.
	 * 
	 * Helper method to quickly set up playing sound.
	 */
	public func void set( String sound, float range, float volume )
		this.set( sound, range, volume, Vector.new(), Vector.new(), null )
	end
	
	public func void set( String sound, float range, float volume, Vector position )
		this.set( sound, range, volume, position, Vector.new(), null )
	end
	
	public func void set( String sound, float range, float volume, Vector position, \
	Vector orientation )
		this.set( sound, range, volume, position, orientation, null )
	end
	
	public func void set( String sound, float range, float volume, Vector position, \
	Vector orientation, String bone )
		this.pSpeakerType.setEnumeration( SpeakerType.point )
		this.pSound.setPath( sound )
		this.pRange.setValue( range )
		this.pVolume.setValue( volume )
		this.pRollOff.setValue( 1 )
		this.pPlaySpeed.setValue( 1 )
		this.pPosition.setVector( position )
		this.pOrientation.setVector( orientation )
		this.pBone.setValue( bone )
	end
	
	
	
	/** \brief Get instance in element from owner element class. */
	public func Instance instance( BehaviorElement element )
		return element.getInstanceAt( this.getInstanceIndex() ) cast Instance
	end
	
	
	
	/**
	 * \brief Get behavior in element class or \em null if absent.
	 * 
	 * Use this method to check if a particular BehaviorElementClass contains a behavior
	 * of type ECBehaviorCollider.
	 */
	static public func ECBehaviorPlaySound getBehaviorIn( BehaviorElementClass eclass )
		return eclass.findBehavior( block ECBehaviorPlaySound each
			return true
		end ) cast ECBehaviorPlaySound
	end
	
	/**
	 * \brief Get behavior with id in element class or \em null if absent.
	 * 
	 * Use this method to check if a particular BehaviorElementClass contains a behavior
	 * of type ECBehaviorPlaySound with specific identifier.
	 */
	static public func ECBehaviorPlaySound getBehaviorIn( BehaviorElementClass eclass, String id )
		return eclass.findBehavior( block ECBehaviorPlaySound each
			return each.getID().equals( id )
		end ) cast ECBehaviorPlaySound
	end
	
	/**
	 * \brief Get list of all behaviors in element.
	 * 
	 * Returns list contains ECBehaviorPlaySound behaviors in the order they have
	 * been created in the element.
	 */
	static public func Array getAllBehaviorsIn( BehaviorElementClass eclass )
		return eclass.collectBehaviors( block ECBehaviorPlaySound each
			return true
		end )
	end
	
	
	
	/**
	 * \brief Get instance in element or \em null if absent.
	 * 
	 * Use this method to check if a particular BehaviorElement contains a behavior instance
	 * of type ECBehaviorPlaySound.Instance . If more than one instance is present returns
	 * the first instance.
	 */
	static public func Instance getInstanceIn( BehaviorElement element )
		return element.findInstance( block Instance each
			return true
		end ) cast Instance
	end
	
	/**
	 * \brief Get instance with id in element or \em null if absent.
	 * 
	 * Use this method to check if a particular BehaviorElement contains a behavior instance
	 * of type ECBehaviorPlaySound.Instance with specific identifier.
	 */
	static public func Instance getInstanceIn( BehaviorElement element, String id )
		return element.findInstance( block Instance each
			return each.getECBehavior().getID().equals( id )
		end ) cast Instance
	end
	
	/**
	 * \brief Get list of all instances in element.
	 * 
	 * Returns list contains ECBehaviorPlaySound.Instance instances in the order they have
	 * been created in the element.
	 */
	static public func Array getAllInstancesIn( BehaviorElement element )
		return element.collectInstances( block Instance each
			return true
		end )
	end
	
	
	
	/** \brief Create Behavior instance. */
	public func ECBehaviorInstance createInstance( BehaviorElement element )
		return Instance.new( this, element )
	end
end
