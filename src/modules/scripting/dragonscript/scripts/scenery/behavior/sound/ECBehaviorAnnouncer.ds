/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */


namespace Dragengine.Scenery

pin Dragengine.Audio.Announcer
pin Dragengine.Gui
pin Dragengine.LoadSave
pin Dragengine.Preloading
pin Dragengine.Utils
pin Dragengine.TriggerSystem


/**
 * \brief Behavior element behavior adding announcer support.
 * 
 * Behavior uses an Announcer to play back announcer files. The speaker created by
 * the Announcer instance is added to the game world. This behavior can be added multiple
 * times to an element. Each instance creates one announcer speaker attached to the element
 * collider which can be individually modified. To distinguish the announcers each instance
 * has an identifier which can be used to retrieve a specific instance. Hence to use more
 * than one announcer use code like this in your subclass constructor:
 * 
 * \code{.ds}
 * class MyElement extends BehaviorElementClass
 *       ECBehaviorAnnouncer.new(this)
 *       ECBehaviorAnnouncer.new(this, "subAnnouncer")
 *    end
 * end
 * \endcode
 * 
 * You can now define the parameters to use for both announcers using for example the properties
 * "announcer.volume" for the first speaker and "announcer(subAnnouncer).volume" for the second.
 * 
 * If the \em ECBehaviorCollider behavior is present the announcer speaker is attached. The
 * speaker is attached to the named bone if defined otherwise it is attached statically.
 * 
 * This behavior contains a property to set the announcement text. Other behaviors can change
 * this text at runtime to make this alter the announcement. Changing the announcement text
 * will stop playing back the current announcement.
 * 
 * Element class properties have the prefix "announcer{(id)}.".
 * 
 * This behavior does not support persistency (setPersistable).
 */
class ECBehaviorAnnouncer extends DefaultECBehavior
	/** \brief Listener for behavior instance events. */
	interface Listener
		/** \brief Start playing back announcement. */
		func void startAnnouncement(Instance instance)
		
		/** \brief Stop playing back announcement. */
		func void stopAnnouncement(Instance instance)
	end
	
	/** \brief Default implementation of behavior instance listener. */
	class DefaultListener implements Listener
		/** \brief Create default listener. */
		public func new()
		end
		
		/** \brief Start playing back announcement. */
		public func void startAnnouncement(Instance instance)
		end
		
		/** \brief Stop playing back announcement. */
		public func void stopAnnouncement(Instance instance)
		end
	end
	
	/** \brief Factory creating listeners. */
	interface ListenerFactory
		/** \brief Create listener. */
		func Listener createListener(Instance instance)
	end
	
	/** \brief Factory creating listeners using block. */
	class BlockListenerFactory implements ListenerFactory
		private var Block pBlock
		
		/** \brief Create factory using block receiving Instance as parameter returning Listener. */
		public func new(Block blockFactory)
			if blockFactory == null
				throw ENullPointer.new()
			end
			pBlock = blockFactory
		end
		
		/** \brief Create listener. */
		public func Listener createListener(Instance instance)
			return pBlock.run(instance) cast Listener
		end
	end
	
	/** \brief Behavior instance. */
	class Instance extends DefaultECBehaviorInstance
		/** \brief Trigger listener to start announcing. */
		public class AnnounceListener extends ECBehaviorTriggered.DefaultListener
			private var Instance pInstance
			
			public func new(Instance instance)
				pInstance = instance
			end
			
			public func void triggerExpressionTrue(ECBehaviorTriggered.Instance instance)
				pInstance.announce()
			end
		end
		
		private var ECBehaviorAnnouncer pECBehavior
		private var ECBehaviorCollider.Instance pCollider
		private var Announcer pAnnouncer
		private var ECBehaviorTriggered.Instance pTrigger
		private var Array pListeners
		
		
		
		/** \brief Create element. */
		public func new(ECBehaviorAnnouncer ecbehavior, BehaviorElement element) super(element)
			pECBehavior = ecbehavior
			pListeners = Array.new()
		end
		
		/** \brief Dispose of behavior instance. */
		public func void dispose()
			if pAnnouncer != null
				pAnnouncer.getSpeaker().setOwner(null)
				pAnnouncer = null
			end
			pTrigger = null
			pCollider = null
			pListeners = null
			
			super.dispose()
		end
		
		
		
		/** \brief Initialize element from stub. */
		public func void init(StubElement stub)
			var BehaviorElement element = getElement()
			
			if pECBehavior.getCollider() != null
				pCollider = pECBehavior.getCollider().instance(element)
			end
			
			pAnnouncer = pECBehavior.getAnnouncer().getAnnouncer(stub, element.getClass())
			if pAnnouncer == null
				return
			end
			
			pECBehavior.createListeners(this)
			
			var Speaker speaker = pAnnouncer.getSpeaker()
			speaker.setPosition(element.getPosition())
			speaker.setOrientation(element.getOrientation())
			speaker.setType(pECBehavior.getSpeakerType().getEnumeration(stub) cast SpeakerType)
			speaker.setVolume(pECBehavior.getVolume().getValue(stub))
			speaker.setRange(pECBehavior.getRange().getValue(stub))
			speaker.setLayerMask(pECBehavior.getLayerMask())
			speaker.setRollOff(pECBehavior.getRollOff().getValue(stub))
			speaker.setDistanceOffset(pECBehavior.getDistanceOffset().getValue(stub))
			speaker.setShape(pECBehavior.getShape().getShapeList(stub))
			speaker.setOwner(element)
			
			if pECBehavior.getTriggerTable() != null
				pTrigger = pECBehavior.getTrigger().instance(element)
				pTrigger.addListener(AnnounceListener.new(this))
			end
			
			if pCollider != null and pCollider.getCollider() != null
				attachAnnouncer(stub, pCollider)
			end
			
			setAnnounceFromText(pECBehavior.getText().getValue(stub))
		end
		
		/**
		 * \brief Attach announcer to collider.
		 * 
		 * Default implementation calls ECComposeAttachResource.attach().
		 */
		protected func void attachAnnouncer(StubElement stub, ECBehaviorCollider.Instance collider)
			pECBehavior.getAttach().attach(collider.getCollider(), pAnnouncer.getSpeaker(), stub)
		end
		
		
		
		/** \brief Behavior. */
		public func ECBehaviorAnnouncer getECBehavior()
			return pECBehavior
		end
		
		/** \brief Announcer. */
		public func Announcer getAnnouncer()
			return pAnnouncer
		end
		
		/**
		 * \brief Set text to announce.
		 * 
		 * Stops announcement if running.
		 */
		public func void setAnnounceFromText(String text)
			if pAnnouncer == null
				return
			end
			
			stop()
			pAnnouncer.setAnnounceFromText(text)
		end
		
		
		
		/** \brief Announcement is playing. */
		public func bool isAnnouncing()
			return pAnnouncer.getPlaying()
		end
		
		/** \brief Play announcement. */
		public func void announce()
			if pAnnouncer == null or pAnnouncer.getPlaying()
				return
			end
			
			pAnnouncer.play()
			setRequiresThink(true)
			
			pListeners.forEach(block Listener each
				each.startAnnouncement(this)
			end)
		end
		
		/** \brief Stop announcement if playing. */
		public func void stop()
			if pAnnouncer == null or not pAnnouncer.getPlaying()
				return
			end
			
			pAnnouncer.stop()
			setRequiresThink(false)
			
			pListeners.forEach(block Listener each
				each.stopAnnouncement(this)
			end)
		end
		
		
		
		/** \brief Playing speaker trigger expression or \em null if not used. */
		public func ECBehaviorTriggered.Instance getTrigger()
			return pTrigger
		end
		
		
		
		/** \brief Think about what to do for the next frame update. */
		public func void think(float elapsed)
			if pAnnouncer != null and not pAnnouncer.getPlaying()
				stop()
			end
		end
		
		
		
		/** \brief Add listener. */
		public func void addListener(Listener listener)
			if listener == null
				throw EInvalidParam.new()
			end
			pListeners.add(listener)
		end
		
		/** \brief Remove listener. */
		public func void removeListener(Listener listener)
			pListeners.remove(listener)
		end
		
		
		
		/** \brief State changed (visble, touchable). */
		public func void stateChanged()
			if not getElement().getVisible()
				stop()
			end
		end
		
		/** \brief Add element to game world. */
		public func void addToGameWorld()
			if pAnnouncer != null
				getElement().getGameWorld().getWorld().addSpeaker(pAnnouncer.getSpeaker())
			end
		end
		
		/** \brief Remove element from game world. */
		public func void removeFromGameWorld()
			if pAnnouncer != null
				getElement().getGameWorld().getWorld().removeSpeaker(pAnnouncer.getSpeaker())
			end
		end
	end
	
	
	
	private var ECBehaviorCollider pCollider
	
	private var ECPAnnouncer pAnnouncer
	private var ECPEnumeration pSpeakerType
	private var ECPFloat pVolume
	private var ECPFloat pRange
	private var ECPFloat pRollOff
	private var ECPFloat pDistanceOffset
	private var ECPShapeList pShape
	private var LayerMask pLayerMask
	
	private var ECComposeAttachResource pAttach
	private var ECPString pText
	private var ECBehaviorTriggered pTrigger
	private var TSTriggerTable pTriggerTable
	private var Array pListenerFactories
	
	
	
	/**
	 * \brief Create behavior element class.
	 * 
	 * These value are optional and can be null: \em collider.
	 */
	public func new(BehaviorElementClass eclass, ECBehaviorCollider collider) \
	this(eclass, collider, BaseGameApp.getApp().getLoaders(), null)
	end
	
	/** \brief Create behavior element class. */
	public func new(BehaviorElementClass eclass, ECBehaviorCollider collider, String id) \
	this(eclass, collider, BaseGameApp.getApp().getLoaders(), null, id)
	end
	
	/** \brief Create behavior element class. */
	public func new(BehaviorElementClass eclass, ECBehaviorCollider collider, Loaders loaders, \
	TSTriggerTable triggerTable) this(eclass, collider, loaders, triggerTable, "")
	end
	
	/** \brief Create behavior element class. */
	public func new(BehaviorElementClass eclass, ECBehaviorCollider collider, Loaders loaders, \
	TSTriggerTable triggerTable, String id) this(eclass, collider, loaders, triggerTable, \
	id, id.empty() if "speaker" else "speaker(" + id + ")")
	end
	
	public func new(BehaviorElementClass eclass, ECBehaviorCollider collider, \
	Loaders loaders, TSTriggerTable triggerTable, String id, String subID) \
	this(eclass, collider, loaders, triggerTable, id, subID, subID + ".")
	end
	
	public func new(BehaviorElementClass eclass, ECBehaviorCollider collider, Loaders loaders, \
	TSTriggerTable triggerTable, String id, String subID, String prefix) super(eclass, id)
		pCollider = collider
		pTriggerTable = triggerTable
		
		pLayerMask = LayerMask.newWith(BaseGameApp.WorldLayerBit.audio)
		pListenerFactories = Array.new()
		
		pAnnouncer = ECPAnnouncer.new(prefix + "path", loaders.getAnnouncer())
		eclass.addProperty(pAnnouncer)
		
		pSpeakerType = ECPEnumeration.new(prefix + "type", SpeakerType.all(), SpeakerType.point)
		eclass.addProperty(pSpeakerType)
		
		pVolume = ECPFloat.new(prefix + "volume", 1, 0)
		eclass.addProperty(pVolume)
		
		pRange = ECPFloat.new(prefix + "range", 30, 0)
		eclass.addProperty(pRange)
		
		pRollOff = ECPFloat.new(prefix + "rollOff", 1, 0)
		eclass.addProperty(pRollOff)
		
		pDistanceOffset = ECPFloat.new(prefix + "distanceOffset", 0, 0)
		eclass.addProperty(pDistanceOffset)
		
		pShape = ECPShapeList.new(prefix + "shape", eclass.getSharedCodecPropertyString())
		eclass.addProperty(pShape)
		
		pText = ECPString.new(prefix + "text", "")
		eclass.addProperty(pText)
		
		pAttach = ECComposeAttachResource.new(eclass, prefix)
		
		pTrigger = ECBehaviorTriggered.new(eclass, triggerTable, subID, prefix + "trigger")
		
		eclass.addBehavior(this)
	end
	
	/** \brief Dispose of behavior. */
	public func void dispose()
		pCollider = null
		pListenerFactories = null
		super.dispose()
	end
	
	
	
	/** \brief Collider behavior or null to not attach. */
	public func ECBehaviorCollider getCollider()
		return pCollider
	end
	
	/** \brief Announcer. */
	public func ECPAnnouncer getAnnouncer()
		return pAnnouncer
	end
	
	/** \brief Speaker type. */
	public func ECPEnumeration getSpeakerType()
		return pSpeakerType
	end
	
	/** \brief Speaker volume. */
	public func ECPFloat getVolume()
		return pVolume
	end
	
	/** \brief Speaker range. */
	public func ECPFloat getRange()
		return pRange
	end
	
	/** \brief Roll off. */
	public func ECPFloat getRollOff()
		return pRollOff
	end
	
	/**
	 * \brief Distance offset for attenuation calculation.
	 * \version 1.12
	 * 
	 * For use by distance sounds. Offsets the true distance to the sound source for attenuation
	 * calculation to make the sound appear coming from far away. Requires increasing the volume
	 * to compensate for the distance increased attenuation.
	 */
	public func ECPFloat getDistanceOffset()
		return pDistanceOffset
	end
	
	/** \brief Layer mask. */
	public func LayerMask getLayerMask()
		return pLayerMask
	end
	
	/** \brief Set layer mask. */
	public func void setLayerMask(LayerMask layerMask)
		if layerMask == null
			throw EInvalidParam.new()
		end
		pLayerMask = layerMask
	end
	
	/** \brief Speaker shape. */
	public func ECPShapeList getShape()
		return pShape
	end
	
	/** \brief Announcement text. */
	public func ECPString getText()
		return pText
	end
	
	/** \brief Attach resource. */
	public func ECComposeAttachResource getAttach()
		return pAttach
	end
	
	/** \brief Trigger playing. */
	public func ECBehaviorTriggered getTrigger()
		return pTrigger
	end
	
	/** \brief Trigger table or \em null if not used. */
	public func TSTriggerTable getTriggerTable()
		return pTriggerTable
	end
	
	/** \brief Set trigger table or \em null if not used. */
	protected func void setTriggerTable(Loaders loaders, TSTriggerTable triggerTable)
		pTriggerTable = triggerTable
	end
	
	/** \brief Add listener factory. */
	public func void addListenerFactory(ListenerFactory factory)
		if factory == null
			throw ENullPointer.new()
		end
		pListenerFactories.add(factory)
	end
	
	/**
	 * \brief Add listener factory using block.
	 * 
	 * Block receives as parameter Instance and returns Listener.
	 */
	public func void addListenerFactory(Block blockFactory)
		pListenerFactories.add(BlockListenerFactory.new(blockFactory))
	end
	
	/** \brief Visit listener factories with block with argument ListenerFactory. */
	public func void forEachListenerFactory(Block ablock)
		pListenerFactories.forEach(ablock)
	end
	
	/** \brief Create listeners from factories adding them to behavior instance. */
	public func void createListeners(Instance instance)
		pListenerFactories.forEach(block ListenerFactory each
			instance.addListener(each.createListener(instance))
		end)
	end
	
	
	
	/**
	 * \brief Set to point speaker with parameters.
	 * 
	 * Helper method to quickly set up playing sound.
	 */
	public func void set(float range, float volume)
		set(range, volume, Vector.new(), Vector.new(), "")
	end
	
	public func void set(float range, float volume, Vector position)
		set(range, volume, position, Vector.new(), "")
	end
	
	public func void set(float range, float volume, Vector position, Vector orientation)
		set(range, volume, position, orientation, "")
	end
	
	public func void set(float range, float volume, Vector position, Vector orientation, String bone)
		pSpeakerType.setValue(SpeakerType.point)
		pRange.setValue(range)
		pVolume.setValue(volume)
		pRollOff.setValue(1)
		pDistanceOffset.setValue(0)
		pAttach.getPosition().setVector(position)
		pAttach.getOrientation().setVector(orientation)
		pAttach.getBone().setValue(bone)
	end
	
	
	
	/** \brief Get instance in element from owner element class. */
	public func Instance instance(BehaviorElement element)
		return element.getInstanceAt(getInstanceIndex()) cast Instance
	end
	
	
	
	/**
	 * \brief Get behavior in element class or \em null if absent.
	 * 
	 * Use this method to check if a particular BehaviorElementClass contains a behavior
	 * of type ECBehaviorCollider.
	 */
	static public func ECBehaviorAnnouncer getBehaviorIn(BehaviorElementClass eclass)
		return eclass.findBehavior(block ECBehaviorAnnouncer each
			return true
		end) cast ECBehaviorAnnouncer
	end
	
	/**
	 * \brief Get behavior with id in element class or \em null if absent.
	 * 
	 * Use this method to check if a particular BehaviorElementClass contains a behavior
	 * of type ECBehaviorAnnouncer with specific identifier.
	 */
	static public func ECBehaviorAnnouncer getBehaviorIn(BehaviorElementClass eclass, String id)
		return eclass.findBehavior(block ECBehaviorAnnouncer each
			return each.getID().equals(id)
		end) cast ECBehaviorAnnouncer
	end
	
	/**
	 * \brief Get list of all behaviors in element.
	 * 
	 * Returns list contains ECBehaviorAnnouncer behaviors in the order they have
	 * been created in the element.
	 */
	static public func Array getAllBehaviorsIn(BehaviorElementClass eclass)
		return eclass.collectBehaviors(block ECBehaviorAnnouncer each
			return true
		end)
	end
	
	
	
	/**
	 * \brief Get instance in element or \em null if absent.
	 * 
	 * Use this method to check if a particular BehaviorElement contains a behavior instance
	 * of type ECBehaviorAnnouncer.Instance . If more than one instance is present returns
	 * the first instance.
	 */
	static public func Instance getInstanceIn(BehaviorElement element)
		return element.findInstance(block Instance each
			return true
		end) cast Instance
	end
	
	/**
	 * \brief Get instance with id in element or \em null if absent.
	 * 
	 * Use this method to check if a particular BehaviorElement contains a behavior instance
	 * of type ECBehaviorAnnouncer.Instance with specific identifier.
	 */
	static public func Instance getInstanceIn(BehaviorElement element, String id)
		return element.findInstance(block Instance each
			return each.getECBehavior().getID().equals(id)
		end) cast Instance
	end
	
	/**
	 * \brief Get list of all instances in element.
	 * 
	 * Returns list contains ECBehaviorAnnouncer.Instance instances in the order they have
	 * been created in the element.
	 */
	static public func Array getAllInstancesIn(BehaviorElement element)
		return element.collectInstances(block Instance each
			return true
		end)
	end
	
	
	
	/** \brief Create Behavior instance. */
	public func ECBehaviorInstance createInstance(BehaviorElement element)
		return Instance.new(this, element)
	end
end
