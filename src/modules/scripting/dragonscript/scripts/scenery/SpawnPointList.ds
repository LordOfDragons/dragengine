/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */


namespace Dragengine.Scenery

pin Dragengine.Utils
pin Dragengine.Preloading



/**
 * \brief List of spawn points.
 */
class SpawnPointList
	/** \brief Dictionary of SpawnPoint keyed by String. */
	private var Dictionary pSpawnPoints
	
	
	
	/** \brief Create spawn point list. */
	public func new()
		this.pSpawnPoints = Dictionary.new()
	end
	
	
	
	/** \brief Number of spawn points. */
	public func int getCount()
		return this.pSpawnPoints.getCount()
	end
	
	/** \brief Named spawn point or \em null if absent. */
	public func SpawnPoint getNamed( String name )
		return this.pSpawnPoints.getAt( name, null ) cast SpawnPoint
	end
	
	/** \brief Named spawn point is present. */
	public func bool hasNamed( String name )
		return this.pSpawnPoints.has( name )
	end
	
	/** \brief Add spawn point. */
	public func void add( SpawnPoint spawnPoint )
		if this.pSpawnPoints.has( spawnPoint.getName() )
			throw EInvalidParam.new()
		end
		this.pSpawnPoints.setAt( spawnPoint.getName(), spawnPoint )
	end
	
	/** \brief Remove spawn point. */
	public func void remove( SpawnPoint spawnPoint )
		this.pSpawnPoints.remove( spawnPoint.getName() )
	end
	
	/** \brief Remove named spawn point if present. */
	public func void removeNamed( String name )
		if this.pSpawnPoints.has( name )
			this.pSpawnPoints.remove( name )
		end
	end
	
	/** \brief Remove all spawn points. */
	public func void removeAll()
		this.pSpawnPoints.removeAll()
	end
	
	/**
	 * \brief Visit spawn pointes using block.
	 * 
	 * Block parameter is of type SpawnPoint.
	 */
	public func void forEach( Block ablock )
		this.pSpawnPoints.forEachValue( ablock )
	end
end
