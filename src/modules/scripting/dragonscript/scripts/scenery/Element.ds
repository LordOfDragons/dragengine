/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */


namespace Dragengine.Scenery

pin Dragengine.Gui
pin Dragengine.Preloading
pin Dragengine.LoadSave


/**
 * \brief Game world element.
 */
class Element 
	var ElementClass pClass
	var DVector pPosition
	var Quaternion pOrientation
	var Vector pScaling
	var bool pIsScaled
	var Element pParent
	var GameWorld pGameWorld
	var bool pVisible
	var bool pTouchable
	var UniqueID pID
	var DMatrix pMatrix
	var DMatrix pMatrixInverse
	var StubElement pStub
	
	
	
	/** Creates a new element object. */
	func new(ElementClass elementClass)
		if elementClass == null
			throw EInvalidParam.new()
		end
		
		pClass = elementClass
		pPosition = DVector.new()
		pOrientation = Quaternion.new()
		pScaling = Vector.new(1, 1, 1)
		pIsScaled = false
		pVisible = true
		pTouchable = true
	end
	
	/**
	 * \brief Dispose of element.
	 * 
	 * Breaks reference loops and cleans up.
	 */
	func void dispose()
		pGameWorld = null
		pStub = null
		pParent = null
		pClass = null
	end
	
	
	
	/** \brief Element has been disposed of. */
	func bool isDisposed()
		return pClass == null
	end
	
	/** \brief Element has not been disposed of. */
	func bool isNotDisposed()
		return pClass != null
	end
	
	
	
	/**
	 * \brief Initialize element from stub.
	 * 
	 * Stub is stored in element for saving. Stub can be changed in certain situations.
	 * In general though the stub should be kept unchanged.
	 */
	func void init(StubElement stub)
		if stub == null
			throw EInvalidParam.new()
		end
		
		pStub = stub
		pID = stub.getID()
		pPosition = stub.getPosition()
		pOrientation = Quaternion.newFromEuler(stub.getRotation())
		pScaling = stub.getScaling()
		pIsScaled = not Vector.new(1, 1, 1).equals(pScaling)
	end
	
	
	
	/** Retrieves the unique id or null if not set. */
	func UniqueID getID()
		return pID
	end
	
	/** Sets the unique id or null to unset it. */
	func void setID(UniqueID id)
		pID = id
	end
	
	/** Retrieves the element class. */
	func ElementClass getClass()
		return pClass
	end
	
	
	
	/** \brief Position. */
	func DVector getPosition()
		return pPosition
	end
	
	/** \brief Set position. */
	func void setPosition(DVector position)
		if position.equals(pPosition)
			return
		end
		
		pPosition = position
		pMatrix = null
		pMatrixInverse = null
		
		onSetPosition()
	end
	
	/** \brief Orientation. */
	func Quaternion getOrientation()
		return pOrientation
	end
	
	/** \brief Set orientation. */
	func void setOrientation(Quaternion orientation)
		if orientation.equals(pOrientation)
			return
		end
		
		pOrientation = orientation
		pMatrix = null
		pMatrixInverse = null
		
		onSetOrientation()
	end
	
	/** \brief Scaling. */
	func Vector getScaling()
		return pScaling
	end
	
	/** \brief Set scaling. */
	func void setScaling(Vector scaling)
		if scaling.equals(pScaling)
			return
		end
		
		pScaling = scaling
		pIsScaled = not Vector.new(1, 1, 1).equals(scaling)
		pMatrix = null
		pMatrixInverse = null
		
		onSetScaling()
	end
	
	/** \brief Is scaled. */
	func bool getIsScaled()
		return pIsScaled
	end
	
	/** \brief Set position and orientation. */
	func void setGeometry(DVector position, Quaternion orientation)
		if position.equals(pPosition) and orientation.equals(pOrientation)
			return
		end
		
		pPosition = position
		pOrientation = orientation
		pMatrix = null
		pMatrixInverse = null
		
		onSetGeometry()
	end
	
	/** \brief Set position, orientation and scaling of element. */
	func void setGeometry(DVector position, Quaternion orientation, Vector scaling)
		if position.equals(pPosition) and orientation.equals(pOrientation) \
		and scaling.equals(pScaling)
			return
		end
		
		pPosition = position
		pOrientation = orientation
		pScaling = scaling
		pIsScaled = not Vector.new(1, 1, 1).equals(scaling)
		pMatrix = null
		pMatrixInverse = null
		
		onSetGeometry()
	end
	
	
	
	/** Retrieves the parent or null if not attached. */
	func Element getParent()
		return pParent
	end
	
	/** Sets the parent or null if not attached. */
	func void setParent(Element parent)
		if pParent != parent
			pParent = parent
			
			onSetParent()
		end
	end
	
	
	
	/** Retrieves the game world or null if not attached. */
	func GameWorld getGameWorld()
		return pGameWorld
	end
	
	/** Sets the game world or null if not attached. */
	func void setGameWorld(GameWorld gameWorld)
		if pGameWorld == gameWorld
			return
		end
		
		if pGameWorld != null
			removeFromGameWorld()
		end
		
		pGameWorld = gameWorld
		
		if gameWorld != null
			addToGameWorld()
		end
		
		onSetGameWorld()
	end
	
	/** Determines if the element is visible. */
	func bool getVisible()
		return pVisible
	end
	
	/** Sets if the element is visible. */
	func void setVisible(bool visible)
		if pVisible != visible
			pVisible = visible
			
			onSetVisible()
		end
	end
	
	/** Determines if the element is touchable. */
	func bool getTouchable()
		return pTouchable
	end
	
	/** Sets if the element is touchable. */
	func void setTouchable(bool touchable)
		if pTouchable != touchable
			pTouchable = touchable
			
			onSetTouchable()
		end
	end
	
	
	
	/** \brief Element stub used to create the element. */
	func StubElement getStub()
		return pStub
	end
	
	/** \brief Set element stub used to create the element. */
	func void setStub(StubElement stub)
		pStub = stub
	end
	
	
	
	/** \brief Matrix to transform from element space into world space. */
	func DMatrix getElementMatrix()
		if pMatrix == null
			pMatrix = DMatrix.newWorld(pPosition, pOrientation)
			if pIsScaled
				pMatrix = DMatrix.newScaling(DVector.new(pScaling)) * pMatrix
			end
		end
		return pMatrix
	end
	
	/** \brief Matrix to transform from world space into element space. */
	func DMatrix getInverseElementMatrix()
		if pMatrixInverse == null
			pMatrixInverse = getElementMatrix().getInverse()
		end
		return pMatrixInverse
	end
	
	
	
	/**
	 * Determines if a this element is parented directly or indirectly
	 * to the given element. If the element is the same as the given
	 * element false is returned.
	 */
	func bool isChildOf(Element parent)
		var Element testParent = getParent()
		
		while testParent != null
			if testParent == parent
				return true
			end
			
			testParent = testParent.getParent()
		end
		
		return false
	end
	
	/**
	 * Determines if a this element is parented directly or indirectly
	 * to the given element. If the element is the same as the given
	 * element true is returned.
	 */
	func bool isMyselfOrChildOf(Element parent)
		return (this == parent) or isChildOf(parent)
	end
	
	
	
	/** \brief Remove element from game world if present. */
	func void removeFromGameWorldIfPresent()
		if pGameWorld != null
			pGameWorld.removeElement(this)
		end
	end
	
	/**
	 * \brief Remove element from game world if present and dispose of element.
	 * 
	 * This is the prefered way to dispose of an element no matter if it is part of a game
	 * world or not. Do not use dispose() directly otherwise clean up logic done by
	 * removeFromGameWorld() is skipped.
	 */
	func void safeDispose()
		if pGameWorld != null
			pGameWorld.removeElement(this)
		end
		dispose()
	end
	
	
	
	/** Adds the element content to the game world if required. */
	func void addToGameWorld()
	end
	
	/** Removes the element content from the game world if placed there before. */
	func void removeFromGameWorld()
	end
	
	/**
	 * \brief Frame update started.
	 * 
	 * To receive this event call GameWorld.addEnterFrameOnce() from inside addToGameWorld().
	 * This event is called at the beginning of the next frame update before think() of any
	 * element is called.
	 * 
	 * Use this method as a one-time call to carry out tasks required to be done once before
	 * any elements start thinking. Typically this is done after adding a new element to a
	 * game world to finish connections to other elements in the game world which can not
	 * be established before all required elements are added too.
	 * 
	 * \warning Do not call GameWorld.addEnterFrameOnce() or GameWorld.removeEnterFrameOnce()
	 *          from inside enterFrame(). Do this from addToGameWorld(), removeFromGameWorld(),
	 *          think() or postThink().
	 */
	func void enterFrame()
	end
	
	/**
	 * Thinks about what the element is going to do in this frame.
	 * This is the place to use AI functions to determine the next
	 * motions beeing it displacement, rotation or other shape
	 * changes. The game world will use this information to carry
	 * out changes to the elements. An element does not change its
	 * state by itself rather waits for the game world to apply the
	 * required changes. Execute here als updates to dynamic skins
	 * that are independant, hence not requiring the game world to
	 * be uptodate for rendering.
	 *
	 * @param elapsed Time elapsed since last frame update in seconds
	 */
	func void think(float elapsed)
	end
	
	/**
	 * Called after the physics system has carried out collision
	 * detection and physics simulations. The element has to update
	 * its states like position or rotation from its registered
	 * physics objects like Colliders or Components. Complex animated
	 * elements also update here the skeletal animations.
	 *
	 * @param elapsed Time elapsed since last frame update in seconds
	 */
	func void postThink(float elapsed)
	end
	
	/** Visit this element. */
	func void visit(ElementVisitor visitor)
		visitor.visitElement(this)
	end
	
	
	
	/**
	 * \brief Read element from file reader.
	 * 
	 * The default implementation reads a single byte expecting value 0 indicating version 0.
	 * This allows subclasses to add persistency support by overwriting this method without
	 * super calling it.
	 */
	func void readFromFile(PersistencyEnvironment env, FileReader reader)
		if reader.readByte() !=  0 // version
			throw EInvalidParam.new("unsupported version")
		end
	end
	
	/**
	 * \brief Write element to file writer.
	 * 
	 * The default implementation writes a single byte of value 0 indicating version 0.
	 * This allows subclasses to add persistency support by overwriting this method without
	 * super calling it.
	 */
	func void writeToFile(PersistencyEnvironment env, FileWriter writer)
		writer.writeByte(0) // version
	end
	
	/**
	 * \brief Write element to file writer with stub.
	 * 
	 * Writes element class name, then the stub parameters and then the element parameters.
	 * If no stub exists an empty one is used for writing stub parameters.
	 */
	func void writeToFileWithStub(PersistencyEnvironment env, FileWriter writer)
		pStub.writeToFile(writer)
		writeToFile(env, writer)
	end
	
	/**
	 * \brief Write element to file writer with stub supporting null element.
	 * 
	 * Writes element class name, then the stub parameters and then the element parameters.
	 * If no stub exists an empty one is used for writing stub parameters. If element is
	 * \em null empty element class name is written. Empty element class name is used
	 * during loading to indicate a \em null element.
	 */
	static func void writeElementToFileWithStub(PersistencyEnvironment env, \
	FileWriter writer, Element element)
		if element != null
			element.writeToFileWithStub(env, writer)
			
		else
			writer.writeString8("")
		end
	end
	
	/**
	 * \brief Update stub position, rotation and scaling from element.
	 * \version 1.23
	 */
	func void updateStubGeometryFromElement()
		pStub.setPosition(pPosition)
		pStub.setRotation(pOrientation.getEulerAngles())
		pStub.setScaling(pScaling)
	end
	
	
	/**
	 * \brief Load element from file reader with stub supporting null element.
	 *
	 * Reads element class name from reader. If element class name is empty \em null element
	 * is returned. Otherwise stub and element is read from file reader. Uses
	 * ElementClass.loadElement() if supported.
	 */
	static func Element readElementFromFileWithStub(PersistencyEnvironment env, \
	FileReader reader, ElementClassList ElementClassList)
		var StubElement stub = StubElement.readFromFile(reader, ElementClassList)
		if stub == null
			return null
		end
		return stub.loadElement(env, reader)
	end
	
	
	
	/** \brief Position changed. */
	func void onSetPosition()
	end
	
	/** \brief Orientation changed. */
	func void onSetOrientation()
	end
	
	/** \brief Scaling changed. */
	func void onSetScaling()
	end
	
	/** \brief Position, orientation or scaling changed. */
	func void onSetGeometry()
	end
	
	/** Parent changed. */
	func void onSetParent()
	end
	
	/** Game world changed. */
	func void onSetGameWorld()
	end
	
	/** Visible state changed. */
	func void onSetVisible()
	end
	
	/** Touchable state changed. */
	func void onSetTouchable()
	end
	
	
	
	/** Return string representation of this Element. */
	func String toString()
		return "a " + pClass.getClassname() + "(ID " + pID + ")"
	end
	
	
	
	/** \brief Log using BaseGameApp Console if present. */
	func void log(String message)
		var BaseGameApp app = BaseGameApp.getApp()
		if app != null
			app.getConsole().addMessage(pClass.getClassname() \
				+ "(ID " + pID + ") at " + pPosition + ": " + message)
		end
	end
	
	
	
	/** \brief Debug information as Dictionary. */
	func Dictionary debugInformation()
		var Dictionary info = Dictionary.new()
		info.setAt("class", pClass != null if pClass.getClassname() else null)
		info.setAt("position", pPosition)
		info.setAt("orientation", pOrientation.getEulerAngles())
		info.setAt("scaling", pScaling)
		info.setAt("parent", pParent != null if pParent.pID else null)
		info.setAt("visible", pVisible)
		info.setAt("touchable", pTouchable)
		info.setAt("id", pID)
		return info
	end
end
