/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */


namespace Dragengine.Scenery

pin Dragengine.Gui
pin Dragengine.Preloading
pin Dragengine.Utils
pin Dragengine.Preloading



/**
 * \brief List of element class elements class property for use with XML loading.
 * 
 * Similar to ECPElementClass but allows to store any number of element classes.
 * Useful for having a list of similar element classes picking one randomly.
 */
class ECPElementClassList extends ElementClassProperty
	private var ElementClassList pElementClassList
	private var Array pElementClassNames
	private var Array pElementClasses
	private var Array pNotFoundElementClasses
	private var bool pHasPreloaded
	
	
	
	/** \brief Create property. */
	public func new(String name, ElementClassList eclassList) super(name)
		if eclassList == null
			throw EInvalidParam.new()
		end
		pElementClassList = eclassList
		pElementClassNames = Array.new()
		pElementClasses = Array.new()
	end
	
	/** \brief Dispose of element class property to break reference loops. */
	public func void dispose()
		pElementClassList = null
		pElementClasses = null
	end
	
	
	
	/** \brief Element class manager to look up element class in. */
	public func ElementClassList getElementClassList()
		return pElementClassList
	end
	
	
	
	/** \brief Remove all element class names. */
	public func void removeAllElementClassNames()
		pElementClassNames.removeAll()
	end
	
	/** \brief Add element class name. */
	public func void addElementClassName(String elementClassName)
		pElementClassNames.add(elementClassName)
	end
	
	
	
	/** \brief Number of element classes. */
	public func int getElementClassCount()
		return pElementClasses.getCount()
	end
	
	/** \brief Element clas at index. */
	public func ElementClass getElementClassAt(int index)
		return pElementClasses.getAt(index) cast ElementClass
	end
	
	/** \brief Get random element class or \em null if no element class is present. */
	public func ElementClass getRandomElementClass()
		if pElementClasses.getCount() == 0
			return null
			
		else
			return pElementClasses.random() cast ElementClass
		end
	end
	
	/** \brief For each element class with block with ElementClass as parameter. */
	public func void forEachElementClass(Block ablock)
		pElementClasses.forEach(ablock)
	end
	
	/** \brief Remove all element classes. */
	public func void removeAllElementClass()
		pElementClasses.removeAll()
	end
	
	/** \brief Add element class. */
	public func void addElementClass(ElementClass elementClass)
		pElementClasses.add(elementClass)
	end
	
	/** \brief Property has been preloaded. */
	public func bool getHasPreloaded()
		return pHasPreloaded
	end
	
	
	
	/** \brief Set value of property from XML decoded value. */
	public func void setValue(Object value)
		pElementClassNames.removeAll()
		(value cast Array).forEach(block String each
			pElementClassNames.add(each)
		end)
	end
	
	/**
	 * \brief Copy value from another element class property of the same type.
	 * \version 1.17
	 */
	public func void copyValue(ElementClass elementClass, ElementClassProperty property)
		pElementClassNames = Array.new((property cast ECPElementClassList).pElementClassNames)
	end
	
	
	
	/** \brief Preload resources if supported. */
	public func void preloadResources(ElementClass elementClass, PreloadCounter counter)
		if pHasPreloaded
			return
		end
		
		pHasPreloaded = true
		pNotFoundElementClasses = null
		pElementClasses.removeAll()
		
		pElementClassNames.forEach(block String each
			if each.empty()
				return null
			end
			
			var ElementClass eachEClass = pElementClassList.getNamed(each)
			
			if eachEClass == null
				if pNotFoundElementClasses == null
					pNotFoundElementClasses = Array.new()
				end
				pNotFoundElementClasses.add(each)
				return null
			end
			
			pElementClasses.add(eachEClass)
			eachEClass.preloadResources(counter)
		end)
	end
	
	/**
	 * \brief Log preloading problems.
	 * \returns True if problems are present.
	 */
	public func bool logPreloadProblems(ElementClass elementClass, Console console)
		if pNotFoundElementClasses == null
			return false
		end
		
		pNotFoundElementClasses.forEach(block String each
			console.addMessage("Property " + elementClass.getClassname() + "." \
				+ getName() + ": Unknown element class " + each)
		end)
		return true
	end
	
	
	
	/**
	 * \brief Element class list modified by stub property if present.
	 * 
	 * If named stub property is not present or empty string the stored element class list
	 * is returned. If the named stub property is present it is decoded using codec 
	 * 
	 * \returns Array of ElementClass.
	 */
	public func Array getElementClasses(StubWithProperties stub, CodecPropertyString codec)
		var String value = stub.getPropertyValueFor(getName(), "")
		if value.empty()
			return Array.new(pElementClasses)
		end
		
		return codec.decodeStringList(value).map(block String each
			var ElementClass eclass = pElementClassList.getNamed(each)
			if eclass == null
				throw EInvalidParam.new()
			end
			return eclass
		end)
	end
end
