/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */


namespace Dragengine.Scenery

pin Dragengine.Gui
pin Dragengine.Utils
pin Dragengine.Preloading



/**
 * \brief Shape list element class property for use with XML loading.
 * 
 * Shape list is stored as ShapeList instance. From XML the shape list is read
 * using an encoded string decoded using CodecPropertyString.
 */
class ECPShapeList extends ElementClassProperty
	private var CodecPropertyString pCodec
	private var ShapeList pShapeList
	
	
	
	/** \brief Create property. */
	public func new(String name, CodecPropertyString codec) super(name)
		pCodec = codec
		pShapeList = ShapeList.new()
	end
	
	/** \brief Create property with initial path. */
	public func new(String name, CodecPropertyString codec, ShapeList shapeList) super(name)
		pCodec = codec
		pShapeList = shapeList
	end
	
	
	
	/** \brief Coded used to decode shape string. */
	public func CodecPropertyString getCodec()
		return pCodec
	end
	
	/** \brief Shape list. */
	public func ShapeList getShapeList()
		return pShapeList
	end
	
	/** \brief Set shape. */
	public func void setShapeList(ShapeList shape)
		pShapeList = shape
	end
	
	/** \brief Shape list string. */
	public func String getShapeListString()
		return pCodec.encodeShapeList(pShapeList)
	end
	
	/** \brief Set shape list from shape string. */
	public func void setShapeListFromString(String string)
		pShapeList = pCodec.decodeShapeList(string)
	end
	
	
	
	/** \brief Set value of property from XML decoded value. */
	public func void setValue(Object value)
		setShapeListFromString(value cast String)
	end
	
	/**
	 * \brief Copy value from another element class property of the same type.
	 * \version 1.17
	 */
	public func void copyValue(ElementClass elementClass, ElementClassProperty property)
		pShapeList = ShapeList.new((property cast ECPShapeList).pShapeList)
	end
	
	
	
	/**
	 * \brief Shape list modified by stub property if present.
	 * 
	 * If named stub property is not present the stored shape list is returned. If the named
	 * stub property is present it is decoded using the stored decoder and the result returned.
	 * 
	 * Uses the stored property name as stub property name.
	 */
	public func ShapeList getShapeList(StubWithProperties stub)
		return getShapeList(stub, getName())
	end
	
	/**
	 * \brief Shape list modified by stub property if present.
	 * 
	 * If named stub property is not present the stored shape list is returned. If the named
	 * stub property is present it is decoded using the stored decoder and the result returned.
	 */
	public func ShapeList getShapeList(StubWithProperties stub, String name)
		var String value = stub.getPropertyValueFor(name, null)
		if value != null
			return pCodec.decodeShapeList(value)
			
		else
			return pShapeList
		end
	end
end
