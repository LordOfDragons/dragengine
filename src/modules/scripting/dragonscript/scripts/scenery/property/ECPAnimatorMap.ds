/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */


namespace Dragengine.Scenery

pin Dragengine.Gui
pin Dragengine.Preloading
pin Dragengine.Utils
pin Dragengine.LoadSave



/**
 * \brief Dictionary of animators element class property for use with XML loading.
 * 
 * Similar to ECPAnimator but assigns each animator a unique name. This is useful to define
 * a list of animators to use mapped against well known identifiers. Also allows to map
 * the same animator to multiple unique identifiers if required.
 */
class ECPAnimatorMap extends ElementClassProperty
	var LoadAnimator pLoader
	var Dictionary pPath, pAnimators
	var Array pFailedLoading, pExceptions
	var bool pHasPreloaded
	
	
	
	/** \brief Create property. */
	func new(String name, LoadAnimator loader) super(name)
		pLoader = loader
		pPath = Dictionary.new()
		pAnimators = Dictionary.new()
	end
	
	/** \brief Dispose of element class property to break reference loops. */
	func void dispose()
		pAnimators = null
	end
	
	
	
	/** \brief Animator loader. */
	func LoadAnimator getLoader()
		return pLoader
	end
	
	/** \brief Remove all path. */
	func void removeAllPath()
		pPath.removeAll()
	end
	
	/** \brief Set path to load for identifier. */
	func void setPathAt(String id, String path)
		pPath.setAt(id, path)
	end
	
	
	
	/** \brief Number of animators. */
	func int getCount()
		return pAnimators.getCount()
	end
	
	/** \brief Animator with identifier or \em null if absent. */
	func Animator getAt(String id)
		return pAnimators.getAt(id) cast Animator
	end
	
	/** \brief Visit animators with block with String id and Animator value. */
	func void forEach(Block ablock)
		pAnimators.forEach(ablock)
	end
	
	/** \brief Remove all animators. */
	func void removeAll()
		pAnimators.removeAll()
	end
	
	/** \brief Set animator for identifier. */
	func void setAt(String id, Animator animator)
		pAnimators.setAt(id, animator)
	end
	
	/** \brief Property has been preloaded. */
	func bool getHasPreloaded()
		return pHasPreloaded
	end
	
	
	
	/** \brief Set value of property from XML decoded value. */
	func void setValue(Object value)
		pPath.removeAll()
		(value cast Dictionary).forEach(block String id, String path
			pPath.setAt(id, path)
		end)
	end
	
	/**
	 * \brief Copy value from another element class property of the same type.
	 * \version 1.17
	 */
	func void copyValue(ElementClass elementClass, ElementClassProperty property)
		var String basePath = elementClass.getBasePath()
		pPath = (property cast ECPAnimatorMap).pPath.map(block String id, String path
			return not path.empty() if File.absolutePath(path, basePath).getPath() else null
		end)
	end
	
	
	
	/** \brief Preload resources if supported. */
	func void preloadResources(ElementClass elementClass, PreloadCounter counter)
		if pHasPreloaded
			return
		end
		
		pHasPreloaded = true
		pFailedLoading = null
		pExceptions = null
		pAnimators.removeAll()
		
		var String realPath, basePath = elementClass.getBasePath()
		
		pPath.forEach(block String id, String path
			if path.empty()
				return null
			end
			
			realPath = File.absolutePath(path, basePath).getPath()
			try
				pAnimators.setAt(id, pLoader.loadFromFile(realPath))
				
			catch Exception e
				if pFailedLoading == null
					pFailedLoading = Array.new()
				end
				pFailedLoading.add(realPath)
				
				if pExceptions == null
					pExceptions = Array.new()
				end
				pExceptions.add(e)
			end
		end)
	end
	
	/**
	 * \brief Log preloading problems.
	 * \returns True if problems are present.
	 */
	func bool logPreloadProblems(ElementClass elementClass, Console console)
		if pFailedLoading == null
			return false
		end
		
		pFailedLoading.forEach(block int index, String each
			console.addError("Property " + elementClass.getClassname() + "." \
				+ getName() + ": Failed loading animator " + each,\
					pExceptions.getAt(index) cast Exception)
		end)
		return true
	end
	
	
	
	/**
	 * \brief Animator map modified by stub property if present.
	 * 
	 * If named stub property is not present or empty string the stored animator map
	 * is returned. If the named stub property is present it is decoded using codec 
	 * 
	 * Supported element stub property values are:
	 * - "id1:path1 ... idN:pathN"
	 * 
	 * \returns Dictionary mapping String id to Animator.
	 */
	func Dictionary getAnimators(StubWithProperties stub, CodecPropertyString codec)
		var String value = stub.getPropertyValueFor(getName(), "")
		if value.empty()
			return Dictionary.new(pAnimators)
		end
		
		var Dictionary map = Dictionary.new()
		codec.decodeStringList(value).forEach(block String each
			var Array parts = each.splitExact(':')
			map.setAt(parts.getAt(0) cast String, pLoader.loadFromFile(parts.getAt(1) cast String))
		end)
		return map
	end
end
