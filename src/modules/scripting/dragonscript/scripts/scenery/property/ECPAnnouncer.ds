/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */


namespace Dragengine.Scenery

pin Dragengine.Audio.Announcer
pin Dragengine.Gui
pin Dragengine.LoadSave
pin Dragengine.Preloading
pin Dragengine.Utils



/**
 * \brief Announcer element class property for use with XML loading.
 * 
 * Announcer is set from XML using a path. Loads the announcer during preloading.
 * The value of the property is then the loaded resource. If loading fails null
 * announcer is stored.
 */
class ECPAnnouncer extends ElementClassProperty implements PreloadListener
	var LoadAnnouncer pLoader
	var String pPath
	var Announcer pAnnouncer
	var bool pHasPreloaded
	var bool pFailed
	var Exception pException
	
	
	/** \brief Create property. */
	func new(String name, LoadAnnouncer loader) this(name, loader, null)
	end
	
	/** \brief Create property with initial path. */
	func new(String name, LoadAnnouncer loader, String path) super(name)
		pLoader = loader
		pPath = path
	end
	
	
	
	/** \brief Announcer loader. */
	func LoadAnnouncer getLoader()
		return pLoader
	end
	
	/** \brief Path to announcer. */
	func String getPath()
		return pPath
	end
	
	/** \brief Set path to announcer. */
	func void setPath(String path)
		pPath = path
	end
	
	/** \brief Announcer or \em null if not present. */
	func Announcer getAnnouncer()
		return pAnnouncer
	end
	
	/** \brief Set announcer or \em null if not present. */
	func void setAnnouncer(Announcer announcer)
		pAnnouncer = announcer
	end
	
	/** \brief Property has been preloaded. */
	func bool getHasPreloaded()
		return pHasPreloaded
	end
	
	
	
	/** \brief Set value of property from XML decoded value. */
	func void setValue(Object value)
		pPath = value cast String
	end
	
	/**
	 * \brief Copy value from another element class property of the same type.
	 * \version 1.17
	 */
	func void copyValue(ElementClass elementClass, ElementClassProperty property)
		var String path = (property cast ECPAnnouncer).pPath
		if path != null and not path.empty()
			pPath = File.absolutePath(path, elementClass.getBasePath()).getPath()
		end
	end
	
	
	
	/** \brief Preload resources if supported. */
	func void preloadResources(ElementClass elementClass, PreloadCounter counter)
		if pHasPreloaded
			return
		end
		
		pHasPreloaded = true
		
		if pPath == null or pPath.empty()
			return
		end
		
		var String path = File.absolutePath(pPath, elementClass.getBasePath()).getPath()
		
		try
			var PreloadAnnouncer preloader = pLoader.loadFromFileAsync(path, counter)
			preloader.addListener(this)
			preloader.checkFinished()
			
		catch Exception e
			pException = e
		end
	end
	
	/**
	 * \brief Log preloading problems.
	 * \returns True if problems are present.
	 */
	func bool logPreloadProblems(ElementClass elementClass, Console console)
		if pFailed
			console.addError("Property " + elementClass.getClassname() + "." \
				+ getName() + ": Failed loading announcer " \
				+ File.absolutePath(pPath, elementClass.getBasePath()).getPath(), pException)
			return true
		end
		return false
	end
	
	
	
	/** \brief One or more resources finished preloading but not all yet. */
	func void resourcesFinished(Preloader preloader)
	end
	
	/** \brief Preloading of all resources finished.  */
	func void preloadingFinished(Preloader preloader, bool success)
		if success
			pAnnouncer = (preloader cast PreloadAnnouncer).getAnnouncer()
			
		else
			pFailed = true
		end
	end
	
	
	
	/**
	 * \brief Announcer modified by stub property if present.
	 * 
	 * If named stub property is not present or empty string the stored announcer is returned.
	 * If the named stub property is present it is loaded as announcer resource.
	 */
	func Announcer getAnnouncer(StubWithProperties stub, ElementClass eclass)
		var String value = stub.getPropertyValueFor(getName(), "")
		if value.empty()
			return pAnnouncer
		end
		
		try
			return pLoader.loadFromFile(value)
			
		catch Exception e
			throw ELoadResourceFailed.new(value, eclass.getClassname(), e)
		end
	end
end
