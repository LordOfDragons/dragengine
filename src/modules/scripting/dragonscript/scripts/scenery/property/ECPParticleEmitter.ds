/* 
 * Drag[en]gine DragonScript Script Module
 *
 * Copyright (C) 2020, Roland Pl√ºss (roland@rptd.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */


namespace Dragengine.Scenery

pin Dragengine.Gui
pin Dragengine.LoadSave
pin Dragengine.Preloading
pin Dragengine.Utils



/**
 * \brief Particle emitter element class property for use with XML loading.
 * 
 * Particle emitter is set from XML using a path. Loads the particle emitter during
 * preloading. The value of the property is then the loaded resource. If loading
 * fails null particle emitter is stored.
 */
class ECPParticleEmitter extends ElementClassProperty
	private var LoadParticleEmitter pLoader
	private var String pPath
	private var ParticleEmitter pParticleEmitter
	private var bool pHasPreloaded
	
	
	
	/** \brief Create property. */
	public func new(String name, LoadParticleEmitter loader) super(name)
		pLoader = loader
	end
	
	/** \brief Create property with initial path. */
	public func new(String name, LoadParticleEmitter loader, String path) super(name)
		pLoader = loader
		pPath = path
	end
	
	
	
	/** \brief Particle emitter loader. */
	public func LoadParticleEmitter getLoader()
		return pLoader
	end
	
	/** \brief Path to particle emitter. */
	public func String getPath()
		return pPath
	end
	
	/** \brief Set path to particle emitter. */
	public func void setPath(String path)
		pPath = path
	end
	
	/** \brief ParticleEmitter or \em null if not present. */
	public func ParticleEmitter getParticleEmitter()
		return pParticleEmitter
	end
	
	/** \brief Set particle emitter or \em null if not present. */
	public func void setParticleEmitter(ParticleEmitter particleEmitter)
		pParticleEmitter = particleEmitter
	end
	
	/** \brief Property has been preloaded. */
	public func bool getHasPreloaded()
		return pHasPreloaded
	end
	
	
	
	/** \brief Set value of property from XML decoded value. */
	public func void setValue(Object value)
		pPath = value cast String
	end
	
	/**
	 * \brief Copy value from another element class property of the same type.
	 * \version 1.17
	 */
	public func void copyValue(ElementClassProperty property)
		pPath = (property cast ECPParticleEmitter).pPath
	end
	
	
	
	/** \brief Preload resources if supported. */
	public func void preloadResources(ElementClass elementClass, PreloadCounter counter)
		if pHasPreloaded
			return
		end
		
		pHasPreloaded = true
		
		if pPath == null or pPath.empty()
			return
		end
		
		try
			pParticleEmitter = pLoader.loadFromFile(\
				File.absolutePath(pPath, elementClass.getBasePath()).getPath())
			
		catch Exception e
		end
	end
	
	/**
	 * \brief Log preloading problems.
	 * \returns True if problems are present.
	 */
	public func bool logPreloadProblems(ElementClass elementClass, Console console)
		if pPath != null and not pPath.empty() and pParticleEmitter == null
			console.addMessage("Property " + elementClass.getClassname() + "." \
				+ getName() + ": Failed loading particle emitter " \
				+ File.absolutePath(pPath, elementClass.getBasePath()).getPath())
			return true
		end
		return false
	end
end
