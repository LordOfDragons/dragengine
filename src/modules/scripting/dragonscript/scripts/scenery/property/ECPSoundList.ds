/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */


namespace Dragengine.Scenery

pin Dragengine.Gui
pin Dragengine.Preloading
pin Dragengine.Utils



/**
 * \brief List of sound resource elements class property for use with XML loading.
 * 
 * Similar to ECPSound but allows to stored any number of sounds. Useful for having
 * a list of similar sounds picking randomly one to play.
 * 
 * By default empty path does not add a sound. If you need the size of the sound
 * list to be identical to the list of sound path specified use set add null for
 * invalid sounds to true. In this case for all sound path that are empty or fail
 * to load null is added to the list.
 */
class ECPSoundList extends ElementClassProperty implements ResourceListener
	private var Array pPath
	private var Array pSounds
	private var Array pFailedLoading
	private var PreloadCounter pCounter
	private var bool pHasPreloaded
	
	
	
	/** \brief Create property. */
	public func new(String name) super(name)
		pPath = Array.new()
		pSounds = Array.new()
	end
	
	
	
	/** \brief Remove all path. */
	public func void removeAllPath()
		pPath.removeAll()
	end
	
	/** \brief Add a path. */
	public func void addPath(String path)
		pPath.add(path)
	end
	
	
	
	/** \brief Number of sounds. */
	public func int getCount()
		return pSounds.getCount()
	end
	
	/** \brief Sound at index. */
	public func Sound getAt(int index)
		return pSounds.getAt(index) cast Sound
	end
	
	/** \brief Get random sound or \em null if no sounds are present. */
	public func Sound getRandom()
		if pSounds.getCount() == 0
			return null
			
		else
			return pSounds.random() cast Sound
		end
	end
	
	/** \brief For each sound with block with Sound as parameter. */
	public func void forEach(Block ablock)
		pSounds.forEach(ablock)
	end
	
	/** \brief Remove all sounds. */
	public func void removeAll()
		pSounds.removeAll()
	end
	
	/** \brief Add sound. */
	public func void add(Sound sound)
		pSounds.add(sound)
	end
	
	/** \brief Property has been preloaded. */
	public func bool getHasPreloaded()
		return pHasPreloaded
	end
	
	
	
	/** \brief Set value of property from XML decoded value. */
	public func void setValue(Object value)
		pPath.removeAll()
		(value cast Array).forEach(block String each
			pPath.add(each)
		end)
	end
	
	/**
	 * \brief Copy value from another element class property of the same type.
	 * \version 1.17
	 */
	public func void copyValue(ElementClass elementClass, ElementClassProperty property)
		var String basePath = elementClass.getBasePath()
		pPath = (property cast ECPSoundList).pPath.map(block String each
			return not each.empty() if File.absolutePath(each, basePath).getPath() else null
		end)
	end
	
	
	
	/** \brief Preload resources if supported. */
	public func void preloadResources(ElementClass elementClass, PreloadCounter counter)
		if pHasPreloaded
			return
		end
		
		pHasPreloaded = true
		pCounter = counter
		
		var String basePath = elementClass.getBasePath()
		
		// replace the path with the absolute path. otherwise we have to calculate
		// the absolute path each time finishedLoading() is called since the resource
		// has the absolute path not matching the relative path. it is save to do
		// this replacement here once
		pPath = pPath.map(block String each
			return each.empty() if "" else File.absolutePath(each, basePath).getPath()
		end)
		
		pPath.forEach(block String each
			pSounds.add(null)
			if not each.empty()
				Sound.loadAsynchron(each, this)
				counter.increase()
			end
		end)
	end
	
	/**
	 * \brief Log preloading problems.
	 * \returns True if problems are present.
	 */
	public func bool logPreloadProblems(ElementClass elementClass, Console console)
		if pFailedLoading == null
			return false
		end
		
		pFailedLoading.forEach(block String each
			console.addMessage("Property " + elementClass.getClassname() + "." \
				+ getName() + ": Failed loading sound " + each)
		end)
		return true
	end
	
	
	
	/** \brief Resource has finished loading. */
	public func void finishedLoading(String path, ResourceLoaderType resourceType, Object resource)
		pPath.forEach(block int index, String each
			if each.equals(path)
				pSounds.setAt(index, resource)
			end
		end)
		pCounter.decrease()
	end
	
	/** \brief Resource failed loading. */
	public func void failedLoading(String path, ResourceLoaderType resourceType)
		if pFailedLoading == null
			pFailedLoading = Array.new()
		end
		pFailedLoading.add(path)
		pCounter.decrease()
	end
end
