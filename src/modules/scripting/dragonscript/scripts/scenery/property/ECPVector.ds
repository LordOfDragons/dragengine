/* 
 * Drag[en]gine DragonScript Script Module
 *
 * Copyright (C) 2020, Roland Pl√ºss (roland@rptd.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */


namespace Dragengine.Scenery

pin Dragengine.Gui
pin Dragengine.Utils
pin Dragengine.Preloading



/**
 * \brief Vector element class property for use with XML loading.
 * 
 * Vector is stored as Vector instance.
 */
class ECPVector extends ElementClassProperty
	/** \brief Vector. */
	private var Vector pVector
	
	
	
	/** \brief Create property. */
	public func new(String name) super(name)
		pVector = Vector.new()
	end
	
	/** \brief Create property with initial path. */
	public func new(String name, Vector vector) super(name)
		pVector = vector
	end
	
	
	
	/** \brief Vector. */
	public func Vector getVector()
		return pVector
	end
	
	/** \brief Set vector. */
	public func void setVector(Vector vector)
		pVector = vector
	end
	
	
	
	/** \brief Set value of property from XML decoded value. */
	public func void setValue(Object value)
		setVector(value cast Vector)
	end
	
	
	
	/**
	 * \brief Color modified by stub property if present.
	 * 
	 * If named stub property is not present or empty string the stored color is returned.
	 * If the named stub property is present it is decoded using codec.
	 * 
	 * The following property value formats are understood where "x", "y" and "z" are
	 * floating point values:
	 * - "x y z": Vector.new(x, x, z)
	 */
	public func Vector getVector(StubWithProperties stub, CodecPropertyString codec)
		var String value = stub.getPropertyValueFor(getName(), "")
		if value.empty()
			return pVector
			
		else
			return codec.decodeVector(value)
		end
	end
end
