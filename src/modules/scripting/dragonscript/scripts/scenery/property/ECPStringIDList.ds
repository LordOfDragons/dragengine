/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */


namespace Dragengine.Scenery

pin Dragengine.Gui
pin Dragengine.Utils
pin Dragengine.Preloading



/**
 * \brief List of string identifier values class property for use with XML loading.
 */
class ECPStringIDList extends ElementClassProperty
	private var Array pStringIDs
	
	
	
	/** \brief Create property. */
	public func new(String name) super(name)
		pStringIDs = Array.new()
	end
	
	
	
	/** \brief Number of string identifiers. */
	public func int getCount()
		return pStringIDs.getCount()
	end
	
	/** \brief String identifier at index. */
	public func StringID getAt(int index)
		return pStringIDs.getAt(index) cast StringID
	end
	
	/** \brief Get random string identifier or \em null if no string identifiers are present. */
	public func StringID getRandom()
		if pStringIDs.getCount() == 0
			return null
			
		else
			return pStringIDs.random() cast StringID
		end
	end
	
	/** \brief For each string identifier with block with String as parameter. */
	public func void forEach(Block ablock)
		pStringIDs.forEach(ablock)
	end
	
	/** \brief Remove all string identifiers. */
	public func void removeAll()
		pStringIDs.removeAll()
	end
	
	/** \brief Add string identifier. */
	public func void add(StringID string)
		pStringIDs.add(string)
	end
	
	
	
	/** \brief Set value of property from XML decoded value. */
	public func void setValue(Object value)
		pStringIDs.removeAll()
		(value cast Array).forEach(block String each
			pStringIDs.add(StringID.new(each))
		end)
	end
	
	/**
	 * \brief Copy value from another element class property of the same type.
	 * \version 1.17
	 */
	public func void copyValue(ElementClass elementClass, ElementClassProperty property)
		pStringIDs = Array.new((property cast ECPStringIDList).pStringIDs)
	end
	
	
	
	/**
	 * \brief StringID list modified by stub property if present.
	 * 
	 * If named stub property is not present or empty string the stored list is returned.
	 * If the named stub property is present it is decoded using codec.
	 * 
	 * - "id1 id2 ... idN"
	 */
	public func Array getList(StubWithProperties stub, CodecPropertyString codec)
		var String value = stub.getPropertyValueFor(getName(), "")
		if value.empty()
			return pStringIDs
			
		else
			return codec.decodeStringList(value).map(block String each
				return StringID.new(each)
			end)
		end
	end
end
