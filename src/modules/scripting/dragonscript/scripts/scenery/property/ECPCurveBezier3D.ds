/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */


namespace Dragengine.Scenery

pin Dragengine.Gui
pin Dragengine.Utils



/**
 * \brief Bezier-3D curve element class property for use with XML loading.
 * 
 * Curve is stored as CurveBezier3D instance. Curves are defined in XML element classes using
 * a list of points. Each point is a list of vectors. If one vector is specified a sharp point
 * is created with the handles and point set to the same vector. If three vectors are specified
 * a point is created with the first vector as point, the second vector as first handle and the
 * third vector as second handle. An example curve definition looks like this:
 * 
 * \code{xml}
 * <list name='propertyName'>
 *   <!-- first curve point as a sharp point -->
 *   <list>
 *     <vector x='0' y='0' z='0'/> <!-- point, handle1 and handle2 -->
 *   </list>
 *   
 *   <!-- second curve point as a regular point with handles -->
 *   <list>
 *     <vector x='2' y='3' z='1'/> <!-- point -->
 *     <vector x='1.5' y='3' z='0.5'/> <!-- handle1 -->
 *     <vector x='2.5' y='3' z='-0.5'/> <!-- handl2 -->
 *   </list>
 * </list>
 * \endcode
 * 
 * Curve points do not support being defined in StubWithProperties.
 */
class ECPCurveBezier3D extends ElementClassProperty
	private var CurveBezier3D pCurve
	
	
	
	/** \brief Create property. */
	public func new(String name) super(name)
		pCurve = CurveBezier3D.new()
	end
	
	/** \brief Create property with initial path. */
	public func new(String name, CurveBezier3D curve) super(name)
		pCurve = curve
	end
	
	
	
	/** \brief Curve. */
	public func CurveBezier3D getCurve()
		return pCurve
	end
	
	/** \brief Set curve. */
	public func void setCurve(CurveBezier3D curve)
		pCurve = curve
	end
	
	/**
	 * \brief Copy value from another element class property of the same type.
	 * \version 1.17
	 */
	public func void copyValue(ElementClass elementClass, ElementClassProperty property)
		pCurve = CurveBezier3D.new((property cast ECPCurveBezier3D).pCurve)
	end
	
	
	
	/** \brief Set value of property from XML decoded value. */
	public func void setValue(Object value)
		if value == null
			pCurve = null
			return
		end
		
		pCurve = CurveBezier3D.new()
		(value cast Array).forEach(block Array each
			if each.getCount() == 1
				pCurve.addPoint(each.getAt(0) cast Vector)
				
			elif each.getCount() == 3
				pCurve.addPoint(each.getAt(0) cast Vector, \
					each.getAt(1) cast Vector, each.getAt(2) cast Vector)
			end
		end)
	end
end
