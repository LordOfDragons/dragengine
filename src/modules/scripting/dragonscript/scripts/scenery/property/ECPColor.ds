/* 
 * Drag[en]gine DragonScript Script Module
 *
 * Copyright (C) 2020, Roland Pl√ºss (roland@rptd.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */


namespace Dragengine.Scenery

pin Dragengine.Gui
pin Dragengine.Utils
pin Dragengine.Preloading



/**
 * \brief Color element class property for use with XML loading.
 * 
 * Color is stored as Color instance.
 */
class ECPColor extends ElementClassProperty
	/** \brief Color. */
	private var Color pColor
	
	
	
	/** \brief Create property. */
	public func new(String name) super(name)
		pColor = Color.black
	end
	
	/** \brief Create property with initial path. */
	public func new(String name, Color color) super(name)
		pColor = color
	end
	
	
	
	/** \brief Color. */
	public func Color getColor()
		return pColor
	end
	
	/** \brief Set color. */
	public func void setColor(Color color)
		pColor = color
	end
	
	
	
	/** \brief Set value of property from XML decoded value. */
	public func void setValue(Object value)
		setColor(value cast Color)
	end
	
	/**
	 * \brief Copy value from another element class property of the same type.
	 * \version 1.17
	 */
	public func void copyValue(ElementClassProperty property)
		pColor = (property cast ECPColor).pColor
	end
	
	
	
	/**
	 * \brief Color modified by stub property if present.
	 * 
	 * If named stub property is not present or empty string the stored color is returned.
	 * If the named stub property is present it is decoded using codec.
	 * 
	 * The following property value formats are understood where "red", "green" and "blue"
	 * are positive floating point values including 0:
	 * - "red green blue": Color.new(red, green, blue, 1)
	 * - "red green blue alpha": Color.new(red, green, blue, alpha)
	 */
	public func Color getColor(StubWithProperties stub, CodecPropertyString codec)
		var String value = stub.getPropertyValueFor(getName(), "")
		if value.empty()
			return pColor
			
		else
			return codec.decodeColor4(value)
		end
	end
end
