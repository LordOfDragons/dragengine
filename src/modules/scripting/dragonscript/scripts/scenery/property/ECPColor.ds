/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */


namespace Dragengine.Scenery

pin Dragengine.Gui
pin Dragengine.Utils
pin Dragengine.Preloading



/**
 * \brief Color element class property for use with XML loading.
 * 
 * Color is stored as Color instance.
 */
class ECPColor extends ElementClassProperty
	/** \brief Color. */
	private var Color pColor
	
	
	
	/** \brief Create property. */
	public func new(String name) super(name)
		pColor = Color.black
	end
	
	/** \brief Create property with initial path. */
	public func new(String name, Color color) super(name)
		pColor = color
	end
	
	
	
	/** \brief Color. */
	public func Color getColor()
		return pColor
	end
	
	/** \brief Set color. */
	public func void setColor(Color color)
		pColor = color
	end
	
	
	
	/** \brief Set value of property from XML decoded value. */
	public func void setValue(Object value)
		setColor(value cast Color)
	end
	
	/**
	 * \brief Copy value from another element class property of the same type.
	 * \version 1.17
	 */
	public func void copyValue(ElementClass elementClass, ElementClassProperty property)
		pColor = (property cast ECPColor).pColor
	end
	
	
	
	/**
	 * \brief Color modified by stub property if present.
	 * 
	 * If named stub property is not present or empty string the stored color is returned.
	 * If the named stub property is present it is decoded using codec.
	 * 
	 * The following property value formats are understood where "red", "green" and "blue"
	 * are positive floating point values including 0:
	 * - "red green blue": Color.new(red, green, blue, 1)
	 * - "red green blue alpha": Color.new(red, green, blue, alpha)
	 */
	public func Color getColor(StubWithProperties stub, CodecPropertyString codec)
		var String value = stub.getPropertyValueFor(getName(), "")
		if value.empty()
			return pColor
			
		else
			return codec.decodeColor4(value)
		end
	end
end
