/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */


namespace Dragengine.Scenery

pin Dragengine.Gui
pin Dragengine.Preloading
pin Dragengine.Utils
pin Dragengine.Preloading



/**
 * \brief Dictionary of element class elements class property for use with XML loading.
 * 
 * Similar to ECPElementClassList but assigns each element class a unique name. This is useful
 * to define element classes to use mapped against well known identifiers. Also allows to map
 * the same element class to multiple unique identifiers if required.
 */
class ECPElementClassMap extends ElementClassProperty
	private var ElementClassList pElementClassList
	private var Dictionary pNames
	private var Dictionary pElementClasses
	private var Array pNotFoundElementClasses
	private var bool pHasPreloaded
	
	
	
	/** \brief Create property. */
	public func new(String name, ElementClassList eclassList) super(name)
		if eclassList == null
			throw EInvalidParam.new()
		end
		pElementClassList = eclassList
		pNames = Dictionary.new()
		pElementClasses = Dictionary.new()
	end
	
	/** \brief Dispose of element class property to break reference loops. */
	public func void dispose()
		pElementClassList = null
		pElementClasses = null
	end
	
	
	
	/** \brief Element class manager to look up element class in. */
	public func ElementClassList getElementClassList()
		return pElementClassList
	end
	
	
	
	/** \brief Remove all element class names. */
	public func void removeAllNames()
		pNames.removeAll()
	end
	
	/** \brief Set element class name. */
	public func void setNameAt(String id, String elementClassName)
		pNames.setAt(id, elementClassName)
	end
	
	
	
	/** \brief Number of element classes. */
	public func int getCount()
		return pElementClasses.getCount()
	end
	
	/** \brief Element class with identifier or \em null if absent. */
	public func ElementClass getAt(String id)
		return pElementClasses.getAt(id) cast ElementClass
	end
	
	/** \brief Visit element class with block with String id and ElementClass value. */
	public func void forEach(Block ablock)
		pElementClasses.forEach(ablock)
	end
	
	/** \brief Remove all element classes. */
	public func void removeAll()
		pElementClasses.removeAll()
	end
	
	/** \brief Set element class. */
	public func void setAt(String id, ElementClass elementClass)
		pElementClasses.setAt(id, elementClass)
	end
	
	/** \brief Property has been preloaded. */
	public func bool getHasPreloaded()
		return pHasPreloaded
	end
	
	
	
	/** \brief Set value of property from XML decoded value. */
	public func void setValue(Object value)
		pNames.removeAll()
		(value cast Dictionary).forEach(block String id, String elementClassName
			pNames.setAt(id, elementClassName)
		end)
	end
	
	/**
	 * \brief Copy value from another element class property of the same type.
	 * \version 1.17
	 */
	public func void copyValue(ElementClass elementClass, ElementClassProperty property)
		pNames = Dictionary.new((property cast ECPElementClassMap).pNames)
	end
	
	
	
	/** \brief Preload resources if supported. */
	public func void preloadResources(ElementClass elementClass, PreloadCounter counter)
		if pHasPreloaded
			return
		end
		
		pHasPreloaded = true
		pNotFoundElementClasses = null
		pElementClasses.removeAll()
		
		pNames.forEach(block String id, String elementClassName
			if elementClassName.empty()
				return null
			end
			
			var ElementClass eachEClass = pElementClassList.getNamed(elementClassName)
			
			if eachEClass == null
				if pNotFoundElementClasses == null
					pNotFoundElementClasses = Array.new()
				end
				pNotFoundElementClasses.add(elementClassName)
				return null
			end
			
			pElementClasses.setAt(id, eachEClass)
			eachEClass.preloadResources(counter)
		end)
	end
	
	/**
	 * \brief Log preloading problems.
	 * \returns True if problems are present.
	 */
	public func bool logPreloadProblems(ElementClass elementClass, Console console)
		if pNotFoundElementClasses == null
			return false
		end
		
		pNotFoundElementClasses.forEach(block String each
			console.addMessage("Property " + elementClass.getClassname() + "." \
				+ getName() + ": Unknown element class " + each)
		end)
		return true
	end
	
	
	
	/**
	 * \brief Element class map modified by stub property if present.
	 * 
	 * If named stub property is not present or empty string the stored element class map
	 * is returned. If the named stub property is present it is decoded using codec 
	 * 
	 * Supported element stub property values are:
	 * - "id1:classname1 ... idN:classnameN"
	 * 
	 * \returns Dictionary mapping String id to ElementClass.
	 */
	public func Dictionary getElementClasses(StubWithProperties stub, CodecPropertyString codec)
		var String value = stub.getPropertyValueFor(getName(), "")
		if value.empty()
			return Dictionary.new(pElementClasses)
		end
		
		var Dictionary map = Dictionary.new()
		codec.decodeStringList(value).forEach(block String each
			var Array parts = each.splitExact(':')
			var String id = parts.getAt(0) cast String
			var String elementClassName = parts.getAt(1) cast String
			var ElementClass eclass = pElementClassList.getNamed(elementClassName)
			if eclass == null
				throw EInvalidParam.new()
			end
			map.setAt(id, eclass)
		end)
		return map
	end
end
