/* 
 * Drag[en]gine DragonScript Script Module
 *
 * Copyright (C) 2020, Roland Pl√ºss (roland@rptd.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */


namespace Dragengine.Scenery

pin Dragengine.Gui
pin Dragengine.Preloading
pin Dragengine.Utils



/**
 * \brief List of skin resource elements class property for use with XML loading.
 * 
 * Similar to ECPSkin but allows to stored any number of skins. Useful for having
 * a list of similar skins picking randomly one to play.
 * 
 * By default empty path does not add a skin. If you need the size of the skin
 * list to be identical to the list of skin path specified use set add null for
 * invalid skins to true. In this case for all skin path that are empty or fail
 * to load null is added to the list.
 */
class ECPSkinList extends ElementClassProperty implements ResourceListener
	private var Array pPath
	private var Array pSkins
	private var Array pFailedLoading
	private var PreloadCounter pCounter
	private var bool pHasPreloaded
	
	
	
	/** \brief Create property. */
	func new(String name) super(name)
		pPath = Array.new()
		pSkins = Array.new()
	end
	
	
	
	/** \brief Remove all path. */
	func void removeAllPath()
		pPath.removeAll()
	end
	
	/** \brief Add a path. */
	func void addPath(String path)
		pPath.add(path)
	end
	
	/**
	 * \brief Count of path.
	 * \version 1.19
	 */
	func int getPathCount()
		return pPath.getCount()
	end
	
	/**
	 * \brief path at index.
	 * \version 1.19
	 */
	func String getPathAt(int index)
		return pPath.getAt(index) cast String
	end
	
	/**
	 * \brief For each path with block with String as parameter.
	 * \version 1.19
	 */
	func void forEachPath(Block ablock)
		pPath.forEach(ablock)
	end
	
	
	
	/** \brief Number of skins. */
	func int getCount()
		return pSkins.getCount()
	end
	
	/** \brief Skin at index. */
	func Skin getAt(int index)
		return pSkins.getAt(index) cast Skin
	end
	
	/** \brief Get random skin or \em null if no skins are present. */
	func Skin getRandom()
		if pSkins.getCount() == 0
			return null
			
		else
			return pSkins.random() cast Skin
		end
	end
	
	/** \brief For each skin with block with Skin as parameter. */
	func void forEach(Block ablock)
		pSkins.forEach(ablock)
	end
	
	/** \brief Remove all skins. */
	func void removeAll()
		pSkins.removeAll()
	end
	
	/** \brief Add skin. */
	func void add(Skin skin)
		pSkins.add(skin)
	end
	
	/** \brief Property has been preloaded. */
	func bool getHasPreloaded()
		return pHasPreloaded
	end
	
	
	
	/** \brief Set value of property from XML decoded value. */
	func void setValue(Object value)
		pPath.removeAll()
		(value cast Array).forEach(block String each
			pPath.add(each)
		end)
	end
	
	/**
	 * \brief Copy value from another element class property of the same type.
	 * \version 1.17
	 */
	func void copyValue(ElementClass elementClass, ElementClassProperty property)
		var String basePath = elementClass.getBasePath()
		pPath = (property cast ECPSkinList).pPath.map(block String each
			return not each.empty() if File.absolutePath(each, basePath).getPath() else null
		end)
	end
	
	
	
	/** \brief Preload resources if supported. */
	func void preloadResources(ElementClass elementClass, PreloadCounter counter)
		if pHasPreloaded
			return
		end
		
		pHasPreloaded = true
		pCounter = counter
		
		var String basePath = elementClass.getBasePath()
		
		// replace the path with the absolute path. otherwise we have to calculate
		// the absolute path each time finishedLoading() is called since the resource
		// has the absolute path not matching the relative path. it is save to do
		// this replacement here once
		pPath = pPath.map(block String each
			return each.empty() if "" else File.absolutePath(each, basePath).getPath()
		end)
		
		pPath.forEach(block String each
			pSkins.add(null)
			if not each.empty()
				Skin.loadAsynchron(each, this)
				counter.increase()
			end
		end)
	end
	
	/**
	 * \brief Log preloading problems.
	 * \returns True if problems are present.
	 */
	func bool logPreloadProblems(ElementClass elementClass, Console console)
		if pFailedLoading == null
			return false
		end
		
		pFailedLoading.forEach(block String each
			console.addMessage("Property " + elementClass.getClassname() + "." \
				+ getName() + ": Failed loading skin " + each)
		end)
		return true
	end
	
	
	
	/** \brief Resource has finished loading. */
	func void finishedLoading(String path, ResourceLoaderType resourceType, Object resource)
		var int i, count = pPath.getCount()
		for i = 0 to count
			if pPath.getAt(i).equals(path)
				pSkins.setAt(i, resource)
			end
		end
		
		pCounter.decrease()
	end
	
	/** \brief Resource failed loading. */
	func void failedLoading(String path, ResourceLoaderType resourceType)
		if pFailedLoading == null
			pFailedLoading = Array.new()
		end
		pFailedLoading.add(path)
		
		pCounter.decrease()
	end
end
