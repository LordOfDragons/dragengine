/* 
 * Drag[en]gine DragonScript Script Module
 *
 * Copyright (C) 2020, Roland Pl√ºss (roland@rptd.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */


namespace Dragengine.Scenery

pin Dragengine.Gui
pin Dragengine.Preloading
pin Dragengine.Utils



/**
 * \brief List of string values class property for use with XML loading.
 */
class ECPStringList extends ElementClassProperty
	private var Array pStrings
	
	
	
	/** \brief Create property. */
	public func new(String name) super(name)
		pStrings = Array.new()
	end
	
	
	
	/** \brief Number of strings. */
	public func int getCount()
		return pStrings.getCount()
	end
	
	/** \brief String at index. */
	public func String getAt(int index)
		return pStrings.getAt(index) cast String
	end
	
	/** \brief Index of first string or -1 if absent. */
	public func int indexOf(String string)
		return pStrings.indexOf(string)
	end
	
	/** \brief String is present. */
	public func bool has(String string)
		return pStrings.has(string)
	end
	
	/** \brief Get random string or \em null if no strings are present. */
	public func String getRandom()
		if pStrings.getCount() == 0
			return null
			
		else
			return pStrings.random() cast String
		end
	end
	
	/** \brief For each string with block with String as parameter. */
	public func void forEach(Block ablock)
		pStrings.forEach(ablock)
	end
	
	/** \brief Remove all strings. */
	public func void removeAll()
		pStrings.removeAll()
	end
	
	/** \brief Add string. */
	public func void add(String string)
		pStrings.add(string)
	end
	
	
	
	/** \brief Set value of property from XML decoded value. */
	public func void setValue(Object value)
		pStrings.removeAll()
		(value cast Array).forEach(block String each
			pStrings.add(each)
		end)
	end
	
	/**
	 * \brief Copy value from another element class property of the same type.
	 * \version 1.17
	 */
	public func void copyValue(ElementClass elementClass, ElementClassProperty property)
		pStrings = Array.new((property cast ECPStringList).pStrings)
	end
	
	
	
	/**
	 * \brief String list modified by stub property if present.
	 * 
	 * If named stub property is not present or empty string the stored list is returned.
	 * If the named stub property is present it is decoded using codec.
	 * 
	 * - "string1 string2 ... stringN"
	 */
	public func Array getList(StubWithProperties stub, CodecPropertyString codec)
		var String value = stub.getPropertyValueFor(getName(), "")
		if value.empty()
			return pStrings
			
		else
			return codec.decodeStringList(value)
		end
	end
end
