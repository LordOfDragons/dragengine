/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */


namespace Dragengine.Scenery

pin Dragengine.Gui
pin Dragengine.Utils
pin Dragengine.Preloading



/**
 * \brief Floating point list value element class property for use with XML loading.
 */
class ECPFloatList extends ElementClassProperty
	var Array pValues
	var bool pEnableLimitLower
	var float pLimitLower
	var bool pEnableLimitUpper
	var float pLimitUpper
	
	
	
	/** \brief Create property. */
	func new(String name) super(name)
		pValues = Array.new()
		pEnableLimitLower = false
		pLimitLower = 0
		pEnableLimitUpper = false
		pLimitUpper = 1
	end
	
	
	
	/** \brief Values as array of float. */
	func Array getValues()
		return pValues
	end
	
	/** \brief Set values as array of float. */
	func void setValues(Array values)
		pValues = Array.new(values)
	end
	
	/** \brief Enable lower limit. */
	func bool getEnableLimitLower()
		return pEnableLimitLower
	end
	
	/** \brief Set enable lower limit. */
	func void setEnableLimitLower(bool enable)
		pEnableLimitLower = enable
	end
	
	/** \brief Lower limit. */
	func float getLimitLower()
		return pLimitLower
	end
	
	/** \brief Set lower limit. */
	func void setLimitLower(float limit)
		pLimitLower = limit
	end
	
	/** \brief Enable upper limit. */
	func bool getEnableLimitUpper()
		return pEnableLimitUpper
	end
	
	/** \brief Set enable upper limit. */
	func void setEnableLimitUpper(bool enable)
		pEnableLimitUpper = enable
	end
	
	/** \brief Upper limit. */
	func float getLimitUpper()
		return pLimitUpper
	end
	
	/** \brief Set upper limit. */
	func void setLimitUpper(float limit)
		pLimitUpper = limit
	end
	
	/** \brief Set limits. */
	func void setLimits(bool enableLower, float limitLower, bool enableUpper, float limitUpper)
		pEnableLimitLower = enableLower
		pLimitLower = limitLower
		pEnableLimitUpper = enableUpper
		pLimitUpper = limitUpper
	end
	
	
	
	/** \brief Set value of property from XML decoded value. */
	func void setValue(Object value)
		pValues.removeAll()
		(value cast Array).forEach(block float each
			if pEnableLimitUpper
				each = DEMath.min(each, pLimitUpper)
			end
			if pEnableLimitLower
				each = DEMath.max(each, pLimitLower)
			end
			pValues.add(each)
		end)
	end
	
	/**
	 * \brief Copy value from another element class property of the same type.
	 * \version 1.17
	 */
	func void copyValue(ElementClass elementClass, ElementClassProperty property)
		pValues = Array.new((property cast ECPFloatList).pValues)
	end
	
	
	/**
	 * \brief Float list modified by stub property if present.
	 * 
	 * If named stub property is not present or empty string the stored list is returned.
	 * If the named stub property is present it is decoded using codec.
	 * 
	 * - "float1 float2 ... floatN"
	 */
	public func Array getList(StubWithProperties stub, CodecPropertyString codec)
		var String value = stub.getPropertyValueFor(getName(), "")
		if value.empty()
			return pValues
			
		else
			return codec.decodeFloatList(value)
		end
	end
end
