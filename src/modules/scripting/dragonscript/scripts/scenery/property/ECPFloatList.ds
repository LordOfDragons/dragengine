/* 
 * Drag[en]gine DragonScript Script Module
 *
 * Copyright (C) 2020, Roland Pl√ºss (roland@rptd.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */


namespace Dragengine.Scenery

pin Dragengine.Gui
pin Dragengine.Utils



/**
 * \brief Floating point list value element class property for use with XML loading.
 */
class ECPFloatList extends ElementClassProperty
	private var Array pValues
	private var bool pEnableLimitLower
	private var float pLimitLower
	private var bool pEnableLimitUpper
	private var float pLimitUpper
	
	
	
	/** \brief Create property. */
	public func new(String name) super(name)
		pValues = Array.new()
		pEnableLimitLower = false
		pLimitLower = 0
		pEnableLimitUpper = false
		pLimitUpper = 1
	end
	
	
	
	/** \brief Values as array of float. */
	public func Array getValues()
		return pValues
	end
	
	/** \brief Set values as array of float. */
	public func void setValues(Array values)
		pValues = Array.new(values)
	end
	
	/** \brief Enable lower limit. */
	public func bool getEnableLimitLower()
		return pEnableLimitLower
	end
	
	/** \brief Set enable lower limit. */
	public func void setEnableLimitLower(bool enable)
		pEnableLimitLower = enable
	end
	
	/** \brief Lower limit. */
	public func float getLimitLower()
		return pLimitLower
	end
	
	/** \brief Set lower limit. */
	public func void setLimitLower(float limit)
		pLimitLower = limit
	end
	
	/** \brief Enable upper limit. */
	public func bool getEnableLimitUpper()
		return pEnableLimitUpper
	end
	
	/** \brief Set enable upper limit. */
	public func void setEnableLimitUpper(bool enable)
		pEnableLimitUpper = enable
	end
	
	/** \brief Upper limit. */
	public func float getLimitUpper()
		return pLimitUpper
	end
	
	/** \brief Set upper limit. */
	public func void setLimitUpper(float limit)
		pLimitUpper = limit
	end
	
	/** \brief Set limits. */
	public func void setLimits(bool enableLower, float limitLower, bool enableUpper, float limitUpper)
		pEnableLimitLower = enableLower
		pLimitLower = limitLower
		pEnableLimitUpper = enableUpper
		pLimitUpper = limitUpper
	end
	
	
	
	/** \brief Set value of property from XML decoded value. */
	public func void setValue(Object value)
		pValues.removeAll()
		(value cast Array).forEach(block float each
			if pEnableLimitUpper
				each = DEMath.min(each, pLimitUpper)
			end
			if pEnableLimitLower
				each = DEMath.max(each, pLimitLower)
			end
			pValues.add(each)
		end)
	end
	
	/**
	 * \brief Copy value from another element class property of the same type.
	 * \version 1.17
	 */
	public func void copyValue(ElementClass elementClass, ElementClassProperty property)
		pValues = Array.new((property cast ECPFloatList).pValues)
	end
end
