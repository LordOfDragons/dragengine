/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */


namespace Dragengine.Scenery

pin Dragengine.Gui
pin Dragengine.Preloading
pin Dragengine.Utils
pin Dragengine.Preloading



/**
 * \brief Element class element class property for use with XML loading.
 * 
 * Element class is set from XML using a string. Looks up the matching element
 * class during preloading. The value of the property is then the real element
 * class or \em null if not found.
 */
class ECPElementClass extends ElementClassProperty
	private var ElementClassList pElementClassList
	private var String pElementClassName
	private var ElementClass pElementClass
	private var bool pHasPreloaded
	
	
	
	/** \brief Create property. */
	public func new(String name, ElementClassList elementClassList) super(name)
		if elementClassList == null
			throw EInvalidParam.new()
		end
		pElementClassList = elementClassList
	end
	
	/** \brief Create property with initial element class name. */
	public func new(String name, ElementClassList elementClassList, String elementClassName) super(name)
		if elementClassList == null
			throw EInvalidParam.new()
		end
		pElementClassList = elementClassList
		pElementClassName = elementClassName
	end
	
	/** \brief Dispose of element class property to break reference loops. */
	public func void dispose()
		pElementClassList = null
		pElementClass = null
	end
	
	
	
	/** \brief Element class manager to look up element class in. */
	public func ElementClassList getElementClassList()
		return pElementClassList
	end
	
	/** \brief Name of element class. */
	public func String getElementClassName()
		return pElementClassName
	end
	
	/** \brief Set name of element class. */
	public func void setElementClassName(String elementClassName)
		pElementClassName = elementClassName
	end
	
	/** \brief Element class or \em null if not found. */
	public func ElementClass getElementClass()
		return pElementClass
	end
	
	/** \brief Set element class or \em null if not found. */
	public func void setElementClass(ElementClass elementClass)
		pElementClass = elementClass
	end
	
	/** \brief Property has been preloaded. */
	public func bool getHasPreloaded()
		return pHasPreloaded
	end
	
	
	
	/** \brief Set value of property from XML decoded value. */
	public func void setValue(Object value)
		pElementClassName = value cast String
	end
	
	/**
	 * \brief Copy value from another element class property of the same type.
	 * \version 1.17
	 */
	public func void copyValue(ElementClass elementClass, ElementClassProperty property)
		pElementClassName = (property cast ECPElementClass).pElementClassName
	end
	
	
	
	/** \brief Preload resources if supported. */
	public func void preloadResources(ElementClass elementClass, PreloadCounter counter)
		if pHasPreloaded
			return
		end
		
		pHasPreloaded = true
		
		if pElementClassName == null or pElementClassName.empty()
			return
		end
		
		pElementClass = pElementClassList.getNamed(pElementClassName)
		
		if pElementClass != null
			pElementClass.preloadResources(counter)
		end
	end
	
	/**
	 * \brief Log preloading problems.
	 * \returns True if problems are present.
	 */
	public func bool logPreloadProblems(ElementClass elementClass, Console console)
		if pElementClassName != null and not pElementClassName.empty() and pElementClass == null
			console.addMessage("Property " + elementClass.getClassname() + "." \
				+ getName() + ": Unknown element class " + pElementClassName)
			return true
		end
		return false
	end
	
	
	
	/**
	 * \brief Element class modified by stub property if present.
	 * 
	 * If named stub property is not present or empty string the stored element class is returned.
	 * If the named stub property is present it is matched against the list of element classes.
	 */
	public func ElementClass getElementClass(StubWithProperties stub)
		var String value = stub.getPropertyValueFor(getName(), "")
		if value.empty()
			return pElementClass
		end
		
		var ElementClass eclass = pElementClassList.getNamed(value)
		if eclass == null
			throw EInvalidParam.new()
		end
		return eclass
	end
end
