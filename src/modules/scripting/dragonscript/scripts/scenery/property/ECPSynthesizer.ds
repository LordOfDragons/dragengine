/* 
 * Drag[en]gine DragonScript Script Module
 *
 * Copyright (C) 2020, Roland Pl√ºss (roland@rptd.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */


namespace Dragengine.Scenery

pin Dragengine.Gui
pin Dragengine.LoadSave
pin Dragengine.Preloading
pin Dragengine.Utils



/**
 * \brief Synthesizer element class property for use with XML loading.
 * 
 * Synthesizer is set from XML using a path. Loads the synthesizer during preloading.
 * The value of the property is then the loaded resource. If loading fails null
 * synthesizer is stored.
 */
class ECPSynthesizer extends ElementClassProperty
	private var LoadSynthesizer pLoader
	private var String pPath
	private var Synthesizer pSynthesizer
	private var bool pHasPreloaded
	
	
	
	/** \brief Create property. */
	public func new(String name, LoadSynthesizer loader) this(name, loader, null)
	end
	
	/** \brief Create property with initial path. */
	public func new(String name, LoadSynthesizer loader, String path) super(name)
		pLoader = loader
		pPath = path
	end
	
	
	
	/** \brief Synthesizer loader. */
	public func LoadSynthesizer getLoader()
		return pLoader
	end
	
	/** \brief Path to synthesizer. */
	public func String getPath()
		return pPath
	end
	
	/** \brief Set path to synthesizer. */
	public func void setPath(String path)
		pPath = path
	end
	
	/** \brief Synthesizer or \em null if not present. */
	public func Synthesizer getSynthesizer()
		return pSynthesizer
	end
	
	/** \brief Set synthesizer or \em null if not present. */
	public func void setSynthesizer(Synthesizer synthesizer)
		pSynthesizer = synthesizer
	end
	
	/** \brief Property has been preloaded. */
	public func bool getHasPreloaded()
		return pHasPreloaded
	end
	
	
	
	/** \brief Set value of property from XML decoded value. */
	public func void setValue(Object value)
		pPath = value cast String
	end
	
	/**
	 * \brief Copy value from another element class property of the same type.
	 * \version 1.17
	 */
	public func void copyValue(ElementClass elementClass, ElementClassProperty property)
		var String path = (property cast ECPSynthesizer).pPath
		if path != null and not path.empty()
			pPath = File.absolutePath(path, elementClass.getBasePath()).getPath()
		end
	end
	
	
	
	/** \brief Preload resources if supported. */
	public func void preloadResources(ElementClass elementClass, PreloadCounter counter)
		if pHasPreloaded
			return
		end
		
		pHasPreloaded = true
		
		if pPath == null or pPath.empty()
			return
		end
		
		var String path = File.absolutePath(pPath, elementClass.getBasePath()).getPath()
		
		try
			pSynthesizer = pLoader.loadFromFile(path)
			
		catch Exception e
		end
	end
	
	/**
	 * \brief Log preloading problems.
	 * \returns True if problems are present.
	 */
	public func bool logPreloadProblems(ElementClass elementClass, Console console)
		if pPath != null and not pPath.empty() and pSynthesizer == null
			console.addMessage("Property " + elementClass.getClassname() + "." \
				+ getName() + ": Failed loading synthesizer " \
				+ File.absolutePath(pPath, elementClass.getBasePath()).getPath())
			return true
		end
		return false
	end
	
	
	
	/**
	 * \brief Synthesizer modified by stub property if present.
	 * 
	 * If named stub property is not present or empty string the stored synthesizer is returned.
	 * If the named stub property is present it is loaded as synthesizer resource.
	 */
	public func Synthesizer getSynthesizer(StubWithProperties stub, ElementClass eclass)
		var String value = stub.getPropertyValueFor(getName(), "")
		if value.empty()
			return pSynthesizer
		end
		
		try
			return pLoader.loadFromFile(value)
			
		catch Exception e
			throw ELoadResourceFailed.new(value, eclass.getClassname())
		end
	end
end
