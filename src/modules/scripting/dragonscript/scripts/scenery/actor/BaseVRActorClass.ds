/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

namespace Dragengine.Scenery

pin Dragengine.Gui
pin Dragengine.LoadSave
pin Dragengine.Preloading
pin Dragengine.Utils


/**
 * \brief VR Actor element class.
 * \version 1.6
 * 
 * Extends BaseActorClass with VR behaviors.
 */
class BaseVRActorClass extends BaseActorClass
	/**
	 * \brief Behavior ID used for right hand controller behaviors.
	 * \version 1.9
	 * 
	 * Used for behaviors:
	 * - ECBehaviorVRHand
	 * - ECBehaviorVRHandPointAt
	 * - ECBehaviorVRHandLaserPointer
	 * 
	 * Value is "right".
	 */
	public static fixed var String idVRRightHand = "right"
	
	/**
	 * \brief Behavior ID used for left hand controller behaviors.
	 * \version 1.9
	 * 
	 * Used for behaviors:
	 * - ECBehaviorVRHand
	 * - ECBehaviorVRHandPointAt
	 * - ECBehaviorVRHandLaserPointer
	 * 
	 * Value is "left".
	 */
	public static fixed var String idVRLeftHand = "left"
	
	/**
	 * \brief Behavior ID used for non-VR based behaviors for right hand controller behaviors.
	 * \version 1.9
	 * 
	 * Used for behaviors:
	 * - ECBehaviorAttachSlot
	 * - ECBehaviorGrabber
	 * 
	 * Value is "vrHandRight".
	 */
	public static fixed var String idNonVRRightHand = "vrHandRight"
	
	/**
	 * \brief Behavior ID used for non-VR based behaviors for left hand controller behaviors.
	 * \version 1.9
	 * 
	 * Used for behaviors:
	 * - ECBehaviorAttachSlot
	 * - ECBehaviorGrabber
	 * 
	 * Value is "vrHandLeft".
	 */
	public static fixed var String idNonVRLeftHand = "vrHandLeft"
	
	/**
	 * \brief Alias Behavior ID used for this hand.
	 * \version 1.26
	 * 
	 * Value is "#thisHand".
	 */
	public static fixed var String idThisHand = "#thisHand"
	
	/**
	 * \brief Alias Behavior ID used for other hand.
	 * \version 1.26
	 * 
	 * Value is "#otherHand".
	 */
	public static fixed var String idOtherHand = "#otherHand"
	
	
	var ECBehaviorStateMachine pVRRightStateMachine
	var ECBehaviorStateMachine pVRLeftStateMachine
	var ECBehaviorVRPlayspace pVRPlayspace
	var ECBehaviorVRHMD pVRHMD
	var ECBehaviorVRHand pVRRightHand
	var ECBehaviorVRHand pVRLeftHand
	var ECBehaviorVRHandPointAt pVRRightHandPointAt
	var ECBehaviorVRHandPointAt pVRLeftHandPointAt
	var ECBehaviorVRHandLaserPointer pVRRightHandLaserPointer
	var ECBehaviorVRHandLaserPointer pVRLeftHandLaserPointer
	var ECBehaviorAttachSlot pVRRightHandAttachSlot
	var ECBehaviorAttachSlot pVRLeftHandAttachSlot
	var ECBehaviorGrabber pVRRightHandGrabber
	var ECBehaviorGrabber pVRLeftHandGrabber
	var ECBehaviorVRHandPose pVRRightHandPose
	var ECBehaviorVRHandPose pVRLeftHandPose
	var ECBehaviorActorAnimated pVRRightHandAnimated
	var ECBehaviorActorAnimated pVRLeftHandAnimated
	var ECBehaviorVRHandAction pVRRightHandAction
	var ECBehaviorVRHandAction pVRLeftHandAction
	
	
	
	/** \brief Create element class using loaders from BaseGameApp. */
	func new() this("VRActor", BaseGameApp.getApp().getLoaders(), \
	BaseGameApp.getApp().getPlayerControlledActor())
	end
	
	/** \brief Create element class. */
	func new(Loaders loaders, ECBehaviorPlayerControllable.Tracker tracker) \
	this("VRActor", loaders, tracker)
	end
	
	/** \brief Create element class using loaders from BaseGameApp. */
	func new(String className) this(className, BaseGameApp.getApp().getLoaders(), \
	BaseGameApp.getApp().getPlayerControlledActor())
	end
	
	/** \brief Create element class. */
	func new(String className, Loaders loaders, ECBehaviorPlayerControllable.Tracker tracker) \
	super(className, loaders, tracker)
		var ECBehaviorBehaviorTree behaviorTree = getBehaviorTree()
		var ECBehaviorStateMachine stateMachine = getStateMachine()
		
		getAIAction().setActionFactory(BAAFirstPersonVR.Factory.new())
		
		// change horizontal looking speed to 90 degrees per second
		getPlayerInputLook().getSpeedLookHorizontal().setValue(90)
		
		// add state machines for right and left hand
		pVRRightStateMachine = ECBehaviorStateMachine.new(this, idNonVRRightHand)
		pVRRightStateMachine.setBehaviorTree(behaviorTree)
		
		pVRLeftStateMachine = ECBehaviorStateMachine.new(this, idNonVRLeftHand)
		pVRLeftStateMachine.setBehaviorTree(behaviorTree)
		
		var Block addBtsmRightHand = block ECComposeBTSM btsm, String aliasPrefix
			btsm.addBTSM(behaviorTree, stateMachine)
			btsm.addStateMachine(pVRRightStateMachine)
			btsm.addStateMachine(pVRLeftStateMachine)
			btsm.addAlias(idNonVRRightHand, aliasPrefix, idThisHand)
			btsm.addAlias(idNonVRLeftHand, aliasPrefix, idOtherHand)
		end
		
		var Block addBtsmLeftHand = block ECComposeBTSM btsm, String aliasPrefix
			btsm.addBTSM(behaviorTree, stateMachine)
			btsm.addStateMachine(pVRRightStateMachine)
			btsm.addStateMachine(pVRLeftStateMachine)
			btsm.addAlias(idNonVRLeftHand, aliasPrefix, idThisHand)
			btsm.addAlias(idNonVRRightHand, aliasPrefix, idOtherHand)
		end
		
		// add VR Playspace. this is the base for all VR related behaviors
		pVRPlayspace = ECBehaviorVRPlayspace.new(this)
		
		// add HMD behavior allowing to track player head
		pVRHMD = ECBehaviorVRHMD.new(this, pVRPlayspace)
		pVRHMD.getBTSMs().addBTSM(behaviorTree, stateMachine)
		
		// add right and left hand controllers
		pVRRightHand = ECBehaviorVRHand.new(this, pVRPlayspace, InputDeviceType.vrRightHand, idVRRightHand)
		addBtsmRightHand.run(pVRRightHand.getBTSMs(), "vrHand")
		
		pVRLeftHand = ECBehaviorVRHand.new(this, pVRPlayspace, InputDeviceType.vrLeftHand, idVRLeftHand)
		addBtsmLeftHand.run(pVRLeftHand.getBTSMs(), "vrHand")
		
		// add support to know what element hand controllers point at
		pVRRightHandPointAt = ECBehaviorVRHandPointAt.new(this, pVRRightHand, idVRRightHand)
		addBtsmRightHand.run(pVRRightHandPointAt.getBTSMs(), "vrHandPointAt")
		
		pVRLeftHandPointAt = ECBehaviorVRHandPointAt.new(this, pVRLeftHand, idVRLeftHand)
		addBtsmLeftHand.run(pVRLeftHandPointAt.getBTSMs(), "vrHandPointAt")
		
		// the coordinate system of hand devices is located at the center of the palm pointing
		// forward (grip pose position with aim pose orientation). this provides a predictable
		// coordinate system in contrary to grip or aim pose only. to get an aim offset similar
		// to what aim pose provides with common controllers an offset is set. this offset
		// can be adjusted depending on the hand model used. the default works well for human
		// sized hands
		pVRRightHandPointAt.getOrigin().setVector(Vector.new(0, 0.07, 0.07))
		pVRLeftHandPointAt.getOrigin().setVector(Vector.new(0, 0.07, 0.07))
		
		// ignore actor collider for point at behaviors. this avoids problems if the actor
		// has a full body collider touching the hands
		pVRRightHandPointAt.setIgnoreCollider(getCollider())
		pVRLeftHandPointAt.setIgnoreCollider(getCollider())
		
		// add support for laser pointers on hand controllers
		pVRRightHandLaserPointer = ECBehaviorVRHandLaserPointer.new(this, pVRRightHandPointAt, idVRRightHand)
		addBtsmRightHand.run(pVRRightHandLaserPointer.getBTSMs(), "vrHandLaserPointer")
		
		pVRLeftHandLaserPointer = ECBehaviorVRHandLaserPointer.new(this, pVRLeftHandPointAt, idVRLeftHand)
		addBtsmLeftHand.run(pVRLeftHandLaserPointer.getBTSMs(), "vrHandLaserPointer")
		
		// add support for grabbing grab slots using hand controllers. the aim pose for
		// controllers is located above and in front of the hand. move the grab position
		// into the hand. this is a static offset. users can instead use a hand model
		// bone to attach objects to which is better
		// 
		// the grip center is usually located -11cm along grab orientation, which is 45 degrees
		// upwards. this yields (0, -0.078, -0.078). this is though a bit lower on the palm
		// and for this reason it is lifted slightly up to better line up with where the palm
		// usually is located.
		var Vector position = Vector.new(0, -0.058, -0.078)
		var Vector rotation = Vector.new(0, 0, 0)
		
		var ShapeList shape = ShapeList.new()
		shape.addSphere(Vector.new(), 0.05)
		
		pVRRightHandGrabber = ECBehaviorGrabber.new(this, pVRRightHand, idNonVRRightHand)
		pVRRightHandGrabber.getShape().setShapeList(shape)
		pVRRightHandGrabber.getAttach().getPosition().setVector(position + Vector.new(-0.02, 0, 0.02))
		pVRRightHandGrabber.getAttach().getOrientation().setVector(rotation)
		addBtsmRightHand.run(pVRRightHandGrabber.getBTSMs(), "grabber")
		
		pVRLeftHandGrabber = ECBehaviorGrabber.new(this, pVRLeftHand, idNonVRLeftHand)
		pVRLeftHandGrabber.getShape().setShapeList(shape)
		pVRLeftHandGrabber.getAttach().getPosition().setVector(position + Vector.new(0.02, 0, 0.02))
		pVRLeftHandGrabber.getAttach().getOrientation().setVector(rotation)
		addBtsmLeftHand.run(pVRLeftHandGrabber.getBTSMs(), "grabber")
		
		// add attach slot for attaching objects to the hands
		pVRRightHandAttachSlot = ECBehaviorAttachSlot.new(this, null, pVRRightHand,\
			idNonVRRightHand, "attachSlot(" + idNonVRRightHand + ").")
		pVRRightHandAttachSlot.getPosition().setVector(position)
		pVRRightHandAttachSlot.getOrientation().setVector(rotation)
		addBtsmRightHand.run(pVRRightHandAttachSlot.getBTSMs(), "attachSlot")
		
		pVRLeftHandAttachSlot = ECBehaviorAttachSlot.new(this, null, pVRLeftHand,\
			idNonVRLeftHand, "attachSlot(" + idNonVRLeftHand + ").")
		pVRLeftHandAttachSlot.getPosition().setVector(position)
		pVRLeftHandAttachSlot.getOrientation().setVector(rotation)
		addBtsmLeftHand.run(pVRLeftHandAttachSlot.getBTSMs(), "attachSlot")
		
		// add hand pose support
		pVRRightHandPose = ECBehaviorVRHandPose.new(this, pVRRightHand, idNonVRRightHand,\
			"vrHandPose(" + idVRRightHand + ").")
		addBtsmRightHand.run(pVRRightHandPose.getBTSMs(), "vrHandPose")
		
		pVRLeftHandPose = ECBehaviorVRHandPose.new(this, pVRLeftHand, idNonVRLeftHand,\
			"vrHandPose(" + idVRLeftHand + ").")
		addBtsmLeftHand.run(pVRLeftHandPose.getBTSMs(), "vrHandPose")
		
		// add animation support to hands
		pVRRightHandAnimated = ECBehaviorActorAnimated.new(this, pVRRightHand.getComponent(),\
			getLocomotion(), idNonVRRightHand, "actorAnimated(" + idNonVRRightHand + ").")
		pVRRightHandAnimated.getControllerMapping().setAt("idle", LocomotionAttribute.elapsedTime)
		pVRRightHandAnimated.getControllerMapping().setAt("interaction", LocomotionAttribute.elapsedTime)
		addBtsmRightHand.run(pVRRightHandAnimated.getBTSMs(), "actorAnimated")
		
		pVRLeftHandAnimated = ECBehaviorActorAnimated.new(this, pVRLeftHand.getComponent(),\
			getLocomotion(), idNonVRLeftHand, "actorAnimated(" + idNonVRLeftHand + ").")
		pVRLeftHandAnimated.getControllerMapping().setAt("idle", LocomotionAttribute.elapsedTime)
		pVRLeftHandAnimated.getControllerMapping().setAt("interaction", LocomotionAttribute.elapsedTime)
		addBtsmLeftHand.run(pVRLeftHandAnimated.getBTSMs(), "actorAnimated")
		
		// add action support to both hands
		pVRRightHandAction = ECBehaviorVRHandAction.new(this, pVRRightHand,\
			getConversationActor(), idVRRightHand)
		addBtsmRightHand.run(pVRRightHandAction.getBTSMs(), "vrHandAction")
		
		pVRLeftHandAction = ECBehaviorVRHandAction.new(this, pVRLeftHand,\
			getConversationActor(), idVRLeftHand)
		addBtsmLeftHand.run(pVRLeftHandAction.getBTSMs(), "vrHandAction")
	end
	
	
	/**
	 * \brief VR Right Hand State machine.
	 * \version 1.26
	 */
	func ECBehaviorStateMachine getVRRightStateMachine()
		return pVRRightStateMachine
	end
	
	/**
	 * \brief VR Left Hand State machine.
	 * \version 1.26
	 */
	func ECBehaviorStateMachine getVRLeftStateMachine()
		return pVRLeftStateMachine
	end
	
	/** \brief VR Playspace behavior. */
	func ECBehaviorVRPlayspace getVRPlayspace()
		return pVRPlayspace
	end
	
	/** \brief VR HMD. */
	func ECBehaviorVRHMD getVRHMD()
		return pVRHMD
	end
	
	/** \brief VR Right Hand Controller. */
	func ECBehaviorVRHand getVRRightHand()
		return pVRRightHand
	end
	
	/** \brief VR Left Hand Controller. */
	func ECBehaviorVRHand getVRLeftHand()
		return pVRLeftHand
	end
	
	/**
	 * \brief VR Right Hand Controller Point-At.
	 * \version 1.7
	 */
	func ECBehaviorVRHandPointAt getVRRightHandPointAt()
		return pVRRightHandPointAt
	end
	
	/**
	 * \brief VR Left Hand Controller Point-At.
	 * \version 1.7
	 */
	func ECBehaviorVRHandPointAt getVRLeftHandPointAt()
		return pVRLeftHandPointAt
	end
	
	/**
	 * \brief VR Right Hand Controller Laser Pointer.
	 * \version 1.7
	 */
	func ECBehaviorVRHandLaserPointer getVRRightHandLaserPointer()
		return pVRRightHandLaserPointer
	end
	
	/**
	 * \brief VR Left Hand Controller Laser Pointer.
	 * \version 1.7
	 */
	func ECBehaviorVRHandLaserPointer getVRLeftHandLaserPointer()
		return pVRLeftHandLaserPointer
	end
	
	/**
	 * \brief VR Right Hand Controller Attach Slot.
	 * \version 1.9
	 */
	func ECBehaviorAttachSlot getVRRightHandAttachSlot()
		return pVRRightHandAttachSlot
	end
	
	/**
	 * \brief VR Left Hand Controller Attach Slot.
	 * \version 1.9
	 */
	func ECBehaviorAttachSlot getVRLeftHandAttachSlot()
		return pVRLeftHandAttachSlot
	end
	
	/**
	 * \brief VR Right Hand Controller Grabber.
	 * \version 1.9
	 */
	func ECBehaviorGrabber getVRRightHandGrabber()
		return pVRRightHandGrabber
	end
	
	/**
	 * \brief VR Left Hand Controller Grabber.
	 * \version 1.9
	 */
	func ECBehaviorGrabber getVRLeftHandGrabber()
		return pVRLeftHandGrabber
	end
	
	/**
	 * \brief VR Right Hand Pose.
	 * \version 1.10
	 */
	func ECBehaviorVRHandPose getVRRightHandPose()
		return pVRRightHandPose
	end
	
	/**
	 * \brief VR Left Hand Pose.
	 * \version 1.10
	 */
	func ECBehaviorVRHandPose getVRLeftHandPose()
		return pVRLeftHandPose
	end
	
	/**
	 * \brief VR Right Hand Animated.
	 * \version 1.10
	 */
	func ECBehaviorActorAnimated getVRRightHandAnimated()
		return pVRRightHandAnimated
	end
	
	/**
	 * \brief VR Left Hand Animated.
	 * \version 1.10
	 */
	func ECBehaviorActorAnimated getVRLeftHandAnimated()
		return pVRLeftHandAnimated
	end
	
	/**
	 * \brief VR Right Hand Action.
	 * \version 1.10
	 */
	func ECBehaviorVRHandAction getVRRightHandAction()
		return pVRRightHandAction
	end
	
	/**
	 * \brief VR Left Hand Action.
	 * \version 1.10
	 */
	func ECBehaviorVRHandAction getVRLeftHandAction()
		return pVRLeftHandAction
	end
	
	
	/** \brief Create element instance. */
	protected func Element createElement()
		return BaseVRActor.new(this)
	end
end
