/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */


namespace Dragengine.Scenery

pin Dragengine.Gui
pin Dragengine.LoadSave
pin Dragengine.Preloading
pin Dragengine.Utils


/**
 * \brief Basic actor class.
 * 
 * Basic implementation of an actor in a game. Actors exhibit complex behavior beyond simple
 * interactions as provided by props. Typically this behavior can be split into two different
 * groups: actions and AI.
 * 
 * BaseActor extends SimpleElement since actor handling requires a visible component as well
 * as a collider to properly move inside the game world. BaseActor registers itself as thinker.
 * 
 * \par Actions
 * Actions provide an action an actor is currently performing. By using individual classes
 * for individual groups of actions allows to easily adding and modifying behavior. It is
 * also possible to represent all actions of an actor through a single class instance for
 * example if the developer wishes to use more descriptive or visual tools to design
 * behavior. The important Element actions are forwarded to the active action for each actor.
 * To change the action an actor performs call setAction().
 * 
 * \par AI
 * AI defines the large scale behavior of an actor. While actions provide handling of a group
 * of actions in a flexible and extendible way the AI defines when to perform what action.
 * This allows to reuse behavior between player and non-player actors. To take control of an
 * actor use BasePlayerActor (or an element with ECBehaviorPlayerControllable support) and
 * set the AI either to \em null or a subclass of BaseActorAI knowing how to restore a
 * proper actor AI after the player releases control. If you use \em null as AI you need to
 * use BasePlayerActor.playerReleasesControl() to restore the AI instead.
 * 
 * \par Player input tracker
 * If actor is controller by player the bindings send player input to the instance of
 * PlayerInputLook assigned to the actor. This helps to track different kinds of player
 * input to properly trigger actions. AI does not require this to be present.
 * 
 * \par Locomotion
 * Locomotion is provided using an instance of ECBehaviorLocomotion. This class provides all
 * the basic behavior to do locomotion for different type of actors. Supports organic locomotion
 * of 2-legged and 4-legged characters with natural and FPS type movement patterns as well as
 * mechanical locomotion like vehicles.
 * 
 * \par Navigation
 * Navigation handling is provided using an instance of Navigator. The default configuration
 * supports mesh type navigation but can be changed to support grid or volumetric. To properly
 * use navigation with the AI set up the required parameters like navigation space type,
 * layer and cost parameters.
 * 
 * \par Camera director
 * You can attach the game camera and microphone directly to the actor collider AI. An easier
 * solution is using PlayerControlledActorCameraDirector class. This uses the actor currently
 * controlled by the player to update the game camera and microphone without manual management.
 * Use it like this:
 * \code{.ds}
 * windowGameWorld.setCameraDirector(PlayerControlledActorCameraDirector.new())
 * \endcode
 * This camera director tracks what actor the player is currently controlling. It is not
 * required to handle this yourself. If you need different directing parameters for individual
 * actors you store the camera directory and change its parameters by subclassing the
 * playerTakesControl() method.
 */
class BaseActor extends BehaviorElement
	var ECBehaviorComponent.Instance pComponent
	var ECBehaviorCollider.Instance pCollider
	var ECBehaviorColliderAI.Instance pColliderAI
	var ECBehaviorBehaviorTree.Instance pBehaviorTree
	var ECBehaviorParameterTable.Instance pParameterTable
	var ECBehaviorProjectToGround.Instance pProjectToGround
	var ECBehaviorLocomotion.Instance pLocomotion
	var ECBehaviorActorAnimated.Instance pActorAnimated
	var ECBehaviorConversationActor.Instance pConversationActor
	var ECBehaviorNavigator.Instance pNavigator
	var ECBehaviorFootSteps.Instance pFootSteps
	var ECBehaviorRideOn.Instance pRideOn
	var ECBehaviorActorMover.Instance pActorMover
	var ECBehaviorAlignActor.Instance pAlignActor
	var ECBehaviorAvoidedByActor.Instance pAvoidedByActor
	var ECBehaviorAvoidCollision.Instance pAvoidCollision
	var ECBehaviorPlayerInputLook.Instance pPlayerInputLook
	var ECBehaviorPlayerInputTurn.Instance pPlayerInputTurn
	var ECBehaviorPlayerInputCrouch.Instance pPlayerInputCrouch
	var ECBehaviorPlayerInputMove.Instance pPlayerInputMove
	var ECBehaviorPlayerControllable.Instance pPlayerControllable
	var ECBehaviorActorAIAction.Instance pAIAction
	
	
	
	/** \brief Create element. */
	func new(BaseActorClass eclass) super(eclass)
		pComponent = eclass.getComponent().instance(this)
		pCollider = eclass.getCollider().instance(this)
		pColliderAI = eclass.getColliderAI().instance(this)
		pBehaviorTree = eclass.getBehaviorTree().instance(this)
		pParameterTable = eclass.getParameterTable().instance(this)
		pProjectToGround = eclass.getProjectToGround().instance(this)
		pLocomotion = eclass.getLocomotion().instance(this)
		pActorAnimated = eclass.getActorAnimated().instance(this)
		pConversationActor = eclass.getConversationActor().instance(this)
		pNavigator = eclass.getNavigator().instance(this)
		pFootSteps = eclass.getFootSteps().instance(this)
		pRideOn = eclass.getRideOn().instance(this)
		pActorMover = eclass.getActorMover().instance(this)
		pAlignActor = eclass.getAlignActor().instance(this)
		pAvoidedByActor = eclass.getAvoidedByActor().instance(this)
		pAvoidCollision = eclass.getAvoidCollision().instance(this)
		pPlayerInputLook = eclass.getPlayerInputLook().instance(this)
		pPlayerInputTurn = eclass.getPlayerInputTurn().instance(this)
		pPlayerInputCrouch = eclass.getPlayerInputCrouch().instance(this)
		pPlayerInputMove = eclass.getPlayerInputMove().instance(this)
		pPlayerControllable = eclass.getPlayerControllable().instance(this)
		pAIAction = eclass.getAIAction().instance(this)
	end
	
	
	
	/**
	 * \brief Initialize element from stub.
	 * 
	 * Calls these hook methods to do initialization work.
	 * - initColliderShape()
	 * - initProjectToGroundShape()
	 * - initAvoidCollisionShape()
	 * - initNavigator()
	 */
	func void init(StubElement stub)
		super.init(stub)
		
		initColliderShape(stub)
		initProjectToGroundShapes(stub)
		initAvoidCollisionShape(stub)
		initNavigator(stub)
	end
	
	/**
	 * \brief Initialize collider AI shape.
	 * 
	 * Assigns a capsule shape to the collider AI. The capsule has a total height of 1.8m
	 * and is 0.6m wide. This is a reasonable collider AI shape for a humanoid actor.
	 */
	protected func void initColliderShape(StubElement stub)
		pColliderAI.setShapeHumanoid(0.3, 1.8)
	end
	
	/**
	 * \brief Initialize avoid collision collider shape.
	 * 
	 * Sets sphere shape with the same size as used for the collider AI shape.
	 */
	protected func void initAvoidCollisionShape(StubElement stub)
		pAvoidCollision.setShapesSphere(0.3, 0.6)
	end
	
	/**
	 * \brief Initialize project to ground shapes.
	 * 
	 * Assigns a box shape to the project to ground touch sensor. The shape is located at the
	 * actor position and has a radius of slightly more than the radius used for the collider AI
	 * (0.31m) and a height of the same value. This is a reasonable collider AI shape for a
	 * humanoid actor.
	 * 
	 * Assigns a sphere shape to the project to ground instance. This is usually the
	 * same shape as used for the collider AI but can be optimized. For example if the
	 * shape is a capcule the project to ground shape can be opzimized to a sphere of
	 * the matching radius. The default implementation does apply this optimization and
	 * uses a sphere with the same radius as used for the collider AI capsule.
	 */
	protected func void initProjectToGroundShapes(StubElement stub)
		pProjectToGround.setShapesHumanoid(0.3)
	end
	
	/**
	 * \brief Initialize navigator.
	 * 
	 * See ECBehaviorNavigator.init() . Sets layer to 0 and space type to NavigationSpaceType.mesh .
	 * Sets default fix cost to 0 and default cost-per-meter to 1. These apply if no cost types
	 * are added by the actor or other behaviors. The blocking cost is set to 10000.
	 * 
	 * Subclass should add type specific costs if required.
	 */
	protected func void initNavigator(StubElement stub)
	end
	
	
	
	/** \brief Component behavio instance. */
	func ECBehaviorComponent.Instance getComponent()
		return pComponent
	end
	
	/** \brief Collider behavior instance. */
	func ECBehaviorCollider.Instance getCollider()
		return pCollider
	end
	
	/** \brief Collider AI behavior instance. */
	func ECBehaviorColliderAI.Instance getColliderAI()
		return pColliderAI
	end
	
	/**
	 * \brief Behavior tree.
	 * \version 1.26
	 */
	func ECBehaviorBehaviorTree.Instance getBehaviorTree()
		return pBehaviorTree
	end
	
	/** \brief Parameter table instance. */
	func ECBehaviorParameterTable.Instance getParameterTable()
		return pParameterTable
	end
	
	/** \brief Project to ground behavior instance. */
	func ECBehaviorProjectToGround.Instance getProjectToGround()
		return pProjectToGround
	end
	
	/** \brief Locomotion behavior instance. */
	func ECBehaviorLocomotion.Instance getLocomotion()
		return pLocomotion
	end
	
	/** \brief Actor animated behavior instance. */
	func ECBehaviorActorAnimated.Instance getActorAnimated()
		return pActorAnimated
	end
	
	/** \brief Conversation actor instance. */
	func ECBehaviorConversationActor.Instance getConversationActor()
		return pConversationActor
	end
	
	/** \brief Navigator instance. */
	func ECBehaviorNavigator.Instance getNavigator()
		return pNavigator
	end
	
	/** \brief Foot steps instance. */
	func ECBehaviorFootSteps.Instance getFootSteps()
		return pFootSteps
	end
	
	/** \brief Ride on instance. */
	func ECBehaviorRideOn.Instance getRideOn()
		return pRideOn
	end
	
	/** \brief Actor mover instance. */
	func ECBehaviorActorMover.Instance getActorMover()
		return pActorMover
	end
	
	/** \brief Align actor instance. */
	func ECBehaviorAlignActor.Instance getAlignActor()
		return pAlignActor
	end
	
	/** \brief Avoided by actor instance. */
	func ECBehaviorAvoidedByActor.Instance getAvoidedByActor()
		return pAvoidedByActor
	end
	
	/** \brief Avoid collision instance. */
	func ECBehaviorAvoidCollision.Instance getAvoidCollision()
		return pAvoidCollision
	end
	
	/** \brief Player input looking around behavior instance. */
	func ECBehaviorPlayerInputLook.Instance getPlayerInputLook()
		return pPlayerInputLook
	end
	
	/** \brief Player input turning behavior instance. */
	func ECBehaviorPlayerInputTurn.Instance getPlayerInputTurn()
		return pPlayerInputTurn
	end
	
	/** \brief Player input crouching behavior instance. */
	func ECBehaviorPlayerInputCrouch.Instance getPlayerInputCrouch()
		return pPlayerInputCrouch
	end
	
	/** \brief Player input moving behavior instance. */
	func ECBehaviorPlayerInputMove.Instance getPlayerInputMove()
		return pPlayerInputMove
	end
	
	/** \brief Player controllable instance. */
	func ECBehaviorPlayerControllable.Instance getPlayerControllable()
		return pPlayerControllable
	end
	
	/** \brief AI-Action instance. */
	func ECBehaviorActorAIAction.Instance getAIAction()
		return pAIAction
	end
	
	
	
	/**
	 * \brief Adjust actor after teleporting.
	 * 
	 * Calls spawnAdjustActor().
	 */
	func void teleportAdjustActor()
		spawnAdjustActor()
	end
	
	/**
	 * \brief Adjust actor after spawning.
	 * 
	 * Updates the actor turning to match the orientation. Also resets some parameters to
	 * make the actor appear without erratic motions. Called during addToGameWorld.
	 */
	protected func void spawnAdjustActor()
		// ensure actor is oriented upright. just in case a spawn point is miss-aligned
		var float turnAngle = getOrientation().getEulerAngles().getY()
		setOrientation(Quaternion.newFromEulerY(turnAngle))
		
		// the behaviors below do spawn adjusting already on their own if added to a game
		// world. we include them here for situations where actors want to trigger an
		// adjustment outside addToGameWorld().
		pColliderAI.getCollider().setLinearVelocity(Vector.new())
		pLocomotion.setOrientation(turnAngle)
		pConversationActor.clearAllPlayback()
		pPlayerInputLook.reset()
		pPlayerInputTurn.reset()
		pPlayerInputCrouch.reset()
		pPlayerInputMove.reset()
	end
	
	/** \brief Add to game world. */
	func void addToGameWorld()
		spawnAdjustActor()
		super.addToGameWorld()
	end
	
	
	
	/** \brief Read element from file. */
	func void readFromFile(PersistencyEnvironment env, FileReader reader)
		super.readFromFile(env, reader)
		
		select reader.readByte() // version
		case 0
			var PersistencyFlags flags = PersistencyFlags.new(1, reader)
			setVisible(flags.getAt(0))
			
		else
			throw EInvalidParam.new("unsupported version")
		end
	end
	
	/** Writes the element to a file. */
	func void writeToFile(PersistencyEnvironment env, FileWriter writer)
		super.writeToFile(env, writer)
		
		writer.writeByte(0) // version
		
		var PersistencyFlags flags = PersistencyFlags.new(1)
		flags.setAt(0, getVisible())
		flags.writeToFile(writer)
	end
	
	
	
	/** \brief Visit element. */
	func void visit(ElementVisitor visitor)
		visitor.visitBaseActor(this)
	end
end
