/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */


namespace Dragengine.Scenery

pin Dragengine.BehaviorTreeSystem
pin Dragengine.LoadSave


/**
 * \brief Actor AI using BehaviorTree.
 * 
 * Uses \ref BehaviorTree using \ref BTContext to do AI. For each call to \ref #think() the
 * behavior tree is stepped. In case of an exception in the behavior tree the exception is
 * logged and the running of the behavior tree cancelled.
 * 
 * There are two ways to use this AI. The first way is to add a \ref ECBehaviorBehaviorTree#Instance
 * behavior to the actor element class and assign it to the AI. This will use the context of
 * the behavior tree behavior. Behavior tree actions and conditions are then easily added by
 * adding other behaviors providing such actions and conditions.
 * 
 * The second way to use this AI requires setting a custom \ref BTContextAI subclass. In this
 * case you have to add all the required actions and conditions to this context. This is
 * typically done during construction time or activation time. The advantage here is that you
 * can create a custom context without sharing (and modifying) the one of
 * \ref ECBehaviorBehaviorTree#Instance. If both \ref ECBehaviorBehaviorTree#Instance and a
 * custom contex is set the custom context is used.
 * 
 * Which way to use depends on the needs. In general though the first version using
 * \ref ECBehaviorBehaviorTree#Instance is recommended.
 * 
 * To support behaviors receiving notifications about the state of the context set also
 * the ECBehaviorBehaviorTree#Instance used to initialize the context.
 */
class BAAIBehaviorTree extends BaseActorAI
	/**
	 * \brief Factory for loading actor ai.
	 */
	class Factory implements PersistencyFactory, ECBehaviorActorAIAction.AIFactory
		public static fixed var String NAME = "BAAIBehaviorTree"
		
		func new()
		end
		
		func Persistable readObjectFromFile(PersistencyEnvironment env, FileReader reader)
			return BAAIBehaviorTree.new(env, reader)
		end
		
		static func void registerFactory(Persistency persistency)
			persistency.addFactory(NAME, Factory.new())
		end
		
		func BaseActorAI createAI(ECBehaviorActorAIAction.Instance instance)
			return BAAIBehaviorTree.new()
		end
	end
	
	/**
	 * \brief Behavior tree context with link to BAAIBehaviorTree.
	 */
	class BTContextAI extends BTContext
		/** \brief AI. */
		var BAAIBehaviorTree pAI
		
		/** \brief Create context. */
		func new(BAAIBehaviorTree ai, BehaviorTree behaviorTree) super(behaviorTree)
			pAI = ai
		end
		/** \brief Create copy of context. */
		func new(BTContextAI context) super(context)
			pAI = context.pAI
		end
		
		/** \brief Create copy of context. */
		func new(BAAIBehaviorTree ai, BTContext context) super(context)
			pAI = ai
		end
		
		/** \brief Create copy of context using different behavior tree. */
		func new(BAAIBehaviorTree ai, BTContext context, BehaviorTree behaviorTree) super(context, behaviorTree)
			pAI = ai
		end
		
		/** \brief AI. */
		func BAAIBehaviorTree getAI()
			return pAI
		end
		
		/** \brief Actor. */
		func BehaviorElement getActor()
			return pAI.getActor()
		end
	end
	
	/**
	 * \brief Behavior tree action with link to BAAIBehaviorTree.
	 */
	abstract class BTActionAI implements BTAction
		/** \brief AI. */
		var BAAIBehaviorTree pAI
		
		/** \brief Create action. */
		func new(BAAIBehaviorTree ai)
			pAI = ai
		end
		
		/** \brief AI. */
		func BAAIBehaviorTree getAI()
			return pAI
		end
		
		/** \brief Actor. */
		func BehaviorElement getActor()
			return pAI.getActor()
		end
	end
	
	
	
	var BTContextAI pContext
	var bool pRunning, pPauseInConversation
	var ECBehaviorBehaviorTree.Instance pBehaviorBehaviorTree
	var BehaviorTree pBehaviorTree
	protected var ECBehaviorConversationActor.Instance conversationActor
	var String pLoadRuleId
	var bool pLoadActionFirstRun
	
	
	/** \brief Create actor ai. */
	func new()
		pRunning = true
		pPauseInConversation = true
	end
	
	/** \brief Create actor ai using behavior tree. */
	func new(BehaviorTree tree) this()
		pBehaviorTree = tree
	end
	
	/** \brief Create actor ai restoring from file reader. */
	func new(PersistencyEnvironment env, FileReader reader)
		select reader.readByte() // version
		case 0
			var PersistencyFlags flags = PersistencyFlags.new(3, reader)
			pRunning = flags.getAt(0)
			pPauseInConversation = flags.getAt(1)
			pLoadActionFirstRun = flags.getAt(2)
			
			var String path = env.readString8OrNullIfEmpty(reader)
			if path != null
				pBehaviorTree = (env.getVariable(PersistencyEnvironment.varLoadBehaviorTree)\
					cast LoadBehaviorTree).loadFromFile(path)
			end
			
			pLoadRuleId = env.readString8OrNullIfEmpty(reader)
			
		else
			throw EInvalidParam.new("unsupported version")
		end
	end
	
	/** \brief Dispose of actor ai. */
	func void dispose()
		pBehaviorBehaviorTree = null
		conversationActor = null
		pContext = null
		super.dispose()
	end
	
	
	
	/**
	 * \brief Behavior tree to use or null.
	 * \version 1.26
	 */
	func BehaviorTree getBehaviorTree()
		return pBehaviorTree
	end
	
	/**
	 * \brief Set behavior tree to use or null.
	 * \version 1.26
	 * 
	 * Change affects context only before \ref #activate() has been called.
	 */
	func void setBehaviorTree(BehaviorTree tree)
		pBehaviorTree = tree
	end
	
	/** \brief Custom behavior tree context or \em null if not set. */
	func BTContextAI getContext()
		return pContext
	end
	
	/**
	 * \brief Set custom behavior tree context or \em null if not set.
	 * 
	 * If context is not null resetContext() is also called.
	 */
	func void setContext(BTContextAI context)
		pContext = context
		resetContext()
	end
	
	/**
	 * \brief Behavior tree context to use or \em null if not set.
	 * \version 1.26
	 * 
	 * If custom context is set returns the value of \ref #getContext(). If
	 * \ref ECBehaviorBehaviorTree#Instance is set returns
	 * \ref ECBehaviorBehaviorTree.Instance#getContext(). Otherwise returns null.
	 */
	func BTContext getUseContext()
		if pContext != null
			return pContext
			
		elif pBehaviorBehaviorTree != null
			return pBehaviorBehaviorTree.getContext()
			
		else
			return null
		end
	end
	
	/** \brief Behavior tree is running. */
	func bool getRunning()
		return pRunning
	end
	
	/** \brief Set if behavior tree is running. */
	func void setRunning(bool running)
		pRunning = running
	end
	
	/**
	 * \brief Pause behavior tree while actor is in a conversation.
	 * \version 1.19
	 */
	func bool getPauseInConversation()
		return pPauseInConversation
	end
	
	/**
	 * \brief Set to pause behavior tree while actor is in a conversation.
	 * \version 1.19
	 */
	func void setPauseInConversation(bool pauseInConversation)
		pPauseInConversation = pauseInConversation
	end
	
	/**
	 * \brief Reset context to run it again.
	 * \version 1.19
	 */
	func void resetContext()
		var BTContext context = getUseContext()
		if context == null
			return
		end
		
		context.reset()
		
		if pBehaviorBehaviorTree != null
			pBehaviorBehaviorTree.notifyRestarted(context)
		end
	end
	
	/**
	 * \brief Behavior behavior tree to use context of and to send notifications to.
	 * \version 1.19
	 */
	func ECBehaviorBehaviorTree.Instance getBehaviorBehaviorTree()
		return pBehaviorBehaviorTree
	end
	
	/**
	 * \brief Set behavior behavior tree to use context of and to send notifications to.
	 * \version 1.19
	 */
	func void setBehaviorBehaviorTree(ECBehaviorBehaviorTree.Instance behavior)
		pBehaviorBehaviorTree = behavior
	end
	
	
	
	func void activate(BehaviorElement actor)
		super.activate(actor)
		
		if pBehaviorTree != null
			var BTContext context = getUseContext()
			if context != null
				context.setBehaviorTree(pBehaviorTree)
			end
		end
	end
	
	func void activateWhileLoading(BehaviorElement actor)
		super.activateWhileLoading(actor)
		
		var BTContext context = getUseContext()
		if context != null
			if pBehaviorTree != null
				context.setBehaviorTree(pBehaviorTree)
			end
			
			if pLoadRuleId != null
				context.setCurrentRuleByID(pLoadRuleId)
				context.setActionFirstRun(pLoadActionFirstRun)
				pLoadRuleId = null
			end
		end
	end
	
	
	/**
	 * \brief Init behaviors.
	 * 
	 * Retrieve and store required and optional behavior instances from the actor element.
	 */
	protected func void initBehaviors()
		super.initBehaviors()
		
		if actor castable BaseActor
			var BaseActor baseActor = actor cast BaseActor
			conversationActor = baseActor.getConversationActor()
			
		else
			conversationActor = ECBehaviorConversationActor.getInstanceIn(actor)
		end
		
		if pBehaviorBehaviorTree == null
			pBehaviorBehaviorTree = ECBehaviorBehaviorTree.getInstanceIn(actor)
		end
	end
	
	/**
	 * \brief Thinking.
	 * 
	 * Behavior tree is process if:
	 * - Context is not null
	 * - Running is true
	 * - Actor is not controlled by player
	 * 
	 * If running the behavior tree throws an exception or returns \em false running is set to
	 * false and onBehaviorTreeFailed() is called. To run the context again call resetContext().
	 */
	func void think(float elapsed)
		var BTContext context = getUseContext()
		if context == null or isControlledByPlayer()
			return
		end
		
		if pBehaviorBehaviorTree != null
			pBehaviorBehaviorTree.notifyUpdate(context, elapsed)
		end
		
		if not pRunning
			return
		end
		if pPauseInConversation and conversationActor != null and conversationActor.isInConversation()
			return
		end
		
		try
			if not context.stepBehaviorTree()
				setRunning(false)
				if pBehaviorBehaviorTree != null
					pBehaviorBehaviorTree.notifyFailed(context)
				end
				onBehaviorTreeFailed(null)
			end
			
		catch Exception e
			setRunning(false)
			if pBehaviorBehaviorTree != null
				pBehaviorBehaviorTree.notifyFailed(context)
			end
			onBehaviorTreeFailed(e)
		end
	end
	
	/**
	 * \brief Running the behavior tree failed.
	 * 
	 * Default implementation logs exception using log(Exception).
	 * 
	 * \param exception Exception if thrown or \em null otherwise.
	 */
	func void onBehaviorTreeFailed(Exception e)
		log(e)
	end
	
	
	
	/**
	 * \brief Name of PersistencyFactory required to load object from file.
	 * 
	 * Name of PersistencyFactory is first written to the file as string with
	 * 8-bit length. Then writeToFile() is called to write the object itself.
	 * Empty name is not allowed as is names longer than 255 characters.
	 * Name has to match a PersistencyFactory present in the Persistency
	 * instance used for loading objects. Object is read using
	 * PersistencyFactory.readObjectFromFile() of the matching PersistencyFactory.
	 */
	func String persistencyFactoryName()
		return Factory.NAME
	end
	
	/** \brief Write object to file writer. */
	func void writeObjectToFile(PersistencyEnvironment env, FileWriter writer)
		super.writeObjectToFile(env, writer)
		
		var bool actionFirstRun
		var String rule
		
		if isActive()
			var BTContext context = getUseContext()
			if context != null and context.getCurrentRule() != null
				rule = context.getCurrentRule().getID()
				actionFirstRun = context.getActionFirstRun()
			end
		end
		
		writer.writeByte(0) // version
		
		var PersistencyFlags flags = PersistencyFlags.new(3)
		flags.setAt(0, pRunning)
		flags.setAt(1, pPauseInConversation)
		flags.setAt(2, actionFirstRun)
		flags.writeToFile(writer)
		
		env.writeString8OrEmptyIfNull(writer,\
			pBehaviorTree != null if pBehaviorTree.getFilename() else null)
		
		env.writeString8OrEmptyIfNull(writer, rule)
	end
end
