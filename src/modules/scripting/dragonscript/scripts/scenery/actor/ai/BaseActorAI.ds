/* 
 * Drag[en]gine DragonScript Script Module
 *
 * Copyright (C) 2020, Roland Pl√ºss (roland@rptd.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */


namespace Dragengine.Scenery

pin Dragengine.LoadSave
pin Dragengine.Utils


/**
 * \brief Base actor AI.
 * 
 * Action supports the Persistable interface an can be read from and writen to file writers.
 */
class BaseActorAI implements Persistable
	/** \brief Factory for loading actor ai. */
	public class Factory implements PersistencyFactory, ECBehaviorActorAIAction.AIFactory
		public static fixed var String NAME = "BaseActorAI"
		
		func new()
		end
		
		func Persistable readObjectFromFile(PersistencyEnvironment env, FileReader reader)
			return BaseActorAI.new()
		end
		
		public static func void registerFactory(Persistency persistency)
			persistency.addFactory(NAME, Factory.new())
		end
		
		func BaseActorAI createAI(ECBehaviorActorAIAction.Instance instance)
			return BaseActorAI.new()
		end
	end
	
	
	
	/** \brief Actor the action is assigned to or \em null. */
	protected var BehaviorElement actor
	
	/** \brief Behavior player controllable or \em null. */
	protected var ECBehaviorPlayerControllable.Instance playerControllable
	
	/** \brief Behavior actor ai-action or \em null. */
	protected var ECBehaviorActorAIAction.Instance aiAction
	
	
	
	/** \brief Create base actor ai. */
	func new()
	end
	
	/** \brief Dispose of base actor ai. */
	func void dispose()
		actor = null
	end
	
	
	
	/** \brief Actor owning the action. */
	func BehaviorElement getActor()
		return actor
	end
	
	/** \brief Behavior player controllable or \em null. */
	func ECBehaviorPlayerControllable.Instance getPlayerControllable()
		return playerControllable
	end
	
	/** \brief Behavior actor ai-action or \em null. */
	func ECBehaviorActorAIAction.Instance getAIAction()
		return aiAction
	end
	
	/** \brief Actor is controlled by player. */
	func bool isControlledByPlayer() 
		return playerControllable != null and playerControllable.isPlayerControlled()
	end
	
	/**
	 * \brief AI is active actor AI.
	 * \version 1.4
	 */
	func bool isActive()
		return aiAction.getAI() == this
	end
	
	/**
	 * \brief AI is not active actor AI.
	 * \version 1.4
	 */
	func bool isNotActive()
		return aiAction.getAI() != this
	end
	
	
	
	/**
	 * \brief AI has been set as active AI in an actor.
	 * 
	 * Calls these hook methods:
	 * - initBehaviors()
	 */
	func void activate(BehaviorElement actor)
		this.actor = actor
		initBehaviors()
	end
	
	/**
	 * \brief AI has been set as active AI in an actor while loading.
	 * 
	 * Similar to activate(BehaviorElement) but only stores the actor and calls initBehaviors().
	 * This is required since while loading behaviors load their state and AIs load their states.
	 * If activate(BehaviorElement) is called these states would be reset to initial values.
	 */
	func void activateWhileLoading(BehaviorElement actor)
		this.actor = actor
		initBehaviors()
	end
	
	/** \brief Action has been unset as active action in an actor. */
	func void deactivate()
		actor = null
	end
	
	/** \brief Player takes control of actor. */
	func void playerTakesControl()
	end
	
	/** \brief Player released control of actor. */
	func void playerReleasesControl()
	end
	
	
	
	/** \brief Thinking. */
	func void think(float elapsed)
	end
	
	
	
	/** \brief Action finished successfully. */
	func void actionFinished()
	end
	
	/** \brief Action failed. */
	func void actionFailed()
	end
	
	
	
	/** \brief Actor entered game world. */
	func void enteredGameWorld()
	end
	
	/** \brief Actor left game world. */
	func void leftGameWorld()
	end
	
	/** \brief Actor has been added to game world and enterFrame() is called once. */
	func void enterFrame()
	end
	
	
	
	/** \brief Actor has been added to a conversation playback. */
	func void enterConversation()
	end
	
	/** \brief Actor has been removed from a conversation playback. */
	func void leaveConversation()
	end
	
	
	
	/**
	 * \brief Collision detected.
	 * 
	 * Action does collision response and changes the parameters of \em owner. AI is only
	 * notified about the collision and should not interfere with collision response.
	 */
	func void collision(Collider owner, CollisionInfo info)
	end
	
	
	
	/**
	 * \brief Init behaviors.
	 * 
	 * Retrieve and store required and optional behavior instances from the actor element.
	 */
	protected func void initBehaviors()
		if actor castable BaseActor
			var BaseActor baseActor = actor cast BaseActor
			playerControllable = baseActor.getPlayerControllable()
			aiAction = baseActor.getAIAction()
			
		else
			playerControllable = ECBehaviorPlayerControllable.getInstanceIn(actor)
			aiAction = ECBehaviorActorAIAction.getInstanceIn(actor)
		end
	end
	
	
	
	/** \brief Log text to BaseGameApp console prefixed with actor information. */
	func void log(String text)
		log(BaseGameApp.getApp().getConsole(), text)
	end
	
	/** \brief Log text to console prefixed with actor information. */
	func void log(Console console, String text)
		console.addMessage(loggingPrefix() + ": " + text)
	end
	
	/** \brief Log text about element to BaseGameApp console prefixed with actor information. */
	func void log(Element element, String text)
		log(BaseGameApp.getApp().getConsole(), element, text)
	end
	
	/** \brief Log text about element to console prefixed with actor information. */
	func void log(Console console, Element element, String text)
		if element == null
			console.addMessage(loggingPrefix() + " <null>: " + text)
			
		else
			console.addMessage(loggingPrefix() + " " + element.getClass().getClassname() \
				+ " " + element.getPosition() + ": " + text)
		end
	end
	
	/** \brief Log exception to BaseGameApp console prefixed with actor information. */
	func void log(Exception exception)
		log(BaseGameApp.getApp().getConsole(), exception)
	end
	
	/** \brief Log exception to console prefixed with actor information. */
	func void log(Console console, Exception exception)
		console.addError(loggingPrefix(), exception)
	end
	
	/**
	 * \brief Logging prefix.
	 * 
	 * Returns string in the form "<actor-class>/<ai-class>".
	 */
	func String loggingPrefix()
		return actor.getClass().getClassname().splitExact('.').getAt(-1).toString() \
			+ "/" + className().splitExact('.').getAt(-1)
	end
	
	
	
	/**
	 * \brief Name of PersistencyFactory required to load object from file.
	 * 
	 * Name of PersistencyFactory is first written to the file as string with
	 * 8-bit length. Then writeToFile() is called to write the object itself.
	 * Empty name is not allowed as is names longer than 255 characters.
	 * Name has to match a PersistencyFactory present in the Persistency
	 * instance used for loading objects. Object is read using
	 * PersistencyFactory.readObjectFromFile() of the matching PersistencyFactory.
	 */
	func String persistencyFactoryName()
		return Factory.NAME
	end
	
	/** \brief Write object to file writer. */
	func void writeObjectToFile(PersistencyEnvironment env, FileWriter writer)
	end
end
