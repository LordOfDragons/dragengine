/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */


namespace Dragengine.Scenery

pin Dragengine.Gui
pin Dragengine.LoadSave
pin Dragengine.Preloading
pin Dragengine.Utils
pin Dragengine.BehaviorTreeSystem


/**
 * \brief Actor element class.
 * 
 * \par Behavior XML Element Class.
 * 
 * This class can be recreated using \ref GenericBehaviorElementClass and this *.deeclass file:
 * 
 * \code{.xml}
 * <?xml version='1.0' encoding='UTF-8'?>
 * <elementClass name='MyClass' class='GenericBehaviorElement'>
 *   <behavior type='ECBehaviorBehaviorTree'/>
 *   <behavior type='ECBehaviorStateMachine'/>
 *   <behavior type='ECBehaviorInteractionElement'/>
 *   <behavior type='ECBehaviorComponent'>
 *     <!-- actors are best not affecting sound nor showing up in env maps since they
 *          are dynamic. still doing so is usually expensive for modules to perform -->
 *     <boolean name='.renderEnvMap'>false</boolean>
 *     <boolean name='.affectsAudio'>false</boolean>
 *     <string name='.hintMovement'>dynamic</string>
 *   </behavior>
 *   <behavior type='ECBehaviorCollider'/>
 *   <behavior type='ECBehaviorColliderAI'/>
 *   <behavior type='ECBehaviorParameterTable'/>
 *   <behavior type='ECBehaviorProjectToGround'/>
 *   <behavior type='ECBehaviorLocomotion'/>
 *   <behavior type='ECBehaviorActorAnimated'/>
 *   <behavior type='ECBehaviorConversationActor'/>
 *   <behavior type='ECBCTRRBindings'/>
 *   <behavior type='ECBehaviorNavigator'/>
 *   <behavior type='ECBehaviorFootSteps'/>
 *   <behavior type='ECBehaviorRideOn'/>
 *   <behavior type='ECBehaviorActorMover'/>
 *   <behavior type='ECBehaviorAlignActor'/>
 *   <behavior type='ECBehaviorAvoidedByActor'/>
 *   <behavior type='ECBehaviorAvoidCollision'/>
 *   <behavior type='ECBehaviorPlayerInputLook'/>
 *   <behavior type='ECBehaviorPlayerInputTurn'/>
 *   <behavior type='ECBehaviorPlayerInputCrouch'/>
 *   <behavior type='ECBehaviorPlayerInputMove'/>
 *   <behavior type='ECBehaviorPlayerControllable'/>
 *   <behavior type='ECBehaviorActorAIAction'/>
 * </elementClass>
 * \endcode
 */
class BaseActorClass extends BehaviorElementClass
	var ECBehaviorBehaviorTree pBehaviorTree
	var ECBehaviorStateMachine pStateMachine
	var ECBehaviorInteractionElement pInteractionElement
	var ECBehaviorComponent pComponent
	var ECBehaviorCollider pCollider
	var ECBehaviorColliderAI pColliderAI
	var ECBehaviorParameterTable pParameterTable
	var ECBehaviorProjectToGround pProjectToGround
	var ECBehaviorLocomotion pLocomotion
	var ECBehaviorActorAnimated pActorAnimated
	var ECBehaviorConversationActor pConversationActor
	var ECBCTRRBindings pCTRRBindings
	var ECBehaviorNavigator pNavigator
	var ECBehaviorFootSteps pFootSteps
	var ECBehaviorRideOn pRideOn
	var ECBehaviorActorMover pActorMover
	var ECBehaviorAlignActor pAlignActor
	var ECBehaviorAvoidedByActor pAvoidedByActor
	var ECBehaviorAvoidCollision pAvoidCollision
	var ECBehaviorPlayerInputLook pPlayerInputLook
	var ECBehaviorPlayerInputTurn pPlayerInputTurn
	var ECBehaviorPlayerInputCrouch pPlayerInputCrouch
	var ECBehaviorPlayerInputMove pPlayerInputMove
	var ECBehaviorPlayerControllable pPlayerControllable
	var ECBehaviorActorAIAction pAIAction
	
	
	
	/** \brief Create element class using loaders from BaseGameApp. */
	func new() this("Actor", BaseGameApp.getApp().getLoaders(), \
	BaseGameApp.getApp().getPlayerControlledActor())
	end
	
	/** \brief Create element class. */
	func new(Loaders loaders, ECBehaviorPlayerControllable.Tracker tracker) \
	this("Actor", loaders, tracker)
	end
	
	/** \brief Create element class using loaders from BaseGameApp. */
	func new(String className) this(className, BaseGameApp.getApp().getLoaders(), \
	BaseGameApp.getApp().getPlayerControlledActor())
	end
	
	/** \brief Create element class. */
	func new(String className, Loaders loaders, ECBehaviorPlayerControllable.Tracker tracker) \
	super(className)
		pBehaviorTree = ECBehaviorBehaviorTree.new(this)
		
		pStateMachine = ECBehaviorStateMachine.new(this)
		pStateMachine.setBehaviorTree(pBehaviorTree)
		
		pInteractionElement = ECBehaviorInteractionElement.new(this)
		pInteractionElement.getBTSMs().addBTSM(pBehaviorTree, pStateMachine)
		
		pComponent = ECBehaviorComponent.new(this, null)
		
		// collider
		pCollider = ECBehaviorCollider.new(this, pComponent)
		
		var ECComposeCollider collider = pCollider.getCollider()
		
		var LayerMask cfcategory = LayerMask.newWith(BaseGameApp.CollisionFilterBit.actor)
		
		var LayerMask cffilter = LayerMask.new()
		cffilter.setBit(BaseGameApp.CollisionFilterBit.geometry)
		cffilter.setBit(BaseGameApp.CollisionFilterBit.dynamic)
		cffilter.setBit(BaseGameApp.CollisionFilterBit.particle)
		
		collider.setCollisionFilter(CollisionFilter.new(cfcategory, cffilter))
		collider.getPhysicsType().setEnumeration(CollisionResponse.kinematic)
		collider.getLocalGravity().setVector(Vector.new())
		
		// add behaviors
		pColliderAI = ECBehaviorColliderAI.new(this, pCollider)
		pColliderAI.getBTSMs().addBTSM(pBehaviorTree, pStateMachine)
		
		pParameterTable = ECBehaviorParameterTable.new(this)
		pParameterTable.getBTSMs().addBTSM(pBehaviorTree, pStateMachine)
		
		pProjectToGround = ECBehaviorProjectToGround.new(this, pColliderAI)
		pProjectToGround.getBTSMs().addBTSM(pBehaviorTree, pStateMachine)
		
		pLocomotion = ECBehaviorLocomotion.new(this, pColliderAI)
		pLocomotion.getBTSMs().addBTSM(pBehaviorTree, pStateMachine)
		
		pActorAnimated = ECBehaviorActorAnimated.new(this, pComponent, pLocomotion)
		pActorAnimated.setDefaultControllerMappings()
		pActorAnimated.getBTSMs().addBTSM(pBehaviorTree, pStateMachine)
		
		pConversationActor = ECBehaviorConversationActor.new(this)
		pConversationActor.setActorAnimated(pActorAnimated)
		pConversationActor.setLocomotion(pLocomotion)
		pConversationActor.setParameterTable(pParameterTable)
		pConversationActor.getBTSM().addBTSM(pBehaviorTree, pStateMachine)
		
		pCTRRBindings = ECBCTRRBindings.new(this, pConversationActor)
		
		pNavigator = ECBehaviorNavigator.new(this)
		
		pFootSteps = ECBehaviorFootSteps.new(this)
		pFootSteps.setActorAnimated(pActorAnimated)
		pFootSteps.getBTSMs().addBTSM(pBehaviorTree, pStateMachine)
		
		pRideOn = ECBehaviorRideOn.new(this, pLocomotion, pProjectToGround)
		pRideOn.getBTSMs().addBTSM(pBehaviorTree, pStateMachine)
		
		pActorMover = ECBehaviorActorMover.new(this, pLocomotion, pNavigator, pRideOn)
		pActorMover.setConversationActor(pConversationActor)
		pActorMover.getBTSMs().addBTSM(pBehaviorTree, pStateMachine)
		
		pAlignActor = ECBehaviorAlignActor.new(this, pLocomotion, pConversationActor)
		// pAlignActor.getBTSMs().addBTSM(pBehaviorTree, pStateMachine)
		
		pAvoidedByActor = ECBehaviorAvoidedByActor.new(this)
		
		pAvoidCollision = ECBehaviorAvoidCollision.new(this, pActorMover, pRideOn)
		pAvoidCollision.getBTSMs().addBTSM(pBehaviorTree, pStateMachine)
		
		pPlayerInputLook = ECBehaviorPlayerInputLook.new(this, pLocomotion)
		pPlayerInputLook.getBTSMs().addBTSM(pBehaviorTree, pStateMachine)
		
		pPlayerInputTurn = ECBehaviorPlayerInputTurn.new(this, pLocomotion)
		pPlayerInputTurn.getBTSMs().addBTSM(pBehaviorTree, pStateMachine)
		
		pPlayerInputCrouch = ECBehaviorPlayerInputCrouch.new(this, pLocomotion)
		pPlayerInputCrouch.getBTSMs().addBTSM(pBehaviorTree, pStateMachine)
		
		pPlayerInputMove = ECBehaviorPlayerInputMove.new(this, pLocomotion)
		pPlayerInputMove.getBTSMs().addBTSM(pBehaviorTree, pStateMachine)
		
		// actor can be controlled by player
		pPlayerControllable = ECBehaviorPlayerControllable.new(this, tracker)
		pPlayerControllable.setConversationActor(pConversationActor)
		pPlayerControllable.getBTSMs().addBTSM(pBehaviorTree, pStateMachine)
		
		// AI and action support
		pAIAction = ECBehaviorActorAIAction.new(this, pColliderAI,\
			pConversationActor, pPlayerControllable)
		pAIAction.getBTSMs().addBTSM(pBehaviorTree, pStateMachine)
		
		// actors are best not affecting sound nor showing up in env maps since they
		// are dynamic. still doing so is usually expensive for modules to perform. 
		var ECComposeComponent component = getComponent().getComponent()
		component.getRenderEnvMap().setValue(false)
		component.getAffectsAudio().setValue(false)
		component.getHintMovement().setEnumeration(ComponentHintMovement.dynamic)
		
		addBehaviorFactories()
	end
	
	
	
	/**
	 * \brief Behavior tree.
	 * \version 1.26
	 */
	func ECBehaviorBehaviorTree getBehaviorTree()
		return pBehaviorTree
	end
	
	/**
	 * \brief State machine.
	 * \version 1.26
	 */
	func ECBehaviorStateMachine getStateMachine()
		return pStateMachine
	end
	
	/**
	 * \brief Interact element.
	 * \version 1.26
	 */
	func ECBehaviorInteractionElement getInteractionElement()
		return pInteractionElement
	end
	
	/** \brief Component behavior. */
	func ECBehaviorComponent getComponent()
		return pComponent
	end
	
	/** \brief Collider behavior. */
	func ECBehaviorCollider getCollider()
		return pCollider
	end
	
	/** \brief Collider AI behavior. */
	func ECBehaviorColliderAI getColliderAI()
		return pColliderAI
	end
	
	/** \brief Parameter table behavior. */
	func ECBehaviorParameterTable getParameterTable()
		return pParameterTable
	end
	
	/** \brief Project to ground behavior. */
	func ECBehaviorProjectToGround getProjectToGround()
		return pProjectToGround
	end
	
	/** \brief Locomotion behavior. */
	func ECBehaviorLocomotion getLocomotion()
		return pLocomotion
	end
	
	/** \brief Actor animated behavior. */
	func ECBehaviorActorAnimated getActorAnimated()
		return pActorAnimated
	end
	
	/** \brief Navigator behavior. */
	func ECBehaviorNavigator getNavigator()
		return pNavigator
	end
	
	/** \brief Foot steps behavior. */
	func ECBehaviorFootSteps getFootSteps()
		return pFootSteps
	end
	
	/** \brief Ride on behavior. */
	func ECBehaviorRideOn getRideOn()
		return pRideOn
	end
	
	/** \brief Actor mover behavior. */
	func ECBehaviorActorMover getActorMover()
		return pActorMover
	end
	
	/** \brief Align actor behavior. */
	func ECBehaviorAlignActor getAlignActor()
		return pAlignActor
	end
	
	/** \brief Avoided by actor behavior. */
	func ECBehaviorAvoidedByActor getAvoidedByActor()
		return pAvoidedByActor
	end
	
	/** \brief Avoid collision behavior. */
	func ECBehaviorAvoidCollision getAvoidCollision()
		return pAvoidCollision
	end
	
	/** \brief Conversation actor behavior. */
	func ECBehaviorConversationActor getConversationActor()
		return pConversationActor
	end
	
	/** \brief Binding tag resolver for conversation actor behavior. */
	func ECBCTRRBindings getCTRRBindings()
		return pCTRRBindings
	end
	
	/** \brief Player input looking around behavior. */
	func ECBehaviorPlayerInputLook getPlayerInputLook()
		return pPlayerInputLook
	end
	
	/** \brief Player input turning behavior. */
	func ECBehaviorPlayerInputTurn getPlayerInputTurn()
		return pPlayerInputTurn
	end
	
	/** \brief Player input crouching behavior. */
	func ECBehaviorPlayerInputCrouch getPlayerInputCrouch()
		return pPlayerInputCrouch
	end
	
	/** \brief Player input moving behavior. */
	func ECBehaviorPlayerInputMove getPlayerInputMove()
		return pPlayerInputMove
	end
	
	/** \brief Player controllable behavior. */
	func ECBehaviorPlayerControllable getPlayerControllable()
		return pPlayerControllable
	end
	
	/** \brief AI-Action behavior. */
	func ECBehaviorActorAIAction getAIAction()
		return pAIAction
	end
	
	
	/**
	 * \brief Add behavior factories supported by this element class.
	 * 
	 * Default implementation calls \ref #addDefaultBehaviorFactories().
	 */
	func void addBehaviorFactories()
		addDefaultBehaviorFactories()
	end
	
	
	/** \brief Create copy of element class. */
	func ElementClass duplicateNamed(String classname)
		return BaseActorClass.new(classname)
	end
	
	
	/** \brief Create element instance. */
	protected func Element createElement()
		return BaseActor.new(this)
	end
end
