/* 
 * Drag[en]gine DragonScript Script Module
 *
 * Copyright (C) 2020, Roland Pl√ºss (roland@rptd.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */


namespace Dragengine.Scenery

pin Dragengine.Commands
pin Dragengine.LoadSave
pin Dragengine.Utils


/**
 * \brief Base actor action for VR first person type actors.
 * 
 * Works similar to BAAFirstPerson but looking around is handled differently since the HMD
 * is dictating the looking direction.
 * 
 * The looking direction is set from the HMD orientation. This allows other actors (NPCs or
 * online players) to see where the player is looking at without needing to examine the HMD
 * orientation and thus without needing to change existing code.
 * 
 * The body orientation is used as reference orientation for the HMD and controllers. The
 * looking around inputs are applied to the orientation directly.
 * 
 * This is a kind of crossing between BAAFirstPerson BAAVehicle.
 */
class BAAFirstPersonVR extends BAAFirstPerson
	/** \brief Factory for loading actor actions. */
	public class Factory implements PersistencyFactory, ECBehaviorActorAIAction.ActionFactory
		public static fixed var String NAME = "BAAFirstPersonVR"
		
		public func new()
		end
		
		public func Persistable readObjectFromFile(PersistencyEnvironment env, FileReader reader)
			return BAAFirstPersonVR.new()
		end
		
		public static func void registerFactory(Persistency persistency)
			persistency.addFactory(NAME, Factory.new())
		end
		
		public func BaseActorAction createAction(ECBehaviorActorAIAction.Instance instance)
			return BAAFirstPersonVR.new()
		end
	end
	
	
	
	/** \brief Player input turning behavior. */
	protected var ECBehaviorPlayerInputTurn.Instance playerInputTurn
	
	/** \brief VR Playspace behavior. */
	protected var ECBehaviorVRPlayspace.Instance vrPlayspace
	
	/** \brief VR HMD behavior. */
	protected var ECBehaviorVRHMD.Instance vrHMD
	
	/** \brief VR Right Hand Controller behavior. */
	protected var ECBehaviorVRHand.Instance vrRightHand
	
	/** \brief VR Left Hand Controller behavior. */
	protected var ECBehaviorVRHand.Instance vrLeftHand
	
	/**
	 * \brief VR Right Hand Controller Point-At behavior.
	 * \version 1.7
	 */
	protected var ECBehaviorVRHandPointAt.Instance vrRightHandPointAt
	
	/**
	 * \brief VR Left Hand Controller Point-At behavior.
	 * \version 1.7
	 */
	protected var ECBehaviorVRHandPointAt.Instance vrLeftHandPointAt
	
	/**
	 * \brief VR Right Hand Controller Laser Pointer behavior.
	 * \version 1.7
	 */
	protected var ECBehaviorVRHandLaserPointer.Instance vrRightHandLaserPointer
	
	/**
	 * \brief VR Left Hand Controller Laser Pointer behavior.
	 * \version 1.7
	 */
	protected var ECBehaviorVRHandLaserPointer.Instance vrLeftHandLaserPointer
	
	/**
	 * \brief VR Right Hand Controller Attach Slot behavior.
	 * \version 1.9
	 */
	protected var ECBehaviorAttachSlot.Instance vrRightHandAttachSlot
	
	/**
	 * \brief VR Left Hand Controller Attach Slot behavior.
	 * \version 1.9
	 */
	protected var ECBehaviorAttachSlot.Instance vrLeftHandAttachSlot
	
	/**
	 * \brief VR Right Hand Controller Grabber behavior.
	 * \version 1.9
	 */
	protected var ECBehaviorGrabber.Instance vrRightHandGrabber
	
	/**
	 * \brief VR Left Hand Controller Grabber behavior.
	 * \version 1.9
	 */
	protected var ECBehaviorGrabber.Instance vrLeftHandGrabber
	
	
	
	/** \brief Create actor action. */
	public func new()
	end
	
	
	
	/** \brief Player input turning. */
	public func ECBehaviorPlayerInputTurn.Instance getPlayerInputTurn()
		return playerInputTurn
	end
	
	/** \brief VR Playspace. */
	public func ECBehaviorVRPlayspace.Instance getVRPlayspace()
		return vrPlayspace
	end
	
	/** \brief VR HMD. */
	public func ECBehaviorVRHMD.Instance getVRHMD()
		return vrHMD
	end
	
	/** \brief VR Right Hand Controller. */
	public func ECBehaviorVRHand.Instance getVRRightHand()
		return vrRightHand
	end
	
	/** \brief VR Left Hand Controller. */
	public func ECBehaviorVRHand.Instance getVRLeftHand()
		return vrLeftHand
	end
	
	/**
	 * \brief VR Right Hand Controller Point-At.
	 */
	public func ECBehaviorVRHandPointAt.Instance getVRRightHandPointAt()
		return vrRightHandPointAt
	end
	
	/**
	 * \brief VR Left Hand Controller Point-At.
	 * \version 1.7
	 */
	public func ECBehaviorVRHandPointAt.Instance getVRLeftHandPointAt()
		return vrLeftHandPointAt
	end
	
	/**
	 * \brief VR Right Hand Controller Laser Pointer.
	 * \version 1.7
	 */
	public func ECBehaviorVRHandLaserPointer.Instance getVRRightHandLaserPointer()
		return vrRightHandLaserPointer
	end
	
	/**
	 * \brief VR Left Hand Controller Laser Pointer.
	 * \version 1.7
	 */
	public func ECBehaviorVRHandLaserPointer.Instance getVRLeftHandLaserPointer()
		return vrLeftHandLaserPointer
	end
	
	/**
	 * \brief VR Right Hand Controller Attach Slot.
	 * \version 1.9
	 */
	public func ECBehaviorAttachSlot.Instance getVRRightHandAttachSlot()
		return vrRightHandAttachSlot
	end
	
	/**
	 * \brief VR Left Hand Controller Attach Slot.
	 * \version 1.9
	 */
	public func ECBehaviorAttachSlot.Instance getVRLeftHandAttachSlot()
		return vrLeftHandAttachSlot
	end
	
	/**
	 * \brief VR Right Hand Controller Grabber.
	 * \version 1.9
	 */
	public func ECBehaviorGrabber.Instance getVRRightHandGrabber()
		return vrRightHandGrabber
	end
	
	/**
	 * \brief VR Left Hand Controller Grabber.
	 * \version 1.9
	 */
	public func ECBehaviorGrabber.Instance getVRLeftHandGrabber()
		return vrLeftHandGrabber
	end
	
	
	
	/** \brief Start looking up. */
	public func void lookUpStart()
	end
	
	/** \brief Stop looking up. */
	public func void lookUpStop()
	end
	
	/** \brief Start looking down. */
	public func void lookDownStart()
	end
	
	/** \brief Stop looking down. */
	public func void lookDownStop()
	end
	
	/** \brief Analog looking up/down. */
	public func void analogLookUD(float amount, bool sticky)
	end
	
	
	
	/** \brief Start crouching. */
	public func void crouchStart()
	end
	
	/** \brief Stop crouching. */
	public func void crouchStop()
	end
	
	/** \brief Toggle crouching. */
	public func void crouchToggle()
	end
	
	
	
	/**
	 * \brief Init behaviors.
	 * 
	 * Retrieve and store required and optional behavior instances from the actor element.
	 */
	protected func void initBehaviors()
		super.initBehaviors()
		
		if actor castable BaseActor
			playerInputTurn = (actor cast BaseActor).getPlayerInputTurn()
			
		else
			playerInputTurn = ECBehaviorPlayerInputTurn.getInstanceIn(actor)
		end
		
		if actor castable BaseVRActor
			var BaseVRActor vrActor = actor cast BaseVRActor
			vrPlayspace = vrActor.getVRPlayspace()
			vrHMD = vrActor.getVRHMD()
			vrRightHand = vrActor.getVRRightHand()
			vrLeftHand = vrActor.getVRLeftHand()
			vrRightHandPointAt = vrActor.getVRRightHandPointAt()
			vrLeftHandPointAt = vrActor.getVRLeftHandPointAt()
			vrRightHandLaserPointer = vrActor.getVRRightHandLaserPointer()
			vrLeftHandLaserPointer = vrActor.getVRLeftHandLaserPointer()
			vrRightHandAttachSlot = vrActor.getVRRightHandAttachSlot()
			vrLeftHandAttachSlot = vrActor.getVRLeftHandAttachSlot()
			vrRightHandGrabber = vrActor.getVRRightHandGrabber()
			vrLeftHandGrabber = vrActor.getVRLeftHandGrabber()
			
		else
			vrPlayspace = ECBehaviorVRPlayspace.getInstanceIn(actor)
			vrHMD = ECBehaviorVRHMD.getInstanceIn(actor)
			vrRightHand = ECBehaviorVRHand.getInstanceIn(actor, "right")
			vrLeftHand = ECBehaviorVRHand.getInstanceIn(actor, "left")
			vrRightHandPointAt = ECBehaviorVRHandPointAt.getInstanceIn(actor, "right")
			vrLeftHandPointAt = ECBehaviorVRHandPointAt.getInstanceIn(actor, "left")
			vrRightHandLaserPointer = ECBehaviorVRHandLaserPointer.getInstanceIn(actor, "right")
			vrLeftHandLaserPointer = ECBehaviorVRHandLaserPointer.getInstanceIn(actor, "left")
			vrRightHandAttachSlot = ECBehaviorAttachSlot.getInstanceIn(actor, "vrHandRight")
			vrLeftHandAttachSlot = ECBehaviorAttachSlot.getInstanceIn(actor, "vrHandLeft")
			vrRightHandGrabber = ECBehaviorGrabber.getInstanceIn(actor, "vrHandRight")
			vrLeftHandGrabber = ECBehaviorGrabber.getInstanceIn(actor, "vrHandLeft")
		end
	end
	
	/**
	 * Init player input.
	 */
	protected func void initPlayerInput()
		playerInputMove.setLocomotionType(ECBehaviorPlayerInputMove.LocomotionType.fps)
		playerInputCrouch.setCanCrouch(false)
	end
	
	/**
	 * \brief Initialize locomotion.
	 * 
	 * See ECBehaviorLocomotion.initHuman().
	 */
	protected func void initLocomotion()
		locomotion.initHuman(playerInputMove.getSpeedWalk())
		
		// Since we use ECBehaviorPlayerInputMove.LocomotionType.fps we should disable
		// turn-in-place support. The two settings are not inherently incompatible but
		// but for FPS locomotion use turning in-place can produce some funky results
		locomotion.getLocomotion().setCanTurnInPlace(false)
	end
	
	/**
	 * \brief Initialize locomotion if player controls this actor.
	 * 
	 * Applies these changes to parameters:
	 * - Looking adjust times: 0
	 * - Orientation adjust times: 1
	 * - Linear velocity adjust time: 1
	 * 
	 * The orientation adjust time is important. Too small value cause abrupt changes of
	 * angular velocity which can lead to vertigo on the player. Larger values create
	 * smoother angular velocity changes which are easier to sustain.
	 * 
	 * The same applies to linear velocity adjustment time.
	 */
	protected func void initLocomotionPlayer()
		var Locomotion l = locomotion.getLocomotion()
		l.setAdjustTimeVertical(0)
		l.setAdjustTimeHorizontal(0)
		l.setAdjustTimeOrientation(1)
		l.setAdjustTimeLinearVelocity(1)
	end
	
	/**
	 * \brief Update locomotion.
	 * 
	 * In addition to super class implementation force body orientation.
	 */
	protected func void playerUpdateLocomotion(float elapsed)
		if actorMover.hasGoal()
			return
		end
		
		playerInputCrouch.updateLocomotion(elapsed)
		playerInputMove.updateLocomotion(elapsed)
	end
	
	
	
	/**
	 * \brief Name of PersistencyFactory required to load object from file.
	 * 
	 * Name of PersistencyFactory is first written to the file as string with
	 * 8-bit length. Then writeToFile() is called to write the object itself.
	 * Empty name is not allowed as is names longer than 255 characters.
	 * Name has to match a PersistencyFactory present in the Persistency
	 * instance used for loading objects. Object is read using
	 * PersistencyFactory.readObjectFromFile() of the matching PersistencyFactory.
	 */
	public func String persistencyFactoryName()
		return Factory.NAME
	end
end
