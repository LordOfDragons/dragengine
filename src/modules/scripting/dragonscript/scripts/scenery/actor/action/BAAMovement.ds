/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */


namespace Dragengine.Scenery


/**
 * \brief Interface for movement support with base actor actions.
 * 
 * Interface is supported by child classes of CommandsBAAMovement. BAAFirstPerson and
 * BAAVehicle provide implementations for this interface for actions based on
 * first person or vehicle behavior.
 */
interface BAAMovement
	/** \brief Start moving forward. */
	func void moveForwardStart()
	
	/** \brief Stop moving forward. */
	func void moveForwardStop()
	
	/** \brief Start moving backward. */
	func void moveBackwardStart()
	
	/** \brief Stop moving backward. */
	func void moveBackwardStop()
	
	/** \brief Start moving left. */
	func void moveLeftStart()
	
	/** \brief Stop moving left. */
	func void moveLeftStop()
	
	/** \brief Start moving right. */
	func void moveRightStart()
	
	/** \brief Stop moving right. */
	func void moveRightStop()
	
	
	
	/** \brief Start looking left. */
	func void lookLeftStart()
	
	/** \brief Stop looking left. */
	func void lookLeftStop()
	
	/** \brief Start looking right. */
	func void lookRightStart()
	
	/** \brief Stop looking right. */
	func void lookRightStop()
	
	/** \brief Start looking up. */
	func void lookUpStart()
	
	/** \brief Stop looking up. */
	func void lookUpStop()
	
	/** \brief Start looking down. */
	func void lookDownStart()
	
	/** \brief Stop looking down. */
	func void lookDownStop()
	
	
	
	/** \brief Analog moving forward/backward. */
	func void analogMoveFB( float amount, bool sticky )
	
	/** \brief Analog moving left/right. */
	func void analogMoveLR( float amount, bool sticky )
	
	/** \brief Analog looking left/right. */
	func void analogLookLR( float amount, bool sticky )
	
	/** \brief Analog looking up/down. */
	func void analogLookUD( float amount, bool sticky )
	
	
	
	/** \brief Start crouching. */
	func void crouchStart()
	
	/** \brief Stop crouching. */
	func void crouchStop()
	
	/** \brief Toggle crouching. */
	func void crouchToggle()
	
	/** \brief Start running. */
	func void runStart()
	
	/** \brief Stop running. */
	func void runStop()
	
	/** \brief Toggle running. */
	func void runToggle()
end
