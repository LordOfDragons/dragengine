/* 
 * Drag[en]gine DragonScript Script Module
 *
 * Copyright (C) 2020, Roland Pl√ºss (roland@rptd.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */


namespace Dragengine.Scenery

pin Dragengine.LoadSave
pin Dragengine.Utils


/**
 * \brief Base actor action for first person type actors.
 * 
 * This class adds movement support to the basic actor action. The movement can be manipulated
 * by the player through input bindings. The supported movement is similar to first person
 * oriented actor control with 8-way movement and looking around. This serves as a basis for
 * adding interaction support ontop of movement support.
 * 
 * All binding called methods store the activated state in the PlayerInput* assigned to
 * the actor. This allows both AI and bindings to control the actor movement with one code.
 * 
 * The move* methods are activated by pressing keys or buttons. They move the actor into one
 * of 8 possible directions in 45 degree steps around the actor.
 * 
 * The look* methods are activated by pressing keys or buttons. They adjust the looking
 * direction of the actor. Depending on the settings of the player input tracker and locomotion
 * assigned to the actor the looking around of the actor is applied to the actor orientation.
 * 
 * The analog* methods are activated by moving mouse or gamepad axes. They are the analog
 * counterpart of the respective move* or look* methods discussed above.
 * 
 * All move*, look* and analog* methods modify only the PlayerInput assigned to
 * the actor. During think() the desired input is applied to the Locomotion assigned to the
 * actor. The result is then applied to the actor as the movement for this frame update.
 * 
 * This class provides sliding collision handling. This kind of collision handling works
 * well in various situations.
 */
class BAAFirstPerson extends BaseActorAction implements BAAMovement
	/** \brief Factory for loading actor actions. */
	public class Factory implements PersistencyFactory, ECBehaviorActorAIAction.ActionFactory
		public static fixed var String NAME = "BAAFirstPerson"
		
		public func new()
		end
		
		public func Persistable readObjectFromFile( PersistencyEnvironment env, FileReader reader )
			return BAAFirstPerson.new()
		end
		
		public static func void registerFactory( Persistency persistency )
			persistency.addFactory( NAME, Factory.new() )
		end
		
		public func BaseActorAction createAction( ECBehaviorActorAIAction.Instance instance )
			return BAAFirstPerson.new()
		end
	end
	
	
	
	/**
	 * \brief Property update actor geometry on collider changed.
	 * 
	 * For performance reasons updating the actor geometry not done during colliderChanged()
	 * but during postThink() when project to ground has been done. Between postThink() and
	 * the next elementThink() actor geometry has to be updated or the actor element matrix
	 * is out of sync when AI operates on it. This parameter is used to keep track of this.
	 */
	protected var bool moveIfColliderChanged
	
	
	
	private var float pLandingAngle
	
	/** \brief Collider AI Behavior. */
	protected var ECBehaviorColliderAI.Instance colliderAI
	
	/** \brief Player input looking around behavior. */
	protected var ECBehaviorPlayerInputLook.Instance playerInputLook
	
	/** \brief Player input crouching behavior. */
	protected var ECBehaviorPlayerInputCrouch.Instance playerInputCrouch
	
	/** \brief Player input moving behavior. */
	protected var ECBehaviorPlayerInputMove.Instance playerInputMove
	
	/** \brief Project to ground behavior. */
	protected var ECBehaviorProjectToGround.Instance projectToGround
	
	/** \brief Foot steps behavior. */
	protected var ECBehaviorFootSteps.Instance footSteps
	
	/** \brief Actor mover behavior. */
	protected var ECBehaviorActorMover.Instance actorMover
	
	
	
	/** \brief Create actor action. */
	public func new()
		this.moveIfColliderChanged = true
		this.pLandingAngle = 120
	end
	
	
	
	/** \brief Angle in degrees between falling direction and ground normal to land. */
	public func float getLandingAngle()
		return this.pLandingAngle
	end
	
	/** \brief Set angle in degrees between falling direction and ground normal to land. */
	public func void setLandingAngle( float angle )
		this.pLandingAngle = DEMath.clamp( angle, 0.0, 180.0 )
	end
	
	/** \brief Collider AI behavior. */
	public func ECBehaviorColliderAI.Instance getColliderAI()
		return this.colliderAI
	end
	
	/** \brief Player input looking around behavior. */
	public func ECBehaviorPlayerInputLook.Instance getPlayerInputLook()
		return this.playerInputLook
	end
	
	/** \brief Player input moving behavior. */
	public func ECBehaviorPlayerInputMove.Instance getPlayerInputMove()
		return this.playerInputMove
	end
	
	/** \brief Player input crouching behavior. */
	public func ECBehaviorPlayerInputCrouch.Instance getPlayerInputCrouch()
		return this.playerInputCrouch
	end
	
	/** \brief Project to ground behavior. */
	public func ECBehaviorProjectToGround.Instance getProjectToGround()
		return this.projectToGround
	end
	
	/** \brief Foot steps behavior. */
	public func ECBehaviorFootSteps.Instance getFootSteps()
		return this.footSteps
	end
	
	/** \brief Actor mover behavior. */
	public func ECBehaviorActorMover.Instance getActorMover()
		return this.actorMover
	end
	
	
	
	/**
	 * \brief Action has been set as active action in an actor.
	 * 
	 * Calls these hook methods in addition to BaseActorAction.activate():
	 * - initPlayerInput()
	 * - initLocomotion()
	 * - initLocomotionPlayer()  if player controls this actor only
	 */
	public func void activate( BehaviorElement actor )
		super.activate( actor )
		
		this.initPlayerInput()
		this.initLocomotion()
		
		if this.isControlledByPlayer() 
			this.initLocomotionPlayer()
		end
	end
	
	/**
	 * \brief Player takes control of actor.
	 * 
	 * Calls these hook methods:
	 * - initPlayerInput()
	 * - initLocomotion()
	 * - initLocomotionPlayer()
	 */
	public func void playerTakesControl()
		this.initPlayerInput()
		this.initLocomotion()
		this.initLocomotionPlayer()
	end
	
	/**
	 * \brief Player released control of actor.
	 * 
	 * Calls these hook methods:
	 * - initPlayerInput()
	 * - initLocomotion()
	 */
	public func void playerReleasesControl()
		this.initPlayerInput()
		this.initLocomotion()
	end
	
	/**
	 * \brief Thinking.
	 * 
	 * Default implementation does these actions in this order:
	 * - playerThink() if player is controlling this actor
	 * - convoActor.updateBeforeLocomotion() if present
	 * - updateLocomotion()
	 * - updateAICollider()
	 * - updateAnimator()
	 * - animatorInstance.apply()
	 * - convoActor.updateAfterLocomotion() if present
	 */
	public func void think( float elapsed )
		this.moveIfColliderChanged = false
		super.think( elapsed )
	end
	
	/**
	 * \brief Post physics.
	 * 
	 * Actor position is updated by ECBehaviorProjectToGround if present in the actor.
	 * Otherwise updates the actor element position and orientation from AI collider.
	 * 
	 * Default implementation does these actions in this order:
	 * - Update position and orientation if not using ECBehaviorProjectToGround
	 * - updateLocomotionPost()
	 */
	public func void postThink( float elapsed )
		if this.projectToGround == null
			this.colliderAI.setGeometryFromCollider()
		end
		
		this.updateLocomotionPost( elapsed )
		
		this.moveIfColliderChanged = true
	end
	
	
	
	/** \brief Start moving forward. */
	public func void moveForwardStart()
		this.playerInputMove.setMoveForward( true )
	end
	
	/** \brief Stop moving forward. */
	public func void moveForwardStop()
		this.playerInputMove.setMoveForward( false )
	end
	
	/** \brief Start moving backward. */
	public func void moveBackwardStart()
		this.playerInputMove.setMoveBackward( true )
	end
	
	/** \brief Stop moving backward. */
	public func void moveBackwardStop()
		this.playerInputMove.setMoveBackward( false )
	end
	
	/** \brief Start moving left. */
	public func void moveLeftStart()
		this.playerInputMove.setMoveLeft( true )
	end
	
	/** \brief Stop moving left. */
	public func void moveLeftStop()
		this.playerInputMove.setMoveLeft( false )
	end
	
	/** \brief Start moving right. */
	public func void moveRightStart()
		this.playerInputMove.setMoveRight( true )
	end
	
	/** \brief Stop moving right. */
	public func void moveRightStop()
		this.playerInputMove.setMoveRight( false )
	end
	
	/** \brief Analog moving forward/backward. */
	public func void analogMoveFB( float amount, bool sticky )
		if sticky
			this.playerInputMove.setAnalogMoveForwardBackwardSticky( amount )
			
		else
			this.playerInputMove.setAnalogMoveForwardBackward( -amount )
		end
	end
	
	/** \brief Analog moving left/right. */
	public func void analogMoveLR( float amount, bool sticky )
		if sticky
			this.playerInputMove.setAnalogMoveLeftRightSticky( amount )
			
		else
			this.playerInputMove.setAnalogMoveLeftRight( amount )
		end
	end
	
	/** \brief Start running. */
	public func void runStart()
		this.playerInputMove.setRun( true )
	end
	
	/** \brief Stop running. */
	public func void runStop()
		this.playerInputMove.setRun( false )
	end
	
	/** \brief Toggle running. */
	public func void runToggle()
		this.playerInputMove.toggleRun()
	end
	
	
	
	/** \brief Start looking left. */
	public func void lookLeftStart()
		this.playerInputLook.setLookLeft( true )
	end
	
	/** \brief Stop looking left. */
	public func void lookLeftStop()
		this.playerInputLook.setLookLeft( false )
	end
	
	/** \brief Start looking right. */
	public func void lookRightStart()
		this.playerInputLook.setLookRight( true )
	end
	
	/** \brief Stop looking right. */
	public func void lookRightStop()
		this.playerInputLook.setLookRight( false )
	end
	
	/** \brief Start looking up. */
	public func void lookUpStart()
		this.playerInputLook.setLookUp( true )
	end
	
	/** \brief Stop looking up. */
	public func void lookUpStop()
		this.playerInputLook.setLookUp( false )
	end
	
	/** \brief Start looking down. */
	public func void lookDownStart()
		this.playerInputLook.setLookDown( true )
	end
	
	/** \brief Stop looking down. */
	public func void lookDownStop()
		this.playerInputLook.setLookDown( false )
	end
	
	/** \brief Analog looking left/right. */
	public func void analogLookLR( float amount, bool sticky )
		if sticky
			this.playerInputLook.setAnalogLookHorizontalSticky( -amount )
			
		else
			this.playerInputLook.setAnalogLookHorizontal( -amount )
		end
	end
	
	/** \brief Analog looking up/down. */
	public func void analogLookUD( float amount, bool sticky )
		if sticky
			this.playerInputLook.setAnalogLookVerticalSticky( amount )
			
		else
			this.playerInputLook.setAnalogLookVertical( -amount )
		end
	end
	
	
	
	/** \brief Start crouching. */
	public func void crouchStart()
		this.playerInputCrouch.setCrouch( true )
	end
	
	/** \brief Stop crouching. */
	public func void crouchStop()
		this.playerInputCrouch.setCrouch( true )
	end
	
	/** \brief Toggle crouching. */
	public func void crouchToggle()
		this.playerInputCrouch.toggleCrouch()
	end
	
	
	
	/**
	 * \brief Init behaviors.
	 * 
	 * Retrieve and store required and optional behavior instances from the actor element.
	 */
	protected func void initBehaviors()
		super.initBehaviors()
		
		if actor castable BaseActor
			var BaseActor baseActor = actor cast BaseActor
			this.colliderAI = baseActor.getColliderAI()
			this.projectToGround = baseActor.getProjectToGround()
			this.footSteps = baseActor.getFootSteps()
			this.actorMover = baseActor.getActorMover()
			this.playerInputLook = baseActor.getPlayerInputLook()
			this.playerInputCrouch = baseActor.getPlayerInputCrouch()
			this.playerInputMove = baseActor.getPlayerInputMove()
			
		else
			this.colliderAI = ECBehaviorColliderAI.getInstanceIn( actor )
			this.projectToGround = ECBehaviorProjectToGround.getInstanceIn( actor )
			this.footSteps = ECBehaviorFootSteps.getInstanceIn( actor )
			this.actorMover = ECBehaviorActorMover.getInstanceIn( actor )
			this.playerInputLook = ECBehaviorPlayerInputLook.getInstanceIn( actor )
			this.playerInputCrouch = ECBehaviorPlayerInputCrouch.getInstanceIn( actor )
			this.playerInputMove = ECBehaviorPlayerInputMove.getInstanceIn( actor )
		end
	end
	
	/**
	 * \brief Initialize player input tracker.
	 * 
	 * Sets ECBehaviorPlayerInputMove to LocomotionType.natural .
	 */
	protected func void initPlayerInput()
		this.playerInputMove.setLocomotionType( ECBehaviorPlayerInputMove.LocomotionType.natural )
	end
	
	/**
	 * \brief Initialize locomotion.
	 * 
	 * See ECBehaviorLocomotion.initHuman().
	 * 
	 * Sets these initial parameters:
	 * - Can turn: yes
	 * - Can turn in-place: yes
	 * - Linear velocity adjust range: ECBehaviorPlayerInputMove.getSpeedWalk()
	 * - Linear velocity adjust time: 1
	 * - Moving left right adjust time: 0
	 * - Looking limits: -80..80 (up-down) and -90..90 (left-right)
	 * - Looking adjust times: 1
	 * - Orientation adjust time: 1
	 * - Turn adjust look left-right: yes
	 * - Turn in-place limit: -70..70
	 * - Turn in-place adjust time: 1
	 */
	protected func void initLocomotion()
		locomotion.initHuman( this.playerInputMove.getSpeedWalk() )
	end
	
	/**
	 * \brief Initialize locomotion if player controls this actor.
	 * 
	 * Called in addition to (and after) initLocomotion() to apply changes which affect only
	 * the player. Typically this makes turning and looking direct in contrary to non-player
	 * actors where having a delay makes them behave smoother.
	 * 
	 * Applies these changes to parameters:
	 * - Looking adjust times: 0
	 * - Linear velocity adjust time: 0.5
	 */
	protected func void initLocomotionPlayer()
		var Locomotion l = locomotion.getLocomotion()
		l.setAdjustTimeVertical( 0 )
		l.setAdjustTimeHorizontal( 0 )
		l.setAdjustTimeLinearVelocity( 0.5 )
	end
	
	
	
	/**
	 * \brief Apply turning and looking around.
	 * 
	 * Called for player controlled actors only. If ECBehaviorActorMover has a goal set
	 * does nothing to not interfere.
	 */
	protected func void doTurnLook( float elapsed )
		if this.actorMover.hasGoal()
			return
		end
		
		var float deltaHorizontal = this.playerInputLook.calculateLookHorizontal( elapsed )
		var float deltaVertical = this.playerInputLook.calculateLookVertical( elapsed )
		
		if BaseGameApp.getApp() != null and BaseGameApp.getApp().getInverseLookVertical()
			deltaVertical = -deltaVertical
		end
		
		this.applyLookAroundChanges( deltaHorizontal, deltaVertical )
	end
	
	/**
	 * \brief Apply looking around changes.
	 * 
	 * Called for player controlled actors only.
	 */
	protected func void applyLookAroundChanges( float deltaHorizontal, float deltaVertical )
		locomotion.applyLookAround( deltaHorizontal, deltaVertical )
	end
	
	/**
	 * \brief Update locomotion.
	 */
	protected func void updateLocomotion( float elapsed )
		locomotion.update( elapsed )
	end
	
	/**
	 * \brief Post-Update locomotion.
	 */
	protected func void updateLocomotionPost( float elapsed )
		locomotion.updatePost( elapsed )
	end
	
	/**
	 * \brief Update collider.
	 * 
	 * Sets orientation and linear velocity from locomotion if actor is touching ground.
	 * If not touching ground earth type gravitation is applied.
	 * 
	 * Actor is considered not touching ground if ProjectToGround has not found a ground
	 * collider during the last postThink() call.
	 */
	protected func void updateAICollider( float elapsed )
		if this.projectToGround == null or this.projectToGround.getTouchesGround()
			this.colliderAI.setFromLocomotion( locomotion )
			
		else
			this.colliderAI.applyGravity( elapsed )
			this.colliderAI.stopTurning()
		end
	end
	
	/**
	 * \brief Free falling actor is landing.
	 * 
	 * Called during collisionResponse() to check if the actor has to switch from free
	 * falling to moving on ground again.
	 * 
	 * Default implementation returns \em true if the angle between the falling direction
	 * and the ground hit normal is larger than the landing angle.
	 */
	protected func bool doesActorLand( Collider owner, CollisionInfo info )
		return this.projectToGround.getDirection().normalize() \
			* info.getNormal() < DEMath.cos( this.pLandingAngle )
	end
	
	
	
	/**
	 * \brief Thinking for player controlled actor only.
	 * 
	 * Calls these hook methods:
	 * - doTurnLook()
	 * - playerUpdateLocomotion()
	 */
	public func void playerThink( float elapsed )
		this.doTurnLook( elapsed )
		this.playerUpdateLocomotion( elapsed )
	end
	
	/**
	 * \brief Update locomotion.
	 * 
	 * If ECBehaviorActorMover has a goal set does nothing to not interfere.
	 */
	protected func void playerUpdateLocomotion( float elapsed )
		if this.actorMover.hasGoal()
			return
		end
		
		this.playerInputCrouch.updateLocomotion( elapsed )
		this.playerInputMove.updateLocomotion( elapsed )
	end
	
	
	
	/**
	 * \brief Collision detected.
	 * 
	 * If actor is touching ground applies sliding collision response. Otherwise checks if
	 * actor impacts with the ground at opposite direction than the project to ground test
	 * direction enable projecting to ground again.
	 */
	public func void collisionResponse( Collider owner, CollisionInfo info )
		if this.projectToGround == null or this.projectToGround.getTouchesGround()
			var Vector velocity = owner.getLinearVelocity()
			var Vector normal = info.getNormal()
			owner.setLinearVelocity( velocity - normal * ( normal * velocity ) )
			
		else
			this.projectToGround.setTouchesGround( this.doesActorLand( owner, info ) )
		end
	end
	
	/**
	 * \brief Two colliders can hit each other.
	 * 
	 * Returns always \em true.
	 */
	public func bool canHitCollider( Collider owner, Collider collider )
		return true
	end
	
	/**
	 * \brief Collider changed.
	 */
	public func void colliderChanged( Collider owner )
		// update actor geometry if between postThink() and next elementThink().
		if this.moveIfColliderChanged
			actor.setGeometry( owner.getPosition(), owner.getOrientation() )
		end
	end
	
	
	
	/**
	 * \brief Name of PersistencyFactory required to load object from file.
	 * 
	 * Name of PersistencyFactory is first written to the file as string with
	 * 8-bit length. Then writeToFile() is called to write the object itself.
	 * Empty name is not allowed as is names longer than 255 characters.
	 * Name has to match a PersistencyFactory present in the Persistency
	 * instance used for loading objects. Object is read using
	 * PersistencyFactory.readObjectFromFile() of the matching PersistencyFactory.
	 */
	public func String persistencyFactoryName()
		return Factory.NAME
	end
end
