/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */


namespace Dragengine.Scenery

pin Dragengine.LoadSave
pin Dragengine.Utils


/**
 * \brief Base actor action for first person type actors.
 * 
 * This class adds movement support to the basic actor action. The movement can be manipulated
 * by the player through input bindings. The supported movement is similar to first person
 * oriented actor control with 8-way movement and looking around. This serves as a basis for
 * adding interaction support ontop of movement support.
 * 
 * All binding called methods store the activated state in the PlayerInput* assigned to
 * the actor. This allows both AI and bindings to control the actor movement with one code.
 * 
 * The move* methods are activated by pressing keys or buttons. They move the actor into one
 * of 8 possible directions in 45 degree steps around the actor.
 * 
 * The look* methods are activated by pressing keys or buttons. They adjust the looking
 * direction of the actor. Depending on the settings of the player input tracker and locomotion
 * assigned to the actor the looking around of the actor is applied to the actor orientation.
 * 
 * The analog* methods are activated by moving mouse or gamepad axes. They are the analog
 * counterpart of the respective move* or look* methods discussed above.
 * 
 * All move*, look* and analog* methods modify only the PlayerInput assigned to
 * the actor. During think() the desired input is applied to the Locomotion assigned to the
 * actor. The result is then applied to the actor as the movement for this frame update.
 * 
 * This class provides sliding collision handling. This kind of collision handling works
 * well in various situations.
 */
class BAAFirstPerson extends BaseActorAction implements BAAMovement
	/** \brief Factory for loading actor actions. */
	public class Factory implements PersistencyFactory, ECBehaviorActorAIAction.ActionFactory
		public static fixed var String NAME = "BAAFirstPerson"
		
		func new()
		end
		
		func Persistable readObjectFromFile(PersistencyEnvironment env, FileReader reader)
			return BAAFirstPerson.new()
		end
		
		public static func void registerFactory(Persistency persistency)
			persistency.addFactory(NAME, Factory.new())
		end
		
		func BaseActorAction createAction(ECBehaviorActorAIAction.Instance instance)
			return BAAFirstPerson.new()
		end
	end
	
	
	
	/**
	 * \brief Property update actor geometry on collider changed.
	 * 
	 * For performance reasons updating the actor geometry not done during colliderChanged()
	 * but during postThink() when project to ground has been done. Between postThink() and
	 * the next elementThink() actor geometry has to be updated or the actor element matrix
	 * is out of sync when AI operates on it. This parameter is used to keep track of 
	 */
	protected var bool moveIfColliderChanged
	
	
	
	var float pLandingAngle
	
	/** \brief Collider AI Behavior. */
	protected var ECBehaviorColliderAI.Instance colliderAI
	
	/** \brief Player input looking around behavior. */
	protected var ECBehaviorPlayerInputLook.Instance playerInputLook
	
	/** \brief Player input crouching behavior. */
	protected var ECBehaviorPlayerInputCrouch.Instance playerInputCrouch
	
	/** \brief Player input moving behavior. */
	protected var ECBehaviorPlayerInputMove.Instance playerInputMove
	
	/** \brief Project to ground behavior. */
	protected var ECBehaviorProjectToGround.Instance projectToGround
	
	/** \brief Foot steps behavior. */
	protected var ECBehaviorFootSteps.Instance footSteps
	
	/** \brief Actor mover behavior. */
	protected var ECBehaviorActorMover.Instance actorMover
	
	
	
	/** \brief Create actor action. */
	func new()
		moveIfColliderChanged = true
		pLandingAngle = 120
	end
	
	
	
	/** \brief Angle in degrees between falling direction and ground normal to land. */
	func float getLandingAngle()
		return pLandingAngle
	end
	
	/** \brief Set angle in degrees between falling direction and ground normal to land. */
	func void setLandingAngle(float angle)
		pLandingAngle = DEMath.clamp(angle, 0.0, 180.0)
	end
	
	/** \brief Collider AI behavior. */
	func ECBehaviorColliderAI.Instance getColliderAI()
		return colliderAI
	end
	
	/** \brief Player input looking around behavior. */
	func ECBehaviorPlayerInputLook.Instance getPlayerInputLook()
		return playerInputLook
	end
	
	/** \brief Player input moving behavior. */
	func ECBehaviorPlayerInputMove.Instance getPlayerInputMove()
		return playerInputMove
	end
	
	/** \brief Player input crouching behavior. */
	func ECBehaviorPlayerInputCrouch.Instance getPlayerInputCrouch()
		return playerInputCrouch
	end
	
	/** \brief Project to ground behavior. */
	func ECBehaviorProjectToGround.Instance getProjectToGround()
		return projectToGround
	end
	
	/** \brief Foot steps behavior. */
	func ECBehaviorFootSteps.Instance getFootSteps()
		return footSteps
	end
	
	/** \brief Actor mover behavior. */
	func ECBehaviorActorMover.Instance getActorMover()
		return actorMover
	end
	
	
	
	/**
	 * \brief Action has been set as active action in an actor.
	 * 
	 * Calls these hook methods in addition to BaseActorAction.activate():
	 * - initPlayerInput()
	 * - initLocomotion()
	 * - initLocomotionPlayer()  if player controls this actor only
	 */
	func void activate(BehaviorElement actor)
		super.activate(actor)
		
		initPlayerInput()
		initLocomotion()
		
		if isControlledByPlayer() 
			initLocomotionPlayer()
		end
	end
	
	/**
	 * \brief Player takes control of actor.
	 * 
	 * Calls these hook methods:
	 * - initPlayerInput()
	 * - initLocomotion()
	 * - initLocomotionPlayer()
	 */
	func void playerTakesControl()
		initPlayerInput()
		initLocomotion()
		initLocomotionPlayer()
	end
	
	/**
	 * \brief Player released control of actor.
	 * 
	 * Calls these hook methods:
	 * - initPlayerInput()
	 * - initLocomotion()
	 */
	func void playerReleasesControl()
		initPlayerInput()
		initLocomotion()
	end
	
	/**
	 * \brief Thinking.
	 * 
	 * Default implementation does these actions in this order:
	 * - playerThink() if player is controlling this actor
	 * - convoActor.updateBeforeLocomotion() if present
	 * - updateLocomotion()
	 * - updateAICollider()
	 * - updateAnimator()
	 * - animatorInstance.apply()
	 * - convoActor.updateAfterLocomotion() if present
	 */
	func void think(float elapsed)
		moveIfColliderChanged = false
		super.think(elapsed)
	end
	
	/**
	 * \brief Post physics.
	 * 
	 * Actor position is updated by ECBehaviorProjectToGround if present in the actor.
	 * Otherwise updates the actor element position and orientation from AI collider.
	 * 
	 * Default implementation does these actions in this order:
	 * - Update position and orientation if not using ECBehaviorProjectToGround
	 * - updateLocomotionPost()
	 */
	func void postThink(float elapsed)
		if projectToGround == null
			colliderAI.setGeometryFromCollider()
		end
		
		updateLocomotionPost(elapsed)
		
		moveIfColliderChanged = true
	end
	
	
	
	/** \brief Start moving forward. */
	func void moveForwardStart()
		playerInputMove.setMoveForward(true)
	end
	
	/** \brief Stop moving forward. */
	func void moveForwardStop()
		playerInputMove.setMoveForward(false)
	end
	
	/** \brief Start moving backward. */
	func void moveBackwardStart()
		playerInputMove.setMoveBackward(true)
	end
	
	/** \brief Stop moving backward. */
	func void moveBackwardStop()
		playerInputMove.setMoveBackward(false)
	end
	
	/** \brief Start moving left. */
	func void moveLeftStart()
		playerInputMove.setMoveLeft(true)
	end
	
	/** \brief Stop moving left. */
	func void moveLeftStop()
		playerInputMove.setMoveLeft(false)
	end
	
	/** \brief Start moving right. */
	func void moveRightStart()
		playerInputMove.setMoveRight(true)
	end
	
	/** \brief Stop moving right. */
	func void moveRightStop()
		playerInputMove.setMoveRight(false)
	end
	
	/** \brief Analog moving forward/backward. */
	func void analogMoveFB(float amount, bool sticky)
		if sticky
			playerInputMove.setAnalogMoveForwardBackwardSticky(-amount)
			
		else
			playerInputMove.setAnalogMoveForwardBackward(-amount)
		end
	end
	
	/** \brief Analog moving left/right. */
	func void analogMoveLR(float amount, bool sticky)
		if sticky
			playerInputMove.setAnalogMoveLeftRightSticky(amount)
			
		else
			playerInputMove.setAnalogMoveLeftRight(amount)
		end
	end
	
	/** \brief Start running. */
	func void runStart()
		playerInputMove.setRun(true)
	end
	
	/** \brief Stop running. */
	func void runStop()
		playerInputMove.setRun(false)
	end
	
	/** \brief Toggle running. */
	func void runToggle()
		playerInputMove.toggleRun()
	end
	
	
	
	/** \brief Start looking left. */
	func void lookLeftStart()
		playerInputLook.setLookLeft(true)
	end
	
	/** \brief Stop looking left. */
	func void lookLeftStop()
		playerInputLook.setLookLeft(false)
	end
	
	/** \brief Start looking right. */
	func void lookRightStart()
		playerInputLook.setLookRight(true)
	end
	
	/** \brief Stop looking right. */
	func void lookRightStop()
		playerInputLook.setLookRight(false)
	end
	
	/** \brief Start looking up. */
	func void lookUpStart()
		playerInputLook.setLookUp(true)
	end
	
	/** \brief Stop looking up. */
	func void lookUpStop()
		playerInputLook.setLookUp(false)
	end
	
	/** \brief Start looking down. */
	func void lookDownStart()
		playerInputLook.setLookDown(true)
	end
	
	/** \brief Stop looking down. */
	func void lookDownStop()
		playerInputLook.setLookDown(false)
	end
	
	/** \brief Analog looking left/right. */
	func void analogLookLR(float amount, bool sticky)
		if sticky
			playerInputLook.setAnalogLookHorizontalSticky(-amount)
			
		else
			playerInputLook.setAnalogLookHorizontal(-amount)
		end
	end
	
	/** \brief Analog looking up/down. */
	func void analogLookUD(float amount, bool sticky)
		if sticky
			playerInputLook.setAnalogLookVerticalSticky(-amount)
			
		else
			playerInputLook.setAnalogLookVertical(-amount)
		end
	end
	
	
	
	/** \brief Start crouching. */
	func void crouchStart()
		playerInputCrouch.setCrouch(true)
	end
	
	/** \brief Stop crouching. */
	func void crouchStop()
		playerInputCrouch.setCrouch(true)
	end
	
	/** \brief Toggle crouching. */
	func void crouchToggle()
		playerInputCrouch.toggleCrouch()
	end
	
	
	
	/**
	 * \brief Init behaviors.
	 * 
	 * Retrieve and store required and optional behavior instances from the actor element.
	 */
	protected func void initBehaviors()
		super.initBehaviors()
		
		if actor castable BaseActor
			var BaseActor baseActor = actor cast BaseActor
			colliderAI = baseActor.getColliderAI()
			projectToGround = baseActor.getProjectToGround()
			footSteps = baseActor.getFootSteps()
			actorMover = baseActor.getActorMover()
			playerInputLook = baseActor.getPlayerInputLook()
			playerInputCrouch = baseActor.getPlayerInputCrouch()
			playerInputMove = baseActor.getPlayerInputMove()
			
		else
			colliderAI = ECBehaviorColliderAI.getInstanceIn(actor)
			projectToGround = ECBehaviorProjectToGround.getInstanceIn(actor)
			footSteps = ECBehaviorFootSteps.getInstanceIn(actor)
			actorMover = ECBehaviorActorMover.getInstanceIn(actor)
			playerInputLook = ECBehaviorPlayerInputLook.getInstanceIn(actor)
			playerInputCrouch = ECBehaviorPlayerInputCrouch.getInstanceIn(actor)
			playerInputMove = ECBehaviorPlayerInputMove.getInstanceIn(actor)
		end
	end
	
	/**
	 * \brief Initialize player input tracker.
	 * 
	 * Sets ECBehaviorPlayerInputMove to LocomotionType.natural .
	 */
	protected func void initPlayerInput()
		playerInputMove.setLocomotionType(ECBehaviorPlayerInputMove.LocomotionType.natural)
	end
	
	/**
	 * \brief Initialize locomotion.
	 * 
	 * See ECBehaviorLocomotion.initHuman().
	 * 
	 * Sets these initial parameters:
	 * - Can turn: yes
	 * - Can turn in-place: yes
	 * - Linear velocity adjust range: ECBehaviorPlayerInputMove.getSpeedWalk()
	 * - Linear velocity adjust time: 1
	 * - Moving left right adjust time: 0
	 * - Looking limits: -80..80 (up-down) and -90..90 (left-right)
	 * - Looking adjust times: 1
	 * - Orientation adjust time: 1
	 * - Turn adjust look left-right: yes
	 * - Turn in-place limit: -70..70
	 * - Turn in-place adjust time: 1
	 */
	protected func void initLocomotion()
		locomotion.initHuman(playerInputMove.getSpeedWalk())
	end
	
	/**
	 * \brief Initialize locomotion if player controls this actor.
	 * 
	 * Called in addition to (and after) initLocomotion() to apply changes which affect only
	 * the player. Typically this makes turning and looking direct in contrary to non-player
	 * actors where having a delay makes them behave smoother.
	 * 
	 * Applies these changes to parameters:
	 * - Looking adjust times: 0
	 * - Linear velocity adjust time: 0.5
	 */
	protected func void initLocomotionPlayer()
		var Locomotion l = locomotion.getLocomotion()
		l.setAdjustTimeVertical(0)
		l.setAdjustTimeHorizontal(0)
		l.setAdjustTimeLinearVelocity(0.5)
	end
	
	
	
	/**
	 * \brief Apply turning and looking around.
	 * 
	 * Called for player controlled actors only. If ECBehaviorActorMover has a goal set
	 * does nothing to not interfere.
	 */
	protected func void doTurnLook(float elapsed)
		if actorMover.hasGoal()
			return
		end
		
		var float deltaHorizontal = playerInputLook.calculateLookHorizontal(elapsed)
		var float deltaVertical = playerInputLook.calculateLookVertical(elapsed)
		
		if BaseGameApp.getApp() != null and BaseGameApp.getApp().getInverseLookVertical()
			deltaVertical = -deltaVertical
		end
		
		applyLookAroundChanges(deltaHorizontal, deltaVertical)
	end
	
	/**
	 * \brief Apply looking around changes.
	 * 
	 * Called for player controlled actors only.
	 */
	protected func void applyLookAroundChanges(float deltaHorizontal, float deltaVertical)
		locomotion.applyLookAround(deltaHorizontal, deltaVertical)
	end
	
	/**
	 * \brief Update locomotion.
	 */
	protected func void updateLocomotion(float elapsed)
		locomotion.update(elapsed)
	end
	
	/**
	 * \brief Post-Update locomotion.
	 */
	protected func void updateLocomotionPost(float elapsed)
		locomotion.updatePost(elapsed)
	end
	
	/**
	 * \brief Update collider.
	 * 
	 * Sets orientation and linear velocity from locomotion if actor is touching ground.
	 * If not touching ground earth type gravitation is applied.
	 * 
	 * Actor is considered not touching ground if ProjectToGround has not found a ground
	 * collider during the last postThink() call.
	 */
	protected func void updateAICollider(float elapsed)
		if projectToGround == null or projectToGround.getTouchesGround()
			colliderAI.setFromLocomotion(locomotion)
			
		else
			colliderAI.applyGravity(elapsed)
			colliderAI.stopTurning()
		end
	end
	
	/**
	 * \brief Free falling actor is landing.
	 * 
	 * Called during collisionResponse() to check if the actor has to switch from free
	 * falling to moving on ground again.
	 * 
	 * Default implementation returns \em true if the angle between the falling direction
	 * and the ground hit normal is larger than the landing angle.
	 */
	protected func bool doesActorLand(Collider owner, CollisionInfo info)
		return projectToGround.getDirection().normalize() \
			* info.getNormal() < DEMath.cos(pLandingAngle)
	end
	
	
	
	/**
	 * \brief Thinking for player controlled actor only.
	 * 
	 * Calls these hook methods:
	 * - doTurnLook()
	 * - playerUpdateLocomotion()
	 */
	func void playerThink(float elapsed)
		doTurnLook(elapsed)
		playerUpdateLocomotion(elapsed)
	end
	
	/**
	 * \brief Update locomotion.
	 * 
	 * If ECBehaviorActorMover has a goal set does nothing to not interfere.
	 */
	protected func void playerUpdateLocomotion(float elapsed)
		if actorMover.hasGoal()
			return
		end
		
		playerInputCrouch.updateLocomotion(elapsed)
		playerInputMove.updateLocomotion(elapsed)
	end
	
	
	
	/**
	 * \brief Collision detected.
	 * 
	 * If actor is touching ground applies sliding collision response. Otherwise checks if
	 * actor impacts with the ground at opposite direction than the project to ground test
	 * direction enable projecting to ground again.
	 */
	func void collisionResponse(Collider owner, CollisionInfo info)
		if projectToGround == null or projectToGround.getTouchesGround()
			var Vector velocity = owner.getLinearVelocity()
			var Vector normal = info.getNormal()
			owner.setLinearVelocity(velocity - normal * (normal * velocity))
			
		else
			projectToGround.setTouchesGround(doesActorLand(owner, info))
		end
	end
	
	/**
	 * \brief Two colliders can hit each other.
	 * 
	 * Returns always \em true.
	 */
	func bool canHitCollider(Collider owner, Collider collider)
		return true
	end
	
	/**
	 * \brief Collider changed.
	 */
	func void colliderChanged(Collider owner)
		// update actor geometry if between postThink() and next elementThink().
		if moveIfColliderChanged
			actor.setGeometry(owner.getPosition(), owner.getOrientation())
		end
	end
	
	
	
	/**
	 * \brief Name of PersistencyFactory required to load object from file.
	 * 
	 * Name of PersistencyFactory is first written to the file as string with
	 * 8-bit length. Then writeToFile() is called to write the object itself.
	 * Empty name is not allowed as is names longer than 255 characters.
	 * Name has to match a PersistencyFactory present in the Persistency
	 * instance used for loading objects. Object is read using
	 * PersistencyFactory.readObjectFromFile() of the matching PersistencyFactory.
	 */
	func String persistencyFactoryName()
		return Factory.NAME
	end
end
