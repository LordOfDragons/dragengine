/*
 * MIT License
 *
 * Copyright (C) 2025, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

namespace Dragengine.Scenery

pin Dragengine.LoadSave
pin Dragengine.Utils
pin Dragengine.StateMachineSystem


/**
 * \brief Base VR Hand action using state machine.
 * \version 1.26
 * 
 * This class adds support to send state machine events for inputs for these interfaces:
 * - BAAVRGrab
 * - BAAVRMenuInput
 * - BAAVRTriggerInput
 * 
 * Otherwise the state machine is responsible for the entire action handling. Helper behaviors
 * provide common actions and conditions to simplify this task.
 * 
 * The following events can be send to the state machine:
 * - activate
 * - activateWhileLoading
 * - enteredGameWorld
 * - leftGameWorld
 * - enterFrame
 * - playerTakesControl
 * - playerReleasesControl
 * - think
 * - cancel
 * - collisionResponse
 * 
 * Input events are send to state machine using interface BAAStateMachineEvent.
 * For further information see the respective bridge classes:
 * - \ref Commands.CommandsBAAVRGrab#StateMachineEventBridge
 * - \ref Commands.CommandsBAAVRMenuInput#StateMachineEventBridge
 * - \ref Commands.CommandsBAAVRTriggerInput#StateMachineEventBridge
 */
class BAAVRHandStateMachine extends BaseVRHandAction implements BAAStateMachineEvent
	/** \brief Factory for loading actor actions. */
	class Factory implements PersistencyFactory, ECBehaviorVRHandAction.ActionFactory
		public static fixed var String NAME = "BAAVRHandStateMachine"
		
		func new()
		end
		
		func Persistable readObjectFromFile(PersistencyEnvironment env, FileReader reader)
			return BAAVRHandStateMachine.new(env, reader)
		end
		
		static func void registerFactory(Persistency persistency)
			persistency.addFactory(NAME, Factory.new())
		end
		
		func BaseVRHandAction createAction(ECBehaviorVRHandAction.Instance instance)
			return BAAVRHandStateMachine.new()
		end
	end
	
	
	var ECBehaviorStateMachine.Instance pBehaviorStateMachine
	var StateMachine pStateMachine
	var SMContext pContext
	var String pLoadStateId
	
	
	/** \brief Create actor action. */
	func new()
	end
	
	/**
	 * \brief Create actor ai using state machine.
	 * \version 1.26
	 */
	func new(StateMachine stateMachine) this()
		pStateMachine = stateMachine
	end
	
	/**
	 * \brief Create actor ai restoring from file reader.
	 * \version 1.26
	 */
	func new(PersistencyEnvironment env, FileReader reader)
		select reader.readByte() // version
		case 0
			var String path = env.readString8OrNullIfEmpty(reader)
			if path != null
				pStateMachine = (env.getVariable(PersistencyEnvironment.varLoadStateMachine)\
					cast LoadStateMachine).loadFromFile(path)
			end
			
			pLoadStateId = env.readString8OrNullIfEmpty(reader)
			
		else
			throw EInvalidParam.new("unsupported version")
		end
	end
	
	func void dispose()
		pBehaviorStateMachine = null
		pContext = null
		super.dispose()
	end
	
	
	/** \brief State machine behavior. */
	func ECBehaviorStateMachine.Instance getBehaviorStateMachine()
		return pBehaviorStateMachine
	end
	
	/** \brief Set behavior behavior. */
	func void setBehaviorStateMachine(ECBehaviorStateMachine.Instance behavior)
		pBehaviorStateMachine = behavior
	end
	
	/**
	 * \brief State machine.
	 * \version 1.26
	 */
	func StateMachine getStateMachine()
		return pStateMachine
	end
	
	/**
	 * \brief Set state machine to use or null.
	 * \version 1.26
	 * 
	 * Change affects context only before \ref #activate() has been called.
	 */
	func void setStateMachine(StateMachine stateMachine)
		pStateMachine = stateMachine
	end
	
	/** \brief State machine context. */
	func SMContext getContext()
		return pContext
	end
	
	/** \brief Set state machine context. */
	func void setContext(SMContext context)
		pContext = context
	end
	
	
	func void activate(BehaviorElement actor)
		// super.activate(actor)
		this.actor = actor
		initBehaviors()
		
		pIsRightHand = vrHand.getECBehavior().getID().equals(BaseVRActorClass.idVRRightHand)
		
		if pStateMachine != null
			pContext.setStateMachine(pStateMachine)
		end
		
		pContext.runEvent("activate")
	end
	
	func void activateWhileLoading(BehaviorElement actor)
		// super.activateWhileLoading(actor)
		this.actor = actor
		initBehaviors()
		
		pIsRightHand = vrHand.getECBehavior().getID().equals(BaseVRActorClass.idVRRightHand)
		
		if pStateMachine != null
			pContext.setStateMachine(pStateMachine)
		end
		
		if pLoadStateId != null
			pContext.setOnlyCurrentStateByID(pLoadStateId)
			pLoadStateId = null
		end
		
		pContext.runEvent("activateWhileLoading")
	end
	
	func void enteredGameWorld()
		pContext.runEvent("enteredGameWorld")
	end
	
	func void leftGameWorld()
		pContext.runEvent("leftGameWorld")
	end
	
	func void enterFrame()
		pContext.runEvent("enterFrame")
	end
	
	func void playerTakesControl()
		pContext.runEvent("playerTakesControl")
	end
	
	func void playerReleasesControl()
		pContext.runEvent("playerReleasesControl")
	end
	
	func void think(float elapsed)
		pContext.runEvent("think", elapsed)
	end
	
	func void postThink(float elapsed)
		pContext.runEvent("postThink", elapsed)
	end
	
	func void cancel()
		pContext.runEvent("cancel")
	end
	
	func bool conversationWait()
		// handled by using "action.conversationWait" state machine action
		return false
	end
	
	
	func void collisionResponse(Collider owner, CollisionInfo info)
		pContext.runEvent("collisionResponse", info)
	end
	
	
	func void sendInputAsEvent(String event, Object parameter)
		pContext.runEvent(event, parameter)
	end
	
	
	protected func void initBehaviors()
		super.initBehaviors()
		
		if pBehaviorStateMachine == null
			pBehaviorStateMachine = ECBehaviorStateMachine.getInstanceIn(actor)
		end
		
		if pContext == null and pBehaviorStateMachine != null
			pContext = pBehaviorStateMachine.getContext()
		end
	end
	
	
	/**
	 * \brief Name of PersistencyFactory required to load object from file.
	 * 
	 * Name of PersistencyFactory is first written to the file as string with
	 * 8-bit length. Then writeToFile() is called to write the object itself.
	 * Empty name is not allowed as is names longer than 255 characters.
	 * Name has to match a PersistencyFactory present in the Persistency
	 * instance used for loading objects. Object is read using
	 * PersistencyFactory.readObjectFromFile() of the matching PersistencyFactory.
	 */
	func String persistencyFactoryName()
		return Factory.NAME
	end
	
	func void writeObjectToFile(PersistencyEnvironment env, FileWriter writer)
		super.writeObjectToFile(env, writer)
		
		var String state
		
		if isActive()
			if pContext.getCurrentState() != null
				state = pContext.getCurrentState().getID()
			end
		end
		
		writer.writeByte(0) // version
		
		env.writeString8OrEmptyIfNull(writer,\
			pStateMachine != null if pStateMachine.getFilename() else null)
		
		env.writeString8OrEmptyIfNull(writer, state)
	end
end
