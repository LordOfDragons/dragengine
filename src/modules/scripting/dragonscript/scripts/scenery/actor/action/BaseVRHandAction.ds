/* 
 * Drag[en]gine DragonScript Script Module
 *
 * Copyright (C) 2022, Roland Pl√ºss (roland@rptd.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */


namespace Dragengine.Scenery

pin Dragengine.LoadSave
pin Dragengine.Utils


/**
 * \brief Base VR Hand action.
 * 
 * Action supports the Persistable interface an can be read from and writen to file writers.
 */
class BaseVRHandAction implements Persistable
	/** \brief Factory for loading actor actions. */
	public class Factory implements PersistencyFactory, ECBehaviorVRHandAction.ActionFactory
		public static fixed var String NAME = "BaseVRHandAction"
		
		public func new()
		end
		
		public func Persistable readObjectFromFile(PersistencyEnvironment env, FileReader reader)
			return BaseVRHandAction.new()
		end
		
		public static func void registerFactory(Persistency persistency)
			persistency.addFactory(NAME, Factory.new())
		end
		
		public func BaseVRHandAction createAction(ECBehaviorVRHandAction.Instance instance)
			return BaseVRHandAction.new()
		end
	end
	
	
	
	/** \brief Actor the action is assigned to or \em null. */
	protected var BehaviorElement actor
	
	/** \brief VR hand the action is assigned to or \em null. */
	protected var ECBehaviorVRHand.Instance vrHand
	
	/** \brief Locomotion behavior. */
	protected var ECBehaviorLocomotion.Instance locomotion
	
	/** \brief Conversation actor behavior if present. */
	protected var ECBehaviorConversationActor.Instance conversationActor
	
	/** \brief Hand Controller Point-At behavior. */
	protected var ECBehaviorVRHandPointAt.Instance handPointAt
	
	/** \brief Hand Controller Laser Pointer behavior. */
	protected var ECBehaviorVRHandLaserPointer.Instance handLaserPointer
	
	/** \brief Hand Controller Attach Slot behavior. */
	protected var ECBehaviorAttachSlot.Instance handAttachSlot
	
	/** \brief Hand Controller Grabber behavior. */
	protected var ECBehaviorGrabber.Instance handGrabber
	
	/** \brief Hand Animated Pose behavior. */
	protected var ECBehaviorVRHandPose.Instance handPose
	
	/** \brief Hand animated behavior if present. */
	protected var ECBehaviorActorAnimated.Instance handAnimated
	
	/** \brief Behavior VR hand action or \em null. */
	protected var ECBehaviorVRHandAction.Instance handAction
	
	private var bool pIsRightHand
	
	
	
	/** \brief Create actor action. */
	public func new()
	end
	
	/** \brief Create actor action from persisted state. */
	public func new(PersistencyEnvironment env, FileReader reader)
	end
	
	/** \brief Dispose of actor action. */
	public func void dispose()
		actor = null
	end
	
	
	
	/** \brief Actor the action is assigned to or \em null. */
	public func BehaviorElement getActor()
		return actor
	end
	
	/** \brief VR hand behavior the action is assigned to or \em null. */
	public func ECBehaviorVRHand.Instance getVRHand()
		return vrHand
	end
	
	/** \brief Locomotion behavior. */
	public func ECBehaviorLocomotion.Instance getLocomotion()
		return locomotion
	end
	
	/** \brief Conversation actor behavior if present. */
	public func ECBehaviorConversationActor.Instance getConversationActor()
		return conversationActor
	end
	
	/** \brief Hand Controller Point-At. */
	public func ECBehaviorVRHandPointAt.Instance getHandPointAt()
		return handPointAt
	end
	
	/** \brief Hand Controller Laser Pointer. */
	public func ECBehaviorVRHandLaserPointer.Instance getHandLaserPointer()
		return handLaserPointer
	end
	
	/** \brief Hand Controller Attach Slot. */
	public func ECBehaviorAttachSlot.Instance getHandAttachSlot()
		return handAttachSlot
	end
	
	/** \brief Hand Controller Grabber. */
	public func ECBehaviorGrabber.Instance getHandGrabber()
		return handGrabber
	end
	
	/** \brief Hand Pose. */
	public func ECBehaviorVRHandPose.Instance getHandPose()
		return handPose
	end
	
	/** \brief Hand animated behavior if present. */
	public func ECBehaviorActorAnimated.Instance getHandAnimated()
		return handAnimated
	end
	
	/** \brief Behavior VR hand action or \em null. */
	public func ECBehaviorVRHandAction.Instance getHandAction()
		return handAction
	end
	
	/** \brief Action is active hand action. */
	public func bool isActive()
		return handAction.getAction() == this
	end
	
	/** \brief Action is not active hand action. */
	public func bool isNotActive()
		return handAction.getAction() != this
	end
	
	/** \brief Action is right hand. */
	public func bool isRightHand()
		return pIsRightHand
	end
	
	/** \brief Action is left hand. */
	public func bool isLeftHand()
		return not pIsRightHand
	end
	
	
	
	/**
	 * \brief Action has been set as active hand action.
	 * 
	 * Stores the actor and VR hand behavior and calls initAnimator()
	 * and ECBehaviorActorAnimated.applyAnimations().
	 * 
	 * Calls these hook methods:
	 * - initBehaviors()
	 * - initAnimator()
	 */
	public func void activate(BehaviorElement actor, ECBehaviorVRHand.Instance vrHand)
		this.actor = actor
		this.vrHand = vrHand
		
		pIsRightHand = vrHand.getECBehavior().getID().equals(BaseVRActorClass.idVRRightHand)
		
		initBehaviors()
		initAnimator()
		if handAnimated != null
			handAnimated.applyAnimations() // avoid problems if activated past postThink
		end
	end
	
	/**
	 * \brief Action has been set as active action in an actor while loading.
	 * 
	 * Similar to activate(BehaviorElement,ECBehaviorVRHand.Instance) but only stores the
	 * actor and VR hand behavior and calls initBehaviors(). This is required since while
	 * loading behaviors load their state and actions load their states. If
	 * activate(BehaviorElement,ECBehaviorVRHand.Instance) is called these states would
	 * be reset to initial values.
	 */
	public func void activateWhileLoading(BehaviorElement actor, ECBehaviorVRHand.Instance vrHand)
		this.actor = actor
		this.vrHand = vrHand
		
		pIsRightHand = vrHand.getECBehavior().getID().equals(BaseVRActorClass.idVRRightHand)
		
		initBehaviors()
	end
	
	/**
	 * \brief Action has been unset as active hand action.
	 * 
	 * The stored actor is not cleared to avoid problems while cleaning up.
	 */
	public func void deactivate()
	end
	
	/** \brief Actor entered game world. */
	public func void enteredGameWorld()
	end
	
	/** \brief Actor left game world. */
	public func void leftGameWorld()
	end
	
	/** \brief Actor has been added to game world and enterFrame() is called once. */
	public func void enterFrame()
	end
	
	/** \brief Player takes control of actor. */
	public func void playerTakesControl()
	end
	
	/** \brief Player released control of actor. */
	public func void playerReleasesControl()
	end
	
	/**
	 * \brief Thinking.
	 * 
	 * Default implementation does these actions in this order:
	 * - updateAnimator()
	 * - applyAnimations()
	 */
	public func void think(float elapsed)
		updateAnimator(elapsed)
		applyAnimations()
	end
	
	/** \brief Post physics. */
	public func void postThink(float elapsed)
	end
	
	
	
	/** \brief Cancel action the next time possible. */
	public func void cancel()
	end
	
	
	
	/**
	 * \brief Init behaviors.
	 * 
	 * Retrieve and store required and optional behavior instances from the actor element.
	 */
	protected func void initBehaviors()
		if actor castable BaseVRActor
			var BaseVRActor baseVRActor = actor cast BaseVRActor
			conversationActor = baseVRActor.getConversationActor()
			locomotion = baseVRActor.getLocomotion()
			
			if vrHand.getECBehavior().getID().equals(BaseVRActorClass.idVRRightHand)
				handPointAt = baseVRActor.getVRRightHandPointAt()
				handLaserPointer = baseVRActor.getVRRightHandLaserPointer()
				handAttachSlot = baseVRActor.getVRRightHandAttachSlot()
				handGrabber = baseVRActor.getVRRightHandGrabber()
				handPose = baseVRActor.getVRRightHandPose()
				handAnimated = baseVRActor.getVRRightHandAnimated()
				handAction = baseVRActor.getVRRightHandAction()
				
			elif vrHand.getECBehavior().getID().equals(BaseVRActorClass.idVRLeftHand)
				handPointAt = baseVRActor.getVRLeftHandPointAt()
				handLaserPointer = baseVRActor.getVRLeftHandLaserPointer()
				handAttachSlot = baseVRActor.getVRLeftHandAttachSlot()
				handGrabber = baseVRActor.getVRLeftHandGrabber()
				handPose = baseVRActor.getVRLeftHandPose()
				handAnimated = baseVRActor.getVRLeftHandAnimated()
				handAction = baseVRActor.getVRLeftHandAction()
			end
			
		else
			conversationActor = ECBehaviorConversationActor.getInstanceIn(actor)
			locomotion = ECBehaviorLocomotion.getInstanceIn(actor)
			
			if vrHand.getECBehavior().getID().equals(BaseVRActorClass.idVRRightHand)
				handPointAt = ECBehaviorVRHandPointAt.getInstanceIn(actor, BaseVRActorClass.idVRRightHand)
				handLaserPointer = ECBehaviorVRHandLaserPointer.getInstanceIn(actor, BaseVRActorClass.idVRRightHand)
				handAttachSlot = ECBehaviorAttachSlot.getInstanceIn(actor, BaseVRActorClass.idNonVRRightHand)
				handGrabber = ECBehaviorGrabber.getInstanceIn(actor, BaseVRActorClass.idNonVRRightHand)
				handPose = ECBehaviorVRHandPose.getInstanceIn(actor, BaseVRActorClass.idNonVRRightHand)
				handAnimated = ECBehaviorActorAnimated.getInstanceIn(actor, BaseVRActorClass.idNonVRRightHand)
				handAction = ECBehaviorVRHandAction.getInstanceIn(actor, BaseVRActorClass.idVRRightHand)
				
			else
				handPointAt = ECBehaviorVRHandPointAt.getInstanceIn(actor, BaseVRActorClass.idVRLeftHand)
				handLaserPointer = ECBehaviorVRHandLaserPointer.getInstanceIn(actor, BaseVRActorClass.idVRLeftHand)
				handAttachSlot = ECBehaviorAttachSlot.getInstanceIn(actor, BaseVRActorClass.idNonVRLeftHand)
				handGrabber = ECBehaviorGrabber.getInstanceIn(actor, BaseVRActorClass.idNonVRLeftHand)
				handPose = ECBehaviorVRHandPose.getInstanceIn(actor, BaseVRActorClass.idNonVRLeftHand)
				handAnimated = ECBehaviorActorAnimated.getInstanceIn(actor, BaseVRActorClass.idNonVRLeftHand)
				handAction = ECBehaviorVRHandAction.getInstanceIn(actor, BaseVRActorClass.idVRLeftHand)
			end
		end
	end
	
	/**
	 * \brief Initialize animator.
	 * 
	 * Overwrite to change animator to use for this actor.
	 * 
	 * Default implementation does nothing.
	 * 
	 * \par Using ECBehaviorActorAnimated
	 * 
	 * Call setActiveAnimatorID() with the identifier of the desired animator as set up in
	 * the "handAnimated.animators" element class property. If you set up controller mappings
	 * using handAnimated.setDefaultControllerMappings() or manually you can stop here
	 * since controller mappings are automatically updated. By default BaseActorClass does
	 * calls setDefaultControllerMappings().
	 * 
	 * A typical implementation can look like this:
	 * 
	 * \code{.ds}
	 * handAnimated.setActiveAnimatorID("default")
	 * \endcode
	 * 
	 * \par Manually handling AnimatorInstance and Animator
	 * 
	 * If you change the animator you should usually also change the locomotion controller
	 * mappings to automatically animate them unless you plan to do it manually.
	 * 
	 * A typical implementation can look like this:
	 * 
	 * \code{.ds}
	 * var Animator animator = ...  // animator you would like to set
	 * var AnimatorInstance ainst = ... // animator instance created and handled by yourself
	 * ainst.setAnimator(animator)
	 * 
	 * var Locomotion locomotion = getActor().getLocomotion()
	 * locomotion.removeAllControllerMappings()
	 * locomotion.addControllerMapping(ainst.getControllerAt(0), Locomotion.ATTR_ELAPSED_TIME)
	 * locomotion.addControllerMapping(ainst.getControllerAt(1), Locomotion.ATTR_DISPLACEMENT)
	 * locomotion.addControllerMapping(ainst.getControllerAt(2), Locomotion.ATTR_LOOK_HORIZONTAL)
	 * locomotion.addControllerMapping(ainst.getControllerAt(3), Locomotion.ATTR_LOOK_VERTICAL)
	 * \endcode
	 * 
	 * This example code sets an animator which is known to have 4 controllers. The mappings
	 * are set to automatically update the controllers with values matching their use.
	 * In this case the first controller is playback while actor is not moving. The second
	 * controller is playback while actor is walking. Using ATTR_DISPLACEMENT uses the distance
	 * moved by the actor as controller value. Using distance avoids feet shuffling and works
	 * well with variable movement speeds. The other two controllers affect the direction the
	 * actor is looking.
	 */
	protected func void initAnimator()
	end
	
	/**
	 * \brief Update animator controllers.
	 * 
	 * Default implementation calls these method if the behvaiors are present:
	 * - ECBehaviorLocomotion.updateAnimator()
	 * - ECBehaviorActorAnimated.notifyControllersChanged()
	 */
	protected func void updateAnimator(float elapsed)
		// actor action has updated animator controllers already using locomotion
		if handPose != null
			handPose.updateControllers()
		end
		if handAnimated != null
			handAnimated.notifyControllersChanged(elapsed)
		end
	end
	
	/**
	 * \brief Apply animations.
	 * 
	 * Default implementation calls these method if the behvaiors are present:
	 * - ECBehaviorActorAnimated.applyAnimations()
	 */
	protected func void applyAnimations()
		if handPose != null
			handPose.applyAnimations()
		end
		if handAnimated != null
			handAnimated.applyAnimations()
		end
	end
	
	
	
	/**
	 * \brief Check if conversation actions have to wait for actor to finish this action.
	 * 
	 * BaseActor adds a listener to ECBehaviorConversationActor using conversationWait()
	 * to answer waiting queries by conversation scripts.
	 * 
	 * The default implementation returns false which equals no waiting required.
	 */
	public func bool conversationWait()
		return false
	end
	
	
	
	/** \brief Collision detected. */
	public func void collisionResponse(Collider owner, CollisionInfo info)
	end
	
	
	
	/** \brief Log text to BaseGameApp console prefixed with actor information. */
	public func void log(String text)
		log(BaseGameApp.getApp().getConsole(), text)
	end
	
	/** \brief Log text to console prefixed with actor information. */
	public func void log(Console console, String text)
		console.addMessage(loggingPrefix() + ": " + text)
	end
	
	/** \brief Log text about element to BaseGameApp console prefixed with actor information. */
	public func void log(Element element, String text)
		log(BaseGameApp.getApp().getConsole(), element, text)
	end
	
	/** \brief Log text about element to console prefixed with actor information. */
	public func void log(Console console, Element element, String text)
		if element == null
			console.addMessage(loggingPrefix() + " <null>: " + text)
			
		else
			console.addMessage(loggingPrefix() + " " + element.getClass().getClassname() \
				+ " " + element.getPosition() + ": " + text)
		end
	end
	
	/** \brief Log exception to BaseGameApp console prefixed with actor information. */
	public func void log(Exception exception)
		log(BaseGameApp.getApp().getConsole(), exception)
	end
	
	/** \brief Log exception to console prefixed with actor information. */
	public func void log(Console console, Exception exception)
		console.addError(loggingPrefix(), exception)
	end
	
	/**
	 * \brief Logging prefix.
	 * 
	 * Returns string in the form "<actor-class>/<action-class>".
	 */
	public func String loggingPrefix()
		return actor.getClass().getClassname().split('.').getAt(-1).toString() \
			+ "/" + className().split('.').getAt(-1)\
			+ "/" + vrHand.getECBehavior().getID()
	end
	
	
	
	/**
	 * \brief Name of PersistencyFactory required to load object from file.
	 * 
	 * Name of PersistencyFactory is first written to the file as string with
	 * 8-bit length. Then writeToFile() is called to write the object itself.
	 * Empty name is not allowed as is names longer than 255 characters.
	 * Name has to match a PersistencyFactory present in the Persistency
	 * instance used for loading objects. Object is read using
	 * PersistencyFactory.readObjectFromFile() of the matching PersistencyFactory.
	 */
	public func String persistencyFactoryName()
		return Factory.NAME
	end
	
	/** \brief Write object to file writer. */
	public func void writeObjectToFile(PersistencyEnvironment env, FileWriter writer)
	end
end
