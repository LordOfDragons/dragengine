/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */


namespace Dragengine.Scenery


/**
 * \brief Manage list of temporary decals.
 * 
 * Typical temporary decals are weapon damages. To avoid hogging memory and loosing speed
 * these temporary decals only stay alive for a given amount of time before they are removed.
 * The manager provides the default behavoir to delete decals once their time to live reach
 * 0 or below. The check is not done every update to avoid eating cpu time. The update
 * interval indicates after how many seconds a test is carried out. This avoids wasting cpu
 * time for checking decal times since usually a precise timing there is not required.
 * Set this to 0 if you need full precision.
 */
class TemporaryDecalManager
	private var Array pDecals
	private var float pUpdateInterval
	private var float pElapsedTime
	
	
	
	/** \brief Create temorary decal manager. */
	public func new()
		this.pDecals = Array.new()
		this.pUpdateInterval = 1
		this.pElapsedTime = 0
	end
	
	
	
	/** \brief Update interval in seconds. */
	public func float getUpdateInterval()
		return this.pUpdateInterval
	end
	
	/** \brief Set update interval in seconds. */
	public func void setUpdateInterval( float seconds )
		this.pUpdateInterval = DEMath.max( seconds, 0.0 )
	end
	
	/** \brief Elapsed time in seconds. */
	public func float getElapsedTime()
		return this.pElapsedTime
	end
	
	/** \brief Set elapsed time in seconds. */
	public func void setElapsedTime( float seconds )
		this.pElapsedTime = DEMath.max( seconds, 0.0 )
	end
	
	
	
	/** \brief Count of decals. */
	public func int getCount()
		return this.pDecals.getCount()
	end
	
	/** \brief Decal at index. */
	public func TemporaryDecal getAt( int index )
		return this.pDecals.getAt( index ) cast TemporaryDecal
	end
	
	/** \brief Add decal. */
	public func void add( TemporaryDecal decal )
		if decal == null
			throw EInvalidParam.new()
		end
		this.pDecals.add( decal )
	end
	
	/** \brief Remove decal. */
	public func void remove( TemporaryDecal decal )
		this.pDecals.remove( decal )
	end
	
	/** \brief Remove all decals. */
	public func void removeAll()
		this.pDecals.removeAll()
	end
	
	
	
	/**
	 * \brief Update decals.
	 * 
	 * Reduces the time to live of all decals by the given amount of seconds and removes
	 * decals if their time to live drops below zero.
	 */
	public func void update( float elapsed )
		this.pElapsedTime += elapsed
		if this.pElapsedTime < this.pUpdateInterval
			return
		end
		
		this.pDecals.removeIf( block TemporaryDecal each
			each.decreaseTimeToLive( elapsed )
			return each.getTimeToLive() <= 0
		end)
	end
end
