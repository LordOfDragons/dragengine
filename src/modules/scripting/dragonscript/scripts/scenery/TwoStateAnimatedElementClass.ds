/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */


namespace Dragengine.Scenery

pin Dragengine.Gui
pin Dragengine.Preloading
pin Dragengine.LoadSave
pin Dragengine.Utils
pin Dragengine.TriggerSystem


/**
 * \brief Two state animated element class.
 * 
 * - "deactivated": Controller used while the behavior is in deactivated state.
 *                  This is typically an unclamped controller. If missing behavior does
 *                  not think consuming no processing time.
 * - "activated": Controller used while the behavior is in activated state.
 *                This is typically an unclamped controller. If missing behavior does
 *                not think consuming no processing time.
 * - "activating": Controller used while behavior is transitioning from deactivated state
 *                 to activated state. The transition ends when the controller reaches
 *                 the upper limit. For this reason the controller has to be a clamped
 *                 controller otherwise the transition never ends. If missing behavior
 *                 transitions immediately to activated state.
 * - "deactivating": Controller used while behavior is transitioning from activated state
 *                   to deactivated state. The transition ends when the controller reaches
 *                   the upper limit. For this reason the controller has to be a clamped
 *                   controller otherwise the transition never ends. If missing behavior
 *                   transitions immediately to deactivated state.
 * 
 * \par Activate Trigger
 * 
 * When changing to true the element is switched to the activated state. When changing to
 * false the element is switched to the deactivated state. If the switch happens during
 * transition time the transition is finished before switching.
 */
class TwoStateAnimatedElementClass extends SimpleElementClass
	private var ECBehaviorTwoStateAnimated pAnimated
	
	
	
	/** \brief Create element class using loaders from BaseGameApp. */
	public func new() this( "TwoStateAnimatedElement" )
	end
	
	/** \brief Create element class. */
	public func new( Loaders loaders, TSTriggerTable triggerTable ) \
	this( "TwoStateAnimatedElement", loaders, triggerTable )
	end
	
	/** \brief Create element class using loaders from BaseGameApp. */
	public func new( String className ) this( className, sharedFactoryHelper.defaultLoaders(), \
	sharedFactoryHelper.defaultTriggerTable())
	end
	
	/** \brief Create element class. */
	public func new( String className, Loaders loaders, TSTriggerTable triggerTable ) \
	super( className, loaders )
		this.pAnimated = ECBehaviorTwoStateAnimated.new( this, this.getComponent(), loaders, triggerTable )
	end
	
	
	
	/** \brief Two state animated behavior. */
	public func ECBehaviorTwoStateAnimated getAnimated()
		return this.pAnimated
	end
	
	
	
	/** \brief Create duplicate of class with new name. */
	public func ElementClass duplicateNamed( String classname )
		return TwoStateAnimatedElementClass.new( classname )
	end
	
	
	
	/**
	 * \brief Create element instance.
	 */
	protected func Element createElement()
		return TwoStateAnimatedElement.new( this )
	end
end
