/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */


namespace Dragengine.Scenery

pin Dragengine.Utils
pin Dragengine.Preloading



/**
 * \brief List of element classes. 
 */
class ElementClassList
	/** \brief Dictionary of ElementClasses keyed by String. */
	private var Dictionary pClasses
	
	
	
	/** \brief Create element class manager. */
	public func new()
		pClasses = Dictionary.new()
	end
	
	/** \brief Dispose of all classes. */
	public func void dispose()
		pClasses.forEachValue(block ElementClass each
			each.dispose()
		end)
	end
	
	
	
	/** \brief Number of classes. */
	public func int getCount()
		return pClasses.getCount()
	end
	
	/** \brief Named class or \em null if absent. */
	public func ElementClass getNamed(String name)
		return pClasses.getAt(name, null) cast ElementClass
	end
	
	/** \brief Named class is present. */
	public func bool hasNamed(String name)
		return pClasses.has(name)
	end
	
	/**
	 * \brief Element class is present.
	 * \version 1.21
	 */
	public func bool has(ElementClass eclass)
		return pClasses.has(eclass.getClassname())
	end
	
	/** \brief Add class. */
	public func void add(ElementClass eclass)
		if pClasses.has(eclass.getClassname())
			throw EInvalidParam.new()
		end
		pClasses.setAt(eclass.getClassname(), eclass)
	end
	
	/**
	 * \brief Remove class.
	 * \details Calls ElementClass.dispose().
	 */
	public func void remove(ElementClass eclass)
		pClasses.remove(eclass.getClassname())
		eclass.dispose()
	end
	
	/**
	 * \brief Remove named class if present.
	 * \details Calls ElementClass.dispose() if removed.
	 */
	public func void removeNamed(String name)
		var ElementClass eclass = pClasses.getAt(name, null) cast ElementClass
		if eclass != null
			pClasses.remove(name)
			eclass.dispose()
		end
	end
	
	/**
	 * \brief Remove all classes.
	 * \details Calls all ElementClass.dispose().
	 */
	public func void removeAll()
		pClasses.forEachValue(block ElementClass each
			each.dispose()
		end)
		pClasses.removeAll()
	end
	
	/**
	 * \brief Remove class without calling ElementClass.dispose().
	 * \version 1.21
	 */
	public func void removeNoDispose(ElementClass eclass)
		pClasses.remove(eclass.getClassname())
	end
	
	/**
	 * \brief Remove named class if present without calling ElementClass.dispose().
	 * \version 1.21
	 */
	public func void removeNamedNoDispose(String name)
		pClasses.removeIfExisting(name)
	end
	
	/**
	 * \brief Remove all classes without calling ElementClass.dispose().
	 * \version 1.21
	 */
	public func void removeAllNoDispose()
		pClasses.removeAll()
	end
	
	/**
	 * \brief Visit element classes using block.
	 * 
	 * Block parameter is of type ElementClass.
	 */
	public func void forEach(Block ablock)
		pClasses.forEachValue(ablock)
	end
	
	/**
	 * \brief Visit element classes using block if castable.
	 * \version 1.7
	 * 
	 * Block is called only for classes castable to block parameter.
	 */
	public func void forEachCastable(Block ablock)
		pClasses.forEachValueCastable(ablock)
	end
	
	/**
	 * \brief Find element classes using block.
	 * \version 1.7
	 * 
	 * Block parameter is of type ElementClass and returns true if found.
	 */
	public func ElementClass find(Block ablock)
		return pClasses.find(block String key, ElementClass value
			return ablock.run(value)
		end) cast ElementClass
	end
	
	/** \brief Add all element classes. */
	public func void preloadAll(PreloadManager preload)
		pClasses.forEachValue(block ElementClass each
			preload.addElementClass(each)
		end)
	end
	
	
	
	private class DynamicBool
		public var bool value
		public func new()
			value = false
		end
	end
	
	/**
	 * \brief Log preloading problems.
	 * \returns True if problems are present.
	 */
	public func bool logPreloadProblems(Console console)
		return pClasses.injectValue(false, block bool hasProblems, ElementClass elementClass
			return elementClass.injectProperty(hasProblems, block bool hasProblems, ElementClassProperty property
				return property.logPreloadProblems(elementClass, console) or hasProblems
			end)
		end) cast bool
	end
end
