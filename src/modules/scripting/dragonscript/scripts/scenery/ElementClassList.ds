/* 
 * Drag[en]gine DragonScript Script Module
 *
 * Copyright (C) 2020, Roland Pl√ºss (roland@rptd.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */


namespace Dragengine.Scenery

pin Dragengine.Utils
pin Dragengine.Preloading



/**
 * \brief List of element classes. 
 */
class ElementClassList
	/** \brief Dictionary of ElementClasses keyed by String. */
	private var Dictionary pClasses
	
	
	
	/** \brief Create element class manager. */
	public func new()
		pClasses = Dictionary.new()
	end
	
	/** \brief Dispose of all classes. */
	public func void dispose()
		pClasses.forEachValue(block ElementClass each
			each.dispose()
		end)
	end
	
	
	
	/** \brief Number of classes. */
	public func int getCount()
		return pClasses.getCount()
	end
	
	/** \brief Named class or \em null if absent. */
	public func ElementClass getNamed(String name)
		return pClasses.getAt(name, null) cast ElementClass
	end
	
	/** \brief Named class is present. */
	public func bool hasNamed(String name)
		return pClasses.has(name)
	end
	
	/** \brief Add class. */
	public func void add(ElementClass eclass)
		if pClasses.has(eclass.getClassname())
			throw EInvalidParam.new()
		end
		pClasses.setAt(eclass.getClassname(), eclass)
	end
	
	/**
	 * \brief Remove class.
	 * \details Calls ElementClass.dispose().
	 */
	public func void remove(ElementClass eclass)
		pClasses.remove(eclass.getClassname())
		eclass.dispose()
	end
	
	/**
	 * \brief Remove named class if present.
	 * \details Calls ElementClass.dispose() if removed.
	 */
	public func void removeNamed(String name)
		var ElementClass eclass = pClasses.getAt(name, null) cast ElementClass
		if eclass != null
			pClasses.remove(name)
			eclass.dispose()
		end
	end
	
	/**
	 * \brief Remove all classes.
	 * \details Calls all ElementClass.dispose().
	 */
	public func void removeAll()
		pClasses.forEachValue(block ElementClass each
			each.dispose()
		end)
		pClasses.removeAll()
	end
	
	/**
	 * \brief Visit element classes using block.
	 * 
	 * Block parameter is of type ElementClass.
	 */
	public func void forEach(Block ablock)
		pClasses.forEachValue(ablock)
	end
	
	/**
	 * \brief Visit element classes using block if castable.
	 * \version 1.7
	 * 
	 * Block is called only for classes castable to block parameter.
	 */
	public func void forEachCastable(Block ablock)
		pClasses.forEachValueCastable(ablock)
	end
	
	/**
	 * \brief Find element classes using block.
	 * \version 1.7
	 * 
	 * Block parameter is of type ElementClass and returns true if found.
	 */
	public func ElementClass find(Block ablock)
		return pClasses.find(block String key, ElementClass value
			return ablock.run(value)
		end) cast ElementClass
	end
	
	/** \brief Add all element classes. */
	public func void preloadAll(PreloadManager preload)
		pClasses.forEachValue(block ElementClass each
			preload.addElementClass(each)
		end)
	end
	
	
	
	private class DynamicBool
		public var bool value
		public func new()
			value = false
		end
	end
	
	/**
	 * \brief Log preloading problems.
	 * \returns True if problems are present.
	 */
	public func bool logPreloadProblems(Console console)
		return pClasses.injectValue(false, block bool hasProblems, ElementClass elementClass
			return elementClass.injectProperty(hasProblems, block bool hasProblems, ElementClassProperty property
				return property.logPreloadProblems(elementClass, console) or hasProblems
			end)
		end) cast bool
	end
end
