/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */


namespace Dragengine.Scenery.Visitors

pin Dragengine.Scenery


/**
 * \brief Find closest element to a given position.
 */
class FindClosestVisitor extends ElementVisitor
	private var Element pClosestElement
	private var float pClosestDistance
	private var DVector pOrigin
	
	
	
	/**
	 * \brief Create visitor.
	 * \param origin Position to measure distancefrom
	 */
	public func new( DVector origin )
		if origin == null
			throw EInvalidParam.new()
		end
		this.pOrigin = origin
	end
	
	
	
	/**
	 * \brief Closest element if found or null otherwise.
	 */
	public func Element getClosestElement()
		return this.pClosestElement
	end
	
	/** \brief Distance of closest element or 0 otherwise. */
	public func float getClosestDistance()
		return this.pClosestDistance
	end
	
	/** \brief Clear closest element. */
	public func void clearClosest()
		this.pClosestElement = null
		this.pClosestDistance = 0
	end
	
	
	
	/** \brief Store element if distance of center to origin is less than closest element. */
	public func void setIfCloser( Element element )
		var float distance = ( element.getPosition() - this.pOrigin ).getLength()
		if this.pClosestElement == null or distance < this.pClosestDistance
			this.pClosestElement = element
			this.pClosestDistance = distance
		end
	end
	
	/** \brief Store element if distance of center to origin is less than closest element. */
	public func void keepIfCloser( Element element )
		this.setIfCloser( element )
	end
	
	
	
	/**
	 * \brief Visit an element.
	 * 
	 * Store it as closest element if distance of center to origin is less than closest
	 * element or if element is null.
	 */
	public func void visitElement( Element element )
		this.keepIfCloser( element )
	end
end
