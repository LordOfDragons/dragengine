/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */


namespace Dragengine.Scenery.Visitors


/**
 * \brief Collects visited elements into array.
 * 
 * Elements visited multiple times are only added once to the list.
 */
class CollectElementsVisitor extends ElementVisitor
	/** \brief List of elements */
	private var Array pList
	
	
	
	/** \brief Creates visitor. */
	public func new()
		this.pList = Array.new()
	end
	
	
	
	/** \brief Number of elements. */
	public func int getCount()
		return this.pList.getCount()
	end
	
	/** \brief Element at index. */
	public func Element getAt( int index )
		return this.pList.getAt( index ) cast Element
	end
	
	/** \brief Clear elements. */
	public func void clear()
		this.pList.removeAll()
	end
	
	/** \brief Visit collected elements with a block. */
	public func void forEach( Block ablock )
		this.pList.forEach( ablock )
	end
	
	/** \brief Find collected element with a block. */
	public func Element find( Block ablock )
		return this.pList.find( ablock ) cast Element
	end
	
	
	
	/** \brief Visit an element. */
	public func void visitElement( Element element )
		if not this.pList.has( element )
			this.pList.add( element )
		end
	end
end
