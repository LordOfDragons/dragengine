/* 
 * Drag[en]gine DragonScript Script Module
 *
 * Copyright (C) 2023, Roland Pl√ºss (roland@rptd.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */


namespace Dragengine.Scenery

pin Dragengine.LoadSave
pin Dragengine.Preloading
pin Dragengine.Utils


/**
 * \brief GameWorld Behavior instance interface providing the actual game world behavior.
 * \version 1.17
 */
public interface GWBehavior
	/** \brief Game world the behavior belongs to. */
	func GameWorld getGameWorld()
	
	/** \brief Dispose of behavior. */
	func void dispose()
	
	/** \brief Initialize game world from stub. */
	func void init(StubGameWorld stub)
	
	/** \brief Behavior instance requires update(), think() and postThink() to be called. */
	func bool requiresThink()
	
	/**
	 * \brief Frame update.
	 * 
	 * This method is only called if requiresThink() returns true.
	 * Update is called on behaviors before enter frame and world updating is called.
	 */
	func void update(float elapsed)
	
	/**
	 * \brief Think about what to do for the next frame update.
	 * 
	 * This method is only called if requiresThink() returns true.
	 * Think is called first on all behaviors then on all elements.
	 */
	func void think(float elapsed)
	
	/**
	 * \brief Post thinking after physics processing is finished.
	 * 
	 * This method is only called if requiresThink() returns true.
	 * Post think is called first on all elements then on all behaviors.
	 */
	func void postThink(float elapsed)
	
	/** \brief Behavior requires readFromFile() and writeToFile() to be called. */
	func bool requiresPersistency()
	
	/**
	 * \brief Read from file.
	 *
	 * This method is only called if requiresPersistency() returns true.
	 */
	func void readFromFile(PersistencyEnvironment env, FileReader reader)
	
	/**
	 * \brief Write to file.
	 *
	 * This method is only called if requiresPersistency() returns true.
	 */
	func void writeToFile(PersistencyEnvironment env, FileWriter writer)
	
	/**
	 * \brief Unique identifier of behavior.
	 * 
	 * Has to return a string which is unique in the owner GameWorld. This string will be
	 * stored while persisting GameWorld instances. This allows to assign restored behavior
	 * data to the correct behavior if present.
	 */
	func String getBehaviorID()
	
	/**
	 * \brief Behavior supports loading data of another behavior.
	 * 
	 * Returns true if this behavior supports loading data of another behavior matching behavior
	 * identifier. Called for all behaviors if GameWorld encounters a data block with a behavior
	 * identifier not matching any behaviors.
	 */
	func bool supportsBehaviorID(String identifier)
	
	/**
	 * \brief Load data of another behavior.
	 * 
	 * Called if supportsBehaviorID(String) returns true for identifier. GameWorld requests
	 * behavior to load the supported data block.
	 */
	func void loadSupportedData(String identifier, PersistencyEnvironment env, FileReader reader)
end
