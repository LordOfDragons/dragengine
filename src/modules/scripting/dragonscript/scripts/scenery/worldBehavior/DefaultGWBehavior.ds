/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */


namespace Dragengine.Scenery

pin Dragengine.LoadSave
pin Dragengine.Preloading
pin Dragengine.Utils


/**
 * \brief Default implementation of GWBehavior doing nothing.
 * \version 1.17
 */
public class DefaultGWBehavior implements GWBehavior
	private var String pID
	private var GameWorld pGameWorld
	private var String pBehaviorID
	private var bool pRequiresThink
	private var bool pRequiresPersistency
	
	
	
	/** \brief Create default behavior with empty identifier. */
	public func new(GameWorld gameWorld) this(gameWorld, "")
	end
	
	/** \brief Create default behavior. */
	public func new(GameWorld gameWorld, String id)
		if id == null
			throw ENullPointer.new("id")
		end
		if gameWorld == null
			throw ENullPointer.new("gameWorld")
		end
		
		pID = id
		pGameWorld = gameWorld
		useClassNameAsBehaviorID()
	end
	
	/** \brief Dispose of behavior. */
	public func void dispose()
		pGameWorld = null
	end
	
	
	
	/** \brief Identifier. */
	public func String getID()
		return pID
	end
	
	/** \brief Game world this behavior belongs to. */
	public func GameWorld getGameWorld()
		return pGameWorld
	end
	
	
	
	/**
	 * \brief Unique identifier of behavior.
	 * 
	 * Has to return a string which is unique in the owner GameWorld. This string will be
	 * stored. This allows to assign restored behavior data to the correct behavior if present.
	 * 
	 * The default implementation returns "<class-name>:<identifier>" or "<class-name>" if
	 * identifier is empty string (constructor calls useClassNameAsBehaviorID()). If two or
	 * more behaviors share the same class name you have to make sure getBehaviorID() returns
	 * unique names. This can be done using one of these possible ways:
	 * <ul>
	 * <li>Overwrite getBehaviorID()</li>
	 * <li>Call useFullyQualifiedClassNameAsBehaviorID() in the constructor</li>
	 * <li>Call setBehaviorID(String) in the constructor</li>
	 * </ul>
	 */
	public func String getBehaviorID()
		return pBehaviorID
	end
	
	/**
	 * \brief Set behavior identifier.
	 * 
	 * \note Call this only during the constructor. Behavior identifier has to be
	 *       static during the entire life time of the behavior.
	 */
	protected func void setBehaviorID(String identifier)
		if identifier == null
			throw ENullPointer.new("identifier")
		end
		if identifier.empty()
			throw EInvalidParam.new("identifier is empty")
		end
		
		pBehaviorID = identifier
	end
	
	/**
	 * \brief Set behavior identifier to "<class-name>:<identifier>".
	 * 
	 * If identifier is empty string omits the double-colon.
	 * 
	 * \note Call this only during the constructor. Behavior identifier has to be
	 *       static during the entire life time of the behavior.
	 */
	protected func void useClassNameAsBehaviorID()
		pBehaviorID = className().splitExact('.').getAt(-1) cast String
		if not pID.empty()
			pBehaviorID = pBehaviorID + ":" + pID
		end
	end
	
	/**
	 * \brief Set behavior identifier to "<fully-qualified-class-name>:<identifier>".
	 * 
	 * If identifier is empty string omits the double-colon.
	 * 
	 * \note Call this only during the constructor. Behavior identifier has to be
	 *       static during the entire life time of the behavior.
	 */
	protected func void useFullyQualifiedClassNameAsBehaviorID()
		pBehaviorID = className()
		if not pID.empty()
			pBehaviorID = pBehaviorID + ":" + pID
		end
	end
	
	
	
	/** \brief Initialize game world from stub. */
	public func void init(StubGameWorld stub)
	end
	
	/** \brief Behavior instance requires update(), think() and postThink() to be called. */
	public func bool requiresThink()
		return pRequiresThink
	end
	
	/** \brief Set if behavior instance requires update(), think() and postThink() to be called. */
	protected func void setRequiresThink(bool required)
		if required == pRequiresThink
			return
		end
		
		pRequiresThink = required
		
		if pGameWorld != null // dispose protection
			pGameWorld.requiresThinkChanged()
		end
	end
	
	/**
	 * \brief Frame update.
	 * 
	 * Update is called on behaviors before enter frame and world updating is called.
	 */
	public func void update(float elapsed)
	end
	
	/**
	 * \brief Think about what to do for the next frame update.
	 * 
	 * Think is called first on all behaviors then on all elements.
	 */
	public func void think(float elapsed)
	end
	
	/**
	 * \brief Post thinking after physics processing is finished.
	 * 
	 * Post think is called first on all elements then on all behaviors.
	 */
	public func void postThink(float elapsed)
	end
	
	/** \brief Behavior requires readFromFile() and writeToFile() to be called. */
	public func bool requiresPersistency()
		return pRequiresPersistency
	end
	
	/** \brief Set if behavior requires readFromFile() and writeToFile() to be called. */
	protected func void setRequiresPersistency(bool required)
		pRequiresPersistency = required
	end
	
	/** \brief Read from file. */
	public func void readFromFile(PersistencyEnvironment env, FileReader reader)
		if reader.readByte() !=  0 // version
			throw EInvalidParam.new("unsupported version")
		end
	end
	
	/** \brief Write to file. */
	public func void writeToFile(PersistencyEnvironment env, FileWriter writer)
		writer.writeByte(0) // version
	end
	
	
	
	/**
	 * \brief Behavior supports loading data of another behavior.
	 * 
	 * Returns true if this behavior supports loading data of another behavior matching behavior
	 * identifier. Called for all behaviors if GameWorld encounters a data block with a behavior
	 * identifier not matching any behaviors.
	 */
	public func bool supportsBehaviorID(String identifier)
		return false
	end
	
	/**
	 * \brief Load data of another behavior.
	 * 
	 * Called if supportsBehaviorID(String) returns true for identifier. GameWorld requests
	 * behavior to load the supported data block.
	 */
	public func void loadSupportedData(String identifier, PersistencyEnvironment env, FileReader reader)
		throw EInvalidAction.new("not supported")
	end
end
