/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */


namespace Dragengine.Scenery

pin Dragengine.Preloading


/**
 * \brief Spawn point for actors and props.
 * 
 * Spawn points have a unique name and are added to the SpawnPointList of a GameWorld.
 */
class SpawnPointClass extends ElementClass
	/** \brief Name. */
	private var ECPString pName
	
	
	
	/** Creates a new SpawnPointClass object. */
	public func new() this( "SpawnPoint" )
	end
	
	/** Creates a new SpawnPointClass object. */
	public func new( String className ) super( className )
		this.pName = ECPString.new( "name", null )
		this.addProperty( this.pName )
		this.setPersistable( false )
	end
	
	
	
	/** \brief Name. */
	public func ECPString getName()
		return this.pName
	end
	
	
	
	/**
	 * \brief Create element from given stub and add it to game world.
	 * 
	 * Adds spawn point to game world.
	 */
	public func void createAndAddElement( StubElement stub, GameWorld gameWorld )
		var SpawnPoint spawnPoint = SpawnPoint.new( this.pName.getValue( stub ) )
		
		spawnPoint.setPosition( stub.getPosition() )
		spawnPoint.setOrientation( Quaternion.newFromEuler( stub.getRotation() ) )
		
		gameWorld.getSpawnPoints().add( spawnPoint )
	end
end
