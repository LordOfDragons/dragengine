/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */


namespace Dragengine.Scenery

pin Dragengine.Utils



/**
 * \brief List of Rail instances.
 * 
 * Rails define path for for elements or other objects requiring a path placed down by a
 * level artist in the game world. Rails have a unique identifier. This identifier is used
 * by elements to locate the path in RailList of the GameWorld they are located in. If not
 * found getWithID() returns null. To define rails use getOrAddWithID(). This method creates
 * the rail if not found and thus always returns a Rail instance. This is required because
 * the loading order of elements in a GameWorld is not well defined.
 * 
 * Rail class is usually not subclassed. To use subclasses Rail class overwrite createRail().
 */
class RailList
	private var Dictionary pRails
	
	
	
	/** \brief Create rail list. */
	public func new()
		this.pRails = Dictionary.new()
	end
	
	/** \brief Dispose. */
	public func void dispose()
		this.pRails.forEachValue( block Rail each
			each.dispose()
		end )
		this.pRails.removeAll()
	end
	
	
	
	/** \brief Number of rails. */
	public func int getCount()
		return this.pRails.getCount()
	end
	
	/** \brief Rail with identifier is present. */
	public func bool hasWithID( StringID id )
		return this.pRails.has( id )
	end
	
	/** \brief Rail with identifier or \em null if absent. */
	public func Rail getWithID( StringID id )
		return this.pRails.getAt( id, null ) cast Rail
	end
	
	/**
	 * \brief Rail with identifier.
	 * 
	 * Rail is created using createRail() if absent.
	 */
	public func Rail getOrAddWithID( StringID id )
		var Rail rail = this.getWithID( id )
		if rail == null
			rail = this.createRail( id )
			this.pRails.setAt( id, rail )
		end
		return rail
	end
	
	/** \brief Remove rail. */
	public func void remove( Rail rail )
		this.pRails.remove( rail.getID() )
		rail.dispose()
	end
	
	/** \brief Visit rails with block with parameter Rail. */
	public func void forEachRail( Block ablock )
		this.pRails.forEachValue( ablock )
	end
	
	
	
	/**
	 * \brief Create rail.
	 * 
	 * Overwrite by subclass to create instances of subclass of Rail.
	 */
	protected func Rail createRail( StringID id )
		return Rail.new( id )
	end
end
