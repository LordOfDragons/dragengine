/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */


namespace Dragengine.Scenery

pin Dragengine.Gui
pin Dragengine.LoadSave
pin Dragengine.Preloading
pin Dragengine.Utils
pin Dragengine.TriggerSystem


/**
 * \brief Behavior element behavior adding moving on rail support.
 * 
 * Behavior element class requires the \em ECBehaviorCollider behavior since the collider
 * is manipulated to move the element.
 * 
 * This element behavior can be present only once in a BehaviorElement. Trying to add more
 * than one instance results in an exception thrown.
 * 
 * When using this behavior it is recommended to call
 * ".getComponent().getRenderEnvMap().setValue(false)" on all ECBehaviorComponent used on the
 * element class.
 * 
 * Other behaviors can add listeners to be notified if the element starts or stops moving.
 * 
 * If a trigger table is present the "targetMoving" object property can be set by the mapper
 * to fire and clear a trigger target reflecting the moving state of the element.
 * 
 * Element class properties have the prefix "moveOnRail.".
 */
class ECBehaviorMoveOnRail extends DefaultECBehavior
	/** \brief Listener for behavior instance events. */
	interface Listener
		/** \brief Start moving along rail. */
		func void startMoving(Instance instance)
		
		/** \brief Stop moving. */
		func void stopMoving(Instance instance)
	end
	
	/** \brief Default implementation of behavior instance listener. */
	class DefaultListener implements Listener
		/** \brief Create default listener. */
		func new()
		end
		
		/** \brief Start moving along rail. */
		func void startMoving(Instance instance)
		end
		
		/** \brief Stop moving. */
		func void stopMoving(Instance instance)
		end
	end
	
	/** \brief Factory creating listeners. */
	interface ListenerFactory
		/** \brief Create listener. */
		func Listener createListener(Instance instance)
	end
	
	/** \brief Behavior instance. */
	class Instance extends DefaultECBehaviorInstance
		/** \brief Trigger listener to activate light. */
		public class MoveListener extends ECBehaviorTriggered.DefaultListener
			var Instance pInstance
			
			func new(Instance instance)
				pInstance = instance
			end
			
			func void triggerExpressionTrue(ECBehaviorTriggered.Instance instance)
				pInstance.startMoving()
			end
		end
		
		
		
		var ECBehaviorMoveOnRail pECBehavior
		var ECBehaviorCollider.Instance pCollider
		var ECComposeMoveOnRail.Mover pMover
		var ECBehaviorTriggered.Instance pTrigger
		var TSTriggerTable pTriggerTable
		var TSNamedTriggerTarget pTargetMoving
		var Array pListeners
		
		
		
		/** \brief Create element. */
		func new(ECBehaviorMoveOnRail ecbehavior, BehaviorElement element) super(element)
			pECBehavior = ecbehavior
			pTriggerTable = ecbehavior.getTriggerTable()
			pListeners = Array.new()
			pTargetMoving = TSNamedTriggerTarget.new()
			
			pCollider = ecbehavior.getCollider().instance(element)
			
			setRequiresEnterFrame(true)
		end
		
		/** \brief Dispose of composeable instance. */
		func void dispose()
			pMover = null
			pTrigger = null
			pTargetMoving = null
			pListeners = null
			pCollider = null
			super.dispose()
		end
		
		
		
		/** \brief Initialize element from stub. */
		func void init(StubElement stub)
			pMover = createMover(stub)
			
			if pTriggerTable != null
				pTrigger = getTriggerBehavior()
				pTrigger.addListener(MoveListener.new(this))
				
				pTargetMoving.setName(pECBehavior.getTargetMoving().getValue(stub))
			end
			
			pECBehavior.createListeners(this)
		end
		
		/**
		 * \brief Create mover instance helper.
		 * 
		 * Default implementation uses ECComposeMoveOnRail.createMover().
		 */
		protected func ECComposeMoveOnRail.Mover createMover(StubElement stub)
			return pECBehavior.getMoveOnRail().createMover(pCollider.getCollider(), stub)
		end
		
		
		
		/** \brief Collider behavior or \em null. */
		func ECBehaviorCollider.Instance getCollider()
			return pCollider
		end
		
		/** \brief Get trigger behavior. */
		protected func ECBehaviorTriggered.Instance getTriggerBehavior()
			return pECBehavior.getTrigger().instance(getElement())
		end
		
		
		
		/** \brief Mover. */
		func ECComposeMoveOnRail.Mover getMover()
			return pMover
		end
		
		/** \brief Start moving along rail if at rest. */
		func void startMoving()
			var bool moving = pMover.isMoving()
			
			pMover.startMoving()
			
			if pMover.isMoving() and not moving
				setRequiresThink(true)
				pTargetMoving.fire()
				pListeners.forEach(block Listener each
					each.startMoving(this)
				end)
			end
		end
		
		
		
		/** \brief Trigger table to link trigger expression to or \em null if not set. */
		func TSTriggerTable getTriggerTable()
			return pTriggerTable
		end
		
		/** \brief Trigger table to link trigger expression to or \em null if not set. */
		protected func void setTriggerTable(TSTriggerTable triggerTable)
			pTriggerTable = triggerTable
		end
		
		/** \brief Trigger activate or \em null. */
		func ECBehaviorTriggered.Instance getTrigger()
			return pTrigger
		end
		
		/** \brief Trigger target to reflect moving state. */
		func TSNamedTriggerTarget getTargetMoving()
			return pTargetMoving
		end
		
		
		
		/** \brief Add listener. */
		func void addListener(Listener listener)
			if listener == null
				throw EInvalidParam.new()
			end
			pListeners.add(listener)
		end
		
		/** \brief Remove listener. */
		func void removeListener(Listener listener)
			pListeners.remove(listener)
		end
		
		
		
		/** \brief Add element to game world. */
		func void addToGameWorld()
			if pTriggerTable == null
				return
			end
			
			pTargetMoving.acquireTarget(pTriggerTable)
			
			if pMover.isMoving()
				pTargetMoving.fire()
			end
		end
		
		/** \brief Remove element from game world. */
		func void removeFromGameWorld()
			pTargetMoving.dropTarget()
			pMover.setRail(null)
		end
		
		/** \brief Frame update started. */
		func void enterFrame()
			pMover.attachRail(getElement().getGameWorld().getRailList())
			
			if pTrigger != null and pTrigger.getState()
				startMoving()
			end
		end
		
		/** \brief Think about what to do for the next frame update. */
		func void think(float elapsed)
			var bool moving = pMover.isMoving()
			
			pMover.update(elapsed)
			setRequiresThink(pMover.isMoving())
			
			if moving and not pMover.isMoving()
				pTargetMoving.reset()
				pListeners.forEach(block Listener each
					each.stopMoving(this)
				end)
			end
		end
		
		
		
		/** \brief Read element from file. */
		func void readFromFile(PersistencyEnvironment env, FileReader reader)
			select reader.readByte() // version
			case 0
				var DVector position = DVector.readFromFile(reader)
				var Quaternion orientation = Quaternion.readFromFile(reader)
				pCollider.getCollider().setGeometry(position, orientation)
				
				pMover.readFromFile(env, reader)
				setRequiresThink(pMover.isMoving())
				
			else
				throw EInvalidParam.new("unsupported version")
			end
		end
		
		/** \brief Write element to file. */
		func void writeToFile(PersistencyEnvironment env, FileWriter writer)
			writer.writeByte(0) // version
			
			var Collider collider = pCollider.getCollider()
			collider.getPosition().writeToFile(writer)
			collider.getOrientation().writeToFile(writer)
			
			pMover.writeToFile(env, writer)
		end
	end
	
	
	
	var ECBehaviorCollider pCollider
	var ECComposeMoveOnRail pMoveOnRail
	var ECBehaviorTriggered pTrigger
	var ECPString pTargetMoving
	var TSTriggerTable pTriggerTable
	var Array pListenerFactories
	
	
	
	/** \brief Create behavior element class. */
	func new(BehaviorElementClass eclass, ECBehaviorCollider collider) \
	this(eclass, collider, null)
	end
	
	/** \brief Create behavior element class. */
	func new(BehaviorElementClass eclass, ECBehaviorCollider collider, \
	TSTriggerTable triggerTable) this(eclass, collider, triggerTable, "moveOnRail")
	end
	
	func new(BehaviorElementClass eclass, ECBehaviorCollider collider, \
	TSTriggerTable triggerTable, String subID) \
	this(eclass, collider, triggerTable, subID, subID + ".")
	end
	
	func new(BehaviorElementClass eclass, ECBehaviorCollider collider, \
	TSTriggerTable triggerTable, String subID, String prefix) super(eclass)
		if collider == null
			throw ENullPointer.new("collider")
		end
		if getBehaviorIn(eclass) != null
			throw BEMultipleInstanceException.new(eclass, this)
		end
		
		pCollider = collider
		pTriggerTable = triggerTable
		pListenerFactories = Array.new()
		
		pMoveOnRail = ECComposeMoveOnRail.new(eclass, prefix)
		
		pTrigger = ECBehaviorTriggered.new(eclass, triggerTable, subID, prefix + "trigger")
		
		pTargetMoving = ECPString.new(prefix + "targetMoving", "")
		eclass.addProperty(pTargetMoving)
		
		// ensure collider is kinematic
		var ECComposeCollider ccollider = collider.getCollider()
		ccollider.getPhysicsType().setEnumeration(CollisionResponse.kinematic)
		ccollider.getLocalGravity().setVector(Vector.new())
		
		ccollider.collisionCategoryReplace(LayerMask.newWith(BaseGameApp.CollisionFilterBit.dynamic))
		
		// ensure component is dynamic if present
		if collider.getComponent() != null
			var ECComposeComponent ccomponent = collider.getComponent().getComponent()
			ccomponent.getHintMovement().setEnumeration(ComponentHintMovement.dynamic)
			ccomponent.getRenderEnvMap().setValue(false)
		end
		
		// add behavior to class
		eclass.addBehavior(this)
	end
	
	/** \brief Dispose of behavior. */
	func void dispose()
		pCollider = null
		pListenerFactories = null
		super.dispose()
	end
	
	
	
	/** \brief Collider behavior. */
	func ECBehaviorCollider getCollider()
		return pCollider
	end
	
	/** \brief Composeable move on rail for element class. */
	func ECComposeMoveOnRail getMoveOnRail()
		return pMoveOnRail
	end
	
	/** \brief Trigger move. */
	func ECBehaviorTriggered getTrigger()
		return pTrigger
	end
	
	/** \brief Target move. */
	func ECPString getTargetMoving()
		return pTargetMoving
	end
	
	/** \brief Trigger table or \em null if not used. */
	func TSTriggerTable getTriggerTable()
		return pTriggerTable
	end
	
	/** \brief Set trigger table. */
	protected func void setTriggerTable(TSTriggerTable triggerTable)
		pTriggerTable = triggerTable
	end
	
	/** \brief Add listener factory. */
	func void addListenerFactory(ListenerFactory factory)
		if factory == null
			throw ENullPointer.new()
		end
		pListenerFactories.add(factory)
	end
	
	/** \brief Visit listener factories with block with argument ListenerFactory. */
	func void forEachListenerFactory(Block ablock)
		pListenerFactories.forEach(ablock)
	end
	
	/** \brief Create listeners from factories adding them to behavior instance. */
	func void createListeners(Instance instance)
		pListenerFactories.forEach(block ListenerFactory each
			instance.addListener(each.createListener(instance))
		end)
	end
	
	
	
	/** \brief Get instance in element from owner element class. */
	func Instance instance(BehaviorElement element)
		return element.getInstanceAt(getInstanceIndex()) cast Instance
	end
	
	
	
	/**
	 * \brief Get behavior in element class or \em null if absent.
	 * 
	 * Use this method to check if a particular BehaviorElementClass contains a behavior
	 * of type ECBehaviorCollider.
	 */
	static func ECBehaviorMoveOnRail getBehaviorIn(BehaviorElementClass eclass)
		return eclass.findBehavior(block ECBehaviorMoveOnRail each
			return true
		end) cast ECBehaviorMoveOnRail
	end
	
	/**
	 * \brief Get instance in element or \em null if absent.
	 * 
	 * Use this method to check if a particular BehaviorElement contains a behavior instance
	 * of type ECBehaviorMoveOnRail.Instance .
	 */
	static func Instance getInstanceIn(BehaviorElement element)
		return element.findInstance(block Instance each
			return true
		end) cast Instance
	end
	
	
	
	/** \brief Create element class behavior instance. */
	func ECBehaviorInstance createInstance(BehaviorElement element)
		return Instance.new(this, element)
	end
end
