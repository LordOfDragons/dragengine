/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */


namespace Dragengine.Scenery

pin Dragengine.Gui
pin Dragengine.Utils
pin Dragengine.Preloading


/**
 * \brief Simple element moving on rail.
 * 
 * Extends SimpleElement with support to move on a rail betweent he first and last corner.
 * If a moving trigger is present the element moves each time the trigger is pulsed.
 * Otherwise the element is constantly moving forth and back between the first and last
 * corner. This class registers the element for thinking.
 */
class SimpleElementOnRail extends SimpleElement
	private var ECBehaviorMoveOnRail.Instance pMoveOnRail
	
	
	
	/** \brief Create element. */
	public func new( SimpleElementOnRailClass eclass ) super( eclass )
	end
	
	/** \brief Disposes of element. */
	public func void dispose()
		this.pMoveOnRail = null
		super.dispose()
	end
	
	
	
	/** \brief Initialize element from stub. */
	public func void init( StubElement stub )
		super.init( stub )
		
		var Collider collider = this.getCollider().getCollider()
		collider.setCollisionFilter( this.modifyCollisionFilter( collider.getCollisionFilter(), stub ) )
	end
	
	/** \brief Modify collision filter. */
	protected func CollisionFilter modifyCollisionFilter( CollisionFilter collisionFilter, StubElement stub )
		var SimpleElementOnRailClass eclass = this.getClass() cast SimpleElementOnRailClass
		
		if eclass.getCanTrigger().getValue( stub )
			var LayerMask filter = collisionFilter.getFilter()
			filter.setBit( BaseGameApp.CollisionFilterBit.trigger )
			collisionFilter = CollisionFilter.new( collisionFilter.getCategory(), filter )
		end
		
		return collisionFilter
	end
	
	
	
	/** \brief Move on rail behavior instance. */
	public func ECBehaviorMoveOnRail.Instance getMoveOnRail()
		if this.pMoveOnRail == null
			this.pMoveOnRail = ( this.getClass() cast SimpleElementOnRailClass ).getMoveOnRail().instance( this )
		end
		return this.pMoveOnRail
	end
	
	
	
	/** \brief Visit element. */
	public func void visit( ElementVisitor visitor )
		visitor.visitSimpleElementOnRail( this )
	end
end
