/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */


namespace Dragengine.Scenery


/**
 * \brief Corner in a Rail.
 * 
 * Corners have a position, orientation and an order number. The order number is used to
 * sort the corners along the parent rail path. The rail is non-forking running from the
 * corner with the lowest order to the corner with the highest order. Adding corners
 * inserts them sorted by their order.
 * 
 * While the Rail class is usually not subclasses the RailCorner class is created by rail
 * corner element classes and can be subclassed to add additional properties to corners.
 */
class RailCorner
	private var int pOrder
	private var DVector pPosition
	private var Quaternion pOrientation
	private var DMatrix pMatrix
	
	
	
	/** \brief Create rail corner. */
	public func new( int order )
		this.pOrder = order
		this.pPosition = DVector.new()
		this.pOrientation = Quaternion.new()
	end
	
	/** \brief Create copy of rail corner. */
	public func new( RailCorner corner )
		this.pOrder = corner.pOrder
		this.pPosition = corner.pPosition
		this.pOrientation = corner.pOrientation
		this.pMatrix = corner.pMatrix
	end
	
	
	
	/**
	 * \brief Order.
	 * 
	 * The order number is used to sort the corners along the parent rail path. The rail is
	 * non-forking running from the corner with the lowest order to the corner with the
	 * highest order. Adding corners inserts them sorted by their order.
	 */
	public func int getOrder()
		return this.pOrder
	end
	
	/** \brief Position. */
	public func DVector getPosition()
		return this.pPosition
	end
	
	/** \brief Set position. */
	public func void setPosition( DVector position )
		if position == null
			throw EInvalidParam.new()
		end
		this.pPosition = position
		this.pMatrix = null
	end
	
	/** \brief Orientation. */
	public func Quaternion getOrientation()
		return this.pOrientation
	end
	
	/** \brief Set orientation. */
	public func void setOrientation( Quaternion orientation )
		if orientation == null
			throw EInvalidParam.new()
		end
		this.pOrientation = orientation
		this.pMatrix = null
	end
	
	/** \brief Matrix. */
	public func DMatrix getMatrix()
		if this.pMatrix == null
			this.pMatrix = DMatrix.newWorld( this.pPosition, this.pOrientation )
		end
		return this.pMatrix
	end
end

