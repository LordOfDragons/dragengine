/* 
 * Drag[en]gine DragonScript Script Module
 *
 * Copyright (C) 2020, Roland Pl√ºss (roland@rptd.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */


namespace Dragengine

pin Dragengine.LoadSave


/**
 * \brief Entry in a ParameterTable.
 * 
 * Values can be primitive values and objects implementing the Persistable interface.
 * Primitive values are converted as best between the stored value and the requested
 * value. Hence storing an integer value it can be retrieved later on as floating point
 * value or even a String value. If you store a floating point value and retrieve it
 * later on as integer value precision will be lost. If you store a string value and
 * retrieve it later on as boolean value the values "1", "true" and "yes" will be
 * converted to true with all other string values converted to false.
 * 
 * Values are cleared by setting them to \em null.
 */
class ParameterTableEntry
	/** \brief Parameter name. */
	var String pName
	
	/** \brief Value or \em null if not set. */
	var Object pValue
	
	
	
	/** \brief Create parameter table entry. */
	func new(String name)
		if name.empty()
			throw EInvalidParam.new()
		end
		
		pName = name
	end
	
	
	
	/** \brief Name. */
	func String getName()
		return pName
	end
	
	
	
	/** \brief Boolean value or default value if parameter is not set. */
	func bool getValue(bool defaultValue)
		if pValue != null
			if pValue castable Persistable
				return false
				
			elif pValue castable String
				return pValue.equals("1") or pValue.equals("true") or pValue.equals("yes")
				
			else
				return pValue cast bool
			end
			
		else
			return defaultValue
		end
	end
	
	/** \brief Integer value or default value if parameter is not set. */
	func int getValue(int defaultValue)
		if pValue != null
			if pValue castable Persistable
				return 0
				
			elif pValue castable String
				return (pValue cast String).toInt()
				
			else
				return pValue cast int
			end
			
		else
			return defaultValue
		end
	end
	
	/** \brief FLoating point value or default value if parameter is not set. */
	func float getValue(float defaultValue)
		if pValue != null
			if pValue castable Persistable
				return 0.0
				
			elif pValue castable String
				return (pValue cast String).toFloat()
				
			else
				return pValue cast float
			end
			
		else
			return defaultValue
		end
	end
	
	/** \brief String value or default value if parameter is not set. */
	func String getValue(String defaultValue)
		if pValue != null
			return pValue.toString()
			
		else
			return defaultValue
		end
	end
	
	/** \brief Persistable value or default value if parameter is not set. */
	func Persistable getValue(Persistable defaultValue)
		if pValue != null and pValue castable Persistable
			return pValue cast Persistable
			
		else
			return defaultValue
		end
	end
	
	/**
	 * \brief Value.
	 * \version 1.21
	 * 
	 * Can be of type bool, int, float, String, Persistable or null if not set.
	 */
	func Object getValue()
		return pValue
	end
	
	/** \brief Value is \em null. */
	func bool isNull()
		return pValue == null
	end
	
	/** \brief Value is not \em null. */
	func bool isNotNull()
		return pValue != null
	end
	
	
	
	/** \brief Set value or \em null if not set. */
	func void setValue(bool value)
		pValue = value
	end
	
	/** \brief Set value or \em null if not set. */
	func void setValue(int value)
		pValue = value
	end
	
	/** \brief Set value or \em null if not set. */
	func void setValue(float value)
		pValue = value
	end
	
	/** \brief Set value or \em null if not set. */
	func void setValue(String value)
		pValue = value
	end
	
	/** \brief Set value or \em null if not set. */
	func void setValue(Persistable value)
		pValue = value
	end
	
	/** \brief Clear value setting it to \em null. */
	func void clearValue()
		pValue = null
	end
	
	
	
	/** \brief Read parameter table entry from file. */
	static func ParameterTableEntry readFromFile(PersistencyEnvironment env, FileReader reader)
		select reader.readByte() // version
		case 0
			var ParameterTableEntry entry = ParameterTableEntry.new(reader.readString8())
			
			select reader.readByte()
			case 0
				// value is null
				
			case 1
				entry.pValue = env.readBool(reader)
				
			case 2
				entry.pValue = reader.readInt()
				
			case 3
				entry.pValue = reader.readFloat()
				
			case 4
				entry.pValue = reader.readString16()
				
			case 5
				entry.pValue = env.readObject(reader)
				
			else
				throw EInvalidParam.new()
			end
			
			return entry
			
		else
			throw EInvalidParam.new("unsupported version")
		end
	end
	
	/** \brief Write parameter table entry target to file. */
	func void writeToFile(PersistencyEnvironment env, FileWriter writer)
		writer.writeByte(0) // version
		
		writer.writeString8(pName)
		
		if pValue == null
			writer.writeByte(0)
			
		elif pValue castable bool
			writer.writeByte(1)
			env.writeBool(writer, pValue cast bool)
			
		elif pValue castable int
			writer.writeByte(2)
			writer.writeInt(pValue cast int)
			
		elif pValue castable float
			writer.writeByte(3)
			writer.writeFloat(pValue cast float)
			
		elif pValue castable String
			writer.writeByte(4)
			writer.writeString(pValue cast String)
			
		else
			writer.writeByte(5)
			env.writeObject(writer, pValue cast Persistable)
		end
	end
end
