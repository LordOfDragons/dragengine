/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

namespace Dragengine.SpeechAnimations

pin Dragengine.Gui
pin Dragengine.Scenery
pin Dragengine.Utils



/**
 * Speech animation.
 */
class SpeechAnimation
	private var String pNeutralMove
	private var Set pNeutralVertexPositionSets
	private var Array pPhonemes
	private var Array pWords
	private var String pPathAnimation
	private var String pPathRig
	private var Animator pAnimator
	
	
	
	/** Create speech animation. */
	public func new()
		pNeutralMove = ""
		pNeutralVertexPositionSets = Set.new()
		pPhonemes = Array.new()
		pWords = Array.new()
		pAnimator = Animator.new()
	end
	
	
	
	/** Name of neutral move. */
	public func String getNeutralMove()
		return pNeutralMove
	end
	
	/** Set name of neutral move. */
	public func void setNeutralMove(String moveName)
		if moveName == null
			throw EInvalidParam.new()
		end
		
		pNeutralMove = moveName
	end
	
	/**
	 * Neutral vertex position sets (Set of String).
	 * \version 1.17
	 */
	public func Set getNeutralVertexPositionSets()
		return pNeutralVertexPositionSets
	end
	
	/** Path to animation or null if not set. */
	public func String getPathAnimation()
		return pPathAnimation
	end
	
	/** Set path to animation or null if not set. */
	public func void setPathAnimation(String path)
		pPathAnimation = path
	end
	
	/** Path to rig or null if not set. */
	public func String getPathRig()
		return pPathRig
	end
	
	/** Set path to rig or null if not set. */
	public func void setPathRig(String path)
		pPathRig = path
	end
	
	/** Phoneme with IPA symbol or null if absent. */
	public func SpeechAnimationPhoneme getPhonemeWithIPA(int ipa)
		return pPhonemes.find(block SpeechAnimationPhoneme each
			return each.getIPA() == ipa
		end) cast SpeechAnimationPhoneme
	end
	
	/** Add phoneme. */
	public func void addPhoneme(SpeechAnimationPhoneme phoneme)
		if getPhonemeWithIPA(phoneme.getIPA()) != null
			throw EInvalidParam.new()
		end
		
		pPhonemes.add(phoneme)
	end
	
	/** Visit phoneme. */
	public func void forEachPhoneme(Block aBlock)
		pPhonemes.forEach(aBlock)
	end
	
	/** Word with name or null if absent. */
	public func SpeechAnimationWord getWordNamed(StringID name)
		return pWords.find(block SpeechAnimationWord each
			return each.getName().equals(name)
		end) cast SpeechAnimationWord
	end
	
	/** Add word. */
	public func void addWord(SpeechAnimationWord word)
		if getWordNamed(word.getName()) != null
			throw EInvalidParam.new()
		end
		
		pWords.add(word)
	end
	
	/** Visit word. */
	public func void forEachWord(Block aBlock)
		pWords.forEach(aBlock)
	end
	
	/** Animator. */
	public func Animator getAnimator()
		return pAnimator
	end
	
	/** Build animator. */
	public func void buildAnimator()
		var Array visemeMoves = Array.new()
		var Array visemeVPS = Array.new()
		var int controllerIndex, offsetVPS
		
		// build list of the viseme move names and set the controller indices at the same time
		pPhonemes.forEach(block SpeechAnimationPhoneme each
			if not each.getMoveName().empty() and each.getVertexPositionSet().empty()
				controllerIndex = visemeMoves.indexOf(each.getMoveName())
				if controllerIndex == -1
					controllerIndex = visemeMoves.getCount()
					visemeMoves.add(each.getMoveName())
				end
				each.setController(controllerIndex)
			end
		end)
		offsetVPS = visemeMoves.getCount()
		
		pPhonemes.forEach(block SpeechAnimationPhoneme each
			if not each.getVertexPositionSet().empty()
				controllerIndex = offsetVPS + visemeVPS.indexOf(each.getVertexPositionSet())
				if controllerIndex < offsetVPS
					controllerIndex = offsetVPS + visemeVPS.getCount()
					visemeVPS.add(each.getVertexPositionSet())
				end
				each.setController(controllerIndex)
			end
		end)
		
		// for each animation move used in all phonemes/ one controller and one
		// animation rule is added. these are considered the used visemes of all
		// phonemes. the controller is used to set the blend strength of each
		// viseme. The matching controllers are then assigned to each phoneme.
		// Multiple phonemes can therefore use the same controller.
		pAnimator.removeAllRules()
		pAnimator.removeAllLinks()
		pAnimator.setControllerCount(visemeMoves.getCount() + visemeVPS.getCount())
		
		// use the existing animation state
		var ARStateSnapshot ruleLastState = ARStateSnapshot.new()
		ruleLastState.setUseLastState(true)
		pAnimator.addRule(ruleLastState)
		
		// add rule for neutral vertex position sets
		if pNeutralVertexPositionSets.getCount() > 0
			var ARStateManipulator rule = ARStateManipulator.new()
			rule.setEnableOrientation(false)
			pNeutralVertexPositionSets.forEach(block String each
				rule.addVertexPositionSet(each)
			end)
			pAnimator.addRule(rule)
		end
		
		// set up controllers and add links and rules
		visemeMoves.forEach(block int index, String moveName
			pAnimator.addLink(index)
			
			var ARAnimation rule = ARAnimation.new()
			rule.setBlendMode(AnimatorRuleBlendMode.overlay)
			rule.setMoveName(moveName)
			rule.targetAddLink(ARAnimationTarget.blendFactor, index)
			pAnimator.addRule(rule)
		end)
		
		visemeVPS.forEach(block int index, String vertexPositionSet
			index += offsetVPS
			
			pAnimator.addLink(index)
			
			var ARStateManipulator rule = ARStateManipulator.new()
			rule.addVertexPositionSet(vertexPositionSet)
			rule.setEnableOrientation(false)
			rule.setMaximumVertexPositionSet(1)
			rule.targetAddLink(ARStateManipulatorTarget.vertexPositionSet, index)
			pAnimator.addRule(rule)
		end)
	end
end
