/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */


namespace Dragengine.Debugging

pin Dragengine.Gui
pin Dragengine.Scenery
pin Dragengine.Utils


/**
 * \brief Debug ECBehaviorActorMover.
 * 
 * To use create an instance of DebugBehaviorActorMover with the behavior to attach to.
 * Attaches a listener to the behavior and visualizes the behavior state. Different
 * information can be visualized individually. The debug instance stays active as long
 * as the behavior exists.
 */
class DebugBehaviorActorMover
	/** \brief Watch behavior listener. */
	class WatchBehavior extends ECBehaviorActorMover.DefaultListener
		var DebugBehaviorActorMover pDebug
		
		func new(DebugBehaviorActorMover debug)
			pDebug = debug
		end
		
		func void startMoving(ECBehaviorActorMover.Instance instance)
			pDebug.onStartMoving()
		end
		
		func void stopMoving(ECBehaviorActorMover.Instance instance)
			pDebug.onStopMoving()
		end
		
		func void arrivedAtGoal(ECBehaviorActorMover.Instance instance, DVector goalPosition)
			pDebug.onArrivedAtGoal(goalPosition)
		end
		
		func void modifyMoveTowards(ECBehaviorActorMover.Instance instance, DVector position, float elapsed)
			pDebug.onModifyMoveTowards(position, elapsed)
		end
	end
	
	
	
	var ECBehaviorActorMover.Instance pBehavior
	var DebugDrawer pDebugDrawer
	var GameWorld pGameWorld
	var float pBoxHalfExtends
	var float pSphereRadius
	var WeakReference pWatchBehavior
	var Console pConsole
	
	
	
	/** \brief Create debug instance for behavior. */
	func new(ECBehaviorActorMover.Instance behavior)
		pBoxHalfExtends = 0.015
		pSphereRadius = 0.03
		
		pBehavior = behavior
		var WatchBehavior watchBehavior = WatchBehavior.new(this)
		behavior.addListener(watchBehavior)
		pWatchBehavior = WeakReference.new(watchBehavior)
		
		pDebugDrawer = DebugDrawer.new()
		pDebugDrawer.setVisible(true)
		pDebugDrawer.setXRay(true)
		pDebugDrawer.setShapeCount(1)
		pDebugDrawer.shapeSetEdgeColor(0, Color.new(1, 0, 1, 1))
		pDebugDrawer.shapeSetFillColor(0, Color.new(1, 0, 1, 0.2))
	end
	
	
	
	/** \brief Remove from behavior. */
	func void removeFromBehavior()
		var WatchBehavior watchBehavior = pWatchBehavior.get() cast WatchBehavior
		if watchBehavior != null
			pWatchBehavior.set(null)
			pBehavior.removeListener(watchBehavior)
		end
	end
	
	
	
	/** \brief Box half-extends. */
	func float getBoxHalfExtends()
		return pBoxHalfExtends
	end
	
	/** \brief Set box half-extends. */
	func void setBoxHalfExtends(float halfExtends)
		pBoxHalfExtends = DEMath.max(halfExtends, 0.001)
	end
	
	/** \brief Sphere radius. */
	func float getSphereRadius()
		return pSphereRadius
	end
	
	/** \brief Set sphere radius. */
	func void setSphereRadius(float radius)
		pSphereRadius = DEMath.max(radius, 0.001)
	end
	
	/** \brief Debug drawer. */
	protected func DebugDrawer getDebugDrawer()
		return pDebugDrawer
	end
	
	/** \brief Set XRay mode. */
	func void setXRay(bool xray)
		pDebugDrawer.setXRay(xray)
	end
	
	/**
	 * \brief Console to log to or null.
	 * \version 1.24
	 */
	func Console getConsole()
		return pConsole
	end
	
	/**
	 * \brief Set console to log to or null.
	 * \version 1.24
	 */
	func void setConsole(Console console)
		pConsole = console
	end
	
	
	
	/** \brief Update move towards debug drawer shape. */
	protected func void updateShapeMoveTowards(DVector position)
		var DVector actorPosition = pBehavior.getElement().getPosition()
		var Vector direction = (position - actorPosition).toVector()
		var float distance = direction.getLength()
		var ShapeList shapes = ShapeList.new()
		
		if distance > 0.01
			var Vector view = direction / distance
			var Quaternion orientation
			
			if DEMath.fabs(view.getY()) < 0.99
				orientation = Matrix.newVU(view, Vector.new(0, 1, 0)).toQuaternion()
				
			else
				orientation = Matrix.newVU(view, Vector.new(0, 0, 1)).toQuaternion()
			end
			
			shapes.addBox(direction * 0.5, \
				Vector.new(pBoxHalfExtends, pBoxHalfExtends, distance * 0.5), \
				orientation)
		end
		
		shapes.addSphere(direction, pSphereRadius)
		
		pDebugDrawer.shapeSetShapes(0, shapes)
		pDebugDrawer.setPosition(actorPosition)
	end
	
	
	
	/** \brief Actor starts moving. */
	func void onStartMoving()
		if pGameWorld == null
			pGameWorld = pBehavior.getElement().getGameWorld()
			if pGameWorld != null
				pGameWorld.getWorld().addDebugDrawer(pDebugDrawer)
			end
		end
		
		if pConsole != null
			var String strPath
			
			if pBehavior.getPath() != null
				strPath = "(points={} length={})".format(Array.newWith(\
					pBehavior.getPath().getCount(), pBehavior.getPath().getLength()))
				
			else
				strPath = "-"
			end
			
			pConsole.addMessage("DebugBehaviorActorMover.onStartMoving: id={} path={}".format(\
				Array.newWith(pBehavior.getElement().getID(), strPath)))
		end
	end
	
	/** \brief Actor stops moving. */
	func void onStopMoving()
		pDebugDrawer.shapeSetShapes(0, ShapeList.new())
		
		if pGameWorld != null
			pGameWorld.getWorld().removeDebugDrawer(pDebugDrawer)
			pGameWorld = null
		end
		
		if pConsole != null
			pConsole.addMessage("DebugBehaviorActorMover.onStopMoving: id={}".format(\
				Array.newWith(pBehavior.getElement().getID())))
		end
	end
	
	/** \brief Actor arrived at target. */
	func void onArrivedAtGoal(DVector goalPosition)
		if pConsole != null
			pConsole.addMessage("DebugBehaviorActorMover.onArrivedAtGoal: id={} position={}".format(\
				Array.newWith(pBehavior.getElement().getID(), goalPosition)))
		end
	end
	
	/** \brief Modify move towards. */
	func void onModifyMoveTowards(DVector position, float elapsed)
		updateShapeMoveTowards(position)
	end
end
