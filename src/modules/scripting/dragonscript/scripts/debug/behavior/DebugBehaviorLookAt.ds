/* 
 * Drag[en]gine DragonScript Script Module
 *
 * Copyright (C) 2020, Roland PlÃ¼ss (roland@rptd.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */


namespace Dragengine.Debugging

pin Dragengine.Gui
pin Dragengine.Scenery
pin Dragengine.Utils


/**
 * \brief Debug ECBehaviorLookAt.
 * 
 * To use create an instance of DebugBehaviorLookAt with the behavior to attach to.
 * Attaches a listener to the behavior and adds a debug information overlay to the screen
 * showing what element the behavior is looking at right now. If no debug information is
 * available uses the console instead.
 */
class DebugBehaviorLookAt
	/** \brief Watch behavior listener. */
	class WatchBehavior extends ECBehaviorLookAt.DefaultListener
		var DebugBehaviorLookAt pDebug
		
		func new(DebugBehaviorLookAt debug)
			pDebug = debug
		end
		
		func void enabledChanged(ECBehaviorLookAt.Instance instance)
			pDebug.onEnabledChanged()
		end
		
		func void lookAtChanged(ECBehaviorLookAt.Instance instance)
			pDebug.onLookAtChanged()
		end
	end
	
	/** \brief Debug information. */
	class LookAtDebugInfo implements DebugInformation
		var ECBehaviorLookAt.Instance pBehavior
		var String pLabel
		var String pDetails
		
		func new(ECBehaviorLookAt.Instance behavior, String label)
			pBehavior = behavior
			pLabel = label + ":"
			pDetails = ""
		end
		
		func String getLabel()
			return pLabel
		end
		
		func String getDetails()
			return pDetails
		end
		
		func void reset()
			var Element element = pBehavior.getLookAtElement()
			if element == null
				pDetails = "(none)"
				return
			end
			
			pDetails = "{}[{}]".format(Array.newWith(element.getClass().getClassname(), element.getID()))
			
			var String bone = pBehavior.getLookAtBoneName()
			if bone != null
				pDetails = "{}({})".format(Array.newWith(pDetails, bone))
			end
			
			pDetails = "{} {:.3f}".format(Array.newWith(pDetails, pBehavior.getLookAtDistance()))
		end
	end
	
	
	
	var ECBehaviorLookAt.Instance pBehavior
	var PanelDebugInformation pPanelDebugInformation
	var Console pConsole
	var WeakReference pWatchBehavior
	var LookAtDebugInfo pLookAtDebugInfo
	var String pLabel
	
	var Element pLookAtElement
	var String pLookAtBone
	
	
	
	/** \brief Create debug instance for behavior. */
	func new(ECBehaviorLookAt.Instance behavior, PanelDebugInformation panelDebugInfo)\
	this(behavior, panelDebugInfo, null)
	end
	
	/** \brief Create debug instance for behavior. */
	func new(ECBehaviorLookAt.Instance behavior, Console console) this(behavior, null, console)
	end
	
	private func new(ECBehaviorLookAt.Instance behavior, PanelDebugInformation panelDebugInfo, Console console)
		if panelDebugInfo == null and console == null
			throw EInvalidParam.new()
		end
		
		pBehavior = behavior
		var WatchBehavior watchBehavior = WatchBehavior.new(this)
		behavior.addListener(watchBehavior)
		pWatchBehavior = WeakReference.new(watchBehavior)
		
		pLabel = "Look-At({}) {}".format(Array.newWith(\
			behavior.getECBehavior().getID(), behavior.getElement().getID()))
		
		if panelDebugInfo != null
			pPanelDebugInformation = panelDebugInfo
			pLookAtDebugInfo = LookAtDebugInfo.new(behavior, pLabel)
			panelDebugInfo.addDebugInfo(pLookAtDebugInfo)
			
		else
			pConsole = console
		end
	end
	
	/** \brief Destructor. */
	func void destructor()
		if pLookAtDebugInfo != null
			pPanelDebugInformation.removeDebugInfo(pLookAtDebugInfo)
		end
	end
	
	
	
	/** \brief Remove from behavior. */
	func void removeFromBehavior()
		var WatchBehavior watchBehavior = pWatchBehavior.get() cast WatchBehavior
		if watchBehavior != null
			pWatchBehavior.set(null)
			pBehavior.removeListener(watchBehavior)
		end
		
		if pLookAtDebugInfo != null
			pPanelDebugInformation.removeDebugInfo(pLookAtDebugInfo)
			pLookAtDebugInfo = null
		end
	end
	
	
	
	func void onEnabledChanged()
		if pLookAtDebugInfo != null
			return
		end
		
		if pBehavior.getEnabled()
			pConsole.addMessage(pLabel + ": Enabled")
			
		else
			pConsole.addMessage(pLabel + ": Disabled")
		end
	end
	
	func void onLookAtChanged()
		if pLookAtDebugInfo != null
			return
		end
		
		var Element element = pBehavior.getLookAtElement()
		var String bone = pBehavior.getLookAtBoneName()
		
		var String oldElement = "(none)"
		if pLookAtElement != null
			if pLookAtBone != null
				oldElement = "{}({})".format(Array.newWith(\
					pLookAtElement.getClass().getClassname(), pLookAtBone))
				
			else
				oldElement = pLookAtElement.getClass().getClassname()
			end
		end
		
		var String newElement = "(none)"
		if element != null
			if bone != null
				newElement = "{}({})".format(Array.newWith(element.getClass().getClassname(), bone))
				
			else
				newElement = element.getClass().getClassname()
			end
		end
		
		pConsole.addMessage("{}: Changed {} => {}".format(Array.newWith(pLabel, oldElement, newElement)))
		
		pLookAtElement = element
		pLookAtBone = bone
	end
end
