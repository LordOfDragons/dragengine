/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */


namespace Dragengine.Debugging

pin Dragengine.Scenery
pin Dragengine.Utils


/**
 * \brief Debug element class information printer.
 * 
 * Prints information about all element classes in an an ElementClassList to the Console
 * or a FileWriter. This can be used to store a snapshot of all properties and behaviors
 * supported by element classes. By storing this to a file this can be used as reference
 * documentation.
 */
class DebugElementClassInfo
	/** \brief Stream out interface. */
	public interface StreamOut
		/** \brief Write text block containing multiple lines. */
		func void writeBlock( String text )
	end
	
	/** \brief Stream out to FileWriter. */
	public class FileWriterOut implements StreamOut
		private var FileWriter pFileWriter
		
		/** \brief Create FileWriterOut. */
		public func new( String filename ) this( FileWriter.new( filename ) )
		end
		
		/** \brief Create FileWriterOut. */
		public func new( FileWriter writer )
			this.pFileWriter = writer
		end
		
		/** \brief File writer. */
		public func FileWriter getFileWriter()
			return this.pFileWriter
		end
		
		/**
		 * \brief Write text block containing multiple lines.
		 * 
		 * Splits text block into lines writing each using writeLine(String)
		 * followed by an empty line.
		 */
		public func void writeBlock( String text )
			text.split( '\n' ).forEach( block String line
				this.writeLine( line )
			end )
			this.writeLine( "" )
		end
		
		/** \brief Write text line. */
		public func void writeLine( String text )
			this.pFileWriter.writeString( text + "\n" )
		end
	end
	
	/** \brief Stream out to Console. */
	public class ConsoleOut implements StreamOut
		private var Console pConsole
		
		/** \brief Create Console. */
		public func new( Console console )
			this.pConsole = console
		end
		
		/** \brief Write text block containing multiple lines. */
		public func void writeBlock( String text )
			this.pConsole.addMessage( text )
		end
	end
	
	
	
	private var bool pPrintProperties
	private var bool pPrintBehaviors
	
	
	/** \brief Create debug printer. */
	public func new()
		this.pPrintProperties = true
		this.pPrintBehaviors = true
	end
	
	
	
	/** \brief Print element class properties. */
	public func bool getPrintProperties()
		return this.pPrintProperties
	end
	
	/** \brief Set if element class properties are printed. */
	public func void setPrintProperties( bool printProperties )
		this.pPrintProperties = printProperties
	end
	
	/** \brief Print element class behaviors. */
	public func bool getPrintBehaviors()
		return this.pPrintBehaviors
	end
	
	/** \brief Set if element class behaviors are printed. */
	public func void setPrintBehaviors( bool printBehaviors )
		this.pPrintBehaviors = printBehaviors
	end
	
	
	
	/** \brief Print element class information. */
	public func void print( StreamOut streamOut, ElementClass eclass )
		var Array text = Array.new()
		
		text.add( eclass.getClassname() )
		text.add( "- Script Class: " + eclass.className() )
		text.add( "- Base Path: " + eclass.getBasePath() )
		
		if this.pPrintBehaviors and eclass castable BehaviorElementClass
			( eclass cast BehaviorElementClass ).forEachBehavior( block ECBehavior each
				if each castable DefaultECBehavior
					var DefaultECBehavior behavior = each cast DefaultECBehavior
					text.add( "- Behavior " + each.className() + ": id(" + behavior.getID() \
						+ ") index(" + behavior.getInstanceIndex() + ")" )
					
				else
					text.add( "- Behavior " + each.className() )
				end
			end )
		end
		
		if this.pPrintProperties
			var Array properties = Array.new()
			
			eclass.forEachProperty( block ElementClassProperty each
				properties.add ( each )
			end )
			
			properties.sorted( block ElementClassProperty a, ElementClassProperty b
				return a.getName().compare( b.getName() )
			end ).forEach( block ElementClassProperty each
				text.add( "- Property '" + each.getName() + "': " + each.className() )
			end )
		end
		
		streamOut.writeBlock( text.inject( "", block String result, String next
			return result + "\n" + next
		end ) cast String )
	end
	
	/** \brief Print information for all element classes in list. */
	public func void print( StreamOut streamOut, ElementClassList list )
		list.forEach( block ElementClass each
			this.print( streamOut, each )
		end )
	end
end
