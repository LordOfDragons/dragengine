/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */


namespace Dragengine.Debugging

pin Dragengine.Preloading
pin Dragengine.Scenery
pin Dragengine.Utils


/**
 * \brief Debug log thinking elements.
 * 
 * Prints all thinkers registered in a GameWorld instance. For each thinker of type
 * BehaviorElement also prints all behavior instances with requiresThinking() returning true.
 * 
 * This debug class can be used to find potential performance problems by locating elements
 * and behaviors in a game world that are thinking although they should be doing nothing instead.
 */
class DebugLogThinkers
	/**
	 * \brief Visitor printing thinkers.
	 * 
	 * Supports printing behaviors on BehaviorElement.
	 */
	public class LogThinkerVisitor extends ElementVisitor
		private var WeakReference pOwner
		
		/**
		 * \brief Create visitor.
		 */
		public func new( DebugLogThinkers owner )
			this.pOwner = WeakReference.new( owner )
		end
		
		/**
		 * \brief Owner.
		 */
		public func DebugLogThinkers getOwner()
			return this.pOwner.get() cast DebugLogThinkers
		end
		
		/**
		 * Log element and all behaviors returning true for requiresThinking.
		 */
		public func void visitBehaviorElement( BehaviorElement element )
			super.visitBehaviorElement( element )
			
			element.forEachInstance( block ECBehaviorInstance each
				if each.requiresThink()
					if each castable DefaultECBehavior
						var DefaultECBehavior behavior = each cast DefaultECBehavior
						this.getOwner().getConsole().addMessage( "{}  - {}: id({}) index({})" \
							.format( Array.newWith( this.getOwner().getLogPrefix(), \
								behavior.getID(), behavior.getInstanceIndex() ) ) )
						
					else
						this.getOwner().getConsole().addMessage( "{}  - {}".format( \
							Array.newWith( this.getOwner().getLogPrefix(), each.className() ) ) )
							
					end
				end
			end )
		end
		
		/**
		 * Log element.
		 */
		public func void visitElement( Element element )
			this.getOwner().getConsole().addMessage( "{}- {}: id({}) position({})".format( \
				Array.newWith( this.getOwner().getLogPrefix(), element.getClass().getClassname(), \
					element.getID(), element.getPosition() ) ) )
		end
	end
	
	
	
	private var Console pConsole
	private var String pLogPrefix
	private var ElementVisitor pVisitor
	
	
	
	/** \brief Create debug instance using BaseGameApp. */
	public func new() this( BehaviorElementClass.sharedFactoryHelper.defaultConsole() )
	end
	
	/** \brief Create debug instance. */
	public func new( Console console )
		this.pConsole = console
		this.pLogPrefix = ""
		this.pVisitor = LogThinkerVisitor.new( this )
	end
	
	
	
	/** \brief Console to use. */
	public func Console getConsole()
		return this.pConsole
	end
	
	/** \brief Set console to use. */
	public func void setConsole( Console console )
		this.pConsole = console
	end
	
	/** \brief Prefix prepended to logs written. */
	public func String getLogPrefix()
		return this.pLogPrefix
	end
	
	/** \brief Set prefix prepended to logs written. */
	public func void setLogPrefix( String prefix )
		this.pLogPrefix = prefix
	end
	
	/** \brief Visitor to apply to thinkers. */
	public func ElementVisitor getVisitor()
		return this.pVisitor
	end
	
	/** \brief Set visitor to apply to thinkers. */
	public func void setVisitor( ElementVisitor visitor )
		this.pVisitor = visitor
	end
	
	
	
	/** \brief Print thinking elements and behaviors in game world. */
	public func void logThinkers( GameWorld gameWorld )
		gameWorld.forEachThinker( block Element each
			this.logThinker( each )
		end )
	end
	
	/**
	 * \brief Print thinker.
	 * 
	 * Applies visitor to thinker.
	 */
	public func void logThinker( Element element )
		element.visit( this.pVisitor )
	end
end
