/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */


namespace Dragengine.Debugging

pin Dragengine.Gui
pin Dragengine.Scenery
pin Dragengine.Utils


/**
 * \brief Debug element class saving the content of a canvas view into a file.
 * 
 * To use create instance of this class with the filename and canvas view to capture.
 * The class keeps itself alive as long as the capturing takes place. There is no need
 * to store the created instance. If a console is set the class will add a message if
 * the capturing finished successfully. Uses by default BaseGameApp console if present.
 */
class DebugCaptureCanvasView extends FrameUpdateListener
	private var CaptureCanvas pCaptureCanvas
	private var String pFilename
	private var Console pConsole
	
	
	/**
	 * \brief Start capturing canvas view into file.
	 */
	public func new( String filename, CanvasView canvasView ) \
	this( filename, canvasView, BaseGameApp.getApp().getConsole() )
	end
	
	/**
	 * \brief Start capturing canvas view into file and add console message if finished.
	 */
	public func new( String filename, CanvasView canvasView, Console console )
		this.pFilename = filename
		this.pConsole = console
		
		this.pCaptureCanvas = CaptureCanvas.new()
		this.pCaptureCanvas.setCanvasView( canvasView )
		this.pCaptureCanvas.setImage( canvasView.getSize().getX(), canvasView.getSize().getY(), 4, 8 )
		this.pCaptureCanvas.setCapture( true )
	end
	
	/**
	 * \brief Start capturing widget into file.
	 */
	public func new( String filename, Widget widget ) \
	this( filename, widget.getCanvasWidget() )
	end
	
	/**
	 * \brief Start capturing widget into file and add console message if finished.
	 */
	public func new( String filename, Widget widget, Console console ) \
	this( filename, widget.getCanvasWidget(), console )
	end
	
	
	
	/**
	 * \brief Frame update.
	 */
	public func void frameUpdate( float elapsed )
		if this.pCaptureCanvas.getCapture()
			return
		end
		
		var bool success = true
		
		try
			this.pCaptureCanvas.getImage().saveToFile( this.pFilename )
			
		catch Exception e
			success = false
			if this.pConsole != null
				this.pConsole.addError( "DebugCaptureCanvasView failed for '" + this.pFilename + "'", e )
			end
		end
		
		try
			if success
				if this.pConsole != null
					this.pConsole.addMessage( "DebugCaptureCanvasView saved '" + this.pFilename + "'" )
				end
				this.onCaptureSucceeded()
				
			else
				this.onCaptureFailed()
			end
			
		catch Exception e
			if this.pConsole != null
				this.pConsole.addError( "DebugCaptureCanvasView", e )
			end
		end
		
		this.pCaptureCanvas = null
		this.giveUp()
	end
	
	/**
	 * \brief Capture succeeded.
	 */
	protected func void onCaptureSucceeded()
	end
	
	/**
	 * \brief Capture failed.
	 */
	protected func void onCaptureFailed()
	end
end
