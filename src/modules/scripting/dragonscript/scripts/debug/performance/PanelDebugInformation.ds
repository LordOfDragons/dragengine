/* 
 * Drag[en]gine DragonScript Script Module
 *
 * Copyright (C) 2020, Roland PlÃ¼ss (roland@rptd.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */


namespace Dragengine.Debugging

pin Dragengine.Gui.Events
pin Dragengine.Gui.Layouts


/**
 * \brief Panel displaying debug information entries.
 * 
 * Basically a FormLayout aligned list of debug information entries. Each entry shows a
 * label and a detail text. The window is transparent to be overlayed on screen. The window
 * is set invisible if no debug information are present. Every frame update the debug
 * information are captured and stored in Label objects in the window. Then the debug
 * information are reset for the next frame to collect data. The developer does not have
 * to do anything else than adding debug information objects to the window.
 */
class PanelDebugInformation extends Panel
	var Array pDebugInformation
	var Array pSortedList
	
	
	
	/** \brief Create window. */
	func new() super(10, 10, 100, 50)
		pDebugInformation = Array.new()
		
		setLayout(FormLayout.new(true, 10, 1))
		setDesignerSelector("PanelDebugInformation")
		setVisible(false)
	end
	
	/** \brief Dispose of widget. */
	func void dispose()
		pDebugInformation = null
		super.dispose()
	end
	
	
	
	/** \brief Number of debug information. */
	func int getDebugInfoCount()
		return pDebugInformation.getCount()
	end
	
	/** \brief Debug information is present. */
	func bool hasDebugInfo(DebugInformation debugInfo)
		return pDebugInformation.has(debugInfo)
	end
	
	/** \brief Debug information at position. */
	func DebugInformation getDebugInfoAt(int index)
		return pDebugInformation.getAt(index) cast DebugInformation
	end
	
	/** \brief Add debug information. */
	func void addDebugInfo(DebugInformation debugInfo)
		pDebugInformation.add(debugInfo)
		pSortedList = null
		startFrameUpdater()
	end
	
	/** \brief Remove debug information. */
	func void removeDebugInfo(DebugInformation debugInfo)
		pDebugInformation.remove(debugInfo)
		pSortedList = null
	end
	
	/** \brief Remove all debug information. */
	func void removeAllDebugInfo()
		pDebugInformation.removeAll()
		pSortedList = null
	end
	
	/** \brief Visit debug information with block with parameter DebugInformation. */
	func void forEach(Block ablock)
		pDebugInformation.forEach(ablock)
	end
	
	
	
	/**
	 * \brief Do frame update.
	 * 
	 * Captures the debug information into Labels in the window then resets all debug
	 * information. Shows the window if debug information are present. Does nothing
	 * if there are no debug information present.
	 */
	func void onFrameUpdate(float elapsed)
		captureDebugInfo()
		
		setVisible(pDebugInformation.getCount() > 0)
		
		if not getVisible()
			stopFrameUpdater()
		end
	end
	
	
	
	/** \brief Capture debug information. */
	protected func void captureDebugInfo()
		if pSortedList == null
			pSortedList = Array.new(pDebugInformation)
		end
		
		var int count = pSortedList.getCount()
		if count == 0
			removeAllWidgets()
			return
		end
		
		/*pSortedList.sort(block DebugInformation a, DebugInformation b
			return a.getLabel().compare(b.getLabel())
		end)*/
		
		runWhileBlockingLayout(block
			var int widgetIndex = getWidgetCount()
			var int requiredCount = count * 2
			var Label label
			while widgetIndex > requiredCount
				widgetIndex--
				removeWidget(getWidget(widgetIndex))
			end
			
			widgetIndex = getWidgetCount() / 2
			while widgetIndex < count
				label = Label.new("")
				label.setDesignerSelector("Label.PanelDebugInformation.Label")
				addWidget(label)
				
				label = Label.new("")
				label.setDesignerSelector("Label.PanelDebugInformation.Details")
				addWidget(label)
				
				widgetIndex++
			end
			
			var DebugInformation debugInfo
			var int i
			
			widgetIndex = 0
			for i = 0 to count
				debugInfo = pSortedList.getAt(i) cast DebugInformation
				(getWidget(widgetIndex++) cast Label).setText(debugInfo.getLabel())
				(getWidget(widgetIndex++) cast Label).setText(debugInfo.getDetails())
				debugInfo.reset()
			end
		end)
		
		doLayoutIfBlocked()
	end
end

