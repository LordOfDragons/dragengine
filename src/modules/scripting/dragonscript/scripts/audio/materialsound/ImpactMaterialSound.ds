/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */


namespace Dragengine.Audio.MaterialSounds

pin Dragengine.Scenery


/**
 * \brief Impact material sound.
 * 
 * Material sounds used for objects hitting each other. Typically used for collisions between
 * dynamic or kinematic colliders. Collider rig shapes are assigned the model texture they
 * belong to. This can be used to figure out what skins are involved in the collision. Using
 * SkinAnnotations the ImpactMaterialSound identifier for the skin file path can be looked up.
 * Each ImpactMaterialSound involved in the collision plays back an impact sound. This allows
 * to simulate a vaste amount of inter-material collisions without needing to record an explicit
 * sound for each possible combination of materials. You only need to record a collision sound
 * for each material.
 */
class ImpactMaterialSound
	private var String pID
	private var MaterialSound pSound
	private var float pImpulsePower
	
	
	
	/** \brief Create material. */
	public func new( String id )
		if id == null
			throw EInvalidParam.new()
		end
		
		this.pID = id
		this.pSound = MaterialSound.new()
		this.pImpulsePower = 0.2
	end
	
	/** \brief Create copy of material with new identifier. */
	public func new( String id, ImpactMaterialSound material )
		if id == null
			throw EInvalidParam.new()
		end
		
		this.pID = id
		this.pSound = MaterialSound.new( material.pSound )
		this.pImpulsePower = material.pImpulsePower
	end
	
	
	
	/** \brief Identifier. */
	public func String getID()
		return this.pID
	end
	
	/** \brief Impact sound. */
	public func MaterialSound getSound()
		return this.pSound
	end
	
	/** \brief Set impact sound. */
	public func void setSound( MaterialSound sound )
		this.pSound = sound
	end
	
	/** \brief Conversation factor from impulse to impact power. */
	public func float getImpulsePower()
		return this.pImpulsePower
	end
	
	/** \brief Set conversation factor from impulse to power. */
	public func void setImpulsePower( float factor )
		this.pImpulsePower = DEMath.max( factor, 0.0 )
	end
	
	
	
	/**
	 * \brief Play impact sound of this material hitting another.
	 * \param[in] world World to play sound in.
	 * \param[in] collision Collision information originating by owner this material.
	 * \param[in] material Hit material. If \em null default parameters are assumed.
	 */
	public func void playSound( GameWorld world, CollisionInfo collision, ImpactMaterialSound material )
		this.playSound( world, collision.getPosition(), collision.getImpulse() )
	end
	
	/**
	 * \brief Play impact sound of this material hitting another.
	 * \param[in] world World to play sound in.
	 * \param[in] position Impact position in world space.
	 * \param[in] impulse Impact impulse.
	 * \param[in] material Hit material. If \em null default parameters are assumed.
	 */
	public func void playSound( GameWorld world, DVector position, float impulse, ImpactMaterialSound material )
		this.playSound( world, position, impulse )
	end
	
	/**
	 * \brief Play impact sound.
	 * \param[in] world World to play sound in.
	 * \param[in] position Impact position in world space.
	 * \param[in] impulse Impact impulse.
	 */
	public func void playSound( GameWorld world, DVector position, float impulse )
		this.pSound.playSound( world, position, impulse * this.pImpulsePower )
	end
end
