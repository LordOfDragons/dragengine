/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */


namespace Dragengine.Audio.MaterialSounds

pin Dragengine.Gui
pin Dragengine.Files
pin Dragengine.LoadSave
pin Dragengine.Scenery
pin Dragengine.Utils
pin Dragengine.XML



/**
 * \brief Load impact material sounds from xml file.
 */
class LoadImpactMaterialSound extends BaseXmlLoader
	private var LoadSynthesizer pSynthesizerLoader
	
	
	
	/** \brief Create loader. */
	public func new( Console console ) this( console, "LoadImpactMaterialSounds" )
	end
	
	/** \brief Create loader. */
	public func new( Console console, String name ) super( console, name )
	end
	
	
	
	/** \brief Synthesizer loader. */
	public func LoadSynthesizer getSynthesizerLoader()
		return this.pSynthesizerLoader
	end
	
	/** \brief Set synthesizer loader. */
	public func void setSynthesizerLoader( LoadSynthesizer loader )
		this.pSynthesizerLoader = loader
	end
	
	
	
	/** \brief Load impact material sounds from xml file. */
	public func void loadFromFile( String filename, ImpactMaterialSounds materials )
		this.logLoadingFromFile( filename )
		
		var EasyXML document = EasyXML.new( filename )
		if document.hasParseFailed()
			this.logParsingFailed( document.getParseLog() )
			throw EInvalidParam.new()
		end
		
		var EasyXMLElement root = document.getRootElement()
		if not root.getTagName().equals( "impactMaterialSound" )
			this.logUnknownTag( root )
			throw EInvalidParam.new()
		end
		
		this.parseImpactMaterialSound( root, materials, File.new( filename ).getParent().getPath() )
	end
	
	/**
	 * \brief Scan for skin annotation files loading them.
	 * 
	 * Skin annotation files have the extension ".deimsnd".
	 * 
	 * \param materials Impact material sounds to load files into.
	 * \param directory Absolute path to directory to scan for files.
	 * \param recursive If true scans also in all child directories.
	 */
	public func void loadFromFiles( ImpactMaterialSounds materials, String directory, bool recursive )
		this.loadFromFiles( materials, directory, "*.deimsnd", recursive )
	end
	
	/**
	 * \brief Scan for skin annotation files loading them.
	 * 
	 * Skin annotation files have the extension ".deimsnd".
	 * 
	 * \param materials Impact material sounds to load files into.
	 * \param directory Absolute path to directory to scan for files.
	 * \param pattern File pattern to match. Has to be of the form "*.extension"
	 * \param recursive If true scans also in all child directories.
	 */
	public func void loadFromFiles( ImpactMaterialSounds materials, String directory, \
	String pattern, bool recursive )
		FileSystem.searchFiles( directory, recursive, block String each, FileType type
			if type == FileType.file and FileSystem.pathMatchesPattern( File.new( each ).getName(), pattern )
				this.loadFromFile( each, materials )
			end
			return true
		end )
	end
	
	
	
	/** \brief Parse impact material sound tag. */
	public func void parseImpactMaterialSound( EasyXMLElement root, \
	ImpactMaterialSounds materials, String baseDirectory )
		var ImpactMaterialSound material = ImpactMaterialSound.new( root.getAttributeNamed( "id" ) )
		
		if materials.hasWithID( material.getID() )
			this.logDuplicateObject( root, "ImpactMaterialSound", material.getID() )
			throw EInvalidParam.new()
		end
		
		root.forEachTag( block EasyXMLElement element, String tagName
			if tagName.equals( "sound" )
				material.setSound( this.parseMaterialSound( element, baseDirectory ) )
				
			elif tagName.equals( "impulsePower" )
				material.setImpulsePower( element.getFirstCDataFloat() )
				
			else
				this.logUnknownTag( element )
				throw EInvalidParam.new()
			end
		end )
		
		materials.add( material )
	end
	
	/** \brief Parse material sound tag. */
	public func MaterialSound parseMaterialSound( EasyXMLElement root, String baseDirectory )
		var MaterialSound materialSound = MaterialSound.new()
		
		root.forEachTag( block EasyXMLElement element, String tagName
			if tagName.equals( "minPower" )
				materialSound.setMinPower( element.getFirstCDataFloat() )
				
			elif tagName.equals( "maxPower" )
				materialSound.setMaxPower( element.getFirstCDataFloat() )
				
			elif tagName.equals( "power" )
				var float power = element.getFirstCDataFloat()
				materialSound.setMinPower( power )
				materialSound.setMaxPower( power )
				
			elif tagName.equals( "minVolume" )
				materialSound.setMinVolume( element.getFirstCDataFloat() )
				
			elif tagName.equals( "maxVolume" )
				materialSound.setMaxVolume( element.getFirstCDataFloat() )
				
			elif tagName.equals( "volume" )
				var float volume = element.getFirstCDataFloat()
				materialSound.setMinVolume( volume )
				materialSound.setMaxVolume( volume )
				
			elif tagName.equals( "minRange" )
				materialSound.setMinRange( element.getFirstCDataFloat() )
				
			elif tagName.equals( "maxRange" )
				materialSound.setMaxRange( element.getFirstCDataFloat() )
				
			elif tagName.equals( "range" )
				var float range = element.getFirstCDataFloat()
				materialSound.setMinRange( range )
				materialSound.setMaxRange( range )
				
			elif tagName.equals( "sound" )
				var String value = element.getFirstCData()
				
				try
					materialSound.addSound( Sound.new( File.absolutePath( value, baseDirectory ).getPath() ) )
					
				catch Exception e
					this.logLoadFileFailed( element, value )
				end
				
			elif tagName.equals( "synthesizer" )
				var String value = element.getFirstCData()
				if value.empty()
					return null
				end
				
				try
					materialSound.setSynthesizer( this.pSynthesizerLoader.loadFromFile( \
						File.absolutePath( value, baseDirectory ).getPath() ) )
					
				catch Exception e
					this.logLoadFileFailed( element, value )
				end
				
			else
				this.logUnknownTag( element )
				throw EInvalidParam.new()
			end
		end )
		
		return materialSound
	end
end
