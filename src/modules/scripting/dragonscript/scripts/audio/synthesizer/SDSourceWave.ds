/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */


namespace Dragengine.Audio.SynthesizerDefinition

pin Dragengine.Scenery
pin Dragengine.Utils



/**
 * \brief Definition of wave source.
 * 
 * Once defined a source can be added to an synthesizer using the stored definition.
 * 
 */
class SDSourceWave extends SDSource
	/** \brief Wave type. */
	private var SSWaveType pType
	
	/** \brief Minimum frequency. */
	private var float pMinFrequency
	
	/** \brief Maximum frequency. */
	private var float pMaxFrequency
	
	
	
	/** \brief Create synthesizer source definition. */
	public func new()
		this.pType = SSWaveType.sine
		this.pMinFrequency = 440
		this.pMaxFrequency = 440
	end
	
	
	
	/** \brief Wave type. */
	public func SSWaveType getType()
		return this.pType
	end
	
	/** \brief Set wave type. */
	public func void setType( SSWaveType type )
		this.pType = type
	end
	
	/** \brief Minimum frequency. */
	public func float getMinFrequency()
		return this.pMinFrequency
	end
	
	/** \brief Set minimum frequency. */
	public func void setMinFrequency( float frequency )
		this.pMinFrequency = frequency
	end
	
	/** \brief Maxium frequency. */
	public func float getMaxFrequency()
		return this.pMaxFrequency
	end
	
	/** \brief Set maximum frequency. */
	public func void setMaxFrequency( float frequency )
		this.pMaxFrequency = frequency
	end
	
	
	
	/**
	 * \brief Build engine synthesizer source using the stored definition.
	 */
	public func SynthesizerSource buildSource( Synthesizer synthesizer )
		var SSWave source = SSWave.new()
		
		this.buildSourceCommon( synthesizer, source )
		
		this.forEachTarget( block SDSourceTargetLink each
			source.targetAddLink( each.getTarget() cast SSWaveTarget, each.getLink().getIndex() )
		end )
		
		source.setType( this.pType )
		source.setMinFrequency( this.pMinFrequency )
		source.setMaxFrequency( this.pMaxFrequency )
		
		return source
	end
	
	
	
	public func void debug( Console console )
		console.addMessage( this.debugCommon( console, "Wave" ) + " type=" + this.pType \
			+ " freq=" + this.pMinFrequency + "-" + this.pMaxFrequency + " )" )
	end
end
