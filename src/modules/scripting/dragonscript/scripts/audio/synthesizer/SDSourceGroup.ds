/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */


namespace Dragengine.Audio.SynthesizerDefinition

pin Dragengine.Scenery
pin Dragengine.Utils



/**
 * \brief Definition of a group synthesizer source.
 * 
 * Once defined a source can be added to an synthesizer using the stored definition.
 * 
 */
class SDSourceGroup extends SDSource
	/** \brief Application type. */
	private var SSGroupApplication pApplicationType
	
	/** \brief Sources. */
	private var Array pSources
	
	
	
	/** \brief Create synthesizer source definition. */
	public func new()
		this.pApplicationType = SSGroupApplication.all
		this.pSources = Array.new()
	end
	
	
	
	/** \brief Application type. */
	public func SSGroupApplication getApplicationType()
		return this.pApplicationType
	end
	
	/** \brief Set application type. */
	public func void setApplicationType( SSGroupApplication applicationType )
		this.pApplicationType = applicationType
	end
	
	/** \brief Number of sources. */
	public func int getSourceCount()
		return this.pSources.getCount()
	end
	
	/** \brief Source at index. */
	public func SDSource getSourceAt( int index )
		return this.pSources.getAt( index ) cast SDSource
	end
	
	/** \brief Add source. */
	public func void addSource( SDSource source )
		if source == null or this.pSources.has( source )
			throw EInvalidParam.new()
		end
		this.pSources.add( source )
	end
	
	/** \brief Remove source. */
	public func void removeSource( SDSource source )
		if source == null
			throw EInvalidParam.new()
		end
		this.pSources.remove( source )
	end
	
	/** \brief Remove all sources. */
	public func void removeAllSources()
		this.pSources.removeAll()
	end
	
	/** \brief Visit sources using a block. */
	public func void forEachSource( Block ablock )
		this.pSources.forEach( ablock )
	end
	
	
	
	/** \brief Build engine synthesizer source using the stored definition. */
	public func SynthesizerSource buildSource( Synthesizer synthesizer )
		var SSGroup source = SSGroup.new()
		
		this.buildSourceCommon( synthesizer, source )
		
		this.forEachTarget( block SDSourceTargetLink each
			source.targetAddLink( each.getTarget() cast SSGroupTarget, each.getLink().getIndex() )
		end )
		
		source.setApplicationType( this.pApplicationType )
		this.pSources.forEach( block SDSource each
			source.addSource( each.buildSource( synthesizer ) )
		end )
		
		return source
	end
	
	
	
	public func void debug( Console console )
		console.addMessage( this.debugCommon( console, "Group" ) + \
			" applicationType=" + this.pApplicationType + \
			" sources=" + this.pSources.getCount() + " )" )
		
		this.pSources.forEach( block SDSource each
			each.debug( console )
		end )
	end
end
