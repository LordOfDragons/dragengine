/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */


namespace Dragengine.Audio.SynthesizerDefinition

pin Dragengine.Scenery
pin Dragengine.Utils



/**
 * \brief Definition of synthesizer effect.
 * 
 * Once defined a effect can be added to an synthesizer using the stored definition.
 * This is the base effect class with the properties shared amongst all effect types.
 * 
 */
abstract class SDEffect
	/** \brief List of target links. */
	private var Array pTargetLinks
	
	/** \brief Effect is enabled. */
	private var bool pEnabled
	
	/** \brief Strength. */
	private var float pStrength
	
	
	
	/** \brief Create synthesizer effect definition. */
	public func new()
		this.pTargetLinks = Array.new()
		this.pEnabled = true
		this.pStrength = 1.0
	end
	
	
	
	/** \brief Number of target links. */
	public func int getTargetLinkCount()
		return this.pTargetLinks.getCount()
	end
	
	/** \brief Target link at index. */
	public func SDSourceTargetLink getTargetLinkAt( int index )
		return this.pTargetLinks.getAt( index ) cast SDSourceTargetLink
	end
	
	/** \brief Add target link. */
	public func void addTargetLink( SDSourceTargetLink targetLink )
		if targetLink == null
			throw EInvalidParam.new()
		end
		
		this.pTargetLinks.add( targetLink )
	end
	
	/** \brief Visit targets with a block. */
	public func void forEachTarget( Block ablock )
		this.pTargetLinks.forEach( ablock )
	end
	
	
	
	/** \brief Effect is enabled. */
	public func bool getEnabled()
		return this.pEnabled
	end
	
	/** \brief Set if effect is enabled. */
	public func void setEnabled( bool enabled )
		this.pEnabled = enabled
	end
	
	/** \brief Strength of effect. */
	public func float getStrength()
		return this.pStrength
	end
	
	/** \brief Set strength of effect. */
	public func void setStrength( float strength )
		this.pStrength = strength
	end
	
	
	
	/** \brief Build engine synthesizer effect using the stored definition. */
	abstract public func SynthesizerEffect buildEffect( Synthesizer synthesizer )
	
	/** \brief Setup common parameters for the given engine synthesizer effect. */
	protected func void buildEffectCommon( SynthesizerEffect effect )
		if effect == null
			throw EInvalidParam.new()
		end
		
		effect.setEnabled( this.pEnabled )
		effect.setStrength( this.pStrength )
	end
	
	
	
	public func void debug( Console console )
	end
	
	protected func String debugCommon( String type )
		var SDSourceTargetLink targetLink
		var int i, count
		
		var String text = "- Effect " + type + " enabled=" + this.pEnabled + " strength=" + this.pStrength
		
		count = this.pTargetLinks.getCount()
		for i = 0 to count
			targetLink = this.pTargetLinks.getAt( i ) cast SDSourceTargetLink
			
			text = text + " link=" + targetLink.getTarget() + ":" + targetLink.getLink().getIndex()
		end
		
		return text
	end
end
