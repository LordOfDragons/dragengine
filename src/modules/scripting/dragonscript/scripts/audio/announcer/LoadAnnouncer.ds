/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

namespace Dragengine.Audio.Announcer

pin Dragengine.LoadSave
pin Dragengine.Files
pin Dragengine.Preloading
pin Dragengine.Scenery
pin Dragengine.Utils
pin Dragengine.XML


/**
 * \brief Load announcer from ".dean" file.
 * 
 * Before first use set synthesizer loader with \ref #setSynthesizerLoader(). Otherwise
 * loading announcer fails if a modifier synthesizer tag is encountered.
 */
class LoadAnnouncer extends BaseXmlLoader
	var LoadSynthesizer pSynthesizerLoader
	
	
	/** \brief Create loader. */
	func new(Console console) this(console, "LoadAnnouncer")
	end
	
	/** \brief Create loader. */
	func new(Console console, String name) super(console, name)
	end
	
	
	/** \brief Synthesizer loader. */
	func LoadSynthesizer getSynthesizerLoader()
		return pSynthesizerLoader
	end
	
	/** \brief Set synthesizer loader. */
	func void setSynthesizerLoader(LoadSynthesizer loader)
		pSynthesizerLoader = loader
	end
	
	
	/** \brief Load announcer from file. */
	func Announcer loadFromFile(String filename)
		logLoadingFromFile(filename)
		
		var EasyXML document = EasyXML.new(filename)
		if document.hasParseFailed()
			logParsingFailed(document.getParseLog())
			throw EInvalidParam.new()
		end
		
		var EasyXMLElement root = document.getRootElement()
		
		if not root.getTagName().equals("announcer")
			logUnknownTag(root)
			throw EInvalidParam.new()
		end
		
		var Announcer announcer = Announcer.new()
		pParseAnnouncer(root, File.new(filename).getParent().getPath(), announcer, null)
		return announcer
	end
	
	/**
	 * \brief Asynchronously load announcer from file.
	 * \returns Preloader for loaded announcer. Add listener and call checkFinished().
	 */
	func PreloadAnnouncer loadFromFileAsync(String filename, PreloadCounter parentCounter)
		logLoadingFromFile(filename)
		
		var EasyXML document = EasyXML.new(filename)
		if document.hasParseFailed()
			logParsingFailed(document.getParseLog())
			throw EInvalidParam.new()
		end
		
		var EasyXMLElement root = document.getRootElement()
		
		if not root.getTagName().equals("announcer")
			logUnknownTag(root)
			throw EInvalidParam.new()
		end
		
		var Announcer announcer = Announcer.new()
		var PreloadAnnouncer preloader = PreloadAnnouncer.new(announcer, parentCounter)
		pParseAnnouncer(root, File.new(filename).getParent().getPath(), announcer, preloader)
		return preloader
	end
	
	
	/** \brief Parse announcer tag. */
	private func void pParseAnnouncer(EasyXMLElement root, String baseDirectory, \
	Announcer announcer, PreloadAnnouncer preloader)
		var int i, count = root.getElementCount()
		var EasyXMLElement element
		var String tagName
		
		for i = 0 to count
			element = root.getElementAt(i)
			if element.getType() != EasyXMLElementType.tag
				continue
			end
			
			tagName = element.getTagName()
			
			if tagName.equals("parts")
				pParseParts(element, announcer, baseDirectory, preloader)
				
			elif tagName.equals("part")
				pParsePart(element, announcer, baseDirectory, preloader)
				
			elif tagName.equals("synthesizer")
				if pSynthesizerLoader == null
					printOnConsole(element, "Synthesizer loader missing")
					throw EInvalidParam.new()
				end
				
				var String filename = root.getFirstCData()
				if not filename.empty()
					filename = File.absolutePath(filename, baseDirectory).getPath()
					
					try
						announcer.setModifierSynthesizer(pSynthesizerLoader.loadFromFile(filename))
						
					catch Exception e
						logLoadFileFailed(root, filename)
					end
				end
				
			else
				logUnknownTag(element)
				throw EInvalidParam.new()
			end
		end
		
		if preloader == null
			announcer.updateSpeaker()
		end
	end
	
	/** \brief Parse part tag. */
	private func void pParsePart(EasyXMLElement root, Announcer announcer, \
	String baseDirectory, PreloadAnnouncer preloader)
		var AnnouncerPart part = AnnouncerPart.new(root.getAttributeNamed("id"))
		announcer.addPart(part)
		
		var String filename = root.getFirstCData()
		if not filename.empty()
			filename = File.absolutePath(filename, baseDirectory).getPath()
			
			try
				if preloader == null
					part.setSound(Sound.new(filename))
					
				else
					Sound.loadAsynchron(filename, PreloadAnnouncer.PartSoundFinishedListener.new(preloader, part))
				end
				
			catch Exception e
				logLoadFileFailed(root, filename)
			end
		end
	end
	
	/** \brief Parse parts tag. */
	private func void pParseParts(EasyXMLElement root, Announcer announcer, \
	String baseDirectory, PreloadAnnouncer preloader)
		var String directoryName = root.getFirstCData()
		var String pattern = "*.deann"
		var int idCutOff = 0
		
		if root.hasAttributeNamed("pattern")
			pattern = root.getAttributeNamed("pattern")
		end
		if root.hasAttributeNamed("idCutOff")
			idCutOff = root.getAttributeIntNamed("idCutOff")
			if idCutOff < 0
				logInvalidAttributeValue(root, "idCutOff", root.getAttributeNamed("idCutOff"))
				throw EInvalidParam.new()
			end
		end
		
		directoryName = File.absolutePath(directoryName, baseDirectory).getPath()
		
		scanForSoundFiles(root, directoryName, pattern, -idCutOff, baseDirectory, announcer, preloader)
	end
	
	/** Scan directory for materials files. */
	private func void scanForSoundFiles(EasyXMLElement root, String directoryName, String pattern, \
	int idCutOff, String baseDirectory, Announcer announcer, PreloadAnnouncer preloader)
		FileSystem.searchFiles(directoryName, true, block String each, FileType type
			if type == FileType.file
				var File file = File.absolutePath(each, baseDirectory)
				var String filetitle = file.getName()
				
				if FileSystem.pathMatchesPattern(filetitle, pattern)
					// convert filename to id. id is lowercase with idCutOff characters cut off from the
					// end of the file title with separators converted to whitespace
					var String id = filetitle.substring(0, idCutOff).toLower().replace("_-", ' ')
					
					loadPartFromFile(root, file.getPath(), id, announcer, preloader)
				end
			end
			return true
		end)
	end
	
	/** \brief Load part from file. */
	private func void loadPartFromFile(EasyXMLElement root, String filename, String id, \
	Announcer announcer, PreloadAnnouncer preloader)
		var AnnouncerPart part = AnnouncerPart.new(id)
		announcer.addPart(part)
		
		try
			if preloader == null
				part.setSound(Sound.new(filename))
				
			else
				Sound.loadAsynchron(filename, PreloadAnnouncer.PartSoundFinishedListener.new(preloader, part))
			end
			
		catch Exception e
			logLoadFileFailed(root, filename)
		end
	end
end
