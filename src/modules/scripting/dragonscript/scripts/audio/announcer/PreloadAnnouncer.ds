/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

namespace Dragengine.Audio.Announcer

pin Dragengine.Preloading
pin Dragengine.Files
pin Dragengine.Scenery
pin Dragengine.Utils


/**
 * \brief Preload announcer.
 * 
 * Preloads sound files and finishes the announcer once all resources are loaded. To use create
 * preloader and add one or more listeners to them. Once ready to preload call startPreloading().
 */
class PreloadAnnouncer extends Preloader
	/** \brief Preload part sound listener. */
	class PartSoundFinishedListener extends ResourceFinishedListener
		var AnnouncerPart pPart
		
		/** \brief Create listener. */
		func new(PreloadAnnouncer preloader, AnnouncerPart part) super(preloader)
			pPart = part
		end
		
		func void finishedLoading(String path, ResourceLoaderType resourceType, Object resource)
			pPart.setSound(resource cast Sound)
			super.finishedLoading(path, resourceType, resource)
		end
	end
	
	
	var Announcer pAnnouncer
	
	
	/** \brief Create preloader. */
	func new(Announcer announcer, PreloadCounter parentCounter) super(parentCounter)
		if announcer == null
			throw EInvalidParam.new()
		end
		pAnnouncer = announcer
	end
	
	
	/** \brief Announcer to preload. */
	func Announcer getAnnouncer()
		return pAnnouncer
	end
	
	
	/** \brief Finish preloading. */
	func void finishPreloading()
		if getSuccess()
			pAnnouncer.updateSpeaker()
		end
	end
end
