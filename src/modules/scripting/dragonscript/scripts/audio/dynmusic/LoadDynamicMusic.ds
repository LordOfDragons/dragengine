/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */


namespace Dragengine.Audio.DynamicMusic

pin Dragengine.LoadSave
pin Dragengine.Files
pin Dragengine.Preloading
pin Dragengine.Scenery
pin Dragengine.Utils
pin Dragengine.XML



/**
 * \brief Load dynamic music from a dynmusic.xml file.
 * 
 */
class LoadDynamicMusic extends BaseXmlLoader
	/** \brief Create loader. */
	public func new( Console console ) this( console, "LoadDynamicMusic" )
	end
	
	/** \brief Create loader. */
	public func new( Console console, String name ) super( console, name )
	end
	
	
	
	/** \brief Load dynamic music from file. */
	public func DynamicMusic loadFromFile( String filename )
		this.logLoadingFromFile( filename )
		
		var EasyXML document = EasyXML.new( filename )
		if document.hasParseFailed()
			this.logParsingFailed( document.getParseLog() )
			throw EInvalidParam.new()
		end
		
		var EasyXMLElement root = document.getRootElement()
		
		if not root.getTagName().equals( "dynamicMusic" )
			this.logUnknownTag( root )
			throw EInvalidParam.new()
		end
		
		var DynamicMusic dynamicMusic = DynamicMusic.new()
		this.pParseDynamicMusic( root, File.new( filename ).getParent().getPath(), dynamicMusic, null )
		return dynamicMusic
	end
	
	/**
	 * \brief Asynchronously load dynamic music from file.
	 * \returns Preloader for loaded dynamic music. Add listener and call checkFinished().
	 */
	public func PreloadDynamicMusic loadFromFileAsync( String filename, PreloadCounter parentCounter )
		this.logLoadingFromFile( filename )
		
		var EasyXML document = EasyXML.new( filename )
		if document.hasParseFailed()
			this.logParsingFailed( document.getParseLog() )
			throw EInvalidParam.new()
		end
		
		var EasyXMLElement root = document.getRootElement()
		
		if not root.getTagName().equals( "dynamicMusic" )
			this.logUnknownTag( root )
			throw EInvalidParam.new()
		end
		
		var DynamicMusic dynamicMusic = DynamicMusic.new()
		var PreloadDynamicMusic preloader = PreloadDynamicMusic.new( dynamicMusic, parentCounter )
		this.pParseDynamicMusic( root, File.new( filename ).getParent().getPath(), dynamicMusic, preloader )
		return preloader
	end
	
	
	
	/** \brief Parse dynamic music tag. */
	private func void pParseDynamicMusic( EasyXMLElement root, String baseDirectory, \
	DynamicMusic dynamicMusic, PreloadDynamicMusic preloader )
		var int i, count = root.getElementCount()
		var EasyXMLElement element
		var String tagName
		
		for i = 0 to count
			element = root.getElementAt( i )
			if element.getType() != EasyXMLElementType.tag
				continue
			end
			
			tagName = element.getTagName()
			
			if tagName.equals( "switch" )
				dynamicMusic.addSwitch( DynamicMusicSwitch.new( element.getFirstCData() ) )
				
			elif tagName.equals( "init" )
				this.pParseInit( element, dynamicMusic )
				
			elif tagName.equals( "part" )
				this.pParsePart( element, dynamicMusic, baseDirectory, preloader )
				
			else
				this.logUnknownTag( element )
				throw EInvalidParam.new()
			end
		end
		
		if preloader == null
			dynamicMusic.updateSpeaker()
		end
	end
	
	/** \brief Parse init tag. */
	private func void pParseInit( EasyXMLElement root, DynamicMusic dynamicMusic )
		var DynamicMusicPart init = dynamicMusic.getInit()
		var int i, count = root.getElementCount()
		var EasyXMLElement element
		var String tagName
		
		for i = 0 to count
			element = root.getElementAt( i )
			if element.getType() != EasyXMLElementType.tag
				continue
			end
			
			tagName = element.getTagName()
			
			if tagName.equals( "transition" )
				init.addTransition( this.pParseTransition( element, dynamicMusic ) )
				
			else
				this.logUnknownTag( element )
				throw EInvalidParam.new()
			end
		end
	end
	
	/** \brief Parse part tag. */
	private func void pParsePart( EasyXMLElement root, DynamicMusic dynamicMusic, \
	String baseDirectory, PreloadDynamicMusic preloader )
		var int i, count = root.getElementCount()
		var EasyXMLElement element
		var String tagName
		var String value
		
		var DynamicMusicPart part = DynamicMusicPart.new( root.getAttributeNamed( "id" ) )
		dynamicMusic.addPart( part )
		
		for i = 0 to count
			element = root.getElementAt( i )
			if element.getType() != EasyXMLElementType.tag
				continue
			end
			
			tagName = element.getTagName()
			
			if tagName.equals( "music" )
				value = element.getFirstCData()
				if not value.empty()
					try
						if preloader == null
							part.setMusic( Sound.new( File.absolutePath( value, baseDirectory ).getPath() ) )
							
						else
							Sound.loadAsynchron( File.absolutePath( value, baseDirectory ).getPath(), \
								PreloadDynamicMusic.PartMusicFinishedListener.new( preloader, part ) )
						end
						
					catch Exception e
						this.logLoadFileFailed( element, value )
					end
				end
				
			elif tagName.equals( "transition" )
				part.addTransition( this.pParseTransition( element, dynamicMusic ) )
				
			else
				this.logUnknownTag( element )
				throw EInvalidParam.new()
			end
		end
	end
	
	/** \brief Parse transition tag. */
	private func DynamicMusicTransition pParseTransition( EasyXMLElement root, DynamicMusic dynamicMusic )
		var int i, count = root.getElementCount()
		var DynamicMusicTransition transition
		var EasyXMLElement element
		var String tagName
		
		if root.hasAttributeNamed( "target" )
			transition = DynamicMusicTransition.new( root.getAttributeNamed( "target" ) )
			
		else
			transition = DynamicMusicTransition.new()
		end
		
		for i = 0 to count
			element = root.getElementAt( i )
			if element.getType() != EasyXMLElementType.tag
				continue
			end
			
			tagName = element.getTagName()
			
			if tagName.equals( "on" )
				transition.addSwitchOn( dynamicMusic.getSwitchNamed( element.getFirstCData() ) )
				
			elif tagName.equals( "off" )
				transition.addSwitchOff( dynamicMusic.getSwitchNamed( element.getFirstCData() ) )
				
			else
				this.logUnknownTag( element )
				throw EInvalidParam.new()
			end
		end
		
		return transition
	end
end
