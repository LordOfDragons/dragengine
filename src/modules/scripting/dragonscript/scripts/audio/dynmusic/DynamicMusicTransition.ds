/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

namespace Dragengine.Audio.DynamicMusic

pin Dragengine.Gui
pin Dragengine.Scenery



/**
 * \brief Dynamic music transition.
 *
 * Transition to another part or \em null to stop playback after the current part 
 * stops. Contains a list of switches to check. Transition is fulfilled if all
 * switches have the desired state or no switches are present.
 * 
 */
class DynamicMusicTransition
	/** \brief Name of part to play if fulfilled or \em null to stop. */
	private var String pPart
	
	/** \brief Switches required to be in the \em on state. */
	private var Array pSwitchesOn
	
	/** \brief Switches required to be in the \em off state. */
	private var Array pSwitchesOff
	
	
	
	/** \brief Create dynamic music transition with \em null part to stop playback. */
	public func new()
		this.pSwitchesOn = Array.new()
		this.pSwitchesOff = Array.new()
	end
	
	/** \brief Create dynamic music transition. */
	public func new( String part )
		this.pSwitchesOn = Array.new()
		this.pSwitchesOff = Array.new()
		this.pPart = part
	end
	
	
	
	/** \brief Name of part to play if fulfilled or \em null to stop. */
	public func String getPart()
		return this.pPart
	end
	
	
	
	/** \brief Number of on switchs. */
	public func int getSwitchOnCount()
		return this.pSwitchesOn.getCount()
	end
	
	/** \brief Get on switch at index. */
	public func DynamicMusicSwitch getSwitchOnAt( int index )
		return this.pSwitchesOn.getAt( index ) cast DynamicMusicSwitch
	end
	
	/** \brief On switch is present. */
	public func bool hasSwitchOn( DynamicMusicSwitch switch )
		return this.pSwitchesOn.has( switch )
	end
	
	/** \brief Add on switch. */
	public func void addSwitchOn( DynamicMusicSwitch switch )
		if switch == null or this.pSwitchesOn.has( switch )
			throw EInvalidParam.new()
		end
		this.pSwitchesOn.add( switch )
	end
	
	/** \brief Remove on switch. */
	public func void removeSwitchOn( DynamicMusicSwitch switch )
		this.pSwitchesOn.remove( switch )
	end
	
	/** \brief Remove all on switchs. */
	public func void removeAllSwitchOns()
		this.pSwitchesOn.removeAll()
	end
	
	
	
	/** \brief Number of off switchs. */
	public func int getSwitchOffCount()
		return this.pSwitchesOff.getCount()
	end
	
	/** \brief Get off switch at index. */
	public func DynamicMusicSwitch getSwitchOffAt( int index )
		return this.pSwitchesOff.getAt( index ) cast DynamicMusicSwitch
	end
	
	/** \brief Off switch is present. */
	public func bool hasSwitchOff( DynamicMusicSwitch switch )
		return this.pSwitchesOff.has( switch )
	end
	
	/** \brief Add off switch. */
	public func void addSwitchOff( DynamicMusicSwitch switch )
		if switch == null or this.pSwitchesOff.has( switch )
			throw EInvalidParam.new()
		end
		this.pSwitchesOff.add( switch )
	end
	
	/** \brief Remove off switch. */
	public func void removeSwitchOff( DynamicMusicSwitch switch )
		this.pSwitchesOff.remove( switch )
	end
	
	/** \brief Remove all off switchs. */
	public func void removeAllSwitchOffs()
		this.pSwitchesOff.removeAll()
	end
	
	
	
	/** \brief Conditions are fulfilled. */
	public func bool areConditionsFulfilled()
		return this.pSwitchesOn.find( block DynamicMusicSwitch each
			return not each.getState()
		end ) == null and this.pSwitchesOff.find( block DynamicMusicSwitch each
			return each.getState()
		end ) == null
	end
end
