/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */


namespace Dragengine.Audio.DynamicMusic

pin Dragengine.Preloading
pin Dragengine.Files
pin Dragengine.Scenery
pin Dragengine.Utils



/**
 * \brief Preload dynamic music.
 * 
 * Preloads sound files and finishes the dynamic music once all resources are loaded.
 * To use create preloader and add one or more listeners to them. Once ready to
 * preload call startPreloading().
 * 
 */
class PreloadDynamicMusic extends Preloader
	/** \brief Preload part music listener. */
	public class PartMusicFinishedListener extends ResourceFinishedListener
		/** \brief Part. */
		private var DynamicMusicPart pPart
		
		/** \brief Create listener. */
		public func new( PreloadDynamicMusic preloader, DynamicMusicPart part ) super( preloader )
			this.pPart = part
		end
		
		/** \brief Resource finished loading. */
		public func void finishedLoading( String path, ResourceLoaderType resourceType, Object resource )
			this.pPart.setMusic( resource cast Sound )
			super.finishedLoading( path, resourceType, resource )
		end
	end
	
	
	
	/** \brief Dynamic music to preload. */
	private var DynamicMusic pDynamicMusic
	
	
	
	/** \brief Create preloader. */
	public func new( DynamicMusic dynamicMusic, PreloadCounter parentCounter ) super( parentCounter )
		if dynamicMusic == null
			throw EInvalidParam.new()
		end
		this.pDynamicMusic = dynamicMusic
	end
	
	
	
	/** \brief Dynamic music to preload. */
	public func DynamicMusic getDynamicMusic()
		return this.pDynamicMusic
	end
	
	
	
	/** \brief Finish preloading. */
	public func void finishPreloading()
		if this.getSuccess()
			this.pDynamicMusic.updateSpeaker()
		end
	end
end
