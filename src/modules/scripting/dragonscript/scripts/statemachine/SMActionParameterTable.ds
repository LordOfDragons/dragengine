/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */


namespace Dragengine.StateMachineSystem

pin Dragengine.Scenery
pin Dragengine.Utils



/**
 * \brief State machine action updating parameter table entry.
 */
class SMActionParameterTable implements SMAction
	/** \brief Update operator. */
	public enum Operator
		/** \brief Set value. */
		set
		
		/** \brief Add value. */
		add
		
		/** \brief Multiply value. */
		multiply
	end
	
	
	
	/** \brief Parameter table entry to update. */
	private var ParameterTableEntry pEntry
	
	/** \brief Default value if entry is not null. */
	private var float pDefaultValue
	
	/** \brief Update operator from eOperators. */
	private var Operator pOperator
	
	/** \brief Parameter table entry to use as update value. */
	private var ParameterTableEntry pEntryUpdateValue
	
	/** \brief Update value. */
	private var float pUpdateValue
	
	/** \brief Use named parameter as source of update value if not null. */
	private var String pParameterNameUpdateValue
	
	
	
	/** \brief Create action. */
	public func new( ParameterTableEntry entry, float defaultValue, Operator operator, float updateValue ) \
	this( entry, defaultValue, operator, null, updateValue, null )
	end
	
	/** \brief Create action. */
	public func new( ParameterTableEntry entry, float defaultValue, Operator operator, \
	float updateValue, String parameterNameUpdateValue ) \
	this( entry, defaultValue, operator, null, updateValue, parameterNameUpdateValue )
	end
	
	/** \brief Create action. */
	public func new( ParameterTableEntry entry, float defaultValue, Operator operator, \
	ParameterTableEntry entryUpdateValue, float updateValue, String parameterNameUpdateValue )
		if entry == null
			throw EInvalidParam.new()
		end
		this.pEntry = entry
		this.pDefaultValue = defaultValue
		this.pOperator = operator
		this.pEntryUpdateValue = entryUpdateValue
		this.pUpdateValue = updateValue
		this.pParameterNameUpdateValue = parameterNameUpdateValue
	end
	
	
	
	/** \brief Parameter table entry to update. */
	public func ParameterTableEntry getEntry()
		return this.pEntry
	end
	
	/** \brief Set parameter table entry to update. */
	public func void setEntry( ParameterTableEntry entry )
		if entry == null
			throw EInvalidParam.new()
		end
		this.pEntry = entry
	end
	
	/** \brief Default value if entry is not null. */
	public func float getDefaultValue()
		return this.pDefaultValue
	end
	
	/** \brief Set default value if entry is not null. */
	public func void setDefaultValue( float defaultValue )
		this.pDefaultValue = defaultValue
	end
	
	/** \brief Update operator from eOperators. */
	public func Operator getOperator()
		return this.pOperator
	end
	
	/** \brief Set update operator from eOperators. */
	public func void setOperator( Operator operator )
		this.pOperator = operator
	end
	
	/** \brief Parameter table entry to use as update value. */
	public func ParameterTableEntry getEntryUpdateValue()
		return this.pEntryUpdateValue
	end
	
	/** \brief Set parameter table entry to use as update value. */
	public func void setEntryUpdateValue( ParameterTableEntry entry )
		this.pEntryUpdateValue = entry
	end
	
	/** \brief Default update value. */
	public func float getUpdateValue()
		return this.pUpdateValue
	end
	
	/** \brief Set default update value. */
	public func void setUpdateValue( float updateValue )
		this.pUpdateValue = updateValue
	end
	
	/** \brief Use named parameter as source of update value if not null. */
	public func String getParameterNameUpdateValue()
		return this.pParameterNameUpdateValue
	end
	
	/** \brief Use named parameter as source of update value if not null. */
	public func void setParameterNameUpdateValue( String name )
		this.pParameterNameUpdateValue = name
	end
	
	
	
	/**
	 * \brief Run action.
	 * \param parameters Dictionary with parameters of type String key and String value.
	 *                   Do not change the content of the dictionary as it is shared.
	 */
	public func void runAction( SMContext context, Dictionary parameters )
		var float updateValue = this.pUpdateValue
		if this.pEntryUpdateValue != null
			updateValue = this.pEntryUpdateValue.getValue( updateValue )
		end
		if this.pParameterNameUpdateValue != null
			var String value = parameters.getAt( this.pParameterNameUpdateValue, null ) cast String
			if value != null
				updateValue = value.toFloat()
			end
		end
		
		select this.pOperator
		case Operator.set
			this.pEntry.setValue( updateValue )
			
		case Operator.add
			this.pEntry.setValue( this.pEntry.getValue( this.pDefaultValue ) + updateValue )
			
		case Operator.multiply
			this.pEntry.setValue( this.pEntry.getValue( this.pDefaultValue ) * updateValue )
		end
	end
end
