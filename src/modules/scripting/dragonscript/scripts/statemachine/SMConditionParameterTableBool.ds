/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */


namespace Dragengine.StateMachineSystem

pin Dragengine.Scenery
pin Dragengine.Utils



/**
 * \brief State machine condition evaluating a boolean parameter table entry.
 */
class SMConditionParameterTableBool implements SMCondition
	/** \brief Parameter table entry to compare. */
	private var ParameterTableEntry pEntry
	
	/** \brief Default value if entry to compare is not null. */
	private var bool pDefaultValue
	
	/** \brief Parameter table entry to compare against. */
	private var ParameterTableEntry pEntryCompareValue
	
	/** \brief Use named parameter as source of compare value if not null. */
	private var String pParameterNameCompareValue
	
	/** \brief Default compare against value. */
	private var bool pCompareValue
	
	/** \brief Evaluates to true if values are equal. */
	private var bool pEqual
	
	
	
	/** \brief Create condition. */
	public func new( ParameterTableEntry entry, bool defaultValue, bool equal, bool compareValue ) \
	this( entry, defaultValue, equal, null, compareValue, null )
	end
	
	/** \brief Create condition. */
	public func new( ParameterTableEntry entry, bool defaultValue, bool equal, \
	bool compareValue, String parameterNameCompareValue ) \
	this( entry, defaultValue, equal, null, compareValue, parameterNameCompareValue )
	end
	
	/** \brief Create condition. */
	public func new( ParameterTableEntry entry, bool defaultValue, bool equal, \
	ParameterTableEntry entryCompareValue, bool compareValue, String parameterNameCompareValue )
		if entry == null
			throw EInvalidParam.new()
		end
		this.pEntry = entry
		this.pDefaultValue = defaultValue
		this.pEqual = equal
		this.pEntryCompareValue = entryCompareValue
		this.pCompareValue = compareValue
		this.pParameterNameCompareValue = parameterNameCompareValue
	end
	
	
	
	/** \brief Parameter table entry to compare. */
	public func ParameterTableEntry getEntry()
		return this.pEntry
	end
	
	/** \brief Set parameter table entry to compare. */
	public func void setEntry( ParameterTableEntry entry )
		if entry == null
			throw EInvalidParam.new()
		end
		this.pEntry = entry
	end
	
	/** \brief Default value if entry to compare is not null. */
	public func bool getDefaultValue()
		return this.pDefaultValue
	end
	
	/** \brief Set default value if entry to compare is not null. */
	public func void setDefaultValue( bool defaultValue )
		this.pDefaultValue = defaultValue
	end
	
	/** \brief Evaluates to true if values are equal. */
	public func bool getEqual()
		return this.pEqual
	end
	
	/** \brief Set evaluates to true if values are equal. */
	public func void setEqual( bool equal )
		this.pEqual = equal
	end
	
	/** \brief Parameter table entry to compare against. */
	public func ParameterTableEntry getEntryCompareValue()
		return this.pEntryCompareValue
	end
	
	/** \brief Set parameter table entry to compare against. */
	public func void setEntryCompareValue( ParameterTableEntry entry )
		this.pEntryCompareValue = entry
	end
	
	/** \brief Default compare against value. */
	public func bool getCompareValue()
		return this.pCompareValue
	end
	
	/** \brief Set default compare against value. */
	public func void setCompareValue( bool compareValue )
		this.pCompareValue = compareValue
	end
	
	/** \brief Use named parameter as source of compare value if not null. */
	public func String getParameterNameCompareValue()
		return this.pParameterNameCompareValue
	end
	
	/** \brief Use named parameter as source of compare value if not null. */
	public func void setParameterNameCompareValue( String name )
		this.pParameterNameCompareValue = name
	end
	
	
	
	/** \brief Create condition testing the exact opposite. */
	public func SMConditionParameterTableBool negated()
		return SMConditionParameterTableBool.new( this.pEntry, this.pDefaultValue, \
			not this.pEqual, this.pEntryCompareValue, this.pCompareValue, \
			this.pParameterNameCompareValue )
	end
	
	
	
	/**
	 * \brief Evaluate condition.
	 * \param parameters Dictionary with parameters of type String key and String value.
	 *                   Do not change the content of the dictionary as it is shared.
	 */
	public func bool evaluateCondition( SMContext context, Dictionary parameters )
		var bool compareValue = this.pCompareValue
		if this.pEntryCompareValue != null
			compareValue = this.pEntryCompareValue.getValue( compareValue )
		end
		if this.pParameterNameCompareValue != null
			var String value = parameters.getAt( this.pParameterNameCompareValue, null ) cast String
			if value != null
				compareValue = value.equals( "true" )
			end
		end
		
		if this.pEqual
			return this.pEntry.getValue( this.pDefaultValue ) == compareValue
			
		else
			return this.pEntry.getValue( this.pDefaultValue ) != compareValue
		end
	end
end
