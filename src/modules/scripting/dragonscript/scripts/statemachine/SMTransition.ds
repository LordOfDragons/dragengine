/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */


namespace Dragengine.StateMachineSystem

pin Dragengine.Scenery
pin Dragengine.Utils



/**
 * \brief State machine transition.
 * 
 * Transitions run a set of actions before activating the new state in the state machine.
 */
class SMTransition
	/** \brief Condition modes. */
	enum ConditionMode
		/** \brief All conditions have to evaluate to true. */
		allTrue
		
		/** \brief At least one condition has to evaluate to true. */
		anyTrue
		
		/** \brief At least one condition has to evaluate to false. */
		anyFalse
		
		/** \brief All conditions have to evaluate to false. */
		allFalse
	end
	
	
	var String pEvent, pStateID
	var Array pActions, pConditions
	var ConditionMode pConditionMode
	var Dictionary pParameters
	
	
	/**
	 * \brief Create state machine transition staying in the same state.
	 * \param event Event to react to.
	 */
	func new(String event) this(event, null)
	end
	
	/**
	 * \brief Create state machine transition.
	 * \param event Event to react to.
	 * \param stateID State to switch to or null to stay in the same state.
	 */
	func new(String event, String stateID)
		if event == null
			throw ENullPointer.new("event")
		end
		
		pEvent = event
		pStateID = stateID
		pActions = Array.new()
		pConditions = Array.new()
		pConditionMode = ConditionMode.allTrue
		pParameters = Dictionary.new()
	end
	
	/**
	 * \brief Create copy of state machine transition.
	 * \version 1.26
	 */
	func new(SMTransition transition)
		pEvent = transition.pEvent
		pStateID = transition.pStateID
		pActions = transition.pActions.map(block SMStateAction each
			return SMStateAction.new(each)
		end)
		pConditions = Array.new(transition.pConditions)
		pConditionMode = transition.pConditionMode
		pParameters = Dictionary.new(transition.pParameters)
	end
	
	
	/** \brief Identifier of event triggering transition. */
	func String getEvent()
		return pEvent
	end
	
	/** \brief Identifier of state to switch to or null to stay in the same state. */
	func String getStateID()
		return pStateID
	end
	
	
	/** \brief Count of actions. */
	func int getActionCount()
		return pActions.getCount()
	end
	
	/** \brief Get action at index. */
	func SMStateAction getActionAt(int index)
		return pActions.getAt(index) cast SMStateAction
	end
	
	/** \brief Add action. */
	func void addAction(SMStateAction action)
		if action == null
			throw EInvalidParam.new()
		end
		pActions.add(action)
	end
	
	/** \brief Visit actions with block with parameter SMStateAction. */
	func void forEachAction(Block ablock)
		pActions.forEach(ablock)
	end
	
	/** \brief Find action with block with parameter SMStateAction. */
	func SMStateAction findAction(Block ablock)
		return pActions.find(ablock) cast SMStateAction
	end
	
	
	/** \brief Count of conditions. */
	func int getConditionCount()
		return pConditions.getCount()
	end
	
	/** \brief Get condition at index. */
	func String getConditionAt(int index)
		return pConditions.getAt(index) cast String
	end
	
	/** \brief Add condition. */
	func void addCondition(String condition)
		if condition == null
			throw EInvalidParam.new()
		end
		pConditions.add(condition)
	end
	
	/** \brief Visit conditions with block with parameter String. */
	func void forEachCondition(Block ablock)
		pConditions.forEach(ablock)
	end
	
	/** \brief Find condition with block with parameter String. */
	func String findCondition(Block ablock)
		return pConditions.find(ablock) cast String
	end
	
	/** \brief Condition mode from eConditionModes. */
	func ConditionMode getConditionMode()
		return pConditionMode
	end
	
	/** \brief Set condition mode from eConditionModes. */
	func void setConditionMode(ConditionMode mode)
		pConditionMode = mode
	end
	
	/**
	 * \brief Evaluate all conditions.
	 * 
	 * If no condition is present \em true is returned.
	 * 
	 * \param parameters Dictionary with parameters of type String key and String value.
	 *                   Do not change the content of the dictionary as it is shared.
	 */
	func bool evaluateConditions(SMContext context)
		if pConditions.getCount() == 0
			return true
		end
		
		var SMCondition condition
		
		select pConditionMode
		case ConditionMode.allTrue
			return pConditions.find(block String each
				condition = context.getCondition(each)
				return condition == null or not condition.evaluateCondition(context, pParameters)
			end) == null
			
		case ConditionMode.anyTrue
			return pConditions.find(block String each
				condition = context.getCondition(each)
				return condition != null and condition.evaluateCondition(context, pParameters)
			end) != null
			
		case ConditionMode.anyFalse
			return pConditions.find(block String each
				condition = context.getCondition(each)
				return condition == null or not condition.evaluateCondition(context, pParameters)
			end) != null
			
		case ConditionMode.allFalse
			return pConditions.find(block String each
				condition = context.getCondition(each)
				return condition != null and condition.evaluateCondition(context, pParameters)
			end) == null
			
		else
			return false
		end
	end
	
	/**
	 * \brief Parameters as Dictionary of type String key and String value.
	 * \warning Do not change the content of the dictionary as it is shared.
	 */
	func Dictionary getParameters()
		return pParameters
	end
	
	/**
	 * \brief Import state.
	 * \version 1.26
	 * 
	 * Adds enter and exit actions as transitions actions. If state has next state set it
	 */
	func void importState(SMState state)
		state.forEachEnterAction(block SMStateAction each
			pActions.add(each)
		end)
		state.forEachExitAction(block SMStateAction each
			pActions.add(each)
		end)
		if state.getNextStateID() != null
			pStateID = state.getNextStateID()
		end
	end
	
	
	/**
	 * \brief Transition matches event and condition is true.
	 */
	func bool matches(SMContext context, String event)
		return event.equals(pEvent) and evaluateConditions(context)
	end
	
	/** \brief Run transition. */
	func void run(SMContext context)
		if pStateID != null
			// set state to null. runs exit actions and switches context to "in transition"
			// state. in this state events are delayed until a valid state is set
			context.setCurrentState(null)
			
			// run transition actions
			pActions.forEach(block SMStateAction each
				each.run(context)
			end)
			
			// set next state. runs enter state actions
			var SMState state = context.getStateMachine().getStateAt(pStateID)
			if state == null
				throw EInvalidParam.new("unknown state '" + pStateID + "'")
			end
			
			context.setCurrentState(state)
			
		else
			// only run transition actions
			pActions.forEach(block SMStateAction each
				each.run(context)
			end)
		end
	end
end
