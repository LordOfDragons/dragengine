/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */


namespace Dragengine.StateMachineSystem

pin Dragengine.Scenery
pin Dragengine.Utils



/**
 * \brief State machine transition.
 * 
 * Transitions run a set of actions before activating the new state in the state machine.
 */
class SMTransition
	/** \brief Condition modes. */
	enum ConditionMode
		/** \brief All conditions have to evaluate to true. */
		allTrue
		
		/** \brief At least one condition has to evaluate to true. */
		anyTrue
		
		/** \brief At least one condition has to evaluate to false. */
		anyFalse
		
		/** \brief All conditions have to evaluate to false. */
		allFalse
	end
	
	
	
	/** \brief Identifier of event triggering transition. */
	private var String pEvent
	
	/** \brief Identifier of state to switch to. */
	private var String pStateID
	
	/** \brief State to switch to or \em null if not cached. */
	private var WeakReference pState
	
	/** \brief Actions as Array of SMStateAction. */
	private var Array pActions
	
	/** \brief Conditions as Array of String identifiers. */
	private var Array pConditions
	
	/** \brief Resolved conditions as Array of SMCondition. */
	private var Array pResolvedConditions
	
	/** \brief Condition mode from eConditionModes. */
	private var ConditionMode pConditionMode
	
	/** \brief Parameters as Dictionary of type String key and String value. */
	private var Dictionary pParameters
	
	
	
	/**
	 * \brief Create state machine transition staying in the same state.
	 * \param event Event to react to.
	 */
	public func new( String event ) this( event, null )
	end
	
	/**
	 * \brief Create state machine transition.
	 * \param event Event to react to.
	 * \param stateID State to switch to or null to stay in the same state.
	 */
	public func new( String event, String stateID )
		if event == null
			throw ENullPointer.new( "event" )
		end
		this.pEvent = event
		this.pStateID = stateID
		this.pState = WeakReference.new()
		this.pActions = Array.new()
		this.pConditions = Array.new()
		this.pConditionMode = ConditionMode.allTrue
		this.pParameters = Dictionary.new()
	end
	
	
	
	/** \brief Identifier of event triggering transition. */
	public func String getEvent()
		return this.pEvent
	end
	
	/** \brief Identifier of state to switch to or null to stay in the same state. */
	public func String getStateID()
		return this.pStateID
	end
	
	/** \brief State to switch to or \em null if not cached. */
	public func SMState getState()
		return this.pState.get() cast SMState
	end
	
	
	
	/** \brief Count of actions. */
	public func int getActionCount()
		return this.pActions.getCount()
	end
	
	/** \brief Get action at index. */
	public func SMStateAction getActionAt( int index )
		return this.pActions.getAt( index ) cast SMStateAction
	end
	
	/** \brief Add action. */
	public func void addAction( SMStateAction action )
		if action == null
			throw EInvalidParam.new()
		end
		this.pActions.add( action )
	end
	
	/** \brief Visit actions with block with parameter SMStateAction. */
	public func void forEachAction( Block ablock )
		this.pActions.forEach( ablock )
	end
	
	/** \brief Find action with block with parameter SMStateAction. */
	public func SMStateAction findAction( Block ablock )
		return this.pActions.find( ablock ) cast SMStateAction
	end
	
	
	
	/** \brief Count of conditions. */
	public func int getConditionCount()
		return this.pConditions.getCount()
	end
	
	/** \brief Get condition at index. */
	public func String getConditionAt( int index )
		return this.pConditions.getAt( index ) cast String
	end
	
	/** \brief Add condition. */
	public func void addCondition( String condition )
		if condition == null
			throw EInvalidParam.new()
		end
		this.pConditions.add( condition )
		this.pResolvedConditions = null
	end
	
	/** \brief Visit conditions with block with parameter String. */
	public func void forEachCondition( Block ablock )
		this.pConditions.forEach( ablock )
	end
	
	/** \brief Find condition with block with parameter String. */
	public func String findCondition( Block ablock )
		return this.pConditions.find( ablock ) cast String
	end
	
	/** \brief Condition mode from eConditionModes. */
	public func ConditionMode getConditionMode()
		return this.pConditionMode
	end
	
	/** \brief Set condition mode from eConditionModes. */
	public func void setConditionMode( ConditionMode mode )
		this.pConditionMode = mode
	end
	
	/**
	 * \brief Evaluate all conditions.
	 * 
	 * If no condition is present \em true is returned.
	 * 
	 * \param parameters Dictionary with parameters of type String key and String value.
	 *                   Do not change the content of the dictionary as it is shared.
	 */
	public func bool evaluateConditions( SMContext context )
		if this.pResolvedConditions == null
			this.pResolvedConditions = this.pConditions.map( block String each
				return context.getCondition( each )
			end )
		end
		
		if this.pResolvedConditions.getCount() == 0
			return true
		end
		
		select this.pConditionMode
		case ConditionMode.allTrue
			return this.pResolvedConditions.find( block SMCondition each
				return each == null or not each.evaluateCondition( context, this.pParameters )
			end ) == null
			
		case ConditionMode.anyTrue
			return this.pResolvedConditions.find( block SMCondition each
				return each != null and each.evaluateCondition( context, this.pParameters )
			end ) != null
			
		case ConditionMode.anyFalse
			return this.pResolvedConditions.find( block SMCondition each
				return each == null or not each.evaluateCondition( context, this.pParameters )
			end ) != null
			
		case ConditionMode.allFalse
			return this.pResolvedConditions.find( block SMCondition each
				return each != null and each.evaluateCondition( context, this.pParameters )
			end ) == null
			
		else
			return false
		end
	end
	
	/**
	 * \brief Parameters as Dictionary of type String key and String value.
	 * \warning Do not change the content of the dictionary as it is shared.
	 */
	public func Dictionary getParameters()
		return this.pParameters
	end
	
	
	
	/**
	 * \brief Transition matches event and condition is true.
	 */
	public func bool matches( SMContext context, String event )
		return event.equals( this.pEvent ) and this.evaluateConditions( context )
	end
	
	/** \brief Run transition. */
	public func void run( SMContext context )
		if this.pStateID != null
			// set state to null. runs exit actions and switches context to "in transition" state.
			context.setCurrentState( null )
			
			// run transition actions
			this.pActions.forEach( block SMStateAction each
				each.run( context )
			end )
			
			// set next state. runs enter state actions
			var SMState state = this.pState.get() cast SMState
			if state == null
				state = context.getStateMachine().getStateAt( this.pStateID )
				if state == null
					throw EInvalidParam.new( "unknown state '" + this.pStateID + "'" )
				end
				this.pState.set( state )
			end
			context.setCurrentState( state )
			
		else
			// only run transition actions
			this.pActions.forEach( block SMStateAction each
				each.run( context )
			end )
		end
	end
end
