/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */


namespace Dragengine.StateMachineSystem

pin Dragengine.Scenery
pin Dragengine.Utils



/**
 * \brief State machine state.
 * 
 * States contain a list of actions to do while entering or existing the state and a list
 * of transitions triggered by events.
 * 
 * States are assigned a unique identifier. Strings are used instead of a number to make the
 * state machine more portable across changing save state revisions.
 * 
 * Each state can have multiple transitions matching the same event by using conditions.
 * The first transition matching the send event with fulfilled condition is selected.
 * If no transition matches the event raises an exception.
 * 
 * Action can have optional condition running them only if the condition evaluates to true.
 */
class SMState
	var String pID
	var Array pEnterActions
	var Array pExitActions
	var Array pTransitions
	var String pNextStateID
	
	
	/**
	 * \brief Create state machine state.
	 * \param id Identifier or \em null.
	 * \throws EInvalidParam \em id is empty string.
	 */
	func new(String id)
		if id != null and id.empty()
			throw EInvalidParam.new()
		end
		
		pID = id
		pEnterActions = Array.new()
		pExitActions = Array.new()
		pTransitions = Array.new()
	end
	
	/**
	 * \brief Create copy of state machine state.
	 * \version 1.26
	 * \param state State to copy.
	 */
	func new(SMState state)
		pID = state.pID
		pEnterActions = Array.new(state.pEnterActions)
		pExitActions = Array.new(state.pExitActions)
		pTransitions = Array.new(state.pTransitions)
		pNextStateID = state.pNextStateID
	end
	
	
	/** \brief Unique state identifier or \em null. */
	func String getID()
		return pID
	end
	
	/**
	 * \brief Import state.
	 * \version 1.26
	 */
	func void importState(SMState state)
		pEnterActions.addAll(state.pEnterActions)
		pExitActions.addAll(state.pExitActions)
		pTransitions.addAll(state.pTransitions)
		if state.pNextStateID != null
			pNextStateID = state.pNextStateID
		end
	end
	
	
	/**
	 * \brief State to transition to after all enter actions finished or \em null.
	 * \version 1.26
	 */
	func String getNextStateID()
		return pNextStateID
	end
	
	/**
	 * \brief Set state to transition to after all enter actions finished or \em null.
	 * \version 1.26
	 */
	func void setNextStateID(String id)
		pNextStateID = id
	end
	
	
	/** \brief Count of enter actions. */
	func int getEnterActionCount()
		return pEnterActions.getCount()
	end
	
	/** \brief Get enter action at index. */
	func SMStateAction getEnterActionAt(int index)
		return pEnterActions.getAt(index) cast SMStateAction
	end
	
	/** \brief Index of enter action or -1 if absent. */
	func int indexOfEnterAction(SMStateAction action)
		return pEnterActions.indexOf(action)
	end
	
	/** \brief Add enter action. */
	func void addEnterAction(SMStateAction action)
		if action == null
			throw EInvalidParam.new()
		end
		pEnterActions.add(action)
	end
	
	/** \brief Visit enter actions with block with parameter SMStateAction. */
	func void forEachEnterAction(Block ablock)
		pEnterActions.forEach(ablock)
	end
	
	/** \brief Find enter action with block with parameter SMStateAction. */
	func SMStateAction findEnterAction(Block ablock)
		return pEnterActions.find(ablock) cast SMStateAction
	end
	
	
	/** \brief Count of exit actions. */
	func int getExitActionCount()
		return pExitActions.getCount()
	end
	
	/** \brief Get exit action at index. */
	func SMStateAction getExitActionAt(int index)
		return pExitActions.getAt(index) cast SMStateAction
	end
	
	/** \brief Index of exit action or -1 if absent. */
	func int indexOfExitAction(SMStateAction action)
		return pExitActions.indexOf(action)
	end
	
	/** \brief Add exit action. */
	func void addExitAction(SMStateAction action)
		if action == null
			throw EInvalidParam.new()
		end
		pExitActions.add(action)
	end
	
	/** \brief Visit exit actions with block with parameter SMStateAction. */
	func void forEachExitAction(Block ablock)
		pExitActions.forEach(ablock)
	end
	
	/** \brief Find exit action with block with parameter SMStateAction. */
	func SMStateAction findExitAction(Block ablock)
		return pExitActions.find(ablock) cast SMStateAction
	end
	
	
	/** \brief Count of transitions. */
	func int getTransitionCount()
		return pTransitions.getCount()
	end
	
	/** \brief Get transition at index. */
	func SMTransition getTransitionAt(int index)
		return pTransitions.getAt(index) cast SMTransition
	end
	
	/** \brief Index of transition or -1 if absent. */
	func int indexOfTransition(SMTransition transition)
		return pTransitions.indexOf(transition)
	end
	
	/** \brief Add transition. */
	func void addTransition(SMTransition transition)
		if transition == null
			throw EInvalidParam.new()
		end
		pTransitions.add(transition)
	end
	
	/** \brief Remove transition. */
	func void removeTransition(SMTransition transition)
		pTransitions.remove(transition)
	end
	
	/** \brief Remove all transitions. */
	func void removeAllTransitions()
		pTransitions.removeAll()
	end
	
	/** \brief Visit transitions with block with parameter SMTransition. */
	func void forEachTransition(Block ablock)
		pTransitions.forEach(ablock)
	end
	
	/** \brief Find transition with block with parameter SMTransition. */
	func SMTransition findTransition(Block ablock)
		return pTransitions.find(ablock) cast SMTransition
	end
end
