/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */


namespace Dragengine.StateMachineSystem

pin Dragengine.LoadSave
pin Dragengine.Utils
pin Dragengine.Scenery



/**
 * \brief State machine context.
 * 
 * Used to run a state machine instance. The state machine itself is shared across contexts
 * while the individual state is stored in the context. Context has to provide the SMAction
 * instances for the state machine states to call. Subclass the context to provide the
 * required data for your SMAction subclasses to work properly.
 * 
 * After creating the context the initial state is the current state. No enter actions are
 * run on the initial state since during that time no actions and conditions are present yet.
 * 
 * The context can be written to and restored from file readers. This class saves only the
 * current state identifier. Subclass has to save its own states by overwriting readFromFile()
 * and writeToFile().
 */
class SMContext
	var StateMachine pStateMachine
	var Dictionary pConditions, pActions
	var SMState pCurrentState
	var Console pConsole
	var String pLoggingName
	var bool pLogTransitions, pLogStateChanges, pLogActions
	
	
	/** \brief Create state machine context. */
	func new(StateMachine stateMachine)
		if stateMachine == null
			throw EInvalidParam.new()
		end
		
		pStateMachine = stateMachine
		pConditions = Dictionary.new()
		pActions = Dictionary.new()
		pCurrentState = stateMachine.getStateAt(stateMachine.getInitialState())
		pLoggingName = "StateMachine"
	end
	
	/**
	 * \brief Create copy of state machine context.
	 * 
	 * Actions are copied as shallow copy. If you need a deep set all actions anew. The state
	 * of the context is the same as without creating a copy.
	 */
	func new(SMContext context) this(context, context.pStateMachine)
	end
	
	/**
	 * \brief Create copy of state machine context but using a different state machine.
	 * 
	 * Actions are copied as shallow copy. If you need a deep set all actions anew. The state
	 * of the context is the same as without creating a copy.
	 * 
	 * This method is useful to use an initialized base context with a fallback state machine.
	 * Whenever a new context is required the base context is copied. This avoids the need
	 * to assign actions and conditions since they are copied from the base context.
	 */
	func new(SMContext context, StateMachine stateMachine)
		if stateMachine == null
			throw EInvalidParam.new()
		end
		
		pStateMachine = stateMachine
		pConditions = Dictionary.new(context.pConditions)
		pActions = Dictionary.new(context.pActions)
		pCurrentState = stateMachine.getStateAt(stateMachine.getInitialState())
		
		pConsole = context.pConsole
		pLoggingName = context.pLoggingName
		pLogTransitions = context.pLogTransitions
		pLogStateChanges = context.pLogStateChanges
		pLogActions = context.pLogActions
		
		if pCurrentState == null
			throw EInvalidParam.new("initial state not found")
		end
	end
	
	
	/** \brief State machine. */
	func StateMachine getStateMachine()
		return pStateMachine
	end
	
	/**
	 * \brief Set state machine and reset state.
	 * \version 1.26
	 * 
	 * Sets the state machine then calls reset(). If you change the state machine during
	 * runtime you have to make sure it is also set before readFromFile() is called
	 * otherwise an exception can be thrown.
	 */
	func void setStateMachine(StateMachine stateMachine)
		if stateMachine == null
			throw ENullPointer.new("stateMachine")
		end
		
		pStateMachine = stateMachine
		reset()
	end
	
	
	/** \brief Count of conditions. */
	func int getConditionCount()
		return pConditions.getCount()
	end
	
	/** \brief Condition for name or null if absent. */
	func SMCondition getCondition(String name)
		return pConditions.getAt(name, null) cast SMCondition
	end
	
	/** \brief Condition is present. */
	func bool hasCondition(String name)
		return pConditions.has(name)
	end
	
	/** \brief Visit conditions using block with parameters String (name and SMCondition (condition). */
	func void forEachCondition(Block ablock)
		pConditions.forEach(ablock)
	end
	
	/** \brief Set condition for name. */
	func void setCondition(String name, SMCondition condition)
		if name == null or condition == null
			throw EInvalidParam.new()
		end
		pConditions.setAt(name, condition)
	end
	
	/** \brief Set condition for name using block. */
	func void setCondition(String name, Block condition)
		if name == null
			throw EInvalidParam.new()
		end
		pConditions.setAt(name, SMBlockCondition.new(condition))
	end
	
	/** \brief Remove condition. */
	func void removeCondition(String name)
		pConditions.remove(name)
	end
	
	/** \brief Remove all conditions. */
	func void removeAllConditions()
		pConditions.removeAll()
	end
	
	
	/** \brief Count of actions. */
	func int getActionCount()
		return pActions.getCount()
	end
	
	/** \brief Action for name or null if absent. */
	func SMAction getAction(String name)
		return pActions.getAt(name, null) cast SMAction
	end
	
	/** \brief Action is present. */
	func bool hasAction(String name)
		return pActions.has(name)
	end
	
	/** \brief Visit actions using block with parameters String (name and SMAction (action). */
	func void forEachAction(Block ablock)
		pActions.forEach(ablock)
	end
	
	/** \brief Set action for name. */
	func void setAction(String name, SMAction action)
		if name == null or action == null
			throw EInvalidParam.new()
		end
		pActions.setAt(name, action)
	end
	
	/** \brief Set action for name using block. */
	func void setAction(String name, Block action)
		if name == null
			throw EInvalidParam.new()
		end
		pActions.setAt(name, SMBlockAction.new(action))
	end
	
	/** \brief Remove action. */
	func void removeAction(String name)
		pActions.remove(name)
	end
	
	/** \brief Remove all actions. */
	func void removeAllActions()
		pActions.removeAll()
	end
	
	
	/** \brief Current state or null if in transition. */
	func SMState getCurrentState()
		return pCurrentState
	end
	
	/**
	 * \brief Set current state or null if in transition.
	 * 
	 * If a state is already present the exit actions are run before switching.
	 * If \em state is not null entering actions are run after switching.
	 * 
	 * Calls onCurrentStateChanged() after all changes are done.
	 */
	func void setCurrentState(SMState state)
		var bool doLog = pLogStateChanges and pConsole != null
		
		if pCurrentState != null
			if doLog
				pConsole.addMessage("{}: State '{}' {} exit actions".format(Array.newWith(\
					pLoggingName, pCurrentState.getID(), pCurrentState.getExitActionCount())))
			end
			
			pCurrentState.forEachExitAction(block SMStateAction each
				each.run(this)
			end)
		end
		
		if doLog
			pConsole.addMessage("{}: State '{}' change to '{}'".format(Array.newWith(\
				pLoggingName, pCurrentState != null if pCurrentState.getID() else null,\
				state != null if state.getID() else null)))
		end
		
		pCurrentState = state
		
		if state != null
			if doLog
				pConsole.addMessage("{}: State '{}' {} enter actions".format(Array.newWith(\
					pLoggingName, state.getID(), state.getEnterActionCount())))
			end
			
			state.forEachEnterAction(block SMStateAction each
				each.run(this)
			end)
		end
		
		onCurrentStateChanged()
	end
	
	/**
	 * \brief Set current state by identifier or null if in transition.
	 * 
	 * If a state is already present the exit actions are run before switching.
	 * If \em state is not null entering actions are run after switching.
	 * 
	 * Calls onCurrentStateChanged() after all changes are done.
	 */
	func void setCurrentStateByID(String id)
		if id != null
			setCurrentState(pStateMachine.getStateAt(id))
			
		else
			setCurrentState(null)
		end
	end
	
	/**
	 * \brief Set current state by identifier without calling actions or listeners.
	 * \version 1.26
	 * 
	 * For use with loading only. Do not call otherwise.
	 */
	func void setOnlyCurrentStateByID(String id)
		pCurrentState = pStateMachine.getStateAt(id)
	end
	
	
	/** \brief Console or \em null if not wishing to log anything. */
	func Console getConsole()
		return pConsole
	end
	
	/** \brief Set console or \em null if not wishing to log anything. */
	func void setConsole(Console console)
		pConsole = console
	end
	
	/** \brief Logging name to tell apart logs. */
	func String getLoggingName()
		return pLoggingName
	end
	
	/** \brief Set logging name to tell apart logs. */
	func void setLoggingName(String name)
		if name == null
			throw EInvalidParam.new()
		end
		pLoggingName = name
	end
	
	/** \brief Log state machine steps. */
	func bool getLogTransitions()
		return pLogTransitions
	end
	
	/** \brief Set log state machine steps. */
	func void setLogTransitions(bool logSteps)
		pLogTransitions = logSteps
	end
	
	/** \brief Log state machine state changes. */
	func bool getLogStateChanges()
		return pLogStateChanges
	end
	
	/** \brief Set log state machine state changes. */
	func void setLogStateChanges(bool logStateChanges)
		pLogStateChanges = logStateChanges
	end
	
	/**
	 * \brief Log actions.
	 * \version 1.26
	 */
	func bool getLogActions()
		return pLogActions
	end
	
	/** \brief Set actions. */
	func void setLogActions(bool logActions)
		pLogActions = logActions
	end
	
	
	/**
	 * \brief Run event on state machine.
	 * \returns true if state understands event otherwise false is returned.
	 */
	func bool runEvent(String event)
		if event == null
			throw ENullPointer.new()
		end
		if pCurrentState == null
			throw EInvalidParam.new("in transition")
		end
		
		var SMTransition transition = pCurrentState.findTransition(block SMTransition each
			return each.matches(this, event)
		end)
		
		if pLogTransitions and pConsole != null
			if transition != null
				pConsole.addMessage("{}: State '{}' event '{}' transition {} next state '{}'"\
					.format(Array.newWith(pLoggingName, pCurrentState.getID(), event,\
						pCurrentState.indexOfTransition(transition), transition.getStateID())))
				
			else
				pConsole.addMessage("{}: State '{}' event '{}' no transition"\
					.format(Array.newWith(pLoggingName, pCurrentState.getID(), event)))
			end
		end
		
		if transition == null
			return false
		end
		
		transition.run(this)
		return true
	end
	
	/**
	 * \brief Reset to initial state.
	 * 
	 * Sets the state machine root state as current state.
	 */
	func void reset()
		pCurrentState = pStateMachine.getStateAt(pStateMachine.getInitialState())
	end
	
	
	
	/**
	 * \brief Hook method called if setCurrentState() is called.
	 * 
	 * Allows subclasses to react to current state changes. This might be required for
	 * certain SMAction to reset states if states change.
	 */
	protected func void onCurrentStateChanged()
	end
	
	
	
	/** \brief Read state from file. */
	func void readFromFile(PersistencyEnvironment env, FileReader reader)
		select reader.readByte() // version
		case 0
			var PersistencyFlags flags = PersistencyFlags.new(1, reader)
			if flags.getAt(0)
				pCurrentState = pStateMachine.getStateAt(reader.readString8())
			end
			
		else
			throw EInvalidParam.new("unsupported version")
		end
	end
	
	/** \brief Write state to file. */
	func void writeToFile(PersistencyEnvironment env, FileWriter writer)
		writer.writeByte(0) // version
		
		var PersistencyFlags flags = PersistencyFlags.new(1)
		flags.setAt(0, pCurrentState != null)
		
		if pCurrentState != null
			writer.writeString8(pCurrentState.getID())
		end
	end
end
