/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */


namespace Dragengine.StateMachineSystem

pin Dragengine.Scenery
pin Dragengine.Utils



/**
 * \brief State machine condition combinding one or more conditions.
 * 
 * Useful to create a complex condition out of group of simple conditions.
 * The conditions are stored as identifiers so they can be reused.
 */
class SMConditionCombine implements SMCondition
	/** \brief Combine modes. */
	public enum Mode
		/** \brief All conditions have to evaluate to true. */
		allTrue
		
		/** \brief At least one condition has to evaluate to true. */
		anyTrue
		
		/** \brief At least one condition has to evaluate to false. */
		anyFalse
		
		/** \brief All conditions have to evaluate to false. */
		allFalse
	end
	
	
	
	/** \brief Conditions as Array of String identifiers. */
	private var Array pConditions
	
	/** \brief Resolved conditions as Array of SMCondition. */
	private var Array pResolvedConditions
	
	/** \brief Combine mode from eCombineModes. */
	private var Mode pMode
	
	
	
	/** \brief Create condition. */
	public func new( Mode mode )
		this.pConditions = Array.new()
		this.pMode = mode
	end
	
	/** \brief Create condition using two conditions. */
	public func new( Mode mode, String condition1, String condition2 )
		if condition1 == null or condition2 == null
			throw EInvalidParam.new()
		end
		
		this.pMode = mode
		this.pConditions = Array.newWith( condition1, condition2 )
	end
	
	/** \brief Create condition using three conditions. */
	public func new( Mode mode, String condition1, String condition2, String condition3 )
		if condition1 == null or condition2 == null or condition3 == null
			throw EInvalidParam.new()
		end
		
		this.pMode = mode
		this.pConditions = Array.newWith( condition1, condition2, condition3 )
	end
	
	/** \brief Create condition using four conditions. */
	public func new( Mode mode, String condition1, String condition2, String condition3, String condition4 )
		if condition1 == null or condition2 == null or condition3 == null or condition4 == null
			throw EInvalidParam.new()
		end
		
		this.pMode = mode
		this.pConditions = Array.newWith( condition1, condition2, condition3, condition4 )
	end
	
	
	
	/** \brief Number of conditions. */
	public func int getConditionCount()
		return this.pConditions.getCount()
	end
	
	/** \brief Get condition at index. */
	public func String getConditionAt( int index )
		return this.pConditions.getAt( index ) cast String
	end
	
	/** \brief Index of condition or -1 if absent. */
	public func int indexOfCondition( String condition )
		return this.pConditions.indexOf( condition )
	end
	
	/** \brief Add condition. */
	public func void addCondition( String condition )
		if condition == null
			throw EInvalidParam.new()
		end
		this.pConditions.add( condition )
		this.pResolvedConditions = null
	end
	
	/** \brief Remove condition. */
	public func void removeCondition( String condition )
		this.pConditions.remove( condition )
		this.pResolvedConditions = null
	end
	
	/** \brief Remove all conditions. */
	public func void removeAllConditions()
		this.pConditions.removeAll()
		this.pResolvedConditions = null
	end
	
	/** \brief Visit conditions with block with parameter String. */
	public func void forEachCondition( Block ablock )
		this.pConditions.forEach( ablock )
	end
	
	/** \brief Find condition with block with parameter String. */
	public func String findCondition( Block ablock )
		return this.pConditions.find( ablock ) cast String
	end
	
	/** \brief Combine mode from eCombineModes. */
	public func Mode getMode()
		return this.pMode
	end
	
	/** \brief Set combine mode from eCombineModes. */
	public func void setMode( Mode mode )
		this.pMode = mode
	end
	
	
	
	/**
	 * \brief Evaluate condition.
	 * \param parameters Dictionary with parameters of type String key and String value.
	 *                   Do not change the content of the dictionary as it is shared.
	 */
	public func bool evaluateCondition( SMContext context, Dictionary parameters )
		if this.pResolvedConditions == null
			this.pResolvedConditions = this.pConditions.map( block String each
				return context.getCondition( each )
			end )
		end
		
		if this.pResolvedConditions.getCount() == 0
			return true
		end
		
		select this.pMode
		case Mode.allTrue
			return this.pResolvedConditions.find( block SMCondition each
				return each == null or not each.evaluateCondition( context, parameters )
			end ) == null
			
		case Mode.anyTrue
			return this.pResolvedConditions.find( block SMCondition each
				return each != null and each.evaluateCondition( context, parameters )
			end ) != null
			
		case Mode.anyFalse
			return this.pResolvedConditions.find( block SMCondition each
				return each == null or not each.evaluateCondition( context, parameters )
			end ) != null
			
		case Mode.allFalse
			return this.pResolvedConditions.find( block SMCondition each
				return each != null and each.evaluateCondition( context, parameters )
			end ) == null
			
		else
			return false
		end
	end
end
