/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

namespace Dragengine.StateMachineSystem

pin Dragengine.Scenery
pin Dragengine.Utils


/**
 * \brief State machine.
 */
class StateMachine
	var Dictionary pStates
	var String pInitialState
	var String pFilename
	
	
	/** \brief Create state machine. */
	func new()
		pStates = Dictionary.new()
	end
	
	/** \brief Create state machine with empty state. */
	static func StateMachine newEmpty()
		var StateMachine sm = new()
		sm.pInitialState = "empty"
		var SMState state = SMState.new(sm.pInitialState)
		sm.pStates.setAt(sm.pInitialState, state)
		return sm
	end
	
	/**
	 * \brief Create state machine with filename.
	 * \version 1.26
	 */
	func new(String filename) this()
		pFilename = filename
	end
	
	
	/** \brief Count of states. */
	func int getStateCount()
		return pStates.getCount()
	end
	
	/** \brief State with identifier is present. */
	func bool hasStateAt(String id)
		return pStates.has(id)
	end
	
	/** \brief State with identifier or \em null if absent. */
	func SMState getStateAt(String id)
		return pStates.getAt(id, null) cast SMState
	end
	
	/**
	 * \brief Visit states with block.
	 * \version 1.26
	 * 
	 * Block has signature (SMState).
	 */
	func void forEachState(Block ablock)
		pStates.forEachValue(ablock)
	end
	
	/**
	 * \brief Add state.
	 * \throws EInvalidParam Another state with the same identifier is present.
	 */
	func void addState(SMState state)
		if state == null
			throw ENullPointer.new()
		end
		if pStates.has(state.getID())
			throw EInvalidParam.new("state id already present")
		end
		pStates.setAt(state.getID(), state)
	end
	
	/**
	 * \brief Remove state.
	 * \version 1.26
	 */
	func void removeState(SMState state)
		pStates.remove(state.getID())
	end
	
	/**
	 * \brief Add state replacing existing one if present.
	 * \version 1.26
	 */
	func void addStateReplace(SMState state)
		if state == null
			throw ENullPointer.new()
		end
		pStates.setAt(state.getID(), state)
	end
	
	
	
	/** \brief Initial state or null if not set. */
	func String getInitialState()
		return pInitialState
	end
	
	/** \brief Set initial state. */
	func void setInitialState(String initialState)
		pInitialState = initialState
	end
	
	/**
	 * \brief Filename or null.
	 * \version 1.26
	 */
	func String getFilename()
		return pFilename
	end
end
