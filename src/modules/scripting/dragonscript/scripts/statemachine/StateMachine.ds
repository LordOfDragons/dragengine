/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */


namespace Dragengine.StateMachineSystem

pin Dragengine.Scenery
pin Dragengine.Utils



/**
 * \brief State machine.
 */
class StateMachine
	/** \brief Dictionary mapping String state identifier to SMState. */
	private var Dictionary pStates
	
	/** \brief Initial state. */
	private var String pInitialState
	
	
	
	/** \brief Create behavior tree. */
	public func new()
		this.pStates = Dictionary.new()
	end
	
	
	
	/** \brief Count of states. */
	public func int getStateCount()
		return this.pStates.getCount()
	end
	
	/** \brief State with identifier is present. */
	public func bool hasStateAt( String id )
		return this.pStates.has( id )
	end
	
	/** \brief State with identifier or \em null if absent. */
	public func SMState getStateAt( String id )
		return this.pStates.getAt( id, null ) cast SMState
	end
	
	/**
	 * \brief Add state.
	 * \throws EInvalidParam Another state with the same identifier is present.
	 */
	public func void addState( SMState state )
		if state == null
			throw ENullPointer.new()
		end
		if this.pStates.has( state.getID() )
			throw EInvalidParam.new( "state id already present" )
		end
		this.pStates.setAt( state.getID(), state )
	end
	
	
	
	/** \brief Initial state. */
	public func String getInitialState()
		return this.pInitialState
	end
	
	/** \brief Set initial state. */
	public func void setInitialState( String initialState )
		this.pInitialState = initialState
	end
end
