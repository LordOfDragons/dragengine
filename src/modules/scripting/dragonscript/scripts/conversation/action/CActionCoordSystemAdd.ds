/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */


namespace Dragengine.ConversationSystem

pin Dragengine.Gui
pin Dragengine.LoadSave
pin Dragengine.Scenery
pin Dragengine.Utils



/**
 * \brief Conversation action adding a coordinate system to the conversation if not there yet.
 */
class CActionCoordSystemAdd extends ConversationAction
	/** \brief Factory for loading actor actions. */
	class Factory implements PersistencyFactory
		public static fixed var String NAME = "CActionCoordSystemAdd"
		
		func new()
		end
		
		func Persistable readObjectFromFile(PersistencyEnvironment env, FileReader reader)
			return CActionCoordSystemAdd.new(env, reader)
		end
		
		static func void registerFactory(Persistency persistency)
			persistency.addFactory(NAME, Factory.new())
		end
	end
	
	
	
	var StringID pCoordSystemID
	var StringID pAliasID
	
	
	
	/** \brief Create conversation action. */
	func new()
	end
	
	/** \brief Read from file. */
	func new(PersistencyEnvironment env, FileReader reader) super(env, reader)
		select reader.readByte() // version
		case 0
			pCoordSystemID = env.readStringIDOrNullIfEmpty(reader)
			pAliasID = env.readStringIDOrNullIfEmpty(reader)
			
		else
			throw EInvalidParam.new("unsupported version")
		end
	end
	
	
	
	/** \brief Coordinate system ID or null if not set. */
	func StringID getCoordSystemID()
		return pCoordSystemID
	end
	
	/** \brief Set coordinate system ID or null if not set. */
	func void setCoordSystemID(StringID id)
		pCoordSystemID = id
	end
	
	/** \brief Optional alias ID to set for the actor or null if not set. */
	func StringID getAliasID()
		return pAliasID
	end
	
	/** \brief Set optional alias ID to set for the actor or null if not set. */
	func void setAliasID(StringID id)
		pAliasID = id
	end
	
	
	
	/** \brief Execute action. */
	func void execute(ConversationPlayback playback)
		var ConversationCoordSystem coordSystem = playback.getCoordSystemByID(pCoordSystemID)
		
		if coordSystem == null
			coordSystem = playback.createConversationCoordSystem(pCoordSystemID)
			playback.addCoordSystem(coordSystem, pAliasID)
		end
		
		playback.advanceToNextAction()
	end
	
	
	
	/**
	 * \brief Name of PersistencyFactory required to load object from file.
	 * 
	 * Name of PersistencyFactory is first written to the file as string with
	 * 8-bit length. Then writeToFile() is called to write the object itself.
	 * Empty name is not allowed as is names longer than 255 characters.
	 * Name has to match a PersistencyFactory present in the Persistency
	 * instance used for loading objects. Object is read using
	 * PersistencyFactory.readObjectFromFile() of the matching PersistencyFactory.
	 */
	func String persistencyFactoryName()
		return Factory.NAME
	end
	
	/** \brief Write object to file writer. */
	func void writeObjectToFile(PersistencyEnvironment env, FileWriter writer)
		super.writeObjectToFile(env, writer)
		
		writer.writeByte(0) // version
		
		env.writeStringIDOrEmptyIfNull(writer, pCoordSystemID)
		env.writeStringIDOrEmptyIfNull(writer, pAliasID)
	end
end
