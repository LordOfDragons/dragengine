/* 
 * Drag[en]gine DragonScript Script Module
 *
 * Copyright (C) 2020, Roland Pl√ºss (roland@rptd.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */


namespace Dragengine.ConversationSystem

pin Dragengine.LoadSave
pin Dragengine.Scenery
pin Dragengine.Utils



/**
 * \brief Option for a player choice conversation action.
 */
class CActionPlayerChoiceOption
	var UnicodeString pText
	var ConversationCondition pCondition
	var Array pActions
	
	
	
	/** \brief Create conversation action. */
	func new()
		pText = UnicodeString.new()
		pActions = Array.new()
	end
	
	
	
	/** \brief Text. */
	func UnicodeString getText()
		return pText
	end
	
	/** \brief Set text. */
	func void setText(UnicodeString text)
		if text == null
			throw EInvalidParam.new()
		end
		pText = text
	end
	
	/** \brief Condition or \em null if not set. */
	func ConversationCondition getCondition()
		return pCondition
	end
	
	/** \brief Set condition or \em null if not set. */
	func void setCondition(ConversationCondition condition)
		pCondition = condition
	end
	
	
	
	/** \brief Visits all actions. */
	func void forEachAction(Block aBlock)
		pActions.forEach(aBlock)
	end
	
	/** \brief Adds an action. */
	func void addAction(ConversationAction action)
		if action == null
			throw EInvalidParam.new()
		end
		pActions.add(action)
	end
	
	/** \brief Actions. */
	func Array getActions()
		return pActions
	end
	
	/** \brief Iterator for actions. */
	func ConversationActionIterator getIteratorActions()
		return ConversationActionIterator.new(pActions, 0)
	end
	
	
	
	
	/** \brief Read from file. */
	static func CActionPlayerChoiceOption readFromFile(PersistencyEnvironment env, FileReader reader)
		var CActionPlayerChoiceOption option = CActionPlayerChoiceOption.new()
		
		select reader.readByte() // version
		case 0
			option.pText = UnicodeString.newFromUTF8(reader.readString16())
			option.pCondition = env.readObjectOrNull(reader) cast ConversationCondition
			
			var int i, count = reader.readUShort()
			for i = 0 to count
				option.pActions.add(env.readObject(reader))
			end
			
		else
			throw EInvalidParam.new("unsupported version")
		end
		
		return option
	end
	
	/** \brief Write to file writer. */
	func void writeToFile(PersistencyEnvironment env, FileWriter writer)
		writer.writeByte(0) // version
		
		writer.writeString16(pText.toString())
		env.writeObjectOrNull(writer, pCondition)
		
		writer.writeUShort(pActions.getCount())
		pActions.forEach(block ConversationAction each
			env.writeObject(writer, each)
		end)
	end
end
