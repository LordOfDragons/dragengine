/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */


namespace Dragengine.ConversationSystem

pin Dragengine.LoadSave
pin Dragengine.Scenery
pin Dragengine.Utils



/**
 * \brief Conversation action setting an actor parameter.
 */
class CActionSetActorParameter extends ConversationAction
	/** \brief Factory for loading actor actions. */
	class Factory implements PersistencyFactory
		public static fixed var String NAME = "CActionSetActorParameter"
		
		func new()
		end
		
		func Persistable readObjectFromFile(PersistencyEnvironment env, FileReader reader)
			return CActionSetActorParameter.new(env, reader)
		end
		
		static func void registerFactory(Persistency persistency)
			persistency.addFactory(NAME, Factory.new())
		end
	end
	
	
	
	/** \brief Operator. */
	public enum Operator
		/** \brief Sets the parameter. */
		set
		
		/** \brief Increments the parameter. */
		increment
		
		/** \brief Decrements the parameter. */
		decrement
		
		/** \brief Randomize variable. */
		random
	end
	
	
	
	var StringID pActorID
	var String pName
	var Operator pOperator
	var int pValue
	var String pValueVariable
	
	
	
	/** \brief Create conversation action. */
	func new()
		pOperator = Operator.set
		pValue = 0
	end
	
	/** \brief Read from file. */
	func new(PersistencyEnvironment env, FileReader reader) super(env, reader)
		select reader.readByte() // version
		case 0
			pActorID = env.readStringIDOrNullIfEmpty(reader)
			pName = env.readString8OrNullIfEmpty(reader)
			pOperator = Operator.withOrder(reader.readByte())
			pValue = reader.readInt()
			pValueVariable = env.readString8OrNullIfEmpty(reader)
			
		else
			throw EInvalidParam.new("unsupported version")
		end
	end
	
	
	
	/** \brief Actor ID or null if not set. */
	func StringID getActorID()
		return pActorID
	end
	
	/** \brief Set actor ID or null if not set. */
	func void setActorID(StringID id)
		pActorID = id
	end
	
	/** \brief Name of the parameter to set. */
	func String getName()
		return pName
	end
	
	/** \brief Set name of the parameter to set. */
	func void setName(String name)
		pName = name
	end
	
	/** \brief Operator. */
	func Operator getOperator()
		return pOperator
	end
	
	/** \brief Set operator. */
	func void setOperator(Operator operator)
		pOperator = operator
	end
	
	/** \brief Value to use for operation. */
	func int getValue()
		return pValue
	end
	
	/** \brief Set value to use for operation. */
	func void setValue(int value)
		pValue = value
	end
	
	/** \brief Variable value to use for operation or null to use value. */
	func String getValueVariable()
		return pValueVariable
	end
	
	/** \brief Set variable value to use for operation or null to use value. */
	func void setValueVariable(String variable)
		pValueVariable = variable
	end
	
	
	
	/** \brief Execute action. */
	func void execute(ConversationPlayback playback)
		var ConversationActor actor = playback.getActorMatching(pActorID)
		
		if actor == null or pName == null
			playback.advanceToNextAction()
			return
		end
		
		var int value = pValue
		if pValueVariable != null
			value = playback.getVariable(pValueVariable, value)
		end
		
		select pOperator
		case Operator.set
			actor.setParameter(pName, value)
			
		case Operator.increment
			actor.setParameter(pName, actor.getParameter(pName) + value)
			
		case Operator.decrement
			actor.setParameter(pName, actor.getParameter(pName) - value)
			
		case Operator.random
			actor.setParameter(pName, DEMath.random(0, value))
		end
		
		playback.advanceToNextAction()
	end
	
	
	
	/**
	 * \brief Name of PersistencyFactory required to load object from file.
	 * 
	 * Name of PersistencyFactory is first written to the file as string with
	 * 8-bit length. Then writeToFile() is called to write the object itself.
	 * Empty name is not allowed as is names longer than 255 characters.
	 * Name has to match a PersistencyFactory present in the Persistency
	 * instance used for loading objects. Object is read using
	 * PersistencyFactory.readObjectFromFile() of the matching PersistencyFactory.
	 */
	func String persistencyFactoryName()
		return Factory.NAME
	end
	
	/** \brief Write object to file writer. */
	func void writeObjectToFile(PersistencyEnvironment env, FileWriter writer)
		super.writeObjectToFile(env, writer)
		
		writer.writeByte(0) // version
		
		env.writeStringIDOrEmptyIfNull(writer, pActorID)
		env.writeString8OrEmptyIfNull(writer, pName)
		writer.writeByte(pOperator.order())
		writer.writeInt(pValue)
		env.writeString8OrEmptyIfNull(writer, pValueVariable)
	end
end
