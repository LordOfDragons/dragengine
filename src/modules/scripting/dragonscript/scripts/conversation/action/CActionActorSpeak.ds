/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */


namespace Dragengine.ConversationSystem

pin Dragengine.Gui
pin Dragengine.LoadSave
pin Dragengine.SpeechAnimations
pin Dragengine.Scenery
pin Dragengine.Utils



/**
 * \brief Conversation action making actors speak.
 */
class CActionActorSpeak extends ConversationAction
	/** \brief Factory for loading actor actions. */
	class Factory implements PersistencyFactory
		public static fixed var String NAME = "CActionActorSpeak"
		
		func new()
		end
		
		func Persistable readObjectFromFile(PersistencyEnvironment env, FileReader reader)
			return CActionActorSpeak.new(env, reader)
		end
		
		static func void registerFactory(Persistency persistency)
			persistency.addFactory(NAME, Factory.new())
		end
	end
	
	
	
	var Sound pSound
	var StringID pActorID
	var UnicodeString pTextBoxText
	var String pTextBoxTextTranslate
	var StringID pTextBoxTextStyle
	var String pPathSound
	var Array pWords
	var Array pFacePoses
	var Array pGestures
	var Array pBodyLookAts
	var Array pHeadLookAts
	var Array pEyesLookAts
	var bool pUseSpeechAnimation
	var float pMinSpeechTime
	var float pMissingPhonemeLength
	
	
	
	/** \brief Create conversation action. */
	func new()
		pWords = Array.new()
		pFacePoses = Array.new()
		pGestures = Array.new()
		pBodyLookAts = Array.new()
		pHeadLookAts = Array.new()
		pEyesLookAts = Array.new()
		pUseSpeechAnimation = true
		pMinSpeechTime = 0
		pMissingPhonemeLength = 0.08
	end
	
	/** \brief Read from file. */
	func new(PersistencyEnvironment env, FileReader reader) super(env, reader)
		select reader.readByte() // version
		case 0
			readV0(env, reader)
			
		case 1
			readV0(env, reader)
			pTextBoxTextTranslate = env.readString16OrNullIfEmpty(reader)
			
		else
			throw EInvalidParam.new("unsupported version")
		end
	end
	
	protected func void readV0(PersistencyEnvironment env, FileReader reader)
		var PersistencyFlags flags = PersistencyFlags.new(1, reader)
		pUseSpeechAnimation = flags.getAt(0)
		
		pActorID = env.readStringIDOrNullIfEmpty(reader)
		
		var String text = reader.readString16()
		if not text.empty()
			pTextBoxText = UnicodeString.newFromUTF8(text)
		end
		
		pTextBoxTextStyle = env.readStringIDOrNullIfEmpty(reader)
		pPathSound = env.readString16OrNullIfEmpty(reader)
		
		var int i, count = reader.readUShort()
		pWords = Array.new()
		for i = 0 to count
			pWords.add(ConversationStrip.readFromFile(reader))
		end
		
		count = reader.readUShort()
		pFacePoses = Array.new()
		for i = 0 to count
			pFacePoses.add(ConversationStrip.readFromFile(reader))
		end
		
		count = reader.readUShort()
		pGestures = Array.new()
		for i = 0 to count
			pGestures.add(ConversationStrip.readFromFile(reader))
		end
		
		count = reader.readUShort()
		pBodyLookAts = Array.new()
		for i = 0 to count
			pBodyLookAts.add(ConversationStrip.readFromFile(reader))
		end
		
		count = reader.readUShort()
		pHeadLookAts = Array.new()
		for i = 0 to count
			pHeadLookAts.add(ConversationStrip.readFromFile(reader))
		end
		
		count = reader.readUShort()
		pEyesLookAts = Array.new()
		for i = 0 to count
			pEyesLookAts.add(ConversationStrip.readFromFile(reader))
		end
		
		pMinSpeechTime = reader.readFloat()
	end
	
	
	
	/** \brief Sound file loading it if not loaded already. */
	func Sound getSound()
		if pSound == null and pPathSound != null
			pSound = Sound.new(pPathSound)
		end
		
		return pSound
	end
	
	/** \brief Actor ID or null if not set. */
	func StringID getActorID()
		return pActorID
	end
	
	/** \brief Set actor ID or null if not set. */
	func void setActorID(StringID id)
		pActorID = id
	end
	
	/** \brief Text box text or null to not set the text. */
	func UnicodeString getTextBoxText()
		return pTextBoxText
	end
	
	/** \brief Set text box text or null to not set the text. */
	func void setTextBoxText(UnicodeString text)
		pTextBoxText = text
	end
	
	/**
	 * \brief Translated text box text or null to use regular text box text.
	 * \version 1.16
	 */
	func String getTextBoxTextTranslate()
		return pTextBoxTextTranslate
	end
	
	/**
	 * \brief Set translated text box text or null to use regular text box text.
	 * \version 1.16
	 */
	func void setTextBoxTextTranslate(String name)
		pTextBoxTextTranslate = name
	end
	
	/** \brief Text box text style id. */
	func StringID getTextBoxTextStyle()
		return pTextBoxTextStyle
	end
	
	/** \brief Set text box text style. */
	func void setTextBoxTextStyle(StringID styleID)
		pTextBoxTextStyle = styleID
	end
	
	/** \brief Path to the sound file or null to not play sound. */
	func String getPathSound()
		return pPathSound
	end
	
	/** \brief Set path to the sound file or null to not play sound. */
	func void setPathSound(String path)
		pPathSound = path
	end
	
	/** \brief Speech animation is used for this action. */
	func bool getUseSpeechAnimation()
		return pUseSpeechAnimation
	end
	
	/** \brief Set if speech animation is used for this action. */
	func void setUseSpeechAnimation(bool useSpeechAnimation)
		pUseSpeechAnimation = useSpeechAnimation
	end
	
	/** \brief Minimum time the actor is speaking. */
	func float getMinSpeechTime()
		return pMinSpeechTime
	end
	
	/** \brief Set minimum time the actor is speaking. */
	func void setMinSpeechTime(float minSpeechTime)
		pMinSpeechTime = DEMath.max(minSpeechTime, 0.0)
	end
	
	/**
	 * \brief Length to use for missing phoneme.
	 * \version 1.25
	 */
	func float getMissingPhonemeLength()
		return pMissingPhonemeLength
	end
	
	/**
	 * \brief Set length to use for missing phoneme.
	 * \version 1.25
	 */
	func void setMissingPhonemeLength(float length)
		pMissingPhonemeLength = DEMath.max(length, 0.001)
	end
	
	
	
	/**
	 * \brief Count of words.
	 * \version 1.25
	 */
	func int getWordCount()
		return pWords.getCount()
	end
	
	/** \brief Visits all words. */
	func void forEachWord(Block aBlock)
		pWords.forEach(aBlock)
	end
	
	/** \brief Add word. */
	func void addWord(ConversationStrip word)
		if word == null
			throw EInvalidParam.new()
		end
		pWords.add(word)
	end
	
	/**
	 * \brief Remove all words.
	 * \version 1.25
	 */
	func void removeAllWords()
		pWords.removeAll()
	end
	
	
	
	/**
	 * \brief Count of face poses.
	 * \version 1.25
	 */
	func int getFacePoseCount()
		return pFacePoses.getCount()
	end
	
	/** \brief Visits all face poses. */
	func void forEachFacePose(Block aBlock)
		pFacePoses.forEach(aBlock)
	end
	
	/** \brief Add face pose. */
	func void addFacePose(ConversationStrip facePose)
		if facePose == null
			throw EInvalidParam.new()
		end
		pFacePoses.add(facePose)
	end
	
	/**
	 * \brief Remove all face poses.
	 * \version 1.25
	 */
	func void removeAllFacePoses()
		pFacePoses.removeAll()
	end
	
	
	
	/**
	 * \brief Count of gestures.
	 * \version 1.25
	 */
	func int getGestureCount()
		return pGestures.getCount()
	end
	
	/** \brief Visits all gestures. */
	func void forEachGesture(Block aBlock)
		pGestures.forEach(aBlock)
	end
	
	/** \brief Adds a gesture. */
	func void addGesture(ConversationStrip gesture)
		if gesture == null
			throw EInvalidParam.new()
		end
		pGestures.add(gesture)
	end
	
	/**
	 * \brief Remove all gestues.
	 * \version 1.25
	 */
	func void removeAllGestures()
		pGestures.removeAll()
	end
	
	
	
	/**
	 * \brief Count of body look-ats.
	 * \version 1.25
	 */
	func int getBodyLookAtCount()
		return pBodyLookAts.getCount()
	end
	
	/** \brief Visits all body look-ats. */
	func void forEachBodyLookAt(Block aBlock)
		pBodyLookAts.forEach(aBlock)
	end
	
	/** \brief Adds a body look-at. */
	func void addBodyLookAt(ConversationStrip lookAt)
		if lookAt == null
			throw EInvalidParam.new()
		end
		pBodyLookAts.add(lookAt)
	end
	
	/**
	 * \brief Remove all body look-at.
	 * \version 1.25
	 */
	func void removeAllBodyLookAt()
		pBodyLookAts.removeAll()
	end
	
	
	
	/**
	 * \brief Count of head look-ats.
	 * \version 1.25
	 */
	func int getHeadLookAtCount()
		return pHeadLookAts.getCount()
	end
	
	/** \brief Visits all head look-ats. */
	func void forEachHeadLookAt(Block aBlock)
		pHeadLookAts.forEach(aBlock)
	end
	
	/** \brief Adds a head look-at. */
	func void addHeadLookAt(ConversationStrip lookAt)
		if lookAt == null
			throw EInvalidParam.new()
		end
		pHeadLookAts.add(lookAt)
	end
	
	/**
	 * \brief Remove all head look-at.
	 * \version 1.25
	 */
	func void removeAllHeadLookAt()
		pHeadLookAts.removeAll()
	end
	
	
	
	/**
	 * \brief Count of eye look-ats.
	 * \version 1.25
	 */
	func int getEyeLookAtCount()
		return pEyesLookAts.getCount()
	end
	
	/** \brief Visits all eyes look-ats. */
	func void forEachEyesLookAt(Block aBlock)
		pEyesLookAts.forEach(aBlock)
	end
	
	/** \brief Adds a eyes look-at. */
	func void addEyesLookAt(ConversationStrip lookAt)
		if lookAt == null
			throw EInvalidParam.new()
		end
		pEyesLookAts.add(lookAt)
	end
	
	/**
	 * \brief Remove all eye look-at.
	 * \version 1.25
	 */
	func void removeAllEyeLookAt()
		pEyesLookAts.removeAll()
	end
	
	
	
	/** \brief Play back a sound file as voice of a conversation actor. */
	func void playVoiceAudio(ConversationActor actor, Sound sound)
		var Speaker speaker = actor.getVoiceSpeaker()
		
		if speaker == null
			return
		end
		
		speaker.stop()
		speaker.setSound(sound)
		
		if sound != null
			speaker.play()
		end
	end
	
	/** \brief Execute action. */
	func void execute(ConversationPlayback playback)
		if pActorID == null
			playback.advanceToNextAction()
			return
		end
		
		var ConversationActor actor = playback.getActorMatching(pActorID)
		if actor == null
			playback.advanceToNextAction()
			return
		end
		
		var float speechTime = pMinSpeechTime
		
		speechTime = DEMath.max(executeVoiceSound(playback, actor), speechTime)
		speechTime = DEMath.max(executeSpeechAnimation(playback, actor), speechTime)
		executeSubTitle(playback, actor, speechTime)
		executeGesture(playback, actor)
		executeFacePose(playback, actor)
		executeHeadLookAt(playback, actor)
		executeEyesLookAt(playback, actor)
		
		if speechTime > 0
			actor.setRemainingSpeechTime(speechTime)
		end
		
		actor.beginActorSpeech(this)
		
		playback.advanceToNextAction()
	end
	
	/**
	 * \brief Execute voice sound.
	 * \returns speech time or 0 if no sound is played.
	 */
	func float executeVoiceSound(ConversationPlayback playback, ConversationActor actor)
		var Sound sound
		
		try
			sound = getSound()
			
		catch Exception e
			// playback.getConsole()...
		end
		
		if sound == null
			return 0
		end
		
		playVoiceAudio(actor, sound)
		return sound.getPlayTime()
	end
	
	/**
	 * \brief Execute speech animation.
	 * \returns speech time or 0 if no sound is played.
	 */
	func float executeSpeechAnimation(ConversationPlayback playback, ConversationActor actor)
		if pWords.getCount() == 0
			return 0
		end
		
		var SpeechAnimationPlayback speechPlayback = actor.getSpeechAnimationPlayback()
		var float sanimLength = 0
		
		if speechPlayback == null or speechPlayback.getSpeechAnimation() == null
			var int count = pWords.getCount()
			var int i
			
			for i = 0 to count
				var ConversationStrip strip = pWords.getAt(i) cast ConversationStrip
				sanimLength += strip.getPause()
				sanimLength += strip.getDuration()
			end
			
		else
			var SpeechAnimation sanimation = speechPlayback.getSpeechAnimation()
			var SpeechAnimationPhoneme saphoneme
			var SpeechAnimationWord saword
			var UnicodeString phonetics
			var ConversationStrip wordFirst
			var ConversationStrip wordLast
			var float pauseLen
			var float scaling
			var int i, length
			
			speechPlayback.removeAllPhonemes()
			
			if pWords.getCount() > 0
				wordFirst = pWords.getAt(0) cast ConversationStrip
				wordLast = pWords.getAt(-1) cast ConversationStrip
			end
			
			pWords.forEach(block ConversationStrip word
				pauseLen = word.getPause()
				
				if pauseLen > 0.01
					// add pause. if the pause is added as single empty phoneme a long pause
					// leads to strange gaping motion. this is due to blending from phoneme
					// to phoneme. this is countered by adding short empty phoneme at the
					// appropriate end to protect the long pause
					if word == wordFirst
						if pauseLen > 0.15
							// protection at end of pause
							speechPlayback.addPhoneme(null, pauseLen - 0.1)
							speechPlayback.addPhoneme(null, 0.1)
							
						else
							speechPlayback.addPhoneme(null, pauseLen)
						end
						
					elif word == wordLast
						if pauseLen > 0.15
							// protection at beginning of pause
							speechPlayback.addPhoneme(null, 0.1)
							speechPlayback.addPhoneme(null, pauseLen - 0.1)
							
						else
							speechPlayback.addPhoneme(null, pauseLen)
						end
						
					else
						if pauseLen > 0.25
							// protection at both ends of pause
							speechPlayback.addPhoneme(null, 0.1)
							speechPlayback.addPhoneme(null, pauseLen - 0.2)
							speechPlayback.addPhoneme(null, 0.1)
							
						else
							speechPlayback.addPhoneme(null, pauseLen)
						end
					end
				end
				
				if word.getID() == null
					saword = null
					
				else
					saword = sanimation.getWordNamed(word.getID())
				end
				
				if saword == null
					speechPlayback.addPhoneme(null, word.getDuration())
					
				else
					phonetics = saword.getPhonetics()
					length = phonetics.getLength()
					scaling = 0
					
					for i = 0 to length
						saphoneme = sanimation.getPhonemeWithIPA(phonetics.getCharacterAt(i))
						
						if saphoneme == null
							scaling += pMissingPhonemeLength
							
						else
							scaling += saphoneme.getLength()
						end
					end
					if scaling > 0.00001
						scaling = word.getDuration() / scaling
					end
					
					for i = 0 to length
						saphoneme = sanimation.getPhonemeWithIPA(phonetics.getCharacterAt(i))
						
						if saphoneme == null
							speechPlayback.addPhoneme(null, pMissingPhonemeLength * scaling)
							
						else
							speechPlayback.addPhoneme(saphoneme, saphoneme.getLength() * scaling)
						end
					end
				end
			end)
			
			sanimLength = speechPlayback.getDuration()
			
			if not pUseSpeechAnimation
				speechPlayback.removeAllPhonemes()
			end
		end
		
		return sanimLength
	end
	
	/** \brief Execute sub title. */
	func void executeSubTitle(ConversationPlayback playback, ConversationActor actor, float speechTime)
		var UnicodeString textBoxText = pTextBoxText
		if pTextBoxTextTranslate != null
			var TranslationManager tm = playback.getTranslationManager()
			if tm != null
				textBoxText = tm.translate(pTextBoxTextTranslate)
			end
		end
		
		if textBoxText == null or textBoxText.getLength() == 0
			return
		end
		
		var ConversationPlaybackSubTitle subTitle = playback.getSubTitle()
		if subTitle == null
			return
		end
		
		var SubTitleBoxText text = actor.createSubTitleText(textBoxText, pTextBoxTextStyle)
		subTitle.addSubTitleText(text.subtitleWidget())
		actor.setSubTitleText(text)
		
		text.hideSubtitleAfter(speechTime + 2.0) // 1-3s?
	end
	
	/** \brief Execute gesture. */
	func void executeGesture(ConversationPlayback playback, ConversationActor actor)
		if pGestures.getCount() == 0
			return
		end
		
		var ConversationGesturePlayback gesturePlayback = actor.getGesturePlayback()
		if gesturePlayback == null
			return
		end
		
		// the most simple way would be to just remove all gestures then add the gestures.
		// this though produces problems with situations where already set up gestures should
		// be kept up to after the pause time of the first defined gesture. For the first
		// gesture the addGestureFromNow() method takes care of this for us. For all other
		// gesture we use addGesture().
		var ConversationStrip firstGesture = pGestures.getAt(0) cast ConversationStrip
		
		pGestures.forEach(block ConversationStrip gesture
			var StringID animatorID
			var bool hold = false
			
			if gesture.getID() != null
				var ConversationGesture conversationGesture = \
					playback.getConversation().getGestureNamed(gesture.getID())
				
				if conversationGesture != null
					animatorID = conversationGesture.getAnimator()
					hold = conversationGesture.getHold()
				end
			end
			
			if gesture == firstGesture
				gesturePlayback.addGestureFromNow(animatorID, hold, gesture)
				
			else
				gesturePlayback.addGesture(animatorID, hold, gesture)
			end
		end)
	end
	
	/** \brief Execute face pose. */
	func void executeFacePose(ConversationPlayback playback, ConversationActor actor)
		if pFacePoses.getCount() == 0
			return
		end
		
		var ConversationFacePosePlayback facePosePlayback = actor.getFacePosePlayback()
		
		if facePosePlayback == null
			return
		end
		
		var Conversation conversation = playback.getConversation()
		
		facePosePlayback.removeAllPoses()
		
		pFacePoses.forEach(block ConversationStrip strip
			var Array playbackPose
			
			if strip.getID() != null
				var ConversationFacePose facePose = conversation.getFacePoseNamed(strip.getID())
				
				if facePose != null
					playbackPose = Array.new()
					facePose.forEachController(block ConversationControllerValue each
						if each.getControllerName() != null
							playbackPose.add(ConversationFacePosePlayback.FacePoseController.new(\
								each.getControllerName(), each.getValue()))
								
						else // deprecated
							playbackPose.add(ConversationFacePosePlayback.FacePoseController.new(\
								each.getController(), each.getValue()))
						end
					end)
				end
			end
			
			facePosePlayback.addPose(playbackPose, strip)
		end)
	end
	
	/** \brief Execute head look-at. */
	func void executeHeadLookAt(ConversationPlayback playback, ConversationActor actor)
		if pHeadLookAts.getCount() == 0
			return
		end
		
		var ConversationLookAtPlayback headPlayback = actor.getHeadLookAtPlayback()
		
		if headPlayback == null
			return
		end
		
		var Conversation conversation = playback.getConversation()
		
		headPlayback.removeAllLookAts()
		
		pHeadLookAts.forEach(block ConversationStrip each
			var ConversationPlaybackLookAt charLookAt
			
			if each.getID() != null
				var ConversationTarget target = conversation.getTargetNamed(each.getID())
				if target != null
					charLookAt = ConversationPlaybackLookAt.new(playback, target)
				end
			end
			
			headPlayback.addLookAt(charLookAt, each)
		end)
	end
	
	/**
	 * \brief Execute eyes look-at.
	 * 
	 * If no eyes look-ats are present uses head look-ats.
	 */
	func void executeEyesLookAt(ConversationPlayback playback, ConversationActor actor)
		var Array lookAts = pEyesLookAts.getCount() > 0 if pEyesLookAts else pHeadLookAts
		if lookAts.getCount() == 0
			return
		end
		
		var ConversationLookAtPlayback eyesPlayback = actor.getEyesLookAtPlayback()
		if eyesPlayback == null
			return
		end
		
		var Conversation conversation = playback.getConversation()
		
		eyesPlayback.removeAllLookAts()
		
		lookAts.forEach(block ConversationStrip each
			var ConversationPlaybackLookAt charLookAt
			
			if each.getID() != null
				var ConversationTarget target = conversation.getTargetNamed(each.getID())
				if target != null
					charLookAt = ConversationPlaybackLookAt.new(playback, target)
				end
			end
			
			eyesPlayback.addLookAt(charLookAt, each)
		end)
	end
	
	
	
	/**
	 * \brief Name of PersistencyFactory required to load object from file.
	 * 
	 * Name of PersistencyFactory is first written to the file as string with
	 * 8-bit length. Then writeToFile() is called to write the object itself.
	 * Empty name is not allowed as is names longer than 255 characters.
	 * Name has to match a PersistencyFactory present in the Persistency
	 * instance used for loading objects. Object is read using
	 * PersistencyFactory.readObjectFromFile() of the matching PersistencyFactory.
	 */
	func String persistencyFactoryName()
		return Factory.NAME
	end
	
	/** \brief Write object to file writer. */
	func void writeObjectToFile(PersistencyEnvironment env, FileWriter writer)
		super.writeObjectToFile(env, writer)
		
		writer.writeByte(1) // version
		
		var PersistencyFlags flags = PersistencyFlags.new(1)
		flags.setAt(0, pUseSpeechAnimation)
		flags.writeToFile(writer)
		
		env.writeStringIDOrEmptyIfNull(writer, pActorID)
		
		writer.writeString16(pTextBoxText != null if pTextBoxText.toString() else "")
		
		env.writeStringIDOrEmptyIfNull(writer, pTextBoxTextStyle)
		env.writeString16OrEmptyIfNull(writer, pPathSound)
		
		writer.writeUShort(pWords.getCount())
		pWords.forEach(block ConversationStrip each
			each.writeToFile(writer)
		end)
		
		writer.writeUShort(pFacePoses.getCount())
		pFacePoses.forEach(block ConversationStrip each
			each.writeToFile(writer)
		end)
		
		writer.writeUShort(pGestures.getCount())
		pGestures.forEach(block ConversationStrip each
			each.writeToFile(writer)
		end)
		
		writer.writeUShort(pBodyLookAts.getCount())
		pBodyLookAts.forEach(block ConversationStrip each
			each.writeToFile(writer)
		end)
		
		writer.writeUShort(pHeadLookAts.getCount())
		pHeadLookAts.forEach(block ConversationStrip each
			each.writeToFile(writer)
		end)
		
		writer.writeUShort(pEyesLookAts.getCount())
		pEyesLookAts.forEach(block ConversationStrip each
			each.writeToFile(writer)
		end)
		
		writer.writeFloat(pMinSpeechTime)
		env.writeString16OrEmptyIfNull(writer, pTextBoxTextTranslate)
	end
end
