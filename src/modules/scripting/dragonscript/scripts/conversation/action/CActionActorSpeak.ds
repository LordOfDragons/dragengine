/* 
 * Drag[en]gine DragonScript Script Module
 *
 * Copyright (C) 2020, Roland PlÃ¼ss (roland@rptd.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */


namespace Dragengine.ConversationSystem

pin Dragengine.Gui
pin Dragengine.LoadSave
pin Dragengine.SpeechAnimations
pin Dragengine.Scenery
pin Dragengine.Utils



/**
 * \brief Conversation action making actors speak.
 */
class CActionActorSpeak extends ConversationAction
	/** \brief Factory for loading actor actions. */
	public class Factory implements PersistencyFactory
		public static fixed var String NAME = "CActionActorSpeak"
		
		public func new()
		end
		
		public func Persistable readObjectFromFile( PersistencyEnvironment env, FileReader reader )
			return CActionActorSpeak.new( env, reader )
		end
		
		public static func void registerFactory( Persistency persistency )
			persistency.addFactory( NAME, Factory.new() )
		end
	end
	
	
	
	private var Sound pSound
	private var StringID pActorID
	private var UnicodeString pTextBoxText
	private var StringID pTextBoxTextStyle
	private var String pPathSound
	private var Array pWords
	private var Array pFacePoses
	private var Array pGestures
	private var Array pBodyLookAts
	private var Array pHeadLookAts
	private var Array pEyesLookAts
	private var bool pUseSpeechAnimation
	private var float pMinSpeechTime
	
	
	
	/** \brief Create conversation action. */
	public func new()
		this.pWords = Array.new()
		this.pFacePoses = Array.new()
		this.pGestures = Array.new()
		this.pBodyLookAts = Array.new()
		this.pHeadLookAts = Array.new()
		this.pEyesLookAts = Array.new()
		this.pUseSpeechAnimation = true
		this.pMinSpeechTime = 0.0
	end
	
	/** \brief Read from file. */
	public func new( PersistencyEnvironment env, FileReader reader ) super( env, reader )
		select reader.readByte() // version
		case 0
			var PersistencyFlags flags = PersistencyFlags.new( 1, reader )
			this.pUseSpeechAnimation = flags.getAt( 0 )
			
			this.pActorID = env.readStringIDOrNullIfEmpty( reader )
			
			var String text = reader.readString16()
			if not text.empty()
				this.pTextBoxText = UnicodeString.newFromUTF8( text )
			end
			
			this.pTextBoxTextStyle = env.readStringIDOrNullIfEmpty( reader )
			this.pPathSound = env.readString16OrNullIfEmpty( reader )
			
			var int i, count = reader.readUShort()
			this.pWords = Array.new()
			for i = 0 to count
				this.pWords.add( ConversationStrip.readFromFile( reader ) )
			end
			
			count = reader.readUShort()
			this.pFacePoses = Array.new()
			for i = 0 to count
				this.pFacePoses.add( ConversationStrip.readFromFile( reader ) )
			end
			
			count = reader.readUShort()
			this.pGestures = Array.new()
			for i = 0 to count
				this.pGestures.add( ConversationStrip.readFromFile( reader ) )
			end
			
			count = reader.readUShort()
			this.pBodyLookAts = Array.new()
			for i = 0 to count
				this.pBodyLookAts.add( ConversationStrip.readFromFile( reader ) )
			end
			
			count = reader.readUShort()
			this.pHeadLookAts = Array.new()
			for i = 0 to count
				this.pHeadLookAts.add( ConversationStrip.readFromFile( reader ) )
			end
			
			count = reader.readUShort()
			this.pEyesLookAts = Array.new()
			for i = 0 to count
				this.pEyesLookAts.add( ConversationStrip.readFromFile( reader ) )
			end
			
			this.pMinSpeechTime = reader.readFloat()
			
		else
			throw EInvalidParam.new( "unsupported version" )
		end
	end
	
	
	
	/** \brief Sound file loading it if not loaded already. */
	public func Sound getSound()
		if this.pSound == null and this.pPathSound != null
			this.pSound = Sound.new( this.pPathSound )
		end
		
		return this.pSound
	end
	
	/** \brief Actor ID or null if not set. */
	public func StringID getActorID()
		return this.pActorID
	end
	
	/** \brief Set actor ID or null if not set. */
	public func void setActorID( StringID id )
		this.pActorID = id
	end
	
	/** \brief Text box text or null to not set the text. */
	public func UnicodeString getTextBoxText()
		return this.pTextBoxText
	end
	
	/** \brief Set text box text or null to not set the text. */
	public func void setTextBoxText( UnicodeString text )
		this.pTextBoxText = text
	end
	
	/** \brief Text box text style id. */
	public func StringID getTextBoxTextStyle()
		return this.pTextBoxTextStyle
	end
	
	/** \brief Set text box text style. */
	public func void setTextBoxTextStyle( StringID styleID )
		this.pTextBoxTextStyle = styleID
	end
	
	/** \brief Path to the sound file or null to not play sound. */
	public func String getPathSound()
		return this.pPathSound
	end
	
	/** \brief Set path to the sound file or null to not play sound. */
	public func void setPathSound( String path )
		this.pPathSound = path
	end
	
	/** \brief Speech animation is used for this action. */
	public func bool getUseSpeechAnimation()
		return this.pUseSpeechAnimation
	end
	
	/** \brief Set if speech animation is used for this action. */
	public func void setUseSpeechAnimation( bool useSpeechAnimation )
		this.pUseSpeechAnimation = useSpeechAnimation
	end
	
	/** \brief Minimum time the actor is speaking. */
	public func float getMinSpeechTime()
		return this.pMinSpeechTime
	end
	
	/** \brief Set minimum time the actor is speaking. */
	public func void setMinSpeechTime( float minSpeechTime )
		this.pMinSpeechTime = DEMath.max( minSpeechTime, 0.0 )
	end
	
	
	
	/** \brief Visits all words. */
	public func void forEachWord( Block aBlock )
		this.pWords.forEach( aBlock )
	end
	
	/** \brief Add word. */
	public func void addWord( ConversationStrip word )
		if word == null
			throw EInvalidParam.new()
		end
		this.pWords.add( word )
	end
	
	
	
	/** \brief Visits all face poses. */
	public func void forEachFacePose( Block aBlock )
		this.pFacePoses.forEach( aBlock )
	end
	
	/** \brief Add face pose. */
	public func void addFacePose( ConversationStrip facePose )
		if facePose == null
			throw EInvalidParam.new()
		end
		this.pFacePoses.add( facePose )
	end
	
	
	
	/** \brief Visits all gestures. */
	public func void forEachGesture( Block aBlock )
		this.pGestures.forEach( aBlock )
	end
	
	/** \brief Adds a gesture. */
	public func void addGesture( ConversationStrip gesture )
		if gesture == null
			throw EInvalidParam.new()
		end
		this.pGestures.add( gesture )
	end
	
	
	
	/** \brief Visits all body look-ats. */
	public func void forEachBodyLookAt( Block aBlock )
		this.pBodyLookAts.forEach( aBlock )
	end
	
	/** \brief Adds a body look-at. */
	public func void addBodyLookAt( ConversationStrip lookAt )
		if lookAt == null
			throw EInvalidParam.new()
		end
		this.pBodyLookAts.add( lookAt )
	end
	
	
	
	/** \brief Visits all head look-ats. */
	public func void forEachHeadLookAt( Block aBlock )
		this.pHeadLookAts.forEach( aBlock )
	end
	
	/** \brief Adds a head look-at. */
	public func void addHeadLookAt( ConversationStrip lookAt )
		if lookAt == null
			throw EInvalidParam.new()
		end
		this.pHeadLookAts.add( lookAt )
	end
	
	
	
	/** \brief Visits all eyes look-ats. */
	public func void forEachEyesLookAt( Block aBlock )
		this.pEyesLookAts.forEach( aBlock )
	end
	
	/** \brief Adds a eyes look-at. */
	public func void addEyesLookAt( ConversationStrip lookAt )
		if lookAt == null
			throw EInvalidParam.new()
		end
		this.pEyesLookAts.add( lookAt )
	end
	
	
	
	/** \brief Play back a sound file as voice of a conversation actor. */
	public func void playVoiceAudio( ConversationActor actor, Sound sound )
		var Speaker speaker = actor.getVoiceSpeaker()
		
		if speaker == null
			return
		end
		
		speaker.stop()
		speaker.setSound( sound )
		
		if sound != null
			speaker.play()
		end
	end
	
	/** \brief Execute action. */
	public func void execute( ConversationPlayback playback )
		var ConversationActor actor = playback.getActorMatching( this.pActorID )
		if actor == null
			playback.advanceToNextAction()
			return
		end
		
		var float speechTime = this.pMinSpeechTime
		
		speechTime = DEMath.max( this.executeVoiceSound( playback, actor ), speechTime )
		speechTime = DEMath.max( this.executeSpeechAnimation( playback, actor ), speechTime )
		this.executeSubTitle( playback, actor, speechTime )
		this.executeGesture( playback, actor )
		this.executeFacePose( playback, actor )
		this.executeHeadLookAt( playback, actor )
		this.executeEyesLookAt( playback, actor )
		
		if speechTime > 0.0
			actor.setRemainingSpeechTime( speechTime )
		end
		
		playback.advanceToNextAction()
	end
	
	/**
	 * \brief Execute voice sound.
	 * \returns speech time or 0 if no sound is played.
	 */
	public func float executeVoiceSound( ConversationPlayback playback, ConversationActor actor )
		var Sound sound
		
		try
			sound = this.getSound()
			
		catch Exception e
			// playback.getConsole()...
		end
		
		if sound == null
			return 0.0
		end
		
		this.playVoiceAudio( actor, sound )
		return sound.getPlayTime()
	end
	
	/**
	 * \brief Execute speech animation.
	 * \returns speech time or 0 if no sound is played.
	 */
	public func float executeSpeechAnimation( ConversationPlayback playback, ConversationActor actor )
		if this.pWords.getCount() == 0
			return 0.0
		end
		
		var SpeechAnimationPlayback speechPlayback = actor.getSpeechAnimationPlayback()
		var float sanimLength = 0.0
		
		if speechPlayback == null or speechPlayback.getSpeechAnimation() == null
			var int count = this.pWords.getCount()
			var int i
			
			for i = 0 to count
				var ConversationStrip strip = this.pWords.getAt( i ) cast ConversationStrip
				sanimLength += strip.getPause()
				sanimLength += strip.getDuration()
			end
			
		else
			var SpeechAnimation sanimation = speechPlayback.getSpeechAnimation()
			var SpeechAnimationPhoneme saphoneme
			var SpeechAnimationWord saword
			var UnicodeString phonetics
			var ConversationStrip wordFirst
			var ConversationStrip wordLast
			var float pauseLen
			var float scaling
			var int i, length
			
			speechPlayback.removeAllPhonemes()
			
			if this.pWords.getCount() > 0
				wordFirst = this.pWords.getAt( 0 ) cast ConversationStrip
				wordLast = this.pWords.getAt( -1 ) cast ConversationStrip
			end
			
			this.pWords.forEach( block ConversationStrip word
				pauseLen = word.getPause()
				
				if pauseLen > 0.01
					// add pause. if the pause is added as single empty phoneme a long pause
					// leads to strange gaping motion. this is due to blending from phoneme
					// to phoneme. this is counteded by adding short empty phoneme at the
					// appropriate end to protect the long pause
					if word == wordFirst
						if pauseLen > 0.15
							// protection at end of pause
							speechPlayback.addPhoneme( null, pauseLen - 0.1 )
							speechPlayback.addPhoneme( null, 0.1 )
							
						else
							speechPlayback.addPhoneme( null, pauseLen )
						end
						
					elif word == wordLast
						if pauseLen > 0.15
							// protection at beginning of pause
							speechPlayback.addPhoneme( null, 0.1 )
							speechPlayback.addPhoneme( null, pauseLen - 0.1 )
							
						else
							speechPlayback.addPhoneme( null, pauseLen )
						end
						
					else
						if pauseLen > 0.25
							// protection at both ends of pause
							speechPlayback.addPhoneme( null, 0.1 )
							speechPlayback.addPhoneme( null, pauseLen - 0.2 )
							speechPlayback.addPhoneme( null, 0.1 )
							
						else
							speechPlayback.addPhoneme( null, pauseLen )
						end
					end
				end
				
				if word.getID() == null
					saword = null
					
				else
					saword = sanimation.getWordNamed( word.getID() )
				end
				
				if saword == null
					speechPlayback.addPhoneme( null, word.getDuration() )
					
				else
					phonetics = saword.getPhonetics()
					length = phonetics.getLength()
					scaling = 0.0
					
					for i = 0 to length
						saphoneme = sanimation.getPhonemeWithIPA( phonetics.getCharacterAt( i ) )
						
						if saphoneme == null
							scaling += 0.08
							
						else
							scaling += saphoneme.getLength()
						end
					end
					if scaling > 0.00001
						scaling = word.getDuration() / scaling
					end
					
					for i = 0 to length
						saphoneme = sanimation.getPhonemeWithIPA( phonetics.getCharacterAt( i ) )
						
						if saphoneme == null
							speechPlayback.addPhoneme( null, 0.08 * scaling )
							
						else
							speechPlayback.addPhoneme( saphoneme, saphoneme.getLength() * scaling )
						end
					end
				end
			end )
			
			sanimLength = speechPlayback.getDuration()
			
			if not this.pUseSpeechAnimation
				speechPlayback.removeAllPhonemes()
			end
		end
		
		return sanimLength
	end
	
	/** \brief Execute sub title. */
	public func void executeSubTitle( ConversationPlayback playback, ConversationActor actor, float speechTime )
		if this.pTextBoxText == null or this.pTextBoxText.getLength() == 0
			return
		end
		
		var ConversationPlaybackSubTitle subTitle = playback.getSubTitle()
		if subTitle == null
			return
		end
		
		var SubTitleBoxText text = actor.createSubTitleText( this.pTextBoxText, this.pTextBoxTextStyle )
		subTitle.addSubTitleText( text.subtitleWidget() )
		actor.setSubTitleText( text )
		
		text.hideSubtitleAfter( speechTime + 2.0 ) // 1-3s?
	end
	
	/** \brief Execute gesture. */
	public func void executeGesture( ConversationPlayback playback, ConversationActor actor )
		if this.pGestures.getCount() == 0
			return
		end
		
		var ConversationGesturePlayback gesturePlayback = actor.getGesturePlayback()
		if gesturePlayback == null
			return
		end
		
		// the most simple way would be to just remove all gestures then add the gestures.
		// this though produces problems with situations where already set up gestures should
		// be kept up to after the pause time of the first defined gesture. For the first
		// gesture the addGestureFromNow() method takes care of this for us. For all other
		// gesture we use addGesture().
		var ConversationStrip firstGesture = this.pGestures.getAt( 0 ) cast ConversationStrip
		
		this.pGestures.forEach( block ConversationStrip gesture
			var StringID animatorID
			var bool hold = false
			
			if gesture.getID() != null
				var ConversationGesture conversationGesture = \
					playback.getConversation().getGestureNamed( gesture.getID() )
				
				if conversationGesture != null
					animatorID = conversationGesture.getAnimator()
					hold = conversationGesture.getHold()
				end
			end
			
			if gesture == firstGesture
				gesturePlayback.addGestureFromNow( animatorID, hold, gesture )
				
			else
				gesturePlayback.addGesture( animatorID, hold, gesture )
			end
		end )
	end
	
	/** \brief Execute face pose. */
	public func void executeFacePose( ConversationPlayback playback, ConversationActor actor )
		if this.pFacePoses.getCount() == 0
			return
		end
		
		var ConversationFacePosePlayback facePosePlayback = actor.getFacePosePlayback()
		
		if facePosePlayback == null
			return
		end
		
		var Conversation conversation = playback.getConversation()
		
		facePosePlayback.removeAllPoses()
		
		this.pFacePoses.forEach( block ConversationStrip each
			var Array playbackPose
			
			if each.getID() != null
				var ConversationFacePose facePose = conversation.getFacePoseNamed( each.getID() )
				
				if facePose != null
					playbackPose = Array.new()
					facePose.forEachController( block ConversationControllerValue each2
						playbackPose.add( ConversationFacePosePlayback.FacePoseController.new( \
							each2.getController(), each2.getValue() ) )
					end )
				end
			end
			
			facePosePlayback.addPose( playbackPose, each )
		end )
	end
	
	/** \brief Execute head look-at. */
	public func void executeHeadLookAt( ConversationPlayback playback, ConversationActor actor )
		if this.pHeadLookAts.getCount() == 0
			return
		end
		
		var ConversationLookAtPlayback headPlayback = actor.getHeadLookAtPlayback()
		
		if headPlayback == null
			return
		end
		
		var Conversation conversation = playback.getConversation()
		
		headPlayback.removeAllLookAts()
		
		this.pHeadLookAts.forEach( block ConversationStrip each
			var ConversationPlaybackLookAt charLookAt
			
			if each.getID() != null
				var ConversationTarget target = conversation.getTargetNamed( each.getID() )
				if target != null
					charLookAt = ConversationPlaybackLookAt.new( playback, target )
				end
			end
			
			headPlayback.addLookAt( charLookAt, each )
		end )
	end
	
	/**
	 * \brief Execute eyes look-at.
	 * 
	 * If no eyes look-ats are present uses head look-ats.
	 */
	public func void executeEyesLookAt( ConversationPlayback playback, ConversationActor actor )
		var Array lookAts = this.pEyesLookAts.getCount() > 0 if this.pEyesLookAts else this.pHeadLookAts
		if lookAts.getCount() == 0
			return
		end
		
		var ConversationLookAtPlayback eyesPlayback = actor.getEyesLookAtPlayback()
		if eyesPlayback == null
			return
		end
		
		var Conversation conversation = playback.getConversation()
		
		eyesPlayback.removeAllLookAts()
		
		lookAts.forEach( block ConversationStrip each
			var ConversationPlaybackLookAt charLookAt
			
			if each.getID() != null
				var ConversationTarget target = conversation.getTargetNamed( each.getID() )
				if target != null
					charLookAt = ConversationPlaybackLookAt.new( playback, target )
				end
			end
			
			eyesPlayback.addLookAt( charLookAt, each )
		end )
	end
	
	
	
	/**
	 * \brief Name of PersistencyFactory required to load object from file.
	 * 
	 * Name of PersistencyFactory is first written to the file as string with
	 * 8-bit length. Then writeToFile() is called to write the object itself.
	 * Empty name is not allowed as is names longer than 255 characters.
	 * Name has to match a PersistencyFactory present in the Persistency
	 * instance used for loading objects. Object is read using
	 * PersistencyFactory.readObjectFromFile() of the matching PersistencyFactory.
	 */
	public func String persistencyFactoryName()
		return Factory.NAME
	end
	
	/** \brief Write object to file writer. */
	public func void writeObjectToFile( PersistencyEnvironment env, FileWriter writer )
		super.writeObjectToFile( env, writer )
		
		writer.writeByte( 0 ) // version
		
		var PersistencyFlags flags = PersistencyFlags.new( 1 )
		flags.setAt( 0, this.pUseSpeechAnimation )
		flags.writeToFile( writer )
		
		env.writeStringIDOrEmptyIfNull( writer, this.pActorID )
		
		writer.writeString16( this.pTextBoxText != null if this.pTextBoxText.toString() else "" )
		
		env.writeStringIDOrEmptyIfNull( writer, this.pTextBoxTextStyle )
		env.writeString16OrEmptyIfNull( writer, this.pPathSound )
		
		writer.writeUShort( this.pWords.getCount() )
		this.pWords.forEach( block ConversationStrip each
			each.writeToFile( writer )
		end )
		
		writer.writeUShort( this.pFacePoses.getCount() )
		this.pFacePoses.forEach( block ConversationStrip each
			each.writeToFile( writer )
		end )
		
		writer.writeUShort( this.pGestures.getCount() )
		this.pGestures.forEach( block ConversationStrip each
			each.writeToFile( writer )
		end )
		
		writer.writeUShort( this.pBodyLookAts.getCount() )
		this.pBodyLookAts.forEach( block ConversationStrip each
			each.writeToFile( writer )
		end )
		
		writer.writeUShort( this.pHeadLookAts.getCount() )
		this.pHeadLookAts.forEach( block ConversationStrip each
			each.writeToFile( writer )
		end )
		
		writer.writeUShort( this.pEyesLookAts.getCount() )
		this.pEyesLookAts.forEach( block ConversationStrip each
			each.writeToFile( writer )
		end )
		
		writer.writeFloat( this.pMinSpeechTime )
	end
end
