/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */


namespace Dragengine.ConversationSystem

pin Dragengine.LoadSave
pin Dragengine.Scenery


/**
 * \brief Conversation actions.
 */
abstract class ConversationAction implements Persistable
	var bool pWaitForActor, pWaitSpeakOnly
	var String pWaitForActorID
	var float pDelay
	
	
	
	/** \brief Create conversation action. */
	func new()
		pWaitForActor = true
	end
	
	/** \brief Read from file. */
	func new(PersistencyEnvironment env, FileReader reader)
		select reader.readByte() // version
		case 0
			var PersistencyFlags flags = PersistencyFlags.new(2, reader)
			pWaitForActor = flags.getAt(0)
			pWaitSpeakOnly = flags.getAt(1)
			pWaitForActorID = env.readString8OrNullIfEmpty(reader)
			pDelay = reader.readFloat()
			
		else
			throw EInvalidParam.new("unsupported version")
		end
	end
	
	
	
	/** \brief Wait for actor. */
	func bool getWaitForActor()
		return pWaitForActor
	end
	
	/** \brief Set wait for actor. */
	func void setWaitForActor(bool wait)
		pWaitForActor = wait
	end
	
	/**
	 * \brief Waiting considers only actor speaking not actor waiting.
	 * \version 1.24
	 */
	func bool getWaitSpeakOnly()
		return pWaitSpeakOnly
	end
	
	/**
	 * \brief Set waiting considers only actor speaking not actor waiting.
	 * \version 1.24
	 */
	func void setWaitSpeakOnly(bool speakOnly)
		pWaitSpeakOnly = speakOnly
	end
	
	/** \brief ID of actor to wait for or null to wait for all actors. */
	func String getWaitForActorID()
		return pWaitForActorID
	end
	
	/** \brief Set ID of actor to wait for or null to wait for all actors. */
	func void setWaitForActorID(String id)
		pWaitForActorID = id
	end
	
	/** \brief Delay in seconds before processing this action. */
	func float getDelay()
		return pDelay
	end
	
	/** \brief Set delay in seconds before processing this action. */
	func void setDelay(float delay)
		pDelay = delay
	end
	
	
	
	/** \brief Execute the action. */
	abstract func void execute(ConversationPlayback playback)
	
	
	
	/** \brief Write object to file writer. */
	func void writeObjectToFile(PersistencyEnvironment env, FileWriter writer)
		writer.writeByte(0) // version
		
		var PersistencyFlags flags = PersistencyFlags.new(2)
		flags.setAt(0, pWaitForActor)
		flags.setAt(1, pWaitSpeakOnly)
		flags.writeToFile(writer)
		
		env.writeString8OrEmptyIfNull(writer, pWaitForActorID)
		writer.writeFloat(pDelay)
	end
end
