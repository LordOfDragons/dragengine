/* 
 * Drag[en]gine DragonScript Script Module
 *
 * Copyright (C) 2020, Roland Pl√ºss (roland@rptd.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */


namespace Dragengine.ConversationSystem

pin Dragengine.Gui
pin Dragengine.LoadSave
pin Dragengine.Scenery
pin Dragengine.Utils



/**
 * \brief Conversation action presenting the player with a list of options to select one from.
 */
class CActionPlayerChoice extends ConversationAction
	/** \brief Factory for loading actor actions. */
	class Factory implements PersistencyFactory
		public static fixed var String NAME = "CActionPlayerChoice"
		
		func new()
		end
		
		func Persistable readObjectFromFile(PersistencyEnvironment env, FileReader reader)
			return CActionPlayerChoice.new(env, reader)
		end
		
		static func void registerFactory(Persistency persistency)
			persistency.addFactory(NAME, Factory.new())
		end
	end
	
	
	
	var String pVariable
	var Array pOptions
	var Array pActions
	
	
	
	/** \brief Create conversation action. */
	func new()
		pOptions = Array.new()
		pActions = Array.new()
	end
	
	/** \brief Read from file. */
	func new(PersistencyEnvironment env, FileReader reader) super(env, reader)
		select reader.readByte() // version
		case 0
			pVariable = env.readString8OrNullIfEmpty(reader)
			
			var int i, count = reader.readUShort()
			pOptions = Array.new()
			for i = 0 to count
				pOptions.add(CActionPlayerChoiceOption.readFromFile(env, reader))
			end
			
			count = reader.readUShort()
			pActions = Array.new()
			for i = 0 to count
				pActions.add(env.readObject(reader))
			end
			
		else
			throw EInvalidParam.new("unsupported version")
		end
	end
	
	
	
	/** \brief Name of variable to set with the selected option or null if not used. */
	func String getVariable()
		return pVariable
	end
	
	/** \brief Set name of variable to set with the selected option or null if not used. */
	func void setVariable(String variable)
		pVariable = variable
	end
	
	
	
	/** \brief Number of options. */
	func int getOptionCount()
		return pOptions.getCount()
	end
	
	/** \brief Option at index. */
	func CActionPlayerChoiceOption getOptionAt(int index)
		return pOptions.getAt(index) cast CActionPlayerChoiceOption
	end
	
	/** \brief Visits all options. */
	func void forEachOption(Block aBlock)
		pOptions.forEach(aBlock)
	end
	
	/** \brief Adds an option. */
	func void addOption(CActionPlayerChoiceOption option)
		if option == null
			throw EInvalidParam.new()
		end
		pOptions.add(option)
	end
	
	
	
	/** \brief Visits all actions. */
	func void forEachAction(Block aBlock)
		pActions.forEach(aBlock)
	end
	
	/** \brief Adds an action. */
	func void addAction(ConversationAction action)
		if action == null
			throw EInvalidParam.new()
		end
		pActions.add(action)
	end
	
	/** \brief Actions. */
	func Array getActions()
		return pActions
	end
	
	/** \brief Iterator for actions. */
	func ConversationActionIterator getIteratorActions()
		return ConversationActionIterator.new(pActions, 0)
	end
	
	
	
	/** \brief Execute action. */
	func void execute(ConversationPlayback playback)
		var ConversationPlaybackLayer layer = ConversationPlaybackLayer.new(getIteratorActions())
		layer.setLooping(true)
		playback.pushLayer(layer)
		
		// start player choosing
		var ConversationPlaybackPlayerChoice playerChoice = playback.getPlayerChoice()
		
		playerChoice.removeAllChoices()
		
		var int optionCount = pOptions.getCount()
		var bool hasOptions = false
		var int i
		
		for i = 0 to optionCount
			var CActionPlayerChoiceOption option = pOptions.getAt(i) cast CActionPlayerChoiceOption
			if option.getCondition() != null and not option.getCondition().evaluate(playback)
				continue
			end
			
			playerChoice.addChoice(option.getText().toString(), ConversationPlayerChoice.new(\
				playback, layer, option.getIteratorActions(), pVariable, i))
			hasOptions = true
		end
		
		if hasOptions
			playerChoice.startChoosing()
			
		else
			playback.advanceToNextAction()
		end
	end
	
	
	
	/**
	 * \brief Name of PersistencyFactory required to load object from file.
	 * 
	 * Name of PersistencyFactory is first written to the file as string with
	 * 8-bit length. Then writeToFile() is called to write the object itself.
	 * Empty name is not allowed as is names longer than 255 characters.
	 * Name has to match a PersistencyFactory present in the Persistency
	 * instance used for loading objects. Object is read using
	 * PersistencyFactory.readObjectFromFile() of the matching PersistencyFactory.
	 */
	func String persistencyFactoryName()
		return Factory.NAME
	end
	
	/** \brief Write object to file writer. */
	func void writeObjectToFile(PersistencyEnvironment env, FileWriter writer)
		super.writeObjectToFile(env, writer)
		
		writer.writeByte(0) // version
		
		env.writeString8OrEmptyIfNull(writer, pVariable)
		
		writer.writeUShort(pOptions.getCount())
		pOptions.forEach(block CActionPlayerChoiceOption each
			each.writeToFile(env, writer)
		end)
		
		writer.writeUShort(pActions.getCount())
		pActions.forEach(block ConversationAction each
			env.writeObject(writer, each)
		end)
	end
end
