/* 
 * Drag[en]gine DragonScript Script Module
 *
 * Copyright (C) 2020, Roland PlÃ¼ss (roland@rptd.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */


namespace Dragengine.ConversationSystem

pin Dragengine.LoadSave
pin Dragengine.Scenery
pin Dragengine.Utils



/**
 * \brief Conversation action changing the camera shot.
 */
class CActionCameraShot extends ConversationAction
	/** \brief Factory for loading actor actions. */
	class Factory implements PersistencyFactory
		public static fixed var String NAME = "CActionCameraShot"
		
		func new()
		end
		
		func Persistable readObjectFromFile(PersistencyEnvironment env, FileReader reader)
			return CActionCameraShot.new(env, reader)
		end
		
		static func void registerFactory(Persistency persistency)
			persistency.addFactory(NAME, Factory.new())
		end
	end
	
	
	
	var StringID pName
	var float pDuration
	var StringID pCameraTarget
	var StringID pLookAtTarget
	
	
	
	/** \brief Create conversation action. */
	func new()
		pDuration = 5
	end
	
	/** \brief Read from file. */
	func new(PersistencyEnvironment env, FileReader reader) super(env, reader)
		select reader.readByte() // version
		case 0
			pName = env.readStringIDOrNullIfEmpty(reader)
			pDuration = reader.readFloat()
			pCameraTarget = env.readStringIDOrNullIfEmpty(reader)
			pLookAtTarget = env.readStringIDOrNullIfEmpty(reader)
			
		else
			throw EInvalidParam.new("unsupported version")
		end
	end
	
	
	
	/** \brief Name of the camera shot to use. */
	func StringID getName()
		return pName
	end
	
	/** \brief Set name of the camera shot to use. */
	func void setName(StringID name)
		if name == null
			throw EInvalidParam.new()
		end
		pName = name
	end
	
	/** \brief Duration. */
	func float getDuration()
		return pDuration
	end
	
	/** \brief Set duration. */
	func void setDuration(float duration)
		pDuration = duration
	end
	
	/** \brief Target the camera is attached to or null if not set. */
	func StringID getCameraTarget()
		return pCameraTarget
	end
	
	/** \brief Set target the camera is attached to or null if not set. */
	func void setCameraTarget(StringID target)
		pCameraTarget = target
	end
	
	/** \brief Target the camera is looking at or null if not set. */
	func StringID getLookAtTarget()
		return pLookAtTarget
	end
	
	/** \brief Set target the camera is looking at or null if not set. */
	func void setLookAtTarget(StringID target)
		pLookAtTarget = target
	end
	
	
	
	/** \brief Execute action. */
	func void execute(ConversationPlayback playback)
		if playback.getCameraDirector() == null
			playback.advanceToNextAction()
			return
		end
		
		var ConversationCameraShot cameraShot = playback.getConversation().getCameraShotNamed(pName)
		if cameraShot == null
			playback.advanceToNextAction()
			return
		end
		
		var ConversationCameraDirector director = playback.getCameraDirector()
		var int actorCount = playback.getActorCount()
		var ConversationTarget cameraTarget
		var ConversationTarget lookAtTarget
		var ConversationActor cameraActor
		var ConversationActor lookAtActor
		var ConversationCoordSystem cameraCoordSystem
		var ConversationCoordSystem lookAtCoordSystem
		
		// determine targets to use and their parameters if required
		if pCameraTarget != null
			cameraTarget = playback.getConversation().getTargetNamed(pCameraTarget)
		end
		if pLookAtTarget != null
			lookAtTarget = playback.getConversation().getTargetNamed(pLookAtTarget)
		end
		
		if cameraTarget != null
			if cameraTarget.getCoordSystemID() == null
				cameraActor = playback.getActorMatching(cameraTarget.getActorID())
				
			else
				cameraCoordSystem = playback.getCoordSystemByID(cameraTarget.getCoordSystemID())
			end
		end
		if lookAtTarget != null
			if lookAtTarget.getCoordSystemID() == null
				lookAtActor = playback.getActorMatching(lookAtTarget.getActorID())
				
			else
				lookAtCoordSystem = playback.getCoordSystemByID(lookAtTarget.getCoordSystemID())
			end
		end
		
		// set the coordinate system (temporary solution)
		if actorCount == 1
			director.setCoordSys(DMatrix.newRotationY(180) * playback.getActorAt(0).getMatrix())
			
		elif actorCount > 1
			if cameraShot.getActorCount() > 1
				var ConversationActor actor1 = playback.getActorAt(0)
				var ConversationActor actor2 = playback.getActorAt(1)
				var DMatrix actor1Matrix = actor1.getMatrix()
				var DMatrix actor2Matrix = actor2.getMatrix()
				var DVector position1 = actor1Matrix.getPosition()
				var DVector position2 = actor2Matrix.getPosition()
				var DVector view = position1 - position2
				var float distance = view.getLength()
				
				if distance < 0.00001
					director.setCoordSys(DMatrix.newRotationY(180) * actor1Matrix)
					
				else
					if view.normalize().getY() >= 0.999
						// too close to the up vector. use a different up vector
						director.setCoordSys(DMatrix.newWorld((position1 + position2) * 0.5, view, DVector.new(0, 0, 1)))
						
					else
						director.setCoordSys(DMatrix.newWorld((position1 + position2) * 0.5, view, DVector.new(0, 1, 0)))
					end
				end
				
			else
				director.setCoordSys(DMatrix.newRotationY(180) * playback.getActorAt(0).getMatrix())
			end
		end
		
		var DMatrix coordsys = director.getCoordSys()
		var DVector cspos = coordsys.getPosition()
		var DVector csview = coordsys.getViewVector()
		var DVector csup = DVector.new(0, 1, 0)
		director.setCoordSys(DMatrix.newWorld(cspos, (csup % csview) % csup, csup))
		
		// set the other parameters straight into the camera
		director.setCameraShot(cameraShot)
		director.setCameraActor(cameraActor)
		director.setCameraCoordSystem(cameraCoordSystem)
		director.setCameraTarget(cameraTarget)
		director.setLookAtActor(lookAtActor)
		director.setLookAtCoordSystem(lookAtCoordSystem)
		director.setLookAtTarget(lookAtTarget)
		director.setDuration(pDuration)
		director.setLooping(false)
		director.setElapsed(0.0)
		
		playback.advanceToNextAction()
	end
	
	
	
	/**
	 * \brief Name of PersistencyFactory required to load object from file.
	 * 
	 * Name of PersistencyFactory is first written to the file as string with
	 * 8-bit length. Then writeToFile() is called to write the object itself.
	 * Empty name is not allowed as is names longer than 255 characters.
	 * Name has to match a PersistencyFactory present in the Persistency
	 * instance used for loading objects. Object is read using
	 * PersistencyFactory.readObjectFromFile() of the matching PersistencyFactory.
	 */
	func String persistencyFactoryName()
		return Factory.NAME
	end
	
	/** \brief Write object to file writer. */
	func void writeObjectToFile(PersistencyEnvironment env, FileWriter writer)
		super.writeObjectToFile(env, writer)
		
		writer.writeByte(0) // version
		
		env.writeStringIDOrEmptyIfNull(writer, pName)
		writer.writeFloat(pDuration)
		env.writeStringIDOrEmptyIfNull(writer, pCameraTarget)
		env.writeStringIDOrEmptyIfNull(writer, pLookAtTarget)
	end
end
