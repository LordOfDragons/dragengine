/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */


namespace Dragengine.ConversationSystem

pin Dragengine.LoadSave
pin Dragengine.Scenery
pin Dragengine.Utils



/**
 * \brief Conversation action processing action list depending on condition checking.
 * 
 * Executes the first if-case with a condition evaluationg to true or else instead.
 */
class CActionIfElse extends ConversationAction
	/** \brief Factory for loading actor actions. */
	class Factory implements PersistencyFactory
		public static fixed var String NAME = "CActionIfElse"
		
		func new()
		end
		
		func Persistable readObjectFromFile(PersistencyEnvironment env, FileReader reader)
			return CActionIfElse.new(env, reader)
		end
		
		static func void registerFactory(Persistency persistency)
			persistency.addFactory(NAME, Factory.new())
		end
	end
	
	
	
	var Array pCases
	var Array pElseActions
	
	
	
	/** \brief Create conversation action. */
	func new()
		pCases = Array.new()
		pElseActions = Array.new()
	end
	
	/** \brief Read from file. */
	func new(PersistencyEnvironment env, FileReader reader) super(env, reader)
		select reader.readByte() // version
		case 0
			var int i, count = reader.readUShort()
			pCases = Array.new()
			for i = 0 to count
				pCases.add(CActionIfElseCase.readFromFile(env, reader))
			end
			
			count = reader.readUShort()
			pElseActions = Array.new()
			for i = 0 to count
				pElseActions.add(env.readObject(reader))
			end
			
		else
			throw EInvalidParam.new("unsupported version")
		end
	end
	
	
	
	/** \brief Visits all if-cases. */
	func void forEachCase(Block aBlock)
		pCases.forEach(aBlock)
	end
	
	/** \brief Add if-case. */
	func void addCase(CActionIfElseCase ifcase)
		if ifcase == null
			throw EInvalidParam.new()
		end
		pCases.add(ifcase)
	end
	
	
	
	/** \brief Visit all else actions. */
	func void forEachElseAction(Block aBlock)
		pElseActions.forEach(aBlock)
	end
	
	/** \brief Add else action. */
	func void addElseAction(ConversationAction action)
		if action == null
			throw EInvalidParam.new()
		end
		pElseActions.add(action)
	end
	
	/** \brief Else actions as Array of ConversationAction. */
	func Array getElseActions()
		return pElseActions
	end
	
	/** \brief Else actions iterator. */
	func ConversationActionIterator getIteratorElseActions()
		return ConversationActionIterator.new(pElseActions, 0)
	end
	
	
	
	/** \brief Execute action. */
	func void execute(ConversationPlayback playback)
		var CActionIfElseCase ifcase = pCases.find(block CActionIfElseCase each
			var ConversationCondition condition = each.getCondition()
			return condition != null and condition.evaluate(playback)
		end) cast CActionIfElseCase
		
		if ifcase != null
			if ifcase.getActions().getCount() > 0
				playback.pushLayer(ConversationPlaybackLayer.new(ifcase.getIteratorActions()))
				
			else
				playback.advanceToNextAction()
			end
			
		else
			if pElseActions.getCount() > 0
				playback.pushLayer(ConversationPlaybackLayer.new(getIteratorElseActions()))
				
			else
				playback.advanceToNextAction()
			end
		end
	end
	
	
	
	/**
	 * \brief Name of PersistencyFactory required to load object from file.
	 * 
	 * Name of PersistencyFactory is first written to the file as string with
	 * 8-bit length. Then writeToFile() is called to write the object itself.
	 * Empty name is not allowed as is names longer than 255 characters.
	 * Name has to match a PersistencyFactory present in the Persistency
	 * instance used for loading objects. Object is read using
	 * PersistencyFactory.readObjectFromFile() of the matching PersistencyFactory.
	 */
	func String persistencyFactoryName()
		return Factory.NAME
	end
	
	/** \brief Write object to file writer. */
	func void writeObjectToFile(PersistencyEnvironment env, FileWriter writer)
		super.writeObjectToFile(env, writer)
		
		writer.writeByte(0) // version
		
		writer.writeUShort(pCases.getCount())
		pCases.forEach(block CActionIfElseCase each
			each.writeToFile(env, writer)
		end)
		
		writer.writeUShort(pElseActions.getCount())
		pElseActions.forEach(block ConversationAction each
			env.writeObject(writer, each)
		end)
	end
end
