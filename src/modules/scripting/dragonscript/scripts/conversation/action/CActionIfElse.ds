/* 
 * Drag[en]gine DragonScript Script Module
 *
 * Copyright (C) 2020, Roland PlÃ¼ss (roland@rptd.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */


namespace Dragengine.ConversationSystem

pin Dragengine.LoadSave
pin Dragengine.Scenery
pin Dragengine.Utils



/**
 * \brief Conversation action processing action list depending on condition checking.
 * 
 * Executes the first if-case with a condition evaluationg to true or else instead.
 */
class CActionIfElse extends ConversationAction
	/** \brief Factory for loading actor actions. */
	class Factory implements PersistencyFactory
		public static fixed var String NAME = "CActionIfElse"
		
		func new()
		end
		
		func Persistable readObjectFromFile(PersistencyEnvironment env, FileReader reader)
			return CActionIfElse.new(env, reader)
		end
		
		static func void registerFactory(Persistency persistency)
			persistency.addFactory(NAME, Factory.new())
		end
	end
	
	
	
	var Array pCases
	var Array pElseActions
	
	
	
	/** \brief Create conversation action. */
	func new()
		pCases = Array.new()
		pElseActions = Array.new()
	end
	
	/** \brief Read from file. */
	func new(PersistencyEnvironment env, FileReader reader) super(env, reader)
		select reader.readByte() // version
		case 0
			var int i, count = reader.readUShort()
			pCases = Array.new()
			for i = 0 to count
				pCases.add(CActionIfElseCase.readFromFile(env, reader))
			end
			
			count = reader.readUShort()
			pElseActions = Array.new()
			for i = 0 to count
				pElseActions.add(env.readObject(reader))
			end
			
		else
			throw EInvalidParam.new("unsupported version")
		end
	end
	
	
	
	/** \brief Visits all if-cases. */
	func void forEachCase(Block aBlock)
		pCases.forEach(aBlock)
	end
	
	/** \brief Add if-case. */
	func void addCase(CActionIfElseCase ifcase)
		if ifcase == null
			throw EInvalidParam.new()
		end
		pCases.add(ifcase)
	end
	
	
	
	/** \brief Visit all else actions. */
	func void forEachElseAction(Block aBlock)
		pElseActions.forEach(aBlock)
	end
	
	/** \brief Add else action. */
	func void addElseAction(ConversationAction action)
		if action == null
			throw EInvalidParam.new()
		end
		pElseActions.add(action)
	end
	
	/** \brief Else actions iterator. */
	func ConversationActionIterator getIteratorElseActions()
		return ConversationActionIterator.new(pElseActions, 0)
	end
	
	
	
	/** \brief Execute action. */
	func void execute(ConversationPlayback playback)
		var CActionIfElseCase ifcase = pCases.find(block CActionIfElseCase each
			var ConversationCondition condition = each.getCondition()
			return condition != null and condition.evaluate(playback)
		end) cast CActionIfElseCase
		
		if ifcase != null
			if ifcase.getActions().getCount() > 0
				playback.pushLayer(ConversationPlaybackLayer.new(ifcase.getIteratorActions()))
				
			else
				playback.advanceToNextAction()
			end
			
		else
			if pElseActions.getCount() > 0
				playback.pushLayer(ConversationPlaybackLayer.new(getIteratorElseActions()))
				
			else
				playback.advanceToNextAction()
			end
		end
	end
	
	
	
	/**
	 * \brief Name of PersistencyFactory required to load object from file.
	 * 
	 * Name of PersistencyFactory is first written to the file as string with
	 * 8-bit length. Then writeToFile() is called to write the object itself.
	 * Empty name is not allowed as is names longer than 255 characters.
	 * Name has to match a PersistencyFactory present in the Persistency
	 * instance used for loading objects. Object is read using
	 * PersistencyFactory.readObjectFromFile() of the matching PersistencyFactory.
	 */
	func String persistencyFactoryName()
		return Factory.NAME
	end
	
	/** \brief Write object to file writer. */
	func void writeObjectToFile(PersistencyEnvironment env, FileWriter writer)
		super.writeObjectToFile(env, writer)
		
		writer.writeByte(0) // version
		
		writer.writeUShort(pCases.getCount())
		pCases.forEach(block CActionIfElseCase each
			each.writeToFile(env, writer)
		end)
		
		writer.writeUShort(pElseActions.getCount())
		pElseActions.forEach(block ConversationAction each
			env.writeObject(writer, each)
		end)
	end
end
