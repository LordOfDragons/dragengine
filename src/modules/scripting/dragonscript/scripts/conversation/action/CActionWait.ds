/* 
 * Drag[en]gine DragonScript Script Module
 *
 * Copyright (C) 2020, Roland Pl√ºss (roland@rptd.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */


namespace Dragengine.ConversationSystem

pin Dragengine.LoadSave
pin Dragengine.Scenery
pin Dragengine.Utils



/**
 * \brief Conversation action waiting for condition to become false while looping actions.
 */
class CActionWait extends ConversationAction
	/** \brief Factory for loading actor actions. */
	class Factory implements PersistencyFactory
		public static fixed var String NAME = "CActionWait"
		
		func new()
		end
		
		func Persistable readObjectFromFile(PersistencyEnvironment env, FileReader reader)
			return CActionWait.new(env, reader)
		end
		
		public static func void registerFactory(Persistency persistency)
			persistency.addFactory(NAME, Factory.new())
		end
	end
	
	
	
	var ConversationCondition pCondition
	var float pInterval
	var Array pActions
	
	
	
	/** \brief Create conversation action. */
	func new()
		pInterval = 0.2
		pActions = Array.new()
	end
	
	/** \brief Read from file. */
	func new(PersistencyEnvironment env, FileReader reader) super(env, reader)
		select reader.readByte() // version
		case 0
			pCondition = env.readObjectOrNull(reader) cast ConversationCondition
			pInterval = reader.readFloat()
			
			var int i, count = reader.readUShort()
			pActions = Array.new()
			for i = 0 to count
				pActions.add(env.readObject(reader))
			end
			
		else
			throw EInvalidParam.new("unsupported version")
		end
	end
	
	
	
	/** \brief Condition or \em null to skip action. */
	func ConversationCondition getCondition()
		return pCondition
	end
	
	/** \brief Set condition or \em null to skip action. */
	func void setCondition(ConversationCondition condition)
		pCondition = condition
	end
	
	/** \brief Interval to wait before testing the condition again to improve performance. */
	func float getInterval()
		return pInterval
	end
	
	/** \brief Set interval to wait before testing the condition again to improve performance. */
	func void setInterval(float interval)
		pInterval = DEMath.max(interval, 0.0)
	end
	
	
	
	/** \brief Visits actions. */
	func void forEachAction(Block aBlock)
		pActions.forEach(aBlock)
	end
	
	/** \brief Add action. */
	func void addAction(ConversationAction action)
		if action == null
			throw EInvalidParam.new()
		end
		pActions.add(action)
	end
	
	/** \brief Actions to loop while condition is true. */
	func ConversationActionIterator getIteratorActions()
		return ConversationActionIterator.new(pActions, 0)
	end
	
	
	
	/** \brief Execute action. */
	func void execute(ConversationPlayback playback)
		if pCondition == null
			playback.advanceToNextAction()
			return
		end
		
		var ConversationPlaybackLayer layer = ConversationPlaybackLayer.new(getIteratorActions())
		layer.setLoopCondition(pCondition)
		layer.setLoopEvalConditionInterval(pInterval)
		layer.setLooping(true)
		
		playback.pushLayer(layer)
	end
	
	
	
	/**
	 * \brief Name of PersistencyFactory required to load object from file.
	 * 
	 * Name of PersistencyFactory is first written to the file as string with
	 * 8-bit length. Then writeToFile() is called to write the object itself.
	 * Empty name is not allowed as is names longer than 255 characters.
	 * Name has to match a PersistencyFactory present in the Persistency
	 * instance used for loading objects. Object is read using
	 * PersistencyFactory.readObjectFromFile() of the matching PersistencyFactory.
	 */
	func String persistencyFactoryName()
		return Factory.NAME
	end
	
	/** \brief Write object to file writer. */
	func void writeObjectToFile(PersistencyEnvironment env, FileWriter writer)
		super.writeObjectToFile(env, writer)
		
		writer.writeByte(0) // version
		
		env.writeObjectOrNull(writer, pCondition)
		writer.writeFloat(pInterval)
		
		writer.writeUShort(pActions.getCount())
		pActions.forEach(block ConversationAction each
			env.writeObject(writer, each)
		end)
	end
end
