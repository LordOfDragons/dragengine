/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */


namespace Dragengine.ConversationSystem

pin Dragengine.LoadSave
pin Dragengine.Scenery
pin Dragengine.Utils



/**
 * \brief If-case for a if-else conversation action.
 */
class CActionIfElseCase
	var ConversationCondition pCondition
	var Array pActions
	
	
	
	/** \brief Create conversation action. */
	func new()
		pActions = Array.new()
	end
	
	
	
	/** \brief Condition or \em null if not set. */
	func ConversationCondition getCondition()
		return pCondition
	end
	
	/** \brief Set condition or \em null if not set. */
	func void setCondition(ConversationCondition condition)
		pCondition = condition
	end
	
	
	
	/** \brief Visits all actions. */
	func void forEachAction(Block aBlock)
		pActions.forEach(aBlock)
	end
	
	/** \brief Adds an action. */
	func void addAction(ConversationAction action)
		if action == null
			throw EInvalidParam.new()
		end
		pActions.add(action)
	end
	
	/** \brief Actions. */
	func Array getActions()
		return pActions
	end
	
	/** \brief Actions iterator. */
	func ConversationActionIterator getIteratorActions()
		return ConversationActionIterator.new(pActions, 0)
	end
	
	
	
	/** \brief Read from file. */
	static func CActionIfElseCase readFromFile(PersistencyEnvironment env, FileReader reader)
		var CActionIfElseCase ifcase = CActionIfElseCase.new()
		
		select reader.readByte() // version
		case 0
			ifcase.pCondition = env.readObjectOrNull(reader) cast ConversationCondition
			
			var int i, count = reader.readUShort()
			for i = 0 to count
				ifcase.pActions.add(env.readObject(reader))
			end
			
		else
			throw EInvalidParam.new("unsupported version")
		end
		
		return ifcase
	end
	
	/** \brief Write object to file writer. */
	func void writeToFile(PersistencyEnvironment env, FileWriter writer)
		writer.writeByte(0) // version
		
		env.writeObjectOrNull(writer, pCondition)
		
		writer.writeUShort(pActions.getCount())
		pActions.forEach(block ConversationAction each
			env.writeObject(writer, each)
		end)
	end
end
