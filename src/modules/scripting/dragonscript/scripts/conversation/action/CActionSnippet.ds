/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */


namespace Dragengine.ConversationSystem

pin Dragengine.LoadSave
pin Dragengine.Scenery
pin Dragengine.Utils



/**
 * \brief Conversation action processing a different topic if existing.
 */
class CActionSnippet extends ConversationAction
	/** \brief Factory for loading actor actions. */
	class Factory implements PersistencyFactory
		public static fixed var String NAME = "CActionSnippet"
		
		func new()
		end
		
		func Persistable readObjectFromFile(PersistencyEnvironment env, FileReader reader)
			return CActionSnippet.new(env, reader)
		end
		
		static func void registerFactory(Persistency persistency)
			persistency.addFactory(NAME, Factory.new())
		end
	end
	
	
	var StringID pGroupID, pTopicID
	var Array pActions
	var bool pCreateSideLane
	
	
	/** \brief Create conversation action. */
	func new()
		pActions = Array.new()
	end
	
	/** \brief Read from file. */
	func new(PersistencyEnvironment env, FileReader reader) super(env, reader)
		select reader.readByte() // version
		case 0
			newFromFileV0(env, reader)
			
		case 1
			newFromFileV1(env, reader)
			
		else
			throw EInvalidParam.new("unsupported version")
		end
	end
	
	private func void newFromFileV0(PersistencyEnvironment env, FileReader reader)
		pGroupID = env.readStringIDOrNullIfEmpty(reader)
		pTopicID = env.readStringIDOrNullIfEmpty(reader)
	end
	
	private func void newFromFileV1(PersistencyEnvironment env, FileReader reader)
		newFromFileV0(env, reader)
		
		var PersistencyFlags flags = PersistencyFlags.new(1, reader)
		pCreateSideLane = flags.getAt(0)
		
		var int i, count = reader.readUShort()
		pActions = Array.new()
		for i = 0 to count
			pActions.add(env.readObject(reader))
		end
	end
	
	
	
	/** \brief Group ID. */
	func StringID getGroupID()
		return pGroupID
	end
	
	/** \brief Set group ID. */
	func void setGroupID(StringID id)
		pGroupID = id
	end
	
	/** \brief Topic ID. */
	func StringID getTopicID()
		return pTopicID
	end
	
	/** \brief Set topic ID. */
	func void setTopicID(StringID id)
		pTopicID = id
	end
	
	/**
	 * \brief Create side lane.
	 * \version 1.28
	 */
	func bool getCreateSideLane()
		return pCreateSideLane
	end
	
	/**
	 * \brief Set create side lane.
	 * \version 1.28
	 */
	func void setCreateSideLane(bool createSideLane)
		pCreateSideLane = createSideLane
	end
	
	/**
	 * \brief Array of ConversationAction to run instead of snippet.
	 * \version 1.28
	 * 
	 * For use by simple conversation and custom code wishing to inject actions.
	 */
	func Array getActions()
		return pActions
	end
	
	/**
	 * \brief Actions iterator.
	 * \version 1.28
	 */
	func ConversationActionIterator getIteratorActions()
		return ConversationActionIterator.new(pActions, 0)
	end
	
	
	
	/** \brief Execute action. */
	func void execute(ConversationPlayback playback)
		var ConversationPlaybackLayer layer
		
		if pActions.getCount() > 0
			layer = ConversationPlaybackLayer.new(getIteratorActions())
			
		else
			var Conversation conversation = playback.getConversation()
			var ConversationTopic topic
			
			var ConversationTopicGroup group = conversation.getTopicGroupWithID(pGroupID)
			if group != null
				topic = group.getTopicWithID(pTopicID)
			end
			
			if topic == null
				playback.advanceToNextAction()
				return
			end
			
			layer = ConversationPlaybackLayer.new(topic.getIteratorActions())
			layer.setTopicTopLevel(true)
		end
		
		if pCreateSideLane
			playback.addSideLane(ConversationPlaybackLane.new(false, layer))
			playback.advanceToNextAction()
			
		else
			playback.pushLayer(layer)
		end
	end
	
	
	
	/**
	 * \brief Name of PersistencyFactory required to load object from file.
	 * 
	 * Name of PersistencyFactory is first written to the file as string with
	 * 8-bit length. Then writeToFile() is called to write the object itself.
	 * Empty name is not allowed as is names longer than 255 characters.
	 * Name has to match a PersistencyFactory present in the Persistency
	 * instance used for loading objects. Object is read using
	 * PersistencyFactory.readObjectFromFile() of the matching PersistencyFactory.
	 */
	func String persistencyFactoryName()
		return Factory.NAME
	end
	
	/** \brief Write object to file writer. */
	func void writeObjectToFile(PersistencyEnvironment env, FileWriter writer)
		super.writeObjectToFile(env, writer)
		
		writer.writeByte(1)
		
		env.writeStringIDOrEmptyIfNull(writer, pGroupID)
		env.writeStringIDOrEmptyIfNull(writer, pTopicID)
		
		var PersistencyFlags flags = PersistencyFlags.new(1)
		flags.setAt(0, pCreateSideLane)
		flags.writeToFile(writer)
		
		writer.writeUShort(pActions.getCount())
		pActions.forEach(block ConversationAction each
			env.writeObject(writer, each)
		end)
	end
end
