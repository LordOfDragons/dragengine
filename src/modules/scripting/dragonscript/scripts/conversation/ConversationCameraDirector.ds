/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */


namespace Dragengine.ConversationSystem

pin Dragengine.CameraDirectors
pin Dragengine.LoadSave
pin Dragengine.Scenery



/**
 * \brief Animate camera using camera definition.
 * 
 * The conversation playback is responsible to set camera definition to use
 * as well as updating the camera director.
 */
class ConversationCameraDirector extends CameraDirector
	private var ConversationCameraShot pCameraShot
	private var float pElapsed
	private var float pDuration
	private var bool pLooping
	private var DMatrix pCoordSys
	private var ConversationTarget pCameraTarget
	private var ConversationTarget pLookAtTarget
	private var ConversationActor pCameraActor
	private var ConversationActor pLookAtActor
	private var ConversationCoordSystem pCameraCoordSystem
	private var ConversationCoordSystem pLookAtCoordSystem
	private var DMatrix pLockedCameraMatrix
	private var DMatrix pLockedLookAtMatrix
	private var bool pCameraShotChanged
	
	
	
	/** \brief Creates conversation camera director. */
	public func new(Camera camera, Microphone microphone) super(camera, microphone)
		pElapsed = 0
		pDuration = 10
		pLooping = false
		pCoordSys = DMatrix.new()
		pCameraShotChanged = false
	end
	
	
	
	/** \brief Camera shot to use or null if not set. */
	public func ConversationCameraShot getCameraShot()
		return pCameraShot
	end
	
	/** \brief Set camera shot to use or null if not set. */
	public func void setCameraShot(ConversationCameraShot cameraShot)
		pCameraShot = cameraShot
		pElapsed = 0
		pDuration = 10
		pLockedCameraMatrix = null
		pLockedLookAtMatrix = null
		pCameraShotChanged = true
	end
	
	/** \brief Elapsed time. */
	public func float getElapsed()
		return pElapsed
	end
	
	/** \brief Set elapsed time. */
	public func void setElapsed(float elapsed)
		pElapsed = DEMath.max(elapsed, 0.0)
	end
	
	/** \brief Duration of the camera shot. */
	public func float getDuration()
		return pDuration
	end
	
	/** \brief Set duration of the camera shot. */
	public func void setDuration(float duration)
		pDuration = DEMath.max(duration, 0.0)
	end
	
	/** \brief Camera shot is looping. */
	public func bool getLooping()
		return pLooping
	end
	
	/** \brief Set if camera shot is looping. */
	public func void setLooping(bool looping)
		pLooping = looping
	end
	
	/** \brief Camera target or null if not set. */
	public func ConversationTarget getCameraTarget()
		return pCameraTarget
	end
	
	/** \brief Set camera target or null if not set. */
	public func void setCameraTarget(ConversationTarget target)
		pCameraTarget = target
	end
	
	/** \brief Look-at target or null if not set. */
	public func ConversationTarget getLookAtTarget()
		return pLookAtTarget
	end
	
	/** \brief Set look-at target or null if not set. */
	public func void setLookAtTarget(ConversationTarget target)
		pLookAtTarget = target
	end
	
	/** \brief Actor to attach the camera to or null if not set. */
	public func ConversationActor getCameraActor()
		return pCameraActor
	end
	
	/** \brief Set actor to attach the camera to or null if not set. */
	public func void setCameraActor(ConversationActor actor)
		pCameraActor = actor
	end
	
	/** \brief Actor to look at or null if not set. */
	public func ConversationActor getLookAtActor()
		return pLookAtActor
	end
	
	/** \brief Set actor to look at or null if not set. */
	public func void setLookAtActor(ConversationActor actor)
		pLookAtActor = actor
	end
	
	/** \brief Coordinate system to attach the camera to or null if not set. */
	public func ConversationCoordSystem getCameraCoordSystem()
		return pCameraCoordSystem
	end
	
	/** \brief Set coordinate system to attach the camera to or null if not set. */
	public func void setCameraCoordSystem(ConversationCoordSystem coordSystem)
		pCameraCoordSystem = coordSystem
	end
	
	/** \brief Coordinate system to look at or null if not set. */
	public func ConversationCoordSystem getLookAtCoordSystem()
		return pLookAtCoordSystem
	end
	
	/** \brief Set coordinate system to look at or null if not set. */
	public func void setLookAtCoordSystem(ConversationCoordSystem coordSystem)
		pLookAtCoordSystem = coordSystem
	end
	
	/** \brief Coordinate system matrix. */
	public func DMatrix getCoordSys()
		return pCoordSys
	end
	
	/** \brief Set coordinate system matrix. */
	public func void setCoordSys(DMatrix matrix)
		if matrix == null
			throw EInvalidParam.new()
		end
		pCoordSys = matrix
	end
	
	/** \brief Locked camera target matrix or null if not yet set. */
	public func DMatrix getLockedCameraMatrix()
		return pLockedCameraMatrix
	end
	
	/** \brief Set locked camera target matrix or null if not yet set. */
	public func void setLockedCameraMatrix(DMatrix matrix)
		pLockedCameraMatrix = matrix
	end
	
	/** \brief Locked look-at target matrix or null if not yet set. */
	public func DMatrix getLockedLookAtMatrix()
		return pLockedLookAtMatrix
	end
	
	/** \brief Set locked look-at target matrix or null if not yet set. */
	public func void setLockedLookAtMatrix(DMatrix matrix)
		pLockedLookAtMatrix = matrix
	end
	
	/**
	 * \brief Camera shot changed.
	 * \version 1.6
	 */
	protected func bool getCameraShotChanged()
		return pCameraShotChanged
	end
	
	
	
	/**
	 * \brief Advance the camera time.
	 * 
	 * This call is different from update(float) as this one is used by the
	 * conversation playback to set the proper camera time. The
	 * update(float) call is called by the game state thus the timing would
	 * be disturbed.
	 */
	public func void advanceCameraTime(float elapsed)
		pElapsed += elapsed
		
		if pLooping
			if pDuration < 0.00001
				pElapsed = 0.0
				
			else
				pElapsed = Math.fmod(pElapsed, pDuration)
			end
			
		else
			if pElapsed > pDuration
				pElapsed = pDuration
			end
		end
	end
	
	/** \brief Update camera using the constant method. */
	public func void updateConstant()
		var DVector offsetCamera = DVector.new(pCameraShot.getOffsetCameraFrom())
		var DVector offsetLookAt = DVector.new(pCameraShot.getOffsetLookAtFrom())
		var DVector cameraOrbit = DVector.new(pCameraShot.getCameraOrbitFrom())
		var DVector position = DVector.new(pCameraShot.getPositionFrom())
		var DVector rotation = DVector.new(pCameraShot.getRotationFrom())
		var float cameraDistance = pCameraShot.getCameraDistanceFrom()
		var float fov = pCameraShot.getFovFrom()
		
		updateUsing(offsetCamera, offsetLookAt, cameraOrbit, position, rotation, cameraDistance, fov)
	end
	
	/** \brief Update camera using the linear method. */
	public func void updateLinear()
		var DVector offsetCamera
		var DVector offsetLookAt
		var DVector cameraOrbit
		var DVector position
		var DVector rotation
		var float cameraDistance
		var float fov
		
		if pElapsed <= 0.0 or pDuration < 0.00001
			offsetCamera = DVector.new(pCameraShot.getOffsetCameraFrom())
			offsetLookAt = DVector.new(pCameraShot.getOffsetLookAtFrom())
			cameraOrbit = DVector.new(pCameraShot.getCameraOrbitFrom())
			cameraDistance = pCameraShot.getCameraDistanceFrom()
			position = DVector.new(pCameraShot.getPositionFrom())
			rotation = DVector.new(pCameraShot.getRotationFrom())
			fov = pCameraShot.getFovFrom()
			
		elif pElapsed >= pDuration
			offsetCamera = DVector.new(pCameraShot.getOffsetCameraTo())
			offsetLookAt = DVector.new(pCameraShot.getOffsetLookAtTo())
			cameraOrbit = DVector.new(pCameraShot.getCameraOrbitTo())
			cameraDistance = pCameraShot.getCameraDistanceTo()
			position = DVector.new(pCameraShot.getPositionTo())
			rotation = DVector.new(pCameraShot.getRotationTo())
			fov = pCameraShot.getFovTo()
			
		else
			var float factorTo = pElapsed / pDuration
			var float factorFrom = 1.0 - factorTo
			
			offsetCamera = DVector.new(pCameraShot.getOffsetCameraFrom() * factorFrom \
				+ pCameraShot.getOffsetCameraTo() * factorTo)
			offsetLookAt = DVector.new(pCameraShot.getOffsetLookAtFrom() * factorFrom \
				+ pCameraShot.getOffsetLookAtTo() * factorTo)
			cameraOrbit = DVector.new(pCameraShot.getCameraOrbitFrom() * factorFrom \
				+ pCameraShot.getCameraOrbitTo() * factorTo)
			cameraDistance = pCameraShot.getCameraDistanceFrom() * factorFrom \
				+ pCameraShot.getCameraDistanceTo() * factorTo
			position = DVector.new(pCameraShot.getPositionFrom() * factorFrom \
				+ pCameraShot.getPositionTo() * factorTo)
			rotation = DVector.new(pCameraShot.getRotationFrom() * factorFrom \
				+ pCameraShot.getRotationTo() * factorTo)
			fov = pCameraShot.getFovFrom() * factorFrom \
				+ pCameraShot.getFovTo() * factorTo
		end
		
		updateUsing(offsetCamera, offsetLookAt, cameraOrbit, position, rotation, cameraDistance, fov)
	end
	
	/** \brief Update camera using calculated parameters. */
	public func void updateUsing(DVector offsetCamera, DVector offsetLookAt, DVector cameraOrbit, \
	DVector position, DVector rotation, float cameraDistance, float fov)
		// calculate camera and look-at target matrices
		var DMatrix matrixTargetCamera = DMatrix.new()
		var DMatrix matrixTargetLookAt = DMatrix.new()
		
		if pLockedCameraMatrix == null
			if pCameraTarget == null
				matrixTargetCamera = pCoordSys
				
			else
				matrixTargetCamera = DMatrix.newWorld(\
					DVector.new(pCameraTarget.getPosition()), \
					pCameraTarget.getOrientation())
				
				if pCameraCoordSystem != null
					matrixTargetCamera = matrixTargetCamera * pCameraCoordSystem.getMatrix()
					
				elif pCameraActor != null
					matrixTargetCamera = matrixTargetCamera \
						* pCameraActor.getMatrix(pCameraTarget.getBone())
				end
			end
			
			if pCameraShot.getLockCameraTarget()
				pLockedCameraMatrix = matrixTargetCamera
			end
			
		else
			matrixTargetCamera = pLockedCameraMatrix
		end
		
		if pLockedLookAtMatrix == null
			if pLookAtTarget == null
				matrixTargetLookAt = pCoordSys
				
			else
				matrixTargetLookAt = DMatrix.newTranslation(DVector.new(pLookAtTarget.getPosition()))
				matrixTargetLookAt = matrixTargetLookAt * DMatrix.newFromQuaternion(pLookAtTarget.getOrientation())
				
				if pLookAtCoordSystem != null
					matrixTargetLookAt = matrixTargetLookAt * pLookAtCoordSystem.getMatrix()
					
				elif pLookAtActor != null
					matrixTargetLookAt = matrixTargetLookAt * pLookAtActor.getMatrix(pLookAtTarget.getBone())
				end
			end
			
			if pCameraShot.getLockLookAtTarget()
				pLockedLookAtMatrix = matrixTargetLookAt
			end
			
		else
			matrixTargetLookAt = pLockedLookAtMatrix
		end
		
		// align target matrices if required
		if pCameraShot.getAlignTargets() and pCameraTarget != null and pLookAtTarget != null
			var DVector line = matrixTargetLookAt.getPosition() - matrixTargetCamera.getPosition()
			var float len = line.getLength()
			
			if len > 0.00001
				var bool lockUpAxis = pCameraShot.getLockUpAxis()
				var DVector pos, up
				
				line = line / len
				
				pos = matrixTargetCamera.getPosition()
				up = matrixTargetCamera.getUpVector()
				if lockUpAxis
					matrixTargetCamera = DMatrix.newWorld(pos, (up % line) % up, up)
					
				else
					matrixTargetCamera = DMatrix.newWorld(pos, line, up)
				end
				
				pos = matrixTargetLookAt.getPosition()
				up = matrixTargetLookAt.getUpVector()
				if lockUpAxis
					matrixTargetLookAt = DMatrix.newWorld(pos, (up % -line) % up, up)
					
				else
					matrixTargetLookAt = DMatrix.newWorld(pos, -line, up)
				end
			end
		end
		
		// determine the final camera and look-at position
		var DVector lookAtPosition = matrixTargetLookAt * offsetLookAt
		var DVector cameraPosition
		
		if pCameraShot.getRelativeToLookAt()
			cameraPosition = (DMatrix.newTranslation(0, 0, -cameraDistance) \
				* DMatrix.newRT(cameraOrbit, offsetLookAt) * matrixTargetLookAt).getPosition()
			
		else
			cameraPosition = (DMatrix.newTranslation(0, 0, -cameraDistance) \
				* DMatrix.newRT(cameraOrbit, offsetCamera) * matrixTargetCamera).getPosition()
		end
		
		// align the up axis to the conversation coordinate system up axis
		var DMatrix matrixCamera = DMatrix.newRT(rotation, position)
		var DVector view = lookAtPosition - cameraPosition
		
		if view.getLength() > 0.00001
			var DVector up = pCoordSys.getUpVector()
			matrixCamera = matrixCamera * DMatrix.newWorld(cameraPosition, view, up)
			
		else
			matrixCamera = matrixCamera * DMatrix.newTranslation(cameraPosition)
		end
		
		// apply calculated values to camera
		updateUsingCalculated(matrixCamera.getPosition(), matrixCamera.toQuaternion(), fov, lookAtPosition)
	end
	
	/**
	 * \brief Set camera position and orientation from calculated values.
	 * 
	 * Allows subclasses to modify the calculated values before updating the camera
	 * position and orientation.
	 * 
	 * The default implementation sets the values the to the camera without further processing.
	 * 
	 * \param position Camera position after calculation.
	 * \param orientation Camera orientation after calculation.
	 * \param fov Camera field of view after calculation.
	 * \param lookAt Camera look-at position after calculation.
	 */
	public func void updateUsingCalculated(DVector position, Quaternion orientation, float fov, DVector lookAt)
		var Camera camera = getCamera()
		camera.setPosition(position)
		camera.setOrientation(orientation)
		camera.setFov(fov)
	end
	
	
	
	/** \brief Init camera parameters. */
	public func void initCameraParameters()
		var Camera camera = getCamera()
		
		camera.setFov(/*RenderCameraManager.fovNormal * 2*/ fovFirstPerson)
		camera.setFovRatio(1.0)
		camera.setViewDistance(200.0)
	end
	
	/**
	 * \brief Update camera.
	 * 
	 * Updates camera using super.updateCamera() or updateLinear() if a camera shot is set.
	 * 
	 * \par Version 1.6 and later
	 * 
	 * If camera shot changed calls resetAdaptedIntensity() on camera. This ensures camera
	 * is fully adapted to the lighting conditions. This is required if the camera switches
	 * between locations of drastically different lighting conditions.
	 * 
	 * If camera shot changed calls onCameraChanged().
	 */
	public func void updateCamera(float elapsed)
		if pCameraShot == null
			super.updateCamera(elapsed)
			
		else
			//updateConstant()
			updateLinear()
		end
		
		if pCameraShotChanged
			pCameraShotChanged = false
			getCamera().resetAdaptedIntensity()
			onCameraChanged()
		end
	end
	
	/**
	 * \brief Camera shot changed hook method.
	 * \version 1.6
	 * 
	 * Called once by updateCamera() after camera shot changed.
	 */
	protected func void onCameraChanged()
	end
	
	
	
	/** \brief Read from file. */
	public func void readFromFile(ConversationPlayback playback, PersistencyEnvironment env, FileReader reader)
		select reader.readByte() // version
		case 0
			var PersistencyFlags flags = PersistencyFlags.new(6, reader)
			pLooping = flags.getAt(1)
			
			if flags.getAt(0)
				pCameraShot = ConversationCameraShot.readFromFile(reader)
			end
			
			pElapsed = reader.readFloat()
			pDuration = reader.readFloat()
			pCoordSys = DMatrix.readFromFile(reader)
			
			if flags.getAt(2)
				pCameraTarget = ConversationTarget.readFromFile(env, reader)
			end
			if flags.getAt(3)
				pLookAtTarget = ConversationTarget.readFromFile(env, reader)
			end
			
			var StringID id = env.readStringIDOrNullIfEmpty(reader)
			if id != null
				pCameraActor = playback.getActorMatching(id)
			end
			
			id = env.readStringIDOrNullIfEmpty(reader)
			if id != null
				pLookAtActor = playback.getActorMatching(id)
			end
			
			id = env.readStringIDOrNullIfEmpty(reader)
			if id != null
				pCameraCoordSystem = playback.getCoordSystemByID(id)
			end
			
			id = env.readStringIDOrNullIfEmpty(reader)
			if id != null
				pLookAtCoordSystem = playback.getCoordSystemByID(id)
			end
			
			if flags.getAt(4)
				pLockedCameraMatrix = DMatrix.readFromFile(reader)
			end
			if flags.getAt(5)
				pLockedLookAtMatrix = DMatrix.readFromFile(reader)
			end
			
		else
			throw EInvalidParam.new("unsupported version")
		end
	end
	
	/** \brief Write to file. */
	public func void writeToFile(PersistencyEnvironment env, FileWriter writer)
		writer.writeByte(0) // version
		
		var PersistencyFlags flags = PersistencyFlags.new(6)
		flags.setAt(0, pCameraShot != null)
		flags.setAt(1, pLooping)
		flags.setAt(2, pCameraTarget != null)
		flags.setAt(3, pLookAtTarget != null)
		flags.setAt(4, pLockedCameraMatrix != null)
		flags.setAt(5, pLockedLookAtMatrix != null)
		flags.writeToFile(writer)
		
		if pCameraShot != null
			pCameraShot.writeToFile(writer)
		end
		
		writer.writeFloat(pElapsed)
		writer.writeFloat(pDuration)
		pCoordSys.writeToFile(writer)
		
		if pCameraTarget != null
			pCameraTarget.writeToFile(env, writer)
		end
		if pLookAtTarget != null
			pLookAtTarget.writeToFile(env, writer)
		end
		
		writer.writeString8(pCameraActor != null if pCameraActor.getID().toString() else "")
		writer.writeString8(pLookAtActor != null if pLookAtActor.getID().toString() else "")
		writer.writeString8(pCameraCoordSystem != null if pCameraCoordSystem.getID().toString() else "")
		writer.writeString8(pLookAtCoordSystem != null if pLookAtCoordSystem.getID().toString() else "")
		
		if pLockedCameraMatrix != null
			pLockedCameraMatrix.writeToFile(writer)
		end
		if pLockedLookAtMatrix != null
			pLockedLookAtMatrix.writeToFile(writer)
		end
	end
end
