/* 
 * Drag[en]gine DragonScript Script Module
 *
 * Copyright (C) 2020, Roland Pl√ºss (roland@rptd.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */


namespace Dragengine.ConversationSystem

pin Dragengine.Commands
pin Dragengine.Gui.Events
pin Dragengine.Utils



/**
 * \brief Input processor for simple conversations.
 * 
 * Can skip actor speaking or entire conversation if required.
 */
class ConversationInputProcessor extends DefaultInputProcessor
	private class FastForwardSpeakingTrigger extends GamepadTriggerTracker.DefaultListener
		var WeakReference pProcessor
		
		func new(ConversationInputProcessor processor)
			pProcessor = WeakReference.new(processor)
		end
		
		func void triggerPulled(InputEventSource system, int device, int axis, int trigger)
			var ConversationInputProcessor processor = pProcessor.get() cast ConversationInputProcessor
			if processor != null
				processor.fastForwardSpeaking()
			end
		end
	end
	
	
	var ConversationPlayback pPlayback
	var BindingManager pBindingManager
	var Array pAllowedCommands
	var GamepadTriggerTracker pGamepadTriggerTracker
	
	
	/** \brief Create conversation input processor. */
	func new(ConversationPlayback playback)
		if playback == null
			throw EInvalidParam.new()
		end
		
		pPlayback = playback
		pAllowedCommands = Array.new()
		pGamepadTriggerTracker = GamepadTriggerTracker.new()
		pGamepadTriggerTracker.addListener(FastForwardSpeakingTrigger.new(this))
	end
	
	
	
	/** \brief Conversation playback. */
	func ConversationPlayback getPlayback()
		return pPlayback
	end
	
	/** \brief Binding manager or \em null to not allow bindings. */
	func BindingManager getBindingManager()
		return pBindingManager
	end
	
	/** \brief Set binding manager or \em null to not allow bindings. */
	func void setBindingManager(BindingManager manager)
		pBindingManager = manager
	end
	
	/** \brief Command names allowed during conversation. */
	func Array getAllowedCommands()
		return pAllowedCommands
	end
	
	/** \brief Set command names allowed during conversation. */
	func void setAllowedCommands(Array list)
		pAllowedCommands = list
	end
	
	/**
	 * \brief Gamepad trigger tracker.
	 * \version 1.20
	 */
	func GamepadTriggerTracker getGamepadTriggerTracker()
		return pGamepadTriggerTracker
	end
	
	
	
	/** \brief Process input event. */
	func void inputEvent(InputEvent event)
		select event.getType()
		case InputEventType.keyPress
			if event.getKeyCode() == InputEventKey.space
				fastForwardSpeaking()
				
			elif pBindingManager != null
				var Binding binding = pBindingManager.findButtonBinding(\
					event.getSource(), event.getDevice(), event.getCode())
				
				if binding != null and pAllowedCommands.has(binding.getCommand().getName())
					binding.getCommand().start()
				end
			end
			
		case InputEventType.keyRelease
			if pBindingManager != null
				var Binding binding = pBindingManager.findButtonBinding(\
					event.getSource(), event.getDevice(), event.getCode())
				
				if binding != null and pAllowedCommands.has(binding.getCommand().getName())
					binding.getCommand().stop()
					return
				end
			end
			
		case InputEventType.mousePress
			//if event.getCode() == InputEventMouseButton.left
				fastForwardSpeaking()
			//end
		end
		
		pGamepadTriggerTracker.inputEvent(event)
	end
	
	/** \brief Fast forward speaking. */
	func void fastForwardSpeaking()
		pPlayback.fastForwardSpeaking()
	end
end
