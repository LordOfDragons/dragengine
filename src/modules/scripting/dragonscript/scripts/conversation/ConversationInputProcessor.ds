/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */


namespace Dragengine.ConversationSystem

pin Dragengine.Commands
pin Dragengine.Gui.Events
pin Dragengine.Utils



/**
 * \brief Input processor for simple conversations.
 * 
 * Can skip actor speaking or entire conversation if required.
 */
class ConversationInputProcessor extends DefaultInputProcessor
	private class FastForwardSpeakingTrigger extends GamepadTriggerTracker.DefaultListener
		var WeakReference pProcessor
		
		func new(ConversationInputProcessor processor)
			pProcessor = WeakReference.new(processor)
		end
		
		func void triggerPulled(InputEventSource system, int device, int axis, int trigger)
			var ConversationInputProcessor processor = pProcessor.get() cast ConversationInputProcessor
			if processor != null
				processor.fastForwardSpeaking()
			end
		end
	end
	
	
	var ConversationPlayback pPlayback
	var BindingManager pBindingManager
	var Array pAllowedCommands
	var GamepadTriggerTracker pGamepadTriggerTracker
	
	
	/** \brief Create conversation input processor. */
	func new(ConversationPlayback playback)
		if playback == null
			throw EInvalidParam.new()
		end
		
		pPlayback = playback
		pAllowedCommands = Array.new()
		pGamepadTriggerTracker = GamepadTriggerTracker.new()
		pGamepadTriggerTracker.addListener(FastForwardSpeakingTrigger.new(this))
	end
	
	
	
	/** \brief Conversation playback. */
	func ConversationPlayback getPlayback()
		return pPlayback
	end
	
	/** \brief Binding manager or \em null to not allow bindings. */
	func BindingManager getBindingManager()
		return pBindingManager
	end
	
	/** \brief Set binding manager or \em null to not allow bindings. */
	func void setBindingManager(BindingManager manager)
		pBindingManager = manager
	end
	
	/** \brief Command names allowed during conversation. */
	func Array getAllowedCommands()
		return pAllowedCommands
	end
	
	/** \brief Set command names allowed during conversation. */
	func void setAllowedCommands(Array list)
		pAllowedCommands = list
	end
	
	/**
	 * \brief Gamepad trigger tracker.
	 * \version 1.20
	 */
	func GamepadTriggerTracker getGamepadTriggerTracker()
		return pGamepadTriggerTracker
	end
	
	
	
	/** \brief Process input event. */
	func void inputEvent(InputEvent event)
		select event.getType()
		case InputEventType.keyPress
			if event.getKeyCode() == InputEventKey.space
				fastForwardSpeaking()
				
			elif pBindingManager != null
				var Binding binding = pBindingManager.findButtonBinding(\
					event.getSource(), event.getDevice(), event.getCode())
				
				if binding != null and pAllowedCommands.has(binding.getCommand().getName())
					binding.getCommand().start()
				end
			end
			
		case InputEventType.keyRelease
			if pBindingManager != null
				var Binding binding = pBindingManager.findButtonBinding(\
					event.getSource(), event.getDevice(), event.getCode())
				
				if binding != null and pAllowedCommands.has(binding.getCommand().getName())
					binding.getCommand().stop()
					return
				end
			end
			
		case InputEventType.mousePress
			//if event.getCode() == InputEventMouseButton.left
				fastForwardSpeaking()
			//end
		end
		
		pGamepadTriggerTracker.inputEvent(event)
	end
	
	/** \brief Fast forward speaking. */
	func void fastForwardSpeaking()
		pPlayback.fastForwardSpeaking()
	end
end
