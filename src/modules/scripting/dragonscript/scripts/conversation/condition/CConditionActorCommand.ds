/* 
 * Drag[en]gine DragonScript Script Module
 *
 * Copyright (C) 2020, Roland Pl√ºss (roland@rptd.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */


namespace Dragengine.ConversationSystem

pin Dragengine.LoadSave
pin Dragengine.Utils



/**
 * \brief Conversation condition using value returned by command send to actor.
 * 
 * The command is a single text string parsed by the conversation script into
 * an array of arguments and then send to the player action. The format of
 * the command depends on the type of the player action the actor is using at
 * the time of the command being send. The command returns a boolean value
 * use directly as condition result.
 */
class CConditionActorCommand extends ConversationCondition
	/** \brief Factory for loading actor actions. */
	class Factory implements PersistencyFactory
		public static fixed var String NAME = "CConditionActorCommand"
		
		func new()
		end
		
		func Persistable readObjectFromFile(PersistencyEnvironment env, FileReader reader)
			return CConditionActorCommand.new(env, reader)
		end
		
		static func void registerFactory(Persistency persistency)
			persistency.addFactory(NAME, Factory.new())
		end
	end
	
	
	
	var StringID pActorID
	var String pCommand
	var bool pNegate
	
	
	
	/** \brief Create conversation action. */
	func new()
		pCommand = ""
		pNegate = false
	end
	
	/** \brief Read from file. */
	func new(PersistencyEnvironment env, FileReader reader)
		select reader.readByte() // version
		case 0
			pActorID = env.readStringIDOrNullIfEmpty(reader)
			pCommand = reader.readString16()
			pNegate = env.readBool(reader)
			
		else
			throw EInvalidParam.new("unsupported version")
		end
	end
	
	
	
	/** \brief Actor ID or null if not set. */
	func StringID getActorID()
		return pActorID
	end
	
	/** \brief Set actor ID or null if not set. */
	func void setActorID(StringID id)
		pActorID = id
	end
	
	/** \brief Command to send. */
	func String getCommand()
		return pCommand
	end
	
	/** \brief Set command to send. */
	func void setCommand(String command)
		pCommand = command
	end
	
	/** \brief Result of the condition is negated. */
	func bool getNegate()
		return pNegate
	end
	
	/** \brief Set if result of the condition is negated. */
	func void setNegate(bool negate)
		pNegate = negate
	end
	
	
	
	/** \brief Condition is true. */
	func bool evaluate(ConversationPlayback playback)
		var ConversationActor actor = playback.getActorMatching(pActorID)
		var bool result = false
		
		if actor != null
			result = actor.conditionCommand(getCommand())
		end
		
		if pNegate
			return not result
			
		else
			return result
		end
	end
	
	
	
	/**
	 * \brief Name of PersistencyFactory required to load object from file.
	 * 
	 * Name of PersistencyFactory is first written to the file as string with
	 * 8-bit length. Then writeToFile() is called to write the object itself.
	 * Empty name is not allowed as is names longer than 255 characters.
	 * Name has to match a PersistencyFactory present in the Persistency
	 * instance used for loading objects. Object is read using
	 * PersistencyFactory.readObjectFromFile() of the matching PersistencyFactory.
	 */
	func String persistencyFactoryName()
		return Factory.NAME
	end
	
	/** \brief Write object to file writer. */
	func void writeObjectToFile(PersistencyEnvironment env, FileWriter writer)
		writer.writeByte(0) // version
		
		env.writeStringIDOrEmptyIfNull(writer, pActorID)
		writer.writeString16(pCommand)
		env.writeBool(writer, pNegate)
	end
end
