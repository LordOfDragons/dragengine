/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */


namespace Dragengine.ConversationSystem

pin Dragengine.LoadSave
pin Dragengine.Utils



/**
 * \brief Conversation condition comparing conversation value.
 * 
 * The default is equal as operator and 0 as test value. If no variable
 * with the given name exists the value 0 is used as the value of the variable.
 */
class CConditionVariable extends ConversationCondition
	/** \brief Factory for loading actor actions. */
	class Factory implements PersistencyFactory
		public static fixed var String NAME = "CConditionVariable"
		
		func new()
		end
		
		func Persistable readObjectFromFile(PersistencyEnvironment env, FileReader reader)
			return CConditionVariable.new(env, reader)
		end
		
		static func void registerFactory(Persistency persistency)
			persistency.addFactory(NAME, Factory.new())
		end
	end
	
	
	
	/** \brief Compare operators. */
	enum Operator
		/** \brief True if the variable value is equal to the test value. */
		equal
		
		/** \brief True if the variable value is not equal to the test value. */
		notEqual
		
		/** \brief True if the variable value is less than the test value. */
		lessThan
		
		/** \brief True if the variable value is less than or equal to the test value. */
		lessThanOrEqual
		
		/** \brief True if the variable value is greater than the test value. */
		greaterThan
		
		/** \brief True if the variable value is greater or equal to the test value. */
		greaterThanOrEqual
	end
	
	
	
	var Operator pOperator
	var String pVariable
	var int pTestValue
	var String pTestVariable
	
	
	
	/** \brief Create conversation condition. */
	func new()
		pOperator = Operator.equal
		pTestValue = 0
	end
	
	/** \brief Read from file. */
	func new(PersistencyEnvironment env, FileReader reader)
		select reader.readByte() // version
		case 0
			pOperator = Operator.withOrder(reader.readByte())
			pVariable = env.readString8OrNullIfEmpty(reader)
			pTestValue = reader.readInt()
			pTestVariable = env.readString8OrNullIfEmpty(reader)
			
		else
			throw EInvalidParam.new("unsupported version")
		end
	end
	
	
	
	/** \brief Operator. */
	func Operator getOperator()
		return pOperator
	end
	
	/** \brief Set operator. */
	func void setOperator(Operator operator)
		pOperator = operator
	end
	
	/** \brief Name of variable. */
	func String getVariable()
		return pVariable
	end
	
	/** \brief Set name of variable. */
	func void setVariable(String variable)
		pVariable = variable
	end
	
	/** \brief Test value. */
	func int getTestValue()
		return pTestValue
	end
	
	/** \brief Set test value. */
	func void setTestValue(int value)
		pTestValue = value
	end
	
	/** \brief Test variable or null to use test value. */
	func String getTestVariable()
		return pTestVariable
	end
	
	/** \brief Set test variable or null to use test value. */
	func void setTestVariable(String variable)
		pTestVariable = variable
	end
	
	
	
	/** \brief Condition is true. */
	func bool evaluate(ConversationPlayback playback)
		var int variableValue = 0
		if pVariable != null
			variableValue = playback.getVariable(pVariable, 0)
		end
		
		var int testValue = pTestValue
		if pTestVariable != null
			testValue = playback.getVariable(pTestVariable, testValue)
		end
		
		select pOperator
		case Operator.equal
			return variableValue == testValue
			
		case Operator.notEqual
			return variableValue != testValue
			
		case Operator.lessThan
			return variableValue < testValue
			
		case Operator.lessThanOrEqual
			return variableValue <= testValue
			
		case Operator.greaterThan
			return variableValue > testValue
			
		case Operator.greaterThanOrEqual
			return variableValue >= testValue
			
		else
			throw EInvalidParam.new()
		end
	end
	
	
	
	/**
	 * \brief Name of PersistencyFactory required to load object from file.
	 * 
	 * Name of PersistencyFactory is first written to the file as string with
	 * 8-bit length. Then writeToFile() is called to write the object itself.
	 * Empty name is not allowed as is names longer than 255 characters.
	 * Name has to match a PersistencyFactory present in the Persistency
	 * instance used for loading objects. Object is read using
	 * PersistencyFactory.readObjectFromFile() of the matching PersistencyFactory.
	 */
	func String persistencyFactoryName()
		return Factory.NAME
	end
	
	/** \brief Write object to file writer. */
	func void writeObjectToFile(PersistencyEnvironment env, FileWriter writer)
		writer.writeByte(0) // version
		
		writer.writeByte(pOperator.order())
		env.writeString8OrEmptyIfNull(writer, pVariable)
		writer.writeInt(pTestValue)
		env.writeString8OrEmptyIfNull(writer, pTestVariable)
	end
end
