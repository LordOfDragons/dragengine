/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */


namespace Dragengine.ConversationSystem

pin Dragengine.LoadSave
pin Dragengine.TriggerSystem
pin Dragengine.Utils



/**
 * \brief Conversation condition testing trigger.
 */
class CConditionTrigger extends ConversationCondition
	/** \brief Factory for loading actor actions. */
	class Factory implements PersistencyFactory
		public static fixed var String NAME = "CConditionTrigger"
		
		func new()
		end
		
		func Persistable readObjectFromFile(PersistencyEnvironment env, FileReader reader)
			return CConditionTrigger.new(env, reader)
		end
		
		static func void registerFactory(Persistency persistency)
			persistency.addFactory(NAME, Factory.new())
		end
	end
	
	
	
	/** \brief Test mode. */
	enum TestMode
		/** \brief True if the trigger is in the fired state. */
		fired
		
		/** \brief True if the trigger is in the reset state. */
		notFired
		
		/** \brief True if the trigger has ever been fired. */
		everFired
		
		/** \brief True if the trigger has never been fired. */
		neverFired
	end
	
	
	
	var TestMode pTestMode
	var StringID pTrigger
	
	// NOTE we can not store the trigger target here to avoid fetching it all the time.
	//      this is because conversation are shared resources held by the conversation loader.
	//      each conversation playback can have different trigger table. by storing the target
	//      we can reference a wrong trigger target
	//var TSTriggerTarget pTriggerTarget
	
	
	
	/** \brief Create conversation condition. */
	func new()
		pTestMode = TestMode.fired
	end
	
	/** \brief Read from file. */
	func new(PersistencyEnvironment env, FileReader reader)
		select reader.readByte() // version
		case 0
			pTestMode = TestMode.withOrder(reader.readByte())
			pTrigger = env.readStringIDOrNullIfEmpty(reader)
			
		else
			throw EInvalidParam.new("unsupported version")
		end
	end
	
	
	
	/** \brief Test mode. */
	func TestMode getTestMode()
		return pTestMode
	end
	
	/** \brief Set test mode. */
	func void setTestMode(TestMode testMode)
		pTestMode = testMode
	end
	
	/** \brief Name of the trigger. */
	func StringID getTrigger()
		return pTrigger
	end
	
	/** \brief Set name of the trigger. */
	func void setTrigger(StringID trigger)
		pTrigger = trigger
	end
	
	
	
	/** \brief Condition is true. */
	func bool evaluate(ConversationPlayback playback)
		var TSTriggerTarget target
		if pTrigger != null
			// if run the first time get trigger target adding it if not existing yet
// 			if pTriggerTarget == null
				target = playback.getTriggerTable().getOrAddNamed(pTrigger)
// 			end
		end
		
		select pTestMode
		case TestMode.fired
			return target != null and target.getFired()
			
		case TestMode.notFired
			return target == null or not target.getFired()
			
		case TestMode.everFired
			return target != null and target.getHasFired()
			
		case TestMode.neverFired
			return target == null or not target.getHasFired()
			
		else
			throw EInvalidParam.new()
		end
	end
	
	
	
	/**
	 * \brief Name of PersistencyFactory required to load object from file.
	 * 
	 * Name of PersistencyFactory is first written to the file as string with
	 * 8-bit length. Then writeToFile() is called to write the object itself.
	 * Empty name is not allowed as is names longer than 255 characters.
	 * Name has to match a PersistencyFactory present in the Persistency
	 * instance used for loading objects. Object is read using
	 * PersistencyFactory.readObjectFromFile() of the matching PersistencyFactory.
	 */
	func String persistencyFactoryName()
		return Factory.NAME
	end
	
	/** \brief Write object to file writer. */
	func void writeObjectToFile(PersistencyEnvironment env, FileWriter writer)
		writer.writeByte(0) // version
		
		writer.writeByte(pTestMode.order())
		env.writeStringIDOrEmptyIfNull(writer, pTrigger)
	end
end
