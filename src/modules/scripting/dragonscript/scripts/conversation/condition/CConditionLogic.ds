/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */


namespace Dragengine.ConversationSystem

pin Dragengine.LoadSave
pin Dragengine.Utils



/**
 * \brief Conversation condition logic operator
 */
class CConditionLogic extends ConversationCondition
	/** \brief Factory for loading actor actions. */
	class Factory implements PersistencyFactory
		public static fixed var String NAME = "CConditionLogic"
		
		func new()
		end
		
		func Persistable readObjectFromFile(PersistencyEnvironment env, FileReader reader)
			return CConditionLogic.new(env, reader)
		end
		
		static func void registerFactory(Persistency persistency)
			persistency.addFactory(NAME, Factory.new())
		end
	end
	
	
	
	/** \brief Logic operators. */
	enum Operator
		/** \brief None of the conditions are true. */
		none
		
		/** \brief One or more conditions are true. */
		any
		
		/** \brief All conditions are true. */
		all
	end
	
	
	
	var Operator pOperator
	var Array pConditions
	
	
	
	/** \brief Create conversation condition. */
	func new()
		pOperator = Operator.all
		pConditions = Array.new()
	end
	
	/** \brief Read from file. */
	func new(PersistencyEnvironment env, FileReader reader)
		select reader.readByte() // version
		case 0
			pOperator = Operator.withOrder(reader.readByte())
			
			var int i, count = reader.readUShort()
			pConditions = Array.new()
			for i = 0 to count
				pConditions.add(env.readObject(reader))
			end
			
		else
			throw EInvalidParam.new("unsupported version")
		end
	end
	
	
	
	/** \brief Operator. */
	func Operator getOperator()
		return pOperator
	end
	
	/** \brief Set operator. */
	func void setOperator(Operator operator)
		pOperator = operator
	end
	
	/** \brief Visit conditions. */
	func void forEachCondition(Block aBlock)
		pConditions.forEach(aBlock)
	end
	
	/** \brief Add condition. */
	func void addCondition(ConversationCondition condition)
		if condition == null
			throw EInvalidParam.new()
		end
		pConditions.add(condition)
	end
	
	
	
	/** \brief Condition is true. */
	func bool evaluate(ConversationPlayback playback)
		select pOperator
		case Operator.none
			return pConditions.find(block ConversationCondition each
				return each.evaluate(playback)
			end) == null
			
		case Operator.any
			return pConditions.find(block ConversationCondition each
				return each.evaluate(playback)
			end) != null
			
		case Operator.all
			return pConditions.find(block ConversationCondition each
				return not each.evaluate(playback)
			end) == null and pConditions.getCount() > 0
			
		else
			throw EInvalidParam.new()
		end
	end
	
	
	
	/**
	 * \brief Name of PersistencyFactory required to load object from file.
	 * 
	 * Name of PersistencyFactory is first written to the file as string with
	 * 8-bit length. Then writeToFile() is called to write the object itself.
	 * Empty name is not allowed as is names longer than 255 characters.
	 * Name has to match a PersistencyFactory present in the Persistency
	 * instance used for loading objects. Object is read using
	 * PersistencyFactory.readObjectFromFile() of the matching PersistencyFactory.
	 */
	func String persistencyFactoryName()
		return Factory.NAME
	end
	
	/** \brief Write object to file writer. */
	func void writeObjectToFile(PersistencyEnvironment env, FileWriter writer)
		writer.writeByte(0) // version
		
		writer.writeByte(pOperator.order())
		
		writer.writeUShort(pConditions.getCount())
		pConditions.forEach(block ConversationCondition each
			env.writeObject(writer, each)
		end)
	end
end
