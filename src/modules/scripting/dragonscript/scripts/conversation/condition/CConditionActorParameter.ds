/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */


namespace Dragengine.ConversationSystem

pin Dragengine.LoadSave
pin Dragengine.Utils



/**
 * \brief Conversation condition comparing value of actor parameter.
 * 
 * The default is equal as operator and 0 as test value. If no parameter
 * with the given name exists the value 0 is used as the value of the parameter.
 */
class CConditionActorParameter extends ConversationCondition
	/** \brief Factory for loading actor actions. */
	class Factory implements PersistencyFactory
		public static fixed var String NAME = "CConditionActorParameter"
		
		func new()
		end
		
		func Persistable readObjectFromFile(PersistencyEnvironment env, FileReader reader)
			return CConditionActorParameter.new(env, reader)
		end
		
		static func void registerFactory(Persistency persistency)
			persistency.addFactory(NAME, Factory.new())
		end
	end
	
	
	
	/** \brief Compare operators. */
	public enum Operator
		/** \brief True if the parameter value is equal to the test value. */
		equal
		
		/** \brief True if the parameter value is not equal to the test value. */
		notEqual
		
		/** \brief True if the parameter value is less than the test value. */
		lessThan
		
		/** \brief True if the parameter value is less than or equal to the test value. */
		lessThanOrEqual
		
		/** \brief True if the parameter value is greater than the test value. */
		greaterThan
		
		/** \brief True if the parameter value is greater or equal to the test value. */
		greaterThanOrEqual
	end
	
	
	
	var StringID pActorID
	var Operator pOperator
	var String pParameter
	var int pTestValue
	var String pTestVariable
	
	
	
	/** \brief Create conversation condition. */
	func new()
		pOperator = Operator.equal
		pTestValue = 0
	end
	
	/** \brief Read from file. */
	func new(PersistencyEnvironment env, FileReader reader)
		select reader.readByte() // version
		case 0
			pActorID = env.readStringIDOrNullIfEmpty(reader)
			pOperator = Operator.withOrder(reader.readByte())
			pParameter = env.readString8OrNullIfEmpty(reader)
			pTestValue = reader.readInt()
			pTestVariable = env.readString8OrNullIfEmpty(reader)
			
		else
			throw EInvalidParam.new("unsupported version")
		end
	end
	
	
	
	/** \brief Actor ID or null if not set. */
	func StringID getActorID()
		return pActorID
	end
	
	/** \brief Set actor ID or null if not set. */
	func void setActorID(StringID id)
		pActorID = id
	end
	
	/** \brief Operator. */
	func Operator getOperator()
		return pOperator
	end
	
	/** \brief Set operator. */
	func void setOperator(Operator operator)
		pOperator = operator
	end
	
	/** \brief Name of the parameter. */
	func String getParameter()
		return pParameter
	end
	
	/** \brief Set name of the parameter. */
	func void setParameter(String parameter)
		pParameter = parameter
	end
	
	/** \brief Test value. */
	func int getTestValue()
		return pTestValue
	end
	
	/** \brief Set test value. */
	func void setTestValue(int value)
		pTestValue = value
	end
	
	/** \brief Test variable or null to use test value. */
	func String getTestVariable()
		return pTestVariable
	end
	
	/** \brief Set test variable or null to use test value. */
	func void setTestVariable(String variable)
		pTestVariable = variable
	end
	
	
	
	/** \brief Condition is true. */
	func bool evaluate(ConversationPlayback playback)
		var ConversationActor actor = playback.getActorMatching(pActorID)
		
		var int parameterValue = 0
		if actor != null and pParameter != null
			parameterValue = actor.getParameter(pParameter)
		end
		
		var int testValue = pTestValue
		if pTestVariable != null
			testValue = playback.getVariable(pTestVariable, testValue)
		end
		
		select pOperator
		case Operator.equal
			return parameterValue == testValue
			
		case Operator.notEqual
			return parameterValue != testValue
			
		case Operator.lessThan
			return parameterValue < testValue
			
		case Operator.lessThanOrEqual
			return parameterValue <= testValue
			
		case Operator.greaterThan
			return parameterValue > testValue
			
		case Operator.greaterThanOrEqual
			return parameterValue >= testValue
			
		else
			throw EInvalidParam.new()
		end
	end
	
	
	
	/**
	 * \brief Name of PersistencyFactory required to load object from file.
	 * 
	 * Name of PersistencyFactory is first written to the file as string with
	 * 8-bit length. Then writeToFile() is called to write the object itself.
	 * Empty name is not allowed as is names longer than 255 characters.
	 * Name has to match a PersistencyFactory present in the Persistency
	 * instance used for loading objects. Object is read using
	 * PersistencyFactory.readObjectFromFile() of the matching PersistencyFactory.
	 */
	func String persistencyFactoryName()
		return Factory.NAME
	end
	
	/** \brief Write object to file writer. */
	func void writeObjectToFile(PersistencyEnvironment env, FileWriter writer)
		writer.writeByte(0) // version
		
		env.writeStringIDOrEmptyIfNull(writer, pActorID)
		writer.writeByte(pOperator.order())
		env.writeString8OrEmptyIfNull(writer, pParameter)
		writer.writeInt(pTestValue)
		env.writeString8OrEmptyIfNull(writer, pTestVariable)
	end
end
