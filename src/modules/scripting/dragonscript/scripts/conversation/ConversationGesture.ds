/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */


namespace Dragengine.ConversationSystem

pin Dragengine.Scenery



/**
 * \brief Gesture in conversation script.
 */
class ConversationGesture
	/** \brief Unique name. */
	private var StringID pName
	
	/** \brief Name of animator to use. */
	private var StringID pAnimator
	
	/** \brief Hold gesture after finishing it. */
	private var bool pHold
	
	/**
	 * \brief Default duration in seconds.
	 * \version 1.13
	 */
	private var float pDuration
	
	
	
	/** \brief Create conversation gesture. */
	public func new(StringID name)
		if name == null
			throw EInvalidParam.new()
		end
		pName = name
		pHold = false
		pDuration = 2
	end
	
	
	
	/** \brief Name. */
	public func StringID getName()
		return pName
	end
	
	/** \brief Name of animator to use. */
	public func StringID getAnimator()
		return pAnimator
	end
	
	/** \brief Set name of animator to use. */
	public func void setAnimator(StringID animator)
		if animator == null
			throw EInvalidParam.new()
		end
		pAnimator = animator
	end
	
	/** \brief Hold gesture after finishing it. */
	public func bool getHold()
		return pHold
	end
	
	/** \brief Set if gesture is hold after finishing it. */
	public func void setHold(bool hold)
		pHold = hold
	end
	
	/**
	 * \brief Default duration in seconds.
	 * \version 1.13
	 */
	public func float getDuration()
		return pDuration
	end
	
	/**
	 * \brief Set default duration in seconds.
	 * \version 1.13
	 */
	public func void setDuration(float duration)
		pDuration = DEMath.max(duration, 0.0)
	end
end
