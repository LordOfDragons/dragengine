/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */


namespace Dragengine.ConversationSystem

pin Dragengine.LoadSave
pin Dragengine.Scenery



/**
 * \brief Target in a conversation script.
 */
class ConversationTarget
	/** \brief Unique name of target. */
	private var StringID pName
	
	/** \brief Actor ID or \em null if not set. */
	private var StringID pActorID
	
	/** \brief Coordinate system ID or \em null if not set. */
	private var StringID pCoordSystemID
	
	/** \brief Bone name or \em null to use no bone. */
	private var String pBone
	
	/** \brief Position relative to target. */
	private var Vector pPosition
	
	/** \brief Orientation relative to target. */
	private var Quaternion pOrientation
	
	
	
	/** \brief Create conversation target. */
	public func new( StringID name )
		if name == null
			throw EInvalidParam.new()
		end
		
		this.pName = name
	end
	
	
	
	/** \brief Unique name of target. */
	public func StringID getName()
		return this.pName
	end
	
	/** \brief Actor ID or \em null if not set. */
	public func StringID getActorID()
		return this.pActorID
	end
	
	/** \brief Set actor ID or \em null if not set. */
	public func void setActorID( StringID id )
		this.pActorID = id
	end
	
	/** \brief Coordinate system ID or \em null if not set. */
	public func StringID getCoordSystemID()
		return this.pCoordSystemID
	end
	
	/** \brief Set coordinate system ID or \em null if not set. */
	public func void setCoordSystemID( StringID id )
		this.pCoordSystemID = id
	end
	
	/** \brief Bone name or \em null to not use a bone. */
	public func String getBone()
		return this.pBone
	end
	
	/** \brief Set bone name or \em null to not use a bone. */
	public func void setBone( String bone )
		this.pBone = bone
	end
	
	/** \brief Position relative to target. */
	public func Vector getPosition()
		return this.pPosition
	end
	
	/** \brief Set position relative to target. */
	public func void setPosition( Vector position )
		if position == null
			throw EInvalidParam.new()
		end
		this.pPosition = position
	end
	
	/** \brief Orientation relative to target. */
	public func Quaternion getOrientation()
		return this.pOrientation
	end
	
	/** \brief Set orientation relative to target. */
	public func void setOrientation( Quaternion orientation )
		if orientation == null
			throw EInvalidParam.new()
		end
		this.pOrientation = orientation
	end
	
	
	
	/** \brief Read from file. */
	public static func ConversationTarget readFromFile( PersistencyEnvironment env, FileReader reader )
		select reader.readByte() // version
		case 0
			var ConversationTarget target = ConversationTarget.new( StringID.new( reader.readString8() ) )
			target.pActorID = env.readStringIDOrNullIfEmpty( reader )
			target.pCoordSystemID = env.readStringIDOrNullIfEmpty( reader )
			target.pBone = env.readString8OrNullIfEmpty( reader )
			target.pPosition = Vector.readFromFile( reader )
			target.pOrientation = Quaternion.readFromFile( reader )
			return target
			
		else
			throw EInvalidParam.new( "unsupported version" )
		end
	end
	
	/** \brief Write to file. */
	public func void writeToFile( PersistencyEnvironment env, FileWriter writer )
		writer.writeByte( 0 ) // version
		
		writer.writeString8( this.pName.toString() )
		env.writeStringIDOrEmptyIfNull( writer, this.pActorID )
		env.writeStringIDOrEmptyIfNull( writer, this.pCoordSystemID )
		env.writeString8OrEmptyIfNull( writer, this.pBone )
		this.pPosition.writeToFile( writer )
		this.pOrientation.writeToFile( writer )
	end
end
