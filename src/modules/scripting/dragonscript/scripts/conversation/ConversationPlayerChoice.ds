/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */


namespace Dragengine.ConversationSystem

pin Dragengine.Gui.Events
pin Dragengine.Utils


/**
 * \brief Action for player choice window entry setting the next conversation actions to run.
 */
class ConversationPlayerChoice implements ActionListener
	var ConversationPlayback pPlayback
	var ConversationPlaybackLayer pLayer
	var ConversationActionIterator pActionIterator
	var String pVariable
	var int pValue
	
	
	
	/** \brief Create conversation player choice option. */
	func new(ConversationPlayback playback, ConversationPlaybackLayer layer, \
	ConversationActionIterator actionIterator, String variable, int value)
		if playback == null or layer == null
			throw EInvalidParam.new()
		end
		
		pPlayback = playback
		pLayer = layer
		pActionIterator = actionIterator
		pVariable = variable
		pValue = value
	end
	
	
	
	/** \brief Name of variable to set with the selected option or null if not used. */
	func String getVariable()
		return pVariable
	end
	
	/** \brief Value to set the variable to. */
	func int getValue()
		return pValue
	end
	
	/** \brief Conversation playback. */
	func ConversationPlayback getPlayback()
		return pPlayback
	end
	
	/** \brief Layer to go back to. */
	func ConversationPlaybackLayer getLayer()
		return pLayer
	end
	
	/** \brief Action iterator or null if not set. */
	func ConversationActionIterator getActionIterator()
		return pActionIterator
	end
	
	
	
	/** \brief Action fired. */
	func void onAction(ActionEvent event)
		// end the player choosing
		pPlayback.getPlayerChoice().endChoosing()
		
		// set variable
		if pVariable != null
			pPlayback.setVariable(pVariable, pValue)
		end
		
		// cancel looping layer and remove all layers below
		pPlayback.cancelLoopingLayer(pLayer)
		
		// push option actions to stack or advance to the next action if missing
		if pActionIterator != null
			pPlayback.pushLayer(ConversationPlaybackLayer.new(pActionIterator))
			
		else
			pPlayback.advanceToNextAction()
		end
	end
end
