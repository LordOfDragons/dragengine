/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */


namespace Dragengine.ConversationSystem

pin Dragengine.Gui.Events
pin Dragengine.Utils


/**
 * \brief Action for player choice window entry setting the next conversation actions to run.
 */
class ConversationPlayerChoice implements ActionListener
	/** \brief Conversation playback. */
	private var ConversationPlayback pPlayback
	
	/** \brief Layer to go back to. */
	private var ConversationPlaybackLayer pLayer
	
	/** \brief Action iterator to activate. */
	private var ConversationActionIterator pActionIterator
	
	/** \brief Name of variable to set with the selected option or null if not used. */
	private var String pVariable
	
	/** \brief Value to set the variable to. */
	private var int pValue
	
	
	
	/** \brief Create conversation player choice option. */
	public func new( ConversationPlayback playback, ConversationPlaybackLayer layer, \
	ConversationActionIterator actionIterator, String variable, int value )
		if playback == null or layer == null
			throw EInvalidParam.new()
		end
		
		this.pPlayback = playback
		this.pLayer = layer
		this.pActionIterator = actionIterator
		this.pVariable = variable
		this.pValue = value
	end
	
	
	
	/** \brief Name of variable to set with the selected option or null if not used. */
	public func String getVariable()
		return this.pVariable
	end
	
	/** \brief Value to set the variable to. */
	public func int getValue()
		return this.pValue
	end
	
	/** \brief Conversation playback. */
	public func ConversationPlayback getPlayback()
		return this.pPlayback
	end
	
	/** \brief Layer to go back to. */
	public func ConversationPlaybackLayer getLayer()
		return this.pLayer
	end
	
	/** \brief Action iterator or null if not set. */
	public func ConversationActionIterator getActionIterator()
		return this.pActionIterator
	end
	
	
	
	/** \brief Action fired. */
	public func void onAction( ActionEvent event )
		// end the player choosing
		this.pPlayback.getPlayerChoice().endChoosing()
		
		// set variable
		if this.pVariable != null
			this.pPlayback.setVariable( this.pVariable, this.pValue )
		end
		
		// cancel looping layer and remove all layers below
		this.pPlayback.cancelLoopingLayer( this.pLayer )
		
		// push option actions to stack or advance to the next action if missing
		if this.pActionIterator != null
			this.pPlayback.pushLayer( ConversationPlaybackLayer.new( this.pActionIterator ) )
			
		else
			this.pPlayback.advanceToNextAction()
		end
	end
end
