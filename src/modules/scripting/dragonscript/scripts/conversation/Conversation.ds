/* 
 * Drag[en]gine DragonScript Script Module
 *
 * Copyright (C) 2020, Roland Pl√ºss (roland@rptd.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */


namespace Dragengine.ConversationSystem

pin Dragengine.Utils



/**
 * \brief Conversation script.
 */
class Conversation
	private var String pPathFile
	private var Dictionary pTargets
	private var Dictionary pCameraShots
	private var Dictionary pGestures
	private var Dictionary pFacePoses
	private var Dictionary pTopicGroups
	
	
	
	/** \brief Create conversation. */
	public func new( String pathFile )
		this.pPathFile = pathFile
		this.pTargets = Dictionary.new()
		this.pCameraShots = Dictionary.new()
		this.pGestures = Dictionary.new()
		this.pFacePoses = Dictionary.new()
		this.pTopicGroups = Dictionary.new()
	end
	
	
	
	/** \brief Path conversation has been loaded from. */
	public func String getPathFile()
		return this.pPathFile
	end
	
	
	
	/** \brief Named target or null if absent. */
	public func ConversationTarget getTargetNamed( StringID name )
		return this.pTargets.getAt( name, null ) cast ConversationTarget
	end
	
	/** \brief Add target replacing existing one if present. */
	public func void addTarget( ConversationTarget target )
		this.pTargets.setAt( target.getName(), target )
	end
	
	/** \brief Visit targets with block with parameter ConversationTarget. */
	public func void forEachTarget( Block ablock )
		this.pTargets.forEachValue( ablock )
	end
	
	
	
	/** \brief Named camera shot or null if absent. */
	public func ConversationCameraShot getCameraShotNamed( StringID name )
		return this.pCameraShots.getAt( name, null ) cast ConversationCameraShot
	end
	
	/** \brief Add camera shot replacing existing one if present. */
	public func void addCameraShot( ConversationCameraShot cameraShot )
		this.pCameraShots.setAt( cameraShot.getName(), cameraShot )
	end
	
	/** \brief Visit camera shots with block with parameter ConversationCameraShot. */
	public func void forEachCameraShot( Block ablock )
		this.pCameraShots.forEachValue( ablock )
	end
	
	
	
	/** \brief Named gesture or null if absent. */
	public func ConversationGesture getGestureNamed( StringID name )
		return this.pGestures.getAt( name, null ) cast ConversationGesture
	end
	
	/** \brief Add gesture replacing existing one if present. */
	public func void addGesture( ConversationGesture gesture )
		this.pGestures.setAt( gesture.getName(), gesture )
	end
	
	/** \brief Visit gestures with block with parameter ConversationGesture. */
	public func void forEachGesture( Block ablock )
		this.pGestures.forEachValue( ablock )
	end
	
	
	
	/** \brief Named face pose or null if absent. */
	public func ConversationFacePose getFacePoseNamed( StringID name )
		return this.pFacePoses.getAt( name, null ) cast ConversationFacePose
	end
	
	/** \brief Add face pose replacing existing one if present. */
	public func void addFacePose( ConversationFacePose facePose )
		this.pFacePoses.setAt( facePose.getName(), facePose )
	end
	
	/** \brief Visit face poses with block with parameter ConversationFacePose. */
	public func void forEachFacePose( Block ablock )
		this.pFacePoses.forEachValue( ablock )
	end
	
	
	
	/** \brief Topic group with ID or null if absent. */
	public func ConversationTopicGroup getTopicGroupWithID( StringID id )
		return this.pTopicGroups.getAt( id, null ) cast ConversationTopicGroup
	end
	
	/** \brief Add topic group replacing existing one if present. */
	public func void addTopicGroup( ConversationTopicGroup group )
		this.pTopicGroups.setAt( group.getID(), group )
	end
	
	/** \brief Visit topic groups with block with parameter ConversationTopicGroup. */
	public func void forEachTopicGroup( Block ablock )
		this.pTopicGroups.forEachValue( ablock )
	end
	
	/** \brief Topic in group or null if absent. */
	public func ConversationTopic findTopic( StringID groupID, StringID topicID )
		var ConversationTopicGroup group = this.pTopicGroups.getAt( groupID, null ) cast ConversationTopicGroup
		if group != null
			return group.getTopicWithID( topicID )
		end
		return null
	end
	
	
	
	/**
	 * \brief Import content of conversation into this conversation.
	 * 
	 * For targets, camera shots, look-ats, gestures and face poses replaces existing
	 * elements of the same name with the elements from conversation (no copies).
	 * 
	 * For topic groups inserts topics (with replacing existing ones without copying)
	 * topics from matching topic groups.
	 */
	 public func void import( Conversation conversation )
		// insert elements replacing existing ones
		conversation.pTargets.forEachValue( block ConversationTarget each
			this.pTargets.setAt( each.getName(), each )
		end )
		conversation.pCameraShots.forEachValue( block ConversationCameraShot each
			this.pCameraShots.setAt( each.getName(), each )
		end )
		conversation.pGestures.forEachValue( block ConversationGesture each
			this.pGestures.setAt( each.getName(), each )
		end )
		conversation.pFacePoses.forEachValue( block ConversationFacePose each
			this.pFacePoses.setAt( each.getName(), each )
		end )
		
		// update existing topic groups by inserting topics replacing existing ones.
		// add non existing topic groups
		conversation.pTopicGroups.forEachValue( block ConversationTopicGroup group
			var ConversationTopicGroup updateGroup = this.pTopicGroups.getAt( group.getID(), null ) cast ConversationTopicGroup
			if updateGroup == null
				updateGroup = ConversationTopicGroup.new( group.getID() )
				this.pTopicGroups.setAt( group.getID(), updateGroup )
			end
			
			group.forEachTopic( block ConversationTopic each
				updateGroup.addTopic( each )
			end )
		end )
	 end
end
