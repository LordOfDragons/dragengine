/* 
 * Drag[en]gine DragonScript Script Module
 *
 * Copyright (C) 2020, Roland Pl√ºss (roland@rptd.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */


namespace Dragengine.ConversationSystem

pin Dragengine.Utils



/**
 * \brief Conversation script.
 */
class Conversation
	var String pPathFile
	var Dictionary pTargets
	var Dictionary pCameraShots
	var Dictionary pGestures
	var Dictionary pFacePoses
	var Dictionary pTopicGroups
	
	
	
	/** \brief Create conversation. */
	func new(String pathFile)
		pPathFile = pathFile
		pTargets = Dictionary.new()
		pCameraShots = Dictionary.new()
		pGestures = Dictionary.new()
		pFacePoses = Dictionary.new()
		pTopicGroups = Dictionary.new()
	end
	
	
	
	/** \brief Path conversation has been loaded from. */
	func String getPathFile()
		return pPathFile
	end
	
	
	
	/** \brief Named target or null if absent. */
	func ConversationTarget getTargetNamed(StringID name)
		return pTargets.getAt(name, null) cast ConversationTarget
	end
	
	/** \brief Add target replacing existing one if present. */
	func void addTarget(ConversationTarget target)
		pTargets.setAt(target.getName(), target)
	end
	
	/** \brief Visit targets with block with parameter ConversationTarget. */
	func void forEachTarget(Block ablock)
		pTargets.forEachValue(ablock)
	end
	
	
	
	/** \brief Named camera shot or null if absent. */
	func ConversationCameraShot getCameraShotNamed(StringID name)
		return pCameraShots.getAt(name, null) cast ConversationCameraShot
	end
	
	/** \brief Add camera shot replacing existing one if present. */
	func void addCameraShot(ConversationCameraShot cameraShot)
		pCameraShots.setAt(cameraShot.getName(), cameraShot)
	end
	
	/** \brief Visit camera shots with block with parameter ConversationCameraShot. */
	func void forEachCameraShot(Block ablock)
		pCameraShots.forEachValue(ablock)
	end
	
	
	
	/** \brief Named gesture or null if absent. */
	func ConversationGesture getGestureNamed(StringID name)
		return pGestures.getAt(name, null) cast ConversationGesture
	end
	
	/** \brief Add gesture replacing existing one if present. */
	func void addGesture(ConversationGesture gesture)
		pGestures.setAt(gesture.getName(), gesture)
	end
	
	/** \brief Visit gestures with block with parameter ConversationGesture. */
	func void forEachGesture(Block ablock)
		pGestures.forEachValue(ablock)
	end
	
	
	
	/** \brief Named face pose or null if absent. */
	func ConversationFacePose getFacePoseNamed(StringID name)
		return pFacePoses.getAt(name, null) cast ConversationFacePose
	end
	
	/** \brief Add face pose replacing existing one if present. */
	func void addFacePose(ConversationFacePose facePose)
		pFacePoses.setAt(facePose.getName(), facePose)
	end
	
	/** \brief Visit face poses with block with parameter ConversationFacePose. */
	func void forEachFacePose(Block ablock)
		pFacePoses.forEachValue(ablock)
	end
	
	
	
	/** \brief Topic group with ID or null if absent. */
	func ConversationTopicGroup getTopicGroupWithID(StringID id)
		return pTopicGroups.getAt(id, null) cast ConversationTopicGroup
	end
	
	/** \brief Add topic group replacing existing one if present. */
	func void addTopicGroup(ConversationTopicGroup group)
		pTopicGroups.setAt(group.getID(), group)
	end
	
	/** \brief Visit topic groups with block with parameter ConversationTopicGroup. */
	func void forEachTopicGroup(Block ablock)
		pTopicGroups.forEachValue(ablock)
	end
	
	/** \brief Topic in group or null if absent. */
	func ConversationTopic findTopic(StringID groupID, StringID topicID)
		var ConversationTopicGroup group = pTopicGroups.getAt(groupID, null) cast ConversationTopicGroup
		if group != null
			return group.getTopicWithID(topicID)
		end
		return null
	end
	
	
	
	/**
	 * \brief Import content of conversation into this conversation.
	 * 
	 * For targets, camera shots, look-ats, gestures and face poses replaces existing
	 * elements of the same name with the elements from conversation (no copies).
	 * 
	 * For topic groups inserts topics (with replacing existing ones without copying)
	 * topics from matching topic groups.
	 */
	func void import(Conversation conversation)
		// insert elements replacing existing ones
		conversation.pTargets.forEachValue(block ConversationTarget each
			pTargets.setAt(each.getName(), each)
		end)
		conversation.pCameraShots.forEachValue(block ConversationCameraShot each
			pCameraShots.setAt(each.getName(), each)
		end)
		conversation.pGestures.forEachValue(block ConversationGesture each
			pGestures.setAt(each.getName(), each)
		end)
		conversation.pFacePoses.forEachValue(block ConversationFacePose each
			pFacePoses.setAt(each.getName(), each)
		end)
		
		// update existing topic groups by inserting topics replacing existing ones.
		// add non existing topic groups
		conversation.pTopicGroups.forEachValue(block ConversationTopicGroup group
			var ConversationTopicGroup updateGroup = pTopicGroups.getAt(group.getID(), null) cast ConversationTopicGroup
			
			if updateGroup == null
				group.lock()
				pTopicGroups.setAt(group.getID(), group)
				
			else
				if updateGroup.isLocked()
					updateGroup = ConversationTopicGroup.new(updateGroup)
					pTopicGroups.setAt(updateGroup.getID(), updateGroup)
				end
				
				updateGroup.importTopics(group)
			end
		end)
	end
end
