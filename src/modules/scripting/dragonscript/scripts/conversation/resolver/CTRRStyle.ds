/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */


namespace Dragengine.ConversationSystem

pin Dragengine.Gui
pin Dragengine.Scenery
pin Dragengine.Utils.StyledText.Definition.Nodes



/**
 * \brief Rule for resolving a style tag in actor speak action text.
 * 
 * Resolves tags of the form {stylename:text}. Formats text with a specific style
 * instead of the default style. Useful to put emphasis on some words for example.
 */
class CTRRStyle implements ConversationTagResolverRule
	/** \brief Style to use. */
	private var STDStyle pStyle
	
	
	
	/** \brief Create resolve tag rule. */
	public func new( STDStyle style )
		if style == null
			throw EInvalidParam.new()
		end
		this.pStyle = style
	end
	
	
	
	/** \brief Style or \em null if not used. */
	public func STDStyle getStyle()
		return this.pStyle
	end
	
	/** \brief Set style or \em null if not used. */
	public func void setStyle( STDStyle style )
		if style == null
			throw EInvalidParam.new()
		end
		this.pStyle = style
	end
	
	
	
	/**
	 * \brief Resolve tag outputing result to styled text.
	 * \param styledText Styled text to add resolved text to.
	 * \param textNode Text node to add text to.
	 * \param parameters Parameters inside tag.
	 */
	public func void resolveTag( StyledTextDefinition styledText, STDNText textNode, String parameters )
		var String styleName = this.pStyle.getName()
		if not styledText.hasStyleNamed( styleName )
			styledText.addStyle( this.pStyle )
		end
		textNode.addSpan( STDNTextSpan.new( parameters, styleName ) )
	end
end
