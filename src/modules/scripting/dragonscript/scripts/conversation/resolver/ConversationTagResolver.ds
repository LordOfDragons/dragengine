/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */


namespace Dragengine.ConversationSystem

pin Dragengine.Gui
pin Dragengine.Scenery
pin Dragengine.Utils.StyledText.Definition.Nodes



/**
 * \brief Resolve tags in actor speak action text.
 * 
 * Tags in actor speak allow to alter the text box content dynamically while
 * creating the sub title text widget. Supports tags of the form {action[:params]}
 * with optional parameters after action. The special tag {{ prints a single
 * { character. Output is a StyledTextDefinition.
 */
class ConversationTagResolver
	private var Dictionary pRules
	
	
	
	/** \brief Create conversation tag resolver. */
	public func new()
		pRules = Dictionary.new()
	end
	
	
	
	/** \brief Number of rules. */
	public func int getRuleCount()
		return pRules.getCount()
	end
	
	/** \brief Rule matching name or \em null if absent. */
	public func ConversationTagResolverRule getRuleNamed(String name)
		return pRules.getAt(name, null) cast ConversationTagResolverRule
	end
	
	/** \brief has rule matching name. */
	public func bool hasRuleNamed(String name)
		return pRules.has(name)
	end
	
	/** \brief Add rule. */
	public func void addRule(String name, ConversationTagResolverRule rule)
		if name == null or rule == null or pRules.has(name)
			throw EInvalidParam.new()
		end
		pRules.setAt(name, rule)
	end
	
	/** \brief Remove all rules. */
	public func void removeAllRules()
		pRules.removeAll()
	end
	
	
	
	/**
	 * \brief Resolve tags in text producing styled text.
	 * \param text UTF-8 text to resolve tags in.
	 * \param pageStyle Type style.
	 * \param defaultStyle Default text style.
	 */
	public func StyledTextDefinition resolveTags(String text, STDStyle pageStyle, STDStyle defaultStyle)
		var StyledTextDefinition styledText = StyledTextDefinition.new()
		
		styledText.addStyle(pageStyle)
		styledText.setPageStyle(pageStyle)
		
		styledText.addStyle(defaultStyle)
		styledText.setDefaultStyle(defaultStyle)
		
		var STDNText nodeText = STDNText.new()
		var ConversationTagResolverRule rule
		var int tagBegin = text.find('{')
		var int len = text.getLength()
		var int position = 0
		var String tagData
		var String tagAction
		var String tagParams
		var int actionEnd
		var int tagEnd
		
		while tagBegin != -1
			if position < tagBegin
				nodeText.addSpan(STDNTextSpan.new(text.substring(position, tagBegin)))
			end
			
			if text.getAt(tagBegin + 1) == '{'
				nodeText.addSpan(STDNTextSpan.new("{"))
				tagEnd = tagBegin + 1
				
			else
				tagEnd = text.find('}', tagBegin + 1)
				tagData = text.substring(tagBegin + 1, tagEnd)
				actionEnd = tagData.find(':')
				
				if actionEnd == -1
					tagAction = tagData
					tagParams = ""
					
				else
					tagAction = tagData.substring(0, actionEnd)
					tagParams = tagData.substring(actionEnd + 1)
				end
				
				rule = pRules.getAt(tagAction, null) cast ConversationTagResolverRule
				
				if rule == null
					nodeText.addSpan(STDNTextSpan.new(tagData))
					
				else
					rule.resolveTag(styledText, nodeText, tagParams)
				end
			end
			
			position = tagEnd + 1
			tagBegin = text.find('{', position)
		end
		
		if position < len
			nodeText.addSpan(STDNTextSpan.new(text.substring(position)))
		end
		
		styledText.addNode(nodeText)
		return styledText
	end
end
