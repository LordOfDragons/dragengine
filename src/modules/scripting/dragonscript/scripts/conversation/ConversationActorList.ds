/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */


namespace Dragengine.ConversationSystem


/**
 * \brief List of conversation actors keyd by identifier.
 */
class ConversationActorList
	private var Dictionary pActors
	
	
	
	/** \brief Create conversation actor list. */
	public func new()
		this.pActors = Dictionary.new()
	end
	
	/** \brief Dispose of list. */
	public func void dispose()
		this.removeAll()
	end
	
	
	
	/** \brief Number of actors. */
	public func int getCount()
		return this.pActors.getCount()
	end
	
	/** \brief Actor is present. */
	public func bool has( StringID id )
		return this.pActors.has( id )
	end
	
	/** \brief Actor with identifier or \em null if absent. */
	public func ConversationActor getAt( StringID id )
		return this.pActors.getAt( id ) cast ConversationActor
	end
	
	/** \brief Add actor. */
	public func void add( ConversationActor actor )
		var StringID id = actor.getID()
		if this.pActors.has( id )
			throw EInvalidParam.new()
		end
		this.pActors.setAt( id, actor )
	end
	
	/** \brief Remove actor. */
	public func void remove( StringID id )
		this.pActors.remove( id )
	end
	
	/** \brief Remove all actors. */
	public func void removeAll()
		this.pActors.removeAll()
	end
	
	/** \brief Visit actors with block with parameter ConversationActor. */
	public func void forEach( Block ablock )
		this.pActors.forEachValue( ablock )
	end
end
