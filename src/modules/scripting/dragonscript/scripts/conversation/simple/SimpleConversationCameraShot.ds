/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

namespace Dragengine.ConversationSystem


/**
 * \brief Simple conversation camera shot.
 * \version 1.25
 * 
 * Camera shots can be either static conversation camera shots or dynamic shots.
 * Dynamic shots are selected using either a conversation snippet,
 * a conversation game command or a conversation actor command.
 */
class SimpleConversationCameraShot
	/** \brief Camera shot type. */
	enum Type
		cameraShot
		snippet
		command
	end
	
	var Type pType
	var StringID pTarget, pSubTarget, pCameraTarget, pLookAtTarget
	var String pCommand
	var float pDuration
	
	
	/** \brief Create simple conversation camera definition. */
	func new(Type type)
		if type == null
			throw ENullPointer.new("type")
		end
		
		pType = type
		pDuration = 1
	end
	
	/** \brief Create copy of simple conversation camera definition. */
	func new(SimpleConversationCameraShot shot)
		pType = shot.pType
		pTarget = shot.pTarget
		pSubTarget = shot.pSubTarget
		pCameraTarget = shot.pCameraTarget
		pLookAtTarget = shot.pLookAtTarget
		pCommand = shot.pCommand
		pDuration = shot.pDuration
	end
	
	
	/** \brief Type. */
	func Type getType()
		return pType
	end
	
	/**
	 * \brief Target identifier.
	 * 
	 * - \ref Type#cameraShot: Name of conversation camera.
	 * - \ref Type#snippet: Name of conversation topic from group with name \ref #getGroup().
	 * - \ref Type#command: Id or alias of conversation actor or null for game command.
	 */
	func StringID getTarget()
		return pTarget
	end
	
	/**
	 * \brief Set target identifier.
	 * \see #getTarget()
	 */
	func void setTarget(StringID target)
		if target == null
			throw ENullPointer.new()
		end
		pTarget = target
	end
	
	/**
	 * \brief Sub target identifier.
	 * 
	 * - \ref Type#snippet: Name of conversation topic group.
	 * - all others: Not used and is null.
	 */
	func StringID getSubTarget()
		return pSubTarget
	end
	
	/**
	 * \brief Set sub target identifier.
	 * \see #getSubTarget()
	 */
	func void setSubTarget(StringID subTarget)
		if subTarget == null
			throw ENullPointer.new("identifier")
		end
		pSubTarget = subTarget
	end
	
	/**
	 * \brief Target the camera is attached to or null if not set.
	 * 
	 * Used only for \ref Type#cameraShot.
	 */
	func StringID getCameraTarget()
		return pCameraTarget
	end
	
	/**
	 * \brief Set target the camera is attached to or null if not set.
	 * 
	 * Used only for \ref Type#cameraShot.
	 */
	func void setCameraTarget(StringID target)
		pCameraTarget = target
	end
	
	/**
	 * \brief Target the camera is looking at or null if not set.
	 * 
	 * Used only for \ref Type#cameraShot.
	 */
	func StringID getLookAtTarget()
		return pLookAtTarget
	end
	
	/**
	 * \brief Set target the camera is looking at or null if not set.
	 * 
	 * Used only for \ref Type#cameraShot.
	 */
	func void setLookAtTarget(StringID target)
		pLookAtTarget = target
	end
	
	/**
	 * \brief Command or null.
	 * 
	 * Used for \ref Type#command only otherwise null.
	 */
	func String getCommand()
		return pCommand
	end
	
	/**
	 * \brief Set command or null.
	 * 
	 * Used for \ref Type#command only otherwise null.
	 */
	func void setCommand(String command)
		pCommand = command
	end
	
	/**
	 * \brief Shot duration in seconds.
	 * 
	 * Used for \ref Type#cameraShot only otherwise null.
	 */
	func float getDuration()
		return pDuration
	end
	
	/**
	 * \brief Set shot duration in seconds.
	 * 
	 * Used for \ref Type#cameraShot only otherwise null.
	 */
	func void setDuration(float duration)
		pDuration = duration
	end
end
