/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

namespace Dragengine.ConversationSystem


/**
 * \brief Simple conversation camera definition.
 * \version 1.25
 * 
 * Defines a list of camera shots to select from.
 */
class SimpleConversationCamera
	var StringID pId
	var float pDelay
	var Array pShots
	
	
	/** \brief Create simple conversation camera definition. */
	func new(StringID id)
		if id == null
			throw ENullPointer.new("id")
		end
		
		pId = id
		pDelay = 0.25
		pShots = Array.new()
	end
	
	/** \brief Create deep copy simple conversation camera definition. */
	func new(SimpleConversationCamera camera)
		pId = camera.pId
		pDelay = camera.pDelay
		pShots = pShots.map(block SimpleConversationCameraShot each
			return SimpleConversationCameraShot.new(each)
		end)
	end
	
	
	/** \brief Identifier. */
	func StringID getId()
		return pId
	end
	
	/**
	 * \brief Delay in seconds before activating action.
	 * 
	 * Default value is 0.25.
	 */
	func float getDelay()
		return pDelay
	end
	
	/** \brief Set delay in seconds before activating action. */
	func void setDelay(float delay)
		pDelay = DEMath.max(delay, 0.0)
	end
	
	/** \brief Count of shots. */
	func int getShotCount()
		return pShots.getCount()
	end
	
	/** \brief Shot at index. */
	func SimpleConversationCameraShot getShotAt(int index)
		return pShots.getAt(index) cast SimpleConversationCameraShot
	end
	
	/** \brief Random shot or null if no shots are present. */
	func SimpleConversationCameraShot randomShot()
		return pShots.getCount() > 0 if pShots.random() cast SimpleConversationCameraShot else null
	end
	
	/**
	 * \brief Visit shots with block.
	 * 
	 * Block is required to have signature void(SimpleConversationCameraShot shot)
	 * or void(int index, SimpleConversationCameraShot shot).
	 */
	func void forEachShot(Block ablock)
		pShots.forEach(ablock)
	end
	
	/** \brief Add shot. */
	func void addShot(SimpleConversationCameraShot shot)
		if shot == null
			throw ENullPointer.new("shot")
		end
		pShots.add(shot)
	end
end
