/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

namespace Dragengine.ConversationSystem


/**
 * \brief Simple conversation.
 * \version 1.25
 * 
 * Simple conversations allow to define quickly a conversation for use with the conversation
 * system which is based on a simplified XML file. Regular conversations are powerful but
 * can be tedious and time consuming for simple conversations which are not important nor
 * complex. In a simple conversation the actors and the text they are speaking is mainly
 * defined. Between switching actors talking random camera shot changes are added. Furthermore
 * simple gestures can be easily defined right inside the text. See
 * \ref LoadSave.LoadSimpleConversation for an example XML definition.
 */
class SimpleConversation
	var String pPathFile
	var Dictionary pCameras, pActors, pSnippets
	
	
	/** \brief Create simple conversation. */
	func new(String pathFile)
		pPathFile = pathFile
		pCameras = Dictionary.new()
		pActors = Dictionary.new()
		pSnippets = Dictionary.new()
	end
	
	/** \brief Create deep copy of simple conversation. */
	func new(SimpleConversation conversation)
		pPathFile = conversation.pPathFile
		pCameras = conversation.pCameras.map(block SimpleConversationCamera each
			return SimpleConversationCamera.new(each)
		end)
		pActors = conversation.pActors.map(block SimpleConversationActor each
			return SimpleConversationActor.new(each)
		end)
		pSnippets = conversation.pSnippets.map(block SimpleConversationSnippet each
			return SimpleConversationSnippet.new(each)
		end)
	end
	
	
	/** \brief Path simple conversation has been loaded from or null if manually build. */
	func String getPathFile()
		return pPathFile
	end
	
	
	/** \brief Count of cameras. */
	func int getCameraCount()
		return pCameras.getCount()
	end
	
	/** \brief Camera with identifier or null. */
	func SimpleConversationCamera getCameraWith(StringID identifier)
		return pCameras.getAt(identifier, null) cast SimpleConversationCamera
	end
	
	/**
	 * \brief Visit cameras with block.
	 * 
	 * Block is required to have signature void(SimpleConversationCamera camera) or
	 * void(int index, SimpleConversationCamera camera).
	 */
	func void forEachCamera(Block ablock)
		pCameras.forEachValue(ablock)
	end
	
	/**
	 * \brief Add camera.
	 * 
	 * If camera with same name exists it is replaced.
	 */
	func void addCamera(SimpleConversationCamera camera)
		if camera == null
			throw ENullPointer.new("camera")
		end
		pCameras.setAt(camera.getId(), camera)
	end
	
	
	/** \brief Count of actors. */
	func int getActorCount()
		return pActors.getCount()
	end
	
	/** \brief Actor with identifier or null. */
	func SimpleConversationActor getActorWith(StringID identifier)
		return pActors.getAt(identifier, null) cast SimpleConversationActor
	end
	
	/**
	 * \brief Visit actors with block.
	 * 
	 * Block is required to have signature void(SimpleConversationActor actor) or
	 * void(int index, SimpleConversationActor actor).
	 */
	func void forEachActor(Block ablock)
		pActors.forEachValue(ablock)
	end
	
	/**
	 * \brief Add actor.
	 * 
	 * If actor with same name exists it is replaced.
	 */
	func void addActor(SimpleConversationActor actor)
		if actor == null
			throw ENullPointer.new("actor")
		end
		pActors.setAt(actor.getId(), actor)
	end
	
	
	/** \brief Count of snippets. */
	func int getSnippetCount()
		return pSnippets.getCount()
	end
	
	/** \brief Snippet with identifier or null. */
	func SimpleConversationSnippet getSnippetWith(StringID identifier)
		return pSnippets.getAt(identifier, null) cast SimpleConversationSnippet
	end
	
	/**
	 * \brief Visit snippets with block.
	 * 
	 * Block is required to have signature void(SimpleConversationSnippet snippet) or
	 * void(int index, SimpleConversationSnippet snippet).
	 */
	func void forEachSnippet(Block ablock)
		pSnippets.forEachValue(ablock)
	end
	
	/**
	 * \brief Add snippet.
	 * 
	 * If snippet with same name exists it is replaced.
	 */
	func void addSnippet(SimpleConversationSnippet snippet)
		if snippet == null
			throw ENullPointer.new("snippet")
		end
		pSnippets.setAt(snippet.getId(), snippet)
	end
	
	
	/**
	 * \brief Import simple conversation.
	 * \warning Imported elements are shared. Do not change them.
	 */
	func void import(SimpleConversation conversation)
		conversation.forEachCamera(block SimpleConversationCamera each
			pCameras.setAt(each.getId(), each)
		end)
		conversation.forEachActor(block SimpleConversationActor each
			pActors.setAt(each.getId(), each)
		end)
		conversation.forEachSnippet(block SimpleConversationSnippet each
			pSnippets.setAt(each.getId(), each)
		end)
	end
	
	/**
	 * \brief Import translation simple conversation.
	 * \warning Imported elements are shared. Do not change them.
	 * 
	 * Similar to \ref #import() but used to import a simple conversation containing translations.
	 * If you need to modify more than just replacing the text in the actor text box you have
	 * to use \ref #import() and duplicate the snippet with the proper translation applied.
	 * 
	 * Only snippets are imported with this function. The imported snippets are only used as
	 * translations to modify the spoken text of existing snippets without changing animations.
	 * If a snippet exists it is first duplicated to allow making changes safely.
	 * 
	 * The actions in the snippet are then visited and only actions of type
	 * \ref SimpleConversationAction.Type#speak are used. The imported speak type actions are
	 * mapped to consequtive \ref SimpleConversationAction.Type#actor actions. For all speak
	 * type actions inside an actor group their text is assigned to their animation text unless
	 * an animation text is already present. This ensures the speech animation still matches.
	 * The text of the speak type actions is then set to null to prevent them from being added
	 * to the actor text box. Then the imported speak type action is inserted as first action
	 * in this group of speak type actions with the animation text set to empty string. This
	 * way the translated text shows up in the actor text box without affecting speech
	 * animation nor timings.
	 */
	func void importTranslation(SimpleConversation conversation)
		var StringID id
		var SimpleConversationSnippet snippet
		conversation.forEachSnippet(block SimpleConversationSnippet each
			id = each.getId()
			snippet = pSnippets.getAt(id, null) cast SimpleConversationSnippet
			if snippet == null
				throw EInvalidParam.new("snippet to translate not found: " + id)
			end
			pSnippets.setAt(id, translateSnippet(snippet, each))
		end)
	end
	
	/**
	 * \brief Translate snippet.
	 * \see #importTranslation(SimpleConversation)
	 * 
	 * Returns modified snippet which is a copy of snippet.
	 */
	func SimpleConversationSnippet translateSnippet(SimpleConversationSnippet snippet,\
	SimpleConversationSnippet translated)
		var SimpleConversationSnippet modified = SimpleConversationSnippet.new(snippet.getId())
		var int indexTra, countTra = translated.getActionCount()
		var SimpleConversationAction action2
		var UnicodeString text
		
		snippet.forEachAction(block SimpleConversationAction action
			select action.getType()
			case SimpleConversationAction.Type.speak
				if text != null and text.getLength() > 0
					action2 = SimpleConversationAction.new(SimpleConversationAction.Type.speak)
					action2.setText(text)
					action2.setAnimText(UnicodeString.new())
					modified.addAction(action2)
				end
				text = null
				
				action2 = SimpleConversationAction.new(action)
				if action2.getAnimText() == null
					action2.setAnimText(action.getText())
				end
				action2.setText(null)
				modified.addAction(action2)
				
			case SimpleConversationAction.Type.actor
				modified.addAction(action)
				
				if text == null
					text = UnicodeString.new()
					while indexTra < countTra
						action2 = translated.getActionAt(indexTra++)
						
						if action2.getType() == SimpleConversationAction.Type.speak
							text = text + action2.getText()
							
						elif action2.getType() == SimpleConversationAction.Type.actor
							break
						end
					end
				end
				
			else
				modified.addAction(action)
			end
		end)
		
		return modified
	end
end
