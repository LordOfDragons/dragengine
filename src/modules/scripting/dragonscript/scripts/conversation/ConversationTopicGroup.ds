/* 
 * Drag[en]gine DragonScript Script Module
 *
 * Copyright (C) 2020, Roland Pl√ºss (roland@rptd.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

namespace Dragengine.ConversationSystem

pin Dragengine.Scenery


/**
 * \brief Topic group in conversation script.
 */
class ConversationTopicGroup
	var StringID pID
	var Dictionary pTopics
	var bool pLocked
	
	
	
	/** \brief Create topic group. */
	func new(StringID id)
		if id == null
			throw ENullPointer.new()
		end
		
		pID = id
		pTopics = Dictionary.new()
	end
	
	/**
	 * \brief Create shallow copy of topic group.
	 * \version 1.19
	 * 
	 * Copy is not locked.
	 */
	func new(ConversationTopicGroup group)
		pID = group.pID
		pTopics = Dictionary.new(group.pTopics)
	end
	
	
	
	/** \brief ID. */
	func StringID getID()
		return pID
	end
	
	/** \brief Topic with ID is present. */
	func bool hasTopicWithID(StringID id)
		return pTopics.has(id)
	end
	
	/** \brief Topic with ID or null if absent. */
	func ConversationTopic getTopicWithID(StringID id)
		return pTopics.getAt(id, null) cast ConversationTopic
	end
	
	/** \brief Add topic replacing existing one if present. */
	func void addTopic(ConversationTopic topic)
		if pLocked
			throw EInvalidAction.new("locked")
		end
		
		pTopics.setAt(topic.getID(), topic)
	end
	
	/** \brief Visits topics with block with parameter ConversationTopic. */
	func void forEachTopic(Block aBlock)
		pTopics.forEachValue(aBlock)
	end
	
	/**
	 * \brief Topic group is locked.
	 * \version 1.19
	 */
	func bool isLocked()
		return pLocked
	end
	
	/**
	 * \brief Lock topic group.
	 * \version 1.19
	 */
	func void lock()
		pLocked = true
	end
	
	/**
	 * \brief Import topics.
	 * \version 1.19
	 */
	func void importTopics(ConversationTopicGroup group)
		if pLocked
			throw EInvalidAction.new("locked")
		end
		
		pTopics.setAll(group.pTopics)
	end
end
