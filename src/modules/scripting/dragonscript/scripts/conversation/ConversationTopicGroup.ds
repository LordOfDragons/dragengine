/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

namespace Dragengine.ConversationSystem

pin Dragengine.Scenery


/**
 * \brief Topic group in conversation script.
 */
class ConversationTopicGroup
	var StringID pID
	var Dictionary pTopics
	var bool pLocked
	
	
	
	/** \brief Create topic group. */
	func new(StringID id)
		if id == null
			throw ENullPointer.new()
		end
		
		pID = id
		pTopics = Dictionary.new()
	end
	
	/**
	 * \brief Create shallow copy of topic group.
	 * \version 1.19
	 * 
	 * Copy is not locked.
	 */
	func new(ConversationTopicGroup group)
		pID = group.pID
		pTopics = Dictionary.new(group.pTopics)
	end
	
	
	
	/** \brief ID. */
	func StringID getID()
		return pID
	end
	
	/** \brief Topic with ID is present. */
	func bool hasTopicWithID(StringID id)
		return pTopics.has(id)
	end
	
	/** \brief Topic with ID or null if absent. */
	func ConversationTopic getTopicWithID(StringID id)
		return pTopics.getAt(id, null) cast ConversationTopic
	end
	
	/** \brief Add topic replacing existing one if present. */
	func void addTopic(ConversationTopic topic)
		if pLocked
			throw EInvalidAction.new("locked")
		end
		
		pTopics.setAt(topic.getID(), topic)
	end
	
	/** \brief Visits topics with block with parameter ConversationTopic. */
	func void forEachTopic(Block aBlock)
		pTopics.forEachValue(aBlock)
	end
	
	/**
	 * \brief Topic group is locked.
	 * \version 1.19
	 */
	func bool isLocked()
		return pLocked
	end
	
	/**
	 * \brief Lock topic group.
	 * \version 1.19
	 */
	func void lock()
		pLocked = true
	end
	
	/**
	 * \brief Import topics.
	 * \version 1.19
	 */
	func void importTopics(ConversationTopicGroup group)
		if pLocked
			throw EInvalidAction.new("locked")
		end
		
		pTopics.setAll(group.pTopics)
	end
end
