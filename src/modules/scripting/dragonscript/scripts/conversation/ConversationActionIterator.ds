/* 
 * Drag[en]gine DragonScript Script Module
 *
 * Copyright (C) 2020, Roland Pl√ºss (roland@rptd.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */


namespace Dragengine.ConversationSystem

pin Dragengine.LoadSave



/**
 * \brief Iterator for conversation actions.
 */
class ConversationActionIterator
	var Array pActions
	var int pPosition
	
	
	
	/** \brief Create conversation action iterator. */
	func new(Array actions, int position)
		if actions == null or position < 0 or position > actions.getCount()
			throw EInvalidParam.new()
		end
		
		pActions = actions
		pPosition = position
	end
	
	
	
	/** \brief Actions. */
	func Array getActions()
		return pActions
	end
	
	/** \brief Current position. */
	func int getPosition()
		return pPosition
	end
	
	
	
	/** \brief Next action is present. */
	func bool hasNext()
		return pPosition < pActions.getCount()
	end
	
	/** \brief Next action and advance position or \em null if absent. */
	func ConversationAction getNext()
		if pPosition < pActions.getCount()
			return pActions.getAt(pPosition++) cast ConversationAction
		end
		return null
	end
	
	/** \brief Set to first action. */
	func void first()
		pPosition = 0
	end
	
	/** \brief Set to last action. */
	func void last()
		if pActions.getCount() > 0
			pPosition = pActions.getCount() - 1
		end
	end
	
	/**
	 * \brief Set to one past last action.
	 * \details hasNext() returns false and getNext() returns null.
	 */
	func void onePastLast()
		pPosition = pActions.getCount()
	end
	
	/**
	 * \brief Return to previous action if not at the start.
	 * \version 1.21
	 */
	func void previous()
		if pPosition > 0
			pPosition--
		end
	end
	
	
	
	/** \brief Read layer from file. */
	static func ConversationActionIterator readFromFile(PersistencyEnvironment env, FileReader reader)
		select reader.readByte() // version
		case 0
			var Array actions = Array.new()
			var int i, count = reader.readUShort()
			for i = 0 to count
				actions.add(env.readObject(reader))
			end
			var int position = reader.readUShort()
			
			return ConversationActionIterator.new(actions, position)
			
		else
			throw EInvalidParam.new("unsupported version")
		end
	end
	
	/** \brief Write layer to file. */
	func void writeToFile(PersistencyEnvironment env, FileWriter writer)
		writer.writeByte(0) // version
		
		writer.writeUShort(pActions.getCount())
		pActions.forEach(block ConversationAction each
			env.writeObject(writer, each)
		end)
		writer.writeUShort(pPosition)
	end
end
