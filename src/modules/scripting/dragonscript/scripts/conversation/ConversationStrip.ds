/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */


namespace Dragengine.ConversationSystem

pin Dragengine.Scenery



/**
 * \brief ID duration in a conversation script.
 */
class ConversationStrip
	var StringID pID
	var float pPause
	var float pDuration
	
	
	
	/** Create a new conversation ID duration. */
	func new(StringID id, float pause, float duration)
		pID = id
		pPause = DEMath.max(pause, 0.0)
		pDuration = DEMath.max(duration, 0.0)
	end
	
	
	
	/** Retrieves the id to apply during the strip. */
	func StringID getID()
		return pID
	end
	
	/** Retrieves the pause in seconds before the strip starts. */
	func float getPause()
		return pPause
	end
	
	/** Retrieves the duration in seconds of the strip. */
	func float getDuration()
		return pDuration
	end
	
	
	
	/** Reads the strip from a file. */
	static func ConversationStrip readFromFile(FileReader reader)
		select reader.readByte() // version
		case 0
			var StringID id = StringID.new(reader.readString8())
			var float pause = reader.readFloat()
			var float duration = reader.readFloat()
			return ConversationStrip.new(id, pause, duration)
			
		else
			throw EInvalidParam.new("unsupported version")
		end
	end
	
	/** Save game state. */
	func void writeToFile(FileWriter writer)
		writer.writeByte(0) // version
		
		writer.writeString8(pID.toString())
		writer.writeFloat(pPause)
		writer.writeFloat(pDuration)
	end
end
