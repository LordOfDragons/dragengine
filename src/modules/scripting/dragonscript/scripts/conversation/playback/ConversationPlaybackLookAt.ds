/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */


namespace Dragengine.ConversationSystem

pin Dragengine.Gui
pin Dragengine.Scenery
pin Dragengine.Utils
pin Dragengine.LoadSave



/**
 * \brief Conversation playback look-at.
 */
class ConversationPlaybackLookAt
	var DVector pPosition
	var Quaternion pOrientation
	var String pBone
	var ConversationActor pActor
	var ConversationCoordSystem pCoordSystem
	var bool pUsePlaybackCamera
	var ConversationCustomTarget pCustomTarget
	var DMatrix pLocalMatrix
	var ConversationTarget pTarget
	
	
	
	/** \brief Create look-at. */
	func new()
		pPosition = DVector.new()
		pOrientation = Quaternion.new()
	end
	
	/** \brief Create look-at with dynamic conversation target. */
	func new(ConversationPlayback playback, ConversationTarget target)
		pTarget = target
		
		pPosition = DVector.new(target.getPosition())
		pOrientation = target.getOrientation()
		pBone = target.getBone()
		
		if target.getCoordSystemID() != null
			pCoordSystem = playback.getCoordSystemByID(target.getCoordSystemID())
			
		elif target.getActorID() != null
			pActor = playback.getActorMatching(target.getActorID())
			
		else
			pUsePlaybackCamera = true
		end
	end
	
	/** \brief Create look-at relative to custom conversation target. */
	func new(ConversationCustomTarget target) this(target, DVector.new(), Quaternion.new())
	end
	
	/** \brief Create look-at relative to custom conversation target. */
	func new(ConversationCustomTarget target, DVector displacement) this(target, displacement, Quaternion.new())
	end
	
	/** \brief Create look-at relative to custom conversation target. */
	func new(ConversationCustomTarget target, DVector displacement, Quaternion orientation)
		pCustomTarget = target
		pPosition = displacement
		pOrientation = orientation
	end
	
	
	
	/** \brief Position. */
	func DVector getPosition()
		return pPosition
	end
	
	/** \brief Set position. */
	func void setPosition(DVector position)
		if position == null
			throw EInvalidParam.new()
		end
		
		pPosition = position
		pLocalMatrix = null
	end
	
	/** \brief Orientation. */
	func Quaternion getOrientation()
		return pOrientation
	end
	
	/** \brief Set orientation. */
	func void setOrientation(Quaternion orientation)
		if orientation == null
			throw EInvalidParam.new()
		end
		
		pOrientation = orientation
		pLocalMatrix = null
	end
	
	/** \brief Bone or \em null if not used. */
	func String getBone()
		return pBone
	end
	
	/** \brief Set bone or \em null if not used. */
	func void setBone(String bone)
		pBone = bone
	end
	
	/** \brief Actor the look-at is relative to or \em null if in world space. */
	func ConversationActor getActor()
		return pActor
	end
	
	/** \brief Set actor the look-at is relative to or null if in world space. */
	func void setActor(ConversationActor actor)
		pActor = actor
	end
	
	/** \brief Coordinate system the look-at is relative to or null if in world space. */
	func ConversationCoordSystem getCoordSystem()
		return pCoordSystem
	end
	
	/** \brief Set coordinate system the look-at is relative to or null if in world space. */
	func void setCoordSystem(ConversationCoordSystem coordSystem)
		pCoordSystem = coordSystem
	end
	
	/** \brief Use playback camera as target. */
	func bool getUsePlaybackCamera()
		return pUsePlaybackCamera
	end
	
	/** \brief Set if playback camera is used as target. */
	func void setUsePlaybackCamera(bool usePlaybackCamera)
		pUsePlaybackCamera = usePlaybackCamera
	end
	
	/** \brief Custom target or \em null if not used. */
	func ConversationCustomTarget getCustomTarget()
		return pCustomTarget
	end
	
	/** \brief Set custom target or \em null if not used. */
	func void setCustomTarget(ConversationCustomTarget target)
		pCustomTarget = target
	end
	
	
	
	/** \brief Current look-at world matrix. */
	func DMatrix getLookAtMatrix(ConversationPlayback playback)
		if pLocalMatrix == null
			pLocalMatrix = DMatrix.newWorld(pPosition, pOrientation)
		end
		
		var DMatrix matrix = pLocalMatrix
		
		if pUsePlaybackCamera
			var Camera camera = playback.getCameraDirector().getCamera()
			matrix = matrix * DMatrix.newWorld(camera.getPosition(), camera.getOrientation())
			
		elif pCustomTarget != null
			matrix = matrix * pCustomTarget.getMatrix()
			
		elif pCoordSystem != null
			matrix = matrix * pCoordSystem.getMatrix()
			
		elif pActor != null
			matrix = matrix * pActor.getMatrix(pBone)
		end
		
		return matrix
	end
	
	/** \brief Current look-at world position. */
	func DVector getLookAtPosition(ConversationPlayback playback)
		return getLookAtMatrix(playback).getPosition()
	end
	
	
	
	/**
	 * \brief Restore linked objects after loading.
	 * 
	 * While loading playback object is not available yet. Linked objects can not be
	 * restored during readFromFile(). Once all loading is done and the playback is
	 * present objects this call is used to restore the object links.
	 */
	func void playbackRestoreObjectLinks(ConversationPlayback playback)
		if pTarget == null
			return
		end
		
		if pTarget.getCoordSystemID() != null
			pCoordSystem = playback.getCoordSystemByID(pTarget.getCoordSystemID())
			
		elif pTarget.getActorID() != null
			pActor = playback.getActorMatching(pTarget.getActorID())
		end
	end
	
	/** \brief Read from file. */
	static func ConversationPlaybackLookAt readFromFile(PersistencyEnvironment env, FileReader reader)
		select reader.readByte() // version
		case 0
			var ConversationPlaybackLookAt lookat = ConversationPlaybackLookAt.new()
			
			var PersistencyFlags flags = PersistencyFlags.new(2, reader)
			lookat.pUsePlaybackCamera = flags.getAt(0)
			
			lookat.pPosition = DVector.readFromFile(reader)
			lookat.pOrientation = Quaternion.readFromFile(reader)
			lookat.pBone = env.readString8OrNullIfEmpty(reader)
			lookat.pCustomTarget = env.readObjectOrNull(reader) cast ConversationCustomTarget
			if flags.getAt(1)
				lookat.pTarget = ConversationTarget.readFromFile(env, reader)
			end
			
			return lookat
			
		else
			throw EInvalidParam.new("unsupported version")
		end
	end
	
	/** \brief Write object to file writer. */
	func void writeToFile(PersistencyEnvironment env, FileWriter writer)
		writer.writeByte(0) // version
		
		var PersistencyFlags flags = PersistencyFlags.new(2)
		flags.setAt(0, pUsePlaybackCamera)
		flags.setAt(1, pTarget != null)
		flags.writeToFile(writer)
		
		pPosition.writeToFile(writer)
		pOrientation.writeToFile(writer)
		env.writeString8OrEmptyIfNull(writer, pBone)
		env.writeObjectOrNull(writer, pCustomTarget)
		if flags.getAt(1)
			pTarget.writeToFile(env, writer)
		end
	end
end
