/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */


namespace Dragengine.ConversationSystem

pin Dragengine.Gui
pin Dragengine.Scenery
pin Dragengine.Utils
pin Dragengine.LoadSave



/**
 * \brief Conversation playback look-at.
 */
class ConversationPlaybackLookAt
	private var DVector pPosition
	private var Quaternion pOrientation
	private var String pBone
	private var ConversationActor pActor
	private var ConversationCoordSystem pCoordSystem
	private var bool pUsePlaybackCamera
	private var ConversationCustomTarget pCustomTarget
	private var DMatrix pLocalMatrix
	private var ConversationTarget pTarget
	
	
	
	/** \brief Create look-at. */
	public func new()
		this.pPosition = DVector.new()
		this.pOrientation = Quaternion.new()
	end
	
	/** \brief Create look-at with dynamic conversation target. */
	public func new( ConversationPlayback playback, ConversationTarget target )
		this.pTarget = target
		
		this.pPosition = DVector.new( target.getPosition() )
		this.pOrientation = target.getOrientation()
		this.pBone = target.getBone()
		
		if target.getCoordSystemID() != null
			this.pCoordSystem = playback.getCoordSystemByID( target.getCoordSystemID() )
			
		elif target.getActorID() != null
			this.pActor = playback.getActorMatching( target.getActorID() )
			
		else
			this.pUsePlaybackCamera = true
		end
	end
	
	/** \brief Create look-at relative to custom conversation target. */
	public func new( ConversationCustomTarget target ) this( target, DVector.new(), Quaternion.new() )
	end
	
	/** \brief Create look-at relative to custom conversation target. */
	public func new( ConversationCustomTarget target, DVector displacement ) this( target, displacement, Quaternion.new() )
	end
	
	/** \brief Create look-at relative to custom conversation target. */
	public func new( ConversationCustomTarget target, DVector displacement, Quaternion orientation )
		this.pCustomTarget = target
		this.pPosition = displacement
		this.pOrientation = orientation
	end
	
	
	
	/** \brief Position. */
	public func DVector getPosition()
		return this.pPosition
	end
	
	/** \brief Set position. */
	public func void setPosition( DVector position )
		if position == null
			throw EInvalidParam.new()
		end
		
		this.pPosition = position
		this.pLocalMatrix = null
	end
	
	/** \brief Orientation. */
	public func Quaternion getOrientation()
		return this.pOrientation
	end
	
	/** \brief Set orientation. */
	public func void setOrientation( Quaternion orientation )
		if orientation == null
			throw EInvalidParam.new()
		end
		
		this.pOrientation = orientation
		this.pLocalMatrix = null
	end
	
	/** \brief Bone or \em null if not used. */
	public func String getBone()
		return this.pBone
	end
	
	/** \brief Set bone or \em null if not used. */
	public func void setBone( String bone )
		this.pBone = bone
	end
	
	/** \brief Actor the look-at is relative to or \em null if in world space. */
	public func ConversationActor getActor()
		return this.pActor
	end
	
	/** \brief Set actor the look-at is relative to or null if in world space. */
	public func void setActor( ConversationActor actor )
		this.pActor = actor
	end
	
	/** \brief Coordinate system the look-at is relative to or null if in world space. */
	public func ConversationCoordSystem getCoordSystem()
		return this.pCoordSystem
	end
	
	/** \brief Set coordinate system the look-at is relative to or null if in world space. */
	public func void setCoordSystem( ConversationCoordSystem coordSystem )
		this.pCoordSystem = coordSystem
	end
	
	/** \brief Use playback camera as target. */
	public func bool getUsePlaybackCamera()
		return this.pUsePlaybackCamera
	end
	
	/** \brief Set if playback camera is used as target. */
	public func void setUsePlaybackCamera( bool usePlaybackCamera )
		this.pUsePlaybackCamera = usePlaybackCamera
	end
	
	/** \brief Custom target or \em null if not used. */
	public func ConversationCustomTarget getCustomTarget()
		return this.pCustomTarget
	end
	
	/** \brief Set custom target or \em null if not used. */
	public func void setCustomTarget( ConversationCustomTarget target )
		this.pCustomTarget = target
	end
	
	
	
	/** \brief Current look-at world matrix. */
	public func DMatrix getLookAtMatrix( ConversationPlayback playback )
		if this.pLocalMatrix == null
			this.pLocalMatrix = DMatrix.newWorld( this.pPosition, this.pOrientation )
		end
		
		var DMatrix matrix = this.pLocalMatrix
		
		if this.pUsePlaybackCamera
			var Camera camera = playback.getCameraDirector().getCamera()
			matrix = matrix * DMatrix.newWorld( camera.getPosition(), camera.getOrientation() )
			
		elif this.pCustomTarget != null
			matrix = matrix * this.pCustomTarget.getMatrix()
			
		elif this.pCoordSystem != null
			matrix = matrix * this.pCoordSystem.getMatrix()
			
		elif this.pActor != null
			matrix = matrix * this.pActor.getMatrix( this.pBone )
		end
		
		return matrix
	end
	
	/** \brief Current look-at world position. */
	public func DVector getLookAtPosition( ConversationPlayback playback )
		return this.getLookAtMatrix( playback ).getPosition()
	end
	
	
	
	/**
	 * \brief Restore linked objects after loading.
	 * 
	 * While loading playback object is not available yet. Linked objects can not be
	 * restored during readFromFile(). Once all loading is done and the playback is
	 * present objects this call is used to restore the object links.
	 */
	public func void playbackRestoreObjectLinks( ConversationPlayback playback )
		if this.pTarget == null
			return
		end
		
		if this.pTarget.getCoordSystemID() != null
			this.pCoordSystem = playback.getCoordSystemByID( this.pTarget.getCoordSystemID() )
			
		elif this.pTarget.getActorID() != null
			this.pActor = playback.getActorMatching( this.pTarget.getActorID() )
		end
	end
	
	/** \brief Read from file. */
	static public func ConversationPlaybackLookAt readFromFile( PersistencyEnvironment env, FileReader reader )
		select reader.readByte() // version
		case 0
			var ConversationPlaybackLookAt lookat = ConversationPlaybackLookAt.new()
			
			var PersistencyFlags flags = PersistencyFlags.new( 2, reader )
			lookat.pUsePlaybackCamera = flags.getAt( 0 )
			
			lookat.pPosition = DVector.readFromFile( reader )
			lookat.pOrientation = Quaternion.readFromFile( reader )
			lookat.pBone = env.readString8OrNullIfEmpty( reader )
			lookat.pCustomTarget = env.readObjectOrNull( reader ) cast ConversationCustomTarget
			if flags.getAt( 1 )
				lookat.pTarget = ConversationTarget.readFromFile( env, reader )
			end
			
			return lookat
			
		else
			throw EInvalidParam.new( "unsupported version" )
		end
	end
	
	/** \brief Write object to file writer. */
	public func void writeToFile( PersistencyEnvironment env, FileWriter writer )
		writer.writeByte( 0 ) // version
		
		var PersistencyFlags flags = PersistencyFlags.new( 2 )
		flags.setAt( 0, this.pUsePlaybackCamera )
		flags.setAt( 1, this.pTarget != null )
		flags.writeToFile( writer )
		
		this.pPosition.writeToFile( writer )
		this.pOrientation.writeToFile( writer )
		env.writeString8OrEmptyIfNull( writer, this.pBone )
		env.writeObjectOrNull( writer, this.pCustomTarget )
		if flags.getAt( 1 )
			this.pTarget.writeToFile( env, writer )
		end
	end
end
