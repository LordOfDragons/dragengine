/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

namespace Dragengine.ConversationSystem

pin Dragengine.Gui
pin Dragengine.LoadSave
pin Dragengine.Scenery
pin Dragengine.TriggerSystem
pin Dragengine.Utils


/**
 * \brief Play back conversation.
 */
abstract class ConversationPlayback implements Persistable
	var Conversation pConversation
	var ConversationTopicGroup pTopicGroup
	var ConversationTopic pTopic
	var Array pActors, pCoordSystems
	var ConversationCameraDirector pCameraDirector
	var Dictionary pVariables
	var ConversationPlaybackLane pActiveLane, pMainLane
	var Array pSideLanes
	var bool pRunning, pPaused, pEnableFastForwardSpeaking
	var ConversationPlaybackSubTitle pSubTitle
	var ConversationPlaybackPlayerChoice pPlayerChoice
	var TranslationManager pTranslationManager
	var Array pListeners
	
	
	
	/** \brief Create conversation playback. */
	func new(Conversation conversation)
		if conversation == null
			throw ENullPointer.new("conversation")
		end
		
		pConversation = conversation
		pActors = Array.new()
		pCoordSystems = Array.new()
		pVariables = Dictionary.new()
		pMainLane = ConversationPlaybackLane.new(true)
		pSideLanes = Array.new()
		pActiveLane = pMainLane
		pRunning = false
		pPaused = false
		pEnableFastForwardSpeaking = false
		pListeners = Array.new()
		
		var BaseGameApp app = BaseGameApp.getApp()
		if app != null
			pTranslationManager = app.getTranslationManager()
		end
	end
	
	/** \brief Dispose of conversation playback. */
	func void dispose()
		setRunning(false)
		pSideLanes.removeAll()
		pMainLane.removeAllLayers()
		pActiveLane = pMainLane
		removeAllVariables()
		removeAllCoordSystems()
		removeAllActors()
		pListeners = null
		pPlayerChoice = null
		pSubTitle = null
		pCameraDirector = null
		pTopic = null
		pTopicGroup = null
		pConversation = null
	end
	
	
	
	/**
	 * \brief Read from file.
	 * 
	 * This call loads only data not accessing subclass implemented methods.
	 * To finish loading call readDelayedFromFile().
	 * 
	 * The typical factory call would look like this:
	 * 
	 * \code{.ds}
	 * func Persistable readObjectFromFile(PersistencyEnvironment env, FileReader reader)
	 *    var MyConversationPlayback playback = MyConversationPlayback.new(env, reader)
	 *    playback.readDelayedFromFile(env, reader)
	 *    return playback
	 * end
	 * \endcode
	 * 
	 * These objects are not persisted. Subclass is responsible to set them.
	 * - CameraDirector
	 * - SubTitle
	 * - pPlayerChoice
	 * 
	 * Subclass is usually not required to store additional data except initializing
	 * the above mentioned.
	 */
	func new(PersistencyEnvironment env, FileReader reader)
		pActors = Array.new()
		pCoordSystems = Array.new()
		pListeners = Array.new()
		
		var BaseGameApp app = BaseGameApp.getApp()
		if app != null
			pTranslationManager = app.getTranslationManager()
		end
		
		select reader.readByte() // version
		case 0
			pReadFromFileV0(env, reader)
			
		case 1
			pReadFromFileV1(env, reader)
			
		else
			throw EInvalidParam.new("unsupported version")
		end
	end
	
	private func void pReadFromFileV0(PersistencyEnvironment env, FileReader reader)
		var int i, count
		var String path
		var StringID id
		
		path = env.readString16OrNullIfEmpty(reader)
		if path != null
			var LoadConversation loadConversation = env.getVariable(\
				PersistencyEnvironment.varLoadConversation) cast LoadConversation
			pConversation = loadConversation.loadFromFile(path)
		end
		
		id = env.readStringIDOrNullIfEmpty(reader)
		if id != null
			pTopicGroup = pConversation.getTopicGroupWithID(id)
		end
		
		id = env.readStringIDOrNullIfEmpty(reader)
		if id != null
			pTopic = pTopicGroup.getTopicWithID(id)
		end
		
		var String variableName
		var int variableValue
		count = reader.readUShort()
		pVariables = Dictionary.new()
		for i = 0 to count
			variableName = reader.readString8()
			variableValue = reader.readInt()
			pVariables.setAt(variableName, variableValue)
		end
		
		count = reader.readUShort()
		pMainLane = ConversationPlaybackLane.new(true)
		for i = 0 to count
			pMainLane.pushLayer(ConversationPlaybackLayer.readFromFile(env, reader))
		end
		pActiveLane = pMainLane
		
		var PersistencyFlags flags = PersistencyFlags.new(4, reader)
		pMainLane.setWaitingForAction(flags.getAt(0))
		pRunning = flags.getAt(1)
		pPaused = flags.getAt(2)
		pEnableFastForwardSpeaking = flags.getAt(3)
		
		pMainLane.setElapsedActionWaiting(reader.readFloat())
	end
	
	private func void pReadFromFileV1(PersistencyEnvironment env, FileReader reader)
		pReadFromFileV0(env, reader)
		
		var int i, count
		
		count = reader.readUShort()
		for i = 0 to count
			pSideLanes.add(ConversationPlaybackLane.new(env, reader, false))
		end
	end
	
	/**
	 * \brief Read data from file accessing subclass implemented methods.
	 * 
	 * Call after subclass is properly constructed. Subclass usually does not
	 * require to overwrite this method.
	 */
	func void readDelayedFromFile(PersistencyEnvironment env, FileReader reader)
		select reader.readByte() // version
		case 0
			var ConversationActor actor
			var int i, count = reader.readUShort()
			for i = 0 to count
				actor = loadConversationActor(StringID.new(reader.readString8()))
				addActor(actor, actor.getAliasID())
			end
			
			var ConversationCoordSystem coordSystem
			count = reader.readUShort()
			for i = 0 to count
				coordSystem = createConversationCoordSystem(StringID.new(reader.readString8()))
				coordSystem.readFromFile(env, reader)
				addCoordSystem(coordSystem, coordSystem.getAliasID())
			end
			
			// restore object links that can only be restored once the parent playback is present
			pActors.forEach(block ConversationActor each
				each.playbackRestoreObjectLinks()
			end)
			
			// ConversationCameraDirector pCameraDirector
			// ConversationPlaybackSubTitle pSubTitle
			// ConversationPlaybackPlayerChoice pPlayerChoice
			
		else
			throw EInvalidParam.new("unsupported version")
		end
	end
	
	
	
	/** \brief Conversation. */
	func Conversation getConversation()
		return pConversation
	end
	
	/** \brief Topic group being talking about. */
	func ConversationTopicGroup getTopicGroup()
		return pTopicGroup
	end
	
	/** \brief Topic being talking about. */
	func ConversationTopic getTopic()
		return pTopic
	end
	
	/** \brief Set topic to talk about. */
	func void setTopic(ConversationTopicGroup group, ConversationTopic topic)
		pTopicGroup = group
		pTopic = topic
		
		pSideLanes.removeAll()
		pMainLane.clear()
		
		if topic == null
			setPaused(false)
			setRunning(false)
		end
		
		advanceToNextAction()
	end
	
	/**
	 * \brief Set simple conversation snippet to talk about.
	 * \version 1.25
	 * 
	 * Removes all layers adding layer with converted snippet.
	 */
	func void setSimpleSnippet(SimpleConversationConverter converter,\
	SimpleConversation simpleConversation, SimpleConversationSnippet snippet)
		pTopicGroup = null
		pTopic = null
		
		pSideLanes.removeAll()
		pMainLane.clear()
		
		if converter != null and simpleConversation != null and snippet != null
			converter.convert(snippet, simpleConversation, this)
			
		else
			setPaused(false)
			setRunning(false)
		end
	end
	
	/** \brief Playback is running. */
	func bool getRunning()
		return pRunning
	end
	
	/** \brief Set if playback is running. */
	func void setRunning(bool running)
		if pTopic == null and pMainLane.getLayerCount() == 0
			running = false
		end
		
		if running == pRunning
			return
		end
		
		pSideLanes.removeAll()
		pActiveLane = pMainLane
		pRunning = running
		
		if running
			update(0) // ensure first action is activated at the first frame
			
		else
			clearDoneActorSubTitles()
		end
		
		notifyRunningChanged()
		
		if running
			onConversationStarted()
			
		else
			onConversationStopped()
		end
	end
	
	/** \brief Playback is paused. */
	func bool getPaused()
		return pPaused
	end
	
	/** \brief Set if playback is paused. */
	func void setPaused(bool paused)
		pPaused = paused
	end
	
	/** \brief Enabling calling fastForwardSpeaking() to be allowed. */
	func bool getEnableFastForwardSpeaking()
		return pEnableFastForwardSpeaking
	end
	
	/** \brief Set if calling fastForwardSpeaking() is allowed. */
	func void setEnableFastForwardSpeaking(bool enable)
		pEnableFastForwardSpeaking = enable
	end
	
	
	
	/** \brief Number of actors. */
	func int getActorCount()
		return pActors.getCount()
	end
	
	/** \brief Actor by index. */
	func ConversationActor getActorAt(int index)
		return pActors.getAt(index) cast ConversationActor
	end
	
	/** \brief Actor with ID or number or null if absent. */
	func ConversationActor getActorMatching(StringID id)
		return pActors.find(block ConversationActor each
			return id.equals(each.getAliasID()) or each.getID().equals(id)
		end) cast ConversationActor
	end
	
	/** \brief Add actor with no alias if absent. */
	func void addActor(ConversationActor actor)
		addActor(actor, null)
	end
	
	/** \brief Add actor with alias if absent. */
	func void addActor(ConversationActor actor, StringID alias)
		if pActors.has(actor)
			return
		end
		
		if actor.getPlayback() != null
			throw EInvalidParam.new("Actor already in conversation: " + actor)
		end
		
		pActors.add(actor)
		
		if alias == null or alias.toString().empty()
			actor.setAliasID(null)
			
		else
			actor.setAliasID(alias)
		end
		
		actor.setPlayback(this)
		
	end
	
	/** \brief Remove actor if present. */
	func void removeActor(ConversationActor actor)
		if not pActors.has(actor)
			return
		end
		
		actor.setRemainingSpeechTime(0)
		actor.setSubTitleText(null) // hide timer takes care of it if present
		
		pActors.remove(actor)
		actor.setPlayback(null)
	end
	
	/** \brief Remove all actors. */
	func void removeAllActors()
		pActors.forEach(block ConversationActor each
			each.setPlayback(null)
		end)
		
		pActors.removeAll()
	end
	
	/**
	 * \brief Clear sub title from all actors done speaking.
	 * 
	 * This only remove the sub title from affected actors. The sub title text itself is
	 * not removed from the sub title box. If you want to clear the sub title box call
	 * getSubTitle().removeAllSubTitleText().
	 */
	func void clearDoneActorSubTitles()
		pActors.forEach(block ConversationActor each
			if not each.isSpeaking()
				each.setSubTitleText(null)
			end
		end)
	end
	
	/** \brief Visit actors with block with parameter ConversationActor. */
	func void forEachActor(Block ablock)
		pActors.forEach(ablock)
	end
	
	/**
	 * \brief Find actor using block.
	 * \version 1.28
	 * 
	 * Block requires signature (\ref ConversationActor actor)
	 * or (int index, \ref ConversationActor actor) and returns true if found.
	 */
	func ConversationActor findActor(Block ablock)
		return pActors.find(ablock) cast ConversationActor
	end
	
	
	
	/** \brief Number of coordinate systems. */
	func int getCoordSystemCount()
		return pCoordSystems.getCount()
	end
	
	/** \brief Coordinate system with ID or <em null if absent. */
	func ConversationCoordSystem getCoordSystemByID(StringID id)
		return pCoordSystems.find(block ConversationCoordSystem each
			return id.equals(each.getAliasID()) or each.getID().equals(id)
		end) cast ConversationCoordSystem
	end
	
	/** \brief Add coordinate system without alias if absent. */
	func void addCoordSystem(ConversationCoordSystem coordSystem)
		addCoordSystem(coordSystem, null)
	end
	
	/** \brief Add coordinate system with alias if absent. */
	func void addCoordSystem(ConversationCoordSystem coordSystem, StringID alias)
		if pCoordSystems.has(coordSystem)
			return
		end
		
		if alias == null or alias.toString().empty()
			coordSystem.setAliasID(null)
			
		else
			coordSystem.setAliasID(alias)
		end
		
		pCoordSystems.add(coordSystem)
	end
	
	/** \brief Remove coordinate system if present. */
	func void removeCoordSystem(ConversationCoordSystem coordSystem)
		if pCoordSystems.has(coordSystem)
			pCoordSystems.remove(coordSystem)
		end
	end
	
	/** \brief Remove all coordinate systems. */
	func void removeAllCoordSystems()
		pCoordSystems.removeAll()
	end
	
	/** \brief Visit coordinate systems with block with parameter ConversationCoordSystem. */
	func void forEachCoordSystem(Block ablock)
		pCoordSystems.forEach(ablock)
	end
	
	/**
	 * \brief Find conversation coordinate system using block.
	 * \version 1.28
	 * 
	 * Block requires signature (\ref ConversationCoordSystem actor)
	 * or (int index, \ref ConversationCoordSystem actor) and returns true if found.
	 */
	func ConversationCoordSystem findCoordSystem(Block ablock)
		return pActors.find(ablock) cast ConversationCoordSystem
	end
	
	
	
	/** \brief Camera director or \em null. */
	func ConversationCameraDirector getCameraDirector()
		return pCameraDirector
	end
	
	/** \brief Set camera director or \em null. */
	func void setCameraDirector(ConversationCameraDirector director)
		pCameraDirector = director
	end
	
	
	
	/** \brief Variable is set. */
	func bool hasVariable(String name)
		return pVariables.has(name)
	end
	
	/** \brief Variable value or default value if not set */
	func int getVariable(String name, int defaultValue)
		return pVariables.getAt(name, defaultValue) cast int
	end
	
	/** \brief Set variable. */
	func void setVariable(String name, int value)
		pVariables.setAt(name, value)
	end
	
	/** \brief Remove variable if set. */
	func void removeVariable(String name)
		pVariables.removeIfExisting(name)
	end
	
	/** \brief Remove all variables. */
	func void removeAllVariables()
		pVariables.removeAll()
	end
	
	
	
	/** \brief Sub title or \em null. */
	func ConversationPlaybackSubTitle getSubTitle()
		return pSubTitle
	end
	
	/** \brief Set sub title or \em null. */
	func void setSubTitle(ConversationPlaybackSubTitle subTitle)
		pSubTitle = subTitle
	end
	
	/** \brief Player choice interface or \em null. */
	func ConversationPlaybackPlayerChoice getPlayerChoice()
		return pPlayerChoice
	end
	
	/** \brief Set player choice interface or \em null. */
	func void setPlayerChoice(ConversationPlaybackPlayerChoice playerChoice)
		pPlayerChoice = playerChoice
	end
	
	/**
	 * \brief Translation manager or null.
	 * \version 1.16
	 */
	func TranslationManager getTranslationManager()
		return pTranslationManager
	end
	
	/**
	 * \brief Set translation manager or null.
	 * \version 1.16
	 */
	func void setTranslationManager(TranslationManager translationManager)
		pTranslationManager = translationManager
	end
	
	
	
	/** \brief Update playback. */
	func void update(float elapsed)
		if not pPaused
			processActions(elapsed, false)
		end
		
		if pCameraDirector != null
			pCameraDirector.advanceCameraTime(elapsed)
		end
	end
	
	/** \brief Process actions. */
	func void processActions(float elapsed, bool skipDelay)
		// decrement the remaining speech time of all actors
		pActors.forEach(block ConversationActor each
			each.decrementRemainingSpeechTime(elapsed)
		end)
		
		// loop until there are no more actions able to be processed in elapsed time
		pSideLanes.forEach(block ConversationPlaybackLane each
			pActiveLane = each
			each.processActions(this, elapsed, skipDelay)
		end)
		
		pActiveLane = pMainLane
		pMainLane.processActions(this, elapsed, skipDelay)
	end
	
	/** \brief Advance to next action. */
	func void advanceToNextAction()
		pActiveLane.advanceToNextAction(this)
	end
	
	/**
	 * \brief Fast forward until the actor stopped speaking.
	 * 
	 * Used by ConversationInputProcessor to allow player to skip dialog.
	 * Use setEnableFastForwardSpeaking() to allow/deny fast forwarding. If complex and timed
	 * conversation parts are used disabling fast forward speaking should be disabled to avoid
	 * conversation scripts breaking.
	 */
	func void fastForwardSpeaking()
		if (pTopic == null and pMainLane.getLayerCount() == 0)\
		or not pRunning or not pEnableFastForwardSpeaking
			return
		end
		
		var float actorTime, subStep, timeToForward = 0, timeStep = 0.1
		var ConversationActor actor
		var Speaker speaker
		
		var ConversationPlaybackLayer layer = getTopLayer()
		if layer.hasNextAction()
			timeToForward = DEMath.max(layer.getNextAction().getDelay() - getElapsedActionWaiting(), 0.0)
		end
		
		var int i, count = pActors.getCount()
		for i = 0 to count
			actor = pActors.getAt(i) cast ConversationActor
			
			speaker = actor.getVoiceSpeaker()
			if speaker == null
				continue
			end
			
			/* // getPlayPosition missing
			if speaker.getPlaying()
				var Sound sound = speaker.getSound()
				if sound != null
					actorTime = ((speaker.getPlayTo() - speaker.getPlayPosition()) cast float) \
						/ (sound.getSampleRate() cast float)
				end
				
				timeToForward = DEMath.max(timeToForward, actorTime)
			end
			*/
			
			actorTime = actor.getRemainingSpeechTime()
			timeToForward = DEMath.max(timeToForward, actorTime)
			
			// this not correct but should work in the most cases. correctly the speaker of each actor
			// has to be advanced properly but if somebody skips chances are slim this actually would
			// be noticed. so all voice audio of all actors is simply stopped here
			speaker.stop()
			speaker.setSound(null)
		end
		
		while timeToForward > 0.00001
			subStep = DEMath.min(timeStep, timeToForward)
			
			pActors.forEach(block ConversationActor each
				if each.getSpeechAnimationPlayback() != null
					each.getSpeechAnimationPlayback().update(subStep)
				end
			end)
			
			processActions(subStep, true)
			
			timeToForward -= timeStep
		end
	end
	
	/** \brief Cancel looping layer removing all layers below. */
	func void cancelLoopingLayer(ConversationPlaybackLayer layer)
		pActiveLane.cancelLoopingLayer(layer)
	end
	
	
	
	/** \brief Number of layers. */
	func int getLayerCount()
		return pActiveLane.getLayerCount()
	end
	
	/**
	 * \brief Layer at index where index is counted from the top.
	 * \version 1.28
	 */
	func ConversationPlaybackLayer getLayerAt(int index)
		return pActiveLane.getLayerAt(index)
	end
	
	/** \brief Top layer. */
	func ConversationPlaybackLayer getTopLayer()
		return pActiveLane.getTopLayer()
	end
	
	/** \brief Push layer to top of stack. */
	func void pushLayer(ConversationPlaybackLayer layer)
		pActiveLane.pushLayer(layer)
	end
	
	/** \brief Pop top layer off stack. */
	func void popLayer()
		pActiveLane.popLayer()
	end
	
	/** \brief Next action is present. */
	func bool hasNextAction()
		return pActiveLane.hasNextAction()
	end
	
	/**
	 * \brief Next action or \em null if top layer is finished.
	 * \version 1.16
	 */
	func ConversationAction getNextAction()
		return pActiveLane.getNextAction()
	end
	
	/** \brief Remove all layers. */
	func void removeAllLayers()
		pActiveLane.removeAllLayers()
	end
	
	/** \brief Stop conversation. */
	func void stopConversation()
		pSideLanes.removeAll()
		pMainLane.clear()
		setRunning(false)
	end
	
	/**
	 * \brief Waiting for action to begin.
	 * \version 1.16
	 */
	func bool getWaitingForAction()
		return pActiveLane.getWaitingForAction()
	end
	
	/**
	 * \brief Elapsed action waiting time in seconds.
	 * \version 1.16
	 */
	func float getElapsedActionWaiting()
		return pActiveLane.getElapsedActionWaiting()
	end
	
	
	
	/**
	 * \brief Main lane.
	 * \version 1.28
	 */
	func ConversationPlaybackLane getMainLane()
		return pMainLane
	end
	
	/**
	 * \brief Count of side lanes.
	 * \version 1.28
	 */
	func int getSideLaneCount()
		return pSideLanes.getCount()
	end
	
	/**
	 * \brief Side lane at index.
	 * \version 1.28
	 */
	func ConversationPlaybackLane getSideLaneAt(int lane)
		return pSideLanes.getAt(lane) cast ConversationPlaybackLane
	end
	
	/**
	 * \brief Add side lane.
	 * \version 1.28
	 * 
	 * Adding a side lane runs it once.
	 */
	func void addSideLane(ConversationPlaybackLane lane)
		if lane == null
			ENullPointer.new("lane")
		end
		if lane.isMainLane()
			EInvalidParam.new("lane is main lane")
		end
		if pSideLanes.getCount() == 65535
			throw EInvalidParam.new("too many side lanes")
		end
		
		pSideLanes.add(lane)
		
		var ConversationPlaybackLane restoreLane = pActiveLane
		pActiveLane = lane
		lane.processActions(this, 0, false)
		pActiveLane = restoreLane
	end
	
	/**
	 * \brief Remove side lane.
	 * \version 1.28
	 */
	func void removeSideLane(ConversationPlaybackLane lane)
		pSideLanes.remove(lane)
	end
	
	/**
	 * \brief Remove all side lanes.
	 * \version 1.28
	 */
	func void removeAllSideLanes()
		pSideLanes.removeAll()
	end
	
	/**
	 * \brief Active lane.
	 * \version 1.28
	 * \warning For internal use only.
	 */
	protected func ConversationPlaybackLane getActiveLane()
		return pActiveLane
	end
	
	/**
	 * \brief Set active lane.
	 * \version 1.28
	 * \warning For internal use only.
	 */
	protected func void setActiveLane(ConversationPlaybackLane lane)
		if lane == null
			throw ENullPointer.new("lane")
		end
		pActiveLane = lane
	end
	
	
	
	/** \brief Add listener. */
	func void addListener(ConversationPlaybackListener listener)
		if not pListeners.has(listener)
			pListeners.add(listener)
		end
	end
	
	/** \brief Remove listener if present. */
	func void removeListener(ConversationPlaybackListener listener)
		if pListeners.has(listener)
			pListeners.remove(listener)
		end
	end
	
	/** \brief Notify listeners running state changed. */
	func void notifyRunningChanged()
		if pListeners == null
			return // can happen if somebody disposed of us very quickly
		end
		
		pListeners.forEach(block ConversationPlaybackListener each
			each.runningChanged(this)
		end)
	end
	
	
	
	/**
	 * \brief Obtain actor for a conversation identifier.
	 * 
	 * This is used by readFromFile to add actors for playing back the conversation.
	 * Implement to return the actors matching a conversation identifier.
	 */
	abstract func ConversationActor loadConversationActor(StringID id)
	
	/**
	 * \brief Create coordinate system for a conversation identifier.
	 * 
	 * This is used by readFromFile to add coordinate system for playing back the
	 * conversation. Subclass to create the coordinate system matching a
	 * conversation identifier.
	 */
	abstract func ConversationCoordSystem createConversationCoordSystem(StringID id)
	
	/**
	 * \brief Obtain trigger table to use.
	 * 
	 * Implement to return the trigger table.
	 */
	abstract func TSTriggerTable getTriggerTable()
	
	/**
	 * \brief Game command send by the conversation script.
	 * 
	 * Overwrite to make the game execute the action. The default implementation does nothing.
	 */
	func void gameCommand(String command)
	end
	
	/**
	 * \brief Game condition command send by the conversation script.
	 * 
	 * Overwrite to make the game evaluate the command returning true or false as result.
	 * The default implementation returns false.
	 */
	func bool conditionGameCommand(String command)
		return false
	end
	
	/**
	 * \brief Switch music.
	 * 
	 * Overwrite to make the game change music. The default implementation does nothing.
	 */
	func void changeMusic(String music)
	end
	
	/**
	 * \brief Conversation started hook method.
	 * 
	 * Called if running state changed to true after sending notifications to listeners.
	 */
	func void onConversationStarted()
	end
	
	/**
	 * \brief Conversation stopped hook method.
	 * 
	 * Called if running state changed to false after sending notifications to listeners.
	 */
	func void onConversationStopped()
	end
	
	
	
	/**
	 * \brief Name of PersistencyFactory required to load object from file.
	 * 
	 * Name of PersistencyFactory is first written to the file as string with
	 * 8-bit length. Then writeToFile() is called to write the object itself.
	 * Empty name is not allowed as is names longer than 255 characters.
	 * Name has to match a PersistencyFactory present in the Persistency
	 * instance used for loading objects. Object is read using
	 * PersistencyFactory.readObjectFromFile() of the matching PersistencyFactory.
	 */
	func String persistencyFactoryName()
		return null
	end
	
	/**
	 * \brief Write object to file writer.
	 * 
	 * This method supports reading object using constructor and readDelayedFromFile().
	 * Subclass has to overwrite writeObjectConstructToFile() and writeObjectDelayedToFile().
	 * This method should not be changed.
	 */
	func void writeObjectToFile(PersistencyEnvironment env, FileWriter writer)
		writeObjectConstructToFile(env, writer)
		writeObjectDelayedToFile(env, writer)
	end
	
	/**
	 * \brief Write object data to file writer read during construction time.
	 * 
	 * Writes all data which are read during construction time not accessing
	 * subclass implemented methods. This affects besides others the use of
	 * loadConversationActor() and createConversationCoordSystem().
	 * 
	 * Subclass usually does not required to overwrite this method.
	 */
	func void writeObjectConstructToFile(PersistencyEnvironment env, FileWriter writer)
		writer.writeByte(1) // version
		
		writer.writeString16(pConversation != null if pConversation.getPathFile() else "")
		writer.writeString8(pTopicGroup != null if pTopicGroup.getID().toString() else "")
		writer.writeString8(pTopic != null if pTopic.getID().toString() else "")
		
		writer.writeUShort(pVariables.getCount())
		pVariables.forEach(block String name, int value
			writer.writeString8(name)
			writer.writeInt(value)
		end)
		
		var int i, count = pMainLane.getLayerCount()
		writer.writeUShort(count)
		for i = count - 1 downto 0
			pMainLane.getLayerAt(i).writeToFile(env, writer)
		end
		
		var PersistencyFlags flags = PersistencyFlags.new(4)
		flags.setAt(0, pMainLane.getWaitingForAction())
		flags.setAt(1, pRunning)
		flags.setAt(2, pPaused)
		flags.setAt(3, pEnableFastForwardSpeaking)
		flags.writeToFile(writer)
		
		writer.writeFloat(pMainLane.getElapsedActionWaiting())
		
		writer.writeUShort(pSideLanes.getCount())
		pSideLanes.forEach(block ConversationPlaybackLane each
			each.writeToFile(env, writer)
		end)
	end
	
	/**
	 * \brief Write object data to file writer read during readDelayedFromFile.
	 * 
	 * Writes all data which are read from inside readDelayedFromFile() accessing
	 * subclass implemented methods. This affects besides others the use of
	 * loadConversationActor() and createConversationCoordSystem().
	 * 
	 * Subclass usually does not required to overwrite this method.
	 */
	func void writeObjectDelayedToFile(PersistencyEnvironment env, FileWriter writer)
		writer.writeByte(0) // version
		
		writer.writeUShort(pActors.getCount())
		pActors.forEach(block ConversationActor each
			writer.writeString8(each.getID().toString())
		end)
		
		writer.writeUShort(pCoordSystems.getCount())
		pCoordSystems.forEach(block ConversationCoordSystem each
			each.writeToFile(env, writer)
		end)
		
		// ConversationCameraDirector pCameraDirector
		// ConversationPlaybackPlayerChoice pPlayerChoice
		
		// SubTitle: handled by actors adding their text boxes while loading
	end
end
