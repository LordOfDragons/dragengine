/* 
 * Drag[en]gine DragonScript Script Module
 *
 * Copyright (C) 2020, Roland Pl√ºss (roland@rptd.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */


namespace Dragengine.ConversationSystem

pin Dragengine.Gui
pin Dragengine.Scenery
pin Dragengine.Utils
pin Dragengine.LoadSave



/**
 * \brief Conversation gesture playback.
 */
class ConversationGesturePlayback
	/** \brief Gesture. */
	class Gesture
		private var StringID pAnimatorID
		private var String pAnimatorPath
		private var Animator pAnimator
		private var bool pHold
		private var ConversationStrip pStrip
		
		/** \brief Create gesture. */
		public func new(StringID animatorID, bool hold, ConversationStrip strip)
			pAnimatorID = animatorID
			pHold = hold
			pStrip = strip
		end
		
		/** \brief Animator ID. */
		public func StringID getAnimatorID()
			return pAnimatorID
		end
		
		/** \brief Animator. */
		public func Animator getAnimator()
			return pAnimator
		end
		
		/** \brief Animator. */
		public func void setAnimator(Animator animator, String animatorPath)
			pAnimator = animator
			pAnimatorPath = animatorPath
		end
		
		/** \brief Path to animator. */
		public func String getAnimatorPath()
			return pAnimatorPath
		end
		
		/** \brief Hold gesture. */
		public func bool getHold()
			return pHold
		end
		
		/** \brief Set if gesture is held. */
		public func void setHold(bool hold)
			pHold = hold
		end
		
		/** \brief Strip. */
		public func ConversationStrip getStrip()
			return pStrip
		end
		
		/** \brief Read from file. */
		static public func Gesture readFromFile(PersistencyEnvironment env, FileReader reader)
			select reader.readByte() // version
			case 0
				var StringID animatorId = env.readStringIDOrNullIfEmpty(reader)
				var String animatorPath = env.readString16OrNullIfEmpty(reader)
				var bool hold = env.readBool(reader)
				var ConversationStrip strip = ConversationStrip.readFromFile(reader)
				
				var Gesture gesture = Gesture.new(animatorId, hold, strip)
				
				if animatorPath != null
					var LoadAnimator loadAnimator = env.getVariable(PersistencyEnvironment.varLoadAnimator) cast LoadAnimator
					gesture.setAnimator(loadAnimator.loadFromFile(animatorPath), animatorPath)
				end
				
				return gesture
				
			else
				throw EInvalidParam.new("unsupported version")
			end
		end
		
		/** \brief Write to file. */
		public func void writeToFile(PersistencyEnvironment env, FileWriter writer)
			writer.writeByte(0) // version
			
			env.writeStringIDOrEmptyIfNull(writer, pAnimatorID)
			env.writeString16OrEmptyIfNull(writer, pAnimatorPath)
			env.writeBool(writer, pHold)
			pStrip.writeToFile(writer)
		end
	end
	
	
	
	private var AnimatorInstance pAnimatorInstance
	private var Array pGestures
	private var int pPosition
	private var float pElapsed
	private var bool pRunning
	private var bool pInitNextGesture
	private var bool pRequiresApply
	private var String pNameControllerProgress
	private var String pNameControllerPlayback
	private var String pNameControllerVariation
	private var String pNameControllerFadeIn
	private var String pNameControllerFadeOut
	private var AnimatorController pControllerProgress
	private var AnimatorController pControllerPlayback
	private var AnimatorController pControllerVariation
	private var AnimatorController pControllerFadeIn
	private var AnimatorController pControllerFadeOut
	
	
	
	/** \brief Create gesture playback. */
	public func new()
		pAnimatorInstance = AnimatorInstance.new()
		pGestures = Array.new()
		pPosition = 0
		pElapsed = 0
		pRunning = false
		pInitNextGesture = false
		pRequiresApply = false
		pNameControllerProgress = "gesture.progress"
		pNameControllerPlayback = "gesture.playback"
		pNameControllerVariation = "gesture.variation"
		pNameControllerFadeIn = "gesture.fade.in"
		pNameControllerFadeOut = "gesture.fade.out"
	end
	
	
	
	/** \brief Animator instance. */
	public func AnimatorInstance getAnimatorInstance()
		return pAnimatorInstance
	end
	
	/** \brief Elapsed time. */
	public func float getElapsed()
		return pElapsed
	end
	
	/** \brief Playback position. */
	public func int getPosition()
		return pPosition
	end
	
	/** \brief Playback is running. */
	public func bool getRunning()
		return pRunning
	end
	
	/**
	 * \brief Last gesture is playing back.
	 * \version 1.13
	 * 
	 * Returns true if getRunning() is true and getPosition() is getGestureCount() - 1.
	 */
	public func bool isLastGestureRunning()
		return pRunning and pPosition == pGestures.getCount() - 1
	end
	
	/**
	 * \brief Remaining playback time of current gesture.
	 * \version 1.13
	 * 
	 * If playback is no running 0 is returned. Returned playback includes pause if not elapsed.
	 * If playing back gesture is held not elapsed pause time is returned (duration 0).
	 */
	public func float getRemainingGestureTime()
		if not pRunning or pPosition != pGestures.getCount() - 1
			return 0
		end
		
		var Gesture gesture = pGestures.getAt(pPosition) cast Gesture
		var ConversationStrip strip = gesture.getStrip()
		var float length = strip.getPause()
		if not gesture.getHold()
			length += strip.getDuration()
		end
		return DEMath.max(length - pElapsed, 0.0)
	end
	
	
	
	/** \brief Number of gestures. */
	public func int getGestureCount()
		return pGestures.getCount()
	end
	
	/** \brief Gesture by position. */
	public func Gesture getGestureAt(int position)
		return pGestures.getAt(position) cast Gesture
	end
	
	/** \brief Remove all gestures. */
	public func void removeAllGestures()
		var bool hasBeenRunning = pRunning
		
		pGestures.removeAll()
		pPosition = 0
		pElapsed = 0
		pRunning = false
		pInitNextGesture = false
		pRequiresApply = false
		
		if hasBeenRunning
			onFinished()
		end
	end
	
	/** \brief Add gesture. */
	public func void addGesture(StringID animatorID, bool hold, ConversationStrip strip)
		pGestures.add(Gesture.new(animatorID, hold, strip))
		
		// if the playback running, is located at the last gesture before adding the new one
		// and last gesture is held then we need to check if the gesture elapsed and advance
		// the playback otherwise we get into problems
		if not pRunning
			pPosition = 0
			pElapsed = 0
			pRunning = true
			pInitNextGesture = true
			return
		end
		
		if pPosition < pGestures.getCount() - 2
			return
		end
		
		var Gesture pbgesture = pGestures.getAt(pPosition) cast Gesture
		if not pbgesture.getHold()
			return
		end
		
		var ConversationStrip pbgstrip = pbgesture.getStrip()
		pElapsed = DEMath.min(pElapsed, pbgstrip.getPause() + pbgstrip.getDuration())
	end
	
	/** \brief Add gesture at playback position replacing gestures after pause time. */
	public func void addGestureFromNow(StringID animatorID, bool hold, ConversationStrip strip)
		// if not running this is the same as removing all gestures then add a new one
		var float pause = strip.getPause()
		
		if not pRunning //or pause <= 0.001
			removeAllGestures()
			addGesture(animatorID, hold, strip)
			return
		end
		
		// remove all done gestures
		while pPosition > 0
			pGestures.removeFrom(0)
			pPosition--
		end
		
		// find the last gesture fully finished before pause time
		var int count = pGestures.getCount()
		var ConversationStrip pbgstrip
		var float length, time = 0
		var int i
		
		for i = 0 to count
			pbgstrip = (pGestures.getAt(i) cast Gesture).getStrip()
			length = pbgstrip.getPause() + pbgstrip.getDuration()
			if i == 0
				length = DEMath.max(length - pElapsed, 0.0)
			end
			if time + length > pause
				break
			end
			time += length
		end
		
		if i == 0
			removeAllGestures()
			addGesture(animatorID, hold, strip)
			return
		end
		
		pGestures.resize(i)
		addGesture(animatorID, hold, ConversationStrip.new(\
			strip.getID(), pause - time, strip.getDuration()))
	end
	
	
	
	/** \brief Progress controller name. */
	public func String getNameControllerProgress()
		return pNameControllerProgress
	end
	
	/** \brief Set progress controller name. */
	public func void setNameControllerProgress(String name)
		pNameControllerProgress = name
	end
	
	/** \brief Playback controller name. */
	public func String getNameControllerPlayback()
		return pNameControllerPlayback
	end
	
	/** \brief Set playback controller name. */
	public func void setNameControllerPlayback(String name)
		pNameControllerPlayback = name
	end
	
	/** \brief Variation controller name. */
	public func String getNameControllerVariation()
		return pNameControllerVariation
	end
	
	/** \brief Set variation controller name. */
	public func void setNameControllerVariation(String name)
		pNameControllerVariation = name
	end
	
	/**
	 * \brief Fade in controller name.
	 * \version 1.13
	 */
	public func String getNameControllerFadeIn()
		return pNameControllerFadeIn
	end
	
	/**
	 * \brief Set fade in controller name.
	 * \version 1.13
	 */
	public func void setNameControllerFadeIn(String name)
		pNameControllerFadeIn = name
	end
	
	/**
	 * \brief Fade out controller name.
	 * \version 1.13
	 */
	public func String getNameControllerFadeOut()
		return pNameControllerFadeOut
	end
	
	/**
	 * \brief Set fade out controller name.
	 * \version 1.13
	 */
	public func void setNameControllerFadeOut(String name)
		pNameControllerFadeOut = name
	end
	
	/** \brief Progress animator controllers. */
	public func AnimatorController getControllerProgress()
		return pControllerProgress
	end
	
	/** \brief Playback animator controllers. */
	public func AnimatorController getControllerPlayback()
		return pControllerPlayback
	end
	
	/** \brief Variation animator controllers. */
	public func AnimatorController getControllerVariation()
		return pControllerVariation
	end
	
	/**
	 * \brief Fade in animator controllers.
	 * \version 1.13
	 */
	public func AnimatorController getControllerFadeIn()
		return pControllerFadeIn
	end
	
	/**
	 * \brief Fade out animator controllers.
	 * \version 1.13
	 */
	public func AnimatorController getControllerFadeOut()
		return pControllerFadeOut
	end
	
	
	
	/**
	 * \brief Update playback.
	 * 
	 * This updates the playback and updates animator instances if required. This does not
	 * apply the animation yet to allow proper use of state capturing.
	 */
	public func void update(ConversationActor actor, AnimatorInstance poseAnimatorInstance, float elapsed)
		pRequiresApply = false
		if not pRunning or pGestures.getCount() == 0
			return
		end
		
		var Animator animator = pAnimatorInstance.getAnimator()
		var int gestureCount = pGestures.getCount()
		var bool resetAnimation = false
		var float startTime = 0
		var float endTime = 0
		
		pElapsed += elapsed
		
		while pPosition < gestureCount
			var Gesture pbgesture = pGestures.getAt(pPosition) cast Gesture
			var ConversationStrip strip = pbgesture.getStrip()
			var float duration = strip.getDuration()
			var float pause = strip.getPause()
			var float length = pause + duration
			
			if pElapsed < length or (pbgesture.getHold() and pPosition == gestureCount - 1)
				startTime = pause
				endTime = length
				if pElapsed >= startTime
					if pInitNextGesture
						initNextGesture(actor)
						resetAnimation = true
					end
					animator = pbgesture.getAnimator()
				end
				
				break
				
			else
				pElapsed -= length
				pPosition++
				pInitNextGesture = true
			end
		end
		
		if pPosition >= gestureCount
			removeAllGestures()
			onFinished()
			return
		end
		
		if not Animator.equals(animator, pAnimatorInstance.getAnimator())
			pAnimatorInstance.setAnimator(animator)
			resetAnimation = true
			findControllers(actor)
		end
		
		// update animator if present
		if animator == null
			return
		end
		
		// copy actor controller states to the gesture controllers with matching name if present
		if poseAnimatorInstance != null
			pAnimatorInstance.copyNamedControllerStates(poseAnimatorInstance)
		end
		
		// update gesture playback. sets progress, playback, variation and fade in/out controller
		// if present. also captures state with number 0 if used by animator
		if resetAnimation
			initControllers(actor, startTime, endTime)
			
		else
			updateControllers(actor, elapsed, endTime)
		end
		
		pRequiresApply = true
	end
	
	/**
	 * \brief Apply animation.
	 * 
	 * Called after update() to apply animation. Can do nothing if no change has been done.
	 */
	public func void applyAnimation()
		if pRequiresApply
			pAnimatorInstance.apply()
		end
	end
	
	/** \brief Init next gesture to play. */
	protected func void initNextGesture(ConversationActor actor)
		pInitNextGesture = false
		
		if pPosition >= pGestures.getCount()
			return
		end
		
		var Gesture pbgesture = pGestures.getAt(pPosition) cast Gesture
		var StringID animatorID = pbgesture.getAnimatorID()
		if animatorID == null
			return
		end
		
		var ConversationPlaybackGesturePose pose = actor.getGesturePose(animatorID)
		if pose == null
			return
		end
		
		pbgesture.setAnimator(pose.getAnimator(), pose.getPathAnimator())
	end
	
	/**
	 * \brief Find animator controllers after animator changed.
	 * \version 1.13
	 */
	protected func void findControllers(ConversationActor actor)
		pControllerProgress = null
		pControllerPlayback = null
		pControllerVariation = null
		pControllerFadeIn = null
		pControllerFadeOut = null
		
		if pAnimatorInstance.getAnimator() == null
			return
		end
		
		pControllerProgress = pAnimatorInstance.getControllerNamed(pNameControllerProgress)
		pControllerPlayback = pAnimatorInstance.getControllerNamed(pNameControllerPlayback)
		pControllerVariation = pAnimatorInstance.getControllerNamed(pNameControllerVariation)
		pControllerFadeIn = pAnimatorInstance.getControllerNamed(pNameControllerFadeIn)
		pControllerFadeOut = pAnimatorInstance.getControllerNamed(pNameControllerFadeOut)
	end
	
	/**
	 * \brief Initialize controllers after activating a new gesture.
	 * \version 1.13
	 */
	protected func void initControllers(ConversationActor actor, float startTime, float endTime)
		if pControllerProgress != null
			pControllerProgress.setRange(startTime, endTime)
		end
		if pControllerVariation != null
			pControllerVariation.setValue(DEMath.random())
		end
		pAnimatorInstance.captureState(0)
		
		if pControllerProgress != null
			pControllerProgress.setValue(pElapsed)
		end
		if pControllerPlayback != null
			pControllerPlayback.setValue(pElapsed - startTime)
		end
		if pControllerFadeIn != null
			pControllerFadeIn.setValue(pElapsed)
		end
		if pControllerFadeOut != null
			pControllerFadeOut.setValue(pElapsed - (endTime - pControllerFadeOut.getUpper()))
		end
	end
	
	/**
	 * \brief Update controllers.
	 * \version 1.13
	 */
	protected func void updateControllers(ConversationActor actor, float elapsed, float endTime)
		if pControllerProgress != null
			pControllerProgress.increment(elapsed)
		end
		if pControllerPlayback != null
			pControllerPlayback.increment(elapsed)
		end
		if pControllerFadeIn != null
			pControllerFadeIn.increment(elapsed)
		end
		if pControllerFadeOut != null
			pControllerFadeOut.setValue(pElapsed - (endTime - pControllerFadeOut.getUpper()))
		end
	end
	
	
	
	/** \brief Finished playing back the gestures. Hook for subclasses. */
	public func void onFinished()
	end
	
	
	
	/** \brief Read from file. */
	public func void readFromFile(PersistencyEnvironment env, FileReader reader)
		select reader.readByte() // version
		case 0
			pRunning = env.readBool(reader)
			
			var int i, count = reader.readShort()
			for i = 0 to count
				pGestures.add(Gesture.readFromFile(env, reader))
			end
			
			pPosition = reader.readShort()
			pElapsed = reader.readFloat()
			
		else
			throw EInvalidParam.new("unsupported version")
		end
	end
	
	/** \brief Write to file. */
	public func void writeToFile(PersistencyEnvironment env, FileWriter writer)
		writer.writeByte(0) // version
		
		env.writeBool(writer, pRunning)
		
		writer.writeUShort(pGestures.getCount())
		pGestures.forEach(block Gesture each
			each.writeToFile(env, writer)
		end)
		
		writer.writeUShort(pPosition)
		writer.writeFloat(pElapsed)
	end
end
