/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */


namespace Dragengine.ConversationSystem

pin Dragengine.Gui
pin Dragengine.Scenery
pin Dragengine.Utils
pin Dragengine.LoadSave


/**
 * \brief Play back conversation look-ats.
 */
class ConversationLookAtPlayback
	/** \brief Look-at. */
	class LookAt
		private var ConversationPlaybackLookAt pLookAt
		private var ConversationStrip pStrip
		
		/** \brief Create look-at. */
		public func new(ConversationPlaybackLookAt lookAt, ConversationStrip strip)
			pLookAt = lookAt
			pStrip = strip
		end
		
		/** \brief Look-at. */
		public func ConversationPlaybackLookAt getLookAt()
			return pLookAt
		end
		
		/** \brief Strip. */
		public func ConversationStrip getStrip()
			return pStrip
		end
		
		/** \brief Read from file. */
		static public func LookAt readFromFile(PersistencyEnvironment env, FileReader reader)
			select reader.readByte() // version
			case 0
				var PersistencyFlags flags = PersistencyFlags.new(1, reader)
				
				var ConversationPlaybackLookAt lookat
				if flags.getAt(0)
					lookat = ConversationPlaybackLookAt.readFromFile(env, reader)
				end
				var ConversationStrip strip = ConversationStrip.readFromFile(reader)
				
				return LookAt.new(lookat, strip)
				
			else
				throw EInvalidParam.new("unsupported version")
			end
		end
		
		/** \brief Write to file. */
		public func void writeToFile(PersistencyEnvironment env, FileWriter writer)
			writer.writeByte(0) // version
			
			var PersistencyFlags flags = PersistencyFlags.new(1)
			flags.setAt(0, pLookAt != null)
			flags.writeToFile(writer)
			
			if pLookAt != null
				pLookAt.writeToFile(env, writer)
			end
			pStrip.writeToFile(writer)
		end
	end
	
	
	
	private var Array pLookAts
	private var int pPosition
	private var float pElapsed
	private var bool pRunning
	
	private var ConversationPlaybackLookAt pLastLookAt
	private var DVector pLastLookAtPosition
	private var ConversationPlaybackLookAt pCurLookAt
	private var DVector pCurLookAtPosition
	
	
	
	/** \brief Create look-at playback. */
	public func new()
		pLookAts = Array.new()
		pPosition = 0
		pElapsed = 0
		pRunning = false
	end
	
	
	
	/** \brief A strip is running. */
	public func bool getRunning()
		return pRunning
	end
	
	/** \brief Elapsed time. */
	public func float getElapsed()
		return pElapsed
	end
	
	/** \brief Playback position as index of look-at currently being played back. */
	public func int getPosition()
		return pPosition
	end
	
	
	
	/** \brief Last look-at to blend from or \em null if not set. */
	public func ConversationPlaybackLookAt getLastLookAt()
		return pLastLookAt
	end
	
	/** \brief Set last look-at to blend from or \em null if not set. */
	public func void setLastLookAt(ConversationPlaybackLookAt lookAt)
		pLastLookAt = lookAt
	end
	
	/** \brief Last look-at position to blend from or \em null if not set. */
	public func DVector getLastLookAtPosition()
		return pLastLookAtPosition
	end
	
	/** \brief Set last look-at position to blend from or \em null if not set. */
	public func void setLastLookAtPosition(DVector position)
		pLastLookAtPosition = position
	end
	
	/** \brief Current look-at to blend with or \em null if not set. */
	public func ConversationPlaybackLookAt getCurrentLookAt()
		return pCurLookAt
	end
	
	/** \brief Set current look-at to blend with or \em null if not set. */
	public func void setCurrentLookAt(ConversationPlaybackLookAt lookAt)
		pCurLookAt = lookAt
	end
	
	/** \brief Current look-at position to blend with or \em null if not set. */
	public func DVector getCurrentLookAtPosition()
		return pCurLookAtPosition
	end
	
	/** \brief Set current look-at position to blend with or \em null if not set. */
	public func void setCurrentLookAtPosition(DVector position)
		pCurLookAtPosition = position
	end
	
	
	
	/** \brief Count of look-ats to play back. */
	public func int getLookAtCount()
		return pLookAts.getCount()
	end
	
	/** \brief Look-at to play back at index. */
	public func LookAt getLookAtAt(int index)
		return pLookAts.getAt(index) cast LookAt
	end
	
	/** \brief Visit look-ats to playback using block with argument LookAt. */
	public func void forEachLookAts(Block ablock)
		pLookAts.forEach(ablock)
	end
	
	/** \brief Remove all look-ats. */
	public func void removeAllLookAts()
		pLookAts.removeAll()
		pPosition = 0
		pElapsed = 0
		pRunning = false
		
		pLastLookAt = pCurLookAt
		pLastLookAtPosition = pCurLookAtPosition
	end
	
	/** \brief Add strip. */
	public func void addLookAt(ConversationPlaybackLookAt lookAt, ConversationStrip strip)
		pLookAts.add(LookAt.new(lookAt, strip))
		pRunning = true
	end
	
	/** \brief Add fade out look-at. */
	public func void addFadeOutLookAt(float transitionTime)
		addLookAt(null, ConversationStrip.new(StringID.new(), 0, transitionTime))
	end
	
	
	
	/** \brief Clear current look-at state allowing the actor to take over control. */
	public func void clearLookAtState()
		removeAllLookAts()
		
		pLastLookAt = null
		pLastLookAtPosition = null
		
		pCurLookAt = null
		pCurLookAtPosition = null
	end
	
	
	
	/** \brief Calculate the inverse matrix. */
	public func DMatrix getInverseMatrix(ConversationActor actor)
		return actor.getInverseMatrix()
	end
	
	/**
	 * \brief Update playback.
	 * 
	 * This updates the playback and updates animator instances if required. This does not
	 * apply the animation yet to allow proper use of state capturing.
	 */
	public func void update(ConversationActor actor, float elapsed)
		var int lookAtCount = pLookAts.getCount()
		var float blendFactor = 0
		
		if pRunning and lookAtCount > 0
			pElapsed += elapsed
			
			while pPosition < lookAtCount
				var LookAt lookat = pLookAts.getAt(pPosition) cast LookAt
				var ConversationStrip strip = lookat.getStrip()
				var float duration = strip.getDuration()
				var float pause = strip.getPause()
				var float length = pause + duration
				
				pCurLookAt = lookat.getLookAt()
				
				if pElapsed < length
					blendFactor = DEMath.smoothStep(pElapsed, pause, length)
					break
					
				else
					pElapsed -= length
					pPosition++
					
					pLastLookAt = pCurLookAt
					pLastLookAtPosition = pCurLookAtPosition
				end
			end
			
			if pPosition >= lookAtCount
				pRunning = false
			end
		end
		
		if pCurLookAt == null and pLastLookAt == null
			pLastLookAtPosition = null
			pCurLookAtPosition = null
			
		else
			var DMatrix matrix = getInverseMatrix(actor)
			
			if pLastLookAt == null
				pLastLookAtPosition = null
				
			else
				pLastLookAtPosition = matrix * pLastLookAt.getLookAtPosition(actor.getPlayback())
			end
			
			if pCurLookAt == null
				pCurLookAtPosition = null
				
			else
				pCurLookAtPosition = matrix * pCurLookAt.getLookAtPosition(actor.getPlayback())
			end
		end
		
		updateActorLookAt(actor, blendFactor)
	end
	
	/**
	 * \brief Apply animation.
	 * 
	 * Called after update() to apply animation. Can do nothing if no change has been done.
	 */
	public func void applyAnimation()
	end
	
	/**
	 * \brief Update actor look-at.
	 * 
	 * Default implementation does nothing.
	 */
	public func void updateActorLookAt(ConversationActor actor, float blendFactor)
	end
	
	
	
	/**
	 * \brief Restore linked objects after loading.
	 * 
	 * While loading playback object is not available yet. Linked objects can not be
	 * restored during readFromFile(). Once all loading is done and the playback is
	 * present objects this call is used to restore the object links.
	 */
	public func void playbackRestoreObjectLinks(ConversationPlayback playback)
		if pLastLookAt != null
			pLastLookAt.playbackRestoreObjectLinks(playback)
		end
		if pCurLookAt != null
			pCurLookAt.playbackRestoreObjectLinks(playback)
		end
	end
	
	/** \brief Read element from a file. */
	public func void readFromFile(PersistencyEnvironment env, FileReader reader)
		select reader.readByte() // version
		case 0
			var PersistencyFlags flags = PersistencyFlags.new(5, reader)
			
			pRunning = flags.getAt(0)
			
			var int i, count = reader.readUShort()
			for i = 0 to count
				pLookAts.add(LookAt.readFromFile(env, reader))
			end
			
			pPosition = reader.readUShort()
			pElapsed = reader.readFloat()
			
			if flags.getAt(1)
				pLastLookAt = ConversationPlaybackLookAt.readFromFile(env, reader)
			end
			if flags.getAt(2)
				pLastLookAtPosition = DVector.readFromFile(reader)
			end
			if flags.getAt(3)
				pCurLookAt = ConversationPlaybackLookAt.readFromFile(env, reader)
			end
			if flags.getAt(4)
				pCurLookAtPosition = DVector.readFromFile(reader)
			end
			
			/*
			BaseGameApp.getApp().getConsole().addMessage("CLAP: strips=" + pLookAts.getCount() + " pos=" + pPosition \
				+ " elapsed=" + pElapsed + " lla=" + pLastLookAt + " llap=" \
				+ pLastLookAtPosition + " cla=" + pCurLookAt + " clap=" + pCurLookAtPosition)
			pLookAts.forEach(block LookAt each
				BaseGameApp.getApp().getConsole().addMessage("- lookat=" + each.getLookAt() + " strip=(" + each.getStrip().getID() \
					+ ", " + each.getStrip().getPause() + ", " + each.getStrip().getDuration() + ")")
			end)
			//pLookAts.removeAll()
			*/
			
		else
			throw EInvalidParam.new("unsupported version")
		end
	end
	
	/** \brief Writes to file. */
	public func void writeToFile(PersistencyEnvironment env, FileWriter writer)
		writer.writeByte(0) // version
		
		var PersistencyFlags flags = PersistencyFlags.new(5)
		flags.setAt(0, pRunning)
		flags.setAt(1, pLastLookAt != null)
		flags.setAt(2, pLastLookAtPosition != null)
		flags.setAt(3, pCurLookAt != null)
		flags.setAt(4, pCurLookAtPosition != null)
		flags.writeToFile(writer)
		
		writer.writeUShort(pLookAts.getCount())
		pLookAts.forEach(block LookAt each
			each.writeToFile(env, writer)
		end)
		
		writer.writeUShort(pPosition)
		writer.writeFloat(pElapsed)
		
		if pLastLookAt != null
			pLastLookAt.writeToFile(env, writer)
		end
		if pLastLookAtPosition != null
			pLastLookAtPosition.writeToFile(writer)
		end
		if pCurLookAt != null
			pCurLookAt.writeToFile(env, writer)
		end
		if pCurLookAtPosition != null
			pCurLookAtPosition.writeToFile(writer)
		end
	end
end
