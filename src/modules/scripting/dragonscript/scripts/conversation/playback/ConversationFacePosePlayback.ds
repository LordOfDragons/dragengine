/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */


namespace Dragengine.ConversationSystem

pin Dragengine.Gui
pin Dragengine.Scenery
pin Dragengine.Utils
pin Dragengine.LoadSave
pin Dragengine.SpeechAnimations


/**
 * \brief Conversation face pose playback.
 */
class ConversationFacePosePlayback
	/** \brief Face pose controller. */
	class FacePoseController
		var int pController
		var String pControllerName
		var float pInfluence
		
		/**
		 * \brief Create face pose controller.
		 * \deprecated Use new(String,float)
		 */
		func new(int controller, float influence)
			pController = controller
			pInfluence = influence
		end
		
		/**
		 * \brief Create face pose controller.
		 * \version 1.16
		 */
		func new(String controller, float influence)
			pController = -1
			pControllerName = controller
			pInfluence = influence
		end
		
		/**
		 * \brief Controller.
		 * \deprecated Use getControllerName().
		 */
		func int getController()
			return pController
		end
		
		/**
		 * \brief Controller name.
		 * \version 1.16
		 */
		func String getControllerName()
			return pControllerName
		end
		
		/** \brief Influence. */
		func float getInfluence()
			return pInfluence
		end
		
		/** \brief Read from file. */
		static func FacePoseController readFromFile(FileReader reader)
			select reader.readByte() // version
			case 0 // deprecated
				var int controller = reader.readUShort() - 1
				var float influence = reader.readFloat()
				return FacePoseController.new(controller, influence)
				
			case 1
				var String controller = reader.readString8()
				var float influence = reader.readFloat()
				return FacePoseController.new(controller, influence)
				
			else
				throw EInvalidParam.new("unsupported version")
			end
		end
		
		/** \brief Write to file. */
		func void writeToFile(FileWriter writer)
			if pControllerName != null
				writer.writeByte(1) // version
				writer.writeString8(pControllerName)
				
			else // deprecated
				writer.writeByte(0) // version
				writer.writeUShort(pController + 1)
			end
			
			writer.writeFloat(pInfluence)
		end
	end
	
	/** \brief Face pose. */
	class FacePose
		var Array pControllers
		var ConversationStrip pStrip
		
		/** \brief Create face pose. */
		func new(Array controllers, ConversationStrip strip)
			pControllers = controllers
			pStrip = strip
		end
		
		/** \brief Array of FacePoseController. */
		func Array getControllers()
			return pControllers
		end
		
		/** \brief Strip. */
		func ConversationStrip getStrip()
			return pStrip
		end
		
		/** \brief Read from file. */
		static func FacePose readFromFile(FileReader reader)
			select reader.readByte() // version
			case 0
				var Array controllers = readControllersFromFile(reader)
				var ConversationStrip strip = ConversationStrip.readFromFile(reader)
				return FacePose.new(controllers, strip)
				
			else
				throw EInvalidParam.new("unsupported version")
			end
		end
		
		/** \brief Read controllers from file. */
		static func Array readControllersFromFile(FileReader reader)
			var Array controllers = Array.new()
			var int i, count = reader.readUShort()
			for i = 0 to count
				controllers.add(FacePoseController.readFromFile(reader))
			end
			return controllers
		end
		
		/** \brief Write to file. */
		func void writeToFile(FileWriter writer)
			writer.writeByte(0) // version
			
			writeControllersToFile(writer, pControllers)
			pStrip.writeToFile(writer)
		end
		
		/** \brief Write controllers to file. */
		static func void writeControllersToFile(FileWriter writer, Array controllers)
			writer.writeUShort(controllers.getCount())
			controllers.forEach(block FacePoseController each
				each.writeToFile(writer)
			end)
		end
	end
	
	
	
	var Animator pAnimator
	var AnimatorInstance pAnimatorInstance
	var AnimatorController pControllerSpeaking
	var Array pPoses
	var int pPosition
	var float pElapsed
	var Array pLastPose
	var Array pCurPose
	var bool pRunning
	var bool pRequiresApply
	var String pControllerNameSpeaking
	var SpeechAnimationPlayback pSpeechAnimationPlayback
	
	var float pBlinkIntervalMin
	var float pBlinkIntervalMax
	var float pBlinkNext
	var float pBlinkElapsed
	
	
	
	/** \brief Create face pose playback. */
	func new()
		pAnimatorInstance = AnimatorInstance.new()
		pPoses = Array.new()
		pPosition = 0
		pElapsed = 0
		pRunning = false
		pRequiresApply = false
		pControllerNameSpeaking = "speaking"
		
		pBlinkIntervalMin = 2
		pBlinkIntervalMax = 6
		pBlinkNext = DEMath.random() * 4 + 2
		pBlinkElapsed = 0
	end
	
	
	
	/** \brief Animator. */
	func Animator getAnimator()
		return pAnimator
	end
	
	/** \brief Set animator. */
	func void setAnimator(Animator animator)
		pAnimatorInstance.setAnimator(animator)
		pAnimator = animator
		pControllerSpeaking = pAnimatorInstance.getControllerNamed(pControllerNameSpeaking)
	end
	
	/** \brief Animator instance. */
	func AnimatorInstance getAnimatorInstance()
		return pAnimatorInstance
	end
	
	/** \brief Elapsed time. */
	func float getElapsed()
		return pElapsed
	end
	
	/**
	 * \brief Minimum random eye blinking interval in seconds.
	 * \version 1.21
	 */
	func float getMinimumBlinkInterval()
		return pBlinkIntervalMin
	end
	
	/**
	 * \brief Set minimum random eye blinking interval in seconds.
	 * \version 1.21
	 */
	func void setMinimumBlinkInterval(float interval)
		pBlinkIntervalMin = DEMath.max(interval, 0.001)
	end
	
	/**
	 * \brief Maximum random eye blinking interval in seconds.
	 * \version 1.21
	 */
	func float getMaximumBlinkInterval()
		return pBlinkIntervalMax
	end
	
	/**
	 * \brief Set maximum random eye blinking interval in seconds.
	 * \version 1.21
	 */
	func void setMaximumBlinkInterval(float interval)
		pBlinkIntervalMax = DEMath.max(interval, 0.001)
	end
	
	/**
	 * \brief Name of controller to set if actor is speaking.
	 * \version 1.21
	 * 
	 * Value of controller is set to 0 if no speech animation playback viseme is playing back
	 * otherwise the value is set to 1.
	 * 
	 * Default controller name is "speaking".
	 */
	func String getControllerNameSpeaking()
		return pControllerNameSpeaking
	end
	
	/**
	 * \brief Set name of controller to set if actor is speaking.
	 * \version 1.21
	 * 
	 * Value of controller is set to 0 if no speech animation playback viseme is playing back
	 * otherwise the value is set to 1.
	 * 
	 * Default controller name is "speaking".
	 */
	func void setControllerNameSpeaking(String name)
		if name == null
			throw ENullPointer.new()
		end
		pControllerNameSpeaking = name
		pControllerSpeaking = pAnimatorInstance.getControllerNamed(name)
	end
	
	/**
	 * \brief Speech animation to use to update speaking controller or null.
	 * \version 1.21
	 */
	func SpeechAnimationPlayback getSpeechAnimationPlayback()
		return pSpeechAnimationPlayback
	end
	
	/**
	 * \brief Set speech animation to use to update speaking controller or null.
	 * \version 1.21
	 */
	func void setSpeechAnimationPlayback(SpeechAnimationPlayback playback)
		pSpeechAnimationPlayback = playback
	end
	
	
	
	/** \brief Remove all face poses. */
	func void removeAllPoses()
		pPoses.removeAll()
		pPosition = 0
		pElapsed = 0
		pRunning = false
	end
	
	/**
	 * \brief Add face pose.
	 * \param controllers Array of FacePoseController.
	 * \param strip Strip to play.
	 */
	func void addPose(Array controllers, ConversationStrip strip)
		pPoses.add(FacePose.new(controllers, strip))
		pPosition = 0
		pElapsed = 0
		pRunning = true
	end
	
	
	
	/**
	 * \brief Update playback.
	 * 
	 * This updates the playback and updates animator instances if required. This does not
	 * apply the animation yet to allow proper use of state capturing.
	 */
 	func void update(float elapsed)
		var float blendFactor1 = 0
		var float blendFactor2 = 1
		
		pRequiresApply = false
		
		if pRunning and pPoses.getCount() > 0
			var int poseCount = pPoses.getCount()
			
			pElapsed += elapsed
			
			while pPosition < poseCount
				var FacePose pbpose = pPoses.getAt(pPosition) cast FacePose
				var ConversationStrip strip = pbpose.getStrip()
				var Array pcontrollers = pbpose.getControllers()
				var float duration = strip.getDuration()
				var float pause = strip.getPause()
				var float length = pause + duration
				
				if pElapsed < length
					if pcontrollers != pCurPose
						pLastPose = pCurPose
						pCurPose = pcontrollers
					end
					
					blendFactor2 = DEMath.smoothStep(pElapsed, pause, length)
					blendFactor1 = 1.0 - blendFactor2
					break
					
				else
					pLastPose = pCurPose
					pCurPose = pcontrollers
					
					pElapsed -= length
					pPosition++
				end
			end
			
			if pPosition >= poseCount
				pRunning = false
			end
		end
		
		if pAnimator == null
			return
		end
		
		// set the controller values. for this first all controllers are set to zero. then
		// the controller values of the last face pose (if existing) multiplied by the
		// first blend factor are set. then the controller values of the current face pose
		// (if existing) multiplied by the second blend factor are added. this way a proper
		// blending can be achieved no matter which combination of face poses (as well as
		// the lack thereof) is in effect
		var int controllerCount = pAnimatorInstance.getControllerCount()
		var int i
		
		for i = 0 to controllerCount
			pAnimatorInstance.getControllerAt(i).setValue(0)
		end
		
		if pLastPose != null
			pLastPose.forEach(block FacePoseController each
				if each.getControllerName() != null
					var AnimatorController controller = pAnimatorInstance.getControllerNamed(each.getControllerName())
					if controller != null
						controller.setValue(each.getInfluence() * blendFactor1)
					end
					
				else // deprecated
					var int controller = each.getController()
					if controller >= 0 and controller < controllerCount
						pAnimatorInstance.getControllerAt(controller).setValue(each.getInfluence() * blendFactor1)
					end
				end
			end)
		end
		
		if pCurPose != null
			pCurPose.forEach(block FacePoseController each
				if each.getControllerName() != null
					var AnimatorController controller = pAnimatorInstance.getControllerNamed(each.getControllerName())
					if controller != null
						controller.increment(each.getInfluence() * blendFactor2)
					end
					
				else // deprecated
					var int controller = each.getController()
					if controller >= 0 and controller < controllerCount
						pAnimatorInstance.getControllerAt(controller).increment(each.getInfluence() * blendFactor2)
					end
				end
			end)
		end
		
		// blinking
		pBlinkNext -= elapsed
		pBlinkElapsed += elapsed
		
		if pBlinkNext <= 0
			pBlinkNext = DEMath.random(pBlinkIntervalMin, pBlinkIntervalMax)
			pBlinkElapsed = 0
		end
		
		if controllerCount > 0
			pAnimatorInstance.getControllerAt(controllerCount - 1).setValue(pBlinkElapsed)
		end
		
		// speaking
		if pControllerSpeaking != null and pSpeechAnimationPlayback != null
			pControllerSpeaking.setValue(pSpeechAnimationPlayback.getSpeakBlend())
		end
		
		pRequiresApply = true
	end
	
	/**
	 * \brief Apply animation.
	 * 
	 * Called after update() to apply animation. Can do nothing if no change has been done.
	 */
	func void applyAnimation()
		if pRequiresApply
			pAnimatorInstance.apply()
		end
	end
	
	
	
	/**
	 * \brief Read from file.
	 * 
	 * Animator and AnimatorInstance are not stored. They have to be set by the ConversationActor.
	 */
	func void readFromFile(PersistencyEnvironment env, FileReader reader)
		select reader.readByte() // version
		case 0
			var PersistencyFlags flags = PersistencyFlags.new(3, reader)
			pRunning = flags.getAt(0)
			
			var int i, count = reader.readUShort()
			pPoses.removeAll()
			for i = 0 to count
				pPoses.add(FacePose.readFromFile(reader))
			end
			
			pPosition = reader.readUShort()
			pElapsed = reader.readFloat()
			
			if flags.getAt(1)
				pLastPose = FacePose.readControllersFromFile(reader)
			end
			if flags.getAt(2)
				pCurPose = FacePose.readControllersFromFile(reader)
			end
			
			pBlinkIntervalMin = reader.readFloat()
			pBlinkIntervalMax = reader.readFloat()
			pBlinkNext = reader.readFloat()
			pBlinkElapsed = reader.readFloat()
			
		else
			throw EInvalidParam.new("unsupported version")
		end
	end
	
	/**
	 * \brief Writes to file.
	 * 
	 * Animator and AnimatorInstance are not stored. They have to be set by the ConversationActor.
	 */
	func void writeToFile(PersistencyEnvironment env, FileWriter writer)
		writer.writeByte(0) // version
		
		var PersistencyFlags flags = PersistencyFlags.new(3)
		flags.setAt(0, pRunning)
		flags.setAt(1, pLastPose != null)
		flags.setAt(2, pCurPose != null)
		flags.writeToFile(writer)
		
		writer.writeUShort(pPoses.getCount())
		pPoses.forEach(block FacePose each
			each.writeToFile(writer)
		end)
		
		writer.writeUShort(pPosition)
		writer.writeFloat(pElapsed)
		
		if pLastPose != null
			FacePose.writeControllersToFile(writer, pLastPose)
		end
		if pCurPose != null
			FacePose.writeControllersToFile(writer, pCurPose)
		end
		
		writer.writeFloat(pBlinkIntervalMin)
		writer.writeFloat(pBlinkIntervalMax)
		writer.writeFloat(pBlinkNext)
		writer.writeFloat(pBlinkElapsed)
	end
end
