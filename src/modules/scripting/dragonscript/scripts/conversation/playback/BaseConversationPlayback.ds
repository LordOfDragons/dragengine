/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

namespace Dragengine.ConversationSystem

pin Dragengine.CameraDirectors
pin Dragengine.Commands
pin Dragengine.Gui
pin Dragengine.LoadSave
pin Dragengine.Scenery
pin Dragengine.TriggerSystem
pin Dragengine.Utils


/**
 * \brief Conversation playback for use with BaseGameApp.
 * 
 * \par Game Commands/Conditions (1.4)
 * 
 * Provides support to define game command and game conditions. Commands received by the
 * conversation scripts are parsed using CommandLineParser. The first argument is used to
 * look up the command or condition to apply. This allows game scripts to register command
 * and condition handlers without needing two overwrite gameCommand() or conditionGameCommand().
 */
class BaseConversationPlayback extends ConversationPlayback
	/**
	 * \brief Conversation command.
	 * \version 1.4
	 */
	interface ConversationCommand
		/**
		 * \brief Conversation command.
		 * \param arguments. Array of String tokens parsed from send command.
		 */
		func void runCommand(BaseConversationPlayback playback, Array arguments)
	end
	
	/**
	 * \brief Conversation condition.
	 * \version 1.4
	 */
	interface ConversationCondition
		/**
		 * \brief Evaluate conversation condition.
		 * \param arguments. Array of String tokens parsed from send command.
		 */
		func bool evaluateCondition(BaseConversationPlayback playback, Array arguments)
	end
	
	/** \brief Factory for loading. */
	class Factory implements PersistencyFactory
		public static fixed var String NAME = "BaseConversationPlayback"
		
		func new()
		end
		
		func Persistable readObjectFromFile(PersistencyEnvironment env, FileReader reader)
			var BaseConversationPlayback playback = BaseConversationPlayback.new(env, reader)
			playback.readDelayedFromFile(env, reader)
			return playback
		end
		
		static func void registerFactory(Persistency persistency)
			persistency.addFactory(NAME, Factory.new())
		end
	end
	
	
	var CommandLineParser pCommandParser
	var Dictionary pCommands
	var Dictionary pConditions
	
	var ECBehaviorPlayerControllable.Tracker pPlayerControlledActor
	var InputProcessor pInputProcessor
	
	var CameraDirector pRestoreCameraDirector
	var InputProcessor pRestoreInputProcessor
	
	
	/** \brief Create conversation playback. */
	func new(Conversation conversation) \
	this(conversation, BaseGameApp.getApp().getPlayerControlledActor())
	end
	
	/** \brief Create conversation playback. */
	func new(Conversation conversation, ECBehaviorPlayerControllable.Tracker playerControlledActor) \
	super(conversation)
		pPlayerControlledActor = playerControlledActor
		initShared()
	end
	
	/**
	 * \brief Read from file.
	 * 
	 * This call loads only data not accessing subclass implemented methods.
	 * To finish loading call readRemainingFromFile().
	 * 
	 * These objects are not persisted. Subclass is responsible to set them.
	 * - CameraDirector
	 * - SubTitle
	 * - pPlayerChoice
	 */
	func new(PersistencyEnvironment env, FileReader reader)\
	this(env, reader, BaseGameApp.getApp().getPlayerControlledActor())
	end
	
	func new(PersistencyEnvironment env, FileReader reader,\
	ECBehaviorPlayerControllable.Tracker playerControlledActor) super(env, reader)
		pPlayerControlledActor = playerControlledActor
		initShared()
	end
	
	private func void initShared()
		pCommandParser = CommandLineParser.new()
		pCommands = Dictionary.new()
		pConditions = Dictionary.new()
		setSubTitle(BaseGameApp.getApp().getWindowSubTitle())
		setPlayerChoice(BaseGameApp.getApp().getWindowPlayerChoice())
		setCameraDirector(createCameraDirector())
		pInputProcessor = createInputProcessor()
	end
	
	/** \brief Dispose of conversation playback. */
	func void dispose()
		super.dispose()
		
		pPlayerControlledActor = null
		pInputProcessor = null
		pRestoreCameraDirector = null
		pRestoreInputProcessor = null
		pConditions = null
		pCommands = null
	end
	
	
	/** \brief Player controlled actor. */
	func ECBehaviorPlayerControllable.Tracker getPlayerControlledActor()
		return pPlayerControlledActor
	end
	
	/** \brief Input processor or \em null to not change. */
	func InputProcessor getInputProcessor()
		return pInputProcessor
	end
	
	/** \brief Set input processor or \em null to not change. */
	func void setInputProcessor(InputProcessor inputProcessor)
		pInputProcessor = inputProcessor
	end
	
	
	/**
	 * \brief Command parser.
	 * \version 1.4
	 */
	func CommandLineParser getCommandParser()
		return pCommandParser
	end
	
	/**
	 * \brief Set command parser.
	 * \version 1.4
	 */
	func void setCommandParser(CommandLineParser parser)
		if parser == null
			throw EInvalidParam.new()
		end
		pCommandParser = parser
	end
	
	
	/**
	 * \brief Count of conversation commands.
	 * \version 1.4
	 */
	func int getCommandCount()
		return pCommands.getCount()
	end
	
	/**
	 * \brief Supported command names as Array of String.
	 * \version 1.4
	 */
	func Array getCommandNames()
		return pCommands.getKeys()
	end
	
	/**
	 * \brief Named command or null if absent.
	 * \version 1.4
	 */
	func ConversationCommand getCommandNamed(String name)
		return pCommands.getAt(name, null) cast ConversationCommand
	end
	
	/**
	 * \brief Add command replacing command with same name if present.
	 * \version 1.4
	 */
	func void addCommand(String name, ConversationCommand command)
		if name == null or command == null
			throw EInvalidParam.new()
		end
		pCommands.setAt(name, command)
	end
	
	
	/**
	 * \brief Count of conversation condition.
	 * \version 1.4
	 */
	func int getConditionCount()
		return pConditions.getCount()
	end
	
	/**
	 * \brief Supported condition names as Array of String.
	 * \version 1.4
	 */
	func Array getConditionNames()
		return pConditions.getKeys()
	end
	
	/**
	 * \brief Named condition or null if absent.
	 * \version 1.4
	 */
	func ConversationCondition getConditionNamed(String name)
		return pConditions.getAt(name, null) cast ConversationCondition
	end
	
	/**
	 * \brief Add condition replacing condition with same name if present.
	 * \version 1.4
	 */
	func void addCondition(String name, ConversationCondition condition)
		if name == null or condition == null
			throw EInvalidParam.new()
		end
		pConditions.setAt(name, condition)
	end
	
	
	/** \brief Set conversation topic. */
	func void setTopic(String idTopicGroup, String idTopic)
		var Conversation conversation = getConversation()
		
		var ConversationTopicGroup topicGroup = conversation.getTopicGroupWithID(\
			StringID.new(idTopicGroup))
		if topicGroup == null
			BaseGameApp.getApp().getConsole().addMessage(\
				"BaseConversationPlayback.setTopic: Not found '" + idTopicGroup + "' => '" + idTopic)
			throw EInvalidParam.new()
		end
		
		var ConversationTopic topic = topicGroup.getTopicWithID(StringID.new(idTopic))
		
		if topic == null
			BaseGameApp.getApp().getConsole().addMessage(\
				"BaseConversationPlayback.setTopic: Not found '" + idTopicGroup + "' => '" + idTopic)
			throw EInvalidParam.new()
		end
		
		setTopic(topicGroup, topic)
	end
	
	/** \brief Add actor controlled by player with alias "player". */
	func void addPlayerActor()
		addPlayerActor(StringID.new("player"))
	end
	
	/** \brief Add actor controlled by player. */
	func void addPlayerActor(StringID alias)
		addActor(ECBehaviorConversationActor.getInstanceIn(\
			pPlayerControlledActor.getActor().getElement()), alias)
	end
	
	/** \brief Add actor. */
	func void addActor(BaseActor actor, StringID alias)
		addActor(actor.getConversationActor(), alias)
	end
	
	/** \brief Add actor. */
	func void addActor(ECBehaviorConversationActor.Instance actor, StringID alias)
		addActor(actor.getConversationActor(), alias)
	end
	
	
	/**
	 * \brief Get actor matching conversation identifier.
	 * 
	 * This is used by readFromFile to add actors for playing back the conversation.
	 * Subclass to return the actors matching a conversation identifier.
	 * 
	 * Default implementation looks up the identifier in the getConvoActorList() from
	 * the current GameWorld loaded into WindowGameWorld of BaseGameApp.
	 */
	func ConversationActor loadConversationActor(StringID id)
		return BaseGameApp.getApp().getWindowGameWorld().getGameWorld() \
			.getConvoActorList().getAt(id)
	end
	
	/**
	 * \brief Create coordinate system matching conversation identifier.
	 * 
	 * This is used to add coordinate system for playing back the conversation. Subclass to
	 * create the coordinate system matching a conversation identifier.
	 * 
	 * Default implementation looks up the identifier in the getConvoCoordSystemList() from
	 * the current GameWorld loaded into WindowGameWorld of BaseGameApp.
	 */
	func ConversationCoordSystem createConversationCoordSystem(StringID id)
		return BaseGameApp.getApp().getWindowGameWorld().getGameWorld() \
			.getConvoCoordSystemList().getAt(id)
	end
	
	/** \brief Trigger table to use. */
	func TSTriggerTable getTriggerTable()
		return BaseGameApp.getApp().getTriggerTable()
	end
	
	/**
	 * \brief Game command send by the conversation script.
	 * 
	 * Parses command using CommandLineParser into Array of String and calls runCommand()
	 */
	func void gameCommand(String command)
		runCommand(pCommandParser.parseCommand(command))
	end
	
	/**
	 * \brief Game command send by the conversation script.
	 * \version 1.4
	 * 
	 * Looks up command to run using first argument. If found runs command using arguments.
	 * Otherwise throws an exception.
	 */
	func void runCommand(Array arguments)
		if arguments.getCount() == 0
			throw EInvalidParam.new("arguments is empty")
		end
		
		var String name = arguments.getAt(0) cast String
		var ConversationCommand command = pCommands.getAt(name, null) cast ConversationCommand
		if command == null
			throw EInvalidParam.new("Command with name '" + name + "' not found")
		end
		
		command.runCommand(this, arguments)
	end
	
	/**
	 * \brief Game condition command send by the conversation script.
	 * 
	 * Parses command using CommandLineParser into Array of String and calls evaluateCondition()
	 */
	func bool conditionGameCommand(String command)
		return evaluateCondition(pCommandParser.parseCommand(command))
	end
	
	/**
	 * \brief Game condition command send by the conversation script.
	 * \version 1.4
	 * 
	 * Looks up condition to evaluate using first argument. If found evaluates condition
	 * using arguments. Otherwise throws an exception.
	 */
	func bool evaluateCondition(Array arguments)
		if arguments.getCount() == 0
			throw EInvalidParam.new("arguments is empty")
		end
		
		var String name = arguments.getAt(0) cast String
		var ConversationCondition condition = pConditions.getAt(name, null) cast ConversationCondition
		if condition == null
			throw EInvalidParam.new("Condition with name '" + name + "' not found")
		end
		
		return condition.evaluateCondition(this, arguments)
	end
	
	
	/**
	 * \brief Conversation started hook method.
	 * 
	 * Called if running state changed to true after sending notifications to listeners.
	 */
	func void onConversationStarted()
		var ConversationCameraDirector director = getCameraDirector()
		
		if director != null
			var WindowGameWorld window = BaseGameApp.getApp().getWindowGameWorld()
			pRestoreCameraDirector = window.getCameraDirector()
			window.setCameraDirector(director)
		end
		
		if pInputProcessor != null
			pRestoreInputProcessor = BaseGameApp.getApp().getInputProcessor()
			BaseGameApp.getApp().setInputProcessor(pInputProcessor)
		end
	end
	
	/**
	 * \brief Conversation stopped hook method.
	 * 
	 * Called if running state changed to false after sending notifications to listeners.
	 */
	func void onConversationStopped()
		removeAllActors()
		
		if pRestoreCameraDirector != null
			BaseGameApp.getApp().getWindowGameWorld().setCameraDirector(pRestoreCameraDirector)
		end
		
		if pRestoreInputProcessor != null
			BaseGameApp.getApp().setInputProcessor(pRestoreInputProcessor)
		end
		
		dispose()
	end
	
	
	/**
	 * \brief Create camera director or \em null to keep the current one.
	 * 
	 * Default implementation creates instance of .
	 */
	protected func ConversationCameraDirector createCameraDirector()
		var WindowGameWorld window = BaseGameApp.getApp().getWindowGameWorld()
		return ConversationCameraDirector.new(window.getCamera(), window.getMicrophone())
	end
	
	/**
	 * \brief Create input processor or \em null to keep the current one.
	 * 
	 * Default implementation creates instance of ConversationInputProcessor.
	 */
	protected func InputProcessor createInputProcessor()
		var ConversationInputProcessor inputProcessor = ConversationInputProcessor.new(this)
		inputProcessor.setBindingManager(BaseGameApp.getApp().getBindingManager())
		return inputProcessor
	end
	
	
	/**
	 * \brief Name of PersistencyFactory required to load object from file.
	 * 
	 * Name of PersistencyFactory is first written to the file as string with
	 * 8-bit length. Then writeToFile() is called to write the object itself.
	 * Empty name is not allowed as is names longer than 255 characters.
	 * Name has to match a PersistencyFactory present in the Persistency
	 * instance used for loading objects. Object is read using
	 * PersistencyFactory.readObjectFromFile() of the matching PersistencyFactory.
	 */
	func String persistencyFactoryName()
		return Factory.NAME
	end
end
