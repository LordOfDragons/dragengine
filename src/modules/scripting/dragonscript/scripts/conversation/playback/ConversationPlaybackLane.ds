/*
 * MIT License
 *
 * Copyright (C) 2025, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

namespace Dragengine.ConversationSystem
pin Dragengine.LoadSave

/**
 * \brief Conversation playback lane.
 * \version 1.28
 */
class ConversationPlaybackLane
	var Array pLayers
	var bool pActionWaiting
	var float pActionTime
	var bool pIsMainLane
	
	
	/** \brief Create conversation playback lane. */
	func new(bool isMainLane)
		pLayers = Array.new()
		pIsMainLane = isMainLane
	end
	
	/** \brief Create conversation playback lane with layer. */
	func new(bool isMainLane, ConversationPlaybackLayer layer) this(isMainLane)
		pushLayer(layer)
	end
	
	/** \brief Load conversation playback lane from file. */
	func new(PersistencyEnvironment env, FileReader reader, bool isMainLane) this(isMainLane)
		select reader.readByte()
		case 0
			var PersistencyFlags flags = PersistencyFlags.new(1, reader)
			pActionWaiting = flags.getAt(0)
			
			pActionTime = reader.readFloat()
			
			var int i, count = reader.readUShort()
			for i = 0 to count
				pLayers.add(ConversationPlaybackLayer.readFromFile(env, reader))
			end
			
		else
			throw EInvalidParam.new("unsupported version")
		end
	end
	
	
	/** \brief Lane is main lane. */
	func bool isMainLane()
		return pIsMainLane
	end
	
	/** \brief Waiting for action to begin. */
	func bool getWaitingForAction()
		return pActionWaiting
	end
	
	/** \brief Set waiting for action to begin. */
	func void setWaitingForAction(bool waiting)
		pActionWaiting = waiting
	end
	
	/** \brief Elapsed action waiting time in seconds. */
	func float getElapsedActionWaiting()
		return pActionTime
	end
	
	/** \brief Set elapsed action waiting time in seconds. */
	func void setElapsedActionWaiting(float time)
		pActionTime = time
	end
	
	
	/** \brief Count of layers. */
	func int getLayerCount()
		return pLayers.getCount()
	end
	
	/** \brief Layer at index where index is counted from the top. */
	func ConversationPlaybackLayer getLayerAt(int index)
		return pLayers.getAt(pLayers.getCount() - 1 - index) cast ConversationPlaybackLayer
	end
	
	/** \brief Top layer. */
	func ConversationPlaybackLayer getTopLayer()
		return pLayers.getAt(pLayers.getCount() - 1) cast ConversationPlaybackLayer
	end
	
	/** \brief Push layer to top of stack. */
	func void pushLayer(ConversationPlaybackLayer layer)
		if layer == null
			throw ENullPointer.new("layer")
		end
		pLayers.add(layer)
	end
	
	/** \brief Pop top layer off stack. */
	func void popLayer()
		pLayers.removeFrom(pLayers.getCount() - 1)
	end
	
	/** \brief Next action is present. */
	func bool hasNextAction()
		return pLayers.getCount() > 0 and getTopLayer().hasNextAction()
	end
	
	/** \brief Next action or \em null if top layer is finished. */
	func ConversationAction getNextAction()
		return hasNextAction() if getTopLayer().getNextAction() else null
	end
	
	/** \brief Remove all layers. */
	func void removeAllLayers()
		pLayers.removeAll()
	end
	
	/** \brief Clear. */
	func void clear()
		pLayers.removeAll()
		pActionTime = 0
		pActionWaiting = true
	end
	
	
	/**
	 * \brief Process actions.
	 * \warning Call only if lane is the active lane.
	 */
	func void processActions(ConversationPlayback playback, float elapsed, bool skipDelay)
		// loop until there are no more actions able to be processed in elapsed time
		var ConversationPlaybackLayer layer
		var ConversationCondition condition
		var ConversationAction action
		var int i
		
		while true
			action = null
			
			// check if any stack entry upwards contains a condition evaluating to false. in
			// this case all actions up to this level are cancelled. in particular this means
			// if two looping conditions are nested and the outer condition becomes false then
			// control passes outside the outer layer. this also means top-level layer
			// boundaries are skiped so be careful how you nest conditional loops
			for i = pLayers.getCount() - 1 downto 0
				layer = pLayers.getAt(i) cast ConversationPlaybackLayer
				
				condition = layer.getLoopCondition()
				if condition != null and not condition.evaluate(playback)
					layer.cancelLooping()
					pLayers.resize(i + 1)
					pActionTime = 0
					pActionWaiting = true
					break
				end
			end
			
			// determine the next action
			if pLayers.getCount() > 0
				layer = getTopLayer()
				action = getTopLayer().getNextAction()
				
				// special case. it is possible the stack entry is looping but contains no actions.
				// in this case skip processing until a change comes from the outside world
				if action == null and layer.getLooping()
					return
				end
			end
			
			// if there is a next action process it
			if action != null
				// check for waiting conditions
				if pActionWaiting
					if action.getWaitForActor()
						var bool notDone, useActorWait = not action.getWaitSpeakOnly()
						
						if action.getWaitForActorID() != null
							var ConversationActor actor = playback.getActorMatching(\
								StringID.new(action.getWaitForActorID()))
							if actor != null
								notDone = actor.isSpeaking() or (useActorWait and actor.wait())
							end
							
						else
							notDone = playback.findActor(block ConversationActor each
								return each.isSpeaking() or (useActorWait and each.wait())
							end) != null
						end
						
						if notDone
							return
						end
					end
					
					pActionWaiting = false
				end
				
				// wait the delay time then process the action
				if skipDelay
					pActionTime = action.getDelay()
					
				else
					pActionTime += elapsed
				end
				
				if pActionTime >= action.getDelay()
					action.execute(playback)
					pActionTime = 0
					pActionWaiting = true
					
				else
					return // end the loop
				end
				
			// if there is no next action this can be either because a looping action has no actions or
			// we actually arrive at the end of the conversation.
			else
				if pLayers.getCount() > 1
					// looping action without actions. advance to the next action in the stack below
					advanceToNextAction(playback)
					
				else
					// end of conversation. wait for all actors to be done speaking and exit the loop
					var bool notDone = false
					
					notDone = (playback.findActor(block ConversationActor each
						return each.isSpeaking()
					end) != null)
					
					if not notDone and pIsMainLane
						playback.setRunning(false)
					end
					
					return
				end
			end
		end
	end
	
	/**
	 * \brief Advance to next action.
	 * \warning Call only if lane is the active lane.
	 */
	func void advanceToNextAction(ConversationPlayback playback)
		if pLayers.getCount() == 0
			if pIsMainLane
				if playback.getTopic() == null
					playback.setRunning(false)
					
				else
					var ConversationPlaybackLayer layer = ConversationPlaybackLayer.new(\
						playback.getTopic().getIteratorActions())
					layer.setTopicTopLevel(true)
					pLayers.add(layer)
				end
				
			else
				playback.removeSideLane(this)
			end
			
		else
			while true
				var ConversationPlaybackLayer layer = getTopLayer()
				
				layer.advance()
				
				if layer.hasNextAction()
					pActionWaiting = true
					pActionTime = 0
					break
				end
				
				if pLayers.getCount() < 2
					break
				end
				
				popLayer()
			end
		end
	end
	
	/**
	 * \brief Cancel looping layer removing all layers below.
	 * \warning Call only if lane is the active lane.
	 */
	func void cancelLoopingLayer(ConversationPlaybackLayer layer)
		var int i
		for i = pLayers.getCount() - 1 downto 0
			if pLayers.getAt(i) == layer
				layer.cancelLooping()
				pLayers.resize(i + 1)
				pActionTime = 0
				pActionWaiting = true
				return
			end
		end
		throw EInvalidParam.new("Layer absent")
	end
	
	
	/** \brief Write lane to file. */
	func void writeToFile(PersistencyEnvironment env, FileWriter writer)
		writer.writeByte(0)
		
		var PersistencyFlags flags = PersistencyFlags.new(1)
		flags.setAt(0, pActionWaiting)
		flags.writeToFile(writer)
		
		writer.writeFloat(pActionTime)
		
		writer.writeUShort(pLayers.getCount())
		pLayers.forEach(block ConversationPlaybackLayer each
			each.writeToFile(env, writer)
		end)
	end
end
