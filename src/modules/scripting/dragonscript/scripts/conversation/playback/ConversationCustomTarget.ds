/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */


namespace Dragengine.ConversationSystem

pin Dragengine.Scenery
pin Dragengine.LoadSave



/**
 * \brief Custom conversation target.
 * 
 * Used for ConversationPlaybackLookAt. Provides a subclassable custom target
 * for use by scripts outside conversation playback. ConversationTarget can
 * only be used during a conversation. ConversationCustomTarget on the other
 * hand can be added to ConversationLookAtPlayback any time. This allows to
 * use the playback also for non-conversation use simplify game design.
 * Subclass is responsible for registering its own PersistencyFactory.
 */
class ConversationCustomTarget implements Persistable
	/** \brief Factory for loading actor actions. */
	public class Factory implements PersistencyFactory
		public static fixed var String NAME = "ConversationCustomTarget"
		
		public func new()
		end
		
		public func Persistable readObjectFromFile( PersistencyEnvironment env, FileReader reader )
			return ConversationCustomTarget.new( env, reader )
		end
		
		public static func void registerFactory( Persistency persistency )
			persistency.addFactory( NAME, Factory.new() )
		end
	end
	
	
	
	/** \brief Local matrix. */
	private var DMatrix pLocalMatrix
	
	
	
	/** \brief Create custom conversation target. */
	public func new( DMatrix localMatrix )
		if localMatrix == null
			throw EInvalidParam.new()
		end
		this.pLocalMatrix = localMatrix
	end
	
	/** \brief Read from file. */
	public func new( PersistencyEnvironment env, FileReader reader )
		select reader.readByte() // version
		case 0
			this.pLocalMatrix = DMatrix.readFromFile( reader )
			
		else
			throw EInvalidParam.new( "unsupported version" )
		end
	end
	
	/** \brief Dispose of custom conversation target breaking cyclic references. */
	public func void dispose()
	end
	
	
	
	/** \brief Local matrix. */
	public func DMatrix getLocalMatrix()
		return this.pLocalMatrix
	end
	
	/** \brief Set local matrix. */
	public func void setLocalMatrix( DMatrix matrix )
		if matrix == null
			throw EInvalidParam.new()
		end
		this.pLocalMatrix = matrix
	end
	
	
	
	/**
	 * \brief Calculate target matrix.
	 * 
	 * Override in subclass to calculate the matrix to use for look-at calculation.
	 * The default implementation returns the local matrix.
	 */
	public func DMatrix getMatrix()
		return this.pLocalMatrix
	end
	
	
	
	/**
	 * \brief Name of PersistencyFactory required to load object from file.
	 * 
	 * Name of PersistencyFactory is first written to the file as string with
	 * 8-bit length. Then writeToFile() is called to write the object itself.
	 * Empty name is not allowed as is names longer than 255 characters.
	 * Name has to match a PersistencyFactory present in the Persistency
	 * instance used for loading objects. Object is read using
	 * PersistencyFactory.readObjectFromFile() of the matching PersistencyFactory.
	 */
	public func String persistencyFactoryName()
		return Factory.NAME
	end
	
	/** \brief Write object to file writer. */
	public func void writeObjectToFile( PersistencyEnvironment env, FileWriter writer )
		writer.writeByte( 0 ) // version
		
		this.pLocalMatrix.writeToFile( writer )
	end
end
