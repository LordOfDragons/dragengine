/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */


namespace Dragengine.Preloading

pin Dragengine.Gui
pin Dragengine.LoadSave
pin Dragengine.Networking
pin Dragengine.Scenery
pin Dragengine.Utils


/**
 * \brief Stub for an element.
 * 
 * Used during asynchronous loading to hold the settings of an element until all resources
 * have been loaded. The network connection parameters are present only during creation
 * time and are not persisted.
 */
class StubElement extends StubWithProperties
	var ElementClass pClass
	var DVector pPosition
	var Vector pRotation, pScaling
	var Array pTextures
	var UniqueID pID, pAttachTo
	var PreloadCounter pCounter
	var Connection pConnection
	var NetworkState pNetworkState
	var bool pEnableNetworking
	var DMatrix pMatrix
	var Array pAddAttachableBehaviors
	
	
	/** \brief Create element stub. */
	func new(ElementClass eclass) this(eclass, UniqueID.new())
	end
	
	/** \brief Create element stub. */
	func new(ElementClass eclass, UniqueID id)
		if eclass == null or id == null
			throw EInvalidParam.new()
		end
		
		pClass = eclass
		pPosition = DVector.new()
		pRotation = Vector.new()
		pScaling = Vector.new(1, 1, 1)
		pTextures = Array.new()
		pID = id
		pEnableNetworking = false
		pAddAttachableBehaviors = Array.new()
	end
	
	/** \brief Create element stub. */
	func new(ElementClass eclass, UniqueID id, StubWithProperties properties) this(eclass, id)
		setFrom(properties)
	end
	
	/** \brief Create copy of element stub. */
	func new(StubElement stub) super(stub)
		pClass = stub.pClass
		pPosition = stub.pPosition
		pRotation = stub.pRotation
		pScaling = stub.pScaling
		pTextures = stub.pTextures.map(block StubElementTexture each
			return StubElementTexture.new(each)
		end)
		pID = stub.pID
		pAttachTo = stub.pAttachTo
		pEnableNetworking = stub.pEnableNetworking
		pAddAttachableBehaviors = Array.new(stub.pAddAttachableBehaviors)
	end
	
	
	
	/** \brief Set counter. */
	func void setCounter(PreloadCounter counter)
		pCounter = counter
		
		pTextures.forEach(block StubElementTexture each
			each.setCounter(counter)
		end)
	end
	
	/** \brief Element class. */
	func ElementClass getClass()
		return pClass
	end
	
	/** \brief Set element class. */
	func void setClass(ElementClass elementClass)
		if elementClass == null
			throw EInvalidParam.new()
		end
		pClass = elementClass
	end
	
	/** \brief Position. */
	func DVector getPosition()
		return pPosition
	end
	
	/** \brief Set position. */
	func void setPosition(DVector position)
		if position == null
			throw EInvalidParam.new()
		end
		pPosition = position
		pMatrix = null
	end
	
	/** \brief Rotation. */
	func Vector getRotation()
		return pRotation
	end
	
	/** \brief Set rotation. */
	func void setRotation(Vector rotation)
		if rotation == null
			throw EInvalidParam.new()
		end
		pRotation = rotation
		pMatrix = null
	end
	
	/** \brief Scaling if sizable. */
	func Vector getScaling()
		return pScaling
	end
	
	/** \brief Set scaling if sizable. */
	func void setScaling(Vector scaling)
		if scaling == null
			throw EInvalidParam.new()
		end
		pScaling = scaling
		pMatrix = null
	end
	
	/**
	 * \brief Stub matrix.
	 * \version 1.23
	 */
	func DMatrix getMatrix()
		if pMatrix == null
			pMatrix = DMatrix.newSRT(DVector.new(pScaling), DVector.new(pRotation), pPosition)
		end
		return pMatrix
	end
	
	/** \brief Unique identifier of object. */
	func UniqueID getID()
		return pID
	end
	
	/** \brief Set unique identifier of object. */
	func void setID(UniqueID id)
		if id == null
			throw EInvalidParam.new()
		end
		pID = id
	end
	
	/** \brief Identifier of object to attach to once added to a game world. */
	func UniqueID getAttachTo()
		return pAttachTo
	end
	
	/** \brief Set dentifier of object to attach to once added to a game world. */
	func void setAttachTo(UniqueID id)
		pAttachTo = id
	end
	
	
	
	/** \brief Connection to server or or \em null. */
	func Connection getConnection()
		return pConnection
	end
	
	/** \brief Set connection to server or \em null. */
	func void setConnection(Connection connection)
		pConnection = connection
	end
	
	/** \brief Network state provided by server or \em null. */
	func NetworkState getNetworkState()
		return pNetworkState
	end
	
	/** \brief Set network state provided by server or \em null. */
	func void setNetworkState(NetworkState networkState)
		pNetworkState = networkState
	end
	
	/** \brief Enable networking for this stub. */
	func bool getEnableNetworking()
		return pEnableNetworking
	end
	
	/** \brief Set if networking is enabled for this stub. */
	func void setEnableNetworking(bool enable)
		pEnableNetworking = enable
	end
	
	
	
	/** \brief Number of textures. */
	func int getTextureCount()
		return pTextures.getCount()
	end
	
	/** \brief Texture at index. */
	func StubElementTexture getTextureAt(int index)
		return pTextures.getAt(index) cast StubElementTexture
	end
	
	/** \brief Named texture or null if not found. */
	func StubElementTexture getTextureNamed(String name)
		return pTextures.find(block StubElementTexture each
			return each.getTextureName().equals(name)
		end) cast StubElementTexture
	end
	
	/** \brief Add texture. */
	func void addTexture(StubElementTexture texture)
		if texture == null
			throw EInvalidParam.new()
		end
		texture.setCounter(pCounter)
		pTextures.add(texture)
	end
	
	/** \brief Visit textures with a block. */
	func void forEachTexture(Block ablock)
		pTextures.forEach(ablock)
	end
	
	/**
	 * \brief Remove texture.
	 * \version 1.23
	 */
	func void removeTexture(StubElementTexture texture)
		pTextures.remove(texture)
	end
	
	/**
	 * \brief Remove all textures.
	 * \version 1.23
	 */
	func void removeAllTextures()
		pTextures.removeAll()
	end
	
	
	/**
	 * \brief Add attachable behavior.
	 * \version 1.29
	 */
	func void addAttachableBehavior(String factoryId)
		if factoryId == null
			throw ENullPointer.new()
		end
		pAddAttachableBehaviors.add(factoryId)
	end
	
	/**
	 * \brief Remove attachable behavior.
	 * \version 1.29
	 */
	func void removeAttachableBehavior(String factoryId)
		pAddAttachableBehaviors.remove(factoryId)
	end
	
	/**
	 * \brief Remove all attachable behaviors.
	 * \version 1.29
	 */
	func void removeAllAttachableBehaviors()
		pAddAttachableBehaviors.removeAll()
	end
	
	/**
	 * \brief Visit attachable behaviors using block.
	 * \version 1.29
	 * 
	 * Block has signature (\ref String) or (\ref int, \ref String).
	 */
	func void forEachAttachableBehavior(Block ablock)
		pAddAttachableBehaviors.forEach(ablock)
	end
	
	
	/** \brief Preload resources. */
	func void preloadResources()
		pTextures.forEach(block StubElementTexture each
			each.preloadResources()
		end)
	end
	
	/**
	 * \brief Verify if a resource failed preloading and print the problems to the console.
	 * \returns \em true if all resources loaded successfully.
	 */
	func bool verifyPreloading(Console console)
		return pTextures.inject(true, block bool success, StubElementTexture each
			return each.verifyPreloading(this, console) & success
		end) cast bool
	end
	
	/** \brief Load resources. */
	func void loadResources()
		pTextures.forEach(block StubElementTexture each
			each.loadResources()
		end)
	end
	
	
	
	/** \brief Create element. */
	func Element createElement()
		return pClass.createElement(this)
	end
	
	/** \brief Create element and add it to game world. */
	func void createAndAddElement(GameWorld gameWorld)
		pClass.createAndAddElement(this, gameWorld)
	end
	
	/** \brief Load element using file reader. */
	func Element loadElement(PersistencyEnvironment env, FileReader reader)
		return pClass.loadElement(env, this, reader)
	end
	
	/** \brief Load element using file reader and add it to game world. */
	func void loadAndAddElement(PersistencyEnvironment env, FileReader reader, GameWorld gameWorld)
		pClass.loadAndAddElement(env, this, reader, gameWorld)
	end
	
	
	
	/**
	 * \brief Read stub from file.
	 * 
	 * If the element class is not found an instance of StubElementClassNotFound is returned.
	 * 
	 * \returns stub element or \em null if classname is empty. This is used to find the
	 *          end of stub list since the total number of elements is often not known.
	 */
	public static func StubElement readFromFile(FileReader reader, ElementClassList elementClassList)
		var String classname = reader.readString8()
		if classname.empty()
			return null
		end
		
		var ElementClass eclass = elementClassList.getNamed(classname)
		
		select reader.readByte() // version
		case 0
			return readFromFileV0(reader, elementClassList, eclass, classname)
			
		case 1
			var StubElement stub = readFromFileV0(reader, elementClassList, eclass, classname)
			
			var int count = reader.readUShort()
			var int i
			for i = 0 to count
				stub.pAddAttachableBehaviors.add(reader.readString8())
			end
			
			return stub
			
		else
			throw EInvalidParam.new("unsupported version")
		end
	end
	
	private static func StubElement readFromFileV0(FileReader reader, ElementClassList elementClassList,\
	ElementClass eclass, String classname)
		var UniqueID id = UniqueID.readFromFile(reader)
		var StubElement stub
		if eclass != null
			stub = StubElement.new(eclass, id)
			
		else
			stub = StubElementClassNotFound.new(classname, id)
		end
		
		stub.pPosition = DVector.readFromFile(reader)
		stub.pRotation = Vector.readFromFile(reader)
		stub.pScaling = Vector.readFromFile(reader)
		
		stub.readPropertiesFromFile(reader)
		
		var int textureCount = reader.readUShort()
		var int i
		for i = 0 to textureCount
			stub.pTextures.add(StubElementTexture.readFromFile(reader))
		end
		
		if reader.readByte() == 1
			stub.pAttachTo = UniqueID.readFromFile(reader)
		end
		
		return stub
	end
	
	/** \brief Write stub to file. */
	func void writeToFile(FileWriter writer)
		writer.writeString8(pClass.getClassname())
		
		writer.writeByte(1)
		
		pID.writeToFile(writer)
		pPosition.writeToFile(writer)
		pRotation.writeToFile(writer)
		pScaling.writeToFile(writer)
		
		writePropertiesToFile(writer)
		
		writer.writeUShort(pTextures.getCount())
		pTextures.forEach(block StubElementTexture each
			each.writeToFile(writer)
		end)
		
		if pAttachTo != null
			writer.writeByte(1)
			pAttachTo.writeToFile(writer)
			
		else
			writer.writeByte(0)
		end
		
		writer.writeUShort(pAddAttachableBehaviors.getCount())
		pAddAttachableBehaviors.forEach(block String each
			writer.writeString8(each)
		end)
	end
end
