/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */


namespace Dragengine.Preloading

pin Dragengine.Gui
pin Dragengine.Scenery



/**
 * \brief Helper class for preloading resources.
 * 
 * To properly track the progress of preloading do the following:
 * - Add all element classes to the manager
 * - For all StubGameWorld set this counter as the parent of the stub counter
 * - For all other loading tasks use this counter
 * 
 * Doing so this counter can be used to monitor the entire loading process.
 */
class PreloadManager
	/** \brief List of element classes to preload. */
	private var Array pElementClasses
	
	/** \brief Preload counter. */
	private var PreloadCounter pCounter
	
	
	
	/** \brief Create preload manager instance. */
	public func new()
		this.pElementClasses = Array.new()
		this.pCounter = PreloadCounter.new()
	end
	
	
	
	/** \brief Reset preload manager to initial state. */
	public func void reset()
		this.pElementClasses.removeAll()
		this.pCounter.reset()
	end
	
	
	
	/** \brief Add element class if absent. */
	public func void addElementClass( ElementClass elementClass )
		if elementClass == null
			throw EInvalidParam.new()
		end
		
		if not this.pElementClasses.has( elementClass )
			this.pElementClasses.add( elementClass )
		end
	end
	
	/** \brief Remove all element classes. */
	public func void removeAllElementClasses()
		this.pElementClasses = Array.new()
	end
	
	/**
	 * \brief Add element classes registered classes depend upon.
	 * 
	 * Call this function before calling the preloadElementClasses function.
	 */
	public func void addElementClassDependencies()
		this.pElementClasses.forEach( block ElementClass each
			each.addDependencies( this )
		end )
	end
	
	/** \brief Preload element classes. */
	public func void preloadElementClasses()
		this.pElementClasses.forEach( block ElementClass each
			each.preloadResources( this.pCounter )
		end )
		
		this.removeAllElementClasses()
	end
	
	
	
	/** \brief Preload counter. */
	public func PreloadCounter getCounter()
		return this.pCounter
	end
end
