/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */


namespace Dragengine.Preloading

pin Dragengine.Gui
pin Dragengine.Utils
pin Dragengine.Scenery


/**
 * \brief Base class for stubs having properties.
 */
class StubWithProperties
	/** \brief Properties. */
	var Dictionary pProperties
	
	
	
	/** \brief Create stub with properties. */
	func new()
		pProperties = Dictionary.new()
	end
	
	/** \brief Create copy of stub with properties. */
	func new(StubWithProperties stub)
		pProperties = Dictionary.new(stub.pProperties)
	end
	
	
	
	/** \brief Number of properties. */
	func int getPropertyCount()
		return pProperties.getCount()
	end
	
	/** \brief Property keys (String array). */
	func Array getPropertyKeys()
		return pProperties.getKeys()
	end
	
	/** \brief Property key is present. */
	func bool hasPropertyWithKey(String key)
		return pProperties.has(key)
	end
	
	/** \brief Value of property or default value if absent. */
	func String getPropertyValueFor(String key, String default)
		return pProperties.getAt(key, default) cast String
	end
	
	/** \brief Set property. */
	func void setPropertyValueFor(String key, String value)
		if value == null
			throw EInvalidParam.new()
		end
		pProperties.setAt(key, value)
	end
	
	/** \brief Set property. */
	func void setPropertyBoolFor(String key, bool value)
		pProperties.setAt(key, value if "1" else "0")
	end
	
	/** \brief Set property. */
	func void setPropertyIntFor(String key, int value)
		pProperties.setAt(key, value.toString())
	end
	
	/** \brief Set property. */
	func void setPropertyFloatFor(String key, float value)
		pProperties.setAt(key, value.toString())
	end
	
	/** \brief Remove property if present. */
	func void removePropertyWithKey(String key)
		pProperties.removeIfExisting(key)
	end
	
	/** \brief Remove all properties. */
	func void removeAllProperties()
		pProperties.removeAll()
	end
	
	
	
	/** \brief Boolean property value or default value if absent. */
	func bool getPropertyBoolFor(String key, bool default)
		var String value = pProperties.getAt(key, null) cast String
		
		if value == null
			return default
			
		else
			return ((value.toFloat() + 0.5) cast int) != 0
		end
	end
	
	/** \brief Integer property value or default value if absent. */
	func int getPropertyIntFor(String key, int default)
		var String value = pProperties.getAt(key, null) cast String
		
		if value == null
			return default
			
		else
			return value.toInt()
		end
	end
	
	/** \brief Floating point property value or default value if absent. */
	func float getPropertyFloatFor(String key, float default)
		var String value = pProperties.getAt(key, null) cast String
		
		if value == null
			return default
			
		else
			return value.toFloat()
		end
	end
	
	/** \brief Set properties from another StubWithProperties. */
	func void setFrom(StubWithProperties properties)
		pProperties = Dictionary.new(properties.pProperties)
	end
	
	/**
	 * \brief Copy of all properties as dictionary mapping String key to String value.
	 * \version 1.22
	 */
	func Dictionary getProperties()
		return Dictionary.new(pProperties)
	end
	
	/**
	 * \brief Set all properties from dictionary mapping String key to String value.
	 * \version 1.22
	 */
	func void setFrom(Dictionary properties)
		pProperties.removeAll()
		pProperties.setAll(properties)
	end
	
	
	
	/** \brief Read properties from file. */
	func void readPropertiesFromFile(FileReader reader)
		select reader.readByte() // version
		case 0
			var int count = reader.readUShort()
			var String key, value
			var int i
			
			for i = 0 to count
				key = reader.readString8()
				value = reader.readString16()
				pProperties.setAt(key, value)
			end
			
		else
			throw EInvalidParam.new("unsupported version")
		end
	end
	
	/** \brief Write properties to file. */
	func void writePropertiesToFile(FileWriter writer)
		writer.writeByte(0) // version
		
		writer.writeUShort(pProperties.getCount())
		pProperties.forEach(block String key, String value
			writer.writeString8(key)
			writer.writeString16(value)
		end)
	end
end
