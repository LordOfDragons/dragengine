/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */


namespace Dragengine.Preloading

pin Dragengine.Utils



/**
 * \brief Preloads multiple resources for one or more objects.
 * 
 * To use create preloader create preloader instance and preload resources
 * using ResourceFinishedListener subclass as resource listener. Add preload
 * listener to be notified when all resources finished preloading. Call
 * checkFinished() in case no resources have been started preloading or all
 * resources are already loaded. As soon as all resources have been finished
 * the preloader listener is called.
 * 
 */
class Preloader
	/**
	 * \brief Listener used by preloaded resources.
	 * \details Subclass for handling for resource but always super call
	 *          to not break finished tracking.
	 */
	public class ResourceFinishedListener implements ResourceListener
		/** \brief Preloader. */
		private var Preloader pPreloader
		
		/**
		 * \brief Create resource listener.
		 * \details Increments total number of resources to preload in preloader by 1.
		 */
		public func new( Preloader preloader )
			this.pPreloader = preloader
			preloader.getCounter().increase()
		end
		
		/**
		 * \brief Resource finished loading.
		 * \details Notifies preloader about resource finished loading.
		 */
		public func void finishedLoading( String path, ResourceLoaderType resourceType, Object resource )
			this.pPreloader.resourceFinished( true )
		end
		
		/**
		 * \brief Resource has failed loading.
		 * \details Notifies preloader about resource finished loading.
		 */
		public func void failedLoading( String path, ResourceLoaderType resourceType )
			this.pPreloader.resourceFinished( false )
		end
	end
	
	
	
	/** \brief Preload counter. */
	private var PreloadCounter pCounter
	
	/** \brief Total number of resources to preload. */
	private var int pTotalResourceCount
	
	/** \brief All resources preloaded successfully. */
	private var bool pSuccess
	
	/** \brief Preloading. */
	private var bool pPreloading
	
	/** \brief Preload listeners. */
	private var Array pListeners
	
	
	
	/** \brief Create preloader. */
	public func new( PreloadCounter parentCounter )
		this.pTotalResourceCount = 0
		this.pSuccess = true
		this.pPreloading = true
		this.pListeners = Array.new()
		
		this.pCounter = PreloadCounter.new()
		this.pCounter.setParent( parentCounter )
	end
	
	
	
	/** \brief Preload counter. */
	public func PreloadCounter getCounter()
		return this.pCounter
	end
	
	/** \brief Total number of resources to preload. */
	public func int getTotalResourceCount()
		return this.pTotalResourceCount
	end
	
	/** \brief Percentage of resources finished preloading. */
	public func float percentageFinished()
		if this.pTotalResourceCount == 0
			return 1.0
			
		else
			return this.pCounter.getValue() cast float / this.pTotalResourceCount cast float
		end
	end
	
	/** \brief All resources preloaded successfully. */
	public func bool getSuccess()
		return this.pSuccess
	end
	
	/** \brief Preloading. */
	public func bool getPreloading()
		return this.pPreloading
	end
	
	
	
	/**
	 * \brief Check if preloading finished.
	 * \details If finished calls finish() and notifyAllResourcesFinished().
	 */
	public func void checkFinished()
		if not this.pPreloading or this.pCounter.isNotZero()
			return
		end
		
		this.pPreloading = false
		this.finishPreloading()
		this.notifyAllPreloadingFinished()
	end
	
	/**
	 * \brief Finish preloading.
	 * \details Implement in subclass to ready preloaded object(s) for use if required.
	 *          See getSuccess() to see if preloading succeeded or not.
	 */
	public func void finishPreloading()
	end
	
	
	
	/** \brief Resource finished preloading. */
	public func void resourceFinished( bool success )
		this.pSuccess &= success
		this.pCounter.decrease()
		this.notifyAllResourcesFinished()
		this.checkFinished()
	end
	
	
	
	/** \brief Add listener. */
	public func void addListener( PreloadListener listener )
		if listener == null
			throw EInvalidParam.new()
		end
		this.pListeners.add( listener )
	end
	
	/** \brief Remove listener. */
	public func void removeListener( PreloadListener listener )
		if this.pListeners.has( listener )
			this.pListeners.remove( listener )
		end
	end
	
	
	
	/** \brief Notify listeners resources finished preloading. */
	public func void notifyAllResourcesFinished()
		this.pListeners.forEach( block PreloadListener each
			each.resourcesFinished( this )
		end )
	end
	
	/** \brief Notify listeners preloading finished. */
	public func void notifyAllPreloadingFinished()
		this.pListeners.forEach( block PreloadListener each
			each.preloadingFinished( this, this.pSuccess )
		end )
	end
end
