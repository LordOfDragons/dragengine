/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */


namespace Dragengine.Preloading

pin Dragengine.Gui
pin Dragengine.LoadSave
pin Dragengine.Scenery
pin Dragengine.Utils


/**
 * \brief Stub for an element with unknown object class.
 * 
 * Used during asynchronous loading to keep track of missing element classes so they can be
 * reported all at once instead of only the first one encountered.
 * 
 * Extends StubElement.verifyPreloading() to log the problem. All attempts to create the
 * element will thrown an exception. The missing element class is temporarily created and
 * stored only in the stub for error printing.
 */
class StubElementClassNotFound extends StubElement
	/** \brief Create element stub. */
	public func new( String eclassName ) this( eclassName, UniqueID.new() )
	end
	
	/** \brief Create element stub. */
	public func new( String eclassName, UniqueID id ) super( ElementClass.new( eclassName ), id )
	end
	
	/** \brief Create element stub. */
	public func new( String eclassName, UniqueID id, StubWithProperties properties ) this( eclassName, id )
		this.setFrom( properties )
	end
	
	/** \brief Create copy of element stub. */
	public func new( StubElement stub ) super( stub )
	end
	
	
	
	/**
	 * \brief Verify if a resource failed preloading and print the problems to the console.
	 * 
	 * In addition to StubElement.verifyPreloading() logs the missing element class and
	 * always returns \em false.
	 */
	public func bool verifyPreloading( Console console )
		super.verifyPreloading( console )
		
		console.addMessage( "Element class '" + this.getClass().getClassname() + "' not found" \
			+ "' for object with ID " + this.getID() + " located at " + this.getPosition() )
		return false
	end
	
	
	
	/** \brief Always throws an exception. */
	public func Element createElement()
		throw EInvalidParam.new()
	end
	
	/** \brief Always throws an exception. */
	public func void createAndAddElement( GameWorld gameWorld )
		throw EInvalidParam.new()
	end
	
	/** \brief Always throws an exception. */
	public func Element loadElement( PersistencyEnvironment env, FileReader reader )
		throw EInvalidParam.new()
	end
	
	/** \brief Always throws an exception. */
	public func void loadAndAddElement( PersistencyEnvironment env, FileReader reader, GameWorld gameWorld )
		throw EInvalidParam.new()
	end
	
	
	
	/** \brief Always throws an exception. */
	public static func StubElement readFromFile( FileReader reader, ElementClassList ElementClassList )
		throw EInvalidParam.new()
	end
	
	/** \brief Always throws an exception. */
	public func void writeToFile( FileWriter writer )
		throw EInvalidParam.new()
	end
end
