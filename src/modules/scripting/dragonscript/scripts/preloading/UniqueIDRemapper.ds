/* 
 * Drag[en]gine DragonScript Script Module
 *
 * Copyright (C) 2020, Roland PlÃ¼ss (roland@rptd.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */


namespace Dragengine.Preloading

pin Dragengine.Utils


/**
 * \brief Remap UniqueIDs to use multiple GameWorld resources simulatanously.
 */
class UniqueIDRemapper
	/** \brief Immutable remap entry. */
	class RemapEntry
		/** \brief First UniqueID to remap. */
		var UniqueID pFirstID
		
		/** \brief Last UniqueID just outside the remap range. */
		var UniqueID pLastID
		
		/** \brief Offset to add to UniqueID ids to remap them. */
		var UniqueID pOffset
		
		/** \brief First remapped UniqueID. */
		var UniqueID pRemappedFirstID
		
		/** \brief Last remapped UniqueID just outside the range. */
		var UniqueID pRemappedLastID
		
		
		
		/** \brief Create immutable remap entry. */
		func new(UniqueID firstID, UniqueID lastID, UniqueID offset)
			if firstID == null or lastID == null or offset == null
				throw EInvalidParam.new()
			end
			
			pFirstID = firstID
			pLastID = lastID
			pOffset = offset
			pRemappedFirstID = firstID + offset
			pRemappedLastID = lastID + offset
		end
		
		
		
		/** \brief First UniqueID to remap. */
		func UniqueID getFirstID()
			return pFirstID
		end
		
		/** \brief Last UniqueID just outside the remap range. */
		func UniqueID getLastID()
			return pLastID
		end
		
		/** \brief Offset to add to UniqueID ids to remap them. */
		func UniqueID getOffset()
			return pOffset
		end
		
		/** \brief First remapped UniqueID. */
		func UniqueID getRemappedFirstID()
			return pRemappedFirstID
		end
		
		/** \brief Last remapped UniqueID just outside the range. */
		func UniqueID getRemappedLastID()
			return pRemappedLastID
		end
		
		
		
		/** \brief ID falls into range. */
		func bool inRange(UniqueID id)
			return id >= pFirstID and id < pLastID
		end
		
		/** \brief ID does not fall into range. */
		func bool notInRange(UniqueID id)
			return id < pFirstID or id >= pLastID
		end
		
		/**
		 * \brief Remap ID if falling into range.
		 * \returns Offset ID if falling into range otherwise \em id.
		 */
		func UniqueID remap(UniqueID id)
			if id >= pFirstID and id < pLastID
				return id + pOffset
				
			else
				return id
			end
		end
		
		/** \brief ID falls into remapped range. */
		func bool inRemappedRange(UniqueID id)
			return id >= pRemappedFirstID and id < pRemappedLastID
		end
		
		/** \brief ID does not fall into remapped range. */
		func bool notInRemapedRange(UniqueID id)
			return id < pRemappedFirstID or id >= pRemappedLastID
		end
		
		
		
		/** \brief Read from file. */
		public static func RemapEntry readFromFile(FileReader reader)
			select reader.readByte() // version
			case 0
				var UniqueID firstID = UniqueID.readFromFile(reader)
				var UniqueID lastID = UniqueID.readFromFile(reader)
				var UniqueID offset = UniqueID.readFromFile(reader)
				return RemapEntry.new(firstID, lastID, offset)
				
			else
				throw EInvalidParam.new("unsupported version")
			end
		end
		
		/** \brief Write to file. */
		func void writeToFile(FileWriter writer)
			writer.writeByte(0) // version
			
			pFirstID.writeToFile(writer)
			pLastID.writeToFile(writer)
			pOffset.writeToFile(writer)
		end
	end
	
	
	
	/** \brief Array of RemapEntry. */
	var Array pRemapEntries
	
	
	
	/** \brief Create unique id mapper. */
	func new()
		pRemapEntries = Array.new()
	end
	
	
	
	/** \brief Number of remap entries. */
	func int getCount()
		return pRemapEntries.getCount()
	end
	
	/** \brief Remap entry at index. */
	func RemapEntry getAt(int index)
		return pRemapEntries.getAt(index) cast RemapEntry
	end
	
	/** \brief Remap entry containing ID or \em null if absent. */
	func RemapEntry getContaining(UniqueID id)
		return pRemapEntries.find(block RemapEntry each
			return each.inRange(id)
		end) cast RemapEntry
	end
	
	/** \brief Add remap entry. */
	func void add(RemapEntry remapEntry)
		if remapEntry == null
			throw EInvalidParam.new()
		end
		pRemapEntries.add(remapEntry)
	end
	
	/**
	 * \brief Add remap entry.
	 * 
	 * Entry remaps IDs from range (firstID..lastID) to (target..target+(lastID-firstID)).
	 * 
	 * \returns Added entry.
	 */
	func RemapEntry add(UniqueID firstID, UniqueID lastID, UniqueID target)
		var RemapEntry entry = RemapEntry.new(firstID, lastID, target - firstID)
		pRemapEntries.add(entry)
		return entry
	end
	
	/** \brief Remove all remap entries. */
	func void removeAll()
		pRemapEntries.removeAll()
	end
	
	/** \brief Visit remap entries with block with parameter RemapEntry. */
	func void forEach(Block ablock)
		pRemapEntries.forEach(ablock)
	end
	
	/**
	 * \brief Remap ID if falling into a remap range.
	 * \returns Offset ID if falling into a remap range otherwise \em id.
	 */
	func UniqueID remap(UniqueID id)
		return pRemapEntries.inject(id, block UniqueID id, RemapEntry entry
			return entry.remap(id)
		end) cast UniqueID
	end
	
	
	
	/** \brief Read from file. */
	public static func UniqueIDRemapper readFromFile(FileReader reader)
		var UniqueIDRemapper remapper = UniqueIDRemapper.new()
		var int i, count = reader.readUShort()
		for i = 0 to count
			remapper.pRemapEntries.add(RemapEntry.readFromFile(reader))
		end
		return remapper
	end
	
	/** \brief Write to file. */
	func void writeToFile(FileWriter writer)
		writer.writeUShort(pRemapEntries.getCount())
		pRemapEntries.forEach(block RemapEntry each
			each.writeToFile(writer)
		end)
	end
end
