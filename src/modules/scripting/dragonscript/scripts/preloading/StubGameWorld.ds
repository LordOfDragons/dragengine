/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */


namespace Dragengine.Preloading

pin Dragengine.Gui
pin Dragengine.Utils
pin Dragengine.Scenery
pin Dragengine.LoadSave


/**
 * \brief Stub for constructing game world.
 * 
 * Supports preloading resources in the background as well as game world creation.
 */
class StubGameWorld extends StubWithProperties
	var GameWorld pGameWorld
	var Array pWorldDecals
	var Array pElements
	var Array pNavSpaces
	var PreloadCounter pCounter
	var UniqueID pNextObjectID
	var UniqueIDRemapper.RemapEntry pNewElementsRange
	
	
	
	/** \brief Create stub. */
	func new(GameWorld gameWorld, PreloadCounter parentCounter)
		if gameWorld == null
			throw EInvalidParam.new()
		end
		
		pGameWorld = gameWorld
		gameWorld.setStub(this)
		
		pWorldDecals = Array.new()
		pElements = Array.new()
		pNavSpaces = Array.new()
		
		pCounter = PreloadCounter.new()
		pCounter.setParent(parentCounter)
	end
	
	/** \brief Create copy of stub. */
	func new(StubGameWorld stub) super(stub)
		pWorldDecals = stub.pWorldDecals.map(block StubWorldDecal each
			return StubWorldDecal.new(each)
		end)
		pElements = stub.pElements.map(block StubElement each
			return StubElement.new(each)
		end)
		// pNavSpaces can not copied. are they still useful or deprecated?
	end
	
	
	
	/** \brief Game world. */
	func GameWorld getGameWorld()
		return pGameWorld
	end
	
	
	
	/** \brief Number of world decal stubs. */
	func int getWorldDecalCount()
		return pWorldDecals.getCount()
	end
	
	/** \brief World decal stub at index. */
	func StubWorldDecal getWorldDecalAt(int index)
		return pWorldDecals.getAt(index) cast StubWorldDecal
	end
	
	/** \brief Add world decal stub. */
	func void addWorldDecal(StubWorldDecal worldDecal)
		if worldDecal == null
			throw EInvalidParam.new()
		end
		pWorldDecals.add(worldDecal)
		worldDecal.setCounter(pCounter)
	end
	
	/** \brief Visit world decal stubs using block with StubWorldDecal as parameter. */
	func void forEachWorldDecal(Block ablock)
		pWorldDecals.forEach(ablock)
	end
	
	/** \brief Preload world decal resources. */
	func void preloadWorldDecalResources()
		pWorldDecals.forEach(block StubWorldDecal each
			each.preloadResources()
		end)
	end
	
	/** \brief Load world decal resources. */
	func void loadWorldDecalResources()
		pWorldDecals.forEach(block StubWorldDecal each
			each.loadResources()
		end)
	end
	
	/** \brief Create world decals from stubs. */
	func void createWorldDecals(DecalBuilder builder, Console console)
		pWorldDecals.forEach(block StubWorldDecal each
			try
				each.createWorldDecal(pGameWorld, builder)
				
			catch Exception e
				console.addMessage("Failed to createWorldDecal decal located at " + each.getPosition())
				throw
			end
		end)
	end
	
	
	
	/** \brief Number of element stubs. */
	func int getElementCount()
		return pElements.getCount()
	end
	
	/** \brief Element stub at index. */
	func StubElement getElementAt(int index)
		return pElements.getAt(index) cast StubElement
	end
	
	/** \brief Add element stub. */
	func void addElement(StubElement element)
		if element == null
			throw EInvalidParam.new()
		end
		pElements.add(element)
		element.setCounter(pCounter)
	end
	
	/** \brief Remove all elements. */
	func void removeAllElements()
		pElements = Array.new()
	end
	
	/** \brief Visit element stubs using block with StubElement as parameter. */
	func void forEachElement(Block ablock)
		pElements.forEach(ablock)
	end
	
	/** \brief Add all element classes to the preload manager. */
	func void addElementClassesTo(PreloadManager preloadManager)
		pElements.forEach(block StubElement each
			preloadManager.addElementClass(each.getClass())
		end)
	end
	
	/**
	 * \brief Read element stubs from file.
	 * 
	 * Use together with GameWorld.readDynamicElementDataFromFile() to restore elements
	 * from file readers. Call first readElementStubsFromFile() to load the stubs from
	 * the file reader. This loads stub of element classes without parent and marked
	 * persistable. These stubs together with those loaded from world file are then
	 * preloading their resources. Once finished call GameWorld.readDynamicElementDataFromFile()
	 * to create the elements.
	 */
	func void readElementStubsFromFile(PersistencyEnvironment env, FileReader reader, \
	ElementClassList elementClassList)
		var StubElement stub
		
		while true
			stub = StubElement.readFromFile(reader, elementClassList)
			if stub == null
				break
			end
			addElement(stub)
		end
	end
	
	/**
	 * \brief Create and add all elements.
	 * 
	 * Call for newly create game worlds. For loading game worlds use:
	 * - createAndAddNonPersistableElements()
	 * - createAndAddPersistableElements()
	 * - loadAndAddPersistableElements()
	 */
	func void createAndAddElements(Console console)
		pElements.forEach(block StubElement each
			try
				each.createAndAddElement(pGameWorld)
				
			catch Exception e
				console.addMessage("Failed to createAndAddElements object with class '" \
					+ each.getClass().getClassname() + "' with ID " + each.getID() \
					+ " located at " + each.getPosition())
				throw
			end
		end)
	end
	
	/**
	 * \brief Create and add non-persistable elements.
	 * 
	 * Call for loading game worlds from file readers (save stated for example). For creating
	 * new game worlds from world files use createAndAddElements().
	 */
	func void createAndAddNonPersistableElements(Console console)
		pElements.forEach(block StubElement each
			try
				if not each.getClass().getPersistable()
					each.createAndAddElement(pGameWorld)
				end
				
			catch Exception e
				console.addMessage("Failed to createAndAddNonPersistableElements object with class '" \
					+ each.getClass().getClassname() + "' with ID " + each.getID() \
					+ " located at " + each.getPosition())
				throw
			end
		end)
	end
	
	/**
	 * \brief Create and add persistable elements with IDs inside range.
	 * 
	 * Call for loading game worlds from file readers (save stated for example). For creating
	 * new game worlds from world files use createAndAddElements().
	 * 
	 * This call allows to load dynamic (persistable) content from world files added after
	 * save states have been created. This is the case for patching and improving world files
	 * after release where users have already created save states. For this to work you have
	 * to stored in save states the getNextObjectID() of the stub at the time of saving. Upon
	 * loading if the loaded world stub getNextObjectID() is greater than the persisted ID
	 * the world has changed and new content has been added.
	 * 
	 * Calling createAndAddNonPersistableElements() creates all non-persistable elements which
	 * works for upgraded world files. New persistable objects would not be loaded only those
	 * found in the save state. Using this call and the persisted next object ID the new
	 * persistable objects can be created.
	 * 
	 * Call this method with an entry from a UniqueIDRemapper. This is required since this
	 * method can not be called until all remappings have been established and object IDs
	 * have been remapped. This in turn is required since reading persistable element stubs
	 * would potentially clash with IDs of new elements so they have to be moved out of the
	 * way. The most simple solution is to save the UniqueIDRemapper entry for the newly
	 * added range of elements aside at the time you have to add the range.
	 */
	func void createAndAddPersistableElements(Console console, UniqueIDRemapper.RemapEntry range)
		pElements.forEach(block StubElement each
			try
				if each.getClass().getPersistable() and range.inRemappedRange(each.getID())
					each.createAndAddElement(pGameWorld)
				end
				
			catch Exception e
				console.addMessage("Failed to createAndAddPersistableElements object with class '" \
					+ each.getClass().getClassname() + "' with ID " + each.getID() \
					+ " located at " + each.getPosition())
				throw
			end
		end)
	end
	
	/**
	 * \brief Load and add persistable elements.
	 * 
	 * Call for loading game worlds from file readers (save stated for example).
	 */
	func void loadAndAddPersistableElements(Console console, PersistencyEnvironment env, FileReader reader)
		if pGameWorld.getEnableReadDynDataWithSize()
			loadAndAddPersistableElementsNew(console, env, reader)
			
		else
			loadAndAddPersistableElementsOld(console, env, reader)
		end
	end
	
	protected func void loadAndAddPersistableElementsOld(Console console, PersistencyEnvironment env, FileReader reader)
		var bool enableDebugCanaryValue = env.getPersistency().getDebugEnableCanaryValue()
		
		pElements.forEach(block StubElement each
			try
				if each.getClass().getPersistable()
					if enableDebugCanaryValue and not reader.readString(Persistency.debugCanaryValue_BEGIN.getLength()) \
					.equals(Persistency.debugCanaryValue_BEGIN)
						env.getPersistency().getConsole().addMessage(each.getClass().getClassname() \
							+ ": Canary value invalid at reader position " + reader.getPosition())
						throw EInvalidParam.new()
					end
					
					each.loadAndAddElement(env, reader, pGameWorld)
					
					if enableDebugCanaryValue and not reader.readString(Persistency.debugCanaryValue_END.getLength()) \
					.equals(Persistency.debugCanaryValue_END)
						env.getPersistency().getConsole().addMessage(each.getClass().getClassname() \
							+ ": Canary value invalid at reader position " + reader.getPosition())
						throw EInvalidParam.new()
					end
				end
				
			catch Exception e
				console.addMessage("Failed to loadAndAddPersistableElements object with class '" \
					+ each.getClass().getClassname() + "' with ID " + each.getID() \
					+ " located at " + each.getPosition())
				throw
			end
		end)
	end
	
	protected func void loadAndAddPersistableElementsNew(Console console, PersistencyEnvironment env, FileReader reader)
		var bool enableDebugCanaryValue = env.getPersistency().getDebugEnableCanaryValue()
		var MemoryFile elementData = MemoryFile.new("")
		var FileWriter elementDataWriter = elementData.getWriter(false)
		var FileReader elementDataReader = elementData.getReader()
		var int elementDataSize
		
		elementData.setSize(8192) // 8k as starting capacity should be good enough
		
		pElements.forEach(block StubElement each
			try
				if each.getClass().getPersistable()
					elementDataWriter.setPosition(0)
					elementDataReader.setPosition(0)
					elementDataSize = reader.readInt()
					elementData.setSize(elementDataSize)
					elementDataWriter.writeData(reader, elementDataSize)
					
					each.loadAndAddElement(env, elementDataReader, pGameWorld)
					
					if enableDebugCanaryValue and elementDataReader.getPosition() != elementDataSize
						env.getPersistency().getConsole().addMessage(\
							"{}: Not all element data consumed by element: offset={} size={} consumed={}".format(\
							Array.newWith(each.getClass().getClassname(), reader.getPosition() - elementDataSize,\
								elementDataSize, elementDataReader.getPosition())))
						throw EInvalidParam.new()
					end
				end
				
			catch Exception e
				console.addMessage("Failed to loadAndAddPersistableElements object with class '" \
					+ each.getClass().getClassname() + "' with ID " + each.getID() \
					+ " located at " + each.getPosition())
				
				elementDataReader.setPosition(0)
				if not pGameWorld.onFailLoadAndAddPersistableElements(env, elementDataReader, each, elementDataSize)
					throw
				end
			end
		end)
	end
	
	/** \brief Preload element resources. */
	func void preloadElementResources()
		pElements.forEach(block StubElement each
			each.preloadResources()
		end)
	end
	
	/** \brief Load element resources. */
	func void loadElementResources()
		pElements.forEach(block StubElement each
			each.loadResources()
		end)
	end
	
	
	
	/** \brief Loading has finished. */
	func bool hasLoadingFinished()
		return pCounter.isZero()
	end
	
	
	
	/** \brief Number of navigation spaces. */
	func int getNavigationSpaceCount()
		return pNavSpaces.getCount()
	end
	
	/** \brief Navigation space at index. */
	func NavigationSpace getNavigationSpaceAt(int index)
		return pNavSpaces.getAt(index) cast NavigationSpace
	end
	
	/** \brief Add navigation space. */
	func void addNavigationSpace(NavigationSpace navspace)
		if navspace == null
			throw EInvalidParam.new()
		end
		pNavSpaces.add(navspace)
	end
	
	/** \brief Remove all navigation spaces. */
	func void removeAllNavigationSpaces()
		pNavSpaces = Array.new()
	end
	
	/** \brief Add navigation spaces to world. */
	func void worldAddNavigationSpaces()
		pNavSpaces.forEach(block NavigationSpace each
			pGameWorld.getWorld().addNavigationSpace(each)
		end)
	end
	
	
	
	/** \brief Next object ID. */
	func UniqueID getNextObjectID()
		return pNextObjectID
	end
	
	/** \brief Set next object ID. */
	func void setNextObjectID(UniqueID nextObjectID)
		pNextObjectID = nextObjectID
	end
	
	/** \brief Remap object IDs. */
	func void remapObjectIDs(UniqueIDRemapper remapper)
		pElements.forEach(block StubElement each
			each.setID(remapper.remap(each.getID()))
			
			if each.getAttachTo() != null
				each.setAttachTo(remapper.remap(each.getAttachTo()))
			end
		end)
	end
	
	/** \brief Range of new elements added since the last saving or null. */
	func  UniqueIDRemapper.RemapEntry getNewElementsRange()
		return pNewElementsRange
	end
	
	/** \brief Set range of new elements added since the last saving or null. */
	func void setNewElementsRange(UniqueIDRemapper.RemapEntry range)
		pNewElementsRange = range
	end
	
	
	
	/** \brief Begin preloading resources. */
	func void beginPreloading()
		preloadElementResources()
		preloadWorldDecalResources()
	end
	
	/**
	 * \brief Update preloading.
	 * 
	 * Returns false if the preloading has not yet finished. If all resources are
	 * loaded the game world and the individual elements are updated and the
	 * required engine objects created. Once all this has been done true is returned.
	 */
	func bool updatePreloading()
		if pCounter.isZero()
			worldAddNavigationSpaces()  // still required? deprecated?
			return true
		end
		
		return false
	end
	
	/**
	 * \brief Verify if resources failed preloading printing problems to console.
	 * 
	 * \returns true if all resources loaded successfully or false otherwise.
	 */
	func bool verifyPreloading(Console console)
		var bool success = true
		var int count
		var int i
		
		count = pElements.getCount()
		for i = 0 to count
			success &= (pElements.getAt(i) cast StubElement).verifyPreloading(console)
		end
		
		count = pWorldDecals.getCount()
		for i = 0 to count
			success &= (pWorldDecals.getAt(i) cast StubWorldDecal).verifyPreloading(console)
		end
		
		return success
	end
	
	/** \brief Loading resources. */
	func void loadResources()
		loadElementResources()
		loadWorldDecalResources()
	end
end
