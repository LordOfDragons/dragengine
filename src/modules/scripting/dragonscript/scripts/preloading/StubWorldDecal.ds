/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */


namespace Dragengine.Preloading

pin Dragengine.Gui
pin Dragengine.Utils
pin Dragengine.Scenery


/**
 * \brief Stub for decal.
 * 
 * Used during asynchronous loading to hold the settings of a decal until all
 * resources have been loaded.
 */
class StubWorldDecal extends StubWithProperties implements ResourceListener
	var String pPathSkin
	var Skin pSkin
	var String pTextureName
	var DVector pPosition
	var Vector pRotation, pSize
	var bool pVisible
	var TexMatrix2 pTransform
	var Color pColorTint
	var PreloadCounter pCounter
	var DMatrix pMatrix
	
	
	/** \brief Create stub decal. */
	func new()
		pPathSkin = ""
		pTextureName = ""
		pPosition = DVector.new()
		pRotation = Vector.new()
		pSize = Vector.new()
		pVisible = true
	end
	
	/** \brief Create copy of element stub. */
	func new(StubWorldDecal stub) super(stub)
		pPathSkin = stub.pPathSkin
		pSkin = stub.pSkin
		pTextureName = stub.pTextureName
		pPosition = stub.pPosition
		pRotation = stub.pRotation
		pSize = stub.pSize
		pVisible = stub.pVisible
		pTransform = stub.pTransform
		pColorTint = stub.pColorTint
	end
	
	
	/** \brief Set counter. */
	func void setCounter(PreloadCounter counter)
		pCounter = counter
	end
	
	/** \brief Skin path. */
	func String getPathSkin()
		return pPathSkin
	end
	
	/** \brief Set skin path. */
	func void setPathSkin(String pathSkin)
		if pathSkin == null
			throw EInvalidParam.new()
		end
		pPathSkin = pathSkin
	end
	
	/** \brief Skin. */
	func Skin getSkin()
		return pSkin
	end
	
	/** \brief Texture name. */
	func String getTextureName()
		return pTextureName
	end
	
	/** \brief Set texture name. */
	func void setTextureName(String textureName)
		if textureName == null
			throw EInvalidParam.new()
		end
		pTextureName = textureName
	end
	
	/** \brief Position. */
	func DVector getPosition()
		return pPosition
	end
	
	/** \brief Set position. */
	func void setPosition(DVector position)
		if position == null
			throw EInvalidParam.new()
		end
		pPosition = position
	end
	
	/** \brief Rotation. */
	func Vector getRotation()
		return pRotation
	end
	
	/** \brief Set rotation. */
	func void setRotation(Vector rotation)
		if rotation == null
			throw EInvalidParam.new()
		end
		pRotation = rotation
	end
	
	/** \brief Size. */
	func Vector getSize()
		return pSize
	end
	
	/** \brief Set size. */
	func void setSize(Vector size)
		if size == null
			throw EInvalidParam.new()
		end
		pSize = size
	end
	
	/**
	 * \brief Stub matrix.
	 * \version 1.26
	 */
	func DMatrix getMatrix()
		if pMatrix == null
			pMatrix = DMatrix.newSRT(DVector.new(pSize), DVector.new(pRotation), pPosition)
		end
		return pMatrix
	end
	
	/** \brief Visiblity. */
	func bool getVisible()
		return pVisible
	end
	
	/** \brief Set visibility. */
	func void setVisible(bool visible)
		pVisible = visible
	end
	
	/** \brief Texture coordinates transformation or \em null to not replace the transformation. */
	func TexMatrix2 getTransform()
		return pTransform
	end
	
	/** \brief Set texture coordinates transformation or \em null to not replace the transformation. */
	func void setTransform(TexMatrix2 transform)
		pTransform = transform
	end
	
	/** \brief Color tint or \em null to not replace the color tint. */
	func Color getColorTint()
		return pColorTint
	end
	
	/** \brief Set color tint or \em null to not replace the color tint. */
	func void setColorTint(Color color)
		pColorTint = color
	end
	
	
	/** \brief Add preload resources. */
	func void preloadResources()
		if pPathSkin == null or pPathSkin.empty()
			return
		end
		
		Skin.loadAsynchron(pPathSkin, this)
		pCounter.increase()
	end
	
	/**
	 * \brief Verify resource failed loading and print the problems to the console.
	 * \returns \em true if all resources loaded successfully or false otherwise.
	 */
	func bool verifyPreloading(Console console)
		if pPathSkin == null or pPathSkin.empty()
			return true
		end
		
		var bool success = true
		
		if pSkin == null
			console.addMessage("Failed to load '" + pPathSkin \
				+ "' for world decal located at " + pPosition)
			success = false
		end
		
		return success
	end
	
	/** \brief Load resources. */
	func void loadResources()
		if pSkin == null and pPathSkin != null and not pPathSkin.empty()
			pSkin = Skin.new(pPathSkin)
		end
	end
	
	/** \brief Create world decal from the stub information. */
	func void createWorldDecal(GameWorld gameWorld, DecalBuilder builder)
		builder.setPositionAndOrientation(pPosition, \
			DMatrix.newRotation(DVector.new(pRotation)).toQuaternion())
		builder.setSize(pSize)
		builder.setSkin(pSkin)
		builder.setTransform(pTransform != null if pTransform else TexMatrix2.new())
		//builder.setDynamicSkin(...)
		builder.setVisible(pVisible)
		
		var Array propertyKeys = getPropertyKeys()
		var int propertyCount = propertyKeys.getCount()
		var String propertyKey
		var int i
		
		builder.removeAllProperties()
		for i = 0 to propertyCount
			propertyKey = propertyKeys.getAt(i) cast String
			builder.setPropertyValueFor(propertyKey, getPropertyValueFor(propertyKey, ""))
		end
		
		builder.createDecals(gameWorld.getWorld())
	end
	
	
	/** \brief Resource has finished loading. */
	func void finishedLoading(String path, ResourceLoaderType resourceType, Object resource)
		pSkin = resource cast Skin
		pCounter.decrease()
	end
	
	/** \brief Resource has failed loading. */
	func void failedLoading(String path, ResourceLoaderType resourceType)
		pCounter.decrease()
	end
end
