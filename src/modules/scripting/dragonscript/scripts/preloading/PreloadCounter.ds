/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */


namespace Dragengine.Preloading


/**
 * \brief Counter for keeping track of preloading progress.
 * 
 * If a parent counter is set the parent counter is decremented too each time this
 * counter is decremented. Allows to monitor preload progress using a single parent
 * preload counter while being still able to monitor individual progress.
 */
class PreloadCounter
	/** \brief Value. */
	private var int pValue
	
	/** \brief Parent counter or null. */
	private var PreloadCounter pParent
	
	
	
	/** \brief Create preload counter. */
	public func new()
		pValue = 0
	end
	
	
	
	/** \brief Parent counter or null. */
	public func PreloadCounter getParent()
		return pParent
	end
	
	/** \brief Set parent counter or null. */
	public func void setParent(PreloadCounter counter)
		pParent = counter
	end
	
	
	
	/** \brief Counter value. */
	public func int getValue()
		return pValue
	end
	
	/** \brief Counter reached zero. */
	public func bool isZero()
		return pValue == 0
	end
	
	/** \brief Counter has not yet reach zero. */
	public func bool isNotZero()
		return pValue > 0
	end
	
	/** \brief Increment counter by one. */
	public func void increase()
		pValue++
		
		if pParent != null
			pParent.increase()
		end
	end
	
	/** \brief Increment counter by amount. */
	public func void increaseBy(int count)
		if count < 0
			throw EInvalidParam.new("count < 0")
		end
		
		pValue += count
		
		if pParent != null
			pParent.increaseBy(count)
		end
	end
	
	/** \brief Decrement counter by one. */
	public func void decrease()
		if pValue == 0
			throw EInvalidParam.new("counter == 0")
		end
		
		pValue--
		
		if pParent != null
			pParent.decrease()
		end
	end
	
	/** \brief Decrement counter by amount. */
	public func void decreaseBy(int count)
		if count < 0
			throw EInvalidParam.new("count < 0")
		end
		if pValue < count
			throw EInvalidParam.new("counter < count")
		end
		
		pValue -= count
		
		if pParent != null
			pParent.decreaseBy(count)
		end
	end
	
	/** \brief Reset counter to 0. */
	public func void reset()
		if pValue == 0
			return
		end
		
		if pParent != null
			pParent.decreaseBy(pValue)
		end
		pValue = 0
	end
end
