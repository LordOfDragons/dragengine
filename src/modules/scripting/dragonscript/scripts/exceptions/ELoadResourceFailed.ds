/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */


namespace Dragengine


/**
 * \brief Failed loading resource.
 */
class ELoadResourceFailed extends Exception
	var String pPath
	var Exception pException
	
	
	/** \brief Create exception. */
	func new(String path) this(path, "Failed loading resource")
	end
	
	/** \brief Create exception. */
	func new(String path, String message) super(message + ": " + path)
		pPath = path
	end
	
	/**
	 * \brief Create exception.
	 * \version 1.26
	 */
	func new(String path, String message, Exception exception) super(message + ": " + path)
		pPath = path
		pException = exception
	end
	
	
	/** \brief Resource path. */
	func String getPath()
		return pPath
	end
	
	/**
	 * \brief Exception or null.
	 * \version 1.26
	 */
	func Exception getException()
		return pException
	end
	
	
	func void printTrace()
		if pException != null
			pException.printTrace()
		end
		super.printTrace()
	end
	
	func int getTraceCount()
		var int count = super.getTraceCount()
		if pException != null
			count += pException.getTraceCount()
		end
		return count
	end
	
	func String getTraceClass(int index)
		if pException != null and index >= super.getTraceCount()
			return pException.getTraceClass(index - super.getTraceCount())
		end
		return super.getTraceClass(index)
	end
	
	func String getTraceFunction(int index)
		if pException != null and index >= super.getTraceCount()
			return pException.getTraceFunction(index - super.getTraceCount())
		end
		return super.getTraceFunction(index)
	end
	
	func int getTraceLine(int index)
		if pException != null and index >= super.getTraceCount()
			return pException.getTraceLine(index - super.getTraceCount())
		end
		return super.getTraceLine(index)
	end
end
