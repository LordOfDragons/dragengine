/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */


namespace Dragengine.Scenery


/**
 * \brief Animator instance controller count too low.
 * 
 * This exception is thrown if an resource has a smaller controller count than required.
 * As additional information the the source, the number of controllers and the number of
 * required controllers are added. The source can be the path of the file the resource
 * has been loaded from, a script class or anything else helping to identify the source
 * of the problem. Optionally an owner object can be added to help identify which object
 * has the failed requirements.
 */
class ENotEnoughControllers extends Exception
	private var String pSource
	private var int pControllerCount
	private var int pRequiredControllerCount
	private var Object pOwner
	
	
	/** \brief Create exception. */
	public func new( String source, int controllerCount, int requiredControllerCount ) \
	this( source, controllerCount, requiredControllerCount, null )
	end
	
	/** \brief Create exception. */
	public func new( String source, int controllerCount, int requiredControllerCount, Object owner ) \
	super( "Not enough controllers in '" + source + "': Found " + controllerCount \
	+ ", expected at least " + requiredControllerCount )
		this.pSource = source
		this.pControllerCount = controllerCount
		this.pRequiredControllerCount = requiredControllerCount
		this.pOwner = owner
	end
	
	
	
	/**
	 * \brief Source.
	 * 
	 * Can be the path of the file the resource has been loaded from, a script class or
	 * anything else helping to identify the source of the problem.
	 */
	public func String getSource()
		return this.pSource
	end
	
	/** \brief Number of controllers present in resource. */
	public func int getControllerCount()
		return this.pControllerCount
	end
	
	/** \brief Number of required controllers. */
	public func int getRequiredControllerCount()
		return this.pRequiredControllerCount
	end
	
	/**
	 * \brief Owner object.
	 * 
	 * Can be present to help identify which object has the failed requirements.
	 * Is null if not set.
	 */
	public func Object getOwner()
		return this.pOwner
	end
end

