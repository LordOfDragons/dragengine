/* 
 * Drag[en]gine DragonScript Script Module
 *
 * Copyright (C) 2020, Roland Pl√ºss (roland@rptd.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */


namespace Dragengine.Gui


/**
 * \brief CanvasPaint shape.
 */
enum CanvasPaintShape
	/**
	 * \brief Points of radius \em thickness.
	 * 
	 * Add N points to render N points.
	 */
	points
	
	/**
	 * \brief Disconnected line segments.
	 * 
	 * Add N*2 points to render N disconnected line segments.
	 */
	lines
	
	/**
	 * \brief Filled or empty rectangle.
	 * 
	 * The width and height of the rectangle matches the canvas size rendering
	 * a rectangle filling the entire canvas. The round corners parameters
	 * define the percentag of rounding with 0 no rounding and 1 full rounding
	 * upp the way to the center axis.
	 */
	rectangle
	
	/**
	 * \brief Filled or empty ellipse.
	 * 
	 * The radi of the ellipse matches the size of the canvas to fill entire
	 * canvas. If the start and end angle are equal the ellipse is closed
	 * otherwise it is open with the end points connected by a straight line.
	 * If ellipse is open and \em fillColor is not transparent the ellipse is
	 * filled up to the connection line between the two end points.
	 */
	ellipse
	
	/**
	 * \brief Filled or empty pie.
	 * 
	 * Same definition as deCanvasPaint::estEllipse with the difference that in
	 * the open case a connection line is drawn from one end point to the other
	 * across the center point.
	 */
	pie
	
	/**
	 * \brief Open or closed filled or empty polygon.
	 * 
	 * Add N points to render a polygon with N corners. At least 2 points are
	 * required for the outline of the polygon to be rendered. At least 3 points
	 * are required for the polygon to be filled if \em fillColor is not
	 * transparent. The points have to be oriented clockwise. The polygon is not
	 * required to be convex. If the last point is equal to the first point the
	 * polygon is closed otherwise open. If the polygon is open it is filled up
	 * to the straight connection line between the two end points.
	 */
	polygon
end
