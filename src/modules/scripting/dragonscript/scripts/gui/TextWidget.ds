/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */


namespace Dragengine.Gui

pin Dragengine.Gui.Borders
pin Dragengine.Gui.Designers
pin Dragengine.Gui.Events
pin Dragengine.Utils
pin Dragengine.Scenery


/**
 * \brief Super class for widgets supporting text input.
 * 
 * Provides onKeyType() method called if key press event contains printable character.
 */
class TextWidget extends Widget implements TextModelListener
	/**
	 * \brief Action listener calling onClipboardCut().
	 * \version 1.16
	 */
	class ActionCut implements ActionListener
		protected var TextWidget pWidget
		
		/** \brief Create action. */
		func new(TextWidget widget)
			if widget == null
				throw ENullPointer.new("widget")
			end
			pWidget = widget
		end
		
		/** \brief Action fired. */
		func void onAction(ActionEvent event)
			pWidget.onClipboardCut()
		end
	end
	
	/**
	 * \brief Action listener calling onClipboardCopy().
	 * \version 1.16
	 */
	class ActionCopy implements ActionListener
		protected var TextWidget pWidget
		
		/** \brief Create action. */
		func new(TextWidget widget)
			if widget == null
				throw ENullPointer.new("widget")
			end
			pWidget = widget
		end
		
		/** \brief Action fired. */
		func void onAction(ActionEvent event)
			pWidget.onClipboardCopy()
		end
	end
	
	/**
	 * \brief Action listener calling onClipboardPaste().
	 * \version 1.16
	 */
	class ActionPaste implements ActionListener
		protected var TextWidget pWidget
		
		/** \brief Create action. */
		func new(TextWidget widget)
			if widget == null
				throw ENullPointer.new("widget")
			end
			pWidget = widget
		end
		
		/** \brief Action fired. */
		func void onAction(ActionEvent event)
			pWidget.onClipboardPaste()
		end
	end
	
	
	
	var TextModel pModel
	var TextValidator pValidator
	var bool pReadOnly
	var Array pActionListeners
	var bool pHasTyped
	var bool pActionOnEnter
	var bool pAddTabToText
	
	
	
	/** \brief Create text widget. */
	func new(TextModel model) this(model, false)
	end
	
	/**
	 * \brief Create text widget.
	 * \version 1.7
	 */
	func new(TextModel model, bool readOnly)
		if model == null
			throw EInvalidParam.new()
		end
		
		pReadOnly = readOnly
		pAddTabToText = false
		pModel = model
		pModel.addListener(this)
		pActionListeners = Array.new()
	end
	
	/** \brief Dispose of widget. */
	func void dispose()
		pValidator = null
		pActionListeners = null
		
		if pModel != null
			pModel.removeListener(this)
			pModel = null
		end
		
		super.dispose()
	end
	
	
	
	/** \brief Text model. */
	func TextModel getModel()
		return pModel
	end
	
	/** \brief Set text model. */
	func void setModel(TextModel model)
		if model == pModel
			return
		end
		
		if model == null
			throw EInvalidParam.new()
		end
		
		pModel.removeListener(this)
		pModel = model
		pModel.addListener(this)
		
		onModelChanged()
	end
	
	/** \brief Text validator or null if not used. */
	func TextValidator getValidator()
		return pValidator
	end
	
	/**
	 * \brief Set text validator or null if not used.
	 * 
	 * Current model text is not re-validated. Caller has to ensure text is valid before
	 * assigning a new validator to avoid impossible to solve situations.
	 */
	func void setValidator(TextValidator validator)
		pValidator = validator
	end
	
	
	
	/**
	 * \brief Add action listener.
	 * \version 1.8
	 */
	func void addActionListener(ActionListener listener)
		if listener == null
			throw EInvalidParam.new()
		end
		pActionListeners.add(listener)
	end
	
	/**
	 * \brief Remove action listener.
	 * \version 1.8
	 */
	func void removeActionListener(ActionListener listener)
		pActionListeners.remove(listener)
	end
	
	/**
	 * \brief User has changed text by typing in the widget since the last action listener call.
	 * \version 1.8
	 */
	func bool getHasTyped()
		return pHasTyped
	end
	
	/**
	 * \brief Set if user has changed text by typing in the widget since the last action listener call.
	 * \version 1.8
	 */
	protected func void setHasTyped(bool hasTyped)
		pHasTyped = hasTyped
	end
	
	/**
	 * \brief Call action listeners if enter is pressed after user changed text by typing into the widget.
	 * \version 1.8
	 */
	func bool getActionOnEnter()
		return pActionOnEnter
	end
	
	/**
	 * \brief Set to call action listeners if enter is pressed after user changed text by typing into the widget.
	 * \version 1.8
	 */
	func void setActionOnEnter(bool actionOnEnter)
		pActionOnEnter = actionOnEnter
	end
	
	/**
	 * \brief Add tab to text instead of moving focus.
	 * \version 1.8
	 */
	func bool getAddTabToText()
		return pAddTabToText
	end
	
	/**
	 * \brief Set to add tab to text instead of moving focus.
	 * \version 1.8
	 */
	func void setAddTabToText(bool addTabToText)
		pAddTabToText = addTabToText
	end
	
	/**
	 * \brief Fire action.
	 * \version 1.8
	 */
	func void fireAction(int modifiers)
		pHasTyped = false
		
		var ActionEvent event = ActionEvent.new(this, ActionEvent.idAction, modifiers)
		pActionListeners.forEach(block ActionListener each
			each.onAction(event)
		end)
	end
	
	
	
	/**
	 * \brief Get text.
	 * 
	 * Convenience method for calling getModel().getText().
	 */
	func String getText()
		return pModel.getText()
	end
	
	/**
	 * \brief Set text.
	 * 
	 * Convenience method for calling getModel().setText().
	 */
	func void setText(String text)
		pModel.setText(text)
	end
	
	
	
	/** Determines if the text is read only. */
	func bool getReadOnly()
		return pReadOnly
	end
	
	/** Sets if the text is read only. */
	func void setReadOnly(bool readOnly)
		if readOnly == pReadOnly
			return
		end
		
		pReadOnly = readOnly
		onReadOnlyChanged()
	end
	
	
	
	/**
	 * \brief Measure advance starting from navigator position.
	 * \version 1.16
	 * \param fromPosition Byte position to start measure from.
	 * \param toPosition End position to measure to. Character at end position is not included.
	 * \param font Font to use for measuring.
	 * \throws EInvalidParam toPosition is less than fromPosition
	 */
	func float measureAdvance(int fromPosition, int toPosition, Font font)
		var UTF8Navigator nav = UTF8Navigator.new(pModel.getText(), fromPosition)
		var float advance
		var int character
		
		while nav.getPosition() < toPosition
			character = nav.decodeCharacter()
			if character != -1
				advance += font.getCharAdvance(character)
			end
			nav.forward()
		end
		
		return advance
	end
	
	
	
	/**
	 * \brief Key typed event.
	 " 
	 " Convenience method called if onKeyPress is called with an event containing a printable key.
	 */
	func void onKeyType(KeyEvent event)
	end
	
	/** \brief Text model changed. */
	func void onModelChanged()
	end
	
	/**
	 * \brief Text in model changed.
	 * 
	 * Implementation of TextModelListener.textChanged().
	 */
	func void textChanged(TextModel textModel)
	end
	
	
	
	/**
	 * \brief Key has been pressed.
	 * 
	 * If event contains a printable character onKeyType() is called after super.onKeyPress().
	 */
	func void onKeyPress(KeyEvent event)
		select event.getKeyCode()
		case InputEventKey.enter
			if not pReadOnly
				if pActionOnEnter
					if pHasTyped
						pHasTyped = false
						fireAction(event.getModifiers())
					end
					
				elif event.getKeyChar() > 0
					onKeyType(event)
				end
			end
			
			super.onKeyPress(event)
			return
			
		case InputEventKey.tab
			if pAddTabToText
				if not pReadOnly and event.getKeyChar() > 0
					onKeyType(event)
				end
				
				// no super call since this would move focus away from the widget.
				// still send event to listeners though
				sendEventToListeners(event, true)
				
			else
				super.onKeyPress(event)
			end
			return
			
		case InputEventKey.c
			if (event.getModifiers() & InputEventModifier.control) == InputEventModifier.control
				onClipboardCopy()
				return
			end
			
		case InputEventKey.x
			if (event.getModifiers() & InputEventModifier.control) == InputEventModifier.control
				onClipboardCut()
				return
			end
			
		case InputEventKey.v
			if (event.getModifiers() & InputEventModifier.control) == InputEventModifier.control
				onClipboardPaste()
				return
			end
		end
		
		if not pReadOnly and event.getKeyChar() > 0
			onKeyType(event)
		end
		
		super.onKeyPress(event)
	end
	
	/** \brief Widget lost focus. */
	func void onFocusLost(FocusEvent event)
		super.onFocusLost(event)
		
		if pHasTyped
			pHasTyped = false
			fireAction(0)
		end
	end
	
	/**
	 * \brief Read only state changed.
	 * \version 1.7
	 */
	func void onReadOnlyChanged()
	end
	
	/**
	 * \brief Copy to clipboard requested.
	 * \version 1.11
	 */
	func void onClipboardCopy()
	end
	
	/**
	 * \brief Cut to clipboard requested.
	 * \version 1.11
	 */
	func void onClipboardCut()
	end
	
	/**
	 * \brief Paste from clipboard requested.
	 * \version 1.11
	 */
	func void onClipboardPaste()
	end
end
