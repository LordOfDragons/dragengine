/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */


namespace Dragengine.Gui

pin Dragengine.Gui.Events
pin Dragengine.Gui.Layouts


/**
 * \brief Display small view of a widget larger than the viewport.
 * 
 * Typical use is like this:
 * \code{.ds}
 * ScrollPanel.new(Viewport.new(widget)).
 * \endcode
 * 
 * This shows scroll bars if widget is larger than the viewport and aligns
 * it to the left and top side. For different alignment set a layout.
 * The layout is only overwritten vertically or horizontally if the
 * widget is larger than the viewport. For example to center the widget
 * if smaller than the viewport use
 * \code{.ds}
 * viewport.setLayout(CentrizedBoxLayout.new(LayoutAxis.y))
 * \endcode
 * 
 * Another typical situation is to stretch the widget to the viewport if
 * smaller. This can be done like this:
 * \code{.ds}
 * viewport.setLayout(BoxLayout.new(LayoutAxis.y))
 * \endcode
 * 
 * The default layout is FixedMinimalLayout. Other layouts are possible.
 */
class Viewport extends Panel implements RangeModelListener
	private var DefaultRangeModel pVertRangeModel
	private var DefaultRangeModel pHorzRangeModel
	private var bool pPreventLayoutParent
	
	
	
	/** \brief Create viewport center aligning content widget. */
	public func new() this(null)
	end
	
	/** \brief Create viewport with content widget. */
	public func new(Widget content) this(content, 5, 5, false)
	end
	
	/** \brief Create viewport with content widget and layout. */
	public func new(Widget content, Layout layout)
		pVertRangeModel = DefaultRangeModel.new(0, 0, 100, 0, 20)
		pVertRangeModel.addListener(this)
		pHorzRangeModel = DefaultRangeModel.new(0, 0, 100, 0, 20)
		pHorzRangeModel.addListener(this)
		
		runWhileBlockingLayout(block
			setLayout(layout)
			
			setProtectMinimumSize(true)
			setMinimumSize(Point.new(5, 5))
			
			setContent(content)
		end)
	end
	
	/**
	 * \brief Create viewport with content widget and layout.
	 * \version 1.7
	 * 
	 * Uses ViewportLayout with provided width and height restriction. To restrict width
	 * or height set a value larger 0. A value of 0 indicates no restriction.
	 */
	public func new(Widget content, int restrictWidth, int restrictHeight, bool stretch)
		pVertRangeModel = DefaultRangeModel.new(0, 0, 100, 0, 20)
		pVertRangeModel.addListener(this)
		pHorzRangeModel = DefaultRangeModel.new(0, 0, 100, 0, 20)
		pHorzRangeModel.addListener(this)
		
		runWhileBlockingLayout(block
			setLayout(ViewportLayout.new(restrictWidth, restrictHeight, stretch))
			setContent(content)
		end)
	end
	
	/** \brief Dispose of this widget. */
	public func void dispose()
		if pHorzRangeModel != null
			pHorzRangeModel.removeListener(this)
		end
		if pVertRangeModel != null
			pVertRangeModel.removeListener(this)
		end
		
		super.dispose()
		
		pHorzRangeModel = null
		pVertRangeModel = null
	end
	
	
	
	/** \brief Content widget or \em null if not existing. */
	public func Widget getContent()
		if getWidgetCount() == 1
			return getWidget(0)
		end
		
		return null
	end
	
	/** \brief Set content widget or \em null to remove it. */
	public func void setContent(Widget content)
		var Widget curWidget = getContent()
		if curWidget == content
			return
		end
		
		if curWidget != null
			curWidget.safeDispose()
		end
		
		if content != null
			addWidget(content)
		end
	end
	
	
	
	/** \brief Range properties changed. */
	public func void rangeChanged(RangeModel rangeModel)
	end
	
	/** \brief Value changed. */
	public func void valueChanged(RangeModel rangeModel)
		if rangeModel == pVertRangeModel
			updateContentPositionY()
			
		else
			updateContentPositionX()
		end
	end
	
	
	
	/**
	 * \brief Vertical range model for viewports to synchronize the vertical scrollbar.
	 * \details If this widget has no reasonable vertical range model it should return \em null.
	 */
	public func RangeModel getVerticalRangeModel()
		return pVertRangeModel
	end
	
	/**
	 * \brief Horizontal range model for viewports to synchronize the horizontal scrollbar.
	 * \details If this widget has no reasonable horizontal range model it should return \em null.
	 */
	public func RangeModel getHorizontalRangeModel()
		return pHorzRangeModel
	end
	
	
	
	/**
	 * \brief Update content X position.
	 * \details Adjusts the position only if larger than the viewport size.
	 *          Otherwise the layout position is kept.
	 */
	public func void updateContentPositionX()
		var Widget content = getContent()
		if content != null
			content.setX(getPadding().getLeft() - pHorzRangeModel.getValue())
		end
	end
	
	/**
	 * \brief Update content Y position.
	 * \details Adjusts the position only if larger than the viewport size.
	 *          Otherwise the layout position is kept.
	 */
	public func void updateContentPositionY()
		var Widget content = getContent()
		if content != null
			content.setY(getPadding().getTop() - pVertRangeModel.getValue())
		end
	end
	
	
	
	/**
	 * \brief Lay out widgets using the set layout.
	 * 
	 * This call is protected against loops caused by layoutParent called from inside a widget
	 * being laid out. Furthermore changes to the minimum, preferred and maximum size are
	 * tracked to call layoutParent() only if required.
	 */
	public func void doLayout()
		if getBlockLayout()
			return
		end
		
		var Widget content = getContent()
		if content == null
			pHorzRangeModel.setMaximum(0)
			pVertRangeModel.setMaximum(0)
			return
		end
		
		// for layouts like FixedMinimalLayout not setting position
		content.setPosition(Point.new(getPadding().getLeft(), getPadding().getTop()))
		
		pPreventLayoutParent = true
		try
			super.doLayout()
			pPreventLayoutParent = false
			
		catch Exception e
			pPreventLayoutParent = false
			throw
		end
		
		var Point containerSize = getContainerSize()
		
		pHorzRangeModel.setMaximum(DEMath.max(content.getWidth() - containerSize.getX(), 0))
		pHorzRangeModel.setPageSize(containerSize.getX() * 2 / 3)
		updateContentPositionX()
		
		pVertRangeModel.setMaximum(DEMath.max(content.getHeight() - containerSize.getY(), 0))
		pVertRangeModel.setPageSize(containerSize.getY() * 2 / 3)
		updateContentPositionY()
		
		// required to reproduce this from Container.doLayout() or initial layout is missing.
		// interestingly the problem is not too visible if the call is here and not earlier
		if not isMinimumSizeSet()
			layoutParent()
		end
	end
	
	public func void layoutParent()
		// Container.doLayout() calls layoutParent() if isMinimumSizeSet() is false. by forcing
		// a minimum size the layoutParent() call is not done. for some strange reason calling
		// layoutParent() inside Container.doLayout() causes various problems including horrible
		// performance loss and wrong mouse pointer handling.
		if not pPreventLayoutParent
			super.layoutParent()
		end
	end
end
