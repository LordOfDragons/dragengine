/* 
 * Drag[en]gine DragonScript Script Module
 *
 * Copyright (C) 2020, Roland Pl√ºss (roland@rptd.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */


namespace Dragengine.Gui

pin Dragengine.Gui.Events
pin Dragengine.Gui.Layouts
pin Dragengine.Scenery


/**
 * \brief Option box widget.
 * 
 * Specialization of the ToggleButton showing a tickable option box.
 * 
 * Supports designing using designer selector "OptionBox".
 */
class OptionBox extends ToggleButton
	private var Widget pWidgetOptionBox
	private var Widget pWidgetSelected
	private var Panel pPanelCheckTextImage
	private var Panel pPanelOptionBox
	private var Panel pPanelSelected
	
	
	
	/** \brief Create option box. */
	public func new()
		setStickyToggled(true)
		setDesignerSelector("OptionBox")
	end
	
	/** \brief Create text option button. */
	public func new(String text) super(text)
		setStickyToggled(true)
		setDesignerSelector("OptionBox")
	end
	
	/** \brief Create text and image option button. */
	public func new(String text, Image image) super(text, image)
		setStickyToggled(true)
		setDesignerSelector("OptionBox")
	end
	
	/**
	 * \brief Create option button.
	 * \version 1.11
	 */
	public func new(ToggleModel model) super(model)
		setStickyToggled(true)
		setDesignerSelector("OptionBox")
	end
	
	/**
	 * \brief Create text option button.
	 * \version 1.11
	 */
	public func new(ToggleModel model, String text) super(model, text)
		setStickyToggled(true)
		setDesignerSelector("OptionBox")
	end
	
	/**
	 * \brief Create text and image option button.
	 * \version 1.11
	 */
	public func new(ToggleModel model, String text, Image image) super(model, text, image)
		setStickyToggled(true)
		setDesignerSelector("OptionBox")
	end
	
	/**
	 * Disposes of the widget. This cleans all references and prepars the widget
	 * for beeing freed. If the widget is already disposed nothing happens.
	 */
	public func void dispose()
		pWidgetOptionBox = null
		pWidgetSelected = null
		pPanelOptionBox = null
		pPanelSelected = null
		pPanelCheckTextImage = null
		
		super.dispose()
	end
	
	
	
	/**
	 * \brief Option box widget or \em null if not set.
	 * \details For use by option box designers.
	 */
	public func Widget getOptionBoxWidget()
		return pWidgetOptionBox
	end
	
	/**
	 * \brief Set option box widget or \em null if not set.
	 * \details For use by option box designers.
	 */
	public func void setOptionBoxWidget(Widget widget)
		if widget == pWidgetOptionBox
			return
		end
		
		if pWidgetOptionBox != null
			pPanelOptionBox.removeWidget(pWidgetOptionBox)
			pWidgetOptionBox.dispose()
		end
		
		pWidgetOptionBox = widget
		
		if widget != null
			pPanelOptionBox.addWidget(widget)
		end
	end
	
	/**
	 * \brief Option selected widget or \em null if not set.
	 * \details For use by option box designers.
	 */
	public func Widget getSelectedWidget()
		return pWidgetSelected
	end
	
	/**
	 * \brief Set option selected widget.
	 * \details For use by option box designers.
	 */
	public func void setSelectedWidget(Widget widget)
		if widget == pWidgetSelected
			return
		end
		
		if pWidgetSelected != null
			pPanelSelected.removeWidget(pWidgetSelected)
			pWidgetSelected.dispose()
		end
		
		pWidgetSelected = widget
		
		if widget != null
			pPanelSelected.addWidget(widget)
		end
	end
	
	
	
	/** \brief Designer changed. */
	public func void onDesignerChanged()
		setOptionBoxWidget(null)
		setSelectedWidget(null)
	end
	
	
	
	/**
	 * \brief Create button content widgets.
	 * \details Call if the layout of the widgets changes. Removes the old widgets first.
	 */
	public func void createContentWidgets()
		var bool enabled = getEnabled()
		var String text = getText()
		
		pWidgetOptionBox = null
		pWidgetSelected = null
		pPanelOptionBox = null
		pPanelSelected = null
		pPanelCheckTextImage = null
		
		removeAllWidgets()
		setWidgetImage(null)
		setWidgetText(null)
		
		setLayout(BorderLayout.new(5))
		
		// optionbox with option mark
		addWidget(Panel.new(StackLayout.new(), block Panel p
			pPanelOptionBox = Panel.new(CentrizedBoxLayout.new(LayoutAxis.y))
			p.addWidget(pPanelOptionBox)
			
			pPanelSelected = Panel.new(CentrizedBoxLayout.new(LayoutAxis.y))
			p.addWidget(pPanelSelected)
		end), BorderLayout.Area.left)
		
		// image and text
		pPanelCheckTextImage = Panel.new(FlowLayout.new(LayoutAxis.x), block Panel p
			var DisplayImage widgetImage = DisplayImage.new(null, "Image." + getDesignerSelector())
			widgetImage.setEnabled(enabled)
			p.addWidget(widgetImage)
			widgetImage.setVisible(false)
			setWidgetImage(widgetImage)
			
			var Label widgetText = Label.new(text, "Label." + getDesignerSelector())
			widgetText.setEnabled(enabled)
			p.addWidget(widgetText)
			widgetText.setVisible(not text.empty())
			setWidgetText(widgetText)
			
			p.setVisible(not text.empty())
		end)
		addWidget(pPanelCheckTextImage, BorderLayout.Area.content)
	end
	
	/** \brief Set text of the button. */
	public func void setText(String text)
		super.setText(text)
		pPanelCheckTextImage.setVisible(getWidgetText().getVisible() or getWidgetImage().getVisible())
	end
	
	/** \brief Update image to display depending on current button state. */
	public func void updateWidgetImage()
		super.updateWidgetImage()
		pPanelCheckTextImage.setVisible(getWidgetText().getVisible() or getWidgetImage().getVisible())
	end
end
