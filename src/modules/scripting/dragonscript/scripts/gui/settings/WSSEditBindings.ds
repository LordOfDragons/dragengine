/* 
 * Drag[en]gine DragonScript Script Module
 *
 * Copyright (C) 2021, Roland Pl√ºss (roland@rptd.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

namespace Dragengine.Gui

pin Dragengine.Commands
pin Dragengine.Utils


/**
 * \brief WindowSettingsSheet editing input bindings.
 */
class WSSEditBindings extends DefaultWindowSettingsSheet
	/** \brief Binding manager to use. */
	private var BindingManager pBindingManager
	
	/** \brief Command manager to use. */
	private var CommandManager pCommandManager
	
	
	
	/**
	 * \brief Create window settings sheet.
	 * 
	 * Uses binding manager from BaseGameWorld.
	 */
	public func new() this( BaseGameApp.getApp().getBindingManager(), \
	BaseGameApp.getApp().getCommandManager() )
	end
	
	public func new( String identifier, String title ) this( BaseGameApp.getApp().getBindingManager(), \
	BaseGameApp.getApp().getCommandManager(), identifier, title )
	end
	
	/**
	 * \brief Create window settings sheet.
	 */
	public func new( BindingManager bindingManager, CommandManager commandManager ) \
	this( bindingManager, commandManager, "bindings", "Input Bindings" )
	end
	
	public func new( BindingManager bindingManager, CommandManager commandManager, \
	String identifier, String title ) super( identifier, title )
		if bindingManager == null
			throw ENullPointer.new( "bindingManager" )
		end
		if commandManager == null
			throw ENullPointer.new( "commandManager" )
		end
		
		this.pBindingManager = bindingManager
		this.pCommandManager = commandManager
	end
	
	
	
	/** \brief Binding manager to use. */
	public func BindingManager getBindingManager()
		return this.pBindingManager
	end
	
	/** \brief Command manager to use. */
	public func CommandManager getCommandManager()
		return this.pCommandManager
	end
	
	
	
	/**
	 * \brief Create widget.
	 * 
	 * Creates instance of EditBindingsPanel.
	 */
	public func Widget createWidget()
		var EditBindingsPanel editBindings = EditBindingsPanel.new( this.pBindingManager )
		this.addCommands( editBindings )
		return editBindings
	end
	
	/**
	 * Save settings.
	 */
	public func void saveSettings( Widget widget )
		( widget cast EditBindingsPanel ).applyChanges()
	end
	
	/**
	 * Reset settings.
	 */
	public func void resetSettings( Widget widget )
		( widget cast EditBindingsPanel ).resetChanges()
	end
	
	
	
	/**
	 * \brief Add commands to edit bindings panel.
	 * 
	 * Default implementation adds all commands defined by the DragonScript module
	 * if present in the binding manager.
	 */
	protected func void addCommands( EditBindingsPanel editBindings )
		var Array list = Array.new()
		
		// BAAMovement commands
		this.modelAddButton( list, "moveForward" )
		this.modelAddButton( list, "moveBackward" )
		this.modelAddButton( list, "moveLeft" )
		this.modelAddButton( list, "moveRight" )
		
		this.modelAddButton( list, "lookLeft" )
		this.modelAddButton( list, "lookRight" )
		this.modelAddButton( list, "lookUp" )
		this.modelAddButton( list, "lookDown" )
		
		this.modelAddAxis( list, "analogMoveFB" )
		this.modelAddAxis( list, "analogMoveLR" )
		this.modelAddAxis( list, "analogLookLR" )
		this.modelAddAxis( list, "analogLookUD" )
		
		this.modelAddButton( list, "crouch" )
		this.modelAddButton( list, "toggleCrouch" )
		this.modelAddButton( list, "run" )
		this.modelAddButton( list, "toggleRun" )
		
		// BAAInteract commands
		this.modelAddButton( list, "primaryAction" )
		this.modelAddButton( list, "secondaryAction" )
		
		// quit game command
		this.modelAddButton( list, "quit" )
		
		// screenshot command
		this.modelAddButton( list, "screenshot" )
		
		// toggle console command
		this.modelAddButton( list, "toggleConsole" )
		
		// update model
		editBindings.getModel().addAll( list )
	end
	
	/**
	 * \brief If command is present add EditBindingsListModelEntry for button use.
	 */
	protected func void modelAddButton( Array list, String name )
		var Command command = this.pCommandManager.getNamed( name )
		if command != null
			list.add( EditBindingsListModelEntry.new( command, \
				EditBindingsListModelEntry.InputSource.button ) )
		end
	end
	
	/**
	 * \brief If command is present add EditBindingsListModelEntry for axis use.
	 */
	protected func void modelAddAxis( Array list, String name )
		var Command command = this.pCommandManager.getNamed( name )
		if command != null
			list.add( EditBindingsListModelEntry.new( command, \
				EditBindingsListModelEntry.InputSource.axis ) )
		end
	end
end
