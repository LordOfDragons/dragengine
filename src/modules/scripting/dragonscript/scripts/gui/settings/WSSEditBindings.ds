/* 
 * Drag[en]gine DragonScript Script Module
 *
 * Copyright (C) 2021, Roland Pl√ºss (roland@rptd.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

namespace Dragengine.Gui

pin Dragengine.Commands
pin Dragengine.Utils


/**
 * \brief WindowSettingsSheet editing input bindings.
 */
class WSSEditBindings extends DefaultWindowSettingsSheet
	private var BindingManager pBindingManager
	private var CommandManager pCommandManager
	
	
	
	/**
	 * \brief Create window settings sheet.
	 * 
	 * Uses binding manager from BaseGameWorld.
	 */
	public func new() this(BaseGameApp.getApp().getBindingManager(), \
	BaseGameApp.getApp().getCommandManager())
	end
	
	public func new(String identifier, String title) this(BaseGameApp.getApp().getBindingManager(), \
	BaseGameApp.getApp().getCommandManager(), identifier, title)
	end
	
	/**
	 * \brief Create window settings sheet.
	 */
	public func new(BindingManager bindingManager, CommandManager commandManager) \
	this(bindingManager, commandManager, "bindings",\
	EngineTranslations.get().translate("UI.Settings.Bindings").toUTF8())
	end
	
	public func new(BindingManager bindingManager, CommandManager commandManager, \
	String identifier, String title) super(identifier, title)
		if bindingManager == null
			throw ENullPointer.new("bindingManager")
		end
		if commandManager == null
			throw ENullPointer.new("commandManager")
		end
		
		pBindingManager = bindingManager
		pCommandManager = commandManager
	end
	
	
	
	/** \brief Binding manager to use. */
	public func BindingManager getBindingManager()
		return pBindingManager
	end
	
	/** \brief Command manager to use. */
	public func CommandManager getCommandManager()
		return pCommandManager
	end
	
	
	
	/**
	 * \brief Create widget.
	 * 
	 * Creates instance of EditBindingsPanel.
	 */
	public func Widget createWidget()
		var EditBindingsPanel editBindings = EditBindingsPanel.new(pBindingManager)
		addCommands(editBindings)
		return editBindings
	end
	
	/**
	 * Save settings.
	 */
	public func void saveSettings(Widget widget)
		(widget cast EditBindingsPanel).applyChanges()
	end
	
	/**
	 * Reset settings.
	 */
	public func void resetSettings(Widget widget)
		(widget cast EditBindingsPanel).resetChanges()
	end
	
	
	
	/**
	 * \brief Add commands to edit bindings panel.
	 * 
	 * Default implementation adds all commands defined by the DragonScript module
	 * if present in the binding manager.
	 */
	protected func void addCommands(EditBindingsPanel editBindings)
		var Array list = Array.new()
		
		// BAAMovement commands
		modelAddButton(list, "moveForward")
		modelAddButton(list, "moveBackward")
		modelAddButton(list, "moveLeft")
		modelAddButton(list, "moveRight")
		
		modelAddButton(list, "lookLeft")
		modelAddButton(list, "lookRight")
		modelAddButton(list, "lookUp")
		modelAddButton(list, "lookDown")
		
		modelAddAxis(list, "analogMoveFB")
		modelAddAxis(list, "analogMoveLR")
		modelAddAxis(list, "analogLookLR")
		modelAddAxis(list, "analogLookUD")
		
		modelAddButton(list, "crouch")
		modelAddButton(list, "toggleCrouch")
		modelAddButton(list, "run")
		modelAddButton(list, "toggleRun")
		
		// BAAInteract commands
		modelAddButton(list, "primaryAction")
		modelAddButton(list, "secondaryAction")
		
		// quit game command
		modelAddButton(list, "quit")
		
		// screenshot command
		modelAddButton(list, "screenshot")
		
		// toggle console command
		modelAddButton(list, "toggleConsole")
		
		// update model
		editBindings.getModel().addAll(list)
	end
	
	/**
	 * \brief If command is present add EditBindingsListModelEntry for button use.
	 */
	protected func void modelAddButton(Array list, String name)
		var Command command = pCommandManager.getNamed(name)
		if command != null
			list.add(EditBindingsListModelEntry.new(command, \
				EditBindingsListModelEntry.InputSource.button))
		end
	end
	
	/**
	 * \brief If command is present add EditBindingsListModelEntry for axis use.
	 */
	protected func void modelAddAxis(Array list, String name)
		var Command command = pCommandManager.getNamed(name)
		if command != null
			list.add(EditBindingsListModelEntry.new(command, \
				EditBindingsListModelEntry.InputSource.axis))
		end
	end
end
