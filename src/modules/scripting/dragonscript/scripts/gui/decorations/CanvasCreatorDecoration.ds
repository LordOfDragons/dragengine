/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */


namespace Dragengine.Gui.Decorations

pin Dragengine.Gui.CanvasCreators
pin Dragengine.Scenery
pin Dragengine.Utils

 
/**
 * \brief Window decoration created using a canvas creators.
 */
class CanvasCreatorDecoration extends DefaultDecoration
	var CanvasCreator pCreatorActive
	var CanvasCreator pCreatorInactive
	var BorderSize pDecorationSize
	var Image pImageButtonCloseNormal
	var Image pImageButtonCloseHover
	var Image pImageButtonClosePressed
	var Image pImageButtonMaximizeNormal
	var Image pImageButtonMaximizeHover
	var Image pImageButtonMaximizePressed
	var Image pImageButtonMinimizeNormal
	var Image pImageButtonMinimizeHover
	var Image pImageButtonMinimizePressed
	var int pButtonGap
	var CanvasImage pCanvasButtonClose
	var CanvasImage pCanvasButtonMaximize
	var CanvasImage pCanvasButtonMinimize
	
	
	
	/** \brief Create decoration. */
	func new()
		pDecorationSize = BorderSize.new(0)
		pButtonGap = 2
	end
	
	
	
	/** \brief Canvas creator for active window. */
	func CanvasCreator getCreatorActive()
		return pCreatorActive
	end
	
	/** \brief Set canvas creator for active window. */
	func void setCreatorActive(CanvasCreator creator)
		pCreatorActive = creator
	end
	
	/** \brief Canvas creator for inactive window. */
	func CanvasCreator getCreatorInactive()
		return pCreatorInactive
	end
	
	/** \brief Set canvas creator for inactive window. */
	func void setCreatorInactive(CanvasCreator creator)
		pCreatorInactive = creator
	end
	
	/** \brief Decoration border size. */
	func BorderSize getDecorationSize()
		return pDecorationSize
	end
	
	/** \brief Set decoration border size. */
	func void setDecorationSize(BorderSize size)
		pDecorationSize = BorderSize.new(\
			DEMath.max(size.getLeft(), 0), DEMath.max(size.getTop(), 0), \
			DEMath.max(size.getRight(), 0), DEMath.max(size.getBottom(), 0))
	end
	
	
	
	/** \brief Image for close button in normal state. */
	func Image getImageButtonCloseNormal()
		return pImageButtonCloseNormal
	end
	
	/** \brief Set image for close button in normal state. */
	func void setImageButtonCloseNormal(Image image)
		pImageButtonCloseNormal = image
	end
	
	/** \brief Image for close button in hover state. */
	func Image getImageButtonCloseHover()
		return pImageButtonCloseHover
	end
	
	/** \brief Set image for close button in hover state. */
	func void setImageButtonCloseHover(Image image)
		pImageButtonCloseHover = image
	end
	
	/** \brief Image for close button in pressed state. */
	func Image getImageButtonClosePressed()
		return pImageButtonClosePressed
	end
	
	/** \brief Set image for close button in pressed state. */
	func void setImageButtonClosePressed(Image image)
		pImageButtonClosePressed = image
	end
	
	
	
	/** \brief Image for maximize button in normal state. */
	func Image getImageButtonMaximizeNormal()
		return pImageButtonMaximizeNormal
	end
	
	/** \brief Set image for maximize button in normal state. */
	func void setImageButtonMaximizeNormal(Image image)
		pImageButtonMaximizeNormal = image
	end
	
	/** \brief Image for maximize button in hover state. */
	func Image getImageButtonMaximizeHover()
		return pImageButtonMaximizeHover
	end
	
	/** \brief Set image for maximize button in hover state. */
	func void setImageButtonMaximizeHover(Image image)
		pImageButtonMaximizeHover = image
	end
	
	/** \brief Image for maximize button in pressed state. */
	func Image getImageButtonMaximizePressed()
		return pImageButtonMaximizePressed
	end
	
	/** \brief Set image for maximize button in pressed state. */
	func void setImageButtonMaximizePressed(Image image)
		pImageButtonMaximizePressed = image
	end
	
	
	
	/** \brief Image for minimize button in normal state. */
	func Image getImageButtonMinimizeNormal()
		return pImageButtonMinimizeNormal
	end
	
	/** \brief Set image for minimize button in normal state. */
	func void setImageButtonMinimizeNormal(Image image)
		pImageButtonMinimizeNormal = image
	end
	
	/** \brief Image for minimize button in hover state. */
	func Image getImageButtonMinimizeHover()
		return pImageButtonMinimizeHover
	end
	
	/** \brief Set image for minimize button in hover state. */
	func void setImageButtonMinimizeHover(Image image)
		pImageButtonMinimizeHover = image
	end
	
	/** \brief Image for minimize button in pressed state. */
	func Image getImageButtonMinimizePressed()
		return pImageButtonMinimizePressed
	end
	
	/** \brief Set image for minimize button in pressed state. */
	func void setImageButtonMinimizePressed(Image image)
		pImageButtonMinimizePressed = image
	end
	
	
	
	/** \brief Border size. */
	func BorderSize getBorderSize()
		return pDecorationSize
	end
	
	/** \brief Test which part of the decoration is hit if any. */
	func Decoration.Area areaHitBy(Point position)
		var Window window = getWindow()
		if window == null
			return Decoration.Area.nothing
		end
		
		// test if we are inside the window in which case nothing is hit
		if window.isPointInside(position - window.getPosition())
			return Decoration.Area.nothing
		end
		
		// determine the boundary of the window and the decoration and quickly
		// return nothing if we are outside somewhere.
		var int decoLeft = pDecorationSize.getLeft()
		var int decoRight = pDecorationSize.getRight()
		var int decoTop = pDecorationSize.getTop()
		var int decoBottom = pDecorationSize.getBottom()
		
		var int lx = position.getX() - window.getX() + decoLeft
		var int ly = position.getY() - window.getY() + decoTop
		var int lcx = window.getWidth() + pDecorationSize.getWidth()
		var int lcy = window.getHeight() + pDecorationSize.getHeight()
		
		if lx < 0 or ly < 0 or lx > lcx or ly > lcy
			return Decoration.Area.nothing
		end
		
		// check if we are in the title bar area
		if lx >= decoLeft and lx <= lcx - decoRight and ly < decoTop
			// check if we are in a button
			var Point localPosition = Point.new(lx, ly)
			var Point buttonPosition
			var Point buttonSize
			
			if pCanvasButtonClose != null
				buttonPosition = pCanvasButtonClose.getPosition()
				buttonSize = pCanvasButtonClose.getSize()
				if localPosition >= buttonPosition and localPosition <= buttonPosition + buttonSize
					return Decoration.Area.close
				end
			end
			
			if pCanvasButtonMaximize != null
				buttonPosition = pCanvasButtonMaximize.getPosition()
				buttonSize = pCanvasButtonMaximize.getSize()
				if localPosition >= buttonPosition and localPosition <= buttonPosition + buttonSize
					return Decoration.Area.maximize
				end
			end
			
			if pCanvasButtonMinimize != null
				buttonPosition = pCanvasButtonMinimize.getPosition()
				buttonSize = pCanvasButtonMinimize.getSize()
				if localPosition >= buttonPosition and localPosition <= buttonPosition + buttonSize
					return Decoration.Area.minimize
				end
			end
			
			// otherwise this is the title area
			return Decoration.Area.title
		end
		
		// otherwise this is somewhere on the border
		if lx < decoLeft
			if ly < decoTop
				return Decoration.Area.resizeTopLeft
				
			elif ly > lcy - decoBottom
				return Decoration.Area.resizeBottomLeft
				
			else
				return Decoration.Area.resizeLeft
			end
			
		elif lx > lcx - decoRight
			if ly < decoTop
				return Decoration.Area.resizeTopRight
				
			elif ly > lcy - decoBottom
				return Decoration.Area.resizeBottomRight
				
			else
				return Decoration.Area.resizeRight
			end
			
		elif ly < decoTop
			return Decoration.Area.resizeTop
			
		else
			return Decoration.Area.resizeBottom
		end
	end
	
	
	
	/** \brief Update canvas. */
	func void updateCanvas()
		var Window window = getWindow()
		if window == null
			return
		end
		
		var CanvasView decoCanvas = getCanvasView()
		decoCanvas.removeAllCanvas()
		
		createBorderCanvas(decoCanvas, window)
		createButtonCanvas(decoCanvas, window) // has to come before title since it uses it
		createTitleCanvas(decoCanvas, window)
		
		updateCanvasButtons()
	end
	
	
	
	/** \brief One or more button states changed. */
	func void onButtonStateChanged()
		updateCanvasButtons()
	end
	
	
	
	/** \brief Create border canvas. */
	protected func void createBorderCanvas(CanvasView decoCanvas, Window window)
		var Point size = window.getSize() + pDecorationSize.getSize()
		var Canvas canvasDecoration
		
		if window.getActivated()
			if pCreatorActive != null
				canvasDecoration = pCreatorActive.createCanvas(size)
			end
			
		else
			if pCreatorInactive != null
				canvasDecoration = pCreatorInactive.createCanvas(size)
				
			elif pCreatorActive != null
				canvasDecoration = pCreatorActive.createCanvas(size)
			end
		end
		
		if canvasDecoration != null
			decoCanvas.addCanvas(canvasDecoration)
		end
	end
	
	/** \brief Create title canvas. */
	protected func void createTitleCanvas(CanvasView decoCanvas, Window window)
		var String title = window.getTitle()
		if title.empty()
			return
		end
		
		var Font titleFont = getTitleFont()
		if titleFont == null
			return
		end
		
		title = window.translate(title)
		
		// available width depends on button canvas width
		var int width = window.getWidth() + pDecorationSize.getWidth()
		var int titleWidth = width - pDecorationSize.getWidth()
			// ^-- we have no title offset relative to decoration width. using decosize temporarily
		
		if pCanvasButtonClose != null
			titleWidth -= pCanvasButtonClose.getSize().getX() + pButtonGap
		end
		if pCanvasButtonMaximize != null
			titleWidth -= pCanvasButtonMaximize.getSize().getX() + pButtonGap
		end
		if pCanvasButtonMinimize != null
			titleWidth -= pCanvasButtonMinimize.getSize().getX() + pButtonGap
		end
		
		// create title
		var Color titleColor = getTitleColor()
		
		var Point textSize = titleFont.getTextSize(title)
		var int textPosX = DEMath.max((titleWidth - textSize.getX()) / 2, 0)
		var int textPosY = DEMath.max((pDecorationSize.getTop() - textSize.getY()) / 2, 0)
		
		var CanvasText canvasText = CanvasText.new()
		canvasText.setFont(titleFont)
		canvasText.setColor(titleColor)
		canvasText.setText(title)
		canvasText.setPosition(Point.new(pDecorationSize.getLeft() + textPosX, textPosY))
		canvasText.setSize(textSize)
		canvasText.setOrder(1.0)
		decoCanvas.addCanvas(canvasText)
	end
	
	/** \brief Create button canvas. */
	protected func void createButtonCanvas(CanvasView decoCanvas, Window window)
		var int top = pDecorationSize.getTop()
		var int x = window.getWidth() + pDecorationSize.getLeft()
		var Point imageSize
		
		// close button
		pCanvasButtonClose = null
		
		if window.getCanClose() and pImageButtonCloseNormal != null
			imageSize = pImageButtonCloseNormal.getSize()
			x -= imageSize.getX()
			
			pCanvasButtonClose = CanvasImage.new()
			pCanvasButtonClose.setImage(pImageButtonCloseNormal)
			pCanvasButtonClose.setPosition(Point.new(\
				x, DEMath.max((top - imageSize.getY()) / 2, 0)))
			pCanvasButtonClose.setSize(imageSize)
			pCanvasButtonClose.setOrder(2.0)
			decoCanvas.addCanvas(pCanvasButtonClose)
			
			x -= pButtonGap
		end
		
		// maximize button
		pCanvasButtonMaximize = null
		
		if window.getCanMaximize() and pImageButtonMaximizeNormal != null
			imageSize = pImageButtonMaximizeNormal.getSize()
			x -= imageSize.getX()
			
			pCanvasButtonMaximize = CanvasImage.new()
			pCanvasButtonMaximize.setImage(pImageButtonMaximizeNormal)
			pCanvasButtonMaximize.setPosition(Point.new(\
				x, DEMath.max((top - imageSize.getY()) / 2, 0)))
			pCanvasButtonMaximize.setSize(imageSize)
			pCanvasButtonMaximize.setOrder(3.0)
			decoCanvas.addCanvas(pCanvasButtonMaximize)
			
			x -= pButtonGap
		end
		
		// minimize button
		pCanvasButtonMinimize = null
		
		if window.getCanMinimize() and pImageButtonMinimizeNormal != null
			imageSize = pImageButtonMinimizeNormal.getSize()
			x -= imageSize.getX()
			
			pCanvasButtonMinimize = CanvasImage.new()
			pCanvasButtonMinimize.setImage(pImageButtonMinimizeNormal)
			pCanvasButtonMinimize.setPosition(Point.new(\
				x, DEMath.max((top - imageSize.getY()) / 2, 0)))
			pCanvasButtonMinimize.setSize(imageSize)
			pCanvasButtonMinimize.setOrder(4.0)
			decoCanvas.addCanvas(pCanvasButtonMinimize)
			
			x -= pButtonGap
		end
	end
	
	/** \brief Update canvas buttons. */
	protected func void updateCanvasButtons()
		var Window window = getWindow()
		if window == null
			return
		end
		
		var Image image
		
		// close button
		if pCanvasButtonClose != null
			if getButtonClosePressed()
				image = pImageButtonClosePressed
				
			elif getButtonCloseHover()
				image = pImageButtonCloseHover
			end
			
			if image == null
				image = pImageButtonCloseNormal
			end
			
			pCanvasButtonClose.setImage(image)
		end
		
		// maximize button
		if pCanvasButtonMaximize != null
			image = null
			
			if getButtonMaximizePressed()
				image = pImageButtonMaximizePressed
				
			elif getButtonMaximizeHover()
				image = pImageButtonMaximizeHover
			end
			
			if image == null
				image = pImageButtonMaximizeNormal
			end
			
			pCanvasButtonMaximize.setImage(image)
		end
		
		// minimize button
		if pCanvasButtonMinimize != null
			image = null
			
			if getButtonMinimizePressed()
				image = pImageButtonMinimizePressed
				
			elif getButtonMinimizeHover()
				image = pImageButtonMinimizeHover
			end
			
			if image == null
				image = pImageButtonMinimizeNormal
			end
			
			pCanvasButtonMinimize.setImage(image)
		end
	end
end
