/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
  
 
namespace Dragengine.Gui.Decorations.Factories


/**
 * Factory for no default decorations. Equals no decoration at all.
 */
class DefaultDecorationFactory implements DecorationFactory
	/** \brief Active title color. */
	private var Color pColorActiveTitle
	
	/** \brief Inactive title color. */
	private var Color pColorInactiveTitle
	
	/** \brief Active title font. */
	private var Font pFontActiveTitle
	
	/** \brief Inactive title font. */
	private var Font pFontInactiveTitle
	
	
	
	/** Creates a new decoration factory. */
	public func new()
		this.pColorActiveTitle = Color.black
		this.pColorInactiveTitle = Color.black
	end
	
	/** \brief Create copy of decoration factory. */
	public func new( DefaultDecorationFactory factory )
		this.pColorActiveTitle = factory.pColorActiveTitle
		this.pColorInactiveTitle = factory.pColorInactiveTitle
		this.pFontActiveTitle = factory.pFontActiveTitle
		this.pFontInactiveTitle = factory.pFontInactiveTitle
	end
	
	
	
	/** \brief Color of the active window title. */
	public func Color getActiveTitleColor()
		return this.pColorActiveTitle
	end
	
	/** \brief Set color of the active window title. */
	public func void setActiveTitleColor( Color color )
		this.pColorActiveTitle = color
	end
	
	/** \brief Color of the inactive window title. */
	public func Color getInactiveTitleColor()
		return this.pColorInactiveTitle
	end
	
	/** \brief Set color of the inactive window title. */
	public func void setInactiveTitleColor( Color color )
		this.pColorInactiveTitle = color
	end
	
	/** \brief Font for active window title. */
	public func Font getActiveTitleFont()
		return this.pFontActiveTitle
	end
	
	/** \brief Set font for active window title. */
	public func void setActiveTitleFont( Font font )
		this.pFontActiveTitle = font
	end
	
	/** \brief Font for inactive window title. */
	public func Font getInactiveTitleFont()
		return this.pFontInactiveTitle
	end
	
	/** \brief Set font for inactive window title. */
	public func void setInactiveTitleFont( Font font )
		this.pFontInactiveTitle = font
	end
	
	
	
	/** \brief Create decoration. */
	public func Decoration createDecoration()
		var DefaultDecoration decoration = DefaultDecoration.new()
		this.initDefaultDecoration( decoration )
		return decoration
	end
	
	/** \brief Init default decoration part for use by subclasses. */
	protected func void initDefaultDecoration( DefaultDecoration decoration )
		decoration.setActiveTitleColor( this.pColorActiveTitle )
		decoration.setInactiveTitleColor( this.pColorInactiveTitle )
		decoration.setActiveTitleFont( this.pFontActiveTitle )
		decoration.setInactiveTitleFont( this.pFontInactiveTitle )
	end
	
	/**
	 * \brief Set parameter.
	 * 
	 * Supported parameters:
	 * | name | value | Setter |
	 * | active.title.textColor | Color | setActiveTitleColor |
	 * | active.title.font | Font | setActiveTitleFont |
	 * | inactive.title.textColor | Color | setInactiveTitleColor |
	 * | inactive.title.font | Font | setInactiveTitleFont |
	 */
	public func void setParameter( String name, Object value )
		if name.equals( "active.title.textColor" )
			this.setActiveTitleColor( value cast Color )
			
		elif name.equals( "active.title.font" )
			this.setActiveTitleFont( value cast Font )
			
		elif name.equals( "inactive.title.textColor" )
			this.setInactiveTitleColor( value cast Color )
			
		elif name.equals( "inactive.title.font" )
			this.setInactiveTitleFont( value cast Font )
			
		else
			throw EInvalidParam.new()
		end
	end
	
	/** \brief Create factory copy. */
	public func DecorationFactory copyFactory()
		return DefaultDecorationFactory.new()
	end
end
