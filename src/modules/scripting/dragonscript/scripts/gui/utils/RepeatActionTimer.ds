/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */


namespace Dragengine.Gui

pin Dragengine.Gui.Events
pin Dragengine.Gui.Listeners
pin Dragengine.Scenery
pin Dragengine.Utils


/**
 * \brief Timer repeating an action.
 */
class RepeatActionTimer extends Timer
	/** \brief Action to repeat. */
	private var ActionListener pAction
	
	/** \brief Source sending event. */
	private var Object pSource
	
	/** \brief Modifiers for sending event. */
	private var int pModifiers
	
	/** \brief Repeat delay in seconds. */
	private var float pRepeatDelay
	
	
	
	/**
	 * \brief Create repeat action timer with 0.5s initial delay and 0.05 repeat delay.
	 * \param action Action to repeat.
	 * \param source Source sending the action.
	 * \param modifiers Modifiers for sending event.
	 */
	public func new( ActionListener action, Object source, int modifiers ) \
	this( action, source, modifiers, 0.5, 0.05 )
	end
	
	/**
	 * \brief Create repeat action timer.
	 * \param action Action to repeat.
	 * \param source Source sending the action.
	 * \param modifiers Modifiers for sending event.
	 * \param initialDelay Delay before repeating actions in seconds.
	 * \param repeatDelay Delay between repeated actions in seconds.
	 */
	public func new( ActionListener action, Object source, int modifiers, \
	float initialDelay, float repeatDelay ) super( initialDelay, true )
		if action == null or source == null
			throw EInvalidParam.new()
		end
		
		this.pAction = action
		this.pSource = source
		this.pModifiers = modifiers
		this.pRepeatDelay = repeatDelay
	end
	
	
	
	/** \brief Action to repeat. */
	public func ActionListener getAction()
		return this.pAction
	end
	
	/** \brief Set action to repeat. */
	public func void setAction( ActionListener action )
		if action == null
			throw EInvalidParam.new()
		end
		this.pAction = action
	end
	
	/** \brief Source sending event. */
	public func Object getSource()
		return this.pSource
	end
	
	/** \brief Set source sending event. */
	public func void setSource( Object source )
		if source == null
			throw EInvalidParam.new()
		end
		this.pSource = source
	end
	
	/** \brief Modifiers for sending event. */
	public func int getModifiers()
		return this.pModifiers
	end
	
	/** \brief Set modifiers for sending event. */
	public func void setModifiers( int modifiers )
		this.pModifiers = modifiers
	end
	
	/** \brief Repeat delay in seconds. */
	public func float getRepeatDelay()
		return this.pRepeatDelay
	end
	
	/** \brief Set repeat delay in seconds. */
	public func void setRepeatDelay( float delay )
		this.pRepeatDelay = delay
	end
	
	
	
	/** \brief Send event. */
	public func void sendEvent()
		this.pAction.onAction( ActionEvent.new( this.pSource, \
			ActionEvent.idAction, this.pModifiers ) )
	end
	
	
	
	/** \brief Timer elapsed. */
	public func void fire()
		this.setTriggerTime( this.pRepeatDelay )
		this.sendEvent()
	end
end
