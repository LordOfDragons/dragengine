/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */


namespace Dragengine.Gui
pin Dragengine.Gui.Events
pin Dragengine.Gui.Layouts


/**
 * The GameRoot widget is a reduced Desktop widget. It does work
 * with any widgets not only windows and does not provide a processEvent
 * function like Desktop does. The GameRoot forwards processEvent messages
 * to the activated widget. This way a Game can easily provide a menu
 * using a transparent Desktop widget with a SceneRenderer below. The
 * Desktop and SceneRenderer can process the events send in the best suited
 * way (a Desktop would maintain an absolute mouse whereas a SceneRenderer
 * can use the relative mouse events directly).
 */
class GameRoot extends Panel
	/** The current widget to receive input */
	private var Widget pActiveWidget
	
	
	
	/**
	 * Create GameRoot. GameRoot is located at (0,0) covering the entire screen.
	 */
	public func new() super( 0, 0, GraphicSystem.getWindowWidth(), GraphicSystem.getWindowHeight() )
		this.setLayout( FixedLayout.new() )
		
		this.setEnabled( true )
	end
	
	/**
	 * Disposes of the widget. This cleans all references and prepars the widget
	 * for beeing freed. If the widget is already disposed nothing happens.
	 */
	public func void dispose()
		this.pActiveWidget = null
		super.dispose()
	end
	
	
	
	/** Active widget if any. */
	public func Widget getActiveWidget()
		return this.pActiveWidget
	end
	
	/** Set active widget if any. */
	public func void setActiveWidget( Widget widget )
		if not this.hasWidget( widget )
			throw EInvalidParam.new()
		end
		this.pActiveWidget = widget
	end
	
	
	
	/**
	 * Removes a widget from this container. If the active widget is the
	 * removed one is unregistered as the active widget
	 */
	public func void removeWidget( Widget widget )
		if this.pActiveWidget == widget
			this.pActiveWidget = null
		end
		super.removeWidget( widget )
	end
	
	
	
	/**
	 * Process an event. This allows the widget to be used as the root
	 * widget in a game. Using this function you can implement your own
	 * desktop management routines or use no windows at all. An event
	 * is send to the root widget using this function. No other widget
	 * has to get an event sent through this function. Use the sendEvent
	 * function to further dispatch events through all widgets.<br>
	 * The default implementation is to send the event to yourself.
	 * Overwrite this behaviour to implement Desktop Widgets.
	 */
	public func void processEvent( Event event )
		if this.pActiveWidget != null
			this.pActiveWidget.processEvent( event )
		end
	end
end
