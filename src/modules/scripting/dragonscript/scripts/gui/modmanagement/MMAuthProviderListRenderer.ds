/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

namespace Dragengine.Gui.ModManagement
pin Dragengine.Services.User
pin Dragengine.Gui.Layouts
pin Dragengine.Gui.Designers


/**
 * \brief List element renderer lists with ListEntry instances.
 * \version 1.23
 * 
 * For use in authentication provider list box.
 */
class MMAuthProviderListRenderer implements ListElementRenderer
	/**
	 * \brief Wraps authentication provider list entry.
	 */
	class ListEntry
		public var ServiceUser service
		public var ServiceUserFeatures features
		
		func new(ServiceUser service, ServiceUserFeatures features)
			this.service = service
			this.features = features
		end
	end
	
	/** \brief Widget representing authentication provider. */
	class ProviderWidget extends Panel
		var DisplayImage pImageIcon
		var Label pLabelName
		var String pDesignerSelectorBase, pDesignerSelectorSuffix
		
		
		/**
		 * \brief Create widget displaying authentication provider.
		 * \param designerSelector Base designer selector to use.
		 */
		func new(String designerSelector) super(FlowLayout.new(LayoutAxis.x))
			runWhileBlockingLayout(block
				createContent()
				setAllDesignerSelectors(designerSelector, "")
			end)
		end
		
		/** \brief Dispose of widget. */
		func void dispose()
			pImageIcon = null
			pLabelName = null
			super.dispose()
		end
		
		
		/** \brief Base designer selector. */
		func String getDesignerSelectorBase()
			return pDesignerSelectorBase
		end
		
		/** \brief Designer selector suffix. */
		func String getDesignerSelectorSuffix()
			return pDesignerSelectorSuffix
		end
		
		/** \brief Set all designer selectors. */
		func void setAllDesignerSelectors(String selector, String suffix)
			pDesignerSelectorBase = selector
			pDesignerSelectorSuffix = suffix
			
			runWhileBlockingLayout(block
				setAllDesignerSelectorsBlocked()
			end)
			doLayoutIfBlocked()
		end
		
		/** \brief Update. */
		func void update(ListEntry provider)
			runWhileBlockingLayout(block
				pImageIcon.setImage(provider.features.authTokenProvider.icon)
				pLabelName.setText(provider.features.authTokenProvider.name)
			end)
			doLayoutIfBlocked()
		end
		
		
		/**
		 * \brief Set all designer selectors.
		 * 
		 * Called from inside runWhileBlockingLayout(). Use getDesignerSelectorBase() and
		 * getDesignerSelectorSuffix() to construct designer selector all affected widgets.
		 */
		protected func void setAllDesignerSelectorsBlocked()
			setDesignerSelector("Panel." + pDesignerSelectorBase + pDesignerSelectorSuffix)
			pImageIcon.setDesignerSelector("Image." + pDesignerSelectorBase + pDesignerSelectorSuffix)
			pLabelName.setDesignerSelector("Label." + pDesignerSelectorBase + pDesignerSelectorSuffix)
		end
		
		/** \brief Create content. */
		protected func void createContent()
			pImageIcon = DisplayImage.new(null, RepeatMode.stretchRatio)
			addWidget(pImageIcon)
			
			pLabelName = Label.new("")
			addWidget(pLabelName)
		end
	end
	
	
	var String pDesignerSelector
	var ListEntry pDefaultProvider
	var Point pDefaultMinimumSize
	
	
	/**
	 * \brief Create authentication provider list model renderer.
	 * 
	 * Uses base designer selector "ListRenderer.MMAuthProviderListRenderer".
	 */
	func new() this("ListRenderer.MMAuthProviderListRenderer")
	end
	
	/**
	 * \brief Create authentication provider list model renderer.
	 */
	func new(String designerSelector)
		pDesignerSelector = designerSelector
		pDefaultMinimumSize = Point.new()
		
		pDefaultProvider = ListEntry.new(null, ServiceUserFeatures.new())
		pDefaultProvider.features.authTokenProvider = ServiceUserFeatures.AuthTokenProvider.new()
		pDefaultProvider.features.authTokenProvider.name = String.new('X', 20)
	end
	
	
	
	/** \brief Designer selector. */
	func String getDesignerSelector()
		return pDesignerSelector
	end
	
	/** \brief Default authentication provider used to measure default size. */
	func ListEntry getDefaultProvider()
		return pDefaultProvider
	end
	
	/** \brief Minimum size to use unless default element is larger. */
	func Point getDefaultMinimumSize()
		return pDefaultMinimumSize
	end
	
	/** \brief Set minimum size to use unless default element is larger. */
	func void setDefaultMinimumSize(Point size)
		if size == null
			throw ENullPointer.new("size")
		end
		pDefaultMinimumSize = Point.new().largest(size)
	end
	
	
	
	/**
	 * \brief Create widget representing authentication provider in list box.
	 * 
	 * Creates instance of \ref #ProviderWidget.
	 */
	func Widget createRenderer(ListBox listBox)
		return ProviderWidget.new(pDesignerSelector)
	end
	
	/** \brief Update widget representing authentication provider in list box. */
	func void updateRenderer(ListBox listBox, Widget renderer, Object element, bool selected, bool focused)
		var ListEntry provider = element cast ListEntry
		if provider == null
			provider = pDefaultProvider
		end
		
		var String selector = pDesignerSelector, suffix = ""
		if selected
			suffix = ".Selected"
		end
		
		var ProviderWidget widget = renderer cast ProviderWidget
		widget.update(provider)
		widget.setAllDesignerSelectors(selector, suffix)
	end
	
	/** \brief Default size of widget in list box. */
	func Point getDefaultSize(ListBox listBox)
		// to properly measure the size a Container instance is created with the gui theme
		// from the listBox. if the gui theme would be assigned directly to the renderer
		// potentially use of gui theme selectors are skipped causing strange to find
		// errors. the empty widget designer ensures the container has no padding nor any
		// other unwanted designer parameters applied
		var Container container = Container.new(BoxLayout.new(LayoutAxis.y), block Container c
			c.setDesigner(DefaultWidgetDesigner.new())
			c.setGuiTheme(listBox.getGuiTheme())
			
			var Widget renderer = createRenderer(listBox)
			c.addWidget(renderer)
			updateRenderer(listBox, renderer, pDefaultProvider, false, false)
		end)
		container.doLayout()
		
		var Point size = container.getMinimumSize()
		container.dispose()
		return size.largest(pDefaultMinimumSize)
	end
end
