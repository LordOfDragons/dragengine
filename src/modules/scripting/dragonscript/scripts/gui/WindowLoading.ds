/* 
 * Drag[en]gine DragonScript Script Module
 *
 * Copyright (C) 2020, Roland Pl√ºss (roland@rptd.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */


namespace Dragengine.Gui

pin Dragengine.Gui.Events
pin Dragengine.Gui.Layouts
pin Dragengine.Scenery
pin Dragengine.Utils
pin Dragengine.Preloading



/**
 * \brief Window showing progress of loading game.
 * 
 * Window composes of a centrized box containing a text above a progress bar. The window
 * background can be styled using setBgStyle(). This assigns the window the designer selector
 * "WindowLoading.{style-name}". Typically this extends the basic Window designer with a
 * background image.
 * 
 * The box can be styled using "Panel.WindowLoading". The text can be styled using
 * "Label.WindowLoading". The progress bar can be styled using
 * "ProgressBar.WindowLoading".
 * 
 * The assigned PreloadManager is used to update the progress bar if not null. Call
 * storeMaxPreloadCounterValue() to use the current number of resources to preload as the
 * maximum value to achive. The window updates itself every frame update to reflect the
 * progress. Other than this the loading window has no additional logic. You have to call
 * dispose() on the window once the loading finished and you want to continue.
 * 
 * If no preload manager is used the updating of the progress is the responsibility of the
 * user. This allows to use the loading window for tracking loading which is governed by
 * steps instead of resource loading.
 * 
 * The loading text can be adjusted using getModelText().
 * 
 * If you want to extend the content you can overwrite createPanelProgress() to create your
 * own progress panel. The TextModel and RangeModel are present at this time for your to
 * use in your layout.
 */
class WindowLoading extends Window
	var TextModel pModelText
	var TextModel pModelTextFinished
	var RangeModel pModelProgress
	var RangeModel pModelFinished
	var PreloadManager pPreloadManager
	var ActionListener pWaitForPlayerListener
	
	
	
	/** \brief Create window. */
	func new()
		pModelText = DefaultTextModel.new("Loading...")
		pModelTextFinished = DefaultTextModel.new("Press any key to Start")
		pModelProgress = DefaultRangeModel.new(0, 100, 1, 0, 1)
		pModelFinished = DefaultRangeModel.new(0, 2, 1, 0, 1)
		
		createWindowContent()
		startFrameUpdater()
	end
	
	/** \brief Dispose of Widget. */
	func void dispose()
		super.dispose()
		
		pWaitForPlayerListener = null
		pPreloadManager = null
		pModelFinished = null
		pModelProgress = null
		pModelTextFinished = null
		pModelText = null
	end
	
	
	
	/** \brief Set window style, for example "Bg1". */
	func void setBgStyle(String style)
		if style != null
			setDesignerSelector("WindowLoading." + style)
			
		else
			setDesignerSelector("WindowLoading")
		end
	end
	
	/** \brief Text model. */
	func TextModel getModelText()
		return pModelText
	end
	
	/** \brief Finished text model. */
	func TextModel getModelTextFinished()
		return pModelTextFinished
	end
	
	/** \brief Progress range model. */
	func RangeModel getModelProgress()
		return pModelProgress
	end
	
	/** \brief Range model switching between progress bar (0) and finished text (1). */
	func RangeModel getModelFinished()
		return pModelFinished
	end
	
	/** \brief Preload manager */
	func PreloadManager getPreloadManager()
		return pPreloadManager
	end
	
	/**
	 * \brief Set preload manager.
	 * 
	 * If preload manager is not null the progress model is updated with the number of
	 * resources to preload as the maximum value and the current value set to 0.
	 */
	func void setPreloadManager(PreloadManager preloadManager)
		pPreloadManager = preloadManager
		
		if preloadManager == null
			return
		end
		
		pModelProgress.setMaximum(preloadManager.getCounter().getValue())
		pModelProgress.setValue(0)
	end
	
	/**
	 * \brief Switch to finished text and wait for player to use any input device to continue.
	 */
	func void waitForPlayer(ActionListener listener)
		pModelFinished.setValue(1)
		grabFocus()
		pWaitForPlayerListener = listener
	end
	
	
	
	/**
	 * \brief Do frame update.
	 * 
	 * Called every frame update if startFrameUpdater() is called.
	 * 
	 * \param elapsed Elapsed time since the last frame update. Equals Engine.getElapsedTime().
	 */
	func void onFrameUpdate(float elapsed)
		updateProgress()
	end
	
	/** \brief Mouse button has been released. */
	func void onButtonRelease(MouseEvent event)
		super.onButtonRelease(event)
		triggerWaitForPlayer()
	end
	
	/** \brief Key on the keyboard has been released. */
	func void onKeyRelease(KeyEvent event)
		super.onKeyRelease(event)
		triggerWaitForPlayer()
	end
	
	/** \brief Trigger wait for player listener if present. */
	protected func void triggerWaitForPlayer()
		if pWaitForPlayerListener == null
			return
		end
		
		var ActionListener listener = pWaitForPlayerListener
		pWaitForPlayerListener = null
		listener.onAction(ActionEvent.new(this, ActionEvent.idAction, 0))
	end
	
	
	
	/**
	 * \brief Create window content.
	 * 
	 * Called during constructor time.
	 */
	protected func void createWindowContent()
		runWhileBlockingLayout(block
			setDesignerSelector("WindowLoading")
			setLayout(StackLayout.new())
			setWindowState(Window.WindowState.maximized)
			setCanReorder(false)
			setCanMove(false)
			setCanResize(false)
			setCanClose(false)
			setCanMaximize(false)
			setCanMinimize(false)
			
			setCanFocus(true) // on purpose
			
			addWidget(createPanelProgress())
			
			pModelFinished.setValue(0)
		end)
	end
	
	/**
	 * \brief Create progress panel.
	 * 
	 * Window is using stack layout. Panel is going to cover the entire window.
	 * Called from createWindowContent() during constructor time.
	 */
	protected func Panel createPanelProgress()
		return Panel.new(CentrizedBoxLayout.new(LayoutAxis.y, 0), block Panel panel
			panel.addWidget(Panel.new(FlowLayout.new(LayoutAxis.y, 5), block Panel panel2
				panel2.setDesignerSelector("Panel.WindowLoading")
				
				panel2.addWidget(Label.new(pModelText, "Label.WindowLoading"))
				
				panel2.addWidget(SwitchPanel.new(pModelFinished, block SwitchPanel switchPanel
					var ProgressBar progressBar = ProgressBar.new(Orientation.horizontal, pModelProgress)
					progressBar.setDesignerSelector("ProgressBar.WindowLoading")
					switchPanel.addWidget(progressBar)
					
					switchPanel.addWidget(Label.new(pModelTextFinished, "Label.WindowLoading.Finished"))
				end))
			end))
		end)
	end
	
	/**
	 * \brief Update current progress from preload manager.
	 * 
	 * If preload manager is present sets the progress value to the number of already
	 * loaded resources.
	 */
	protected func void updateProgress()
		if pPreloadManager != null
			pModelProgress.setValue(pModelProgress.getMaximum() \
				- pPreloadManager.getCounter().getValue())
		end
	end
end
