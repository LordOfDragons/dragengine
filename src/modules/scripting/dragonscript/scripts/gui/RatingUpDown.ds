/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

namespace Dragengine.Gui
pin Dragengine.Utils
pin Dragengine.Gui.Layouts
pin Dragengine.Gui.Events


/**
 * \brief Rating widget supporting up and down voting.
 * \version 1.23
 * 
 * Designer selector is "RatingUpDown". Buttons can be styled using:
 * - Button.RatingUpDown.Up
 * - Button.RatingUpDown.Down
 */
class RatingUpDown extends Panel implements RatingModelListener
	var RatingModel pModel
	var ToggleButton pButtonUp, pButtonDown
	
	
	/**
	 * \brief Create rating widget.
	 * \param model Rating model.
	 */
	func new(RatingModel model)
		pModel = model
		
		runWhileBlockingLayout(block
			createContent()
			setDesignerSelector("RatingUpDown")
			updateStates()
		end)
		
		model.addListener(this)
	end
	
	/** \brief Dispose of widget. */
	func void dispose()
		pModel.removeListener(this)
		pButtonUp = null
		pButtonDown = null
		
		super.dispose()
	end
	
	
	/** \brief Update UI states. */
	func void updateStates()
		runWhileBlockingLayout(block
			var FormattingHelper fh = FormattingHelper.new()
			var Dictionary ratingCounts = pModel.getCountsPerType()
			var float countUp = ratingCounts.getAt(1, 0) cast float
			var float countDown = ratingCounts.getAt(0, 0) cast float
			var int rating = pModel.getRating() != null if pModel.getRating().value() else -1
			
			pButtonUp.setText(fh.formatCount(countUp))
			pButtonUp.setToggled(rating == 1)
			
			pButtonDown.setText(fh.formatCount(countDown))
			pButtonDown.setToggled(rating == 0)
		end)
	end
	
	
	/**
	 * \brief Rate up button clicked.
	 * 
	 * If current model rating is not 1 sets model rating to 1.
	 * Otherwise sets model rating to null.
	 */
	func void onRateUp()
		var Integer rating = pModel.getRating()
		
		if rating == null or not rating.equals(1)
			pModel.setRating(Integer.new(1))
			
		else
			pModel.setRating(null)
		end
	end
	
	/**
	 * \brief Rate down button clicked.
	 * 
	 * If current model rating is not 0 sets model rating to 0.
	 * Otherwise sets model rating to null.
	 */
	func void onRateDown()
		var Integer rating = pModel.getRating()
		
		if rating == null or not rating.equals(0)
			pModel.setRating(Integer.new(0))
			
		else
			pModel.setRating(null)
		end
	end
	
	
	/** \brief Rating changed. */
	func void ratingChanged(RatingModel model)
		updateStates()
	end
	
	/** \brief Counts per type changed. */
	func void countsPerTypeChanged(RatingModel model)
		updateStates()
	end
	
	
	/** \brief Designer selector changed. */
	func void onDesignerSelectorChanged()
		super.onDesignerSelectorChanged()
		
		runWhileBlockingLayout(block
			var String selector = getDesignerSelector()
			var String buttonSelector = "Button." + selector
			
			pButtonUp.setDesignerSelector(buttonSelector + ".Up")
			pButtonDown.setDesignerSelector(buttonSelector + ".Down")
		end)
	end
	
	
	/** \brief Up vote button. */
	protected func ToggleButton getButtonUp()
		return pButtonUp
	end
	
	/** \brief Down vote button. */
	protected func ToggleButton getButtonDown()
		return pButtonDown
	end
	
	/** \brief Create content. */
	protected func void createContent()
		setLayout(GridLayout.new(2, 1))
		
		pButtonUp = ToggleButton.new("", BlockActionListener.new(block ActionEvent event
			onRateUp()
		end))
		pButtonUp.setLayout(CentrizedBoxLayout.new(LayoutAxis.x))
		addWidget(pButtonUp)
		
		pButtonDown = ToggleButton.new("", BlockActionListener.new(block ActionEvent event
			onRateDown()
		end))
		pButtonDown.setLayout(CentrizedBoxLayout.new(LayoutAxis.x))
		addWidget(pButtonDown)
	end
end
