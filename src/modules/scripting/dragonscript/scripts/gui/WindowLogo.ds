/* 
 * Drag[en]gine DragonScript Script Module
 *
 * Copyright (C) 2020, Roland Pl√ºss (roland@rptd.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */


namespace Dragengine.Gui

pin Dragengine.Gui.Events
pin Dragengine.Gui.Layouts
pin Dragengine.Scenery
pin Dragengine.Utils
pin Dragengine.Preloading



/**
 * \brief Window showing a logo image or video typically used while starting up a game.
 * 
 * Window composes of a single panel containing a widget stack of a DisplayVideo and a
 * DisplayImage ontop of it. Usually either a video or an image is assigned but both can
 * be used to have a video overlay. The window background can be styled using setBgStyle().
 * This assigns the window the designer selector "WindowLogo.{style-name}". Typically this
 * extends the basic Window designer with a background image paired with padding for example
 * to show a company logo at all times at the bottom or adding a framing. The image and
 * video widget can also be styled using "Image.WindowLogo" and "Video.WindowLogo".
 * The content panel stack layout is set to fit the video and image into the window without
 * changing the aspect ratio. This potentially leaves the background of the window visible
 * so you might want to style the background for this case.
 * 
 * Optionally fading in and out the panel with the image and video is supported. This can
 * be used for image where you can not encode fading like with videos.
 * 
 * Once the video finished playing and after a timeout the window is closed and an assigned
 * ActionListener is called.
 */
class WindowLogo extends Window
	/** \brief States. */
	enum State
		/** \brief Waiting to start fading in. */
		init
		
		/** \brief Delay before fading in. */
		delayFadeIn
		
		/** \brief Fading in. */
		fadeIn
		
		/** \brief Operational showing image or video. */
		operational
		
		/** \brief Fading out. */
		fadeOut
		
		/** \brief Delay before calling action. */
		delayAction
		
		/** \brief Finished. */
		finished
	end
	
	/**
	 * \brief Action finished showing another WindowLogo.
	 *
	 * To use this action listener assign the WindowLogo to show an appropriate action
	 * listener before using ShowLogoAction.
	 */
	class ShowLogoAction implements ActionListener
		/** \brief Desktop to show window in. */
		var Desktop pDesktop
		
		/** \brief Window to show. */
		var WindowLogo pWindow
		
		
		
		/** \brief Create action showing window if called in BaseGameApp.getDesktop(). */
		func new(WindowLogo window) this(BaseGameApp.getApp().getDesktop(), window)
		end
		
		/** \brief Create action showing window if called. */
		func new(Desktop desktop, WindowLogo window)
			if desktop == null or window == null
				throw EInvalidParam.new()
			end
			
			pDesktop = desktop
			pWindow = window
		end
		
		
		
		/** \brief Desktop to show window in. */
		func Desktop getDesktop()
			return pDesktop
		end
		
		/** \brief Window to show if action is called. */
		func WindowLogo getWindow()
			return pWindow
		end
		
		
		
		/** \brief Run action. */
		func void onAction(ActionEvent event)
			pWindow.showLogo(pDesktop)
		end
	end
	
	/**
	 * \brief Activate microphone while window is shown.
	 * 
	 * Upon showing window stores current active microphone and activates the window one.
	 * Upon closing the window reactivates the previous microphone.
	 */
	class ActivateMicrophoneWhileShown extends DefaultWidgetListener
		var Microphone pRestoreMicrophone
		var Microphone pMicrophone
		
		/** \brief Create listener with microphone to activate while window is shown. */
		func new(Microphone microphone)
			pMicrophone = microphone
		end
		
		/** \brief Widget has been shown. */
		func void onWidgetShown(WidgetEvent event)
			pRestoreMicrophone = AudioSystem.getActiveMicrophone()
			AudioSystem.setActiveMicrophone(pMicrophone)
		end
		
		/** \brief Widget has been hidden. */
		func void onWidgetHidden(WidgetEvent event)
			AudioSystem.setActiveMicrophone(pRestoreMicrophone)
		end
	end
	
	
	
	var float pTimeDelayFadeIn
	var float pTimeFadeIn
	var float pTimeFadeOut
	var float pTimeDelayAction
	var float pTimeout
	var bool pAllowSkip
	var ActionListener pActionFinished
	
	var float pElapsed
	var State pState
	
	var DisplayVideo pDisplayVideo
	var DisplayImage pDisplayImage
	var Panel pPanelContent
	
	var Microphone pMicrophone
	var Speaker pSpeakerSound
	var Speaker pSpeakerVideo
	
	
	
	/** \brief Create window. */
	func new()
		pTimeDelayFadeIn = 0
		pTimeFadeIn = 0
		pTimeFadeOut = 0
		pTimeDelayAction = 0
		pTimeout = 0
		pAllowSkip = true
		pElapsed = 0
		pState = State.init
		
		pMicrophone = Microphone.new()
		
		createWindowContent()
		startFrameUpdater()
		
		addWidgetListener(ActivateMicrophoneWhileShown.new(pMicrophone))
	end
	
	/** \brief Dispose of Widget. */
	func void dispose()
		pDisplayVideo = null
		pDisplayImage = null
		pActionFinished = null
		
		super.dispose()
	end
	
	
	
	/** \brief Time in seconds to wait before fade in content. */
	func float getTimeDelayFadeIn()
		return pTimeDelayFadeIn
	end
	
	/** \brief Set time in seconds to wait before fade in content. */
	func void setTimeDelayFadeIn(float time)
		pTimeDelayFadeIn = DEMath.max(time, 0.0)
	end
	
	/** \brief Time in seconds to fade in content. */
	func float getTimeFadeIn()
		return pTimeFadeIn
	end
	
	/** \brief Set time in seconds to fade in content. */
	func void setTimeFadeIn(float time)
		pTimeFadeIn = DEMath.max(time, 0.0)
	end
	
	/** \brief Time in seconds to fade out content. */
	func float getTimeFadeOut()
		return pTimeFadeOut
	end
	
	/** \brief Set time in seconds to fade out content. */
	func void setTimeFadeOut(float time)
		pTimeFadeOut = DEMath.max(time, 0.0)
	end
	
	/** \brief Time in seconds to wait before calling action. */
	func float getTimeDelayAction()
		return pTimeDelayAction
	end
	
	/** \brief Set time in seconds to wait before calling action. */
	func void setTimeDelayAction(float time)
		pTimeDelayAction = DEMath.max(time, 0.0)
	end
	
	/** \brief Time in seconds to show content. */
	func float getTimeout()
		return pTimeout
	end
	
	/** \brief Set time in seconds to show content. */
	func void setTimeout(float time)
		pTimeout = DEMath.max(time, 0.0)
	end
	
	/** \brief Allow player to skip the logo. */
	func bool getAllowSkip()
		return pAllowSkip
	end
	
	/** \brief Set if player is allowed to skip the logo. */
	func void setAllowSkip(bool allowSkip)
		pAllowSkip = allowSkip
	end
	
	/** \brief Action listener to call when the window closes. */
	func ActionListener getActionFinished()
		return pActionFinished
	end
	
	/** \brief Set action listener to call when the window closes. */
	func void setActionFinished(ActionListener listener)
		pActionFinished = listener
	end
	
	
	
	/** \brief Image logo or null if not set. */
	func Image getImageLogo()
		return pDisplayImage.getImage()
	end
	
	/** \brief Set image logo or null if not set. */
	func void setImageLogo(Image image)
		pDisplayImage.setImage(image)
	end
	
	/** \brief Video logo or null if not set. */
	func Video getVideoLogo()
		return pDisplayVideo.getVideo()
	end
	
	/** \brief Set video logo or null if not set. */
	func void setVideoLogo(Video video)
		pDisplayVideo.setVideo(video)
	end
	
	/** \brief Sound to play or null if not set. */
	func Sound getSound()
		return pSpeakerSound.getSound()
	end
	
	/** \brief Set sound to play or null if not set. */
	func void setSound(Sound sound)
		pSpeakerSound.setSound(sound)
	end
	
	
	
	/** \brief Elapsed time in the current state. */
	func float getElapsed()
		return pElapsed
	end
	
	/** \brief Set elapsed time in the current state. */
	protected func void setElapsed(float elapsed)
		pElapsed = elapsed
	end
	
	/** \brief Current state. */
	func State getState()
		return pState
	end
	
	/** \brief Set current state. */
	protected func void setState(State state)
		pState = state
	end
	
	
	
	/** \brief Display video widget. */
	protected func DisplayVideo getDisplayVideo()
		return pDisplayVideo
	end
	
	/** \brief Display image widget. */
	protected func DisplayImage getDisplayImage()
		return pDisplayImage
	end
	
	/** \brief Content panel. */
	protected func Panel getPanelContent()
		return pPanelContent
	end
	
	
	
	/** \brief Set window style, for example "Bg1". */
	func void setBgStyle(String style)
		if style != null
			setDesignerSelector("WindowLogo." + style)
			
		else
			setDesignerSelector("WindowLogo")
		end
	end
	
	
	
	/** \brief Window microphone. */
	func Microphone getMicrophone()
		return pMicrophone
	end
	
	/** \brief Video speaker. */
	func Speaker getSpeakerVideo()
		return pSpeakerVideo
	end
	
	/** \brief Sound speaker. */
	func Speaker getSpeakerSound()
		return pSpeakerSound
	end
	
	
	
	/**
	 * \brief Show window and start fading in.
	 * 
	 * Once finished stored action finished is called.
	 */
	func void showLogo(Desktop desktop)
		showLogo(desktop, pActionFinished)
	end
	
	/**
	 * \brief Show window and start fading in.
	 * 
	 * Once finished \em actionFinished is called.
	 */
	func void showLogo(Desktop desktop, ActionListener actionFinished)
		setVisible(true)
		desktop.addWindow(this)
		grabFocus()
		pActionFinished = actionFinished
		pState = State.delayFadeIn
		pElapsed = 0
		updateTransparency()
		Engine.resetTimers() // ensures we start with 0 timers in case of loading sdelays
	end
	
	/**
	 * \brief Skip logo if not in READY or State.finished state.
	 * 
	 * Sets the state to State.finished, hides the window then calls the action finished if present.
	 */
	func void skip()
		if pState == State.delayFadeIn or pState == State.fadeIn
			pState = State.operational
			onFadeInEnd()
		end
		
		if pState == State.operational
			pState = State.fadeOut
			onFadeOutBegin()
		end
		
		if pState == State.fadeOut or pState == State.delayAction
			pState = State.finished
			onFadeOutEnd()
			if pActionFinished != null
				pActionFinished.onAction(ActionEvent.new(this, ActionEvent.idAction, 0))
			end
			close()
		end
	end
	
	
	
	/**
	 * \brief Convenience method to show image logo calling action if finished.
	 * 
	 * Same as creating window, assigining the image and calling showLogo().
	 * Uses these values:
	 * - Time delay fade in: 1s
	 * - Time fade in: 2s
	 * - Time fade out: 2s
	 * - Time delay action: 1s
	 * - Timeout before fade out: 5s
	 */
	static func WindowLogo showImageLogo(Desktop desktop, Image image, \
	ActionListener actionFinished)
		return showImageLogo(desktop, image, null, actionFinished)
	end
	
	static func WindowLogo showImageLogo(Desktop desktop, Image image, Sound sound, \
	ActionListener actionFinished)
		return showImageLogo(desktop, image, sound, 1, 2, 2, 1, 5, actionFinished)
	end
	
	/**
	 * \brief Convenience method to show image logo calling action if finished.
	 * 
	 * Same as creating window, assigining the image and calling showLogo().
	 */
	static func WindowLogo showImageLogo(Desktop desktop, Image image, \
	float timeDelayFadeIn, float timeFadeIn, float timeFadeOut, float timeDelayAction, \
	float timeout, ActionListener actionFinished)
		return showImageLogo(desktop, image, null, timeDelayFadeIn, \
			timeFadeIn, timeFadeOut, timeDelayAction, timeout, actionFinished)
	end
	
	static func WindowLogo showImageLogo(Desktop desktop, Image image, Sound sound, \
	float timeDelayFadeIn, float timeFadeIn, float timeFadeOut, float timeDelayAction, \
	float timeout, ActionListener actionFinished)
		var WindowLogo window = WindowLogo.new()
		try
			window.setTimeDelayFadeIn(timeDelayFadeIn)
			window.setTimeFadeIn(timeFadeIn)
			window.setTimeFadeOut(timeFadeOut)
			window.setTimeDelayAction(timeDelayAction)
			window.setTimeout(timeout)
			window.setImageLogo(image)
			window.setSound(sound)
			window.showLogo(desktop, actionFinished)
			return window
			
		catch Exception e
			window.dispose()
			throw
		end
	end
	
	/**
	 * \brief Convenience method to show video logo calling action if finished.
	 * 
	 * Same as creating window, assigining the video and calling showLogo().
	 * 
	 * Uses these values:
	 * - Time delay fade in: 1s
	 * - Time fade in: 0s
	 * - Time fade out: 0s
	 * - Time delay action: 1s
	 */
	static func WindowLogo showVideoLogo(Desktop desktop, Video video, \
	ActionListener actionFinished)
		return showVideoLogo(desktop, video, 1, 0, 0, 1, actionFinished)
	end
	
	/**
	 * \brief Convenience method to show video logo calling action if finished.
	 * 
	 * Same as creating window, assigining the video and calling showLogo().
	 */
	static func WindowLogo showVideoLogo(Desktop desktop, Video video, \
	float timeDelayFadeIn, float timeFadeIn, float timeFadeOut, float timeDelayAction, \
	ActionListener actionFinished)
		var WindowLogo window = WindowLogo.new()
		try
			window.setTimeDelayFadeIn(timeDelayFadeIn)
			window.setTimeFadeIn(timeFadeIn)
			window.setTimeFadeOut(timeFadeOut)
			window.setTimeDelayAction(timeDelayAction)
			window.setVideoLogo(video)
			window.showLogo(desktop, actionFinished)
			return window
			
		catch Exception e
			window.dispose()
			throw
		end
	end
	
	/**
	 * \brief Show Drag[en]gine Game Engine logo and calling action if finished.
	 * 
	 * It is not required to show the Drag[en]gine Game Engine logo if you are using this
	 * game engine for whatever purpose but we would appreciate it if you do so.
	 */
	static func WindowLogo showDragengineLogo(Desktop desktop, ActionListener actionFinished)
		return showImageLogo(desktop, \
			Image.new("/shareddata/images/logoDragengine.jpg"), \
			1, 2, 2, 1, 5, actionFinished)
	end
	
	
	
	/**
	 * \brief Do frame update.
	 * 
	 * Called every frame update if startFrameUpdater() is called.
	 * 
	 * \param elapsed Elapsed time since the last frame update. Equals Engine.getElapsedTime().
	 */
	func void onFrameUpdate(float elapsed)
		select pState
		case State.delayFadeIn
			pElapsed += elapsed
			if pElapsed < pTimeDelayFadeIn
				break
			end
			
			pState = State.fadeIn
			pElapsed = 0
			if pDisplayVideo.getVideo() != null
				pDisplayVideo.play()
			end
			if pSpeakerSound.getSound() != null
				pSpeakerSound.play()
			end
			onFadeInBegin()
			
		case State.fadeIn
			pElapsed += elapsed
			updateTransparency()
			if pElapsed < pTimeFadeIn
				break
			end
			
			pElapsed = 0
			pState = State.operational
			updateTransparency()
			onFadeInEnd()
			
		case State.operational
			pElapsed += elapsed
			if pElapsed < pTimeout or pDisplayVideo.isPlaying() or pSpeakerSound.getPlaying()
				break
			end
			
			pElapsed = 0
			pState = State.fadeOut
			onFadeOutBegin()
			
		case State.fadeOut
			pElapsed += elapsed
			updateTransparency()
			if pElapsed < pTimeFadeOut
				break
			end
			
			pElapsed = 0
			pState = State.delayAction
			updateTransparency()
			onFadeOutEnd()
			
		case State.delayAction
			pElapsed += elapsed
			if pElapsed < pTimeDelayAction
				break
			end
			skip()
		end
	end
	
	/**
	 * \brief Begin fading in.
	 */
	protected func void onFadeInBegin()
	end
	
	/**
	 * \brief Finished fading in.
	 * 
	 * Called after video has started playing.
	 */
	protected func void onFadeInEnd()
	end
	
	/**
	 * \brief Begin fading out.
	 * 
	 * Called before finished action is triggered.
	 */
	protected func void onFadeOutBegin()
	end
	
	/**
	 * \brief Finished fading out.
	 * 
	 * Called before finished action is triggered. Window.close() will be called after this
	 * method returns.
	 */
	protected func void onFadeOutEnd()
	end
	
	/** \brief Mouse button has been released. */
	func void onButtonRelease(MouseEvent event)
		super.onButtonRelease(event)
		onPlayerSkip()
	end
	
	/** \brief Key on the keyboard has been released. */
	func void onKeyRelease(KeyEvent event)
		super.onKeyRelease(event)
		onPlayerSkip()
	end
	
	/** \brief Gamepad button has been released. */
	func void onGamepadButtonReleased(GamepadEvent event)
		super.onGamepadButtonReleased(event)
		onPlayerSkip()
	end
	
	/** \brief Gamepad axis has moved. */
	func void onGamepadAxisMoved(GamepadEvent event)
		super.onGamepadAxisMoved(event)
		if event.getAxisValue() > 0.5 and event.getInputAxisType() == InputDeviceAxisType.trigger
			onPlayerSkip()
		end
	end
	
	/** \brief Player wants to skip. */
	protected func void onPlayerSkip()
		if pAllowSkip
			skip()
		end
	end
	
	/** \brief Update content transparency depending on state and elapsed time. */
	protected func void updateTransparency()
		select pState
		case State.init, State.finished, State.delayFadeIn, State.delayAction
			pPanelContent.setTransparency(0)
			
		case State.operational
			pPanelContent.setTransparency(1)
			
		case State.fadeIn
			pPanelContent.setTransparency(DEMath.linearStep(pElapsed, 0, pTimeFadeIn, 0, 1))
			
		case State.fadeOut
			pPanelContent.setTransparency(DEMath.linearStep(pElapsed, 0, pTimeFadeOut, 1, 0))
		end
	end
	
	
	
	/**
	 * \brief Create window content.
	 * 
	 * Called during constructor time.
	 */
	protected func void createWindowContent()
		runWhileBlockingLayout(block
			setVisible(false)
			setDesignerSelector("WindowLogo")
			setLayout(StackLayout.new())
			setWindowState(Window.WindowState.maximized)
			setCanReorder(false)
			setCanMove(false)
			setCanResize(false)
			setCanClose(false)
			setCanMaximize(false)
			setCanMinimize(false)
			setCanFocus(true) // on purpose
			pPanelContent = createPanelContent()
			addWidget(pPanelContent)
		end)
	end
	
	/**
	 * \brief Create content panel.
	 * 
	 * Window is using stack layout. Panel is going to cover the entire window.
	 * Called from createWindowContent() during constructor time.
	 */
	protected func Panel createPanelContent()
		return Panel.new(StackLayout.new(StackLayout.AspectRatio.fit), block Panel panel
			panel.setDesignerSelector("Panel.WindowLogo")
			
			pSpeakerVideo = Speaker.new()
			pMicrophone.addSpeaker(pSpeakerVideo)
			
			pDisplayVideo = DisplayVideo.new(null, RepeatMode.stretch, false, pSpeakerVideo)
			pDisplayVideo.setDesignerSelector("Video.WindowLogo")
			pDisplayVideo.setLooping(false)
			panel.addWidget(pDisplayVideo)
			
			pSpeakerSound = Speaker.new()
			pMicrophone.addSpeaker(pSpeakerSound)
			
			pDisplayImage = DisplayImage.new(null, RepeatMode.stretch)
			pDisplayImage.setDesignerSelector("Image.WindowLogo")
			panel.addWidget(pDisplayImage)
		end)
	end
end
