/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */


namespace Dragengine.Gui


/**
 * Immutable object storing the size of borders around a rectangular area.
 */
fixed class BorderSize
	var int pLeft, pTop, pRight, pBottom
	
	
	
	/** Creates a border size object with 0 pixel borders. */
	func new()
	end
	
	/**\brief Create border size object with identical size all around. */
	func new(int size)
		pLeft = size
		pTop = size
		pRight = size
		pBottom = size
	end
	
	/** Creates a border size object with the given border sizes in pixels. */
	func new(int left, int top, int right, int bottom)
		pLeft = left
		pTop = top
		pRight = right
		pBottom = bottom
	end
	
	/** Creates a copy of a border size object. */
	func new(BorderSize borderSize)
		pLeft = borderSize.pLeft
		pTop = borderSize.pTop
		pRight = borderSize.pRight
		pBottom = borderSize.pBottom
	end
	
	
	
	/** Retrieves the size in pixels of the left border. */
	func int getLeft()
		return pLeft
	end
	
	/** Retrieves the size in pixels of the top border. */
	func int getTop()
		return pTop
	end
	
	/** Retrieves the size in pixels of the right border. */
	func int getRight()
		return pRight
	end
	
	/** Retrieves the size in pixels of the bottom border. */
	func int getBottom()
		return pBottom
	end
	
	/** Retrieves the total width of the left and right border added together. */
	func int getWidth()
		return pLeft + pRight
	end
	
	/** Retrieves the total height of the top and bottom border added together. */
	func int getHeight()
		return pTop + pBottom
	end
	
	/**
	 * Retrieves the total size of the borders as a point object. The x coordinate
	 * is the sum of the left and right border. The y coordinate is the sum of the
	 * top and bottom borders.
	 */
	func Point getSize()
		return Point.new(pLeft + pRight, pTop + pBottom)
	end
	
	/**
	 * \brief Left and top border as Point.
	 * \version 1.29
	 */
	func Point getLeftTop()
		return Point.new(pLeft, pTop)
	end
	
	/**
	 * \brief Right and top border as Point.
	 * \version 1.29
	 */
	func Point getRightTop()
		return Point.new(pRight, pTop)
	end
	
	/**
	 * \brief Left and bottom border as Point.
	 * \version 1.29
	 */
	func Point getLeftBottom()
		return Point.new(pLeft, pBottom)
	end
	
	/**
	 * \brief Right and bottom border as Point.
	 * \version 1.29
	 */
	func Point getRightBottom()
		return Point.new(pRight, pBottom)
	end
	
	/** Returns the border size enlarged by another border size object. */
	func BorderSize enlarge(int left, int top, int right, int bottom)
		return new(pLeft + left, pTop + top, pRight + right, pBottom + bottom)
	end
	
	/** Returns the border size enlarged by another border size object. */
	func BorderSize enlarge(BorderSize borderSize)
		return new(pLeft + borderSize.pLeft, pTop + borderSize.pTop,\
			pRight + borderSize.pRight, pBottom + borderSize.pBottom)
	end
	
	/**\brief Border size shrunk by another border size object. */
	func BorderSize shrink(int left, int top, int right, int bottom)
		return new(pLeft - left, pTop - top, pRight - right, pBottom - bottom)
	end
	
	/**\brief Border size shrunk by another border size object. */
	func BorderSize shrink(BorderSize borderSize)
		return new(pLeft - borderSize.pLeft, pTop - borderSize.pTop,\
			pRight - borderSize.pRight, pBottom - borderSize.pBottom)
	end
	
	/** Test if two border size objects are equal. */
	func bool equals(Object other)
		if other castable BorderSize
			var BorderSize borderSize = other cast BorderSize
			
			return pLeft == borderSize.pLeft and pTop == borderSize.pTop and\
				pRight == borderSize.pRight and pBottom == borderSize.pBottom
		end
		
		return false
	end
	
	
	
	/**\brief Border size enlarged by another border size object. */
	func BorderSize +(BorderSize borderSize)
		return enlarge(borderSize)
	end
	
	/**\brief Border size shrunk by another border size object. */
	func BorderSize -(BorderSize borderSize)
		return shrink(borderSize)
	end
	
	
	
	/** String representation. */
	func String toString()
		return "(" + pLeft + "," + pTop + "," + pRight + "," + pBottom + ")"
	end
end
