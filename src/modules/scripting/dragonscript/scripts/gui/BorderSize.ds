/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */


namespace Dragengine.Gui


/**
 * Immutable object storing the size of borders around a rectangular area.
 */
fixed class BorderSize
	/** Size in pixels of the left border. */
	private var int pLeft
	/** Size in pixels of the top border. */
	private var int pTop
	/** Size in pixels of the right border. */
	private var int pRight
	/** Size in pixels of the bottom border. */
	private var int pBottom
	
	
	
	/** Creates a border size object with 0 pixel borders. */
	public func new()
		this.pLeft = 0
		this.pTop = 0
		this.pRight = 0
		this.pBottom = 0
	end
	
	/** \brief Create border size object with identical size all around. */
	public func new( int size )
		this.pLeft = size
		this.pTop = size
		this.pRight = size
		this.pBottom = size
	end
	
	/** Creates a border size object with the given border sizes in pixels. */
	public func new( int left, int top, int right, int bottom )
		this.pLeft = left
		this.pTop = top
		this.pRight = right
		this.pBottom = bottom
	end
	
	/** Creates a copy of a border size object. */
	public func new( BorderSize borderSize )
		this.pLeft = borderSize.pLeft
		this.pTop = borderSize.pTop
		this.pRight = borderSize.pRight
		this.pBottom = borderSize.pBottom
	end
	
	
	
	/** Retrieves the size in pixels of the left border. */
	public func int getLeft()
		return this.pLeft
	end
	
	/** Retrieves the size in pixels of the top border. */
	public func int getTop()
		return this.pTop
	end
	
	/** Retrieves the size in pixels of the right border. */
	public func int getRight()
		return this.pRight
	end
	
	/** Retrieves the size in pixels of the bottom border. */
	public func int getBottom()
		return this.pBottom
	end
	
	/** Retrieves the total width of the left and right border added together. */
	public func int getWidth()
		return this.pLeft + this.pRight
	end
	
	/** Retrieves the total height of the top and bottom border added together. */
	public func int getHeight()
		return this.pTop + this.pBottom
	end
	
	/**
	 * Retrieves the total size of the borders as a point object. The x coordinate
	 * is the sum of the left and right border. The y coordinate is the sum of the
	 * top and bottom borders.
	 */
	public func Point getSize()
		return Point.new( this.pLeft + this.pRight, this.pTop + this.pBottom )
	end
	
	/** Returns the border size enlarged by another border size object. */
	public func BorderSize enlarge( int left, int top, int right, int bottom )
		return new( this.pLeft + left, this.pTop + top, this.pRight + right, this.pBottom + bottom )
	end
	
	/** Returns the border size enlarged by another border size object. */
	public func BorderSize enlarge( BorderSize borderSize )
		return new( this.pLeft + borderSize.pLeft, this.pTop + borderSize.pTop, \
			this.pRight + borderSize.pRight, this.pBottom + borderSize.pBottom )
	end
	
	/** \brief Border size shrunk by another border size object. */
	public func BorderSize shrink( int left, int top, int right, int bottom )
		return new( this.pLeft - left, this.pTop - top, this.pRight - right, this.pBottom - bottom )
	end
	
	/** \brief Border size shrunk by another border size object. */
	public func BorderSize shrink( BorderSize borderSize )
		return new( this.pLeft - borderSize.pLeft, this.pTop - borderSize.pTop, \
			this.pRight - borderSize.pRight, this.pBottom - borderSize.pBottom )
	end
	
	/** Test if two border size objects are equal. */
	public func bool equals( Object other )
		if other castable BorderSize
			var BorderSize borderSize = other cast BorderSize
			
			return this.pLeft == borderSize.pLeft and this.pTop == borderSize.pTop and \
				this.pRight == borderSize.pRight and this.pBottom == borderSize.pBottom
		end
		
		return false
	end
	
	
	
	/** \brief Border size enlarged by another border size object. */
	public func BorderSize +( BorderSize borderSize )
		return this.enlarge( borderSize )
	end
	
	/** \brief Border size shrunk by another border size object. */
	public func BorderSize -( BorderSize borderSize )
		return this.shrink( borderSize )
	end
	
	
	
	/** String representation. */
	public func String toString()
		return "(" + this.pLeft + "," + this.pTop + "," + this.pRight + "," + this.pBottom + ")"
	end
end
