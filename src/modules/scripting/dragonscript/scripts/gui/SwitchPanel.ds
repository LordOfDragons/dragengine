/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */


namespace Dragengine.Gui

pin Dragengine.Gui.Events
pin Dragengine.Gui.Layouts


/**
 * \brief Panel switching between widgets using a range model.
 * 
 * Widgets are resized to fill the entire panel with only the active
 * Widget set visible. Switching is provided using a RangeModel.
 * 
 * \par Version 1.17
 * 
 * By default the minimum size of the layout lines up with the largest minimum size of all
 * widgets. This ensures the container does not change size when the selected child widget
 * changes. Since version 1.17 this behavior can be changed to matche the minimum size of
 * the selected widget instead. This allows to make compact SwitchPanel layouts.
 */
class SwitchPanel extends Panel implements RangeModelListener
	/** \brief Switch panel action listener. */
	public class SwitchAction implements ActionListener
		private var SwitchPanel pSwitchPanel
		private var int pIndex
		
		/** \brief Create listener. */
		public func new(SwitchPanel switchPanel, int index)
			pSwitchPanel = switchPanel
			pIndex = index
		end
		
		/** \brief Switch panel. */
		public func SwitchPanel getSwitchPanel()
			return pSwitchPanel
		end
		
		/** \brief Index of panel to switch to. */
		public func int getIndex()
			return pIndex
		end
		
		/** \brief Set index of panel to switch to. */
		public func void setIndex(int index)
			pIndex = index
		end
		
		/** \brief Run action. */
		public func void onAction(ActionEvent event)
			pSwitchPanel.getModel().setValue(pIndex)
		end
	end
	
	/** \brief Switch panel listener useful for ToggleButtonGroup. */
	public class SwitchToggleGroup extends DefaultListModelListener
		private var SwitchPanel pSwitchPanel
		
		/** \brief Create listener. */
		public func new(SwitchPanel switchPanel)
			pSwitchPanel = switchPanel
		end
		
		/** \brief Switch panel. */
		public func SwitchPanel getSwitchPanel()
			return pSwitchPanel
		end
		
		/** \brief Selection in the model changed. */
		public func void selectionChanged(ListModel listModel)
			var RangeModel model = pSwitchPanel.getModel()
			if model != null // protect against disposing
				model.setValue(listModel.getSelected())
			end
		end
	end
	
	/**
	 * \brief Mouse listener scrolling ToggleButtonGroup if used as headers.
	 * \version 1.9
	 */
	class ScrollHeaderToggleButtons extends DefaultMouseListener
		private var ToggleButtonGroup pGroup
		
		/** \brief Create mouse listener. */
		public func new(ToggleButtonGroup group)
			if group == null
				throw ENullPointer.new("group")
			end
			pGroup = group
		end
		
		/** \brief Toggle button group to scroll. */
		public func ToggleButtonGroup getGroup()
			return pGroup
		end
		
		/** \brief Mouse wheel moved. */
		public func void onMouseWheel(MouseEvent event)
			var int y = event.getPosition().getY()
			pGroup.setSelected(DEMath.clamp(pGroup.getSelected() - y, 0, pGroup.getCount() - 1))
		end
	end
	
	
	
	private var RangeModel pModel
	
	
	
	/**
	 * \brief Create switch panel.
	 */
	public func new() this(DefaultRangeModel.new())
	end
	
	/**
	 * \brief Create switch panel.
	 */
	public func new(RangeModel model) super(TabLayout.new())
		setModel(model)
	end
	
	/**
	 * \brief Create switch panel.
	 * 
	 * Block receives panel as argument. Block call is wrapped inside runWhileBlockingLayout()
	 * for efficiency. doLayout() will be called after leaving the block.
	 */
	public func new(Block blockAddContent) this(DefaultRangeModel.new(), blockAddContent)
	end
	
	/**
	 * \brief Create switch panel.
	 * 
	 * Block receives panel as argument. Block call is wrapped inside runWhileBlockingLayout()
	 * for efficiency. doLayout() will be called after leaving the block.
	 */
	public func new(RangeModel model, Block blockAddContent) super(TabLayout.new(), blockAddContent)
		setModel(model)
	end
	
	/** Dispose of the widget. */
	public func void dispose()
		if pModel != null
			pModel.removeListener(this)
			pModel = null
		end
		
		super.dispose()
	end
	
	
	
	/** \brief Selection model. */
	public func RangeModel getModel()
		return pModel
	end
	
	/** \brief Set selection model. */
	public func void setModel(RangeModel model)
		if model == null
			throw EInvalidParam.new()
		end
		
		if model == pModel
			return
		end
		
		if pModel != null
			pModel.removeListener(this)
		end
		
		pModel = model
		
		model.setAll(0, getWidgetCount() - 1, 1, 0, 1)
		model.addListener(this)
	end
	
	
	
	/**
	 * \brief Compact mode.
	 * \version 1.17
	 * 
	 * If compact mode is used the minimum size of the layout matches the minimum size of the
	 * selected child widget instead of the largest minimum size of all child widgets.
	 */
	public func bool getCompact()
		return (getLayout() cast TabLayout).getCompact()
	end
	
	/**
	 * \brief Set compact mode.
	 * \version 1.17
	 * 
	 * If compact mode is used the minimum size of the layout matches the minimum size of the
	 * selected child widget instead of the largest minimum size of all child widgets.
	 */
	public func void setCompact(bool compact)
		var TabLayout layout = getLayout() cast TabLayout
		if compact == layout.getCompact()
			return
		end
		
		layout.setCompact(compact)
		doLayout()
	end
	
	
	
	/** \brief Add widget to container using default settings. */
	public func void addWidget(Widget widget)
		super.addWidget(widget)
		
		if pModel != null
			pModel.setMaximum(getWidgetCount() - 1)
		end
	end
	
	/** \brief Add widget to container using the specified settings. */
	public func void addWidget(Widget widget, Object settings)
		super.addWidget(widget, settings)
		
		if pModel != null
			pModel.setMaximum(getWidgetCount() - 1)
		end
	end
	
	/** \brief Remove widget from container. */
	public func void removeWidget(Widget widget)
		super.removeWidget(widget)
		
		if pModel != null
			pModel.setMaximum(getWidgetCount() - 1)
		end
	end
	
	/** \brief Remove all widgets from container. */
	public func void removeAllWidgets()
		super.removeAllWidgets()
		
		if pModel != null
			pModel.setMaximum(0)
		end
	end
	
	
	
	/** \brief Update selected tab. */
	public func void updateSelectedTab()
		(getLayout() cast TabLayout).selectTab(this, pModel.getValue())
	end
	
	
	
	/** \brief Minimum, maximum or page size changed. */
	public func void rangeChanged(RangeModel rangeModel)
	end
	
	/** \brief Value changed. */
	public func void valueChanged(RangeModel rangeModel)
		updateSelectedTab()
	end
end
