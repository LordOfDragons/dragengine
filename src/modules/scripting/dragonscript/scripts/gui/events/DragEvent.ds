/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

namespace Dragengine.Gui.Events



/**
 * \brief Drag and drop event.
 */
class DragEvent extends ModifiableEvent
	/** \brief Drag enter event identifier. */
	public static fixed var int idDragEnter = 40
	
	/** \brief Drag leave event identifier. */
	public static fixed var int idDragLeave = 41
	
	/** \brief Drag move event identifier. */
	public static fixed var int idDragOver = 42
	
	/** \brief Drag drop event identifier. */
	public static fixed var int idDragDrop = 43
	
	
	
	/** \brief Drag and drop action. */
	private var DragAndDrop pDragAndDrop
	
	/** \brief Position of drag. */
	private var Point pPosition
	
	
	
	/** \brief Event identifier is a drag and drop event identifier. */
	public static func bool isDragEvent( int identifier )
		return identifier >= idDragEnter and identifier <= idDragDrop
	end
	
	
	
	/** \brief Creates drag event. */
	public func new( Object source, int id, DragAndDrop dragAndDrop, int modifiers ) \
	super( source, id, modifiers )
		if dragAndDrop == null
			throw EInvalidParam.new()
		end
		
		this.pDragAndDrop = dragAndDrop
		this.pPosition = Point.new()
	end
	
	/** \brief Create drag event. */
	public func new( Object source, int id, DragAndDrop dragAndDrop, int modifiers, Point position ) \
	super( source, id, modifiers )
		if dragAndDrop == null or position == null
			throw EInvalidParam.new()
		end
		
		this.pDragAndDrop = dragAndDrop
		this.pPosition = position
	end
	
	
	
	/** \brief Drag and drop action. */
	public func DragAndDrop getDragAndDrop()
		return this.pDragAndDrop
	end
	
	/** \brief Position. */
	public func Point getPosition()
		return this.pPosition
	end
	
	
	
	/** \brief Create copy of drag event with new position. */
	public func DragEvent relocate( Point position )
		return new( this.getSource(), this.getIdentifier(), this.pDragAndDrop, this.getModifiers(), position )
	end
end
