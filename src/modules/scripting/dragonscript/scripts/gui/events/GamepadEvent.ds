/* 
 * Drag[en]gine DragonScript Script Module
 *
 * Copyright (C) 2020, Roland PlÃ¼ss (roland@rptd.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

namespace Dragengine.Gui.Events



/**
 * \brief Immutable gamepad event.
 * 
 * Used for input events outside mouse and keyboard handling.
 */
class GamepadEvent extends ModifiableEvent
	/** \brief Input device axis moved event identifier. */
	public static fixed var int idGamepadAxisMoved = 90
	
	/** \brief Input device button pressed event identifier. */
	public static fixed var int idGamepadButtonPressed = 91
	
	/** \brief Input device button released event identifier. */
	public static fixed var int idGamepadButtonReleased = 92
	
	
	
	var InputEventSource pSystem
	var int pDevice
	var int pCode
	var float pAxisValue
	
	
	
	/** \brief Event identifier is an input device event identifier. */
	static func bool isGamepadEvent(int identifier)
		return identifier >= idGamepadAxisMoved and identifier <= idGamepadButtonReleased
	end
	
	
	
	/**
	 * \brief Create event.
	 * \deprecated Use new(Object,int,InputEventSource,int,int,int)
	 */
	func new(Object source, int id, int device, int code, int modifiers) \
	this(source, id, InputEventSource.input, device, code, modifiers)
	end
	
	/**
	 * \brief Create event.
	 * \deprecated Use new(Object,int,InputEventSource,int,int,int,float)
	 */
	func new(Object source, int id, int device, int code, int modifiers, float axisValue) \
	this(source, id, InputEventSource.input, device, code, modifiers, axisValue)
	end
	
	/**
	 * \brief Create event.
	 * \version 1.6
	 * 
	 * For use with idGamepadButtonPressed and idGamepadButtonReleased.
	 */
	func new(Object source, int id, InputEventSource system, int device, int code, \
	int modifiers) super(source, id, modifiers)
		pSystem = system
		pDevice = device
		pCode = code
		pAxisValue = 0.0
	end
	
	/**
	 * \brief Create event.
	 * \version 1.6
	 * 
	 * For use with idGamepadAxisMoved.
	 */
	func new(Object source, int id, InputEventSource system, int device, int code, \
	int modifiers, float axisValue) super(source, id, modifiers)
		pSystem = system
		pDevice = device
		pCode = code
		pAxisValue = axisValue
	end
	
	
	
	/**
	 * \brief Source system.
	 * \version 1.6
	 */
	func InputEventSource getSystem()
		return pSystem
	end
	
	/** \brief Input device index. */
	func int getDevice()
		return pDevice
	end
	
	/** \brief Axis or button index. */
	func int getCode()
		return pCode
	end
	
	/** \brief Axis value. */
	func float getAxisValue()
		return pAxisValue
	end
	
	/**
	 * \brief Input device or null.
	 * \version 1.20
	 */
	func InputDevice getInputDevice()
		select pSystem
		case InputEventSource.input
			return InputSystem.getDeviceAt(pDevice)
			
		case InputEventSource.vr
			return VRSystem.getDeviceAt(pDevice)
			
		else
			return null
		end
	end
end
