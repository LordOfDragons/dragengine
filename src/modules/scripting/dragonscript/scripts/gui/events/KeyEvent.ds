/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */


namespace Dragengine.Gui.Events


/**
 * \brief Immutable keyboard event.
 * 
 * Stores the code of the key involved as well as the character it does represent if one exists.
 */
class KeyEvent extends ModifiableEvent
	/** Key pressed event idenfitier */
	public static fixed var int idKeyPressed = 10
	
	/** Key released event idenfitier */
	public static fixed var int idKeyReleased = 11
	
	
	
	/** \brief Key code */
	private var int pKeyCode
	
	/** \brief Key character */
	private var int pKeyChar
	
	/**
	 * \brief Source system.
	 * \version 1.6
	 */
	private var InputEventSource pSystem
	
	/** \brief Device index. */
	private var int pDevice
	
	/** \brief Device button code. */
	private var int pButtonCode
	
	
	
	/** \brief Event identifier is a key event identifier. */
	public static func bool isKeyEvent( int identifier )
		return identifier >= idKeyPressed and identifier <= idKeyReleased
	end
	
	
	
	/**
	 * \brief Create event.
	 * \deprecated Use new(Object,int,int,int,InputEventSource,int,int)
	 */
	public func new( Object source, int id, int keyCode, int modifiers, int device, int buttonCode ) \
	this( source, id, keyCode, modifiers, InputEventSource.input, device, buttonCode )
	end
	
	/**
	 * \brief Create event.
	 * \deprecated Use new(Object,int,int,int,int,InputEventSource,int,int)
	 */
	public func new( Object source, int id, int keyCode, int modifiers, int keyChar, \
	int device, int buttonCode ) this( source, id, keyCode, modifiers, keyChar, \
	InputEventSource.input, device, buttonCode )
	end
	
	/**
	 * \brief Create event.
	 * \version 1.6
	 */
	public func new( Object source, int id, int keyCode, int modifiers, \
	InputEventSource system, int device, int buttonCode ) super( source, id, modifiers )
		this.pKeyCode = keyCode
		this.pKeyChar = 0
		this.pSystem = system
		this.pDevice = device
		this.pButtonCode = buttonCode
	end
	
	/**
	 * \brief Create event.
	 * \version 1.6
	 */
	public func new( Object source, int id, int keyCode, int modifiers, int keyChar, \
	InputEventSource system, int device, int buttonCode ) super( source, id, modifiers )
		this.pKeyCode = keyCode
		this.pKeyChar = keyChar
		this.pSystem = system
		this.pDevice = device
		this.pButtonCode = buttonCode
	end
	
	
	
	/** \brief Key code. */
	public func int getKeyCode()
		return this.pKeyCode
	end
	
	/** \brief Printable key character if existing. */
	public func int getKeyChar()
		return this.pKeyChar
	end
	
	/**
	 * \brief Source system.
	 * \version 1.6
	 */
	public func InputEventSource getSystem()
		return this.pSystem
	end
	
	/** \brief Device index. */
	public func int getDevice()
		return this.pDevice
	end
	
	/** \brief Device button code. */
	public func int getButtonCode()
		return this.pButtonCode
	end
	
	
	
	/**
	 * \brief Key events are equal.
	 * \details Two key events equal if they have the same identifier and key code.
	 */
	public func bool equalKeyEvents( KeyEvent event )
		return this.getIdentifier() == event.getIdentifier() \
			and this.pKeyCode == event.getKeyCode()
	end
end
