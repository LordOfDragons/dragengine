/* 
 * Drag[en]gine DragonScript Script Module
 *
 * Copyright (C) 2022, Roland Pl√ºss (roland@rptd.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

namespace Dragengine.Gui


/**
 * \brief Clipboard clip storing data in multiple formats.
 * \version 1.11
 */
class ClipboardClip
	private var Array pData
	
	
	
	/** \brief Create clipboard clip. */
	public func new()
		pData = Array.new()
	end
	
	/** \brief Create clipboard clip with data. */
	public func new(Object data) this()
		add(data)
	end
	
	/**
	 * \brief Create copy of clipboard clip.
	 * 
	 * Creates shallow copy of data. Data objects are assumed to be immutable by nature.
	 */
	public func new(ClipboardClip clip)
		pData = Array.new(clip.pData)
	end
	
	
	
	/** \brief Count of data. */
	public func int getCount()
		return pData.getCount()
	end
	
	/** \brief Data at index. */
	public func Object getAt(int index)
		return pData.getAt(index)
	end
	
	/** \brief Visit data with block receiving object as argument. */
	public func void forEach(Block ablock)
		pData.forEach(ablock)
	end
	
	/**
	 * \brief Visit data with block receiving object as argument.
	 * 
	 * Block is only called for objects castable to block argument.
	 */
	public func void forEachCastable(Block ablock)
		pData.forEachCastable(ablock)
	end
	
	/**
	 * \brief Find data with block receiving object as argument returning true if found.
	 * 
	 * Returns first object for which block returns true or null.
	 */
	public func Object find(Block ablock)
		return pData.find(ablock)
	end
	
	/**
	 * \brief Find data with block receiving object as argument returning true if found.
	 * 
	 * Returns first object for which block returns true or null. Block is called only
	 * for objects castable to block argument.
	 */
	public func Object findCastable(Block ablock)
		return pData.findCastable(ablock)
	end
	
	/**
	 * \brief Collect data with block receiving object as argument returning true to include.
	 * 
	 * Returns Array containing all objects for which block returns true.
	 */
	public func Array collect(Block ablock)
		return pData.collect(ablock)
	end
	
	/**
	 * \brief Collect data with block receiving object as argument returning true to include.
	 * 
	 * Returns Array containing all objects for which block returns true. Block is called
	 * only for objects castable to block argument.
	 */
	public func Array collectCastable(Block ablock)
		return pData.collectCastable(ablock)
	end
	
	
	
	/**
	 * \brief Add data.
	 */
	public func void add(Object data)
		if data == null
			throw ENullPointer.new("data")
		end
		
		pData.add(data)
	end
end
