/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */


namespace Dragengine.Gui

pin Dragengine.Gui.Borders
pin Dragengine.Gui.Designers
pin Dragengine.Gui.Events
pin Dragengine.Gui.Layouts
pin Dragengine.Gui.Listeners
pin Dragengine.Scenery
pin Dragengine.Utils


/**
 * Shows a scrollbar either horizontal or vertical that allows the user
 * to select a value out of the available range. The size of the knob
 * represents the amount of pages that can be scrolled through.
 * 
 * Supports designing using designer selector "ScrollBar". Designer has to implement
 * interface ScrollBarDesigner.
 */
class ScrollBar extends Container implements RangeModelListener
	/** Scroll button state change listener. */
	class ScrollButtonStateListener extends DefaultStateChangeListener
		/** Scroll action. */
		private var ActionListener pActionScroll
		
		/** Repeat scroll timer */
		private var RepeatActionTimer pRepeatScrollTimer
		
		/** Create scroll button. */
		public func new(ActionListener scrollAction)
			pActionScroll = scrollAction
		end
		
		/** \brief Widget changed state. */
		public func void onStateChanged(StateChangeEvent event)
			// state changed can be send due to pressed state change but also due to other state
			// changes like higlighted state changed. care has to be taken to properly start and
			// stop the timer otherwise leaking timers can be created
			if (event.getSource() cast Button).getPressed()
				if pRepeatScrollTimer == null
					pRepeatScrollTimer = RepeatActionTimer.new(pActionScroll, event.getSource(), 0)
					pRepeatScrollTimer.sendEvent()
				end
				
			else
				if pRepeatScrollTimer != null
					pRepeatScrollTimer.giveUp()
					pRepeatScrollTimer = null
				end
			end
		end
		
		/** \brief Dispose of listener. */
		public func void dispose()
			if pRepeatScrollTimer != null
				pRepeatScrollTimer.giveUp()
				pRepeatScrollTimer = null
			end
		end
	end
	
	/**
	 * \brief Action scroll.
	 * \version 1.9
	 */
	abstract class ActionScroll extends DefaultActionListener
		protected var ScrollBar pScrollBar
		protected var bool pIsWheelAction
		
		public func new(ScrollBar scrollBar)
			pScrollBar = scrollBar
		end
		
		/** \version 1.11 */
		public func new(ScrollBar scrollBar, bool isWheelAction)
			pScrollBar = scrollBar
			pIsWheelAction = isWheelAction
		end
		
		public func void onAction(ActionEvent event)
			var RangeModel model = pScrollBar.getModel()
			
			if increaseValue()
				if (event.getModifiers() & ModifiableEvent.shift) == ModifiableEvent.shift
					model.setValue(model.getValue() + model.getPageSize())
					
				else
					model.setValue(model.getValue() + model.getIncrement())
				end
				
			else
				if (event.getModifiers() & ModifiableEvent.shift) == ModifiableEvent.shift
					model.setValue(model.getValue() - model.getPageSize())
					
				else
					model.setValue(model.getValue() - model.getIncrement())
				end
			end
		end
		
		abstract protected func bool increaseValue()
	end
	
	/** \brief Action scroll up/left action. */
	class ActionScrollUpLeft extends ActionScroll
		public func new(ScrollBar scrollBar) super(scrollBar)
		end
		
		/** \version 1.11 */
		public func new(ScrollBar scrollBar, bool isWheelAction) super(scrollBar, isWheelAction)
		end
		
		protected func bool increaseValue()
			return pIsWheelAction if pScrollBar.getReverseWheel() else false
		end
	end
	
	/** \brief Action scroll down/right action. */
	class ActionScrollDownRight extends ActionScroll
		public func new(ScrollBar scrollBar) super(scrollBar)
		end
		
		/** \version 1.11 */
		public func new(ScrollBar scrollBar, bool isWheelAction) super(scrollBar, isWheelAction)
		end
		
		protected func bool increaseValue()
			return pIsWheelAction if not pScrollBar.getReverseWheel() else true
		end
	end
	
	/** Action scroll page up/left action. */
	class ActionScrollPageUpLeft extends DefaultActionListener
		private var ScrollBar pScrollBar
		public func new(ScrollBar scrollBar)
			pScrollBar = scrollBar
		end
		public func void onAction(ActionEvent event)
			var RangeModel model = pScrollBar.getModel()
			model.setValue(model.getValue() - DEMath.max(model.getPageSize(), 1))
		end
	end
	
	/** Action scroll page down/right action. */
	class ActionScrollPageDownRight extends DefaultActionListener
		private var ScrollBar pScrollBar
		public func new(ScrollBar scrollBar)
			pScrollBar = scrollBar
		end
		public func void onAction(ActionEvent event)
			var RangeModel model = pScrollBar.getModel()
			model.setValue(model.getValue() + DEMath.max(model.getPageSize(), 1))
		end
	end
	
	/** Drag knob mouse listener. */
	class DragKnobMouseListener extends DefaultMouseListener
		private var ScrollBar pScrollBar
		private var Point pOffset
		
		public func new(ScrollBar scrollBar)
			pScrollBar = scrollBar
		end
		
		public func void onButtonPress(MouseEvent event)
			if event.getButton() == InputEventMouseButton.left
				pOffset = event.getPosition()
				(event.getSource() cast Widget).captureMouse()
			end
		end
		
		public func void onButtonRelease(MouseEvent event)
			if event.getButton() == InputEventMouseButton.left
				(event.getSource() cast Widget).releaseMouse()
				pOffset = null
			end
		end
		
		public func void onMouseMove(MouseEvent event)
			if pOffset == null
				return
			end
			
			var RectArea helperPos = pScrollBar.getHelperPositions()
			var RangeModel model = pScrollBar.getModel()
			var int range = model.getMaximum() - model.getMinimum()
			var int offset
			
			if pScrollBar.getOrientation() == Orientation.horizontal
				offset = (event.getSource() cast Widget).getX() + event.getPosition().getX() - pOffset.getX()
				
			else
				offset = (event.getSource() cast Widget).getY() + event.getPosition().getY() - pOffset.getY()
			end
			
			var int denom = helperPos.getY2() - helperPos.getX1() - pScrollBar.getKnobSize()
			var int value
			
			if denom <= 0
				value = 0
				
			else
				value = (((range * (offset - helperPos.getX1())) cast float) / (denom cast float) + 0.5) cast int
			end
			
			model.setValue(model.getMinimum() + value)
		end
	end
	
	
	
	private var Orientation pOrientation
	private var RangeModel pModel
	private var bool pHideIfEmpty
	private var int pDragArea
	private var int pOffsetDrag
	private var RectArea pHelperPositions
	private var RepeatActionTimer pRepeatScrollTimer
	private var Button pButtonLeftUp
	private var Button pButtonRightDown
	private var Widget pWidgetKnob
	private var Panel pWidgetFrame
	private var Array pDisposeScrollButtonStateListeners
	private var bool pReverseWheel
	
	
	
	/** Create scroll bar widget. */
	public func new(Orientation orientation)
		pDisposeScrollButtonStateListeners = Array.new()
		
		pModel = DefaultRangeModel.new()
		pModel.addListener(this)
		
		setDesignerSelector("ScrollBar")
		
		setOrientation(orientation)
		setCanFocusDirectional(true)
		
		createContent()
		enableDirectionButtons()
		
		addMouseListener(WheelActionMouseListener.new(\
			ActionScrollUpLeft.new(this, true), ActionScrollDownRight.new(this, true)))
	end
	
	/** \brief Create scroll bar widget with model. */
	public func new(Orientation orientation, RangeModel model) this(orientation)
		setModel(model)
	end
	
	/** Dispose of widget. */
	public func void dispose()
		if pDisposeScrollButtonStateListeners != null
			pDisposeScrollButtonStateListeners.forEach(block ScrollButtonStateListener each
				each.dispose()
			end)
			pDisposeScrollButtonStateListeners = null
		end
		stopRepeatScrollTimer()
		pButtonLeftUp = null
		pButtonRightDown = null
		pModel.removeListener(this)
		pModel = null
		pWidgetFrame = null
		pWidgetKnob = null
		
		super.dispose()
	end
	
	
	
	/** Orientation of the scrollbar. */
	public func Orientation getOrientation()
		return pOrientation
	end
	
	/** Set oriantation of the scrollbar. */
	public func void setOrientation(Orientation orientation)
		if pOrientation == orientation
			return
		end
		
		pOrientation = orientation
		
		createContent()
		enableDirectionButtons()
		updateKnobWidget()
	end
	
	/** Range model. */
	public func RangeModel getModel()
		return pModel
	end
	
	/** Set range model. */
	public func void setModel(RangeModel rangeModel)
		if rangeModel == null
			throw EInvalidParam.new()
		end
		
		if rangeModel == pModel
			return
		end
		
		pModel.removeListener(this)
		pModel = rangeModel
		pModel.addListener(this)
		
		enableDirectionButtons()
		updateKnobWidget()
	end
	
	/** \brief Hide scroll bar if range is empty. */
	public func bool getHideIfEmpty()
		return pHideIfEmpty
	end
	
	/** \brief Set if scroll bar is hidden if range is empty. */
	public func void setHideIfEmpty(bool hideIfEmpty)
		if hideIfEmpty == pHideIfEmpty
			return
		end
		pHideIfEmpty = hideIfEmpty
		checkHiding()
	end
	
	/** Size of the drag knob. */
	public func int getKnobSize()
		var RectArea helperPos = getHelperPositions()
		return helperPos.getX2() - helperPos.getY1()
	end
	
	/**
	 * \brief Reverse wheel direction.
	 * \version 1.9
	 * 
	 * If false wheeling up decreases the range model. If true increases the range model.
	 */
	public func bool getReverseWheel()
		return pReverseWheel
	end
	
	/**
	 * \brief Set reverse wheel direction
	 * \version 1.9
	 * 
	 * If false wheeling up decreases the range model. If true increases the range model.
	 */
	public func void setReverseWheel(bool reverseWheel)
		pReverseWheel = reverseWheel
	end
	
	
	
	func Point getFocusMouseLocation()
		if pWidgetKnob != null
			return pWidgetKnob.getRelativePosition(this) + pWidgetKnob.getSize() / 2
			
		else
			return super.getFocusMouseLocation()
		end
	end
	
	func void focusClosestWidget(float angle)
		if pWidgetKnob == null or not pWidgetKnob.isCapturingMouse()
			super.focusClosestWidget(angle)
			return
		end
		
		if pOrientation == Orientation.horizontal
			if angle > -135 and angle < -45
				pModel.setValue(pModel.getValue() + pModel.getIncrement())
				
			elif angle > 45 and angle < 135
				pModel.setValue(pModel.getValue() - pModel.getIncrement())
				
			else
				return
			end
			
		else
			if angle > 135 or angle < -135
				pModel.setValue(pModel.getValue() + pModel.getIncrement())
				
			elif angle > -45 and angle < 45
				pModel.setValue(pModel.getValue() - pModel.getIncrement())
				
			else
				return
			end
		end
		
		var Desktop desktop = getDesktop()
		if desktop != null
			desktop.warpMouseFocusLocation(this)
		end
	end
	
	
	
	/**
	 * Send if the outer range properties like minimum value, maximum
	 * value or page size has changed.
	 */
	public func void rangeChanged(RangeModel rangeModel)
		checkHiding()
		enableDirectionButtons()
		updateKnobWidget()
	end
	
	/** Send if the value has changed. */
	public func void valueChanged(RangeModel rangeModel)
		checkHiding()
		enableDirectionButtons()
		updateKnobWidget()
	end
	
	
	
	/** Notification that the gui theme changed. */
	public func void onGuiThemeChanged()
		super.onGuiThemeChanged()
		
		createContent()
		enableDirectionButtons()
		updateKnobWidget()
	end
	
	/** \brief Designer changed. */
	public func void onDesignerChanged()
		createContent()
	end
	
	/** \brief Size changed. */
	public func void onResize(WidgetEvent event)
		super.onResize(event)
		updateKnobWidget()
	end
	
	
	
	/** Mouse button has been pressed. */
	public func void onButtonPress(MouseEvent event)
		super.onButtonPress(event)
		
		if event.getSource() != pWidgetFrame
			return
		end
		
		if event.getButton() == InputEventMouseButton.left
			var Point position = event.getPosition()
			var RectArea helperPos = getHelperPositions()
			var int testValue
			
			if pOrientation == Orientation.horizontal
				testValue = position.getX()
				pOffsetDrag = position.getX() - getHelperPositions().getY1()
				
			else
				testValue = position.getY()
				pOffsetDrag = position.getY() - getHelperPositions().getY1()
			end
			
			if testValue < helperPos.getY1()
				stopRepeatScrollTimer()
				pDragArea = 2
				pRepeatScrollTimer = RepeatActionTimer.new(ActionScrollPageUpLeft.new(this), \
					event.getSource(), event.getModifiers())
				pRepeatScrollTimer.sendEvent()
				
			elif testValue > helperPos.getX2()
				stopRepeatScrollTimer()
				pDragArea = 4
				pRepeatScrollTimer = RepeatActionTimer.new(ActionScrollPageDownRight.new(this), \
					event.getSource(), event.getModifiers())
				pRepeatScrollTimer.sendEvent()
			end
			
			captureMouse()
		end
	end
	
	/** Mouse button has been released. */
	public func void onButtonRelease(MouseEvent event)
		super.onButtonRelease(event)
		
		if event.getButton() == InputEventMouseButton.left
			stopRepeatScrollTimer()
			releaseMouse()
			pDragArea = 0
		end
	end
	
	
	
	/**
	 * \brief Get designer from gui theme.
	 * 
	 * Modified to ensure a DefaultScrollBarDesigner is used if
	 * super.getDesignerFromTheme() returns null.
	 */
	protected func WidgetDesigner getDesignerFromTheme()
		var WidgetDesigner designer = super.getDesignerFromTheme()
		if designer == null
			designer = DefaultScrollBarDesigner.new()
		end
		return designer
	end
	
	
	
	/** Helper positions. If not present yet they are calculated. */
	public func RectArea getHelperPositions()
		if pHelperPositions != null
			return pHelperPositions
		end
		
		if pWidgetKnob == null
			return RectArea.new()
		end
		
		// determine positions
		var int pageSize = DEMath.max(pModel.getPageSize(), 1)
		var int range = pModel.getMaximum() - pModel.getMinimum()
		var int value = pModel.getValue() - pModel.getMinimum()
		var BorderSize borderSize = pWidgetKnob.getBorderSize()
		var int pos1, pos2, pos3, pos4
		
		if pOrientation == Orientation.horizontal
			pos1 = pWidgetFrame.getPadding().getLeft() + borderSize.getLeft()
			pos4 = pWidgetFrame.getPadding().getLeft() + pWidgetKnob.getParent().getContainerWidth() - borderSize.getRight()
			
		else
			pos1 = pWidgetFrame.getPadding().getTop() + borderSize.getTop()
			pos4 = pWidgetFrame.getPadding().getTop() + pWidgetKnob.getParent().getContainerHeight() - borderSize.getBottom()
		end
		
		var int knobSize = DEMath.max(pageSize * (pos4 - pos1) / (range + pageSize), 7)
		
		if range > 0
			pos2 = pos1 + value * (pos4 - pos1 - knobSize) / range
			pos3 = pos2 + knobSize
			
		else
			pos2 = pos1
			pos3 = DEMath.max(pos4, pos1)
		end
		
		// save positions
		pHelperPositions = RectArea.new(pos1, pos2, pos3, pos4)
		return pHelperPositions
	end
	
	/** Stop repeat scroll timer. */
	private func void stopRepeatScrollTimer()
		if pRepeatScrollTimer == null
			return
		end
		
		pRepeatScrollTimer.giveUp()
		pRepeatScrollTimer = null
	end
	
	
	
	/** \brief Remove all widgets. */
	public func void removeAllWidgets()
		super.removeAllWidgets()
		
		if pDisposeScrollButtonStateListeners != null
			pDisposeScrollButtonStateListeners.forEach(block ScrollButtonStateListener each
				each.dispose()
			end)
			pDisposeScrollButtonStateListeners.removeAll()
		end
	end
	
	
	
	/** \brief Hide scroll bar if set to be hidden if range is empty. */
	protected func void checkHiding()
		if pHideIfEmpty
			setVisible(pModel.getMaximum() > pModel.getMinimum())
		end
	end
	
	/** Create content widgets. */
	public func void createContent()
		pHelperPositions = null
		
		if getGuiTheme() == null
			pButtonLeftUp = null
			pButtonRightDown = null
			removeAllWidgets()
			return
		end
		
		// wheel listener reused across widgets
		var MouseListener wheelListener = WheelActionMouseListener.new(\
			ActionScrollUpLeft.new(this, true), ActionScrollDownRight.new(this, true))
		
		// remove all widgets
		pButtonLeftUp = null
		pButtonRightDown = null
		removeAllWidgets()
		
		// set layout to border layout
		setLayout(BorderLayout.new(0))
		
		// fix scrollbar size in the appropriate direction
		var ScrollBarDesigner designer = getDesigner() cast ScrollBarDesigner
		var int scrollBarSize = designer.scrollbarSize(this)
		
		if pOrientation == Orientation.horizontal
			setMinimumSize(Point.new(0, scrollBarSize))
			
		else
			setMinimumSize(Point.new(scrollBarSize, 0))
		end
		
		// add center panel hosting the knob
		pWidgetFrame = Panel.new()
		pWidgetFrame.setBackgroundCanvasCreator(designer.canvasCreatorFrame(this))
		pWidgetFrame.setLayout(FixedLayout.new())
		pWidgetFrame.setPadding(BorderSize.new(designer.paddingKnobFrame(this)))
		pWidgetFrame.setProtectPadding(true)
		addWidget(pWidgetFrame, BorderLayout.Area.content)
		
		// create left or up arrow button
		pButtonLeftUp = designer.createButtonLeftUp(this)
		pButtonLeftUp.setCanFocus(false)
		pButtonLeftUp.setCanFocusDirectional(false)
		pButtonLeftUp.addMouseListener(wheelListener)
		var ScrollButtonStateListener scrollListener = \
			ScrollButtonStateListener.new(ActionScrollUpLeft.new(this, false))
		pDisposeScrollButtonStateListeners.add(scrollListener)
		pButtonLeftUp.addStateChangeListener(scrollListener)
		
		if pOrientation == Orientation.horizontal
			addWidget(pButtonLeftUp, BorderLayout.Area.left)
			
		else
			addWidget(pButtonLeftUp, BorderLayout.Area.top)
		end
		
		// create right or down arrow button
		pButtonRightDown = designer.createButtonRightDown(this)
		pButtonRightDown.setCanFocus(false)
		pButtonRightDown.setCanFocusDirectional(false)
		pButtonRightDown.addMouseListener(wheelListener)
		scrollListener = ScrollButtonStateListener.new(ActionScrollDownRight.new(this, false))
		pDisposeScrollButtonStateListeners.add(scrollListener)
		pButtonRightDown.addStateChangeListener(scrollListener)
		
		if pOrientation == Orientation.horizontal
			addWidget(pButtonRightDown, BorderLayout.Area.right)
			
		else
			addWidget(pButtonRightDown, BorderLayout.Area.bottom)
		end
		
		// create knob widget
		pWidgetKnob = designer.createKnob(this)
		pWidgetKnob.setCanFocus(false)
		pWidgetKnob.setCanFocusDirectional(false)
		pWidgetKnob.addMouseListener(DragKnobMouseListener.new(this))
		pWidgetKnob.addMouseListener(wheelListener)
		pWidgetFrame.addWidget(pWidgetKnob)
		
		if pOrientation == Orientation.horizontal
			pWidgetKnob.setY(pWidgetFrame.getPadding().getTop() + pWidgetKnob.getBorderSize().getTop())
			
		else
			pWidgetKnob.setX(pWidgetFrame.getPadding().getLeft() + pWidgetKnob.getBorderSize().getLeft())
		end
	end
	
	/** Update knob widget geometry. */
	public func void updateKnobWidget()
		pHelperPositions = null
		
		if pWidgetKnob == null
			return
		end
		
		var RectArea helperPositions = getHelperPositions()
		var int width, height
		
		if pOrientation == Orientation.horizontal
			pWidgetKnob.setX(helperPositions.getY1())
			width = helperPositions.getX2() - helperPositions.getY1()
			height = pWidgetFrame.getContainerHeight() - pWidgetKnob.getBorderSize().getHeight()
			
		else
			pWidgetKnob.setY(helperPositions.getY1())
			width = pWidgetFrame.getContainerWidth() - pWidgetKnob.getBorderSize().getWidth()
			height = helperPositions.getX2() - helperPositions.getY1()
		end
		
		pWidgetKnob.setSize(Point.new(width, height))
	end
	
	/** Enable direction buttons depending on the model value. */
	public func void enableDirectionButtons()
		if pButtonLeftUp != null
			pButtonLeftUp.setEnabled(pModel.getValue() > pModel.getMinimum())
		end
		if pButtonRightDown != null
			pButtonRightDown.setEnabled(pModel.getValue() < pModel.getMaximum())
		end
	end
end
