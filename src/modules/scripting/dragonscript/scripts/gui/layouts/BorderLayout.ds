/* 
 * Drag[en]gine DragonScript Script Module
 *
 * Copyright (C) 2020, Roland Pl√ºss (roland@rptd.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */


namespace Dragengine.Gui.Layouts

pin Dragengine.Gui.Borders


/**
 * \brief Divide container into 5 areas each with at most one widget inside.
 * 
 * The top, right, bottom and left area are of fixed size fitting in width
 * respectively height the minimum size of the widget inside if present.
 * The center area is stretched to fill the remaining space.
 * 
 * Instances of this layout can not be shared by multiple widgets.
 */
class BorderLayout implements Layout
	/** \brief Area to place widget in. */
	enum Area
		/** \brief Place widget in content area. */
		content
		
		/** \brief Place widget in left border. */
		left
		
		/** \brief Place widget in top border. */
		top
		
		/** \brief Place widget in right border. */
		right
		
		/** \brief Place widget in bottom border. */
		bottom
	end
	
	
	
	private var Widget pContentWidget
	private var Widget pLeftWidget
	private var Widget pTopWidget
	private var Widget pRightWidget
	private var Widget pBottomWidget
	private var int pGap
	
	
	
	/** \brief Create layout with 0 gap. */
	public func new()
		pGap = 0
	end
	
	/**
	 * \brief Create layout.
	 * \param gap Gap in pixels between areas. Gap can be negative to overlap areas.
	 */
	public func new(int gap)
		setGap(gap)
	end
	
	
	
	/** \brief Gap between areas in pixels. */
	public func int getGap()
		return pGap
	end
	
	/**
	 * \brief Set gap between areas in pixels.
	 * \details Can be negative to overlap widgets.
	 */
	public func void setGap(int gap)
		pGap = gap
	end
	
	
	
	/** \brief Widget in content area or \em null if empty. */
	public func Widget getContentWidget()
		return pContentWidget
	end
	
	/** \brief Widget in left area or \em null if empty. */
	public func Widget getLeftWidget()
		return pLeftWidget
	end
	
	/** \brief Widget in top area or \em null if empty. */
	public func Widget getTopWidget()
		return pTopWidget
	end
	
	/** \brief Widget in right area or \em null if empty. */
	public func Widget getRightWidget()
		return pRightWidget
	end
	
	/** \brief Widget in bottom area or \em null if empty. */
	public func Widget getBottomWidget()
		return pBottomWidget
	end
	
	
	
	/**
	 * \brief Add widget to layout into area.
	 * 
	 * \param widget Widget to add to layout.
	 * \param settings Area to place widget in. Has to be of type \ref Area .
	 * \throws EInvalidParam widget is \em null.
	 * \throws EInvalidParam settings is not of type \ref Area .
	 * \throws EInvalidParam area is not empty.
	 */
	public func void addWidget(Widget widget, Object settings)
		if widget == null
			throw EInvalidParam.new()
		end
		
		select settings cast Area
		case Area.content
			if pContentWidget != null
				throw EInvalidParam.new()
			end
			pContentWidget = widget
			
		case Area.left
			if pLeftWidget != null
				throw EInvalidParam.new()
			end
			pLeftWidget = widget
			
		case Area.top
			if pTopWidget != null
				throw EInvalidParam.new()
			end
			pTopWidget = widget
			
		case Area.right
			if pRightWidget != null
				throw EInvalidParam.new()
			end
			pRightWidget = widget
			
		case Area.bottom
			if pBottomWidget != null
				throw EInvalidParam.new()
			end
			pBottomWidget = widget
			
		else
			throw EInvalidParam.new()
		end
	end
	
	/** \brief Remove widget from layout. */
	public func void removeWidget(Widget widget)
		if widget == null
			throw EInvalidParam.new()
		end
		
		if pContentWidget == widget
			pContentWidget = null
			
		elif pLeftWidget == widget
			pLeftWidget = null
			
		elif pTopWidget == widget
			pTopWidget = null
			
		elif pRightWidget == widget
			pRightWidget = null
			
		elif pBottomWidget == widget
			pBottomWidget = null
			
		else
			throw EInvalidParam.new()
		end
	end
	
	
	
	/** \brief Layout widgets in container. */
	public func void doLayout(Container container)
		var int borderLeft = container.getPadding().getLeft()
		var int borderTop = container.getPadding().getTop()
		var int borderRight = container.getPadding().getRight()
		var int borderBottom = container.getPadding().getBottom()
		var int width = container.getContainerWidth()
		var int height = container.getContainerHeight()
		var bool hasContent = pContentWidget != null and pContentWidget.getVisible()
		var bool hasLeft = pLeftWidget != null and pLeftWidget.getVisible()
		var bool hasRight = pRightWidget != null and pRightWidget.getVisible()
		var bool hasTop = pTopWidget != null and pTopWidget.getVisible()
		var bool hasBottom = pBottomWidget != null and pBottomWidget.getVisible()
		
		var BorderSize borderSize
		var int leftSize = 0
		var int leftDist = 0
		var int leftBorderLeft = 0
		var int leftBorderTop = 0
		var int leftBorderBottom = 0
		var int topSize = 0
		var int topDist = 0
		var int topBorderLeft = 0
		var int topBorderTop = 0
		var int topBorderRight = 0
		var int rightSize = 0
		var int rightDist = 0
		var int rightBorderRight = 0
		var int rightBorderTop = 0
		var int rightBorderBottom = 0
		var int bottomSize = 0
		var int bottomDist = 0
		var int bottomBorderLeft = 0
		var int bottomBorderBottom = 0
		var int bottomBorderRight = 0
		var int contentBorderLeft = 0
		var int contentBorderTop = 0
		var int contentBorderWidth = 0
		var int contentBorderHeight = 0
		
		// determine the size of all widgets
		if hasLeft
			leftSize = pLeftWidget.getMinimumSizeForHeight(height).getX()
			leftDist = leftSize + pGap
			if pLeftWidget.getBorder() != null
				borderSize = pLeftWidget.getBorder().getBorderSize()
				leftBorderLeft = borderSize.getLeft()
				leftBorderTop = borderSize.getTop()
				leftBorderBottom = borderSize.getBottom()
				leftDist += borderSize.getWidth()
			end
		end
		
		if hasTop
			topSize = pTopWidget.getMinimumSizeForWidth(width).getY()
			topDist = topSize + pGap
			if pTopWidget.getBorder() != null
				borderSize = pTopWidget.getBorder().getBorderSize()
				topBorderLeft = borderSize.getLeft()
				topBorderTop = borderSize.getTop()
				topBorderRight = borderSize.getRight()
				topDist += borderSize.getHeight()
			end
		end
		
		if hasRight
			rightSize = pRightWidget.getMinimumSizeForHeight(height).getX()
			rightDist = rightSize + pGap
			if pRightWidget.getBorder() != null
				borderSize = pRightWidget.getBorder().getBorderSize()
				rightBorderRight = borderSize.getRight()
				rightBorderTop = borderSize.getTop()
				rightBorderBottom = borderSize.getBottom()
				rightDist += borderSize.getWidth()
			end
		end
		
		if hasBottom
			bottomSize = pBottomWidget.getMinimumSizeForWidth(width).getY()
			bottomDist = bottomSize + pGap
			if pBottomWidget.getBorder() != null
				borderSize = pBottomWidget.getBorder().getBorderSize()
				bottomBorderLeft = borderSize.getLeft()
				bottomBorderBottom = borderSize.getBottom()
				bottomBorderRight = borderSize.getRight()
				bottomDist += borderSize.getHeight()
			end
		end
		
		if hasContent
			if pContentWidget.getBorder() != null
				borderSize = pContentWidget.getBorder().getBorderSize()
				contentBorderLeft = borderSize.getLeft()
				contentBorderTop = borderSize.getTop()
				contentBorderWidth = borderSize.getWidth()
				contentBorderHeight = borderSize.getHeight()
			end
		end
		
		// set position and size of all widgets
		if hasTop
			pTopWidget.setPosition(Point.new(\
				borderLeft + topBorderLeft, borderTop + topBorderTop))
			pTopWidget.setSize(Point.new(\
				width - topBorderLeft - topBorderRight, topSize))
		end
		
		if hasLeft
			pLeftWidget.setPosition(Point.new(\
				borderLeft + leftBorderLeft, borderTop + leftBorderTop + topDist))
			pLeftWidget.setSize(Point.new(\
				leftSize, height - topDist - bottomDist - leftBorderTop - leftBorderBottom))
		end
		
		if hasContent
			pContentWidget.setPosition(Point.new(\
				borderLeft + contentBorderLeft + leftDist, \
				borderTop + contentBorderTop + topDist))
			pContentWidget.setSize(Point.new(\
				width - leftDist - rightDist - contentBorderWidth, \
				height - topDist - bottomDist - contentBorderHeight))
		end
		
		if hasRight
			pRightWidget.setPosition(Point.new(\
				borderLeft + width - rightSize - rightBorderRight, \
				borderTop + topDist + rightBorderTop))
			pRightWidget.setSize(Point.new(\
				rightSize, height - topDist - bottomDist - rightBorderTop - rightBorderBottom))
		end
		
		if hasBottom
			pBottomWidget.setPosition(Point.new(\
				borderLeft + bottomBorderLeft, \
				borderTop + height - bottomSize - bottomBorderBottom))
			pBottomWidget.setSize(Point.new(\
				width - bottomBorderLeft - bottomBorderRight, bottomSize))
		end
	end
	
	
	
	/** \brief Minimal size required for layout in container. */
	public func Point getMinimumSize(Container container)
		return getMinimumSizeFor(container, \
			container.getContainerWidth(), container.getContainerHeight())
	end
	
	/** \brief Minimum size of layout using reference width and variable height. */
	public func Point getMinimumSizeForWidth(Container container, int width)
		return getMinimumSizeFor(container, \
			DEMath.max(0, width - container.getPadding().getWidth()), container.getContainerHeight())
	end
	
	/** \brief Minimum size of layout using reference widget height and variable width. */
	public func Point getMinimumSizeForHeight(Container container, int height)
		return getMinimumSizeFor(container, \
			container.getContainerWidth(), DEMath.max(0, height - container.getPadding().getHeight()))
	end
	
	
	
	/**
	 * \brief Minimum size of layout using reference and variable size.
	 * \details If X_AXIS is used height is the reference size. If Y_AXIS is used
	 *          widthis the reference size.
	 */
	protected func Point getMinimumSizeFor(Container container, int width, int height)
		var bool hasContent = pContentWidget != null and pContentWidget.getVisible()
		var bool hasLeft = pLeftWidget != null and pLeftWidget.getVisible()
		var bool hasRight = pRightWidget != null and pRightWidget.getVisible()
		var bool hasTop = pTopWidget != null and pTopWidget.getVisible()
		var bool hasBottom = pBottomWidget != null and pBottomWidget.getVisible()
		var bool usePadding = false
		var Point childSize
		var int cx = 0
		var int cy = 0
		
		if hasContent
			childSize = pContentWidget.getMinimumSizeWithBorderForWidth(width)
			cx = childSize.getX()
			cy = childSize.getY()
			usePadding = true
		end
		
		if hasLeft
			childSize = pLeftWidget.getMinimumSizeWithBorderForHeight(height)
			cx += childSize.getX()
			if hasContent or hasRight
				cx += pGap
			end
			if childSize.getY() > cy
				cy = childSize.getY()
			end
			usePadding = true
		end
		
		if hasTop
			childSize = pTopWidget.getMinimumSizeWithBorderForWidth(width)
			if childSize.getX() > cx
				cx = childSize.getX()
			end
			cy += childSize.getY()
			if hasContent or hasBottom
				cy += pGap
			end
			usePadding = true
		end
		
		if hasRight
			childSize = pRightWidget.getMinimumSizeWithBorderForHeight(height)
			cx += childSize.getX()
			if hasContent
				cx += pGap
			end
			if childSize.getY() > cy
				cy = childSize.getY()
			end
			usePadding = true
		end
		
		if hasBottom
			childSize = pBottomWidget.getMinimumSizeWithBorderForWidth(width)
			if childSize.getX() > cx
				cx = childSize.getX()
			end
			cy += childSize.getY()
			if hasContent
				cy += pGap
			end
			usePadding = true
		end
		
		var Point size = Point.new().largest(cx, cy)
		if usePadding
			size = size + container.getPadding().getSize()
		end
		return size
	end
end
