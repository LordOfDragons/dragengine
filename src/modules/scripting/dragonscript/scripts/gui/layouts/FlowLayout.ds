/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */


namespace Dragengine.Gui.Layouts


/**
 * \brief Arrange widgets flowing along X or Y axis.
 * 
 * Widgets are resized to their minimum size along axis. Extra space is
 * optionally added to the last or first widget.
 * 
 * Instances of this layout can be shared by multiple widgets.
 */
class FlowLayout extends BoxLayout
	/** \brief Stretching. */
	enum Stretch
		/** \brief Stretch no widgets. */
		none
		
		/** \brief Stretch last widget to fill extra space. */
		last
		
		/** \brief Stretch first widget to fill extra space. */
		first
	end
	
	
	var Stretch pStretch
	
	
	/**
	 * \brief Create layout stretching no widget with 0 gap.
	 */
	func new(LayoutAxis axis) super(axis)
		pStretch = Stretch.none
	end
	
	/**
	 * \brief Create layout stretching no widget.
	 * \param gap Gap between widgets. Can be negative to overlap widgets.
	 */
	func new(LayoutAxis axis, int gap) super(axis, gap)
		pStretch = Stretch.none
	end
	
	/**
	 * \brief Create layout.
	 * \param gap Gap between widgets. Can be negative to overlap widgets.
	 */
	func new(LayoutAxis axis, int gap, Stretch stretch) super(axis, gap)
		setStretch(stretch)
	end
	
	
	/** \brief Stretch mode. */
	func Stretch getStretch()
		return pStretch
	end
	
	/** \brief Set stretch mode. */
	func void setStretch(Stretch stretch)
		pStretch = stretch
	end
	
	
	/** \brief Layout widgets in container. */
	func void doLayout(Container container)
		var int count = container.getWidgetCount()
		
		// determine first the minimum size needed. this is the real minimum size not a
		// potentially artifial minimal size from container.getMinimumSize()
		var int width = container.getContainerWidth()
		var int height = container.getContainerHeight()
		var Point minSize = getMinimumSizeFor(container, width, height)
		var LayoutAxis axis = getAxis()
		var bool negate = (axis == LayoutAxis.inverseX or axis == LayoutAxis.inverseY)
		
		// now determine how much additional space we have got
		// at our disposal to size child widgets beyond minimum
		var int cx = container.getPadding().getLeft()
		var int cy = container.getPadding().getTop()
		var int gap = getGap()
		var Point childSize
		
		var BorderSize borderSize
		var int borderHeight, borderWidth, borderLeft, borderTop
		
		var int i, indexFirst, indexLast = count
		var Widget child, stretchWidget
		
		select pStretch
		case Stretch.first
			for indexFirst = 0 to count
				child = container.getWidget(indexFirst)
				if child.getVisible()
					stretchWidget = child
					break
				end
			end
			
		case Stretch.last
			for indexLast = count - 1 downto 0
				child = container.getWidget(indexLast)
				if child.getVisible()
					stretchWidget = child
					break
				end
			end
			indexLast++
		end
		
		select axis
		case LayoutAxis.x, LayoutAxis.inverseX
			var int availSpace = DEMath.max(container.getWidth() - minSize.getX(), 0)
			var int fixedHeight = height
			if negate
				cx += width
			end
			
			for i = indexFirst to indexLast
				child = container.getWidget(i)
				if not child.getVisible()
					continue
				end
				
				childSize = child.getMinimumSizeForHeight(height)
				
				if child.getBorder() == null
					borderLeft = 0
					borderTop = 0
					borderWidth = 0
					borderHeight = 0
					
				else
					borderSize = child.getBorder().getBorderSize()
					borderLeft = borderSize.getLeft()
					borderTop = borderSize.getTop()
					borderWidth = borderSize.getWidth()
					borderHeight = borderSize.getHeight()
				end
				
				if child == stretchWidget
					child.setSize(Point.new(childSize.getX()\
						+ (container.getWidth() - minSize.getX()), fixedHeight - borderHeight))
					
				else
					child.setSize(Point.new(childSize.getX(), fixedHeight - borderHeight))
				end
				
				if negate
					cx -= childSize.getX() + borderWidth + gap
					if child == stretchWidget
						cx -= availSpace
					end
					child.setPosition(Point.new(cx + borderLeft + gap, cy + borderTop))
					
				else
					child.setPosition(Point.new(cx + borderLeft, cy + borderTop))
					cx += childSize.getX() + borderWidth + gap
					if child == stretchWidget
						cx += availSpace
					end
				end
			end
			
		else
			var int availSpace = DEMath.max(container.getHeight() - minSize.getY(), 0)
			var int fixedWidth = width
			if negate
				cy += height
			end
			
			for i = indexFirst to indexLast
				child = container.getWidget(i)
				if not child.getVisible()
					continue
				end
				
				childSize = child.getMinimumSizeForWidth(width)
				
				if child.getBorder() == null
					borderLeft = 0
					borderTop = 0
					borderWidth = 0
					borderHeight = 0
					
				else
					borderSize = child.getBorder().getBorderSize()
					borderLeft = borderSize.getLeft()
					borderTop = borderSize.getTop()
					borderWidth = borderSize.getWidth()
					borderHeight = borderSize.getHeight()
				end
				
				if child == stretchWidget
					child.setSize(Point.new(fixedWidth - borderWidth,\
						childSize.getY() + (container.getHeight() - minSize.getY())))
					
				else
					child.setSize(Point.new(fixedWidth - borderWidth, childSize.getY()))
				end
				
				if negate
					cy -= childSize.getY() + borderHeight + gap
					if child == stretchWidget
						cy -= availSpace
					end
					child.setPosition(Point.new(cx + borderLeft, cy + borderTop + gap))
					
				else
					child.setPosition(Point.new(cx + borderLeft, cy + borderTop))
					cy += childSize.getY() + borderHeight + gap
					if child == stretchWidget
						cy += availSpace
					end
				end
			end
		end
	end
end
