/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */


namespace Dragengine.Gui.Layouts

pin Dragengine.Gui.Borders


/**
 * \brief Arrange widgets in box formation along X or Y axis enlarging them evenly.
 * 
 * Instances of this layout can be shared by multiple widgets.
 */
class BoxLayout implements Layout
	private var LayoutAxis pAxis
	private var int pGap
	
	
	
	/**
	 * \brief Create layout with 0 gap.
	 */
	func new(LayoutAxis axis)
		setAxis(axis)
		pGap = 0
	end
	
	/**
	 * \brief Create layout.
	 * \param gap Size of gap between child widgets. Can be negative to overlap widgets.
	 * \throws EInvalidParam axis is not LayoutAxis.x, LayoutAxis.y, LayoutAxis.inverseX or LayoutAxis.inverseY.
	 */
	func new(LayoutAxis axis, int gap)
		setAxis(axis)
		setGap(gap)
	end
	
	
	
	/** \brief Gap between child widgets. */
	func int getGap()
		return pGap
	end
	
	/**
	 * \brief Set gap between child widgets.
	 * \details Can be negative to overlap widgets.
	 */
	func void setGap(int gap)
		pGap = gap
	end
	
	/** \brief Axis to arrange widgets along. */
	func LayoutAxis getAxis()
		return pAxis
	end
	
	/** \brief Set axis to arrange along. */
	func void setAxis(LayoutAxis axis)
		pAxis = axis
	end
	
	
	
	/**
	 * \brief Add widget to layout using settings.
	 * \param widget Widget to add to layout.
	 * \param settings Not used.
	 */
	func void addWidget(Widget widget, Object settings)
	end
	
	/** \brief Remove widget from layout. */
	func void removeWidget(Widget widget)
	end
	
	
	
	/** \brief Layout widgets in container. */
	func void doLayout(Container container)
		var int count = container.getWidgetCount()
		
		// determine first the minimum size needed. this is the real minimum size not a
		// potentially artifial minimal size from container.getMinimumSize()
		var int width = container.getContainerWidth()
		var int height = container.getContainerHeight()
		var Point minSize = getMinimumSizeFor(container, width, height)
		
		// now determine how much additional space we have got
		// at our disposal to size child widgets beyond minimum
		var bool negate = (pAxis == LayoutAxis.inverseX or pAxis == LayoutAxis.inverseY)
		var int cx = container.getPadding().getLeft()
		var int cy = container.getPadding().getTop()
		var int i, sizeGain, availCount
		var Point childSize
		var Widget child
		
		var BorderSize borderSize
		var int borderHeight
		var int borderWidth
		var int borderLeft
		var int borderTop
		
		for i = 0 to count
			if container.getWidget(i).getVisible()
				availCount++
			end
		end
		
		select pAxis
		case LayoutAxis.x, LayoutAxis.inverseX
			var int availSpace = DEMath.max(container.getWidth() - minSize.getX(), 0)
			if negate
				cx += width
			end
			
			for i = 0 to count
				child = container.getWidget(i)
				if not child.getVisible()
					continue
				end
				
				childSize = child.getMinimumSizeForHeight(height)
				
				if child.getBorder() == null
					borderLeft = borderTop = borderWidth = borderHeight = 0
					
				else
					borderSize = child.getBorder().getBorderSize()
					borderLeft = borderSize.getLeft()
					borderTop = borderSize.getTop()
					borderWidth = borderSize.getWidth()
					borderHeight = borderSize.getHeight()
				end
				sizeGain = availSpace / availCount--
				child.setSize(Point.new(childSize.getX() + sizeGain, height - borderHeight))
				availSpace -= sizeGain
				
				if negate
					cx -= childSize.getX() + sizeGain + borderWidth + pGap
					child.setPosition(Point.new(cx + borderLeft + pGap, cy + borderTop))
					
				else
					child.setPosition(Point.new(cx + borderLeft, cy + borderTop))
					cx += childSize.getX() + sizeGain + borderWidth + pGap
				end
			end
			
		else
			var int availSpace = DEMath.max(container.getHeight() - minSize.getY(), 0)
			if negate
				cy += height
			end
			
			for i = 0 to count
				child = container.getWidget(i)
				if not child.getVisible()
					continue
				end
				
				childSize = child.getMinimumSizeForWidth(width)
				
				if child.getBorder() == null
					borderLeft = borderTop = borderHeight = borderWidth = 0
					
				else
					borderSize = child.getBorder().getBorderSize()
					borderLeft = borderSize.getLeft()
					borderTop = borderSize.getTop()
					borderWidth = borderSize.getWidth()
					borderHeight = borderSize.getHeight()
				end
				sizeGain = availSpace / availCount--
				child.setSize(Point.new(width - borderWidth, childSize.getY() + sizeGain))
				availSpace -= sizeGain
				
				if negate
					cy -= childSize.getY() + sizeGain + borderHeight + pGap
					child.setPosition(Point.new(cx + borderLeft, cy + borderTop + pGap))
					
				else
					child.setPosition(Point.new(cx + borderLeft, cy + borderTop))
					cy += childSize.getY() + sizeGain + borderHeight + pGap
				end
			end
		end
	end
	
	
	
	/** \brief Minimal size required for layout in container. */
	func Point getMinimumSize(Container container)
		return getMinimumSizeFor(container,\
			container.getContainerWidth(), container.getContainerHeight())
	end
	
	/** \brief Minimum size of layout using reference width and variable height. */
	func Point getMinimumSizeForWidth(Container container, int width)
		return getMinimumSizeFor(container,\
			DEMath.max(0, width - container.getPadding().getWidth()), container.getContainerHeight())
	end
	
	/** \brief Minimum size of layout using reference widget height and variable width. */
	func Point getMinimumSizeForHeight(Container container, int height)
		return getMinimumSizeFor(container, container.getContainerWidth(),\
			DEMath.max(0, height - container.getPadding().getHeight()))
	end
	
	
	
	/**
	 * \brief Minimum size of layout using reference and variable size.
	 * \details If LayoutAxis.x is used height is the reference size. If LayoutAxis.y is used
	 *          width is the reference size.
	 */
	protected func Point getMinimumSizeFor(Container container, int width, int height)
		var int i, cx, cy, count = container.getWidgetCount()
		var bool usePadding
		var Point childSize
		var Widget child
		
		select pAxis
		case LayoutAxis.x, LayoutAxis.inverseX
			if count > 0
				for i = 0 to count
					child = container.getWidget(i)
					if not child.getVisible()
						continue
					end
					
					childSize = child.getMinimumSizeWithBorderForHeight(height)
					cx += childSize.getX() + pGap
					cy = DEMath.max(cy, childSize.getY())
					usePadding = true
				end
				cx -= pGap // because we added one gap too much
			end
			
		else
			if count > 0
				for i = 0 to count
					child = container.getWidget(i)
					if not child.getVisible()
						continue
					end
					
					childSize = child.getMinimumSizeWithBorderForWidth(width)
					cy += childSize.getY() + pGap
					cx = DEMath.max(cx, childSize.getX())
					usePadding = true
				end
				cy -= pGap // because we added one gap too much
			end
		end
		
		var Point size = Point.new().largest(cx, cy)
		if usePadding
			size = size + container.getPadding().getSize()
		end
		return size
	end
end
