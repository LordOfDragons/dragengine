/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

namespace Dragengine.Gui.Layouts

pin Dragengine.Gui.Borders


/**
 * \brief Arrange widgets along X or Y axis with weighted size.
 * 
 * Distribute size across widgets based on fixed size and weight factors. The minimum,
 * preferred and maximum size requirements of widgets are disregarded to allow widget sizes
 * to align with fixed external factors. This can be used to enforce relative distribution
 * across different containers no matter what size requirements widgets have.
 * 
 * Use instances of immutable LayoutSettings as layout options when adding widgets. The
 * layout settings can be replaced after adding the widgets. This can be used for example
 * for column based lists to apply changed column sizes to all widgets in affected layouts.
 * 
 * LayoutSettings uses a fixed size and a weight factor. The fixed size replaces the minimum
 * size indicated by the widget measured in pixels. The weight factors are sumemd up across
 * all widgets to obtain the weight sum. The size of each widget is the weight factor divided
 * by the weight sum. The fixed sizes are subtracted from the available space before doing
 * weight calculation.
 * 
 * Instances of this layout can not be shared across multiple widgets.
 */
class WeightLayout extends BoxLayout
	/** \brief Immutable widget layout settings. */
	class LayoutSettings
		var int pWeight, pFixedSize
		
		
		/**
		 * \brief Create layout setting.
		 * 
		 * \param weight Weight factor.
		 * 
		 * \throws EInvalidParam \em weight is less than 0.
		 */
		func new(int weight) this(weight, 0)
		end
		
		/**
		 * \brief Create layout setting.
		 * 
		 * \param weight Weight factor.
		 * \param fixedSize Fixed size in pixels.
		 * 
		 * \throws EInvalidParam weight is less than 0.
		 * \throws EInvalidParam fixedSize is less than 0.
		 */
		func new(int weight, int fixedSize)
			if weight < 0 or fixedSize < 0
				throw EInvalidParam.new()
			end
			
			pWeight = weight
			pFixedSize = fixedSize
		end
		
		
		/** \brief Weight factor. */
		func int getWeight()
			return pWeight
		end
		
		/** \brief Fixed size in pixels. */
		func int getFixedSize()
			return pFixedSize
		end
	end
	
	
	/** \brief Widget layout settings as Dictionary with Widget keys and LayoutSettings values. */
	var Dictionary pWidgetSettings
	
	/** \brief Weight sum or -1 if not calculated yet. */
	var int pWeightSum
	
	
	/** \brief Create layout with 0 gap. */
	func new(LayoutAxis axis) this(axis, 0)
	end
	
	/**
	 * \brief Create layout.
	 * \param gap Size of gap between child widgets. Can be negative to overlap widgets.
	 */
	func new(LayoutAxis axis, int gap) super(axis, gap)
		pWidgetSettings = Dictionary.new()
		pWeightSum = -1
	end
	
	
	/**
	 * \brief Add widget to layout using settings.
	 * 
	 * \param widget Widget to add to layout.
	 * \param settings Instance of LayoutSettings. If null a weight of 1 is used.
	 */
	func void addWidget(Widget widget, Object settings)
		if settings == null
			settings = LayoutSettings.new(1)
		end
		pWidgetSettings.setAt(widget, settings)
		pWeightSum = -1
	end
	
	/** \brief Remove widget from layout. */
	func void removeWidget(Widget widget)
		pWidgetSettings.removeIfExisting(widget)
		pWeightSum = -1
	end
	
	/** \brief Layout settings for widget. */
	func LayoutSettings getWidgetSettings(Widget widget)
		return pWidgetSettings.getAt(widget) cast LayoutSettings
	end
	
	/**
	 * \brief Set layout settings for widget.
	 * 
	 * Layouts the parent of widget after changing the settings.
	 * 
	 * \param widget Widget to set settings for.
	 * \param settings Widget settings. If null a weight of 1 is used.
	 */
	func void setWidgetSettings(Widget widget, LayoutSettings settings)
		if settings == null
			settings = LayoutSettings.new(1)
		end
		pWidgetSettings.setAt(widget, settings)
		pWeightSum = -1
		widget.layoutParent()
	end
	
	
	/** \brief Layout widgets in container. */
	func void doLayout(Container container)
		var int i, count = container.getWidgetCount()
		var LayoutAxis axis = getAxis()
		var int gap = getGap()
		
		// determine first the minimum size needed. this is the real minimum size not a
		// potentially artifial minimal size from container.getMinimumSize()
		var int width = container.getContainerWidth()
		var int height = container.getContainerHeight()
		var Point minSize = getMinimumSizeFor(container, width, height)
		
		// now determine how much additional space we have got at our disposal to size
		// child widgets beyond minimum
		var bool negate = (axis == LayoutAxis.inverseX or axis == LayoutAxis.inverseY)
		var int cx = container.getPadding().getLeft()
		var int cy = container.getPadding().getTop()
		var LayoutSettings layoutSettings
		var Widget child
		
		var BorderSize borderSize
		var int borderHeight, borderWidth, borderLeft, borderTop
		
		var int weightedSize, weightSum = Math.max(getWeightSum(), 1)
		
		select axis
		case LayoutAxis.x, LayoutAxis.inverseX
			var int availSpace = DEMath.max(container.getWidth() - minSize.getX(), 0)
			if negate
				cx += width
			end
			
			for i = 0 to count
				child = container.getWidget(i)
				if not child.getVisible()
					continue
				end
				
				layoutSettings = pWidgetSettings.getAt(child) cast LayoutSettings
				
				weightedSize = layoutSettings.getWeight() * availSpace / weightSum
				availSpace -= weightedSize
				weightSum = DEMath.max(weightSum - layoutSettings.getWeight(), 1)
				
				weightedSize += layoutSettings.getFixedSize()
				
				if child.getBorder() == null
					borderLeft = borderTop = borderWidth = borderHeight = 0
					
				else
					borderSize = child.getBorder().getBorderSize()
					borderLeft = borderSize.getLeft()
					borderTop = borderSize.getTop()
					borderWidth = borderSize.getWidth()
					borderHeight = borderSize.getHeight()
				end
				child.setSize(Point.new(weightedSize - borderWidth, height - borderHeight))
				
				if negate
					cx -= weightedSize + gap
					child.setPosition(Point.new(cx + borderLeft + gap, cy + borderTop))
					
				else
					child.setPosition(Point.new(cx + borderLeft, cy + borderTop))
					cx += weightedSize + gap
				end
			end
			
		else
			var int availSpace = DEMath.max(container.getHeight() - minSize.getY(), 0)
			if negate
				cy += height
			end
			
			for i = 0 to count
				child = container.getWidget(i)
				if not child.getVisible()
					continue
				end
				
				layoutSettings = pWidgetSettings.getAt(child) cast LayoutSettings
				
				weightedSize = layoutSettings.getWeight() * availSpace / weightSum
				availSpace -= weightedSize
				weightSum = DEMath.max(weightSum - layoutSettings.getWeight(), 1)
				
				weightedSize += layoutSettings.getFixedSize()
				
				if child.getBorder() == null
					borderLeft = borderTop = borderHeight = borderWidth = 0
					
				else
					borderSize = child.getBorder().getBorderSize()
					borderLeft = borderSize.getLeft()
					borderTop = borderSize.getTop()
					borderWidth = borderSize.getWidth()
					borderHeight = borderSize.getHeight()
				end
				child.setSize(Point.new(width - borderWidth, weightedSize - borderHeight))
				
				if negate
					cy -= weightedSize + gap
					child.setPosition(Point.new(cx + borderLeft, cy + borderTop + gap))
					
				else
					child.setPosition(Point.new(cx + borderLeft, cy + borderTop))
					cy += weightedSize + gap
				end
			end
		end
	end
	
	
	/**
	 * \brief Minimum size of layout using reference and variable size.
	 * 
	 * If LayoutAxis.x or LayoutAxis.inverseX is used height is the reference size.
	 * If LayoutAxis.y or LayoutAxis.inverseY is used widthis the reference size.
	 */
	protected func Point getMinimumSizeFor(Container container, int width, int height)
		var int i, cx, cy, count = container.getWidgetCount()
		var int gap = getGap()
		var bool usePadding
		var Widget child
		
		if count > 0
			select getAxis()
			case LayoutAxis.x, LayoutAxis.inverseX
				for i = 0 to count
					child = container.getWidget(i)
					if not child.getVisible()
						continue
					end
					
					cx += (pWidgetSettings.getAt(child) cast LayoutSettings).getFixedSize() + gap
					cy = DEMath.max(cy, child.getMinimumSizeWithBorderForHeight(height).getY())
					usePadding = true
				end
				cx -= gap // because we added one gap too much
				
			else
				for i = 0 to count
					child = container.getWidget(i)
					if not child.getVisible()
						continue
					end
					
					cy += (pWidgetSettings.getAt(child) cast LayoutSettings).getFixedSize() + gap
					cx = DEMath.max(cx, child.getMinimumSizeWithBorderForWidth(width).getX())
					usePadding = true
				end
				cy -= gap // because we added one gap too much
			end
		end
		
		var Point size = Point.new().largest(cx, cy)
		if usePadding
			size = size + container.getPadding().getSize()
		end
		return size
	end
	
	
	/**
	 * \brief Weight sum.
	 * 
	 * Recalculates weight sum if required.
	 */
	protected func int getWeightSum()
		if pWeightSum >= 0
			return pWeightSum
		end
		
		pWeightSum = 0
		pWidgetSettings.forEach(block Widget widget, LayoutSettings setting
			if widget.getVisible()
				pWeightSum += setting.getWeight()
			end
		end)
		
		if pWeightSum == 0
			pWeightSum = 1
		end
		
		return pWeightSum
	end
end
