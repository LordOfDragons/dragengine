/* 
 * Drag[en]gine DragonScript Script Module
 *
 * Copyright (C) 2020, Roland Pl√ºss (roland@rptd.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */


namespace Dragengine.Gui.Layouts

pin Dragengine.Gui.Borders


/**
 * \brief Lay out widgets in a regular grid.
 * 
 * Either (but not both) column or row count can be 0 in which case the required column or
 * row count is calculated depending on the visible number of widgets.
 * 
 * If row and column constraint are not 0 the axis defines if widgets are arranges first
 * in rows (LayoutAxis.y or LayoutAxis.inverseY) or columns (LayoutAxis.x or LayoutAxis.inverseX).
 * If row count is 0 axis is ignore and LayoutAxis.y or LayoutAxis.inverseY arrangement
 * is used. If column count is 0 axis is ignored and LayoutAxis.x or LayoutAxis.inverseX
 * arrangement is used. If reverse or not reverse is used depends on the layout axis
 * set in the constructor.
 * 
 * Instances of this layout can be shared by multiple widgets.
 */
class GridLayout implements Layout
	private var int pColumCount
	private var int pRowCount
	private var int pGap
	private var LayoutAxis pAxis
	private var LayoutAxis pUsedAxis
	
	
	
	/** \brief Create GridLayout with no gap between widgets. */
	public func new(int columnCount, int rowCount) this(columnCount, rowCount, 0, LayoutAxis.y)
	end
	
	/** \brief Create GridLayout. */
	public func new(int columnCount, int rowCount, int gap) this(columnCount, rowCount, gap, LayoutAxis.y)
	end
	
	/** \brief Create GridLayout. */
	public func new(int columnCount, int rowCount, int gap, LayoutAxis axis)
		setGap(gap)
		setAxis(axis)
		setColumnCount(columnCount) // requires axis to be set
		setRowCount(rowCount) // requires axis to be set
	end
	
	
	
	/** \brief Number of columns or 0 to choose automatically. */
	public func int getColumnCount()
		return pColumCount
	end
	
	/** \brief Set number of columns or 0 to choose automatically. */
	public func void setColumnCount(int count)
		if count < 0
			throw EInvalidParam.new("count < 0")
		end
		
		pColumCount = count
		updateUsedAxis()
	end
	
	/** \brief Number of rows or 0 to choose automatically. */
	public func int getRowCount()
		return pRowCount
	end
	
	/** \brief Set number of rows or 0 to choose automatically. */
	public func void setRowCount(int count)
		if count < 0
			throw EInvalidParam.new("count < 0")
		end
		
		pRowCount = count
		updateUsedAxis()
	end
	
	/** \brief Size of gap between widgets. */
	public func int getGap()
		return pGap
	end
	
	/** \brief Set size of gap between widgets. */
	public func void setGap(int gap)
		pGap = gap
	end
	
	/** \brief Arrange direction if both row and column count is not 0. */
	public func LayoutAxis getAxis()
		return pAxis
	end
	
	/** \brief Set arrange direction if both row and column count is not 0. */
	public func void setAxis(LayoutAxis axis)
		pAxis = axis
		updateUsedAxis()
	end
	
	
	
	/** \brief Add widget to Layout. */
	public func void addWidget(Widget widget, Object settings)
	end
	
	/** \brief Remove widget from layout. */
	public func void removeWidget(Widget widget)
	end
	
	
	
	/** \brief Lay out widgets. */
	public func void doLayout(Container container)
		if pColumCount == 0 and pRowCount == 0
			throw EInvalidParam.new()
		end
		
		// determine cell size and the number of columns and rows to use
		var int columnCount = pColumCount
		var int rowCount = pRowCount
		
		if columnCount == 0
			columnCount = getRequiredColumnCount(container)
			
		elif rowCount == 0
			rowCount = getRequiredRowCount(container)
		end
		
		if columnCount == 0 or rowCount == 0
			return
		end
		
		// lay out widgets using appropriate method
		select pUsedAxis
		case LayoutAxis.x
			layoutXAxis(container, columnCount, rowCount, false)
			
		case LayoutAxis.inverseX
			layoutXAxis(container, columnCount, rowCount, true)
			
		case LayoutAxis.y
			layoutYAxis(container, columnCount, rowCount, false)
			
		case LayoutAxis.inverseY
			layoutYAxis(container, columnCount, rowCount, true)
		end
	end
	
	
	
	/** \brief Minimal size required for layout in container. */
	public func Point getMinimumSize(Container container)
		return getMinimumSizeFor(container, \
			container.getContainerWidth(), container.getContainerHeight())
	end
	
	/** \brief Minimum size of layout using reference width and variable height. */
	public func Point getMinimumSizeForWidth(Container container, int width)
		return getMinimumSizeFor(container, \
			DEMath.max(0, width - container.getPadding().getWidth()), container.getContainerHeight())
	end
	
	/** \brief Minimum size of layout using reference widget height and variable width. */
	public func Point getMinimumSizeForHeight(Container container, int height)
		return getMinimumSizeFor(container, \
			container.getContainerWidth(), DEMath.max(0, height - container.getPadding().getHeight()))
	end
	
	
	
	/**
	 * \brief Determine the actual axis to use for layout.
	 * \details Actual axis depends on row and column count before axis.
	 */
	protected func void updateUsedAxis()
		if pColumCount == 0
			select pAxis
			case LayoutAxis.x, LayoutAxis.y
				pUsedAxis = LayoutAxis.x
				
			else
				pUsedAxis = LayoutAxis.inverseX
			end
			
		elif pRowCount == 0
			select pAxis
			case LayoutAxis.x, LayoutAxis.y
				pUsedAxis = LayoutAxis.y
				
			else
				pUsedAxis = LayoutAxis.inverseY
			end
			
		else
			pUsedAxis = pAxis
		end
	end
	
	
	
	/** \deprecated use layoutYAxis(Container,int,int,bool). */
	protected func void layoutYAxis(Container container, int columnCount, int rowCount)
		layoutYAxis(container, columnCount, rowCount, false)
	end
	
	/** \deprecated Use layoutXAxis(Container,int,int,bool). */
	protected func void layoutXAxis(Container container, int columnCount, int rowCount)
		layoutXAxis(container, columnCount, rowCount, false)
	end
	
	/** \brief Lay out widgets rows first. */
	protected func void layoutYAxis(Container container, int columnCount, int rowCount, bool inverse)
		// lay out widgets
		var int containerWidth = container.getContainerWidth() + pGap
		var int containerHeight = container.getContainerHeight() + pGap
		var int left = container.getPadding().getLeft()
		var int top = container.getPadding().getTop()
		
		var int count = container.getWidgetCount()
		var int columnLeft = left
		var int columnRight = left
		var int rowTop = top
		var int rowBottom = top + containerHeight / rowCount
		var int rowHeight = rowBottom - rowTop - pGap
		var int column = 0
		var int row = 0
		var Point childSize
		var Widget child
		
		var BorderSize borderSize
		var int borderHeight
		var int borderWidth
		var int borderLeft
		var int borderTop
		
		var int nextIndex, endIndex, stepIndex
		
		if inverse
			nextIndex = count - 1
			endIndex = -1
			stepIndex = -1
			
		else
			nextIndex = 0
			endIndex = count
			stepIndex = 1
		end
		
		while nextIndex != endIndex
			child = container.getWidget(nextIndex)
			nextIndex += stepIndex
			
			if not child.getVisible()
				continue
			end
			
			if row == rowCount
				throw EInvalidParam.new()
			end
			
			childSize = child.getMinimumSize()
			
			if child.getBorder() == null
				borderLeft = 0
				borderTop = 0
				borderWidth = 0
				borderHeight = 0
				
			else
				borderSize = child.getBorder().getBorderSize()
				borderLeft = borderSize.getLeft()
				borderTop = borderSize.getTop()
				borderWidth = borderSize.getWidth()
				borderHeight = borderSize.getHeight()
			end
			
			if column == columnCount
				column = 1
				row++
				columnLeft = left
				rowTop = rowBottom
				rowBottom = top + containerHeight * (row + 1) / rowCount
				rowHeight = rowBottom - rowTop - pGap
				
			else
				column++
				columnLeft = columnRight
			end
			
			columnRight = left + containerWidth * column / columnCount
			
			child.setPosition(Point.new(columnLeft + borderLeft, rowTop + borderTop))
			child.setSize(Point.new(columnRight - columnLeft - pGap - borderWidth, rowHeight - borderHeight))
		end
	end
	
	/**
	 * \brief Lay out widgets columns first.
	 * \brief 1.11
	 */
	protected func void layoutXAxis(Container container, int columnCount, int rowCount, bool inverse)
		var int containerWidth = container.getContainerWidth() + pGap
		var int containerHeight = container.getContainerHeight() + pGap
		var int left = container.getPadding().getLeft()
		var int top = container.getPadding().getTop()
		
		var int count = container.getWidgetCount()
		var int rowTop = top
		var int rowBottom = top
		var int columnLeft = left
		var int columnRight = left + containerWidth / columnCount
		var int columnWidth = columnRight - columnLeft - pGap
		var int column = 0
		var int row = 0
		var Point childSize
		var Widget child
		
		var BorderSize borderSize
		var int borderHeight
		var int borderWidth
		var int borderLeft
		var int borderTop
		
		var int nextIndex, endIndex, stepIndex
		
		if inverse
			nextIndex = count - 1
			endIndex = -1
			stepIndex = -1
			
		else
			nextIndex = 0
			endIndex = count
			stepIndex = 1
		end
		
		while nextIndex != endIndex
			child = container.getWidget(nextIndex)
			nextIndex += stepIndex
			
			if not child.getVisible()
				continue
			end
			
			if column == columnCount
				throw EInvalidParam.new()
			end
			
			childSize = child.getMinimumSize()
			
			if child.getBorder() == null
				borderLeft = 0
				borderTop = 0
				borderWidth = 0
				borderHeight = 0
				
			else
				borderSize = child.getBorder().getBorderSize()
				borderLeft = borderSize.getLeft()
				borderTop = borderSize.getTop()
				borderWidth = borderSize.getWidth()
				borderHeight = borderSize.getHeight()
			end
			
			if row == rowCount
				row = 1
				column++
				rowTop = top
				columnLeft = columnRight
				columnRight = left + containerWidth * (column + 1) / columnCount
				columnWidth = columnRight - columnLeft - pGap
				
			else
				row++
				rowTop = rowBottom
			end
			
			rowBottom = top + containerHeight * row / rowCount
			
			child.setPosition(Point.new(columnLeft + borderLeft, rowTop + borderTop))
			child.setSize(Point.new(columnWidth - borderWidth, rowBottom - rowTop - pGap - borderHeight))
		end
	end
	
	
	
	/** \brief Minimal cell size. */
	protected func Point getMinimumCellSize(Container container, int width, int height)
		var int count = container.getWidgetCount()
		var Point minSize = Point.new()
		var Point childSize
		var Widget child
		var int i
		
		select pUsedAxis
		case LayoutAxis.x, LayoutAxis.inverseX
			for i = 0 to count
				child = container.getWidget(i)
				if child.getVisible()
					minSize = minSize.largest(child.getMinimumSizeWithBorderForHeight(height))
				end
			end
			
		case LayoutAxis.y, LayoutAxis.inverseY
			for i = 0 to count
				child = container.getWidget(i)
				if child.getVisible()
					minSize = minSize.largest(child.getMinimumSizeWithBorderForWidth(width))
				end
			end
		end
		
		return Point.new().largest(minSize)
	end
	
	/** \brief Required row count. */
	protected func int getRequiredRowCount(Container container)
		var int count = container.getWidgetCount()
		var int rowWidgetCount = 0
		var int rowCount = 1
		var Widget child
		var int i
		
		for i = 0 to count
			child = container.getWidget(i)
			if not child.getVisible()
				continue
			end
			
			if rowWidgetCount == pColumCount
				rowCount++
				rowWidgetCount = 0
			end
			
			rowWidgetCount++
		end
		
		if rowWidgetCount == 0
			return 0
		end
		
		return rowCount
	end
	
	/** \brief Required colunm count. */
	protected func int getRequiredColumnCount(Container container)
		var int count = container.getWidgetCount()
		var int columnWidgetCount = 0
		var int columnCount = 1
		var Widget child
		var int i
		
		for i = 0 to count
			child = container.getWidget(i)
			if not child.getVisible()
				continue
			end
			
			if columnWidgetCount == pRowCount
				columnCount++
				columnWidgetCount = 0
			end
			
			columnWidgetCount++
		end
		
		if columnWidgetCount == 0
			return 0
		end
		
		return columnCount
	end
	
	/** \brief Minimal size child widgets need. */
	protected func Point getMinimumSizeFor(Container container, int width, int height)
		if pColumCount == 0 and pRowCount == 0
			throw EInvalidParam.new()
		end
		
		var Point cellSize = getMinimumCellSize(container, width, height)
		var int columnCount = pColumCount
		var int rowCount = pRowCount
		
		if columnCount == 0
			columnCount = getRequiredColumnCount(container)
			
		elif rowCount == 0
			rowCount = getRequiredRowCount(container)
		end
		
		var bool usePadding = container.findWidget(block Widget each
			return each.getVisible()
		end) != null
		
		var Point size = Point.new().largest(\
			cellSize.getX() * columnCount + pGap * DEMath.max(0, columnCount - 1), \
			cellSize.getY() * rowCount + pGap * DEMath.max(0, rowCount - 1))
		if usePadding
			size = size + container.getPadding().getSize()
		end
		return size
	end
end
