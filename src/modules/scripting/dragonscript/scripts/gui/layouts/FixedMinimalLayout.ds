/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */


namespace Dragengine.Gui.Layouts

pin Dragengine.Gui.Borders


/**
 * \brief Sets widgets to their minimal desired size without moving them.
 * 
 * Instances of this layout can be shared by multiple widgets.
 */
class FixedMinimalLayout extends FixedLayout
	/** \brief Create layout. */
	public func new()
	end
	
	
	
	/** \brief Layout widgets in container. */
	public func void doLayout( Container container )
		var int i, count = container.getWidgetCount()
		var Widget child
		
		for i = 0 to count
			child = container.getWidget( i )
			if child.getVisible()
				child.setSize( child.getMinimumSize() )
			end
		end
	end
	
	
	
	/** \brief Minimal size required for layout in container. */
	public func Point getMinimumSize( Container container )
		var int i, count = container.getWidgetCount()
		var RectArea rect = RectArea.new()
		var bool usePadding = false
		var BorderSize borderSize
		var Border border
		var Widget child
		
		for i = 0 to count
			child = container.getWidget( i )
			if not child.getVisible()
				continue
			end
			
			border = child.getBorder()
			usePadding = true
			
			if border == null
				rect = rect.include( RectArea.new( child.getPosition(), child.getMinimumSize() ) )
				
			else
				borderSize = border.getBorderSize()
				rect = rect.include( RectArea.new( \
					child.getPosition() - Point.new( borderSize.getLeft(), borderSize.getTop() ), \
					child.getMinimumSize() + borderSize.getSize() ) )
			end
		end
		
		var Point size = rect.getSize()
		if usePadding
			size = size + container.getPadding().getSize()
		end
		return size
	end
	
	/** \brief Minimum size of layout using reference width and variable height. */
	public func Point getMinimumSizeForWidth( Container container, int width )
		return this.getMinimumSize( container )
	end
	
	/** \brief Minimum size of layout using reference widget height and variable width. */
	public func Point getMinimumSizeForHeight( Container container, int height )
		return this.getMinimumSize( container )
	end
end
