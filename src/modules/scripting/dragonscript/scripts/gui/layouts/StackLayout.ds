/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */


namespace Dragengine.Gui.Layouts


/**
 * \brief Arrange widgets to fill the entire container fully covering each other.
 * 
 * Widgets should be transparent for this layout to work best.
 * 
 * Instances of this layout can be shared by multiple widgets.
 */
class StackLayout implements Layout
	/** \brief Aspect ratio behavior. */
	enum AspectRatio
		/**
		 * \brief No aspect ratio protection.
		 * 
		 * Widgets can turn out stretched loosing their aspect ratio.
		 */
		stretch
		
		/**
		 * \brief Protect aspect ratio fitting widget into available space.
		 * 
		 * Widgets are guaranteed to keep their aspect ratio. The size and position
		 * is corrected in a way the widget fits entirely inside the container. This
		 * ensures widgets are not clipped and are fully visible but potentially
		 * introduces empty borders.
		 */
		fit
		
		/**
		 * \brief Protect aspect ratio clipping widget to fill available space.
		 * 
		 * Widgets are guaranteed to keep their aspect ratio. The size and position
		 * is corrected in a way the widget entirely fills the container. This ensures
		 * no empty borders exist around widgets widgets but potentially clips widgets.
		 */
		clip
	end
	
	
	
	/** \brief Aspect ratio mode. */
	private var AspectRatio pAspectRatio
	
	/** \brief Stretch widget if minimum size is less than the available space. */
	private var bool pStretchIfSmaller
	
	
	
	/** \brief Create layout with AspectRatio.stretch aspect ratio mode. */
	public func new() this( AspectRatio.stretch, true )
	end
	
	/** \brief Create layout. */
	public func new( AspectRatio aspectRatio ) this( aspectRatio, true )
	end
	
	/**
	 * \brief Create layout.
	 * \version 1.4
	 */
	public func new( AspectRatio aspectRatio, bool stretchIfSmaller )
		this.pAspectRatio = aspectRatio
		this.pStretchIfSmaller = stretchIfSmaller
	end
	
	
	
	/** \brief Aspect ratio mode. */
	public func AspectRatio getAspectRatio()
		return this.pAspectRatio
	end
	
	/**
	 * \brief Set aspect ratio mode.
	 */
	public func void setAspectRatio( AspectRatio aspectRatio )
		this.pAspectRatio = aspectRatio
	end
	
	/**
	 * \brief Stretch widget if minimum size is less than the available space.
	 * \version 1.4
	 * 
	 * Used only if aspect ratio is not AspectRatio.stretch
	 */
	public func bool getStretchIfSmaller()
		return this.pStretchIfSmaller
	end
	
	/**
	 * \brief Set to stretch widget if minimum size is less than the available space.
	 * \version 1.4
	 * 
	 * Used only if aspect ratio is not AspectRatio.stretch
	 */
	public func void setStretchIfSmaller( bool stretchIfSmaller )
		this.pStretchIfSmaller = stretchIfSmaller
	end
	
	
	
	/**
	 * \brief Add widget to layout into area.
	 * 
	 * \param widget Widget to add to layout.
	 * \param settings Not used.
	 * \throws EInvalidParam widget is \em null.
	 */
	public func void addWidget( Widget widget, Object settings )
	end
	
	/** \brief Remove widget from layout. */
	public func void removeWidget( Widget widget )
	end
	
	
	
	/** \brief Layout widgets in container. */
	public func void doLayout( Container container )
		var int count = container.getWidgetCount()
		var int offx = container.getPadding().getLeft()
		var int offy = container.getPadding().getTop()
		var int width = container.getContainerWidth()
		var int height = container.getContainerHeight()
		var float aspectRatio1 = 1
		var int borderLeft
		var int borderTop
		var int borderWidth
		var int borderHeight
		var Widget child
		var int i
		
		if this.pAspectRatio != AspectRatio.stretch
			aspectRatio1 = ( width cast float ) / ( DEMath.max( height, 1 ) cast float )
		end
		
		for i = 0 to count
			child = container.getWidget( i )
			if not child.getVisible()
				continue
			end
			
			if child.getBorder() == null
				borderLeft = 0
				borderTop = 0
				borderWidth = 0
				borderHeight = 0
				
			else
				var BorderSize borderSize = child.getBorder().getBorderSize()
				borderLeft = borderSize.getLeft()
				borderTop = borderSize.getTop()
				borderWidth = borderSize.getWidth()
				borderHeight = borderSize.getHeight()
			end
			
			if this.pAspectRatio == AspectRatio.stretch
				child.setPosition( Point.new( offx + borderLeft, offy + borderTop ) )
				child.setSize( Point.new( width - borderWidth, height - borderHeight ) )
				
			else
				var Point childMinSize = Point.new().largest( child.getMinimumSizeWithBorderForWidth( width ) )
				var int childWidth = width - borderWidth
				var int childHeight = height - borderHeight
				var int aspectOffsetX = 0
				var int aspectOffsetY = 0
				
				if this.pStretchIfSmaller or not ( childMinSize <= Point.new( childWidth, childHeight ) )
					var float aspectRatio2 = ( Math.max( childMinSize.getX(), 1 ) cast float ) \
						/ ( Math.max( childMinSize.getY(), 1 ) cast float )
					
					if this.pAspectRatio == AspectRatio.fit
						if aspectRatio2 < aspectRatio1
							childWidth = ( ( childHeight cast float ) * aspectRatio2 ) cast int
							aspectOffsetX = ( ( width - borderWidth ) - childWidth ) / 2
							
						else
							childHeight = ( ( childWidth cast float ) / aspectRatio2 ) cast int
							aspectOffsetY = ( ( height - borderHeight ) - childHeight ) / 2
						end
						
					else // AspectRatio.clip
						if aspectRatio2 < aspectRatio1
							childHeight = ( ( childWidth cast float ) / aspectRatio2 ) cast int
							aspectOffsetY = ( ( height - borderHeight ) - childHeight ) / 2
							
						else
							childWidth = ( ( childHeight cast float ) * aspectRatio2 ) cast int
							aspectOffsetX = ( ( width - borderWidth ) - childWidth ) / 2
						end
					end
					
				else
					childWidth = childMinSize.getX()
					childHeight = childMinSize.getY()
					aspectOffsetX = ( ( width - borderWidth ) - childWidth ) / 2
					aspectOffsetY = ( ( height - borderHeight ) - childHeight ) / 2
				end
				
				child.setPosition( Point.new( offx + borderLeft + aspectOffsetX, offy + borderTop + aspectOffsetY ) )
				child.setSize( Point.new( childWidth, childHeight ) )
			end
		end
	end
	
	
	
	/** \brief Minimal size required for layout in container. */
	public func Point getMinimumSize( Container container )
		return this.getMinimumSizeForWidth( container, container.getContainerWidth() )
	end
	
	/** \brief Minimum size of layout using reference width and variable height. */
	public func Point getMinimumSizeForWidth( Container container, int width )
		var int count = container.getWidgetCount()
		var Point size = Point.new()
		var bool usePadding = false
		var Widget child
		var int i
		
		for i = 0 to count
			child = container.getWidget( i )
			if not child.getVisible()
				continue
			end
			
			size = size.largest( child.getMinimumSizeWithBorderForWidth( width ) )
			usePadding = true
		end
		
		if usePadding
			size = size + container.getPadding().getSize()
		end
		return size
	end
	
	/** \brief Minimum size of layout using reference widget height and variable width. */
	public func Point getMinimumSizeForHeight( Container container, int height )
		var int count = container.getWidgetCount()
		var Point size = Point.new()
		var bool usePadding = false
		var Widget child
		var int i
		
		for i = 0 to count
			child = container.getWidget( i )
			if not child.getVisible()
				continue
			end
			
			size = size.largest( child.getMinimumSizeWithBorderForHeight( height ) )
			usePadding = true
		end
		
		if usePadding
			size = size + container.getPadding().getSize()
		end
		return size
	end
end
