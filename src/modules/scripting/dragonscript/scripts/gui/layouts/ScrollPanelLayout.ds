/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

namespace Dragengine.Gui.Layouts

pin Dragengine.Gui.Borders


/**
 * \brief Arrange content widget using the position value of two scrollbars.
 * 
 * Instances of this layout can not be shared by multiple widgets.
 */
class ScrollPanelLayout implements Layout
	/** \brief Area to place widget in. */
	enum Area
		/** \brief Content */
		content
		
		/** \brief Horizontal scrollbar */
		horizontal
		
		/** \brief Vertical scrollbar */
		vertical
	end
	
	
	var Widget pContent
	var ScrollBar pHorizontalScrollBar, pVerticalScrollBar
	var int pGap
	
	
	/** \brief Create layout with 0 gap. */
	func new()
	end
	
	/**
	 * \brief Create layout.
	 * \param gap Gap in pixels between areas.
	 */
	func new(int gap)
		setGap(gap)
	end
	
	
	/** \brief Gap between areas in pixels. */
	func int getGap()
		return pGap
	end
	
	/** \brief Set gap between areas in pixels. */
	func void setGap(int gap)
		if gap < 0
			throw EInvalidParam.new()
		end
		pGap = gap
	end
	
	
	/** \brief Content widget or \em null if not set. */
	func Widget getContent()
		return pContent
	end
	
	/** \brief Horizontal scrollbar or \em null if not set. */
	func ScrollBar getHorizontalScrollBar()
		return pHorizontalScrollBar
	end
	
	/** \brief Vertical scrollbar or \em null if not set. */
	func ScrollBar getVerticalScrollBar()
		return pVerticalScrollBar
	end
	
	
	/**
	 * \brief Add widget to layout into area.
	 * 
	 * \param widget Widget to add to layout.
	 * \param settings Area to place widget in. Has to be of type \ref Area .
	 * \throws EInvalidParam widget is \em null.
	 */
	func void addWidget(Widget widget, Object settings)
		if widget == null
			throw EInvalidParam.new()
		end
		
		select settings cast Area
		case Area.content
			if pContent != null
				throw EInvalidParam.new()
			end
			pContent = widget
			
		case Area.horizontal
			if pHorizontalScrollBar != null
				throw EInvalidParam.new()
			end
			pHorizontalScrollBar = widget cast ScrollBar
			
		case Area.vertical
			if pVerticalScrollBar != null
				throw EInvalidParam.new()
			end
			pVerticalScrollBar = widget cast ScrollBar
			
		else
			throw EInvalidParam.new()
		end
	end
	
	/** \brief Remove widget from layout. */
	func void removeWidget(Widget widget)
		if widget == null
			throw EInvalidParam.new()
		end
		
		if pContent == widget
			pContent = null
			
		elif widget == pHorizontalScrollBar
			pHorizontalScrollBar = null
			
		elif widget == pVerticalScrollBar
			pVerticalScrollBar = null
			
		else
			throw EInvalidParam.new()
		end
	end
	
	
	/** \brief Layout widgets in container. */
	func void doLayout(Container container)
		var bool hasHorz = pHorizontalScrollBar != null and pHorizontalScrollBar.getVisible()
		var bool hasVert = pVerticalScrollBar != null and pVerticalScrollBar.getVisible()
		var bool hasContent = pContent != null and pContent.getVisible()
		var int borderLeft = container.getPadding().getLeft()
		var int borderTop = container.getPadding().getTop()
		var int borderRight = container.getPadding().getRight()
		var int borderBottom = container.getPadding().getBottom()
		var int width = container.getWidth()
		var int height = container.getHeight()
		var int gap = getGap()
		var int horzHeight, horzBLeft, horzBTop, horzBRight, horzBBottom
		var int vertWidth, vertBLeft, vertBTop, vertBRight, vertBBottom
		var int contentBLeft, contentBTop, contentBWidth, contentBHeight
		var BorderSize borderSize
		
		// determine size of content area
		var int cx = width - borderLeft - borderRight
		var int cy = height - borderTop - borderBottom
		
		if hasHorz
			horzHeight = pHorizontalScrollBar.getMinimumSize().getY()
			
			if pHorizontalScrollBar.getBorder() != null
				borderSize = pHorizontalScrollBar.getBorder().getBorderSize()
				horzBLeft = borderSize.getLeft()
				horzBTop = borderSize.getTop()
				horzBRight = borderSize.getRight()
				horzBBottom = borderSize.getBottom()
			end
			
			cy = DEMath.max(cy - horzHeight - gap - horzBTop - horzBBottom, 0)
		end
		
		if hasVert
			vertWidth = pVerticalScrollBar.getMinimumSize().getX()
			
			if pVerticalScrollBar.getBorder() != null
				borderSize = pVerticalScrollBar.getBorder().getBorderSize()
				vertBLeft = borderSize.getLeft()
				vertBTop = borderSize.getTop()
				vertBRight = borderSize.getRight()
				vertBBottom = borderSize.getBottom()
			end
			
			cx = DEMath.max(cx - vertWidth - gap - vertBLeft - vertBRight, 0)
		end
		
		if hasContent and pContent.getBorder() != null
			borderSize = pContent.getBorder().getBorderSize()
			contentBLeft = borderSize.getLeft()
			contentBTop = borderSize.getTop()
			contentBWidth = borderSize.getWidth()
			contentBHeight = borderSize.getHeight()
		end
		
		// place widgets
		if hasHorz
			pHorizontalScrollBar.setPosition(Point.new(borderLeft + horzBLeft, height - borderBottom - horzHeight - horzBBottom))
			pHorizontalScrollBar.setSize(Point.new(cx - horzBLeft - horzBRight, horzHeight))
		end
		
		if hasVert
			pVerticalScrollBar.setPosition(Point.new(width - borderRight - vertWidth - vertBRight, borderTop + vertBTop))
			pVerticalScrollBar.setSize(Point.new(vertWidth, cy - vertBTop - vertBBottom))
		end
		
		if hasContent
			cx = DEMath.max(cx - contentBWidth, 0)
			cy = DEMath.max(cy - contentBHeight, 0)
			
			pContent.setPosition(Point.new(borderLeft + contentBLeft, borderTop + contentBTop))
			pContent.setSize(Point.new(cx , cy))
		end
	end
	
	
	
	/** \brief Minimal size required for layout in container. */
	func Point getMinimumSize(Container container)
		var Point minSize = getBaseMinimumSize(container)
		
		if pContent != null and pContent.getVisible()
			minSize = minSize + pContent.getMinimumSizeWithBorder()
		end
		
		return minSize
	end
	
	/** \brief Minimum size of layout using reference width and variable height. */
	func Point getMinimumSizeForWidth(Container container, int width)
		var Point minSize = getBaseMinimumSize(container)
		
		if pContent != null and pContent.getVisible()
			minSize = minSize + pContent.getMinimumSizeWithBorderForWidth(width)
		end
		
		return minSize
	end
	
	/** \brief Minimum size of layout using reference widget height and variable width. */
	func Point getMinimumSizeForHeight(Container container, int height)
		var Point minSize = getBaseMinimumSize(container)
		
		if pContent != null and pContent.getVisible()
			minSize = minSize + pContent.getMinimumSizeWithBorderForHeight(height)
		end
		
		return minSize
	end
	
	
	/** \brief Reference size independend minimum size. */
	protected func Point getBaseMinimumSize(Container container)
		var Point size = Point.new()
		var int gap = getGap()
		var bool usePadding = false
		
		if pHorizontalScrollBar != null and pHorizontalScrollBar.getVisible()
			size = size + pHorizontalScrollBar.getMinimumSizeWithBorder() + Point.new(0, gap)
			usePadding = true
		end
		
		if pVerticalScrollBar != null and pVerticalScrollBar.getVisible()
			size = size + pVerticalScrollBar.getMinimumSizeWithBorder() + Point.new(gap, 0)
			usePadding = true
		end
		
		if usePadding
			size = size + container.getPadding().getSize()
		end
		return size
	end
end
