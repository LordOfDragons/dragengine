/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

namespace Dragengine.Gui

pin Dragengine.Gui.Borders
pin Dragengine.Gui.Events
pin Dragengine.Gui.Layouts
pin Dragengine.Gui.Listeners
pin Dragengine.Scenery
pin Dragengine.Utils


/**
 * \brief Drop down list displaying the currently selected element.
 * 
 * Supports designing using designer selector "ComboBox". The drop-down list box supports
 * desining using designer selector "ListBox.ComboBox".
 */
class ComboBox extends Container implements ListModelListener
	/** \deprecated Editor focus lost listener. */
	class EditorFocusLost extends DefaultFocusListener
		var ComboBox pComboBox
		
		func new(ComboBox comboBox)
			pComboBox = comboBox
		end
		
		func void onFocusReceived(FocusEvent event)
			pComboBox.onFocusReceived(event)
		end
		
		func void onFocusLost(FocusEvent event)
			pComboBox.onFocusLost(event)
		end
	end
	
	/** \brief Editor value changed listener. */
	class EditorValueChanged extends DefaultActionListener
		var ComboBox pComboBox
		
		func new(ComboBox comboBox)
			pComboBox = comboBox
		end
		
		func void onAction(ActionEvent event)
			pComboBox.setSelectedFromEditorValue()
			pComboBox.updateSelectedWidget()
		end
	end
	
	/** \brief Roll up mouse listener. */
	class RollUpMouseListener extends DefaultMouseListener
		var ComboBox pComboBox
		var bool pPressed
		
		func new(ComboBox comboBox)
			pComboBox = comboBox
			pPressed = false
		end
		
		func void onButtonPress(MouseEvent event)
			if event.getButton() == InputEventMouseButton.left
				pPressed = true
			end
		end
		
		func void onButtonRelease(MouseEvent event)
			if event.getButton() == InputEventMouseButton.left and pPressed
				pComboBox.rollUp()
			end
		end
	end
	
	/** \deprecated Popup widget listener. */
	class PopupWidgetListener extends DefaultWidgetListener
		var ComboBox pComboBox
		
		func new(ComboBox comboBox)
			pComboBox = comboBox
		end
		
		func void onWidgetHidden(WidgetEvent event)
			pComboBox.rollUp()
		end
	end
	
	/**
	 * \brief Popup window.
	 * \version 1.17
	 */
	class ComboPopup extends WindowPopup
		var ComboBox pComboBox
		var ListBox pListBox
		
		func new(ComboBox comboBox)
			pComboBox = comboBox
			setCloseOnPopDown(false)
		end
		
		func void dispose()
			if pListBox != null
				// disposing of pListBox removes listeners but only if model has been created
				// by pListBox. hence we need to remove combox from listener here but only if
				// model still exists. this catches the situation of the listbox being disposed
				// early. this should actually not be possible but better safe than sorry
				var ListModel model = pListBox.getModel()
				if model != null
					model.removeListener(pComboBox)
				end
				pListBox = null
			end
			
			super.dispose()
			
			pComboBox = null
		end
		
		func void setListBox(ListBox listBox)
			pListBox = listBox
		end
		
		func bool requiresPopdown(MouseEvent event)
			if not super.requiresPopdown(event)
				return false
			end
			if pComboBox.getEditor() == null
				return true
			end
			
			var Widget source = event.getSource() cast Widget
			var Point desktopPosition = source.getDesktopPosition() + event.getPosition()
			var Point comboBoxPosition = desktopPosition - pComboBox.getDesktopPosition()
			if not pComboBox.isPointInside(comboBoxPosition)
				return true
			end
			
			var Widget dropDownButton = pComboBox.getButtonDropDownWidget()
			if dropDownButton == null
				return true
			end
			
			return dropDownButton.isPointInside(comboBoxPosition - dropDownButton.getPosition())
		end
		
		func void popdown()
			super.popdown()
			pComboBox.rollUp()
			pComboBox.onStateChanged(StateChangeEvent.new(this, StateChangeEvent.idStateChanged))
		end
		
		func void sendEvent(Event event)
			if event.getSource() != this
				return
			end
			
			var int id = event.getIdentifier()
			var Desktop desktop = getDesktop()
			var Point desktopPosition
			
			if MouseEvent.isMouseEvent(id)
				desktopPosition = getDesktopPosition() + (event cast MouseEvent).getPosition()
				
			else
				desktopPosition = desktop.getMouseLocation()
			end
			
			var Widget target = desktop.widgetAcceptingInputAt(desktopPosition)
			if target == null or not target.hasParent(pComboBox)
				super.sendEvent(event)
				return
			end
			
			if MouseEvent.isMouseEvent(id)
				var MouseEvent mouseEvent = event cast MouseEvent
				var Point mousePosition
				
				if id == MouseEvent.idMouseWheeled
					mousePosition = mouseEvent.getPosition()
					
				else
					mousePosition = desktopPosition - target.getDesktopPosition()
				end
				
				target.sendEvent(MouseEvent.new(target, id, mouseEvent.getButton(),\
					mouseEvent.getModifiers(), mousePosition, mouseEvent.getSystem(),\
					mouseEvent.getDevice()))
				
			elif KeyEvent.isKeyEvent(id)
				var KeyEvent keyEvent = event cast KeyEvent
				target.sendEvent(KeyEvent.new(target, id, keyEvent.getKeyCode(), \
					keyEvent.getModifiers(), keyEvent.getKeyChar(), \
					keyEvent.getSystem(), keyEvent.getDevice() , keyEvent.getButtonCode()))
				
			elif GamepadEvent.isGamepadEvent(id)
				var GamepadEvent gevent = event cast GamepadEvent
				target.sendEvent(GamepadEvent.new(target, id, gevent.getSystem(),\
					gevent.getDevice(), gevent.getCode(), gevent.getModifiers(), gevent.getAxisValue()))
				
			else
				target.sendEvent(event)
			end
		end
	end
	
	
	
	var ComboPopup pDropDown
	var ListBox pListBox
	var Widget pWidgetButtonDropDown
	var Container pWidgetButtonDropDownContainer
	var Panel pPanelSelectedElement
	var Widget pSelectedElement
	var Panel pSpacer
	var ComboBoxEditor pEditor
	var EditorFocusLost pEditorFocusLost
	var EditorValueChanged pEditorValueChanged
	var Point pDefaultElementSize
	var bool pSelFromEditorOnDropDown
	var bool pDropDownRequiresSelFromEditor
	var String pSelectedElementDesignerSelector
	var bool pPreventUpdateEditor
	var bool pExplicitDropDown
// 	var bool pFirstDropDown
	
	
	
	/** \brief Create combo box widget. */
	func new() this(DefaultListModel.new(), DefaultListElementRenderer.new())
	end
	
	/** \brief Create combo box widget. */
	func new(ListModel model) this(model, DefaultListElementRenderer.new())
	end
	
	/** \brief Create combo box widget. */
	func new(ListModel model, ListElementRenderer renderer)
		setCanFocus(true) // this is not working correctly. needs fixing
		setCanFocusDirectional(true)
		
		pSelFromEditorOnDropDown = true
// 		pFirstDropDown = true
		
		pDefaultElementSize = Point.new(1, 1)
		
		pEditorFocusLost = EditorFocusLost.new(this)
		pEditorValueChanged = EditorValueChanged.new(this)
		
		pListBox = ListBox.new(model, renderer)
		pListBox.setNumberDisplayLines(8)
		pListBox.setBorder(BevelBorder.new())
		pListBox.addMouseListener(RollUpMouseListener.new(this))
		pListBox.setDesignerSelector("ListBox.ComboBox")
		
		pDropDown = ComboPopup.new(this)
		pDropDown.setDesignerSelector("WindowPopup.ComboBox")
		pDropDown.addWidget(ScrollPanel.new(pListBox))
		pDropDown.setListBox(pListBox)
		
		pSpacer = Panel.new()
		pSpacer.setMinimumSize(Point.new(50, 0))
		pSpacer.setProtectMinimumSize(true)
		pDropDown.addWidget(pSpacer, BorderLayout.Area.bottom)
		
		setLayout(BorderLayout.new())
		
		pPanelSelectedElement = Panel.new(StackLayout.new())
		addWidget(pPanelSelectedElement, BorderLayout.Area.content)
		
		setDesignerSelector("ComboBox")
		updateSelectedWidget()
		
		model.addListener(this)
	end
	
	/** \brief Create combo box widget. */
	func new(ListModel model, ComboBoxEditor editor) this(model, DefaultListElementRenderer.new())
		setEditor(editor)
	end
	
	/** \brief Create combo box widget. */
	func new(ListModel model, ListElementRenderer renderer, ComboBoxEditor editor) this(model, renderer)
		setEditor(editor)
	end
	
	/** \brief Dispose of widget. */
	func void dispose()
		if pEditor != null
			if pEditorFocusLost != null
				pEditor.getWidget().removeFocusListener(pEditorFocusLost)
			end
			if pEditorValueChanged != null
				pEditor.removeActionListener(pEditorValueChanged)
			end
		end
		pEditor = null
		pEditorFocusLost = null
		pEditorValueChanged = null
		
		pSpacer = null
		pSelectedElement = null
		pPanelSelectedElement = null
		pWidgetButtonDropDown = null
		pWidgetButtonDropDownContainer = null
		
		if pDropDown != null
			pDropDown.close()
			pDropDown = null
		end
		
		pListBox = null
		
		super.dispose()
	end
	
	
	
	/** \brief List model. */
	func ListModel getModel()
		return pListBox.getModel()
	end
	
	/** \brief Set list model. */
	func void setModel(ListModel model)
		if model == null
			throw ENullPointer.new("model")
		end
		
		pListBox.getModel().removeListener(this)
		pListBox.setModel(model)
		model.addListener(this)
	end
	
	/** \brief List element renderer. */
	func ListElementRenderer getElementRenderer()
		return pListBox.getElementRenderer()
	end
	
	/** \brief Set list element renderer. */
	func void setElementRenderer(ListElementRenderer renderer)
		if renderer == pListBox.getElementRenderer()
			return
		end
		
		if pSelectedElement != null
			pSelectedElement.safeDispose()
			pSelectedElement = null
			pSelectedElementDesignerSelector = null
		end
		
		pListBox.setElementRenderer(renderer)
		
		updateDefaultElementSize()
	end
	
	/** \brief Number of lines to display in the drop down list box. */
	func int getNumberDisplayLines()
		return pListBox.getNumberDisplayLines()
	end
	
	/** \brief Set number of lines to display in the drop down list box. */
	func void setNumberDisplayLines(int lines)
		pListBox.setNumberDisplayLines(lines)
	end
	
	/** \brief Combo box editor if editable or \em null if not editable. */
	func ComboBoxEditor getEditor()
		return pEditor
	end
	
	/** \brief Set combo box editor if editable or \em null if not editable. */
	func void setEditor(ComboBoxEditor editor)
		if editor == pEditor
			return
		end
		
		if pEditor != null
			pPanelSelectedElement.removeWidget(pEditor.getWidget())
			pEditor.getWidget().removeFocusListener(pEditorFocusLost)
			pEditor.removeActionListener(pEditorValueChanged)
		end
		
		pEditor = editor
		
		if editor != null
			var Widget widget = editor.getWidget()
			pPanelSelectedElement.addWidget(widget)
			editor.addActionListener(pEditorValueChanged)
			widget.addFocusListener(pEditorFocusLost)
			widget.setVisible(false)
		end
		
		setEditorValueFromSelection()
		updateSelectedWidget()
		// does implicitely updateSelectedVisibility()
		
		updateDefaultElementSize()
		if pSelectedElement != null
			pSelectedElement.setMinimumSize(getDefaultElementSize())
		end
	end
	
	/**
	 * \brief Drop down only if clicking arrow or pressing directional keys.
	 * \version 1.24
	 * 
	 * If true clicking on widget or receiving focus does not drop down. By default false.
	 */
	func bool getExplicitDropDown()
		return pExplicitDropDown
	end
	
	/**
	 * \brief Drop down only if clicking arrow or pressing directional keys.
	 * \version 1.24
	 * 
	 * If true clicking on widget or receiving focus does not drop down. By default false.
	 */
	func void setExplicitDropDown(bool explicitDropDown)
		pExplicitDropDown = explicitDropDown
	end
	
	
	
	/** \brief Index of the selected item or -1 if none is selected. */
	func int getSelectedElement()
		return pListBox.getSelectedElement()
	end
	
	/** \brief Set index of the selected item or -1 if none is selected. */
	func void setSelectedElement(int index)
		pListBox.setSelectedElement(index)
	end
	
	
	
	/** \brief Drop down list visible. */
	func bool droppedDown()
		return pDropDown.getVisible()
	end
	
	/** \brief Drop down the list box if not already dropped down. */
	func void dropDown()
		if pDropDown.getVisible()
			return
		end
		
		var Desktop desktop = pDropDown.getDesktop()
		
		if desktop == null
			desktop = getDesktop()
			if desktop == null
				return
			end
			desktop.addWindow(pDropDown)
		end
		
// 		pFirstDropDown = false
		
		pDropDown.popupInside(\
			getDesktopPosition() + Point.new(0, getHeight()), \
			RectArea.new(Point.new(), desktop.getSize()))
		pListBox.makeSelectedElementVisible()
		
		onStateChanged(StateChangeEvent.new(this, StateChangeEvent.idStateChanged))
		
		if pDropDownRequiresSelFromEditor
			pDropDownRequiresSelFromEditor = false
			setSelectedFromEditorValue() // has to be done once drop down is visible
		end
		
		if pEditor != null
			if not pEditor.getWidget().getVisible()
				pEditor.startEditing()
			end
			
		else
			grabFocus()
		end
	end
	
	/** \brief Roll up the list box if dropped down. */
	func void rollUp()
		if not pDropDown.getVisible()
			return
		end
		
		pDropDown.popdown()
	end
	
	/** \brief Toggle between dropped down and rolled up state. */
	func void toggleDropDown()
		if pDropDown.getVisible()
			rollUp()
			
		else
			dropDown()
		end
	end
	
	/** \brief Start editing if an editor is set. */
	func void startEditing()
		if pEditor == null
			return
		end
		
		if pSelectedElement != null
			pSelectedElement.setVisible(false)
		end
		
		pEditor.getWidget().setVisible(true)
		pEditor.startEditing()
	end
	
	/**
	 * \brief Set selected from editor value on drop down.
	 * \version 1.7
	 * 
	 * If true delays sets selected from editor value until drop down. If false sets selected
	 * from editor immediately. This can be slow down UI if the list has many elements.
	 * 
	 * Default value is true.
	 */
	func bool getSelectFromEditorOnDropDown()
		return pSelFromEditorOnDropDown
	end
	
	/**
	 * \brief Set selected from editor value on drop down.
	 * \version 1.7
	 * 
	 * If true delays sets selected from editor value until drop down. If false sets selected
	 * from editor immediately. This can be slow down UI if the list has many elements.
	 * 
	 * Default value is true.
	 */
	func void setSelectFromEditorOnDropDown(bool selectedFromEditorOnDropDown)
		pSelFromEditorOnDropDown = selectedFromEditorOnDropDown
		pDropDownRequiresSelFromEditor = true
	end
	
	/**
	 * \brief Select from editor value is required during next drop down.
	 * \version 1.7
	 */
	protected func bool getDropDownRequiresSelectFromEditor()
		return pDropDownRequiresSelFromEditor
	end
	
	/**
	 * \brief Set select from editor value is required during next drop down.
	 * \version 1.7
	 */
	protected func void setDropDownRequiresSelectFromEditor(bool requiresSelectFromEditor)
		pDropDownRequiresSelFromEditor = requiresSelectFromEditor
	end
	
	
	
	/**
	 * \brief Grab focus if possible.
	 * 
	 * If an editor is set grabs focus of edit widget instead.
	 */
	func void grabFocus()
		if pEditor != null
			if pEditor.getWidget().getVisible()
				pEditor.getWidget().grabFocus()
				
			else
				startEditing()
			end
			
		else
			super.grabFocus()
		end
	end
	
	
	
	/**
	 * \brief Drop down button widget or \em null if not set.
	 * \details For use by button designers.
	 */
	func Widget getButtonDropDownWidget()
		return pWidgetButtonDropDown
	end
	
	/**
	 * \brief Set drop down button widget or \em null if not set.
	 * \details For use by button designers.
	 */
	func void setDropDownButtonWidget(Widget widget)
		if widget == pWidgetButtonDropDown
			return
		end
		
		if pWidgetButtonDropDown != null
			pWidgetButtonDropDown.safeDispose()
		end
		
		pWidgetButtonDropDown = widget
		
		if widget castable Container
			pWidgetButtonDropDownContainer = widget cast Container
			
		else
			pWidgetButtonDropDownContainer = null
		end
		
		if widget != null
			addWidget(widget, BorderLayout.Area.right)
		end
	end
	
	
	
	/** \brief Size changed. */
	func void onResize(WidgetEvent event)
		super.onResize(event)
		pSpacer.setMinimumSize(Point.new(getWidth(), 0))
	end
	
	/** \brief Mouse button pressed. */
	func void onButtonPress(MouseEvent event)
		var Widget source = event.getSource() cast Widget
		
		if source == this
			grabFocus()
		end
		
		if event.getButton() == InputEventMouseButton.left
			if pEditor != null
				var bool sourceIsArrow = source == pWidgetButtonDropDown\
					or (pWidgetButtonDropDownContainer != null\
						and source.hasParent(pWidgetButtonDropDownContainer))
				
				if pEditor.getWidget().getVisible()
					if sourceIsArrow
						toggleDropDown()
						
// 					elif pFirstDropDown
					elif not pExplicitDropDown
						dropDown()
					end
					
				else
					if sourceIsArrow or not pExplicitDropDown
						dropDown()
					end
					startEditing()
				end
				
			else
				toggleDropDown()
				startEditing()
			end
		end
		
		sendEventToListeners(event, true)
// 		super.onButtonPress(event)
	end
	
	/** Mouse wheeled. */
	func void onMouseWheel(MouseEvent event)
		var int y = event.getPosition().getY()
		if y == 0
			return
		end
		
		var int selection = pListBox.getSelectedElement()
		var int count = pListBox.getModel().getCount()
		var int newSelection = selection
		
		if selection == -1 and count > 0
			newSelection = 0
			
		else
			newSelection = DEMath.clamp(selection - y, 0, count - 1)
		end
		
		if newSelection != selection
			pListBox.setSelectedElement(newSelection)
		end
		
		// do not send event up the chain
	end
	
	/** \brief Key pressed. */
	func void onKeyPress(KeyEvent event)
		super.onKeyPress(event)
		
		select event.getKeyCode()
		case InputEventKey.arrowDown
			onArrowDown()
			
		case InputEventKey.arrowUp
			onArrowUp()
			
		case InputEventKey.pageUp
			onPageUp()
			
		case InputEventKey.pageDown
			onPageDown()
			
		case InputEventKey.space
			if pEditor == null
				toggleDropDown()
			end
			
		case InputEventKey.enter
			rollUp()
		end
	end
	
	/** \brief Widget received focus. */
	func void onFocusReceived(FocusEvent event)
		super.onFocusReceived(event)
		
// 		pFirstDropDown = true
		updateSelectedWidget()
		startEditing()
	end
	
	/** \brief Widget lost focus. */
	func void onFocusLost(FocusEvent event)
		super.onFocusLost(event)
		
		updateSelectedWidget()
		rollUp()
// 		pFirstDropDown = false
	end
	
	/**
	 * \brief Request to release mouse capture.
	 * 
	 * Capture mouse to popup window if visible. Required if editor widget captures mouse.
	 */
	func bool requestReleaseMouse(Widget widget)
		if not super.requestReleaseMouse(widget)
			return false
		end
		
		if pDropDown.getVisible()
			pDropDown.captureMouse()
		end
		
		return true
	end
	
	/**
	 * \brief Gui theme changed.
	 * \details Called if setGuiTheme is used or parent changed.
	 * \warning You have to super-call this method since it is used a bit differently than the other callback methods.
	 */
	func void onGuiThemeChanged()
		super.onGuiThemeChanged()
		pDropDown.setGuiTheme(getGuiTheme())
		
		updateDefaultElementSize()
		if pSelectedElement != null
			pSelectedElement.setMinimumSize(getDefaultElementSize())
		end
	end
	
	/**
	 * \brief Designer selector changed.
	 */
	func void onDesignerSelectorChanged()
		super.onDesignerSelectorChanged()
		
		if pSelectedElement != null
			pSelectedElement.safeDispose()
			pSelectedElement = null
			pSelectedElementDesignerSelector = null
		end
		
		var String selector = getDesignerSelector()
		pListBox.setDesignerSelector("ListBox." + selector)
		
		updateSelectedWidget()
		
		pDropDown.setDesignerSelector("WindowPopup." + selector)
	end
	
	
	
	/** \brief Elements have been added. */
	func void elementsAdded(ListModel listModel, int fromIndex, int toIndex)
		setSelectedFromEditorValue()
	end
	
	/** \brief Elements have been removed. */
	func void elementsRemoved(ListModel listModel, int fromIndex, int toIndex)
	end
	
	/** \brief Content of the model changed. */
	func void contentChanged(ListModel listModel, int fromIndex, int toIndex)
		var int selection = listModel.getSelected()
		if selection >= fromIndex and selection <= toIndex
			selectionChanged(listModel)
			
		else
			setSelectedFromEditorValue()
		end
	end
	
	/** \brief Selection in the list box changed. */
	func void selectionChanged(ListModel listModel)
		if pPreventUpdateEditor
			updateSelectedWidget()
			return
		end
		
		setEditorValueFromSelection()
		updateSelectedWidget()
		
		if pEditor != null and pEditor.getWidget().getVisible()
			pEditor.startEditing()
		end
	end
	
	
	
	/** \brief Update selected widget. */
	func void updateSelectedWidget()
		var Object selection
		
		var int selectionIndex = pListBox.getSelectedElement()
		if selectionIndex != -1
			selection = pListBox.getModel().getAt(selectionIndex)
		end
		
		var ListElementRenderer renderer = pListBox.getElementRenderer()
		
		runWhileBlockingLayout(block
			if pSelectedElement == null
				pSelectedElementDesignerSelector = null
				pSelectedElement = renderer.createRenderer(pListBox)
				pSelectedElement.setMinimumSize(getDefaultElementSize())
				pSelectedElement.setProtectMinimumSize(true)
				pPanelSelectedElement.addWidget(pSelectedElement)
			end
			
			if pEditor != null
				renderer.updateRenderer(pListBox, pSelectedElement,\
					pEditor.getEditorValue(), false, getHasFocus())
				
			else
				renderer.updateRenderer(pListBox, pSelectedElement, selection, false, getHasFocus())
			end
			
			if pSelectedElement != null
				if pSelectedElementDesignerSelector == null
					pSelectedElementDesignerSelector = pSelectedElement.getDesignerSelector()
				end
				pSelectedElement.setDesignerSelector(pSelectedElementDesignerSelector + ".ComboBoxSelected")
			end
			
			updateSelectedVisibility()
		end)
		doLayoutIfBlocked()
	end
	
	/** \brief Set editor value from selection if anything is selected. */
	func void setEditorValueFromSelection()
		if pEditor == null
			return
		end
		
		var int selection = pListBox.getSelectedElement()
		if selection != -1
			pEditor.setEditorValue(pListBox.getModel().getAt(selection))
		end
	end
	
	/** \brief Set selection from editor value. */
	func void setSelectedFromEditorValue()
		if pEditor == null
			return
		end
		
		if pSelFromEditorOnDropDown and not pDropDown.getVisible()
			pDropDownRequiresSelFromEditor = true
			return
		end
		
		runWhilePreventUpdateEditor(block
			pListBox.setSelectedElement(pListBox.getModel().indexOf(pEditor.getEditorValue()))
		end)
	end
	
	/**
	 * \brief Run block while preventing updating editor.
	 * \version 1.22
	 */
	protected func void runWhilePreventUpdateEditor(Block ablock)
		try
			pPreventUpdateEditor = true
			ablock.run()
			pPreventUpdateEditor = false
			
		catch Exception e
			pPreventUpdateEditor = false
			throw
		end
	end
	
	/** \brief Update visibility of editor and selected element renderer. */
	func void updateSelectedVisibility()
		if pEditor == null
			if pSelectedElement != null
				pSelectedElement.setVisible(true)
			end
			return
		end
		
		var bool hasFocus = false
		
		var Desktop desktop = getDesktop()
		if desktop != null
			var Widget focusWidget = desktop.getFocusWidget()
			if focusWidget != null
				hasFocus = focusWidget.hasParent(this) or focusWidget.hasParent(pDropDown)
			end
		end
		
		if hasFocus
			if pSelectedElement != null
				pSelectedElement.setVisible(false)
			end
			pEditor.getWidget().setVisible(true)
			
		else
			if pSelectedElement != null
				pSelectedElement.setVisible(true)
			end
			pEditor.getWidget().setVisible(false)
		end
	end
	
	/** \brief Get default element size. */
	func Point getDefaultElementSize()
		return pDefaultElementSize
	end
	
	/** \brief Update default element size. */
	func void updateDefaultElementSize()
		pDefaultElementSize = Point.new(1, 1)
		if getGuiTheme() != null
			pDefaultElementSize = pDefaultElementSize.largest(Point.new(\
				pListBox.getElementWidth(), pListBox.getElementHeight()))
		end
		if pEditor != null
			pDefaultElementSize = pDefaultElementSize.largest(pEditor.getWidget().getMinimumSize())
		end
	end
	
	/**
	 * \brief Selected element widget or null.
	 * \version 1.7
	 */
	func Widget getWidgetSelectedElement()
		return pSelectedElement
	end
	
	/**
	 * \brief Arrow down pressed.
	 * \version 1.17
	 */
	func void onArrowDown()
		var int selection = pListBox.getSelectedElement()
		var int count = pListBox.getModel().getCount()
		var int newSelection = selection
		
		if selection == -1 and count > 0
			newSelection = 0
			
		else
			newSelection = DEMath.min(selection + 1, count - 1)
		end
		
		if newSelection != selection
			pListBox.setSelectedElement(newSelection)
		end
		
		dropDown()
	end
	
	/**
	 * \brief Arrow up pressed.
	 * \version 1.17
	 */
	func void onArrowUp()
		var int selection = pListBox.getSelectedElement()
		var int count = pListBox.getModel().getCount()
		var int newSelection = selection
		
		if selection == -1 and count > 0
			newSelection = 0
			
		else
			newSelection = DEMath.max(selection - 1, 0)
		end
		
		if newSelection != selection
			pListBox.setSelectedElement(newSelection)
		end
		
		dropDown()
	end
	
	/**
	 * \brief Page up pressed.
	 * \version 1.17
	 */
	func void onPageUp()
		var int selection = pListBox.getSelectedElement()
		var int count = pListBox.getModel().getCount()
		var int newSelection = selection
		var int rowCount
		
		if pListBox.getVisible()
			rowCount = pListBox.getVisibleRowCount() - 2
			
		else
			rowCount = 10
		end
		
		if selection == -1 and count > 0
			newSelection = 0
			
		else
			newSelection = DEMath.max(selection - rowCount, 0)
		end
		
		if newSelection != selection
			pListBox.setSelectedElement(newSelection)
		end
		
		dropDown()
	end
	
	/**
	 * \brief Page down pressed.
	 * \version 1.17
	 */
	func void onPageDown()
		var int selection = pListBox.getSelectedElement()
		var int count = pListBox.getModel().getCount()
		var int newSelection = selection
		var int rowCount
		
		if pListBox.getVisible()
			rowCount = pListBox.getVisibleRowCount() - 2
			
		else
			rowCount = 10
		end
		
		if selection == -1 and count > 0
			newSelection = 0
			
		else
			newSelection = DEMath.min(selection + rowCount, count - 1)
		end
		
		if newSelection != selection
			pListBox.setSelectedElement(newSelection)
		end
		
		dropDown()
	end
end
