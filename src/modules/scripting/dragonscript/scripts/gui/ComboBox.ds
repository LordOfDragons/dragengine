/* 
 * Drag[en]gine DragonScript Script Module
 *
 * Copyright (C) 2020, Roland PlÃ¼ss (roland@rptd.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */


namespace Dragengine.Gui

pin Dragengine.Gui.Borders
pin Dragengine.Gui.Events
pin Dragengine.Gui.Layouts
pin Dragengine.Gui.Listeners
pin Dragengine.Scenery
pin Dragengine.Utils


/**
 * \brief Drop down list displaying the currently selected element.
 * 
 * Supports designing using designer selector "ComboBox". The drop-down list box supports
 * desining using designer selector "ListBox.ComboBox". 
 */
class ComboBox extends Container implements ListModelListener
	/** \brief Start edit mouse listener. */
	class StartEditMouseListener extends DefaultMouseListener
		/** \brief Combo box. */
		private var ComboBox pComboBox
		
		/** \brief Create mouse listener. */
		public func new( ComboBox comboBox )
			this.pComboBox = comboBox
		end
		
		/** \brief Mouse button has been pressed. */
		public func void onButtonPress( MouseEvent event )
			if event.getButton() == InputEventMouseButton.left
				this.pComboBox.startEditing()
			end
		end
	end
	
	/** \brief Editor focus lost listener. */
	class EditorFocusLost extends DefaultFocusListener
		/** \brief Combo box. */
		private var ComboBox pComboBox
		
		/** \brief Create mouse listener. */
		public func new( ComboBox comboBox )
			this.pComboBox = comboBox
		end
		
		/** \brief Widget lost focus. */
		public func void onFocusLost( FocusEvent event )
			this.pComboBox.rollUp()
			this.pComboBox.setSelectedFromEditorValue()
			this.pComboBox.updateSelectedWidget()
		end
	end
	
	/** \brief Editor value changed listener. */
	class EditorValueChanged extends DefaultActionListener
		/** \brief Combo box. */
		private var ComboBox pComboBox
		
		/** \brief Create listener. */
		public func new( ComboBox comboBox )
			this.pComboBox = comboBox
		end
		
		/** \brief Action run. */
		public func void onAction( ActionEvent event )
			this.pComboBox.setSelectedFromEditorValue()
			this.pComboBox.updateSelectedWidget()
		end
	end
	
	/** \brief Roll up mouse listener. */
	class RollUpMouseListener extends DefaultMouseListener
		/** \brief Combo box. */
		private var ComboBox pComboBox
		
		/** \brief Count mouse release only if pressed before. */
		private var bool pPressed
		
		/** \brief Create mouse listener. */
		public func new( ComboBox comboBox )
			this.pComboBox = comboBox
			this.pPressed = false
		end
		
		/** \brief Mouse button has been pressed. */
		public func void onButtonPress( MouseEvent event )
			if event.getButton() == InputEventMouseButton.left
				this.pPressed = true
			end
		end
		
		/** \brief Mouse button has been released. */
		public func void onButtonRelease( MouseEvent event )
			if event.getButton() == InputEventMouseButton.left and this.pPressed
				this.pComboBox.rollUp()
			end
		end
	end
	
	/** \brief Popup widget listener. */
	class PopupWidgetListener extends DefaultWidgetListener
		/** \brief Combo box. */
		private var ComboBox pComboBox
		
		/** \brief Create widget listener. */
		public func new( ComboBox comboBox )
			this.pComboBox = comboBox
		end
		
		/** \brief Widget has been hidden. */
		public func void onWidgetHidden( WidgetEvent event )
			this.pComboBox.rollUp()
		end
	end
	
	/** \brief Change combo box selectiong using mouse wheel. */
	class WheelChangeSelection extends DefaultMouseListener
		/** \brief List box. */
		private var ListBox pListBox
		
		/** \brief Create mouse listener. */
		public func new( ListBox listBox )
			this.pListBox = listBox
		end
		
		/** \brief Mouse wheel moved. */
		public func void onMouseWheel( MouseEvent event )
			var int y = event.getPosition().getY()
			if y == 0
				return
			end
			
			var int selection = this.pListBox.getSelectedElement()
			var int count = this.pListBox.getModel().getCount()
			var int newSelection = selection
			
			if selection == -1 and count > 0
				newSelection = 0
				
			else
				newSelection = DEMath.clamp( selection - y, 0, count - 1 )
			end
			
			if newSelection != selection
				this.pListBox.setSelectedElement( newSelection )
			end
		end
	end
	
	
	
	private var WindowPopup pDropDown
	private var ListBox pListBox
	private var Widget pWidgetButtonDropDown
	private var Panel pPanelSelectedElement
	private var Widget pSelectedElement
	private var Panel pSpacer
	private var ComboBoxEditor pEditor
	private var EditorFocusLost pEditorFocusLost
	private var EditorValueChanged pEditorValueChanged
	private var Point pDefaultElementSize
	
	
	
	/** \brief Create combo box widget. */
	public func new() this( DefaultListModel.new(), DefaultListElementRenderer.new() )
	end
	
	/** \brief Create combo box widget. */
	public func new( ListModel model ) this( model, DefaultListElementRenderer.new() )
	end
	
	/** \brief Create combo box widget. */
	public func new( ListModel model, ListElementRenderer renderer )
// 		this.setCanFocus( true ) // this is not working correctly. needs fixing
		
		this.pDefaultElementSize = Point.new( 1, 1 )
		
		this.pEditorFocusLost = EditorFocusLost.new( this )
		this.pEditorValueChanged = EditorValueChanged.new( this )
		
		this.pListBox = ListBox.new( model, renderer )
		this.pListBox.setNumberDisplayLines( 8 )
		this.pListBox.setBorder( BevelBorder.new() )
		this.pListBox.addMouseListener( RollUpMouseListener.new( this ) )
		this.pListBox.setDesignerSelector( this.pListBox.getDesignerSelector() + ".ComboBox" )
		
		this.pDropDown = WindowPopup.new()
		this.pDropDown.setCloseOnPopDown( false )
		this.pDropDown.addWidget( ScrollPanel.new( this.pListBox ) )
		
		this.pSpacer = Panel.new()
		this.pSpacer.setMinimumSize( Point.new( 50, 0 ) )
		this.pSpacer.setProtectMinimumSize( true )
		this.pDropDown.addWidget( this.pSpacer, BorderLayout.Area.bottom )
		this.pDropDown.addWidgetListener( PopupWidgetListener.new( this ) )
		
		this.setDesignerSelector( "ComboBox" )
		this.setLayout( BorderLayout.new() )
		
		this.pPanelSelectedElement = Panel.new()
		this.pPanelSelectedElement.setLayout( StackLayout.new() )
		this.addWidget( this.pPanelSelectedElement, BorderLayout.Area.content  )
		
		this.updateSelectedWidget()
		
		this.addMouseListener( StartEditMouseListener.new( this ) )
		this.addMouseListener( WheelChangeSelection.new( this.pListBox ) )
		
		model.addListener( this )
	end
	
	/** \brief Create combo box widget. */
	public func new( ListModel model, ComboBoxEditor editor ) \
	this( model, DefaultListElementRenderer.new() )
		this.setEditor( editor )
	end
	
	/** \brief Create combo box widget. */
	public func new( ListModel model, ListElementRenderer renderer, ComboBoxEditor editor ) \
	this( model, renderer )
		this.setEditor( editor )
	end
	
	/** \brief Dispose of widget. */
	public func void dispose()
		if this.pEditor != null
			if this.pEditorFocusLost != null
				this.pEditor.getWidget().removeFocusListener( this.pEditorFocusLost )
			end
			if this.pEditorValueChanged != null
				this.pEditor.removeActionListener( this.pEditorValueChanged )
			end
		end
		this.pEditor = null
		this.pEditorFocusLost = null
		this.pEditorValueChanged = null
		
		this.pSpacer = null
		this.pSelectedElement = null
		this.pPanelSelectedElement = null
		this.pWidgetButtonDropDown = null
		
		this.pListBox = null // no remove listener since popwindow does this on dispose
		
		if this.pDropDown != null
			this.pDropDown.close()
			this.pDropDown = null
		end
		
		super.dispose()
	end
	
	
	
	/** \brief List model. */
	public func ListModel getModel()
		return this.pListBox.getModel()
	end
	
	/** \brief Set list model. */
	public func void setModel( ListModel model )
		this.pListBox.setModel( model )
	end
	
	/** \brief List element renderer. */
	public func ListElementRenderer getElementRenderer()
		return this.pListBox.getElementRenderer()
	end
	
	/** \brief Set list element renderer. */
	public func void setElementRenderer( ListElementRenderer renderer )
		this.pListBox.setElementRenderer( renderer )
		
		this.updateDefaultElementSize()
		if this.pSelectedElement != null
			this.pSelectedElement.setMinimumSize( this.getDefaultElementSize() )
		end
	end
	
	/** \brief Number of lines to display in the drop down list box. */
	public func int getNumberDisplayLines()
		return this.pListBox.getNumberDisplayLines()
	end
	
	/** \brief Set number of lines to display in the drop down list box. */
	public func void setNumberDisplayLines( int lines )
		this.pListBox.setNumberDisplayLines( lines )
	end
	
	/** \brief Combo box editor if editable or \em null if not editable. */
	public func ComboBoxEditor getEditor()
		return this.pEditor
	end
	
	/** \brief Set combo box editor if editable or \em null if not editable. */
	public func void setEditor( ComboBoxEditor editor )
		if editor == this.pEditor
			return
		end
		
		if this.pEditor != null
			this.pPanelSelectedElement.removeWidget( this.pEditor.getWidget() )
			this.pEditor.getWidget().removeFocusListener( this.pEditorFocusLost )
			this.pEditor.removeActionListener( this.pEditorValueChanged )
		end
		
		this.pEditor = editor
		
		if editor != null
			this.pPanelSelectedElement.addWidget( editor.getWidget() )
			editor.addActionListener( this.pEditorValueChanged )
			editor.getWidget().addFocusListener( this.pEditorFocusLost )
			editor.getWidget().setVisible( false )
		end
		
		this.setEditorValueFromSelection()
		this.updateSelectedWidget()
		// does implicitely updateSelectedVisibility()
		
		this.updateDefaultElementSize()
		if this.pSelectedElement != null
			this.pSelectedElement.setMinimumSize( this.getDefaultElementSize() )
		end
	end
	
	
	
	/** \brief Index of the selected item or -1 if none is selected. */
	public func int getSelectedElement()
		return this.pListBox.getSelectedElement()
	end
	
	/** \brief Set index of the selected item or -1 if none is selected. */
	public func void setSelectedElement( int index )
		this.pListBox.setSelectedElement( index )
	end
	
	
	
	/** \brief Drop down list visible. */
	public func bool droppedDown()
		return this.pDropDown.getVisible()
	end
	
	/** \brief Drop down the list box if not already dropped down. */
	public func void dropDown()
		if this.pDropDown.getVisible()
			return
		end
		
		var Desktop desktop = this.pDropDown.getDesktop()
		
		if desktop == null
			desktop = this.getDesktop()
			if desktop == null
				return
			end
			desktop.addWindow( this.pDropDown )
		end
		
		this.pDropDown.popupInside( \
			this.getDesktopPosition() + Point.new( 0, this.getHeight() ), \
			RectArea.new( Point.new(), desktop.getSize() ) )
		this.pListBox.makeSelectedElementVisible()
		
		this.onStateChanged( StateChangeEvent.new( this, StateChangeEvent.idStateChanged ) )
		
		if this.pEditor != null
			this.pEditor.startEditing()
			
		else
			this.grabFocus()
		end
		
		/*
		if this.pEditor == null
			this.pListBox.grabFocus()
		end
		*/
	end
	
	/** \brief Roll up the list box if dropped down. */
	public func void rollUp()
		if not this.pDropDown.getVisible()
			return
		end
		
		this.pDropDown.popdown()
		
		/* this fails if rollUp() is called due to focus lost event
		if this.pEditor != null
			this.pEditor.startEditing()
			
		else
			this.grabFocus()
		end
		*/
		
		this.onStateChanged( StateChangeEvent.new( this, StateChangeEvent.idStateChanged ) )
	end
	
	/** \brief Toggle between dropped down and rolled up state. */
	public func void toggleDropDown()
		if this.pDropDown.getVisible()
			this.rollUp()
			
		else
			this.dropDown()
		end
	end
	
	/** \brief Start editing if an editor is set otherwise toggle drop down. */
	public func void startEditing()
		if this.pEditor == null
			this.toggleDropDown()
			return
		end
		
		this.dropDown()
		
		if this.pSelectedElement != null
			this.pSelectedElement.setVisible( false )
		end
		this.pEditor.getWidget().setVisible( true )
		this.pEditor.startEditing()
		
		this.pDropDown.moveToTop() // startEditing grabs the focus raising the window. we need an alwaysOnTop
	end
	
	
	
	/** \brief Request to focus the specified widget. */
	public func void requestGrabFocus( Widget widget )
		super.requestGrabFocus( widget )
		this.updateSelectedWidget()
	end
	
	
	
	/**
	 * \brief Drop down button widget or \em null if not set.
	 * \details For use by button designers.
	 */
	public func Widget getButtonDropDownWidget()
		return this.pWidgetButtonDropDown
	end
	
	/**
	 * \brief Set drop down button widget or \em null if not set.
	 * \details For use by button designers.
	 */
	public func void setDropDownButtonWidget( Widget widget )
		if widget == this.pWidgetButtonDropDown
			return
		end
		
		if this.pWidgetButtonDropDown != null
			this.removeWidget( this.pWidgetButtonDropDown )
			this.pWidgetButtonDropDown.dispose()
		end
		
		this.pWidgetButtonDropDown = widget
		
		if widget != null
			this.addWidget( widget, BorderLayout.Area.right )
		end
	end
	
	
	
	/** \brief Size changed. */
	public func void onResize( WidgetEvent event )
		super.onResize( event )
		this.pSpacer.setMinimumSize( Point.new( this.getWidth(), 0 ) )
	end
	
	/** \brief Widget received focus. */
	public func void onFocusReceived( FocusEvent event )
		super.onFocusReceived( event )
		
		this.updateSelectedWidget()
		if this.pEditor != null
			this.pEditor.startEditing()
		end
	end
	
	/** \brief Widget lost focus. */
	public func void onFocusLost( FocusEvent event )
		super.onFocusLost( event )
		
		if this.pEditor != null and this.pEditor.getWidget().getVisible()
			this.setSelectedFromEditorValue()
		end
		this.updateSelectedWidget()
	end
	
	/**
	 * \brief Gui theme changed.
	 * \details Called if setGuiTheme is used or parent changed.
	 * \warning You have to super-call this method since it is used a bit differently than the other callback methods.
	 */
	public func void onGuiThemeChanged()
		super.onGuiThemeChanged()
		this.pDropDown.setGuiTheme( this.getGuiTheme() )
		
		this.updateDefaultElementSize()
		if this.pSelectedElement != null
			this.pSelectedElement.setMinimumSize( this.getDefaultElementSize() )
		end
	end
	
	
	
	/** \brief Elements have been added. */
	public func void elementsAdded( ListModel listModel, int fromIndex, int toIndex )
	end
	
	/** \brief Elements have been removed. */
	public func void elementsRemoved( ListModel listModel, int fromIndex, int toIndex )
	end
	
	/** \brief Content of the model changed. */
	public func void contentChanged(ListModel listModel, int fromIndex, int toIndex)
		var int selection = listModel.getSelected()
		if selection >= fromIndex and selection <= toIndex
			selectionChanged(listModel)
		end
	end
	
	/** \brief Selection in the list box changed. */
	public func void selectionChanged( ListModel listModel )
		this.setEditorValueFromSelection()
		this.updateSelectedWidget()
		
		if this.pEditor != null
			this.pEditor.startEditing()
		end
	end
	
	
	
	/** \brief Update selected widget. */
	public func void updateSelectedWidget()
		var Object selection
		
		var int selectionIndex = this.pListBox.getSelectedElement()
		if selectionIndex != -1
			selection = this.pListBox.getModel().getAt( selectionIndex )
		end
		
		if this.pSelectedElement != null
			this.pPanelSelectedElement.removeWidget( this.pSelectedElement )
			this.pSelectedElement.dispose()
			this.pSelectedElement = null
		end
		
		var ListElementRenderer renderer = this.pListBox.getElementRenderer()
		this.pSelectedElement = renderer.createRenderer( this.pListBox )
		
		this.pSelectedElement.setMinimumSize( this.getDefaultElementSize() )
		this.pSelectedElement.setProtectMinimumSize( true )
		
		if this.pEditor != null and selection == null
			renderer.updateRenderer( this.pListBox, this.pSelectedElement, \
				this.pEditor.getEditorValue(), false, this.getHasFocus() )
			
		else
			renderer.updateRenderer( this.pListBox, this.pSelectedElement, \
				selection, false, this.getHasFocus() )
		end
		
		this.pPanelSelectedElement.addWidget( this.pSelectedElement )
		
		this.updateSelectedVisibility()
	end
	
	/** \brief Set editor value from selection if anything is selected. */
	public func void setEditorValueFromSelection()
		if this.pEditor == null
			return
		end
		
		var int selection = this.pListBox.getSelectedElement()
		if selection != -1
			this.pEditor.setEditorValue( this.pListBox.getModel().getAt( selection ) )
		end
	end
	
	/** \brief Set selection from editor value. */
	public func void setSelectedFromEditorValue()
		if this.pEditor == null
			return
		end
		
		this.pListBox.setSelectedElement( this.pListBox.getModel().indexOf( \
			this.pEditor.getEditorValue() ) )
	end
	
	/** \brief Update visibility of editor and selected element renderer. */
	public func void updateSelectedVisibility()
		if this.pEditor == null
			if this.pSelectedElement != null
				this.pSelectedElement.setVisible( true )
			end
			return
		end
		
		var bool hasFocus = false
		
		var Desktop desktop = this.getDesktop()
		if desktop != null
			var Widget focusWidget = desktop.getFocusWidget()
			if focusWidget != null
				hasFocus = focusWidget.hasParent( this ) or focusWidget.hasParent( this.pDropDown )
			end
		end
		
		if hasFocus
			if this.pSelectedElement != null
				this.pSelectedElement.setVisible( false )
			end
			this.pEditor.getWidget().setVisible( true )
			
		else
			if this.pSelectedElement != null
				this.pSelectedElement.setVisible( true )
			end
			this.pEditor.getWidget().setVisible( false )
		end
	end
	
	/** \brief Get default element size. */
	public func Point getDefaultElementSize()
		return this.pDefaultElementSize
	end
	
	/** \brief Update default element size. */
	public func void updateDefaultElementSize()
		this.pDefaultElementSize = Point.new( 1, 1 )
		if this.getGuiTheme() != null
			this.pDefaultElementSize = this.pDefaultElementSize.largest( Point.new( \
				this.pListBox.getElementWidth(), this.pListBox.getElementHeight() ) )
		end
		if this.pEditor != null
			this.pDefaultElementSize = this.pDefaultElementSize.largest( this.pEditor.getWidget().getMinimumSize() )
		end
	end
end
