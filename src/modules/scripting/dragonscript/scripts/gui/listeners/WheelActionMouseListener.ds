/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */


namespace Dragengine.Gui

pin Dragengine.Gui.Events


/**
 * \brief Mouse listener firing ActionListener objects upon using mouse wheel
 * 
 * Allows to set up quickly two actions for using the mouse wheel. The modifiers
 * are repeated in the ActionEvent send to the action. Action is called number of
 * times the wheel has been changed for each event received.
 */
class WheelActionMouseListener extends DefaultMouseListener
	/** \brief Action to fire if the mouse is wheeled up or null to ignore. */
	private var ActionListener pActionUp
	
	/** \brief Action to fire if the mouse is wheeled down or null to ignore. */
	private var ActionListener pActionDown
	
	
	
	/** \brief Create mouse listener. */
	public func new( ActionListener actionUp, ActionListener actionDown )
		this.pActionUp = actionUp
		this.pActionDown = actionDown
	end
	
	
	
	/** \brief Mouse wheel has moved. */
	public func void onMouseWheel( MouseEvent event )
		var int y = event.getPosition().getY()
		
		if y > 0
			if this.pActionUp != null
				var ActionEvent aevent = ActionEvent.new( event.getSource(), \
					ActionEvent.idAction, event.getModifiers() )
				var int i
				
				for i = 0 to y
					this.pActionUp.onAction( aevent )
				end
			end
			
		elif y < 0
			if this.pActionDown != null
				var ActionEvent aevent = ActionEvent.new( event.getSource(), \
					ActionEvent.idAction, event.getModifiers() )
				var int i
				
				for i = 0 to -y
					this.pActionDown.onAction( aevent )
				end
			end
		end
	end
end
