/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */


namespace Dragengine.Gui

pin Dragengine.CameraDirectors
pin Dragengine.Gui.Events
pin Dragengine.Scenery
pin Dragengine.Utils


/**
 * \brief Pan camera director.
 * \version 1.7
 * 
 * Set mouse button and modifiers required to trigger the listener. Once triggered moving
 * is translated to displacement of camera position relative to current camera matrix.
 * 
 * This listener actually moves the pivot of the camera director.
 * 
 * The camera director is not required to have an element assigned.
 */
class PanCameraMouseListener extends DefaultMouseListener
	private var int pButton
	private var int pModifiers
	private var Widget pCaptureWidget
	private var ElementCameraDirector pDirector
	private var float pSpeed
	private var Point pPosition
	private var DVector pAnchorPivot
	private var DMatrix pViewMatrix
	
	
	
	/**
	 * \brief Create mouse listener tracking right mouse button with no modifiers.
	 * \param director Camera director to update.
	 */
	public func new(ElementCameraDirector director) \
	this(director, InputEventMouseButton.right, InputEventModifier.shift)
	end
	
	/**
	 * \brief Create mouse listener.
	 * \param director Camera director to update.
	 * \param trackButton Value from InputEventMouseButton or custom.
	 * \param modifiers Modifiers from InputEventModifier or custom.
	 */
	public func new(ElementCameraDirector director, int trackButton, int modifiers)
		if director == null
			throw ENullPointer.new("director")
		end
		
		pButton = trackButton
		pModifiers = modifiers
		pDirector = director
		pSpeed = 1.0 / 300.0 // 1m per 300 pixels
	end
	
	
	
	/** \brief Mouse button to track. */
	public func int getButton()
		return pButton
	end
	
	/** \brief Modifiers to track. */
	public func int getModifiers()
		return pModifiers
	end
	
	/** \brief Camera director to update. */
	public func ElementCameraDirector getDirector()
		return pDirector
	end
	
	/**
	 * \brief Movement speed in meters per pixel.
	 * 
	 * Negative speed moves in the opposite direction.
	 */
	public func float getSpeed()
		return pSpeed
	end
	
	/**
	 * \brief Set movement speed in meters per pixel.
	 * 
	 * Negative speed moves in the opposite direction.
	 */
	public func void setSpeed(float speed)
		pSpeed = speed
	end
	
	
	
	/**
	 * \brief Mouse button pressed.
	 * 
	 * Captures mouse and starts tracking if button and modifiers match.
	 */
	public func void onButtonPress(MouseEvent event)
		if event.getButton() != pButton or event.getModifiers() != pModifiers
			return
		end
		if not event.getSource() castable Widget
			return
		end
		
		pPosition = event.getPosition()
		pAnchorPivot = pDirector.getPivot()
		pViewMatrix = pDirector.getCameraMatrix().getRotation().normalize()
		
		pCaptureWidget = event.getSource() cast Widget
		pCaptureWidget.captureMouse()
		
		onStartPan()
	end
	
	/**
	 * \brief Mouse moved.
	 * 
	 * Rotate camera if tracking.
	 */
	public func void onMouseMove(MouseEvent event)
		if pPosition == null
			return
		end
		
		var Vector2 movement = Vector2.new(event.getPosition() - pPosition)
		
		pDirector.setPivot(pAnchorPivot \
			+ pViewMatrix.getRightVector() * (-pSpeed * movement.getX()) \
			+ pViewMatrix.getUpVector() * (pSpeed * movement.getY()))
		
		onPan()
	end
	
	/**
	 * \brief Mouse button release.
	 * 
	 * If tracking stop tracking and release mouse capture.
	 */
	public func void onButtonRelease(MouseEvent event)
		if pPosition == null
			return
		end
		
		pCaptureWidget.releaseMouse()
		pCaptureWidget = null
		
		onStopPan()
		
		pPosition = null
	end
	
	
	
	/** \brief Start rotating camera director. */
	protected func void onStartPan()
	end
	
	/** \brief Camera director has been rotated. */
	protected func void onPan()
	end
	
	/** \brief Stop rotating camera director. */
	protected func void onStopPan()
	end
end
