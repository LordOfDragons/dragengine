/* 
 * Drag[en]gine DragonScript Script Module
 *
 * Copyright (C) 2020, Roland PlÃ¼ss (roland@rptd.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */


namespace Dragengine.Gui

pin Dragengine.Gui.Events
pin Dragengine.Gui.Layouts
pin Dragengine.Gui.Listeners
pin Dragengine.Scenery
pin Dragengine.Utils


/**
 * \brief Panel to edit module parameters.
 * 
 * Default implementation is a SwitchPanel with one panel for each engine system containing
 * module parameters. For each module parameter a suitable edit widget is used.
 */
class EditModuleParametersPanel extends Panel
	/** \brief Reset changes action listener. */
	public class ActionResetChanges implements ActionListener
		private var EditModuleParametersPanel pPanel
		
		/** \brief Create listener. */
		public func new(EditModuleParametersPanel panel)
			pPanel = panel
		end
		
		/** \brief Run action. */
		public func void onAction(ActionEvent event)
			pPanel.resetChanges()
		end
	end
	
	/** \brief Apply changes action listener. */
	public class ActionApplyChanges implements ActionListener
		private var EditModuleParametersPanel pPanel
		
		/** \brief Create listener. */
		public func new(EditModuleParametersPanel panel)
			pPanel = panel
		end
		
		/** \brief Run action. */
		public func void onAction(ActionEvent event)
			pPanel.applyChanges()
		end
	end
	
	/** \brief Toggle advanced listener. */
	public class ToggleAdvancedListener extends DefaultToggleModelListener
		private var EditModuleParametersPanel pPanel
		
		/** \brief Create listener. */
		public func new(EditModuleParametersPanel panel)
			pPanel = panel
		end
		
		/** \brief Toggled state changed. */
		public func void toggledChanged(ToggleModel model)
			pPanel.setAdvanced(model.getToggled())
		end
	end
	
	
	
	private var Panel pPanelButtons
	private var ToggleButtonGroup pButtonGroup
	private var SwitchPanel pPanelSystems
	private var bool pAdvanced
	
	/**
	 * \brief Translation manager to use.
	 * \version 1.16
	 */
	protected var TranslationManager pTranslationManager
	
	
	
	/** \brief Create edit module parameters panel. */
	public func new()
		pTranslationManager = EngineTranslations.get()
		pAdvanced = false
		createContent()
	end
	
	/** \brief Dispose of widget. */
	public func void dispose()
		pPanelButtons = null
		pButtonGroup = null
		pPanelSystems = null
		super.dispose()
	end
	
	
	
	/** \brief Buttons panel with instance of ToggleButton. */
	public func Panel getPanelButtons()
		return pPanelButtons
	end
	
	/** \brief Toggle button group. */
	public func ToggleButtonGroup getButtonGroup()
		return pButtonGroup
	end
	
	/** \brief SwitchPanel with EMPSystem instance. */
	public func SwitchPanel getPanelSystems()
		return pPanelSystems
	end
	
	/** \brief Show advanced parameters. */
	public func bool getAdvanced()
		return pAdvanced
	end
	
	/** \brief Show advanced parameters. */
	public func void setAdvanced(bool advanced)
		if advanced == pAdvanced
			return
		end
		
		pAdvanced = advanced
		
		pPanelSystems.runWhileBlockingLayout(block
			pPanelSystems.forEachWidget(block EMPSystem each
				each.rebuildParametersList(pAdvanced)
			end)
		end)
		pPanelSystems.doLayoutIfBlocked()
	end
	
	
	
	/** \brief Reset parameter changes. */
	public func void resetChanges()
		pPanelSystems.runWhileBlockingLayout(block
			pPanelSystems.forEachWidget(block EMPSystem each
				each.resetChanges()
			end)
		end)
	end
	
	/** \brief Apply parameter changes. */
	public func void applyChanges()
		pPanelSystems.forEachWidget(block EMPSystem each
			each.applyChanges()
		end)
	end
	
	
	
	/** \brief Create content with a SwitchPanel of EMPSystem instances. */
	protected func void createContent()
		runWhileBlockingLayout(block
			setLayout(BorderLayout.new(2))
			setDesignerSelector("Panel.EditModuleParametersPanel")
			
			var Panel panelButtons = Panel.new()
			panelButtons.setLayout(FlowLayout.new(LayoutAxis.x, 2))
			addWidget(panelButtons, BorderLayout.Area.top)
			
			pPanelSystems = SwitchPanel.new()
			addWidget(pPanelSystems, BorderLayout.Area.content)
			
			pButtonGroup = ToggleButtonGroup.new()
			pButtonGroup.addListener(SwitchPanel.SwitchToggleGroup.new(pPanelSystems))
			
			// add systems if they have parameters in order of preference
			if GraphicSystem.getParameterCount() > 0
				addButtonSystem(panelButtons, pTranslationManager.translate(\
					"UI.Settings.ModuleParameters.Graphic").toUTF8())
				pPanelSystems.addWidget(EMPSystem.new(GraSysParamWrapper.new()))
			end
			
			if AudioSystem.getParameterCount() > 0
				addButtonSystem(panelButtons, pTranslationManager.translate(\
					"UI.Settings.ModuleParameters.Audio").toUTF8())
				pPanelSystems.addWidget(EMPSystem.new(AudSysParamWrapper.new()))
			end
			
			if PhysicsSystem.getParameterCount() > 0
				addButtonSystem(panelButtons, pTranslationManager.translate(\
					"UI.Settings.ModuleParameters.Physics").toUTF8())
				pPanelSystems.addWidget(EMPSystem.new(PhySysParamWrapper.new()))
			end
			
			if InputSystem.getParameterCount() > 0
				addButtonSystem(panelButtons, pTranslationManager.translate(\
					"UI.Settings.ModuleParameters.Input").toUTF8())
				pPanelSystems.addWidget(EMPSystem.new(InpSysParamWrapper.new()))
			end
			
			if NetworkSystem.getParameterCount() > 0
				addButtonSystem(panelButtons, pTranslationManager.translate(\
					"UI.Settings.ModuleParameters.Network").toUTF8())
				pPanelSystems.addWidget(EMPSystem.new(NetSysParamWrapper.new()))
			end
			
			if AnimatorSystem.getParameterCount() > 0
				addButtonSystem(panelButtons, pTranslationManager.translate(\
					"UI.Settings.ModuleParameters.Animator").toUTF8())
				pPanelSystems.addWidget(EMPSystem.new(AmrSysParamWrapper.new()))
			end
			
			if AISystem.getParameterCount() > 0
				addButtonSystem(panelButtons, pTranslationManager.translate(\
					"UI.Settings.ModuleParameters.AI").toUTF8())
				pPanelSystems.addWidget(EMPSystem.new(AISysParamWrapper.new()))
			end
			
			if SynthesizerSystem.getParameterCount() > 0
				addButtonSystem(panelButtons, pTranslationManager.translate(\
					"UI.Settings.ModuleParameters.Synthesizer").toUTF8())
				pPanelSystems.addWidget(EMPSystem.new(SynthSysParamWrapper.new()))
			end
			
			//addButtonSystem(panelButtons, "Crash Recovery")
			//pPanelSystems.addWidget(EMPSystem.new(CRSysParamWrapper.new()))
			
			//addButtonSystem(panelButtons, "Script")
			//pPanelSystems.addWidget(EMPSystem.new(ScrSysParamWrapper.new()))
			
			// rebuild parameters of systems
			pPanelSystems.forEachWidget(block EMPSystem each
				each.rebuildParametersList(pAdvanced)
			end)
			
			// add check box to enable advanced parameters
			addWidget(Panel.new(CentrizedBoxLayout.new(LayoutAxis.x, 20), block Panel panel
				var CheckBox checkAdvanced = CheckBox.new(pTranslationManager.translate(\
					"UI.Settings.ModuleParameters.AdvancedParameters").toUTF8())
				checkAdvanced.getToggleModel().addListener(ToggleAdvancedListener.new(this))
				panel.addWidget(checkAdvanced)
			end), BorderLayout.Area.bottom)
		end)
	end
	
	/** \brief Add button to switch to system panel. */
	protected func void addButtonSystem(Panel panelButtons, String label)
		var ToggleButton button = ToggleButton.new(label)
		button.setStickyToggled(true)
		button.setDesignerSelector("Button.EditModuleParametersPanel.System")
		pButtonGroup.add(button)
		panelButtons.addWidget(button)
	end
end
