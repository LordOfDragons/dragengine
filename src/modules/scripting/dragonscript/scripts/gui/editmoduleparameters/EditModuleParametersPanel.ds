/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */


namespace Dragengine.Gui

pin Dragengine.Gui.Events
pin Dragengine.Gui.Layouts
pin Dragengine.Gui.Listeners
pin Dragengine.Scenery
pin Dragengine.Utils


/**
 * \brief Panel to edit module parameters.
 * 
 * Default implementation is a SwitchPanel with one panel for each engine system containing
 * module parameters. For each module parameter a suitable edit widget is used.
 */
class EditModuleParametersPanel extends Panel
	/** \brief Reset changes action listener. */
	public class ActionResetChanges implements ActionListener
		private var EditModuleParametersPanel pPanel
		
		/** \brief Create listener. */
		public func new(EditModuleParametersPanel panel)
			pPanel = panel
		end
		
		/** \brief Run action. */
		public func void onAction(ActionEvent event)
			pPanel.resetChanges()
		end
	end
	
	/** \brief Apply changes action listener. */
	public class ActionApplyChanges implements ActionListener
		private var EditModuleParametersPanel pPanel
		
		/** \brief Create listener. */
		public func new(EditModuleParametersPanel panel)
			pPanel = panel
		end
		
		/** \brief Run action. */
		public func void onAction(ActionEvent event)
			pPanel.applyChanges()
		end
	end
	
	/** \brief Toggle advanced listener. */
	public class ToggleAdvancedListener extends DefaultToggleModelListener
		private var EditModuleParametersPanel pPanel
		
		/** \brief Create listener. */
		public func new(EditModuleParametersPanel panel)
			pPanel = panel
		end
		
		/** \brief Toggled state changed. */
		public func void toggledChanged(ToggleModel model)
			pPanel.setAdvanced(model.getToggled())
		end
	end
	
	
	
	private var Panel pPanelButtons
	private var ToggleButtonGroup pButtonGroup
	private var SwitchPanel pPanelSystems
	private var bool pAdvanced
	
	
	
	/** \brief Create edit module parameters panel. */
	public func new()
		pAdvanced = false
		createContent()
	end
	
	/** \brief Dispose of widget. */
	public func void dispose()
		pPanelButtons = null
		pButtonGroup = null
		pPanelSystems = null
		super.dispose()
	end
	
	
	
	/** \brief Buttons panel with instance of ToggleButton. */
	public func Panel getPanelButtons()
		return pPanelButtons
	end
	
	/** \brief Toggle button group. */
	public func ToggleButtonGroup getButtonGroup()
		return pButtonGroup
	end
	
	/** \brief SwitchPanel with EMPSystem instance. */
	public func SwitchPanel getPanelSystems()
		return pPanelSystems
	end
	
	/** \brief Show advanced parameters. */
	public func bool getAdvanced()
		return pAdvanced
	end
	
	/** \brief Show advanced parameters. */
	public func void setAdvanced(bool advanced)
		if advanced == pAdvanced
			return
		end
		
		pAdvanced = advanced
		
		pPanelSystems.runWhileBlockingLayout(block
			pPanelSystems.forEachWidget(block EMPSystem each
				each.rebuildParametersList(pAdvanced)
			end)
		end)
		pPanelSystems.doLayoutIfBlocked()
	end
	
	
	
	/** \brief Reset parameter changes. */
	public func void resetChanges()
		pPanelSystems.runWhileBlockingLayout(block
			pPanelSystems.forEachWidget(block EMPSystem each
				each.resetChanges()
			end)
		end)
	end
	
	/** \brief Apply parameter changes. */
	public func void applyChanges()
		pPanelSystems.forEachWidget(block EMPSystem each
			each.applyChanges()
		end)
	end
	
	
	
	/** \brief Create content with a SwitchPanel of EMPSystem instances. */
	protected func void createContent()
		runWhileBlockingLayout(block
			setLayout(BorderLayout.new(2))
			setDesignerSelector("Panel.EditModuleParametersPanel")
			
			var Panel panelButtons = Panel.new()
			panelButtons.setLayout(FlowLayout.new(LayoutAxis.x, 2))
			addWidget(panelButtons, BorderLayout.Area.top)
			
			pPanelSystems = SwitchPanel.new()
			addWidget(pPanelSystems, BorderLayout.Area.content)
			
			pButtonGroup = ToggleButtonGroup.new()
			pButtonGroup.addListener(SwitchPanel.SwitchToggleGroup.new(pPanelSystems))
			
			// add systems if they have parameters in order of preference
			if GraphicSystem.getParameterCount() > 0
				addButtonSystem(panelButtons, "@UI.Settings.ModuleParameters.Graphic")
				pPanelSystems.addWidget(EMPSystem.new(GraSysParamWrapper.new()))
			end
			
			if AudioSystem.getParameterCount() > 0
				addButtonSystem(panelButtons, "@UI.Settings.ModuleParameters.Audio")
				pPanelSystems.addWidget(EMPSystem.new(AudSysParamWrapper.new()))
			end
			
			if PhysicsSystem.getParameterCount() > 0
				addButtonSystem(panelButtons, "@UI.Settings.ModuleParameters.Physics")
				pPanelSystems.addWidget(EMPSystem.new(PhySysParamWrapper.new()))
			end
			
			if InputSystem.getParameterCount() > 0
				addButtonSystem(panelButtons, "@UI.Settings.ModuleParameters.Input")
				pPanelSystems.addWidget(EMPSystem.new(InpSysParamWrapper.new()))
			end
			
			if NetworkSystem.getParameterCount() > 0
				addButtonSystem(panelButtons, "@UI.Settings.ModuleParameters.Network")
				pPanelSystems.addWidget(EMPSystem.new(NetSysParamWrapper.new()))
			end
			
			if AnimatorSystem.getParameterCount() > 0
				addButtonSystem(panelButtons, "@UI.Settings.ModuleParameters.Animator")
				pPanelSystems.addWidget(EMPSystem.new(AmrSysParamWrapper.new()))
			end
			
			if AISystem.getParameterCount() > 0
				addButtonSystem(panelButtons, "@UI.Settings.ModuleParameters.AI")
				pPanelSystems.addWidget(EMPSystem.new(AISysParamWrapper.new()))
			end
			
			if SynthesizerSystem.getParameterCount() > 0
				addButtonSystem(panelButtons, "@UI.Settings.ModuleParameters.Synthesizer")
				pPanelSystems.addWidget(EMPSystem.new(SynthSysParamWrapper.new()))
			end
			
			//addButtonSystem(panelButtons, "Crash Recovery")
			//pPanelSystems.addWidget(EMPSystem.new(CRSysParamWrapper.new()))
			
			//addButtonSystem(panelButtons, "Script")
			//pPanelSystems.addWidget(EMPSystem.new(ScrSysParamWrapper.new()))
			
			// rebuild parameters of systems
			pPanelSystems.forEachWidget(block EMPSystem each
				each.rebuildParametersList(pAdvanced)
			end)
			
			// add check box to enable advanced parameters
			addWidget(Panel.new(CentrizedBoxLayout.new(LayoutAxis.x, 20), block Panel panel
				var CheckBox checkAdvanced = CheckBox.new(\
					"@UI.Settings.ModuleParameters.AdvancedParameters")
				checkAdvanced.getToggleModel().addListener(ToggleAdvancedListener.new(this))
				panel.addWidget(checkAdvanced)
			end), BorderLayout.Area.bottom)
		end)
	end
	
	/** \brief Add button to switch to system panel. */
	protected func void addButtonSystem(Panel panelButtons, String label)
		var ToggleButton button = ToggleButton.new(label)
		button.setStickyToggled(true)
		button.setDesignerSelector("Button.EditModuleParametersPanel.System")
		pButtonGroup.add(button)
		panelButtons.addWidget(button)
	end
end
