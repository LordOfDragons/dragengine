/* 
 * Drag[en]gine DragonScript Script Module
 *
 * Copyright (C) 2020, Roland Pl√ºss (roland@rptd.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */


namespace Dragengine.Gui

pin Dragengine.Gui.Events
pin Dragengine.Gui.Layouts
pin Dragengine.Gui.Listeners
pin Dragengine.Scenery
pin Dragengine.Utils


/**
 * \brief Panel to edit module parameters.
 * 
 * Default implementation is a ScrollPanel with FlowLayout of parameters. Each parameters
 * is shown with a suitable widget.
 */
class EMPSystem extends Panel
	/** \brief Parameter edit widget listener. */
	public interface ParameterValueEditor
		/** \brief Reset parameter changes. */
		func void resetChanges()
		
		/** \brief Apply parameter changes. */
		func void applyChanges()
	end
	
	/**
	 * \brief Parameter edit widget listener.
	 * \version 1.7
	 */
	public interface ParameterValueEditor2 implements ParameterValueEditor
		/** \brief Reset parameter to default value. */
		func void resetDefault()
	end
	
	/** \brief Text field supporting ParameterValueEditor. */
	public class PVETextField extends TextField implements ParameterValueEditor2
		private var SysParamWrapper pWrapper
		private var ModuleParameter pParameter
		
		/** \brief Create text field. */
		public func new(SysParamWrapper wrapper, ModuleParameter parameter)
			pWrapper = wrapper
			pParameter = parameter
			setDesignerSelector("TextField.EMPSystem.Value")
			getModel().setText(wrapper.getParameterValue(parameter.getName()))
		end
		
		/** \brief Reset parameter changes. */
		public func void resetChanges()
			getModel().setText(pWrapper.getParameterValue(pParameter.getName()))
		end
		
		/**
		 * \brief Reset parameter to default value.
		 * \version 1.7
		 */
		public func void resetDefault()
			getModel().setText(pParameter.getDefaultValue())
		end
		
		/** \brief Apply parameter changes. */
		public func void applyChanges()
			var String oldValue = pWrapper.getParameterValue(pParameter.getName())
			var String newValue = getModel().getText()
			if not newValue.equals(oldValue)
				pWrapper.setParameterValue(pParameter.getName(), newValue)
			end
		end
	end
	
	/** \brief CheckBox supporting ParameterValueEditor. */
	public class PVECheckBox extends Panel implements ParameterValueEditor2
		private var SysParamWrapper pWrapper
		private var ModuleParameter pParameter
		private var CheckBox pCheckBox
		
		/** \brief Create text field. */
		public func new(SysParamWrapper wrapper, ModuleParameter parameter)
			pWrapper = wrapper
			pParameter = parameter
			pCheckBox = CheckBox.new()
			pCheckBox.setDesignerSelector("CheckBox.EMPSystem.Value")
			pCheckBox.setToggled(wrapper.getParameterValue(parameter.getName()).equals("1"))
			setLayout(CentrizedBoxLayout.new(LayoutAxis.x))
			addWidget(pCheckBox)
		end
		
		/** \brief Dispose of widget. */
		public func void dispose()
			pCheckBox = null
			super.dispose()
		end
		
		/** \brief Reset parameter changes. */
		public func void resetChanges()
			pCheckBox.setToggled(pWrapper.getParameterValue(pParameter.getName()).equals("1"))
		end
		
		/**
		 * \brief Reset parameter to default value.
		 * \version 1.7
		 */
		public func void resetDefault()
			pCheckBox.setToggled(pParameter.getDefaultValue().equals("1"))
		end
		
		/** \brief Apply parameter changes. */
		public func void applyChanges()
			var bool oldValue = pWrapper.getParameterValue(pParameter.getName()).equals("1")
			var bool newValue = pCheckBox.getToggled()
			if newValue != oldValue
				pWrapper.setParameterValue(pParameter.getName(), newValue if "1" else "0")
			end
		end
	end
	
	/** \brief Cycle value supporting ParameterValueEditor. */
	public class PVECycleValue extends Panel implements ParameterValueEditor2
		/** \brief Select previous value. */
		public class SelectPrevValue implements ActionListener
			private var PVECycleValue pCycleValue
			
			/** \brief Create action listener. */
			public func new(PVECycleValue cycleValue)
				pCycleValue = cycleValue
			end
			
			/** \brief Action triggered. */
			public func void onAction(ActionEvent event)
				pCycleValue.selectPrevValue()
			end
		end
		
		/** \brief Select next value. */
		public class SelectNextValue implements ActionListener
			private var PVECycleValue pCycleValue
			
			/** \brief Create action listener. */
			public func new(PVECycleValue cycleValue)
				pCycleValue = cycleValue
			end
			
			/** \brief Action triggered. */
			public func void onAction(ActionEvent event)
				pCycleValue.selectNextValue()
			end
		end
		
		/** \brief Pick value from list action. */
		class SelectFromList extends ClickedActionListener
			private var PVECycleValue pCycleValue
			
			/** \brief Create listener. */
			public func new(PVECycleValue cycleValue)
				pCycleValue = cycleValue
			end
			
			/** \brief User clicked on label. */
			public func void onAction()
				pCycleValue.selectFromList()
			end
		end
		
		/** \brief Design parent on mouse enter, move and leave. */
		class ForwardMouseEnterMoveLeave extends DefaultMouseListener
			private var Widget pWidget
			
			/** \brief Create listener. */
			public func new(Widget widget)
				pWidget = widget
			end
			
			public func void onMouseEnter(MouseEvent event)
				pWidget.sendEvent(event)
			end
			
			public func void onMouseMove(MouseEvent event)
				pWidget.sendEvent(event)
			end
			
			public func void onMouseLeave(MouseEvent event)
				pWidget.sendEvent(event)
			end
		end
		
		/** \brief Selection entry with list model support. */
		class SelectionEntry
			private var String pValue
			private var String pDisplayName
			private var String pDescription
			
			/** \brief Create selection entry. */
			public func new(String value, String displayName, String description)
				pValue = value
				pDisplayName = displayName
				pDescription = description
			end
			
			/** \brief Value of entry. */
			public func String getValue()
				return pValue
			end
			
			/** \brief Display name of entry. */
			public func String getDisplayName()
				return pDisplayName
			end
			
			/** \brief Description of entry. */
			public func String getDescription()
				return pDescription
			end
			
			/** \brief String represntation. */
			public func String toString()
				return pDisplayName
			end
			
			/** \brief Entry equals another entry. */
			public func bool equals(Object other)
				return other castable SelectionEntry and pValue.equals((other cast SelectionEntry).pValue)
			end
		end
		
		private var EMPSystem pEMPSystem
		private var ModuleParameter pParameter
		private var DefaultTextModel pModelSelectedValue
		private var DefaultListModel pModelValues
		private var Button pButtonPrev
		private var Button pButtonNext
		private var Label pLabelValue
		
		/** \brief Create widget. */
		public func new(EMPSystem empSystem, ModuleParameter parameter)
			pEMPSystem = empSystem
			pParameter = parameter
			
			pModelValues = DefaultListModel.new()
			
			select parameter.getType()
			case ModuleParameterType.ranged
				var float minValue = parameter.getMinimumValue()
				var float maxValue = parameter.getMaximumValue()
				var float valueStep = parameter.getValueStepSize()
				var int i, count = (((maxValue - minValue) / valueStep + 0.5) cast int) + 1
				var String value
				
				for i = 0 to count
					value = DEMath.min(minValue + valueStep * i, maxValue).toString()
					pModelValues.add(SelectionEntry.new(value, value, ""))
				end
				
			case ModuleParameterType.selection
				var int i, count = parameter.getSelectionEntryCount()
				for i = 0 to count
					pModelValues.add(SelectionEntry.new(\
						parameter.getSelectionEntryValueAt(i), \
						parameter.getSelectionEntryDisplayNameAt(i), \
						parameter.getSelectionEntryDescriptionAt(i)))
				end
				
			else
				throw EInvalidParam.new("Unsupported module parameter type " + parameter.getType())
			end
			
			pModelSelectedValue = DefaultTextModel.new()
			
			runWhileBlockingLayout(block
				setDesignerSelector("Panel.EMPSystem.CycleValue")
				setLayout(BorderLayout.new())
				
				pButtonPrev = Button.new("", \
					Image.new("/shareddata/guithemes/modern/arrows/left_normal.png"), \
					SelectPrevValue.new(this))
				pButtonPrev.setDesignerSelector("Button.EMPSystem.CycleValue.Prev")
				addWidget(pButtonPrev, BorderLayout.Area.left)
				
				pLabelValue = Label.new(pModelSelectedValue)
				pLabelValue.setDesignerSelector("Label.EMPSystem.CycleValue.Value")
				pLabelValue.addMouseListener(SelectFromList.new(this))
				pLabelValue.addMouseListener(ParentWheelActionListener.new())
				pLabelValue.addMouseListener(ForwardMouseEnterMoveLeave.new(this))
				addWidget(pLabelValue, BorderLayout.Area.content)
				
				pButtonNext = Button.new("", \
					Image.new("/shareddata/guithemes/modern/arrows/right_normal.png"), \
					SelectNextValue.new(this))
				pButtonNext.setDesignerSelector("Button.EMPSystem.CycleValue.Next")
				addWidget(pButtonNext, BorderLayout.Area.right)
			end)
			
			resetChanges()
		end
		
		/** \brief Dispose of widget. */
		public func void dispose()
			pModelSelectedValue = null
			pModelValues = null
			pButtonPrev = null
			pButtonNext = null
			pLabelValue = null
			super.dispose()
		end
		
		/** \brief Previous value button. */
		public func Button getButtonPrev()
			return pButtonPrev
		end
		
		/** \brief Next value button. */
		public func Button getButtonNext()
			return pButtonNext
		end
		
		/** \brief Selected value label. */
		public func Label getLabelValue()
			return pLabelValue
		end
		
		/** \brief Select previous value. */
		public func void selectPrevValue()
			if pModelValues.getSelected() == 0
				return
			end
			
			pModelValues.setSelected(pModelValues.getSelected() - 1)
			pModelSelectedValue.setText((pModelValues.getAt(\
				pModelValues.getSelected()) cast SelectionEntry).getDisplayName())
		end
		
		/** \brief Select next value. */
		public func void selectNextValue()
			if pModelValues.getSelected() == pModelValues.getCount() - 1
				return
			end
			
			pModelValues.setSelected(pModelValues.getSelected() + 1)
			pModelSelectedValue.setText((pModelValues.getAt(\
				pModelValues.getSelected()) cast SelectionEntry).getDisplayName())
		end
		
		/** \brief Select value from list. */
		public func void selectFromList()
			WindowDialog.chooseList(pEMPSystem.getWindow(),\
				"@UI.Settings.ModuleParameters.SelectParameterValue",\
				"@UI.Settings.ModuleParameters.SelectValue", null, pModelValues, \
				DefaultListElementRenderer.new(String.new('X', 20)), null, null, \
					WindowDialog.BlockResultListener.new(block int result
						if result == -1
							return null
						end
						
						pModelValues.setSelected(result)
						pModelSelectedValue.setText((pModelValues.getAt(result) \
							cast SelectionEntry).getDisplayName())
					end))
		end
		
		/** \brief Reset parameter changes. */
		public func void resetChanges()
			setValue(pEMPSystem.getWrapper().getParameterValue(pParameter.getName()))
		end
		
		/**
		 * \brief Reset parameter to default value.
		 * \version 1.7
		 */
		public func void resetDefault()
			setValue(pParameter.getDefaultValue())
		end
		
		/**
		 * \brief Select value.
		 * \version 1.7
		 */
		protected func void setValue(String value)
			select pParameter.getType()
			case ModuleParameterType.ranged
				var float minValue = pParameter.getMinimumValue()
				var float maxValue = pParameter.getMaximumValue()
				var float valueStep = pParameter.getValueStepSize()
				pModelValues.setSelected(\
					((DEMath.clamp(value.toFloat(), minValue, maxValue) \
						- minValue) / valueStep + 0.5) cast int)
				
			case ModuleParameterType.selection
				pModelValues.setSelected(DEMath.max(pModelValues.indexOf(\
					pModelValues.find(block SelectionEntry each
						return each.getValue().equals(value)
					end)), 0))
			end
			
			pModelSelectedValue.setText((pModelValues.getAt(\
				pModelValues.getSelected()) cast SelectionEntry).getDisplayName())
		end
		
		/** \brief Apply parameter changes. */
		public func void applyChanges()
			var String oldValue = pEMPSystem.getWrapper().getParameterValue(pParameter.getName())
			var String newValue = (pModelValues.getAt(\
				pModelValues.getSelected()) cast SelectionEntry).getValue()
			if not newValue.equals(oldValue)
				pEMPSystem.getWrapper().setParameterValue(pParameter.getName(), newValue)
			end
		end
	end
	
	/** \brief Mouse listener display parameter info on clicking. */
	public class ClickShowInfo extends DefaultMouseListener
		private var ModuleParameter pParameter
		private var EMPSystem pEMPSystem
		
		/** \brief Create listener. */
		public func new(ModuleParameter parameter, EMPSystem empSystem)
			pParameter = parameter
			pEMPSystem = empSystem
		end
		
		/** \brief Mouse button has been pressed. */
		public func void onButtonPress(MouseEvent event)
			pEMPSystem.showParameterInfo(pParameter)
		end
	end
	
	/** \brief Display parameter info on obtaining focus. */
	public class FocusShowInfo extends DefaultFocusListener
		private var ModuleParameter pParameter
		private var EMPSystem pEMPSystem
		
		/** \brief Create listener. */
		public func new(ModuleParameter parameter, EMPSystem empSystem)
			pParameter = parameter
			pEMPSystem = empSystem
		end
		
		/** \brief Widget received focus. */
		public func void onFocusReceived(FocusEvent event)
			pEMPSystem.showParameterInfo(pParameter)
		end
	end
	
	/**
	 * \brief Reset parameter action.
	 * \version 1.7
	 */
	public class ResetParameter implements ActionListener
		private var ParameterValueEditor2 pEditor
		
		/** \brief Create listener. */
		public func new(ParameterValueEditor2 editor)
			pEditor = editor
		end
		
		/** \brief Action triggered. */
		public func void onAction(ActionEvent event)
			pEditor.resetDefault()
		end
	end
	
	
	
	private var SysParamWrapper pWrapper
	private var Panel pPanelParameters
	private var Array pEditorWidgets
	private var DefaultTextModel pModelInfo
	
	
	
	/** \brief Create edit module parameters panel. */
	public func new(SysParamWrapper wrapper)
		pWrapper = wrapper
		pEditorWidgets = Array.new()
		createContent()
	end
	
	/** \brief Dispose of widget. */
	public func void dispose()
		pPanelParameters = null
		pEditorWidgets = null
		pModelInfo = null
		super.dispose()
	end
	
	
	
	/** \brief System parameter wrapper. */
	public func SysParamWrapper getWrapper()
		return pWrapper
	end
	
	
	
	/** \brief Rebuild parameters list. */
	public func void rebuildParametersList(bool withAdvanced)
		pPanelParameters.runWhileBlockingLayout(block
			var int i, count = pWrapper.getParameterCount()
			var Array parameters = Array.new()
			
			for i = 0 to count
				var ModuleParameter parameter = pWrapper.getParameterAt(i)
				
				select parameter.getCategory()
				case ModuleParameterCategory.basic
					parameters.add(parameter)
					
				case ModuleParameterCategory.advanced
					if withAdvanced
						parameters.add(parameter)
					end
				end
			end
			
			parameters.sort(block ModuleParameter a, ModuleParameter b
				return a.getName().compare(b.getName())
			end)
			
			pEditorWidgets.removeAll()
			pPanelParameters.removeAllWidgets()
			
			parameters.forEach(block ModuleParameter each
				pPanelParameters.addWidget(createNameWidget(each))
				
				pPanelParameters.addWidget(Panel.new(FlowLayout.new(LayoutAxis.x, 2, FlowLayout.Stretch.first), block Panel p
					var Widget widget = createEditWidget(each)
					p.addWidget(widget)
					
					if widget castable ParameterValueEditor2
						p.addWidget(createResetButton(widget cast ParameterValueEditor2))
					end
					
					pEditorWidgets.add(widget)
				end))
			end)
		end)
		pPanelParameters.doLayoutIfBlocked()
	end
	
	/** \brief Reset parameter changes. */
	public func void resetChanges()
		pPanelParameters.runWhileBlockingLayout(block
			pEditorWidgets.forEachCastable(block ParameterValueEditor each
				each.resetChanges()
			end)
		end)
	end
	
	/** \brief Apply parameter changes. */
	public func void applyChanges()
		pPanelParameters.runWhileBlockingLayout(block
			pEditorWidgets.forEachCastable(block ParameterValueEditor each
				each.applyChanges()
			end)
		end)
	end
	
	/** \brief Show module parameter information. */
	public func void showParameterInfo(ModuleParameter parameter)
		var String text = parameter.getDescription()
		
		if parameter.getType() == ModuleParameterType.selection
			var int i, count = parameter.getSelectionEntryCount()
			
			for i = 0 to count
				text = text + "\n\n" + parameter.getSelectionEntryDisplayNameAt(i) \
					+ ": " + parameter.getSelectionEntryDescriptionAt(i)
			end
		end
		
		pModelInfo.setText(text)
	end
	
	/**
	 * \brief Reset parameter value.
	 * \version 1.7
	 */
	public func void resetParameter(ModuleParameter parameter)
		var String text = parameter.getDescription()
		
		if parameter.getType() == ModuleParameterType.selection
			var int i, count = parameter.getSelectionEntryCount()
			
			for i = 0 to count
				text = text + "\n\n" + parameter.getSelectionEntryDisplayNameAt(i) \
					+ ": " + parameter.getSelectionEntryDescriptionAt(i)
			end
		end
		
		pModelInfo.setText(text)
	end
	
	
	
	/** \brief Create content with a ScrollPanel and FormLayout. */
	protected func void createContent()
		runWhileBlockingLayout(block
			setLayout(BorderLayout.new(5))
			setDesignerSelector("Panel.EMPSystem.Content")
			
			pPanelParameters = Panel.new(FormLayout.new(true, 20, 2))
			pPanelParameters.setDesignerSelector("Panel.EMPSystem.Parameters")
			var Viewport viewport = Viewport.new(pPanelParameters, BoxLayout.new(LayoutAxis.y))
			addWidget(ScrollPanel.new(viewport, ScrollPanel.Policy.hidden, \
				ScrollPanel.Policy.visible), BorderLayout.Area.content)
			
			pModelInfo = DefaultTextModel.new()
			
			var TextArea textArea = TextArea.new(pModelInfo)
			textArea.setReadOnly(true)
			textArea.setRowCount(5)
			textArea.setDesignerSelector("TextArea.EMPSystem.ParameterInfo")
			addWidget(ScrollPanel.new(textArea, ScrollPanel.Policy.hidden, \
				ScrollPanel.Policy.visible), BorderLayout.Area.bottom)
		end)
	end
	
	/** \brief Create name widget for parameter. */
	protected func Widget createNameWidget(ModuleParameter parameter)
		var String name = parameter.getDisplayName()
		if name.empty()
			name = parameter.getName()
		end
		
		var Label label = Label.new(name, "Label.EMPSystem.Name")
		label.addMouseListener(ClickShowInfo.new(parameter, this))
		label.addMouseListener(ParentWheelActionListener.new())
		return label
	end
	
	/** \brief Create edit widget for parameter. */
	protected func Widget createEditWidget(ModuleParameter parameter)
		select parameter.getType()
		case ModuleParameterType.boolean
			return createEditWidgetBoolean(parameter)
			
		case ModuleParameterType.numeric
			return createEditWidgetNumeric(parameter)
			
		case ModuleParameterType.ranged
			return createEditWidgetRanged(parameter)
			
		case ModuleParameterType.string
			return createEditWidgetString(parameter)
			
		case ModuleParameterType.selection
			return createEditWidgetSelection(parameter)
			
		else
			return createEditWidgetString(parameter)
		end
	end
	
	/** \brief Create widget to edit parameter as string. */
	protected func Widget createEditWidgetString(ModuleParameter parameter)
		var PVETextField widget = PVETextField.new(pWrapper, parameter)
		widget.addFocusListener(FocusShowInfo.new(parameter, this))
		return widget
	end
	
	/** \brief Create widget to edit parameter as numeric. */
	protected func Widget createEditWidgetNumeric(ModuleParameter parameter)
		var PVETextField widget = PVETextField.new(pWrapper, parameter)
		widget.setValidator(SimpleTextValidator.new(12, SimpleTextValidator.CharacterClass.number))
		widget.addFocusListener(FocusShowInfo.new(parameter, this))
		return widget
	end
	
	/** \brief Create widget to edit parameter as boolean. */
	protected func Widget createEditWidgetBoolean(ModuleParameter parameter)
		var PVECheckBox widget = PVECheckBox.new(pWrapper, parameter)
		widget.addFocusListener(FocusShowInfo.new(parameter, this))
		return widget
	end
	
	/** \brief Create widget to edit parameter as ranged. */
	protected func Widget createEditWidgetRanged(ModuleParameter parameter)
		var PVECycleValue widget = PVECycleValue.new(this, parameter)
		var FocusShowInfo showInfo = FocusShowInfo.new(parameter, this)
		widget.getButtonPrev().addFocusListener(showInfo)
		widget.getButtonNext().addFocusListener(showInfo)
		widget.getLabelValue().addMouseListener(ClickShowInfo.new(parameter, this))
		return widget
	end
	
	/** \brief Create widget to edit parameter as selection. */
	protected func Widget createEditWidgetSelection(ModuleParameter parameter)
		var PVECycleValue widget = PVECycleValue.new(this, parameter)
		var FocusShowInfo showInfo = FocusShowInfo.new(parameter, this)
		widget.getButtonPrev().addFocusListener(showInfo)
		widget.getButtonNext().addFocusListener(showInfo)
		widget.getLabelValue().addMouseListener(ClickShowInfo.new(parameter, this))
		return widget
	end
	
	/**
	 * \brief Create reset button.
	 * \version 1.7
	 */
	protected func Widget createResetButton(ParameterValueEditor2 editor)
		var Button button = Button.new(" ", ResetParameter.new(editor))
		button.setDesignerSelector("Button.EMPSystem.Reset")
		button.setToolTip("@UI.Settings.ModuleParameters.Tooltip.Reset")
		return button
	end
end
