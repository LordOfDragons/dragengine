/* 
 * Drag[en]gine DragonScript Script Module
 *
 * Copyright (C) 2020, Roland Pl√ºss (roland@rptd.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */


namespace Dragengine.Gui

pin Dragengine.Gui.Events
pin Dragengine.Gui.Layouts
pin Dragengine.Gui.Listeners
pin Dragengine.Scenery
pin Dragengine.Utils


/**
 * \brief Panel to edit module parameters.
 * 
 * Default implementation is a ScrollPanel with FlowLayout of parameters. Each parameters
 * is shown with a suitable widget.
 */
class EMPSystem extends Panel
	/** \brief Parameter edit widget listener. */
	public interface ParameterValueEditor
		/** \brief Reset parameter changes. */
		func void resetChanges()
		
		/** \brief Apply parameter changes. */
		func void applyChanges()
	end
	
	/** \brief Text field supporting ParameterValueEditor. */
	public class PVETextField extends TextField implements ParameterValueEditor
		private var SysParamWrapper pWrapper
		private var ModuleParameter pParameter
		
		/** \brief Create text field. */
		public func new( SysParamWrapper wrapper, ModuleParameter parameter )
			this.pWrapper = wrapper
			this.pParameter = parameter
			this.setDesignerSelector( "TextField.EMPSystem.Value" )
			this.getModel().setText( wrapper.getParameterValue( parameter.getName() ) )
		end
		
		/** \brief Reset parameter changes. */
		public func void resetChanges()
			this.getModel().setText( this.pWrapper.getParameterValue( this.pParameter.getName() ) )
		end
		
		/** \brief Apply parameter changes. */
		public func void applyChanges()
			var String oldValue = this.pWrapper.getParameterValue( this.pParameter.getName() )
			var String newValue = this.getModel().getText()
			if not newValue.equals( oldValue )
				this.pWrapper.setParameterValue( this.pParameter.getName(), newValue )
			end
		end
	end
	
	/** \brief CheckBox supporting ParameterValueEditor. */
	public class PVECheckBox extends Panel implements ParameterValueEditor
		private var SysParamWrapper pWrapper
		private var ModuleParameter pParameter
		private var CheckBox pCheckBox
		
		/** \brief Create text field. */
		public func new( SysParamWrapper wrapper, ModuleParameter parameter )
			this.pWrapper = wrapper
			this.pParameter = parameter
			this.pCheckBox = CheckBox.new()
			this.pCheckBox.setDesignerSelector( "CheckBox.EMPSystem.Value" )
			this.pCheckBox.setToggled( wrapper.getParameterValue( parameter.getName() ).equals( "1" ) )
			this.setLayout( CentrizedBoxLayout.new( LayoutAxis.x ) )
			this.addWidget( this.pCheckBox )
		end
		
		/** \brief Dispose of widget. */
		public func void dispose()
			this.pCheckBox = null
			super.dispose()
		end
		
		/** \brief Reset parameter changes. */
		public func void resetChanges()
			this.pCheckBox.setToggled( this.pWrapper.getParameterValue( this.pParameter.getName() ).equals( "1" ) )
		end
		
		/** \brief Apply parameter changes. */
		public func void applyChanges()
			var bool oldValue = this.pWrapper.getParameterValue( this.pParameter.getName() ).equals( "1" )
			var bool newValue = this.pCheckBox.getToggled()
			if newValue != oldValue
				this.pWrapper.setParameterValue( this.pParameter.getName(), newValue if "1" else "0" )
			end
		end
	end
	
	/** \brief Cycle value supporting ParameterValueEditor. */
	public class PVECycleValue extends Panel implements ParameterValueEditor
		/** \brief Select previous value. */
		public class SelectPrevValue implements ActionListener
			private var PVECycleValue pCycleValue
			
			/** \brief Create action listener. */
			public func new( PVECycleValue cycleValue )
				this.pCycleValue = cycleValue
			end
			
			/** \brief Action triggered. */
			public func void onAction( ActionEvent event )
				this.pCycleValue.selectPrevValue()
			end
		end
		
		/** \brief Select next value. */
		public class SelectNextValue implements ActionListener
			private var PVECycleValue pCycleValue
			
			/** \brief Create action listener. */
			public func new( PVECycleValue cycleValue )
				this.pCycleValue = cycleValue
			end
			
			/** \brief Action triggered. */
			public func void onAction( ActionEvent event )
				this.pCycleValue.selectNextValue()
			end
		end
		
		/** \brief Pick value from list action. */
		class SelectFromList extends ClickedActionListener
			private var PVECycleValue pCycleValue
			
			/** \brief Create listener. */
			public func new( PVECycleValue cycleValue )
				this.pCycleValue = cycleValue
			end
			
			/** \brief User clicked on label. */
			public func void onAction()
				this.pCycleValue.selectFromList()
			end
		end
		
		/** \brief Design parent on mouse enter, move and leave. */
		class ForwardMouseEnterMoveLeave extends DefaultMouseListener
			private var Widget pWidget
			
			/** \brief Create listener. */
			public func new( Widget widget )
				this.pWidget = widget
			end
			
			public func void onMouseEnter( MouseEvent event )
				this.pWidget.sendEvent( event )
			end
			
			public func void onMouseMove( MouseEvent event )
				this.pWidget.sendEvent( event )
			end
			
			public func void onMouseLeave( MouseEvent event )
				this.pWidget.sendEvent( event )
			end
		end
		
		/** \brief Selection entry with list model support. */
		class SelectionEntry
			private var String pValue
			private var String pDisplayName
			private var String pDescription
			
			/** \brief Create selection entry. */
			public func new( String value, String displayName, String description )
				this.pValue = value
				this.pDisplayName = displayName
				this.pDescription = description
			end
			
			/** \brief Value of entry. */
			public func String getValue()
				return this.pValue
			end
			
			/** \brief Display name of entry. */
			public func String getDisplayName()
				return this.pDisplayName
			end
			
			/** \brief Description of entry. */
			public func String getDescription()
				return this.pDescription
			end
			
			/** \brief String represntation. */
			public func String toString()
				return this.pDisplayName
			end
			
			/** \brief Entry equals another entry. */
			public func bool equals( Object other )
				return other castable SelectionEntry and this.pValue.equals( ( other cast SelectionEntry ).pValue )
			end
		end
		
		private var EMPSystem pEMPSystem
		private var ModuleParameter pParameter
		private var DefaultTextModel pModelSelectedValue
		private var DefaultListModel pModelValues
		private var Button pButtonPrev
		private var Button pButtonNext
		private var Label pLabelValue
		
		/** \brief Create widget. */
		public func new( EMPSystem empSystem, ModuleParameter parameter )
			this.pEMPSystem = empSystem
			this.pParameter = parameter
			
			this.pModelValues = DefaultListModel.new()
			
			select parameter.getType()
			case ModuleParameterType.ranged
				var float minValue = parameter.getMinimumValue()
				var float maxValue = parameter.getMaximumValue()
				var float valueStep = parameter.getValueStepSize()
				var int i, count = ( ( maxValue - minValue ) / valueStep + 0.5 ) cast int
				var String value
				
				for i = 0 to count
					value = DEMath.min( minValue + valueStep * i, maxValue ).toString()
					this.pModelValues.add( SelectionEntry.new( value, value, "" ) )
				end
				
			case ModuleParameterType.selection
				var int i, count = parameter.getSelectionEntryCount()
				for i = 0 to count
					this.pModelValues.add( SelectionEntry.new( \
						parameter.getSelectionEntryValueAt( i ), \
						parameter.getSelectionEntryDisplayNameAt( i ), \
						parameter.getSelectionEntryDescriptionAt( i ) ) )
				end
				
			else
				throw EInvalidParam.new( "Unsupported module parameter type " + parameter.getType() )
			end
			
			this.pModelSelectedValue = DefaultTextModel.new()
			
			this.runWhileBlockingLayout( block
				this.setDesignerSelector( "Panel.EMPSystem.CycleValue" )
				this.setLayout( BorderLayout.new() )
				
				this.pButtonPrev = Button.new( "", \
					Image.new( "/shareddata/guithemes/modern/arrows/left_normal.png" ), \
					SelectPrevValue.new( this ) )
				this.pButtonPrev.setDesignerSelector( "Button.EMPSystem.CycleValue.Prev" )
				this.addWidget( this.pButtonPrev, BorderLayout.Area.left )
				
				this.pLabelValue = Label.new( this.pModelSelectedValue )
				this.pLabelValue.setDesignerSelector( "Label.EMPSystem.CycleValue.Value" )
				this.pLabelValue.addMouseListener( SelectFromList.new( this ) )
				this.pLabelValue.addMouseListener( ParentWheelActionListener.new() )
				this.pLabelValue.addMouseListener( ForwardMouseEnterMoveLeave.new( this ) )
				this.addWidget( this.pLabelValue, BorderLayout.Area.content )
				
				this.pButtonNext = Button.new( "", \
					Image.new( "/shareddata/guithemes/modern/arrows/right_normal.png" ), \
					SelectNextValue.new( this ) )
				this.pButtonNext.setDesignerSelector( "Button.EMPSystem.CycleValue.Next" )
				this.addWidget( this.pButtonNext, BorderLayout.Area.right )
			end )
			
			this.resetChanges()
		end
		
		/** \brief Dispose of widget. */
		public func void dispose()
			this.pModelSelectedValue = null
			this.pModelValues = null
			this.pButtonPrev = null
			this.pButtonNext = null
			this.pLabelValue = null
			super.dispose()
		end
		
		/** \brief Previous value button. */
		public func Button getButtonPrev()
			return this.pButtonPrev
		end
		
		/** \brief Next value button. */
		public func Button getButtonNext()
			return this.pButtonNext
		end
		
		/** \brief Selected value label. */
		public func Label getLabelValue()
			return this.pLabelValue
		end
		
		/** \brief Select previous value. */
		public func void selectPrevValue()
			if this.pModelValues.getSelected() == 0
				return
			end
			
			this.pModelValues.setSelected( this.pModelValues.getSelected() - 1 )
			this.pModelSelectedValue.setText( ( this.pModelValues.getAt( \
				this.pModelValues.getSelected() ) cast SelectionEntry ).getDisplayName() )
		end
		
		/** \brief Select next value. */
		public func void selectNextValue()
			if this.pModelValues.getSelected() == this.pModelValues.getCount() - 1
				return
			end
			
			this.pModelValues.setSelected( this.pModelValues.getSelected() + 1 )
			this.pModelSelectedValue.setText( ( this.pModelValues.getAt( \
				this.pModelValues.getSelected() ) cast SelectionEntry ).getDisplayName() )
		end
		
		/** \brief Select value from list. */
		public func void selectFromList()
			WindowDialog.chooseList( this.pEMPSystem.getWindow(), \
				"Select Parameter Value", "Select value.", null, this.pModelValues, \
				DefaultListElementRenderer.new( String.new( 'X', 20 ) ), null, null, \
					WindowDialog.BlockResultListener.new( block int result
						if result == -1
							return null
						end
						
						this.pModelValues.setSelected( result )
						this.pModelSelectedValue.setText( ( this.pModelValues.getAt( result ) \
							cast SelectionEntry ).getDisplayName() )
					end ) )
		end
		
		/** \brief Reset parameter changes. */
		public func void resetChanges()
			var String value = this.pEMPSystem.getWrapper().getParameterValue( this.pParameter.getName() )
			
			select this.pParameter.getType()
			case ModuleParameterType.ranged
				var float minValue = this.pParameter.getMinimumValue()
				var float maxValue = this.pParameter.getMaximumValue()
				var float valueStep = this.pParameter.getValueStepSize()
				this.pModelValues.setSelected( \
					( ( DEMath.clamp( value.toFloat(), minValue, maxValue ) \
						- minValue ) / valueStep + 0.5 ) cast int )
				
			case ModuleParameterType.selection
				this.pModelValues.setSelected( DEMath.max( this.pModelValues.indexOf( \
					this.pModelValues.find( block SelectionEntry each
						return each.getValue().equals( value )
					end ) ), 0 ) )
			end
			
			this.pModelSelectedValue.setText( ( this.pModelValues.getAt( \
				this.pModelValues.getSelected() ) cast SelectionEntry ).getDisplayName() )
		end
		
		/** \brief Apply parameter changes. */
		public func void applyChanges()
			var String oldValue = this.pEMPSystem.getWrapper().getParameterValue( this.pParameter.getName() )
			var String newValue = ( this.pModelValues.getAt( \
				this.pModelValues.getSelected() ) cast SelectionEntry ).getValue()
			if not newValue.equals( oldValue )
				this.pEMPSystem.getWrapper().setParameterValue( this.pParameter.getName(), newValue )
			end
		end
	end
	
	/** \brief Mouse listener display parameter info on clicking. */
	public class ClickShowInfo extends DefaultMouseListener
		private var ModuleParameter pParameter
		private var EMPSystem pEMPSystem
		
		/** \brief Create listener. */
		public func new( ModuleParameter parameter, EMPSystem empSystem )
			this.pParameter = parameter
			this.pEMPSystem = empSystem
		end
		
		/** \brief Mouse button has been pressed. */
		public func void onButtonPress( MouseEvent event )
			this.pEMPSystem.showParameterInfo( this.pParameter )
		end
	end
	
	/** \brief Display parameter info on obtaining focus. */
	public class FocusShowInfo extends DefaultFocusListener
		private var ModuleParameter pParameter
		private var EMPSystem pEMPSystem
		
		/** \brief Create listener. */
		public func new( ModuleParameter parameter, EMPSystem empSystem )
			this.pParameter = parameter
			this.pEMPSystem = empSystem
		end
		
		/** \brief Widget received focus. */
		public func void onFocusReceived( FocusEvent event )
			this.pEMPSystem.showParameterInfo( this.pParameter )
		end
	end
	
	
	
	private var SysParamWrapper pWrapper
	private var Panel pPanelParameters
	private var DefaultTextModel pModelInfo
	
	
	
	/** \brief Create edit module parameters panel. */
	public func new( SysParamWrapper wrapper )
		this.pWrapper = wrapper
		this.createContent()
	end
	
	/** \brief Dispose of widget. */
	public func void dispose()
		this.pPanelParameters = null
		this.pModelInfo = null
		super.dispose()
	end
	
	
	
	/** \brief System parameter wrapper. */
	public func SysParamWrapper getWrapper()
		return this.pWrapper
	end
	
	
	
	/** \brief Rebuild parameters list. */
	public func void rebuildParametersList( bool withAdvanced )
		this.pPanelParameters.runWhileBlockingLayout( block
			var int i, count = this.pWrapper.getParameterCount()
			var Array parameters = Array.new()
			
			for i = 0 to count
				var ModuleParameter parameter = this.pWrapper.getParameterAt( i )
				
				select parameter.getCategory()
				case ModuleParameterCategory.basic
					parameters.add( parameter )
					
				case ModuleParameterCategory.advanced
					if withAdvanced
						parameters.add( parameter )
					end
				end
			end
			
			parameters.sort( block ModuleParameter a, ModuleParameter b
				return a.getName().compare( b.getName() )
			end )
			
			this.pPanelParameters.removeAllWidgets()
			
			parameters.forEach( block ModuleParameter each
				this.pPanelParameters.addWidget( this.createNameWidget( each ) )
				this.pPanelParameters.addWidget( this.createEditWidget( each ) )
			end )
		end )
		this.pPanelParameters.doLayoutIfBlocked()
	end
	
	/** \brief Reset parameter changes. */
	public func void resetChanges()
		this.pPanelParameters.runWhileBlockingLayout( block
			this.pPanelParameters.forEachWidget( block Widget each
				if each castable ParameterValueEditor
					( each cast ParameterValueEditor ).resetChanges()
				end
			end )
		end )
	end
	
	/** \brief Apply parameter changes. */
	public func void applyChanges()
		this.pPanelParameters.runWhileBlockingLayout( block
			this.pPanelParameters.forEachWidget( block Widget each
				if each castable ParameterValueEditor
					( each cast ParameterValueEditor ).applyChanges()
				end
			end )
		end )
	end
	
	/** \brief Show module parameter information. */
	public func void showParameterInfo( ModuleParameter parameter )
		var String text = parameter.getDescription()
		
		if parameter.getType() == ModuleParameterType.selection
			var int i, count = parameter.getSelectionEntryCount()
			
			for i = 0 to count
				text = text + "\n\n" + parameter.getSelectionEntryDisplayNameAt( i ) \
					+ ": " + parameter.getSelectionEntryDescriptionAt( i )
			end
		end
		
		this.pModelInfo.setText( text )
	end
	
	
	
	/** \brief Create content with a ScrollPanel and FormLayout. */
	protected func void createContent()
		this.runWhileBlockingLayout( block
			this.setLayout( BorderLayout.new( 5 ) )
			this.setDesignerSelector( "Panel.EMPSystem.Content" )
			
			this.pPanelParameters = Panel.new()
			this.pPanelParameters.setLayout( FormLayout.new( true, 20, 2 ) )
			this.pPanelParameters.setDesignerSelector( "Panel.EMPSystem.Parameters" )
			var Viewport viewport = Viewport.new( this.pPanelParameters, BoxLayout.new( LayoutAxis.y ) )
			this.addWidget( ScrollPanel.new( viewport, ScrollPanel.Policy.hidden, \
				ScrollPanel.Policy.visible ), BorderLayout.Area.content )
			
			this.pModelInfo = DefaultTextModel.new()
			
			var TextArea textArea = TextArea.new( this.pModelInfo )
			textArea.setReadOnly( true )
			textArea.setRowCount( 5 )
			textArea.setDesignerSelector( "TextArea.EMPSystem.ParameterInfo" )
			this.addWidget( ScrollPanel.new( textArea, ScrollPanel.Policy.hidden, \
				ScrollPanel.Policy.visible ), BorderLayout.Area.bottom )
		end )
	end
	
	/** \brief Create name widget for parameter. */
	protected func Widget createNameWidget( ModuleParameter parameter )
		var String name = parameter.getDisplayName()
		if name.empty()
			name = parameter.getName()
		end
		
		var Label label = Label.new( name, "Label.EMPSystem.Name" )
		label.addMouseListener( ClickShowInfo.new( parameter, this ) )
		label.addMouseListener( ParentWheelActionListener.new() )
		return label
	end
	
	/** \brief Create edit widget for parameter. */
	protected func Widget createEditWidget( ModuleParameter parameter )
		select parameter.getType()
		case ModuleParameterType.boolean
			return this.createEditWidgetBoolean( parameter )
			
		case ModuleParameterType.numeric
			return this.createEditWidgetNumeric( parameter )
			
		case ModuleParameterType.ranged
			return this.createEditWidgetRanged( parameter )
			
		case ModuleParameterType.string
			return this.createEditWidgetString( parameter )
			
		case ModuleParameterType.selection
			return this.createEditWidgetSelection( parameter )
			
		else
			return this.createEditWidgetString( parameter )
		end
	end
	
	/** \brief Create widget to edit parameter as string. */
	protected func Widget createEditWidgetString( ModuleParameter parameter )
		var PVETextField widget = PVETextField.new( this.pWrapper, parameter )
		widget.addFocusListener( FocusShowInfo.new( parameter, this ) )
		return widget
	end
	
	/** \brief Create widget to edit parameter as numeric. */
	protected func Widget createEditWidgetNumeric( ModuleParameter parameter )
		var PVETextField widget = PVETextField.new( this.pWrapper, parameter )
		widget.setValidator( SimpleTextValidator.new( 12, SimpleTextValidator.CharacterClass.number ) )
		widget.addFocusListener( FocusShowInfo.new( parameter, this ) )
		return widget
	end
	
	/** \brief Create widget to edit parameter as boolean. */
	protected func Widget createEditWidgetBoolean( ModuleParameter parameter )
		var PVECheckBox widget = PVECheckBox.new( this.pWrapper, parameter )
		widget.addFocusListener( FocusShowInfo.new( parameter, this ) )
		return widget
	end
	
	/** \brief Create widget to edit parameter as ranged. */
	protected func Widget createEditWidgetRanged( ModuleParameter parameter )
		var PVECycleValue widget = PVECycleValue.new( this, parameter )
		var FocusShowInfo showInfo = FocusShowInfo.new( parameter, this )
		widget.getButtonPrev().addFocusListener( showInfo )
		widget.getButtonNext().addFocusListener( showInfo )
		widget.getLabelValue().addMouseListener( ClickShowInfo.new( parameter, this ) )
		return widget
	end
	
	/** \brief Create widget to edit parameter as selection. */
	protected func Widget createEditWidgetSelection( ModuleParameter parameter )
		var PVECycleValue widget = PVECycleValue.new( this, parameter )
		var FocusShowInfo showInfo = FocusShowInfo.new( parameter, this )
		widget.getButtonPrev().addFocusListener( showInfo )
		widget.getButtonNext().addFocusListener( showInfo )
		widget.getLabelValue().addMouseListener( ClickShowInfo.new( parameter, this ) )
		return widget
	end
end
