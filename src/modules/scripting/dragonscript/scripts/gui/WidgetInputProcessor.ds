/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */


namespace Dragengine.Gui

pin Dragengine.Gui.Events
pin Dragengine.Utils



/**
 * \brief Forward input event to widget.
 */
class WidgetInputProcessor extends DefaultInputProcessor
	var Widget pWidget
	
	
	
	/** \brief Create input processor. */
	func new(Widget widget)
		setWidget(widget)
	end
	
	
	
	/**
	 * \brief Widget to send input event to.
	 * \version 1.5
	 */
	func Widget getWidget()
		return pWidget
	end
	
	/**
	 * \brief Set widget to send input event to.
	 * \version 1.5
	 */
	func void setWidget(Widget widget)
		if widget == null
			throw EInvalidParam.new()
		end
		pWidget = widget
	end
	
	
	
	/** \brief Process input event. */
	func void inputEvent(InputEvent event)
		select event.getType()
		case InputEventType.keyPress
			pWidget.processEvent(KeyEvent.new(pWidget, KeyEvent.idKeyPressed,\
				event.getKeyCode(), event.getState(), event.getKeyChar(),\
				event.getSource(), event.getDevice(), event.getCode()))
			
		case InputEventType.keyRelease
			pWidget.processEvent(KeyEvent.new(pWidget, KeyEvent.idKeyReleased,\
				event.getKeyCode(), event.getState(), event.getKeyChar(),\
				event.getSource(), event.getDevice(), event.getCode()))
			
		case InputEventType.mousePress
			pWidget.processEvent(MouseEvent.new(pWidget, MouseEvent.idMousePressed,\
				event.getCode(), event.getState(), event.getSource(), event.getDevice()))
			
		case InputEventType.mouseRelease
			pWidget.processEvent(MouseEvent.new(pWidget, MouseEvent.idMouseReleased,\
				event.getCode(), event.getState(), event.getSource(), event.getDevice()))
			
		case InputEventType.mouseMove
			pWidget.processEvent(MouseEvent.new(pWidget, MouseEvent.idMouseMoved,\
				event.getCode(), event.getState(), Point.new(event.getX(), event.getY()),\
				event.getSource(), event.getDevice()))
			
		case InputEventType.mouseWheel
			pWidget.processEvent(MouseEvent.new(pWidget, MouseEvent.idMouseWheeled,\
				event.getCode(), event.getState(), Point.new(event.getX(), event.getY()),\
				event.getSource(), event.getDevice()))
			
		case InputEventType.axisMove
			pWidget.processEvent(GamepadEvent.new(pWidget, GamepadEvent.idGamepadAxisMoved,\
				event.getSource(), event.getDevice(), event.getCode(),\
				event.getState(), event.getValue()))
			
		case InputEventType.buttonPress
			pWidget.processEvent(GamepadEvent.new(pWidget, GamepadEvent.idGamepadButtonPressed,\
				event.getSource(), event.getDevice(), event.getCode(), event.getState()))
			
		case InputEventType.buttonRelease
			pWidget.processEvent(GamepadEvent.new(pWidget, GamepadEvent.idGamepadButtonReleased,\
				event.getSource(), event.getDevice(), event.getCode(), event.getState()))
		end
	end
end
