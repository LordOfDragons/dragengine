/* 
 * Drag[en]gine DragonScript Script Module
 *
 * Copyright (C) 2020, Roland Pl√ºss (roland@rptd.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */


namespace Dragengine.Gui

pin Dragengine.Gui.Events
pin Dragengine.Utils



/**
 * \brief Forward input event to widget.
 */
class WidgetInputProcessor extends DefaultInputProcessor
	var Widget pWidget
	
	
	
	/** \brief Create input processor. */
	func new(Widget widget)
		setWidget(widget)
	end
	
	
	
	/**
	 * \brief Widget to send input event to.
	 * \version 1.5
	 */
	func Widget getWidget()
		return pWidget
	end
	
	/**
	 * \brief Set widget to send input event to.
	 * \version 1.5
	 */
	func void setWidget(Widget widget)
		if widget == null
			throw EInvalidParam.new()
		end
		pWidget = widget
	end
	
	
	
	/** \brief Process input event. */
	func void inputEvent(InputEvent event)
		select event.getType()
		case InputEventType.keyPress
			pWidget.processEvent(KeyEvent.new(pWidget, KeyEvent.idKeyPressed,\
				event.getKeyCode(), event.getState(), event.getKeyChar(),\
				event.getSource(), event.getDevice(), event.getCode()))
			
		case InputEventType.keyRelease
			pWidget.processEvent(KeyEvent.new(pWidget, KeyEvent.idKeyReleased,\
				event.getKeyCode(), event.getState(), event.getKeyChar(),\
				event.getSource(), event.getDevice(), event.getCode()))
			
		case InputEventType.mousePress
			pWidget.processEvent(MouseEvent.new(pWidget, MouseEvent.idMousePressed,\
				event.getCode(), event.getState(), event.getSource(), event.getDevice()))
			
		case InputEventType.mouseRelease
			pWidget.processEvent(MouseEvent.new(pWidget, MouseEvent.idMouseReleased,\
				event.getCode(), event.getState(), event.getSource(), event.getDevice()))
			
		case InputEventType.mouseMove
			pWidget.processEvent(MouseEvent.new(pWidget, MouseEvent.idMouseMoved,\
				event.getCode(), event.getState(), Point.new(event.getX(), event.getY()),\
				event.getSource(), event.getDevice()))
			
		case InputEventType.mouseWheel
			pWidget.processEvent(MouseEvent.new(pWidget, MouseEvent.idMouseWheeled,\
				event.getCode(), event.getState(), Point.new(event.getX(), event.getY()),\
				event.getSource(), event.getDevice()))
			
		case InputEventType.axisMove
			pWidget.processEvent(GamepadEvent.new(pWidget, GamepadEvent.idGamepadAxisMoved,\
				event.getSource(), event.getDevice(), event.getCode(),\
				event.getState(), event.getValue()))
			
		case InputEventType.buttonPress
			pWidget.processEvent(GamepadEvent.new(pWidget, GamepadEvent.idGamepadButtonPressed,\
				event.getSource(), event.getDevice(), event.getCode(), event.getState()))
			
		case InputEventType.buttonRelease
			pWidget.processEvent(GamepadEvent.new(pWidget, GamepadEvent.idGamepadButtonReleased,\
				event.getSource(), event.getDevice(), event.getCode(), event.getState()))
		end
	end
end
