/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */


namespace Dragengine.Gui

pin Dragengine.Gui.Events
pin Dragengine.Scenery


/**
 * \brief Display image.
 */
class DisplayImage extends Widget
	var CanvasImage pCanvasImage
	var RepeatMode pRepeatMode
	var Image pImage
	var bool pProtectImageColorTransform
	
	
	
	/** \brief Create display image widget. */
	func new() this(null, RepeatMode.once)
	end
	
	func new(Image image) this(image, RepeatMode.once)
	end
	
	func new(Image image, RepeatMode repeatMode)
		pRepeatMode = repeatMode
		pImage = image
		pProtectImageColorTransform = false
		
		pCanvasImage = CanvasImage.new()
		pCanvasImage.setImage(image)
		getCanvasContent().addCanvas(pCanvasImage)
		
		updateCanvasImage()
		
		setDesignerSelector("Image")
	end
	
	func new(Image image, String designerSelector) this(image)
		setDesignerSelector(designerSelector)
	end
	
	func new(Image image, RepeatMode repeatMode, String designerSelector) this(image, repeatMode)
		setDesignerSelector(designerSelector)
	end
	
	
	
	/** \brief Image to display or \em null if not set. */
	func Image getImage()
		return pImage
	end
	
	/** \brief Set image to display. */
	func void setImage(Image image)
		if pImage == image
			return
		end
		
		var Image oldImage = pImage
		pImage = image
		
		if isMinimumSizeSet()
			// if the minimum size is set no layout is required since the result is the same
			pCanvasImage.setImage(image)
			updateCanvasImage()
			return
		end
		
		var Point oldSize
		if oldImage != null
			oldSize = oldImage.getSize()
		end
		
		pCanvasImage.setImage(image)
		
		var Point newSize
		if image != null
			newSize = image.getSize()
		end
		
		if newSize == null or not newSize.equals(oldSize)
			// layout parent only if the old and new image size differ or if the old or new
			// image is null. if size is equal the minimum size is also equal and layouting
			// results in the same
			layoutParent()
			updateCanvasImage()
		end
	end
	
	/** \brief Repeat mode. */
	func RepeatMode getRepeatMode()
		return pRepeatMode
	end
	
	/**
	 * \brief Set repeat mode.
	 * \details Has to be one of REPEAT_* .
	 */
	func void setRepeatMode(RepeatMode repeatMode)
		if repeatMode == pRepeatMode
			return
		end
		
		pRepeatMode = repeatMode
		
		updateCanvasImage()
	end
	
	/** \brief Image color transform. */
	func ColorMatrix getImageColorTransform()
		return pCanvasImage.getColorTransform()
	end
	
	/** \brief Set color transformation. */
	func void setImageColorTransform(ColorMatrix transform)
		pCanvasImage.setColorTransform(transform)
	end
	
	/** \brief Protect custom set image color transform. */
	func bool getProtectImageColorTransform()
		return pProtectImageColorTransform
	end
	
	/** \brief Set protect custom set image color transform. */
	func void setProtectImageColorTransform(bool protect)
		pProtectImageColorTransform = protect
	end
	
	
	
	/** \brief Minimal size of widget. */
	func Point getMinimumSize()
		if pImage == null or isMinimumSizeSet()
			return super.getMinimumSize()
		end
		/*if pRepeatMode == RepeatMode.stretch or pRepeatMode == RepeatMode.stretchRatio
			return Point.new()
		end*/
		return getPadding().getSize() + pImage.getSize()
	end
	
	
	
	/** \brief Image canvas. */
	protected func CanvasImage getCanvasImage()
		return pCanvasImage
	end
	
	
	
	/**
	 * \brief State changed.
	 * \details Sends event to listeners.
	 */
	func void onStateChanged(StateChangeEvent event)
		super.onStateChanged(event)
		updateCanvasImage()
	end
	
	/** \brief Padding changed. */
	func void onPaddingChanged()
		updateCanvasImage()
	end
	
	
	
	/** Update canvas image. */
	func void updateCanvasImage()
		if pImage == null
			return
		end
		
		var BorderSize padding = getPadding()
		var Point size = Point.new().largest(getSize() - padding.getSize())
		var Point position = Point.new(padding.getLeft(), padding.getTop())
		
		select pRepeatMode
		case RepeatMode.once
			pCanvasImage.setRepeatX(1)
			pCanvasImage.setRepeatY(1)
			pCanvasImage.setPosition(position)
			pCanvasImage.setSize(pImage.getSize())
			
		case RepeatMode.stretch
			pCanvasImage.setRepeatX(1)
			pCanvasImage.setRepeatY(1)
			pCanvasImage.setPosition(position)
			pCanvasImage.setSize(size)
			
		case RepeatMode.tileX
			var int imageWidth = pImage.getWidth()
			var int imageHeight = pImage.getHeight()
			var int repeatX = DEMath.max(size.getX() - 1, 0) / imageWidth + 1
			pCanvasImage.setRepeatX(repeatX)
			pCanvasImage.setRepeatY(1)
			pCanvasImage.setPosition(position)
			pCanvasImage.setSize(Point.new(imageWidth * repeatX, imageHeight))
			
		case RepeatMode.tileY
			var int imageWidth = pImage.getWidth()
			var int imageHeight = pImage.getHeight()
			var int repeatY = DEMath.max(size.getY() - 1, 0) / imageHeight + 1
			pCanvasImage.setRepeatX(1)
			pCanvasImage.setRepeatY(repeatY)
			pCanvasImage.setPosition(position)
			pCanvasImage.setSize(Point.new(imageWidth, imageHeight * repeatY))
			
		case RepeatMode.tile
			var int imageWidth = pImage.getWidth()
			var int imageHeight = pImage.getHeight()
			var int repeatX = DEMath.max(size.getX() - 1, 0) / imageWidth + 1
			var int repeatY = DEMath.max(size.getY() - 1, 0) / imageHeight + 1
			pCanvasImage.setRepeatX(repeatX)
			pCanvasImage.setRepeatY(repeatY)
			pCanvasImage.setPosition(position)
			pCanvasImage.setSize(Point.new(imageWidth * repeatX, imageHeight * repeatY))
			
		case RepeatMode.center
			pCanvasImage.setRepeatX(1)
			pCanvasImage.setRepeatY(1)
			pCanvasImage.setPosition(position + (size - pImage.getSize()) / 2)
			pCanvasImage.setSize(pImage.getSize())
			
		case RepeatMode.stretchRatio
			var Point imageSize = pImage.getSize()
			var Point newSize = size
			if imageSize > Point.new()
				var int stretched = imageSize.getY() * size.getX() / imageSize.getX()
				if stretched <= size.getY()
					newSize = Point.new(size.getX(), stretched)
					
				else
					stretched = imageSize.getX() * size.getY() / imageSize.getY()
					newSize = Point.new(stretched, size.getY())
				end
			end
			
			pCanvasImage.setRepeatX(1)
			pCanvasImage.setRepeatY(1)
			pCanvasImage.setPosition(position + (size - newSize) / 2)
			pCanvasImage.setSize(newSize)
		end
	end
	
	
	
	/** \brief Size changed. */
	func void onResize(WidgetEvent event)
		super.onResize(event)
		updateCanvasImage()
	end
end
