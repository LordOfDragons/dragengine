/* 
 * Drag[en]gine DragonScript Script Module
 *
 * Copyright (C) 2020, Roland Pl√ºss (roland@rptd.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */


namespace Dragengine.Gui

pin Dragengine.Gui.Designers


/**
 * \brief Gui theme.
 * 
 * Contains widget designers and some global parameters to design widgets. Gui themes are
 * shared both while loading and while assigning to widgets. Do not directly modify gui
 * themes attached to widgets or received from LoadGuiTheme. If you need to modify them
 * create a copy first using copy constructor.
 */
class GuiTheme
	/** \brief Widget font. */
	private var Font pFontWidget
	
	/**
	 * \brief Widget designers.
	 * 
	 * Dictionary with String key and WidgetDesigner value. Do not edit directly.
	 * Widget designers are shared across gui themes and widgets for efficiency.
	 */
	private var Dictionary pWidgetDesigners
	
	/** \brief Named gui themes as dictionary with string key and GuiTheme value. */
	private var Dictionary pNamedGuiThemes
	
	
	
	/** \brief Creates default gui theme. */
	public func new()
		pWidgetDesigners = Dictionary.new()
		pWidgetDesigners.setAt("Button", DefaultButtonDesigner.new())
		pWidgetDesigners.setAt("ButtonWidget", DefaultButtonWidgetDesigner.new())
		pWidgetDesigners.setAt("CheckBox", DefaultCheckBoxDesigner.new())
		pWidgetDesigners.setAt("ComboBox", DefaultComboBoxDesigner.new())
		pWidgetDesigners.setAt("Desktop", DefaultWidgetDesigner.new())
		pWidgetDesigners.setAt("Image", DefaultImageDesigner.new())
		pWidgetDesigners.setAt("Label", DefaultLabelDesigner.new())
		pWidgetDesigners.setAt("ListBox", DefaultWidgetDesigner.new())
		pWidgetDesigners.setAt("OptionBox", DefaultOptionBoxDesigner.new())
		pWidgetDesigners.setAt("PlayerChoiceEntry", DefaultWidgetDesigner.new())
		pWidgetDesigners.setAt("ProgressBar", DefaultProgressBarDesigner.new())
		pWidgetDesigners.setAt("ScrollBar", DefaultScrollBarDesigner.new())
		pWidgetDesigners.setAt("Slider", DefaultSliderDesigner.new())
		pWidgetDesigners.setAt("SpinButton", DefaultSpinButtonDesigner.new())
		pWidgetDesigners.setAt("TextArea", DefaultWidgetDesigner.new())
		pWidgetDesigners.setAt("TextField", DefaultWidgetDesigner.new())
		pWidgetDesigners.setAt("Video", DefaultVideoDesigner.new())
		pWidgetDesigners.setAt("Window", DefaultWindowDesigner.new())
		pWidgetDesigners.setAt("MenuItemToggle", DefaultMenuItemToggleDesigner.new())
		pWidgetDesigners.setAt("MenuItemSubMenu", DefaultMenuItemSubMenuDesigner.new())
		
		pNamedGuiThemes = Dictionary.new()
	end
	
	/**
	 * \brief Create copy of gui theme.
	 * 
	 * Widget designers are shared across copied gui themes. If you need to modify
	 * a widget designer using setParameter() you have to call copyDesigner()
	 * first and replace the entry in this dictionary.
	 */
	public func new(GuiTheme guitheme)
		pFontWidget = guitheme.pFontWidget
		
		pWidgetDesigners = Dictionary.new(guitheme.pWidgetDesigners)
		pNamedGuiThemes = Dictionary.new(guitheme.pNamedGuiThemes)
	end
	
	
	
	/** \brief Font for widgets. */
	public func Font getWidgetFont()
		return pFontWidget
	end
	
	/** \brief Set font for widgets. */
	public func void setWidgetFont(Font font)
		pFontWidget = font
	end
	
	
	
	/**
	 * \brief Widget designer matching selector.
	 * 
	 * Selector composes of alphanumeric identifier. A chain of identifiers can be
	 * specified separated by periods. If a chain is defined the full chain is first
	 * checked to find the designer. If not found the right most identifier is stripped
	 * and the remaining chain checked for a match. The first match is used. This allows
	 * to add optional quallifier identifers at the end of the chain for future use
	 * while still matching broader designers in the mean time.
	 * 
	 * As rule of thumb selector is the widget class name (for example Button) with
	 * optional qualifiers appended if necessary.
	 * 
	 * Returned widget designer is shared. Do not modify directly. If you need to modify
	 * using setParameter() call first copyDesigner().
	 */
	public func WidgetDesigner getWidgetDesigner(String selector)
		var WidgetDesigner designer
		var int index
		
		while not selector.empty()
			designer = pWidgetDesigners.getAt(selector, null) cast WidgetDesigner
			if designer != null
				return designer
			end
			
			index = selector.findReverse('.')
			if index == -1
				break
			end
			
			selector = selector.substring(0, index)
		end
		
		return null
	end
	
	/** \brief Number of widget designers. */
	public func int getWidgetDesignerCount()
		return pWidgetDesigners.getCount()
	end
	
	/** \brief Set named widget designer. */
	public func WidgetDesigner getNamedWidgetDesigner(String name)
		return pWidgetDesigners.getAt(name) cast WidgetDesigner
	end
	
	/** \brief Set widget designer. */
	public func void setWidgetDesigner(String name, WidgetDesigner designer)
		if name == null or designer == null
			throw EInvalidParam.new()
		end
		pWidgetDesigners.setAt(name, designer)
	end
	
	/**
	 * \brief Visit widget designers with block.
	 * 
	 * First parameter String name. Second parameter WidgetDesigner designer.
	 */
	public func void forEachWidgetDesigner(Block ablock)
		pWidgetDesigners.forEach(ablock)
	end
	
	
	
	/** \brief Number of named gui themes. */
	public func int getNamedGuiThemeCount()
		return pNamedGuiThemes.getCount()
	end
	
	/** \brief Get named gui theme or \em null if absent. */
	public func GuiTheme getNamedGuiTheme(String name)
		return pNamedGuiThemes.getAt(name, null) cast GuiTheme
	end
	
	/** \brief Set named gui theme. */
	public func void setNamedGuiTheme(String name, GuiTheme guitheme)
		if name == null or guitheme == null
			throw EInvalidParam.new()
		end
		pNamedGuiThemes.setAt(name, guitheme)
	end
	
	/** \brief Remove named gui theme. */
	public func void removeNamedGuiTheme(String name)
		pNamedGuiThemes.remove(name)
	end
	
	/** \brief Remove all named gui themes. */
	public func void removeAllNamedGuiThemes()
		pNamedGuiThemes.removeAll()
	end
	
	/** \brief Visit named gui themes with block with parameters String and GuiTheme. */
	public func void forEachNamedGuiTheme(Block ablock)
		pNamedGuiThemes.forEach(ablock)
	end
end
