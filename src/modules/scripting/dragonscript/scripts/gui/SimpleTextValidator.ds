/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */


namespace Dragengine.Gui



/**
 * \brief Simple text validator ensure maximum text length and used characters.
 * 
 * Accepts string only if the length does not exceeded a maximum number and all characters
 * in the string match a specific set of characters. A few basic character sets are provided
 * which are often required.
 * 
 * Once created the text validator is immutable.
 */
class SimpleTextValidator implements TextValidator
	/** \brief Character classes. */
	enum CharacterClass
		/** \brief All characters allowed. */
		all
		
		/** \brief Only digits allowed. */
		digits
		
		/** \brief Only digits, dot and minus allowed. */
		number
		
		/** \brief Only printable characters allowed. */
		printable
		
		/**
		 * \brief Only digits and dot allowed.
		 * \version 1.7
		 */
		positiveNumber
		
		/**
		 * \brief Only digits and minus allowed.
		 * \version 1.7
		 */
		digitsNegative
	end
	
	
	
	/** \brief Maximum number of characters allowed. */
	private var int pMaxCharCount
	
	/** \brief Character class to accept. */
	private var CharacterClass pCharacterClass
	
	
	
	/**
	 * \brief Create simple text validator.
	 * \param maxCharCount Maximum number of characters to allow.
	 * \param characterClass Character class to allow.
	 * \throws EInvalidParam maxCharCount is less than 1.
	 */
	public func new(int maxCharCount, CharacterClass characterClass)
		if maxCharCount < 1
			throw EInvalidParam.new("maxCharCount less than 1")
		end
		pMaxCharCount = maxCharCount
		pCharacterClass = characterClass
	end
	
	
	
	/** \brief Maximum number of characters allowed. */
	public func int getMaxCharCount()
		return pMaxCharCount
	end
	
	/** \brief Character class to accept. */
	public func CharacterClass getCharacterClass()
		return pCharacterClass
	end
	
	
	
	/**
	 * \brief Text is valid.
	 */
	public func bool validates(String text)
		var int length = text.getLength()
		if length > pMaxCharCount
			return false
		end
		
		var int i, c
		select pCharacterClass
		case CharacterClass.all
			
		case CharacterClass.digits
			for i = 0 to length
				c = text.getAt(i)
				if c < '0' or c > '9'
					return false
				end
			end
			
		case CharacterClass.digitsNegative
			for i = 0 to length
				c = text.getAt(i)
				if not ((c >= '0' and c <= '9') or c == '-')
					return false
				end
			end
			
		case CharacterClass.number
			for i = 0 to length
				c = text.getAt(i)
				if not ((c >= '0' and c <= '9') or c == '-' or c == '.')
					return false
				end
			end
			
		case CharacterClass.positiveNumber
			for i = 0 to length
				c = text.getAt(i)
				if not ((c >= '0' and c <= '9') or c == '.')
					return false
				end
			end
			
		case CharacterClass.printable
			for i = 0 to length
				c = text.getAt(i)
				if c < 32
					return false
				end
			end
		end
		
		return true
	end
end
