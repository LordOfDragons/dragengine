/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */


namespace Dragengine.Gui

pin Dragengine.Gui.Borders
pin Dragengine.Gui.Events
pin Dragengine.Gui.Layouts
pin Dragengine.Gui.Decorations


/**
 * \brief Model window overlays another window blocking this window until closed.
 * 
 * Modal windows are mainly used for dialog type windows asking input from the
 * user or showing short information to acknowledge. Modal windows block another
 * window as long as they are visible. The blocked window is disabled and a color
 * matrix applied to tone down the entire window giving a visual cue to the user
 * the window is blocked.
 * 
 * This is the base class of modal windows implementing the required behavior.
 * For convenience WindowDialog extends WindowModal with typical dialog building
 * and input returning support. Extend WindowModal for all other situations.
 * 
 * The modal window is shown without blocking command flow. To react to the modal
 * window closing add an WindowListener catching WindowEvent.idWindowClosing
 * event or overwrite onClosing() if subclassing.
 */
class WindowModal extends Window
	/** \brief Placement. */
	enum Placement
		/** \brief Show window at current position without centering. */
		none
		
		/** \brief Show window centered at current window position. */
		position
		
		/** \brief Show window centered over blocked window. */
		window
		
		/** \brief Show window centered over desktop. */
		desktop
		
		/** \brief Show window centered over mouse cursor. */
		mouseCursor
	end
	
	
	
	/** \brief Window this window is blocking. */
	var Window pBlockWindow
	
	
	
	/**
	 * \brief Create modal window.
	 * 
	 * Window is initially hidden. Call one of the show() methods to make it visible.
	 */
	func new()
		setVisible(false)
		setCanMaximize(false)
		setCanMinimize(false)
		setLayout(FlowLayout.new(LayoutAxis.y))
	end
	
	/** \brief Create window with the given geometry. */
	func new(int x, int y, int width, int height) super(x, y, width, height)
		setCanMaximize(false)
		setCanMinimize(false)
		setLayout(FlowLayout.new(LayoutAxis.y))
	end
	
	/** \brief Dispose of window. */
	func void dispose()
		pBlockWindow = null
		super.dispose()
	end
	
	
	
	/** \brief Window this window is blocking or \em null if not shown. */
	func Window getBlockWindow()
		return pBlockWindow
	end
	
	/**
	 * \brief Calculate window position.
	 * \param blockWindow Refertence window for position calculation.
	 * \param placement Placement of the window.
	 */
	func Point calcWindowPosition(Window blockWindow, Placement placement)
		select placement
		case Placement.window
			return blockWindow.getPosition() + (blockWindow.getSize() - getSize()) / 2
			
		case Placement.desktop
			return (blockWindow.getDesktop().getSize() - getSize()) / 2
			
		case Placement.mouseCursor
			return blockWindow.getDesktop().getMouseLocation() - getSize() / 2
			
		case Placement.position
			return getPosition() - getSize() / 2
			
		case Placement.none
			return getPosition()
			
		else
			throw EInvalidParam.new()
		end
	end
	
	
	
	/**
	 * \brief Show window fit to content and block window.
	 * \details Window is centered over blocked window.
	 * \param blockWindow Window to block while modal window is shown.
	 * \param placement Placement of the window.
	 */
	func void show(Window blockWindow, Placement placement)
		show(blockWindow, true, placement)
	end
	
	/**
	 * \brief Show window and block window.
	 * \details Window is centered over blocked window.
	 * \param blockWindow Window to block while modal window is shown.
	 * \param fitSize Fit window to content size
	 * \param placement Placement of the window.
	 */
	func void show(Window blockWindow, bool fitSize, Placement placement)
		if blockWindow == null
			throw ENullPointer.new("blockWindow")
		end
		if blockWindow.getBlockingWindow() != null
			throw EInvalidParam.new("blockWindow is already blocked by "\
				+ blockWindow.getBlockingWindow().className())
		end
		
		var Desktop desktop = blockWindow.getDesktop()
		if desktop == null
			throw ENullPointer.new("blockWindow.getDesktop()")
		end
		
		desktop.addWindow(this) // has to come first otherwise miminimum size can be wrong
		
		// set block windows has to come after adding the window to the desktop. this is required
		// since setBlockingWindow can trigger moveWindow() calls which expect blocking and
		// blocked windows to exist in the desktop.
		pBlockWindow = blockWindow
		blockWindow.setBlockingWindow(this)
		
		if fitSize
			fitToContent()
		end
		
		setPosition(calcWindowPosition(blockWindow, placement))
		
		setVisible(true)
		moveToTop()
	end
	
	/**
	 * \brief Show window at position and block window.
	 * \details Window is centered over blocked window.
	 * \param blockWindow Window to block while modal window is shown.
	 * \param position Position to show window at.
	 */
	func void showAt(Window blockWindow, Point position)
		if blockWindow == null
			throw EInvalidParam.new()
		end
		
		var Desktop desktop = blockWindow.getDesktop()
		if desktop == null
			throw EInvalidParam.new()
		end
		
		desktop.addWindow(this)
		
		// see show() function above for the reason why this is located after addWindow()
		pBlockWindow = blockWindow
		blockWindow.setBlockingWindow(this)
		
		setPosition(position)
		setVisible(true)
		moveToTop()
	end
	
	
	
	/**
	 * \brief Close window.
	 * \details Unblocks window.
	 */
	func void close()
		if pBlockWindow != null
			pBlockWindow.setBlockingWindow(null)
			pBlockWindow = null
		end
		
		super.close()
	end
	
	
	
	/**
	 * \brief Move window to the top.
	 * \details Ensure blocked window is moved right underneath.
	 */
	func void moveToTop()
		if pBlockWindow != null
			pBlockWindow.moveToTop()
			
		else
			super.moveToTop()
		end
	end
	
	/**
	 * \brief Move window to the bottom.
	 * \details Ensure blocked window is moved right underneath.
	 */
	func void moveToBottom()
		if pBlockWindow != null
			pBlockWindow.moveToBottom()
			
		else
			super.moveToBottom()
		end
	end
	
	/**
	 * \brief Move window right above the given window.
	 * \details Ensure blocked window is moved right underneath.
	 */
	func void moveAbove(Window window)
		if pBlockWindow != null
			pBlockWindow.moveAbove(window)
			
		else
			super.moveAbove(window)
		end
	end
	
	/**
	 * \brief Move window right below the given window.
	 * \details Ensure blocked window is moved right underneath.
	 */
	func void moveBelow(Window window)
		if pBlockWindow != null
			pBlockWindow.moveBelow(window)
			
		else
			super.moveBelow(window)
		end
	end
	
	/**
	 * \brief Move above block window if present.
	 * 
	 * If window is blocked by another window calls moveAboveBlockWindow() also on this window too.
	 */
	func void moveAboveBlockWindow()
		if pBlockWindow != null
			super.moveAbove(pBlockWindow)
		end
	end
end
