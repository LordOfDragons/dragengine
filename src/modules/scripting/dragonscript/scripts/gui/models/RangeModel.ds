/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */


namespace Dragengine.Gui



/**
 * \brief Value of scrollbar like widgets.
 * 
 * Provides value range, page size and current value. The range model is responsible
 * for checking all constraints are met at all time. These are the constraints:
 * 
 * - minimum_value <= maximum_value
 * - page_size >= 1
 * - value >= minimum_value
 * - value <= maximum_value
 * 
 * If a parameter is changed breaking one or more of these constraints the range model
 * implementor has to adjusted the parameters to fix the constraints.
 * 
 * The increment is used by scroll bars to change the value is the users clicks the
 * scroll buttons.
 */
interface RangeModel
	/** \brief Minimal value. */
	func int getMinimum()
	
	/** \brief Maximum value. */
	func int getMaximum()
	
	/** \brief Size of a page. */
	func int getPageSize()
	
	/** \brief Current value. */
	func int getValue()
	
	/** \brief Increment for changing the value by small increments. */
	func int getIncrement()
	
	/**
	 * \brief Set minimum value.
	 * \details If the constraints would be broken the maximum value is adjusted then
	 *          the current value until the condititions hold again.
	 */
	func void setMinimum( int minimum )
	
	/**
	 * \brief Set maximum value.
	 * \details If the constraints would be broken the maximum value is adjusted then
	 *          the current value until the conditions hold again.
	 */
	func void setMaximum( int maximum )
	
	/**
	 * \brief Set page size.
	 * \brief If the constraints would be broken the current value is adjusted.
	 * \throws EInvalidParam \em pageSize is less than 1.
	 */
	func void setPageSize( int pageSize )
	
	/** \brief Set current value clamped to the range. */
	func void setValue( int value )
	
	/** \brief Set increment for changing the value by small increments. */
	func void setIncrement( int increment )
	
	/**
	 * \brief Set properties.
	 * \details If the constraints would be broken the maximum value is adjusted
	 *          then the current value until the condititions hold again.
	 * \throws EInvalidParam \em pageSize is less than 1.
	 */
	func void setAll( int minimum, int maximum, int pageSize, int value, int increment )
	
	/** \brief Add listener. */
	func void addListener( RangeModelListener listener )
	
	/** \brief Remove listener. */
	func void removeListener( RangeModelListener listener )
end
