/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */


namespace Dragengine.Gui



/**
 * \brief Model for content of list oriented widgets.
 */
interface ListModel
	/** \brief Add modifier. */
	func void addListener(ListModelListener listener)
	
	/** \brief Remove listener. */
	func void removeListener(ListModelListener listener)
	
	/** \brief Number of elements. */
	func int getCount()
	
	/**
	 * \brief Element at index.
	 * \throws EOutOfBounds \em index is less than 0 or larger than or equal to getCount().
	 */
	func Object getAt(int index)
	
	/** \brief Index of element or -1 if absent. */
	func int indexOf(Object element)
	
	/** \brief Element is present. */
	func bool has(Object element)
	
	/**
	 * \brief Notify all that the content of the model in the given range changed.
	 * \param fromIndex Index of first element that changed
	 * \param toIndex Index of last element that changed
	 */
	func void notifyContentChanged(int fromIndex, int toIndex)
	
	/**
	 * \brief Index of the selected element or -1 if there is no selected element.
	 */
	func int getSelected()
	
	/**
	 * \brief Set index of selected element or -1 if none is no selected element.
	 */
	func void setSelected(int index)
end
