/* 
 * Drag[en]gine DragonScript Script Module
 *
 * Copyright (C) 2020, Roland Pl√ºss (roland@rptd.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */


namespace Dragengine.Gui



/**
 * \brief TextModel synchronized against a RangeModel.
 * 
 * Synchronizes text to a RangeModel. If an invalid text is entered the minimum range value
 * is used. If the range model changes the text model is updated and vice-versa. This model
 * is used by TextField to synchronize against a SpinButton. The range model is the master
 * model controlling the text model.
 */
class RangeTextModel extends DefaultTextModel implements RangeModelListener
	/** \brief Range model. */
	private var RangeModel pRangeModel
	
	
	
	/** \brief Create text model linked to range model. */
	public func new(RangeModel rangeModel)
		setRangeModel(rangeModel)
	end
	
	
	
	/** \brief Range model. */
	public func RangeModel getRangeModel()
		return pRangeModel
	end
	
	/** \brief Set range model. */
	public func void setRangeModel(RangeModel rangeModel)
		if rangeModel == pRangeModel
			return
		end
		
		if pRangeModel != null
			pRangeModel.removeListener(this)
		end
		
		pRangeModel = rangeModel
		
		if rangeModel != null
			rangeModel.addListener(this)
			super.setText(pRangeModel.getValue().toString())
		end
	end
	
	
	
	/** \brief Set text. */
	public func void setText(String text)
		// set the range model value. this potentially changes the value. if the value
		// changes our listener will be called which in turn calls super.setText().
		// this will update the text and notify listener. for this reason why we do
		// not call super.setText() here after altering the range model since this
		// would be duplicated
		if pRangeModel != null
			pRangeModel.setValue(text.toInt())
		end
	end
	
	
	
	/** \brief Minimum, maximum or page size changed. */
	public func void rangeChanged(RangeModel rangeModel)
	end
	
	/** \brief Value changed. */
	public func void valueChanged(RangeModel rangeModel)
		super.setText(pRangeModel.getValue().toString())
	end
end
