/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

namespace Dragengine.Gui

/**
 * \brief Model for widgets allowing a user to rate somethig.
 * \version 1.23
 * 
 * Rating is stored as an integer value. If no rating is present the value is null.
 * If not null the value ranges from 0 (lowest rating) to the maximum rating value.
 * 
 * Optionally a list of submitted ratings per rating type can be provided. This can
 * be used by widgets to show the user a break down of how many ratings of a given
 * type have been submitted. This list is stored as a Dictionary with int rating
 * type (key) and float rating count (value).
 */
interface RatingModel
	/**
	 * \brief Count of rating types.
	 * 
	 * The maximum rating value the user can submit is getTypeCount() - 1.
	 */
	func int getTypeCount()
	
	/**
	 * \brief Rating or null.
	 * 
	 * If not null the value is in the range from 0 to getTypeCount() - 1.
	 */
	func Integer getRating()
	
	/**
	 * \brief Set rating or null.
	 * \param rating Rating in the range from 0 to getTypeCount() - 1 or null.
	 */
	func void setRating(Integer rating)
	
	/**
	 * \brief Breakdown of submitted ratings per rating type.
	 * 
	 * Dictionary has the rating type as key (int) and count for this rating type as value
	 * (float). For rating types not present in the dictionary a count of 0 has to be used.
	 */
	func Dictionary getCountsPerType()
	
	/**
	 * \brief Set breakdown of submitted ratings per rating type.
	 * \param countsPerType Dictionary with rating type as key (int) and count for this rating
	 *        type as value (float). For rating types not present in the dictionary a count
	 *        of 0 will be used.
	 */
	func void setCountsPerType(Dictionary countsPerType)
	
	/** \brief Add listener. */
	func void addListener(RatingModelListener listener)
	
	/** \brief Remove listener. */
	func void removeListener(RatingModelListener listener)
end
