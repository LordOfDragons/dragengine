/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */


namespace Dragengine.Gui

pin Dragengine.Gui.Events
pin Dragengine.Gui.Layouts
pin Dragengine.Scenery


/**
 * \brief ToggleModel synchronized against a ListModel containing an object.
 * 
 * Synchronizes toggle state of a ToggleModel with the presence of an object in a ListModel.
 * Typically the object to check presence for is an Enumeration. This allows to use a ListModel
 * to store boolean game states that can be activated or deactivated. Each game state is
 * represented by a constant from an enumeration list. Changeing game states modifies the
 * enumerations present in the list. This class tracks a specific enumeration constants and
 * uses it to toggle a ToggleModel. This way ToggleModel supporting widgets can easily track
 * a ListModel to build UIs in a simple and understandable way.
 * 
 * An example use looks like this:
 * 
 * \code{.ds}
 * // Enumeration representing game states. Multiple enums are possible.
 * enum GameStates
 *    state1
 *    state2
 *    state3
 * end
 * 
 * // List model storing activate states
 * modelStates = DefaultListModel.new()
 * 
 * // set up UI
 * ui.addWidget(Panel.new(FlowLayout.new(LayoutAxis.y), block Panel p
 *    DisplayImage image
 *    
 *    p.addWidget(image = DisplayImage.new(Image.new("/content/ui/state1.png")))
 *    WModifierVisibility.new(TogglePresentModel.new(modelStates, GameStates.state1), image)
 *    
 *    p.addWidget(image = DisplayImage.new(Image.new("/content/ui/state2.png")))
 *    WModifierVisibility.new(TogglePresentModel.new(modelStates, GameStates.state2), image)
 *    
 *    p.addWidget(image = DisplayImage.new(Image.new("/content/ui/state3.png")))
 *    WModifierVisibility.new(TogglePresentModel.new(modelStates, GameStates.state3), image)
 * end))
 * 
 * // Now the game states can be toggle causing the UI to adjust automatically
 * modelStates.add(GameStates.state1) // => image 1 becomes visible
 * modelStates.add(GameStates.state3) // => image 3 becomes visible
 * ...
 * modelStates.remove(GameStates.state3) // => image 3 becomes invisible
 * \endcode
 */
class TogglePresentModel extends DefaultToggleModel implements ListModelListener
	/** \brief Object to track presence of. */
	private var Object pTrackPresence
	
	
	/** \brief Create toggle model synchronized against presence of object in list model. */
	public func new( ListModel listModel, Object trackPresence )
		if listModel == null
			throw ENullPointer.new( "listModel" )
		end
		if trackPresence == null
			throw ENullPointer.new( "trackPresence" )
		end
		
		this.pTrackPresence = trackPresence
		listModel.addListener( this )
		
		this.updateToggleModel( listModel )
	end
	
	
	
	/** \brief Update toggle model. */
	protected func void updateToggleModel( ListModel listModel )
		this.setToggled( listModel.has( this.pTrackPresence ) )
	end
	
	
	
	/** \brief Elements have been added. */
	public func void elementsAdded( ListModel listModel, int fromIndex, int toIndex )
		this.updateToggleModel( listModel )
	end
	
	/** \brief Elements have been removed. */
	public func void elementsRemoved( ListModel listModel, int fromIndex, int toIndex )
		this.updateToggleModel( listModel )
	end
	
	/** \brief Content of the model changed. */
	public func void contentChanged( ListModel listModel, int fromIndex, int toIndex )
		this.updateToggleModel( listModel )
	end
	
	/** \brief Selection in the model changed. */
	public func void selectionChanged( ListModel listModel )
	end
end
