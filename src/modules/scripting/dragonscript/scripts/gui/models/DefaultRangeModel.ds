/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

namespace Dragengine.Gui

/**
 * \brief Value of scrollbar like widgets.
 * 
 * Provides value range, page size and current value. The range model is responsible
 * for checking all constraints are met at all time. These are the constraints:
 * 
 * - minimum_value <= maximum_value
 * - page_size >= 1
 * - value >= minimum_value
 * - value <= maximum_value
 * 
 * If a parameter is changed breaking one or more of these constraints the range model
 * implementor has to adjusted the parameters to fix the constraints.
 * 
 * The increment is used by scroll bars to change the value is the users clicks the
 * scroll buttons.
 */
class DefaultRangeModel implements RangeModel
	private var int pMinimum
	private var int pMaximum
	private var int pPageSize
	private var int pValue
	private var int pIncrement
	private var Array pListeners
	
	
	
	/** \brief Create range model from 0 to 100 with 10 page an 1 increment. */
	public func new() this(0, 100, 10, 0, 1)
	end
	
	/** \brief Create range model with values adjusted to satisfy invariants. */
	public func new(int minimum, int maximum, int pageSize, int value, int increment)
		pMinimum = minimum
		pMaximum = DEMath.max(maximum, minimum)
		pPageSize = DEMath.max(pageSize, 1)
		pValue = DEMath.clamp(value, minimum, maximum)
		pIncrement = DEMath.max(increment, 1)
		pListeners = Array.new()
	end
	
	
	
	/** \brief Minimum value. */
	public func int getMinimum()
		return pMinimum
	end
	
	/**
	 * \brief Set minimum value.
	 * \details If minimum is larger than maximum the maximum is set to the minimum.
	 *          Value is clamped to the range from minimum to maximum.
	 */
	public func void setMinimum(int minimum)
		if minimum == pMinimum
			return
		end
		
		pMinimum = minimum
		pMaximum = DEMath.max(pMaximum, minimum)
		
		var int oldValue = pValue
		pValue = DEMath.clamp(pValue, minimum, pMaximum)
		
		notifyAllRange()
		
		if pValue != oldValue
			notifyAllValue()
		end
	end
	
	/** \brief Maximum value. */
	public func int getMaximum()
		return pMaximum
	end
	
	/**
	 * \brief Set maximum value.
	 * \details If maximum is less than minimum the minimum is set to the maximum.
	 *          Value is clamped to the range from minimum to maximum.
	 */
	public func void setMaximum(int maximum)
		if maximum == pMaximum
			return
		end
		
		pMaximum = maximum
		pMinimum = DEMath.min(pMinimum, maximum)
		
		var int oldValue = pValue
		pValue = DEMath.clamp(pValue, pMinimum, maximum)
		
		notifyAllRange()
		
		if pValue != oldValue
			notifyAllValue()
		end
	end
	
	/** \brief Page size. */
	public func int getPageSize()
		return pPageSize
	end
	
	/**
	 * \brief Set page size.
	 * \details \em pagesize is clamped to 1 or larger.
	 */
	public func void setPageSize(int pageSize)
		pageSize = DEMath.max(pageSize, 1)
		if pageSize == pPageSize
			return
		end
		
		pPageSize = pageSize
		notifyAllRange()
	end
	
	/** \brief Current value. */
	public func int getValue()
		return pValue
	end
	
	/**
	 * \brief Set current value.
	 * \details Value is clamped to the range from minimum to maximum.
	 */
	public func void setValue(int value)
		value = DEMath.clamp(value, pMinimum, pMaximum)
		if value == pValue
			return
		end
		
		pValue = value
		notifyAllValue()
	end
	
	/** \brief Increment for changing the value by small increments. */
	public func int getIncrement()
		return pIncrement
	end
	
	/** \brief Set increment for changing the value by small increments. */
	public func void setIncrement(int increment)
		increment = DEMath.max(increment, 1)
		if increment == pIncrement
			return
		end
		
		pIncrement = increment
		notifyAllRange()
	end
	
	/**
	 * \brief Set all properties.
	 * \details \em maximum is clampted to minimum or larger. \em pageSize is clamped
	 *          to 1 or larger. \em value is clamped to the range from \em minimum
	 *          to \em maximum.
	 */
	public func void setAll(int minimum, int maximum, int pageSize, int value, int increment)
		maximum = DEMath.max(maximum, minimum)
		pageSize = DEMath.max(pageSize, 1)
		value = DEMath.clamp(value, minimum, maximum)
		increment = DEMath.max(increment, 1)
		
		var bool valueUnchanged = value == pValue
		var bool rangeUnchanged = minimum == pMinimum and maximum == pMaximum \
			and pageSize == pPageSize and increment == pIncrement
		
		if rangeUnchanged and valueUnchanged
			return
		end
		
		pMinimum = minimum
		pMaximum = maximum
		pPageSize = pageSize
		pValue = value
		pIncrement = increment
		
		if not rangeUnchanged
			notifyAllRange()
		end
		if not valueUnchanged
			notifyAllValue()
		end
	end
	
	
	
	/**
	 * \brief Add listener.
	 * \throws ENullPointer \em listener is \em null.
	 * \throws EInvalidParam \em listener is present.
	 */
	public func void addListener(RangeModelListener listener)
		if listener == null
			throw ENullPointer.new()
		end
		pListeners.add(listener)
	end
	
	/**
	 * \brief Remove listener.
	 * \throws EInvalidParam \em listener is absent.
	 */
	public func void removeListener(RangeModelListener listener)
		pListeners.remove(listener)
	end
	
	
	
	/** \brief Notify all range properties changed. */
	private func void notifyAllRange()
		pListeners.forEach(block RangeModelListener each
			each.rangeChanged(this)
		end)
	end
	
	/** \brief Notify all value changed. */
	private func void notifyAllValue()
		pListeners.forEach(block RangeModelListener each
			each.valueChanged(this)
		end)
	end
end
