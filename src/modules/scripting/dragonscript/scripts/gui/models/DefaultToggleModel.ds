/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */


namespace Dragengine.Gui



/**
 * \brief Toggle model.
 * 
 * Switches between an activated and deactivated state.
 */
class DefaultToggleModel implements ToggleModel
	private var bool pToggled
	private var Array pListeners
	
	
	
	/** \brief Create toggle model with false toggled state. */
	public func new() this(false)
	end
	
	/** \brief Create toggle model. */
	public func new(bool toggled)
		pToggled = toggled
		pListeners = Array.new()
	end
	
	
	
	/** \brief Get toggled state. */
	public func bool getToggled()
		return pToggled
	end
	
	/** \brief Set toggled state. */
	public func void setToggled(bool toggled)
		if toggled == pToggled
			return
		end
		
		pToggled = toggled
		
		pListeners.forEach(block ToggleModelListener each
			each.toggledChanged(this)
		end)
	end
	
	/** \brief Switch toggled state. */
	public func void toggle()
		setToggled(not pToggled)
	end
	
	
	
	/**
	 * \brief Add listener.
	 * \throws ENullPointer \em listener is \em null.
	 * \throws EInvalidParam \em listener is present.
	 */
	public func void addListener(ToggleModelListener listener)
		if listener == null
			throw ENullPointer.new()
		end
		pListeners.add(listener)
	end
	
	/**
	 * \brief Remove listener.
	 * \throws EInvalidParam \em listener is absent.
	 */
	public func void removeListener(ToggleModelListener listener)
		pListeners.remove(listener)
	end
end
