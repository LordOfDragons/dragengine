/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */


namespace Dragengine.Gui



/**
 * \brief Default implementation of text model.
 */
class DefaultTextModel implements TextModel
	/** \brief Text, */
	private var String pText
	
	/** \brief Listeners */
	private var Array pListeners
	
	
	
	/** \brief Create text model with empty string. */
	public func new()
		this.pText = ""
		this.pListeners = Array.new()
	end
	
	/** \brief Create text model with initial text. */
	public func new( String text )
		if text == null
			throw EInvalidParam.new()
		end
		
		this.pText = text
		this.pListeners = Array.new()
	end
	
	
	
	/** \brief Text. */
	public func String getText()
		return this.pText
	end
	
	/** \brief Set text. */
	public func void setText( String text )
		if text.equals( this.pText )
			return
		end
		
		this.pText = text
		this.notifyTextChanged()
	end
	
	
	
	/** \brief Add listener. */
	public func void addListener( TextModelListener listener )
		if listener == null
			throw EInvalidParam.new()
		end
		this.pListeners.add( listener )
	end
	
	/** \brief Remove listener. */
	public func void removeListener( TextModelListener listener )
		this.pListeners.remove( listener )
	end
	
	
	
	/** \brief Notify all that the text changed. */
	protected func void notifyTextChanged()
		this.pListeners.forEach( block TextModelListener each
			each.textChanged( this )
		end )
	end
end
