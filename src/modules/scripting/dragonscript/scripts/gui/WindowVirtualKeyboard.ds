/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */


namespace Dragengine.Gui

pin Dragengine.Gui.Events
pin Dragengine.Gui.Layouts


/**
 * \brief Window for showing virtual keyboard.
 * \version 1.7
 * 
 * Similar to WindowPopup but does not capture the mouse.
 * 
 * Supports designing using designer selector "WindowVirtualKeyboard".
 * 
 * Window shows one panel out of a selection of possible panels depending on the
 * characteristics of the input widget.
 * 
 * By default Desktop has no virtual keyboard assign. Use Desktop.setWindowVirtualKeyboard()
 * to assign an instance of this class. Widgets supporting keyboard input in a reasonable
 * way will call popup() upon receiving the focus and popdown(null) upon loosing the focus.
 */
class WindowVirtualKeyboard extends Window
	/** \brief Virtual key type listener. */
	class VirtualKeyType extends DefaultMouseListener
		var WindowVirtualKeyboard pWindow
		var Widget pWidget
		var int pKeyCode
		var int pKeyChar
		var int pShiftedKeyChar
		var bool pButtonPressed
		var bool pShifted
		
		func new(WindowVirtualKeyboard window, Widget widget, int keyCode,\
		int keyChar, int shiftedKeyChar)
			pWindow = window
			pWidget = widget
			pKeyCode = keyCode
			pKeyChar = keyChar
			pShiftedKeyChar = shiftedKeyChar
		end
		
		func void onButtonPress(MouseEvent event)
			if event.getButton() != InputEventMouseButton.left or pButtonPressed
				return
			end
			
			pButtonPressed = true
			pShifted = pWindow.getModelShift().getToggled()
			pWidget.captureMouse()
			pWindow.sendKeyPressed(pKeyCode, pShifted if pShiftedKeyChar else pKeyChar)
			
			if pKeyCode == InputEventKey.shift
				pWindow.getModelShift().setToggled(not pWindow.getModelShift().getToggled())
			end
		end
		
		func void onButtonRelease(MouseEvent event)
			if event.getButton() != InputEventMouseButton.left or not pButtonPressed
				return
			end
			
			pButtonPressed = false
			pWidget.releaseMouse()
			pWindow.sendKeyReleased(pKeyCode, pShifted if pShiftedKeyChar else pKeyChar)
			pShifted = false
		end
	end
	
	/** \brief Rename key upon shift toggle listener. */
	class RenameShiftToggle extends DefaultToggleModelListener
		var TextModel pModelText
		var String pText
		var String pTextShifted
		
		func new(TextModel modelText, String text, String textShifted)
			pModelText = modelText
			pText = text
			pTextShifted = textShifted
		end
		
		func void toggledChanged(ToggleModel model)
			pModelText.setText(model.getToggled() if pTextShifted else pText)
		end
	end
	
	/**
	 * \brief Hide keyboard listener.
	 * \versoin 1.15
	 */
	class HideVirtualKeyboard extends DefaultMouseListener
		var WindowVirtualKeyboard pWindow
		var Widget pWidget
		var bool pButtonPressed
		
		func new(WindowVirtualKeyboard window, Widget widget)
			pWindow = window
			pWidget = widget
		end
		
		func void onButtonPress(MouseEvent event)
			if event.getButton() == InputEventMouseButton.left
				pWidget.captureMouse()
				pButtonPressed = true
			end
		end
		
		func void onButtonRelease(MouseEvent event)
			if event.getButton() == InputEventMouseButton.left and pButtonPressed
				pButtonPressed = false
				pWidget.releaseMouse()
				pWindow.popdown()
			end
		end
	end
	
	
	
	var Widget pInputWidget
	var Panel pKeyboardLayoutPanel
	
	var Panel pKeyboardLayoutDefaultPanel
	var Panel pKeyboardLayoutNumericPanel
	
	var DefaultToggleModel pModelShift
	
	
	
	/** \brief Create window. */
	func new()
		pModelShift = DefaultToggleModel.new()
		
		runWhileBlockingLayout(block
			setVisible(false)
			setCanFocus(false)
			setCanReorder(false)
			setCanMove(false)
			setCanResize(false)
			setCanClose(false)
			setCanMaximize(false)
			setCanMinimize(false)
			setAlwaysOnTop(true)
			setDesignerSelector("WindowVirtualKeyboard")
			
			setLayout(StackLayout.new())
			createKeyboardLayoutPanels(this)
		end)
		
		startFrameUpdater()
	end
	
	/** \brief Dispose of widget. */
	func void dispose()
		pInputWidget = null
		pKeyboardLayoutPanel = null
		pKeyboardLayoutDefaultPanel = null
		pKeyboardLayoutNumericPanel = null
		pModelShift = null
		super.dispose()
	end
	
	
	
	/** \brief Input widget or null. */
	func Widget getInputWidget()
		return pInputWidget
	end
	
	/** \brief Active keyboard layout panel or null. */
	func Panel getKeyboardLayoutPanel()
		return pKeyboardLayoutPanel
	end
	
	/** \brief Default keyboard layout panel. */
	func Panel getKeyboardLayoutDefault()
		return pKeyboardLayoutDefaultPanel
	end
	
	/** \brief Numeric keyboard layout panel. */
	func Panel getKeyboardLayoutNumeric()
		return pKeyboardLayoutNumericPanel
	end
	
	/** \brief Set active keyboard layout panel or null. */
	protected func void setKeyboardLayoutPanel(Panel panel)
		if panel == pKeyboardLayoutPanel
			return
		end
		
		runWhileBlockingLayout(block
			if pKeyboardLayoutPanel != null
				pKeyboardLayoutPanel.setVisible(false)
			end
			
			pKeyboardLayoutPanel = panel
			
			if panel != null
				panel.setVisible(true)
			end
		end)
		doLayoutIfBlocked()
	end
	
	/** \brief Shift model. */
	func ToggleModel getModelShift()
		return pModelShift
	end
	
	
	
	/**
	 * \brief Pop up window operating on input widget.
	 * 
	 * Shows the window at suitable position. Chooses keyboard layout best matching
	 * input widget. Input is send to the input widget as KeyEvent.
	 * 
	 * If no suitable keyboard layout exists noting is shown.
	 */
	func void popup(Widget inputWidget)
		if inputWidget == null
			throw ENullPointer.new("inputWidget")
		end
		
		if not inputWidget.getEnabled() or not inputWidget.getVisible()
			return
		end
		
		setKeyboardLayoutPanel(selectKeyboardLayout(inputWidget))
		if pKeyboardLayoutPanel == null
			// no suitable keyboard layout so show nothing
			return
		end
		
		pInputWidget = inputWidget
		
		fitToContent()
		setPosition(calculatePopupPosition(inputWidget))
		setVisible(true)
		moveToTop()
	end
	
	/**
	 * \brief Pop down windowand clears input widget.
	 * 
	 * Hides window.
	 */
	func void popdown()
		setVisible(false)
		setKeyboardLayoutPanel(null)
		pInputWidget = null
	end
	
	
	
	/** \brief Send key pressed event to input widget if present. */
	func void sendKeyPressed(int keyCode, int keyChar)
		if pInputWidget == null
			return
		end
		
		// we could use "this" as source to indicate where the event originates from.
		// this though prevents the key repetition from working since this is only started
		// if the event originates from the input widget itself
		pInputWidget.sendEvent(KeyEvent.new(pInputWidget, KeyEvent.idKeyPressed, \
			keyCode, InputEventModifier.none, keyChar, -1, keyCode))
	end
	
	/** \brief Send key released event to input widget if present. */
	func void sendKeyReleased(int keyCode, int keyChar)
		if pInputWidget == null
			return
		end
		
		pInputWidget.sendEvent(KeyEvent.new(pInputWidget, KeyEvent.idKeyReleased,\
			keyCode, InputEventModifier.none, keyChar, -1, keyCode))
	end
	
	
	
	/**
	 * \brief Grab focus if possible.
	 * 
	 * Implementation for popup windows is slightly different than for regular
	 * windows. Regular windows focus the first focusable widget if they are not
	 * focusable itself. Popup windows can not grab the focus nor do they focus
	 * the first focusable widget. This avoids popup windows stealing focus from
	 * the underlaying window.
	 */
	func void grabFocus()
	end
	
	
	
	/** \brief Calculate popup position. */
	protected func Point calculatePopupPosition(Widget widget)
		// adjust the location to ensure the popup is fully visible inside the desktop
		var Point widgetSize = widget.getSize()
		var Desktop desktop = getDesktop()
		var Point popupSize = getSize()
		
		var RectArea visibleArea = desktop.getMouseArea()
		
		if visibleArea == null
			visibleArea = RectArea.new(Point.new(), desktop.getContainerSize() - Point.new(1, 1))
		end
		
		visibleArea = visibleArea.grow(-popupSize)
		
		var Point position = widget.getDesktopPosition()
		var Point desired = position + Point.new((widgetSize.getX() - popupSize.getX()) / 2, widgetSize.getY())
		var Point clamped = visibleArea.clamp(desired)
		
		if clamped.getY() == desired.getY()
			// position at bottom is visible so use it
			return clamped
		end
		
		// clamped position clips at bottom. move popup to top of mouse pointer
		desired = position - Point.new(0, popupSize.getY())
		clamped = visibleArea.clamp(desired)
		
		if clamped.getY() == desired.getY()
			// position at top is visible so use it
			return clamped
		end
		
		// clamped position clips also at the top. stick to bottom
		desired = position + Point.new((widgetSize.getX() - popupSize.getX()) / 2, widgetSize.getY())
		return visibleArea.clamp(desired)
	end
	
	/** \brief Do frame update. */
	func void onFrameUpdate(float elapsed)
		if pInputWidget != null
			setPosition(calculatePopupPosition(pInputWidget))
		end
	end
	
	
	
	/** \brief Select keyboard layout best matching input widget. */
	protected func Panel selectKeyboardLayout(Widget inputWidget)
		if inputWidget castable TextWidget
			return selectKeyboardLayout(inputWidget cast TextWidget)
		end
		
		return pKeyboardLayoutDefaultPanel
	end
	
	/** \brief Select keyboard layout best matching input widget. */
	protected func Panel selectKeyboardLayout(TextWidget textWidget)
		if textWidget.getReadOnly()
			return null
		end
		
		var TextValidator validator = textWidget.getValidator()
		if validator == null
			return pKeyboardLayoutDefaultPanel
		end
		
		if validator castable SimpleTextValidator
			select (validator cast SimpleTextValidator).getCharacterClass()
			case SimpleTextValidator.CharacterClass.digits
				return pKeyboardLayoutNumericPanel
				
			case SimpleTextValidator.CharacterClass.digitsNegative
				return pKeyboardLayoutNumericPanel
				
			case SimpleTextValidator.CharacterClass.number
				return pKeyboardLayoutNumericPanel
				
			case SimpleTextValidator.CharacterClass.positiveNumber
				return pKeyboardLayoutNumericPanel
				
			else
				return pKeyboardLayoutDefaultPanel
			end
		end
		
		return pKeyboardLayoutDefaultPanel
	end
	
	/** \brief Create layout panels adding them to container. */
	protected func void createKeyboardLayoutPanels(Container container)
		pKeyboardLayoutDefaultPanel = createKeyboardLayoutDefaultPanel()
		container.addWidget(pKeyboardLayoutDefaultPanel)
		
		pKeyboardLayoutNumericPanel = createKeyboardLayoutNumericPanel()
		container.addWidget(pKeyboardLayoutNumericPanel)
	end
	
	/** \brief Create default keyboard layout panel. */
	protected func Panel createKeyboardLayoutDefaultPanel()
		return Panel.new(FlowLayout.new(LayoutAxis.y, 1), block Panel p
			p.setVisible(false)
			p.addWidget(createKeyboardLayoutDefaultPanelRow1())
			p.addWidget(createKeyboardLayoutDefaultPanelRow2())
			p.addWidget(createKeyboardLayoutDefaultPanelRow3())
			p.addWidget(createKeyboardLayoutDefaultPanelRow4())
			p.addWidget(createKeyboardLayoutDefaultPanelRow5())
		end)
	end
	
	/** \brief Create default keyboard layout panel row 1. */
	protected func Panel createKeyboardLayoutDefaultPanelRow1()
		return Panel.new(CentrizedBoxLayout.new(LayoutAxis.x, 1), block Panel p
			p.addWidget(createVirtualKey(InputEventKey.undefined, '`', "`", '~', "~", ""))
			p.addWidget(createVirtualKey(InputEventKey.digit1, '1', "1", '!', "!", ""))
			p.addWidget(createVirtualKey(InputEventKey.digit2, '2', "2", '@', "@", ""))
			p.addWidget(createVirtualKey(InputEventKey.digit3, '3', "3", '#', "#", ""))
			p.addWidget(createVirtualKey(InputEventKey.digit4, '4', "4", '$', "$", ""))
			p.addWidget(createVirtualKey(InputEventKey.digit5, '5', "5", '%', "%", ""))
			p.addWidget(createVirtualKey(InputEventKey.digit6, '6', "6", '^', "^", ""))
			p.addWidget(createVirtualKey(InputEventKey.digit7, '7', "7", '&', "&", ""))
			p.addWidget(createVirtualKey(InputEventKey.digit8, '8', "8", '*', "*", ""))
			p.addWidget(createVirtualKey(InputEventKey.digit9, '9', "9", '(', "(", ""))
			p.addWidget(createVirtualKey(InputEventKey.digit0, '0', "0", ')', ")", ""))
			p.addWidget(createVirtualKey(InputEventKey.undefined, '-', "-", '_', "_", ""))
			p.addWidget(createVirtualKey(InputEventKey.undefined, '=', "=", '+', "+", ""))
			p.addWidget(createVirtualKey(InputEventKey.backspace, 8, "Back", ".Wide"))
		end)
	end
	
	/** \brief Create default keyboard layout panel row 2. */
	protected func Panel createKeyboardLayoutDefaultPanelRow2()
		return Panel.new(CentrizedBoxLayout.new(LayoutAxis.x, 1), block Panel p
			p.addWidget(createVirtualKey(InputEventKey.tab, 9, "Tab", ".Wide"))
			p.addWidget(createVirtualKey(InputEventKey.q, 'q', "q", 'Q', "Q", ""))
			p.addWidget(createVirtualKey(InputEventKey.w, 'w', "w", 'W', "W", ""))
			p.addWidget(createVirtualKey(InputEventKey.e, 'e', "e", 'E', "E", ""))
			p.addWidget(createVirtualKey(InputEventKey.r, 'r', "r", 'R', "R", ""))
			p.addWidget(createVirtualKey(InputEventKey.t, 't', "t", 'T', "T", ""))
			p.addWidget(createVirtualKey(InputEventKey.y, 'y', "y", 'Y', "Y", ""))
			p.addWidget(createVirtualKey(InputEventKey.u, 'u', "u", 'U', "U", ""))
			p.addWidget(createVirtualKey(InputEventKey.i, 'i', "i", 'I', "I", ""))
			p.addWidget(createVirtualKey(InputEventKey.o, 'o', "o", 'O', "O", ""))
			p.addWidget(createVirtualKey(InputEventKey.p, 'p', "p", 'P', "P", ""))
			p.addWidget(createVirtualKey(InputEventKey.undefined, '[', "[", '{', "{", ""))
			p.addWidget(createVirtualKey(InputEventKey.undefined, ']', "]", '}', "}", ""))
			p.addWidget(createVirtualKey(InputEventKey.undefined, '\\', "\\", '|', "|", ""))
		end)
	end
	
	/** \brief Create default keyboard layout panel row 3. */
	protected func Panel createKeyboardLayoutDefaultPanelRow3()
		return Panel.new(CentrizedBoxLayout.new(LayoutAxis.x, 1), block Panel p
			p.addWidget(createVirtualKey(InputEventKey.a, 'a', "a", 'A', "A", ""))
			p.addWidget(createVirtualKey(InputEventKey.s, 's', "s", 'S', "S", ""))
			p.addWidget(createVirtualKey(InputEventKey.d, 'd', "d", 'D', "D", ""))
			p.addWidget(createVirtualKey(InputEventKey.f, 'f', "f", 'F', "F", ""))
			p.addWidget(createVirtualKey(InputEventKey.g, 'g', "g", 'G', "G", ""))
			p.addWidget(createVirtualKey(InputEventKey.h, 'h', "h", 'H', "H", ""))
			p.addWidget(createVirtualKey(InputEventKey.j, 'j', "j", 'J', "J", ""))
			p.addWidget(createVirtualKey(InputEventKey.k, 'k', "k", 'K', "K", ""))
			p.addWidget(createVirtualKey(InputEventKey.l, 'l', "l", 'L', "L", ""))
			p.addWidget(createVirtualKey(InputEventKey.undefined, ';', ";", ':', ":", ""))
			p.addWidget(createVirtualKey(InputEventKey.undefined, '\'', "'", '"', "\"", ""))
			p.addWidget(createVirtualKey(InputEventKey.enter, 13, "Enter", ".Wide"))
		end)
	end
	
	/** \brief Create default keyboard layout panel row 4. */
	protected func Panel createKeyboardLayoutDefaultPanelRow4()
		return Panel.new(CentrizedBoxLayout.new(LayoutAxis.x, 1), block Panel p
			p.addWidget(createVirtualKey(InputEventKey.shift, 0, "Shift", ".Wide"))
			p.addWidget(createVirtualKey(InputEventKey.z, 'z', "z", 'Z', "Z", ""))
			p.addWidget(createVirtualKey(InputEventKey.x, 'x', "x", 'X', "X", ""))
			p.addWidget(createVirtualKey(InputEventKey.c, 'c', "c", 'C', "C", ""))
			p.addWidget(createVirtualKey(InputEventKey.v, 'v', "v", 'V', "V", ""))
			p.addWidget(createVirtualKey(InputEventKey.b, 'b', "b", 'B', "B", ""))
			p.addWidget(createVirtualKey(InputEventKey.n, 'n', "n", 'N', "N", ""))
			p.addWidget(createVirtualKey(InputEventKey.m, 'm', "m", 'M', "M", ""))
			p.addWidget(createVirtualKey(InputEventKey.undefined, ',', ",", '<', "<", ""))
			p.addWidget(createVirtualKey(InputEventKey.undefined, '.', ".", '>', ">", ""))
			p.addWidget(createVirtualKey(InputEventKey.undefined, '/', "/", '?', "?", ""))
			p.addWidget(createVirtualKey(InputEventKey.shift, 0, "Shift", ".Wide"))
		end)
	end
	
	/** \brief Create default keyboard layout panel row 5. */
	protected func Panel createKeyboardLayoutDefaultPanelRow5()
		return Panel.new(CentrizedBoxLayout.new(LayoutAxis.x, 1), block Panel p
			var String dir = "/shareddata/guithemes/modern/keyboard/"
			p.addWidget(createVirtualKey(InputEventKey.home, 0, "Home", ".Wide"))
			p.addWidget(createVirtualKey(InputEventKey.arrowUp, 0, Image.new(dir + "arrow_up.png"), ""))
			p.addWidget(createVirtualKey(InputEventKey.arrowDown, 0, Image.new(dir + "arrow_down.png"), ""))
			p.addWidget(createVirtualKey(InputEventKey.space, ' ', " ", ".Space"))
			p.addWidget(createVirtualKey(InputEventKey.arrowLeft, 0, Image.new(dir + "arrow_left.png"), ""))
			p.addWidget(createVirtualKey(InputEventKey.arrowRight, 0, Image.new(dir + "arrow_right.png"), ""))
			p.addWidget(createVirtualKey(InputEventKey.last, 0, "End", ".Wide"))
			p.addWidget(createVirtualKeyHide(Image.new(dir + "hide.png"), ""))
		end)
	end
	
	/** \brief Create numeric keyboard layout panel. */
	protected func Panel createKeyboardLayoutNumericPanel()
		return Panel.new(FlowLayout.new(LayoutAxis.y, 1), block Panel p
			p.setVisible(false)
			p.addWidget(createKeyboardLayoutNumericPanelRow1())
			p.addWidget(createKeyboardLayoutNumericPanelRow2())
			p.addWidget(createKeyboardLayoutNumericPanelRow3())
		end)
	end
	
	/** \brief Create numeric keyboard layout panel row 1. */
	protected func Panel createKeyboardLayoutNumericPanelRow1()
		return Panel.new(CentrizedBoxLayout.new(LayoutAxis.x, 1), block Panel p
			p.addWidget(createVirtualKey(InputEventKey.digit1, '1', "1", ""))
			p.addWidget(createVirtualKey(InputEventKey.digit2, '2', "2", ""))
			p.addWidget(createVirtualKey(InputEventKey.digit3, '3', "3", ""))
			p.addWidget(createVirtualKey(InputEventKey.digit4, '4', "4", ""))
			p.addWidget(createVirtualKey(InputEventKey.digit5, '5', "5", ""))
			p.addWidget(createVirtualKey(InputEventKey.digit6, '6', "6", ""))
			p.addWidget(createVirtualKey(InputEventKey.digit7, '7', "7", ""))
			p.addWidget(createVirtualKey(InputEventKey.digit8, '8', "8", ""))
			p.addWidget(createVirtualKey(InputEventKey.digit9, '9', "9", ""))
			p.addWidget(createVirtualKey(InputEventKey.digit0, '0', "0", ""))
		end)
	end
	
	/** \brief Create numeric keyboard layout panel row 2. */
	protected func Panel createKeyboardLayoutNumericPanelRow2()
		return Panel.new(CentrizedBoxLayout.new(LayoutAxis.x, 1), block Panel p
			p.addWidget(createVirtualKey(InputEventKey.tab, 9, "Tab", ".Wide"))
			p.addWidget(createVirtualKey(InputEventKey.undefined, '-', "-", ""))
			p.addWidget(createVirtualKey(InputEventKey.undefined, '.', ".", ""))
			p.addWidget(createVirtualKey(InputEventKey.backspace, 8, "Back", ".Wide"))
			p.addWidget(createVirtualKey(InputEventKey.enter, 13, "Enter", ".Wide"))
		end)
	end
	
	/** \brief Create numeric keyboard layout panel row 3. */
	protected func Panel createKeyboardLayoutNumericPanelRow3()
		return Panel.new(CentrizedBoxLayout.new(LayoutAxis.x, 1), block Panel p
			var String dir = "/shareddata/guithemes/modern/keyboard/"
			p.addWidget(createVirtualKey(InputEventKey.home, 0, "Home", ".Wide"))
			p.addWidget(createVirtualKey(InputEventKey.arrowUp, 0, Image.new(dir + "arrow_up.png"), ""))
			p.addWidget(createVirtualKey(InputEventKey.arrowDown, 0, Image.new(dir + "arrow_down.png"), ""))
			p.addWidget(createVirtualKey(InputEventKey.arrowLeft, 0, Image.new(dir + "arrow_left.png"), ""))
			p.addWidget(createVirtualKey(InputEventKey.arrowRight, 0, Image.new(dir + "arrow_right.png"), ""))
			p.addWidget(createVirtualKey(InputEventKey.last, 0, "End", ".Wide"))
			p.addWidget(createVirtualKeyHide(Image.new(dir + "hide.png"), ""))
		end)
	end
	
	/** \brief Create virtual key widget. */
	protected func Widget createVirtualKey(int keyCode, int keyChar, String text, String designerSuffix)
		var Label label = Label.new(text, "Label.WindowVirtualKeyboard.Key" + designerSuffix)
		label.addMouseListener(VirtualKeyType.new(this, label, keyCode, keyChar, keyChar))
		return label
	end
	
	/** \brief Create virtual key widget. */
	protected func Widget createVirtualKey(int keyCode, int keyChar, String text,\
	int shiftedKeyChar, String shiftedText, String designerSuffix)
		var Label label = Label.new(text, "Label.WindowVirtualKeyboard.Key" + designerSuffix)
		label.addMouseListener(VirtualKeyType.new(this, label, keyCode, keyChar, shiftedKeyChar))
		pModelShift.addListener(RenameShiftToggle.new(label.getModel(), text, shiftedText))
		return label
	end
	
	/** \brief Create virtual key widget. */
	protected func Widget createVirtualKey(int keyCode, int keyChar, Image image, String designerSuffix)
		var DisplayRotatingImage display = DisplayRotatingImage.new(image, "Label.WindowVirtualKeyboard.Key" + designerSuffix)
		display.addMouseListener(VirtualKeyType.new(this, display, keyCode, keyChar, keyChar))
		return display
	end
	
	/**
	 * \brief Create virtual key widget.
	 * \versoin 1.15
	 */
	protected func Widget createVirtualKeyHide(Image image, String designerSuffix)
		var DisplayRotatingImage display = DisplayRotatingImage.new(image, "Label.WindowVirtualKeyboard.Key" + designerSuffix)
		display.addMouseListener(HideVirtualKeyboard.new(this, display))
		return display
	end
end
