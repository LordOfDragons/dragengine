/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */


namespace Dragengine.Gui

pin Dragengine.Gui.Events
pin Dragengine.Gui.Layouts
pin Dragengine.Scenery
pin Dragengine.Utils
pin Dragengine.Preloading



/**
 * \brief Window blending over color.
 * 
 * Allows to create effects like white-out or black-out where the game content is blended
 * over white or black.
 * 
 * To use this window place it above all other windows you would like to blend by this
 * effect. Then set the designer selector for the window. This sets the color to blend to
 * or any other desired content. The default selector is "Window.OverColor". Change this
 * to a name suiting your needs. Also set blend timing parameters. The blend timing parameters
 * consist of the time in seconds it takes to fade in to the color, the time in seconds
 * to stay at the color and the time in seconds it takes to fade out again. By default the
 * window is set maximized covering the entire desktop.
 * 
 * To trigger the effect call startFade()
 */
class WindowOverColor extends Window
	private var float pTimeFadeIn
	private var float pTimeStay
	private var float pTimeFadeOut
	private var float pThreshold1
	private var float pThreshold2
	private var bool pUseSmoothStep
	private var float pElapsed
	private var bool pRunning
	
	
	
	/** \brief Create window. */
	public func new()
		pTimeFadeIn = 1
		pTimeStay = 1
		pTimeFadeOut = 1
		pUseSmoothStep = true
		
		updateThresholds()
		
		setWindowState(Window.WindowState.maximized)
		setCanActivate(false)
		setTransparency(0)
		setDesignerSelector("Window.OverColor")
	end
	
	
	
	/** \brief Time in seconds to fade in. */
	public func float getTimeFadeIn()
		return pTimeFadeIn
	end
	
	/** \brief Set time in seconds to fade in. */
	public func void setTimeFadeIn(float time)
		pTimeFadeIn = DEMath.max(time, 0.0)
		updateThresholds()
	end
	
	/** \brief Time in seconds to stay at color. */
	public func float getTimeStay()
		return pTimeStay
	end
	
	/** \brief Set time in seconds to stay at color. */
	public func void setTimeStay(float time)
		pTimeStay = DEMath.max(time, 0.0)
		updateThresholds()
	end
	
	/** \brief Time in seconds to fade out. */
	public func float getTimeFadeOut()
		return pTimeFadeOut
	end
	
	/** \brief Set time in seconds to fade out. */
	public func void setTimeFadeOut(float time)
		pTimeFadeOut = DEMath.max(time, 0.0)
		updateThresholds()
	end
	
	/** \brief Use smooth step instead of linear step. */
	public func bool getUseSmoothStep()
		return pUseSmoothStep
	end
	
	/** \brief Set to use smooth step instead of linear step. */
	public func void setUseSmoothStep(bool useSmoothStep)
		pUseSmoothStep = useSmoothStep
	end
	
	
	
	/** \brief Elapsed time. */
	public func float getElapsed()
		return pElapsed
	end
	
	/** \brief Set elapsed time. */
	protected func void setElapsed(float elapsed)
		pElapsed = elapsed
	end
	
	/** \brief Running. */
	public func bool getRunning()
		return pRunning
	end
	
	
	
	/** \brief Start fading if not running. */
	public func void startFading()
		if pRunning
			return
		end
		
		pElapsed = 0
		pRunning = true
		setTransparency(0)
		setVisible(true)
		startFrameUpdater()
	end
	
	/** \brief Stop fading immediatly if running. */
	public func void stopFading()
		if not pRunning
			return
		end
		
		stopFrameUpdater()
		setTransparency(0)
		pRunning = false
		pElapsed = 0
		setVisible(false)
	end
	
	/**
	 * \brief Do frame update.
	 * 
	 * Update fading
	 */
	public func void onFrameUpdate(float elapsed)
		if not pRunning
			stopFading()
			return
		end
		
		pElapsed += elapsed
		
		if pElapsed < pTimeFadeIn
			if pUseSmoothStep
				setTransparency(DEMath.smoothStep(pElapsed, 0.0, pTimeFadeIn))
				
			else
				setTransparency(DEMath.linearStep(pElapsed, 0.0, pTimeFadeIn))
			end
			
		elif pElapsed < pThreshold1
			setTransparency(1.0)
			
		elif pElapsed < pThreshold2
			if pUseSmoothStep
				setTransparency(DEMath.smoothStep(pElapsed, pThreshold1, pThreshold2, 1.0, 0.0))
				
			else
				setTransparency(DEMath.linearStep(pElapsed, pThreshold1, pThreshold2, 1.0, 0.0))
			end
			
		else
			stopFading()
		end
	end
	
	/** \brief Update thresholds. */
	protected func void updateThresholds()
		pThreshold1 = pTimeFadeIn + pTimeStay
		pThreshold2 = pThreshold1 + pTimeFadeOut
	end
	
	
	
	/**
	 * \brief Widget at coordinates or \em null if not found.
	 * 
	 * Returns null to prevent widget from hovering. Keep this in mind if you try to call
	 * this method. It might not work. If you need original getWidgetAt behavior from
	 * super class use realGetWidgetAt().
	 */
	public func Widget getWidgetAt(Point position)
		return null
	end
	
	/**
	 * \brief Super class getWidgetAt without overwritten behavior.
	 * \version 1.12
	 */
	public func Widget realGetWidgetAt(Point position)
		return super.getWidgetAt(position)
	end
end
