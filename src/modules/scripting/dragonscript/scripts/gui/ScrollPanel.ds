/* 
 * Drag[en]gine DragonScript Script Module
 *
 * Copyright (C) 2020, Roland Pl√ºss (roland@rptd.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */


namespace Dragengine.Gui

pin Dragengine.Gui.Events
pin Dragengine.Gui.Layouts


/**
 * \brief Encapsulate widget and decorates it with a pair of scrollbars.
 * 
 * User sees different areas of the widget which is too big to be displayed at once.
 * The scrollbars can be set to vanish if not used.
 */
class ScrollPanel extends Panel
	/** \brief Scroll bar policy. */
	enum Policy
		/** \brief Scroll bar is visible only if needed. */
		needed
		
		/** \brief Scroll bar is always visible. */
		visible
		
		/** \brief Scroll bar is never visible. */
		hidden
	end
	
	
	
	private var ScrollBar pHorzScroll
	private var ScrollBar pVertScroll
	private var Policy pHorzScrollPolicy
	private var Policy pVertScrollPolicy
	private var Widget pContent
	
	
	
	/** \brief Create scroll panel. */
	public func new() this(Policy.needed, Policy.needed)
	end
	
	/** \brief Create scroll panel with scrollbar policies. */
	public func new(Policy horizontalPolicy, Policy verticalPolicy)
		runWhileBlockingLayout(block
			setLayout(ScrollPanelLayout.new())
			
			// horizontal scrollbar
			pHorzScrollPolicy = horizontalPolicy
			pHorzScroll = ScrollBar.new(Orientation.horizontal)
			pHorzScroll.setModel(DefaultRangeModel.new(0, 0, 1, 0, 1))
			pHorzScroll.setVisible(false)
			addWidget(pHorzScroll, ScrollPanelLayout.Area.horizontal)
			
			// vertical scrollbar
			pVertScrollPolicy = verticalPolicy
			pVertScroll = ScrollBar.new(Orientation.vertical)
			pVertScroll.setModel(DefaultRangeModel.new(0, 0, 1, 0, 1))
			pVertScroll.setVisible(false)
			addWidget(pVertScroll, ScrollPanelLayout.Area.vertical)
			
			updateScrollBarHiding()
		end)
	end
	
	/** \brief Create scroll panel with content widget. */
	public func new(Widget content) this(Policy.needed, Policy.needed)
		setContent(content)
	end
	
	/** \brief Create scroll panel with content widget and scroll policies. */
	public func new(Widget content, Policy horizontalPolicy, Policy verticalPolicy) \
	this(horizontalPolicy, verticalPolicy)
		setContent(content)
	end
	
	/** \brief Dispose of widget. */
	public func void dispose()
		pContent = null
		pVertScroll = null
		pHorzScroll = null
		
		super.dispose()
	end
	
	
	
	/** \brief Horizontal scrollbar policy. */
	public func Policy getHorizontalScrollPolicy()
		return pHorzScrollPolicy
	end
	
	/** \brief Set horizontal scrollbar policy. */
	public func void setHorizontalScrollPolicy(Policy policy)
		if policy == pHorzScrollPolicy
			return
		end
		
		pHorzScrollPolicy = policy
		updateScrollBarHiding()
	end
	
	/** \brief Vertical scrollbar policy. */
	public func Policy getVerticalScrollPolicy()
		return pVertScrollPolicy
	end
	
	/** \brief Set vertical scrollbar policy. */
	public func void setVerticalScrollPolicy(Policy policy)
		if policy == pVertScrollPolicy
			return
		end
		
		pVertScrollPolicy = policy
		updateScrollBarHiding()
	end
	
	
	
	/** \brief Content widget or \em null if not existing. */
	public func Widget getContent()
		return pContent
	end
	
	/** \brief Set content widget or \em null to remove it. */
	public func void setContent(Widget content)
		if content == pContent
			return
		end
		
		if pContent != null
			pContent.safeDispose()
			pContent = null
		end
		
		if content == null
			pHorzScroll.setModel(DefaultRangeModel.new(0, 0, 1, 0, 1))
			pVertScroll.setModel(DefaultRangeModel.new(0, 0, 1, 0, 1))
			
		else
			pContent = content
			addWidget(pContent, ScrollPanelLayout.Area.content)
			
			var RangeModel rmHorz = content.getHorizontalRangeModel()
			if rmHorz == null
				pHorzScroll.setModel(DefaultRangeModel.new(0, 0, 1, 0, 1))
				
			else
				pHorzScroll.setModel(rmHorz)
			end
			
			var RangeModel rmVert = content.getVerticalRangeModel()
			if rmVert == null
				pVertScroll.setModel(DefaultRangeModel.new(0, 0, 1, 0, 1))
				
			else
				pVertScroll.setModel(rmVert)
			end
		end
		
		updateScrollBarHiding()
	end
	
	
	
	/** \brief Horizontal scrollbar. */
	public func ScrollBar getHorizontalScrollBar()
		return pHorzScroll
	end
	
	/** \brief Vertical scrollbar. */
	public func ScrollBar getVerticalScrollBar()
		return pVertScroll
	end
	
	
	
	/** \brief Lay out widgets using the set layout. */
	public func void doLayout()
		if getBlockLayout()
			return
		end
		
		if pHorzScroll == null or pVertScroll == null
			return
		end
		
		// track if the scrollbars change visibility. this happens for example if the scrollbars are
		// auto-hidden due to range becoming 0. in this case the layout is made with the scrollbar
		// present but it vanishes leaving behind an empty space. if at least one scrollbar changes
		// visibility we have to layout again to fix the problem.
		var bool sbHorzVisible = pHorzScroll.getVisible()
		var bool sbVertVisible = pVertScroll.getVisible()
		
		super.doLayout()
		
		if sbHorzVisible != pHorzScroll.getVisible() or sbVertVisible != pVertScroll.getVisible()
			super.doLayout()
		end
	end
	
	
	
	/** \brief Mouse wheel has moved. */
	public func void onMouseWheel(MouseEvent event)
		var int y = event.getPosition().getY()
		if y == 0
			super.onMouseWheel(event)
			return
		end
		
		var RangeModel model = pVertScroll.getModel()
		
		if (event.getModifiers() & ModifiableEvent.shift) == ModifiableEvent.shift
			model.setValue(model.getValue() - model.getPageSize() * y)
			
		else
			model.setValue(model.getValue() - model.getIncrement() * y)
		end
		
		sendEventToListeners(event, false)
	end
	
	
	
	/** \brief Update scroll bar hiding depending on their policies. */
	protected func void updateScrollBarHiding()
		// horizontal scroll bar hiding
		select pHorzScrollPolicy
		case Policy.needed
			pHorzScroll.setHideIfEmpty(true)
			
		case Policy.visible
			pHorzScroll.setHideIfEmpty(false)
			pHorzScroll.setVisible(true)
			
		case Policy.hidden
			pHorzScroll.setHideIfEmpty(false)
			pHorzScroll.setVisible(false)
		end
		
		// vertical scroll bar hiding
		select pVertScrollPolicy
		case Policy.needed
			pVertScroll.setHideIfEmpty(true)
			
		case Policy.visible
			pVertScroll.setHideIfEmpty(false)
			pVertScroll.setVisible(true)
			
		case Policy.hidden
			pVertScroll.setHideIfEmpty(false)
			pVertScroll.setVisible(false)
		end
	end
end
