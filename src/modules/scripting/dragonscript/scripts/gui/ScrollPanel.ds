/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */


namespace Dragengine.Gui

pin Dragengine.Gui.Events
pin Dragengine.Gui.Layouts
pin Dragengine.Scenery


/**
 * \brief Encapsulate widget and decorates it with a pair of scrollbars.
 * 
 * User sees different areas of the widget which is too big to be displayed at once.
 * The scrollbars can be set to vanish if not used.
 * 
 * \par Generic scrollable panels
 * 
 * Using a Panel directly as child of ScrollPanel is not going to work. Hence if you
 * want to create an up-down scrollable panel for example as a side panel then you have
 * to use Viewport like this:
 * \code{.ds}
 * var Panel panel = Panel.new(FlowLayout.new(LayoutAxis.y), block Panel p
 *    // add your widgets to the panel 'p'
 * end)
 * var Viewport viewport = Viewport.new(panel)
 * viewport.setLayout(FlowLayout.new(LayoutAxis.y))
 * var ScrollPanel scrollPanel = ScrollPanel.new(viewport,\
 *    ScrollPanel.Policy.hidden, ScrollPanel.Policy.needed)
 * container.addWidget(scrollPanel)
 * \endcode
 * Hence the basic structure is: ScrollPanel -> Viewport -> Panel.
 * 
 * It is important to use \ref Viewport#setLayout(Layout) instead of
 * \ref Viewport#new(Widget,Layout) or the minimum size will be locked to 5x5. This is
 * because the constructor version is designed to be used with ScrollPanel used in a
 * sizeable content area where the minimuim size has to be small. It is thus required
 * to set the layout afterwards to keep the minimum size of the child Panel.
 */
class ScrollPanel extends Panel
	/** \brief Scroll bar policy. */
	enum Policy
		/** \brief Scroll bar is visible only if needed. */
		needed
		
		/** \brief Scroll bar is always visible. */
		visible
		
		/** \brief Scroll bar is never visible. */
		hidden
	end
	
	
	
	var ScrollBar pHorzScroll, pVertScroll
	var Policy pHorzScrollPolicy, pVertScrollPolicy
	var Widget pContent
	
	
	
	/** \brief Create scroll panel. */
	func new() this(Policy.needed, Policy.needed)
	end
	
	/** \brief Create scroll panel with scrollbar policies. */
	func new(Policy horizontalPolicy, Policy verticalPolicy)
		runWhileBlockingLayout(block
			setLayout(ScrollPanelLayout.new())
			
			// horizontal scrollbar
			pHorzScrollPolicy = horizontalPolicy
			pHorzScroll = ScrollBar.new(Orientation.horizontal)
			pHorzScroll.setModel(DefaultRangeModel.new(0, 0, 1, 0, 1))
			pHorzScroll.setVisible(false)
			addWidget(pHorzScroll, ScrollPanelLayout.Area.horizontal)
			
			// vertical scrollbar
			pVertScrollPolicy = verticalPolicy
			pVertScroll = ScrollBar.new(Orientation.vertical)
			pVertScroll.setModel(DefaultRangeModel.new(0, 0, 1, 0, 1))
			pVertScroll.setVisible(false)
			addWidget(pVertScroll, ScrollPanelLayout.Area.vertical)
			
			updateScrollBarHiding()
		end)
	end
	
	/** \brief Create scroll panel with content widget. */
	func new(Widget content) this(Policy.needed, Policy.needed)
		setContent(content)
	end
	
	/** \brief Create scroll panel with content widget and scroll policies. */
	func new(Widget content, Policy horizontalPolicy, Policy verticalPolicy) \
	this(horizontalPolicy, verticalPolicy)
		setContent(content)
	end
	
	/** \brief Dispose of widget. */
	func void dispose()
		pContent = null
		pVertScroll = null
		pHorzScroll = null
		
		super.dispose()
	end
	
	
	
	/** \brief Horizontal scrollbar policy. */
	func Policy getHorizontalScrollPolicy()
		return pHorzScrollPolicy
	end
	
	/** \brief Set horizontal scrollbar policy. */
	func void setHorizontalScrollPolicy(Policy policy)
		if policy == pHorzScrollPolicy
			return
		end
		
		pHorzScrollPolicy = policy
		updateScrollBarHiding()
	end
	
	/** \brief Vertical scrollbar policy. */
	func Policy getVerticalScrollPolicy()
		return pVertScrollPolicy
	end
	
	/** \brief Set vertical scrollbar policy. */
	func void setVerticalScrollPolicy(Policy policy)
		if policy == pVertScrollPolicy
			return
		end
		
		pVertScrollPolicy = policy
		updateScrollBarHiding()
	end
	
	
	
	/** \brief Content widget or \em null if not existing. */
	func Widget getContent()
		return pContent
	end
	
	/** \brief Set content widget or \em null to remove it. */
	func void setContent(Widget content)
		if content == pContent
			return
		end
		
		if pContent != null
			pContent.safeDispose()
			pContent = null
		end
		
		if content == null
			pHorzScroll.setModel(DefaultRangeModel.new(0, 0, 1, 0, 1))
			pVertScroll.setModel(DefaultRangeModel.new(0, 0, 1, 0, 1))
			
		else
			pContent = content
			addWidget(pContent, ScrollPanelLayout.Area.content)
			
			var RangeModel rmHorz = content.getHorizontalRangeModel()
			if rmHorz == null
				pHorzScroll.setModel(DefaultRangeModel.new(0, 0, 1, 0, 1))
				
			else
				pHorzScroll.setModel(rmHorz)
			end
			
			var RangeModel rmVert = content.getVerticalRangeModel()
			if rmVert == null
				pVertScroll.setModel(DefaultRangeModel.new(0, 0, 1, 0, 1))
				
			else
				pVertScroll.setModel(rmVert)
			end
		end
		
		updateScrollBarHiding()
	end
	
	
	
	/** \brief Horizontal scrollbar. */
	func ScrollBar getHorizontalScrollBar()
		return pHorzScroll
	end
	
	/** \brief Vertical scrollbar. */
	func ScrollBar getVerticalScrollBar()
		return pVertScroll
	end
	
	
	func void ensureVisible(RectArea boundary)
		if pContent == null
			return
		end
		
		var Point position = pContent.getPosition()
		
		var BorderSize padding = getPadding()
		var Point move = (boundary.getPosition() - padding.getLeftTop()).smallest(Point.new())\
			+ (boundary.getBottomRight() - (getSize() - padding.getRightBottom())).largest(Point.new())
		
		var RangeModel modelHorz = pHorzScroll.getModel()
		var RangeModel modelVert = pVertScroll.getModel()
		
		modelHorz.setValue(modelHorz.getValue() + move.getX())
		modelVert.setValue(modelVert.getValue() + move.getY())
		
		super.ensureVisible(boundary.move(pContent.getPosition() - position))
	end
	
	
	
	/** \brief Lay out widgets using the set layout. */
	func void doLayout()
		if getBlockLayout()
			return
		end
		
		if pHorzScroll == null or pVertScroll == null
			return
		end
		
		// track if the scrollbars change visibility. this happens for example if the scrollbars are
		// auto-hidden due to range becoming 0. in this case the layout is made with the scrollbar
		// present but it vanishes leaving behind an empty space. if at least one scrollbar changes
		// visibility we have to layout again to fix the problem.
		var bool sbHorzVisible = pHorzScroll.getVisible()
		var bool sbVertVisible = pVertScroll.getVisible()
		
		super.doLayout()
		
		if sbHorzVisible != pHorzScroll.getVisible() or sbVertVisible != pVertScroll.getVisible()
			super.doLayout()
		end
	end
	
	
	
	/** \brief Mouse wheel has moved. */
	func void onMouseWheel(MouseEvent event)
		var int y = event.getPosition().getY()
		if y == 0
			super.onMouseWheel(event)
			return
		end
		
		var RangeModel model = pVertScroll.getModel()
		
		if (event.getModifiers() & ModifiableEvent.shift) == ModifiableEvent.shift
			model.setValue(model.getValue() - model.getPageSize() * y)
			
		else
			model.setValue(model.getValue() - model.getIncrement() * y)
		end
		
		sendEventToListeners(event, false)
	end
	
	
	
	/** \brief Update scroll bar hiding depending on their policies. */
	protected func void updateScrollBarHiding()
		// horizontal scroll bar hiding
		select pHorzScrollPolicy
		case Policy.needed
			pHorzScroll.setHideIfEmpty(true)
			
		case Policy.visible
			pHorzScroll.setHideIfEmpty(false)
			pHorzScroll.setVisible(true)
			
		case Policy.hidden
			pHorzScroll.setHideIfEmpty(false)
			pHorzScroll.setVisible(false)
		end
		
		// vertical scroll bar hiding
		select pVertScrollPolicy
		case Policy.needed
			pVertScroll.setHideIfEmpty(true)
			
		case Policy.visible
			pVertScroll.setHideIfEmpty(false)
			pVertScroll.setVisible(true)
			
		case Policy.hidden
			pVertScroll.setHideIfEmpty(false)
			pVertScroll.setVisible(false)
		end
	end
end
