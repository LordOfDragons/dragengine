/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */


namespace Dragengine.Gui.Designers

pin Dragengine.Gui.CanvasCreators
pin Dragengine.Gui.Borders.Factories
pin Dragengine.Scenery


/**
 * \brief Default implementation of WidgetDesigner for Button.
 */
class DefaultButtonDesigner extends DefaultWidgetDesigner
	private var StateDesign pDesignPressed
	
	
	
	/** \brief Create new button designer. */
	public func new()
		pDesignPressed = StateDesign.new()
	end
	
	/** \brief Create copy of widget designer. */
	public func new(DefaultButtonDesigner designer) super(designer)
		pDesignPressed = designer.pDesignPressed.copyDesign()
	end
	
	
	
	/** \brief Design for pressed state. */
	public func StateDesign getDesignPressed()
		return pDesignPressed
	end
	
	/** \brief Set design for pressed state. */
	protected func void setDesignPressed(StateDesign design)
		if design == null
			throw EInvalidParam.new()
		end
		pDesignPressed = design
	end
	
	
	
	/**
	 * \brief Set parameter.
	 * 
	 * See DefaultWidgetDesigner.setParameter for supported parameters.
	 * 
	 * Additional supported states:
	 * | name | value |
	 * | pressed | Widget is in pressed state |
	 */
	public func void setParameter(String name, Object value)
		super.setParameter(name, value)
	end
	
	/** \brief Get state for parameter name selector component or null if not found. */
	protected func StateDesign getNamedStateDesign(String stateName)
		if stateName.equals("pressed")
			return pDesignPressed
			
		else
			return super.getNamedStateDesign(stateName)
		end
	end
	
	/** \brief Create copy of designer. */
	public func WidgetDesigner copyDesigner()
		return DefaultButtonDesigner.new(this)
	end
	
	
	
	/**
	 * \brief Get design to apply to widget.
	 * 
	 * Determines the state of the widget and the appropriate state design to use. The
	 * returned state design can be a set state design or a merge of multiple state
	 * designs using a fallback logic.
	 */
	protected func StateDesign widgetStateFindDesign(Widget widget)
		var StateDesign design = super.widgetStateFindDesign(widget)
		var Button button = widget cast Button
		
		if button.getEnabled() and button.getPressed()
			design = design.copyDesign()
			pDesignPressed.merge(design)
		end
		
		return design
	end
end
