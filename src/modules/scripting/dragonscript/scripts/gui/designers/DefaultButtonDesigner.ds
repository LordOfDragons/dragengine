/* 
 * Drag[en]gine DragonScript Script Module
 *
 * Copyright (C) 2020, Roland Pl√ºss (roland@rptd.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */


namespace Dragengine.Gui.Designers

pin Dragengine.Gui.CanvasCreators
pin Dragengine.Gui.Borders.Factories
pin Dragengine.Scenery


/**
 * \brief Default implementation of WidgetDesigner for Button.
 */
class DefaultButtonDesigner extends DefaultWidgetDesigner
	private var StateDesign pDesignPressed
	
	
	
	/** \brief Create new button designer. */
	public func new()
		pDesignPressed = StateDesign.new()
	end
	
	/** \brief Create copy of widget designer. */
	public func new(DefaultButtonDesigner designer) super(designer)
		pDesignPressed = designer.pDesignPressed.copyDesign()
	end
	
	
	
	/** \brief Design for pressed state. */
	public func StateDesign getDesignPressed()
		return pDesignPressed
	end
	
	/** \brief Set design for pressed state. */
	protected func void setDesignPressed(StateDesign design)
		if design == null
			throw EInvalidParam.new()
		end
		pDesignPressed = design
	end
	
	
	
	/**
	 * \brief Set parameter.
	 * 
	 * See DefaultWidgetDesigner.setParameter for supported parameters.
	 * 
	 * Additional supported states:
	 * | name | value |
	 * | pressed | Widget is in pressed state |
	 */
	public func void setParameter(String name, Object value)
		super.setParameter(name, value)
	end
	
	/** \brief Get state for parameter name selector component or null if not found. */
	protected func StateDesign getNamedStateDesign(String stateName)
		if stateName.equals("pressed")
			return pDesignPressed
			
		else
			return super.getNamedStateDesign(stateName)
		end
	end
	
	/** \brief Create copy of designer. */
	public func WidgetDesigner copyDesigner()
		return DefaultButtonDesigner.new(this)
	end
	
	
	
	/**
	 * \brief Get design to apply to widget.
	 * 
	 * Determines the state of the widget and the appropriate state design to use. The
	 * returned state design can be a set state design or a merge of multiple state
	 * designs using a fallback logic.
	 */
	protected func StateDesign widgetStateFindDesign(Widget widget)
		var StateDesign design = super.widgetStateFindDesign(widget)
		var Button button = widget cast Button
		
		if button.getEnabled() and button.getPressed()
			design = design.copyDesign()
			pDesignPressed.merge(design)
		end
		
		return design
	end
end
