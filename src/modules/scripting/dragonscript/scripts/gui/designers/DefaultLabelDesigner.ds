/* 
 * Drag[en]gine DragonScript Script Module
 *
 * Copyright (C) 2020, Roland Pl√ºss (roland@rptd.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */


namespace Dragengine.Gui.Designers

pin Dragengine.Gui.CanvasCreators
pin Dragengine.Gui.Borders.Factories
pin Dragengine.Scenery


/**
 * \brief Default implementation of WidgetDesigner for Label.
 */
class DefaultLabelDesigner extends DefaultWidgetDesigner
	/** \brief Design for a particular widget state. */
	public class LabelStateDesign extends StateDesign
		private var Integer pAlignment
		
		
		
		/** \brief Create state design. */
		public func new()
		end
		
		/** \brief Create copy of state design. */
		public func new( LabelStateDesign stateDesign ) super( stateDesign )
			this.pAlignment = stateDesign.pAlignment
		end
		
		
		
		/** \brief Align.or null. */
		public func Integer getAlignment()
			return this.pAlignment
		end
		
		/** \brief Set alignment or null. */
		public func void setAlignment( Integer alignment )
			this.pAlignment = alignment
		end
		
		/**
		 * \brief Set alignment from string or null.
		 * 
		 * The input from the guitheme definition is a string composing of a comma separated
		 * list of identifiers. Allowed are up to two identifiers one from the vertical
		 * alignment group and one from the horizontal alignment group. These are the
		 * supported identifiers of the horizontal alignment group: "left", "center" and
		 * "right". These are the supported identifiers of the vertical alignment group:
		 * "top", "middle" and "bottom".
		 */
		public func void setAlignmentFromString( String string )
			if string == null
				this.pAlignment = null
				return
			end
			
			var int alignment = string.splitExact( ',' ).inject( 0, block int value, String each
				if each.equals( "left" )
					return value | Label.left
					
				elif each.equals( "center" )
					return value | Label.center
					
				elif each.equals( "right" )
					return value | Label.right
					
				elif each.equals( "top" )
					return value | Label.top
					
				elif each.equals( "middle" )
					return value | Label.middle
					
				elif each.equals( "bottom" )
					return value | Label.bottom
					
				else
					throw EInvalidParam.new()
				end
			end ) cast int
			
			if ( alignment & Label.right == Label.right and alignment & Label.center == Label.center ) \
			or ( alignment & Label.bottom == Label.bottom and alignment & Label.middle == Label.middle )
				throw EInvalidParam.new()
			end
			
			this.pAlignment = Integer.new( alignment )
		end
		
		
		
		/**
		 * \brief Set parameter.
		 * 
		 * Note about alignment parameter. The input from the guitheme definition is a string
		 * composing of a comma separated list of identifiers. Allowed are up to two
		 * identifiers one from the vertical alignment group and one from the horizontal
		 * alignment group. These are the supported identifiers of the horizontal alignment
		 * group: "left", "center" and *right". These are the supported identifiers of the
		 * vertical alignment group: "top", "middle" and "bottom".
		 * 
		 * Supported parameters:
		 * | name | value | Setter |
		 * | canvas | CanvasCreator | setCanvasCreator |
		 * | border | BorderFactory | setBorderFactory |
		 * | font | Font | setFont |
		 * | textColor | Color | setTextColor |
		 * | padding | BorderSize | setPadding |
		 * | alignment | String | setAlignmentFromString |
		 */
		public func void setParameter( String name, Object value )
			if name.equals( "alignment" )
				this.setAlignmentFromString( value cast String )
				
			else
				super.setParameter( name, value )
			end
		end
		
		
		
		/** \brief Create copy of state. */
		public func DefaultWidgetDesigner.StateDesign copyDesign()
			return LabelStateDesign.new( this )
		end
		
		/**
		 * \brief Merge states.
		 * 
		 * Updates state with parameters of this state if defined. Used to find the first
		 * defined parameter for a series of states acting as fallback for each other.
		 */
		public func void merge( DefaultWidgetDesigner.StateDesign state )
			super.merge( state )
			
			var LabelStateDesign lstate = state cast LabelStateDesign
			
			if this.pAlignment != null
				lstate.pAlignment = this.pAlignment
			end
		end
		
		/**
		 * \brief Apply state design to widget.
		 * 
		 * This is typically called on a merged design to find the first defined parameters.
		 */
		public func void apply( Widget widget )
			super.apply( widget )
			
			if this.pAlignment != null
				( widget cast Label ).setAlignment( this.pAlignment.value() )
			end
		end
	end
	
	
	
	/** \brief Create new label designer. */
	public func new()
		this.setDesignNormal( LabelStateDesign.new() )
		this.setDesignDisabled( LabelStateDesign.new() )
		this.setDesignFocused( LabelStateDesign.new() )
		this.setDesignHover( LabelStateDesign.new() )
		this.setDesignFocusedHover( LabelStateDesign.new() )
	end
	
	/** \brief Create copy of widget designer designer. */
	public func new( DefaultLabelDesigner designer ) super( designer )
	end
	
	
	
	/** \brief Design for normal state. */
	public func LabelStateDesign getLabelDesignNormal()
		return this.getDesignNormal() cast LabelStateDesign
	end
	
	/** \brief Design for disabled state. */
	public func LabelStateDesign getLabelDesignDisabled()
		return this.getDesignDisabled() cast LabelStateDesign
	end
	
	/** \brief Design for focused state. */
	public func LabelStateDesign getLabelDesignFocused()
		return this.getDesignFocused() cast LabelStateDesign
	end
	
	/** \brief Design for hover state. */
	public func LabelStateDesign getLabelDesignHover()
		return this.getDesignHover() cast LabelStateDesign
	end
	
	/** \brief Design for focused hover state. */
	public func LabelStateDesign getLabelDesignFocusedHover()
		return this.getDesignFocusedHover() cast LabelStateDesign
	end
	
	
	
	/**
	 * \brief Set parameter.
	 * 
	 * See DefaultWidgetDesigner.setParameter for supported parameters.
	 * 
	 * Additional supported parameters:
	 * | name | value | Setter |
	 * | {state}.alignment | String | getDesign{state}.setAlignmentFromString |
	 */
	public func void setParameter( String name, Object value )
		super.setParameter( name, value )
	end
	
	/** \brief Create copy of designer. */
	public func WidgetDesigner copyDesigner()
		return DefaultLabelDesigner.new( this )
	end
end
