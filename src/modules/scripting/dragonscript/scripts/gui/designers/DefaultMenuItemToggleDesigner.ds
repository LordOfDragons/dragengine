/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */


namespace Dragengine.Gui.Designers

pin Dragengine.Scenery


/**
 * \brief Default implementation of WidgetDesigner for MenuItemToggle.
 * \version 1.11
 */
class DefaultMenuItemToggleDesigner extends DefaultWidgetDesigner
	/** \brief Design for a particular widget state. */
	public class MenuItemToggleStateDesign extends StateDesign
		private var Image pImageBox
		private var Image pImageMark
		
		
		
		/** \brief Create state design. */
		public func new()
		end
		
		/** \brief Create copy of state design. */
		public func new(MenuItemToggleStateDesign stateDesign) super(stateDesign)
			pImageBox = stateDesign.pImageBox
			pImageMark = stateDesign.pImageMark
		end
		
		
		
		/** \brief Image for box. */
		public func Image getImageBox()
			return pImageBox
		end
		
		/** \brief Set image for box. */
		public func void setImageBox(Image image)
			pImageBox = image
		end
		
		/** \brief Image for mark. */
		public func Image getImageMark()
			return pImageMark
		end
		
		/** \brief Set image for mark. */
		public func void setImageMark(Image image)
			pImageMark = image
		end
		
		
		
		/**
		 * \brief Set parameter.
		 * 
		 * Supported parameters:
		 * | name | value | Setter |
		 * | canvas | CanvasCreator | setCanvasCreator |
		 * | border | BorderFactory | setBorderFactory |
		 * | font | Font | setFont |
		 * | textColor | Color | setTextColor |
		 * | padding | BorderSize | setPadding |
		 * | imageBox | Image | setImageBox |
		 * | imageMark | Image | setImageMark |
		 */
		public func void setParameter(String name, Object value)
			if name.equals("imageBox")
				setImageBox(value cast Image)
				
			elif name.equals("imageMark")
				setImageMark(value cast Image)
				
			else
				super.setParameter(name, value)
			end
		end
		
		
		
		/** \brief Create copy of state. */
		public func DefaultWidgetDesigner.StateDesign copyDesign()
			return MenuItemToggleStateDesign.new(this)
		end
		
		/**
		 * \brief Merge states.
		 * 
		 * Updates state with parameters of this state if defined. Used to find the first
		 * defined parameter for a series of states acting as fallback for each other.
		 */
		public func void merge(DefaultWidgetDesigner.StateDesign state)
			super.merge(state)
			
			var MenuItemToggleStateDesign cbstate = state cast MenuItemToggleStateDesign
			
			if pImageBox != null
				cbstate.pImageBox = pImageBox
			end
			if pImageMark != null
				cbstate.pImageMark = pImageMark
			end
		end
		
		/**
		 * \brief Apply state design to widget.
		 * 
		 * This is typically called on a merged design to find the first defined parameters.
		 */
		public func void apply(Widget widget)
			super.apply(widget)
			
			var MenuItemToggle menuItem = widget cast MenuItemToggle
			var DisplayImage widgetBox = menuItem.getBoxWidget() cast DisplayImage
			var DisplayImage widgetMark = menuItem.getMarkWidget() cast DisplayImage
			
			widgetBox.setImage(pImageBox)
			
			if menuItem.getToggled()
				widgetMark.setImage(pImageMark)
				
			else
				widgetMark.setImage(null)
			end
		end
	end
	
	
	
	/** \brief Create new box designer. */
	public func new()
		setDesignNormal(MenuItemToggleStateDesign.new())
		setDesignDisabled(MenuItemToggleStateDesign.new())
		setDesignFocused(MenuItemToggleStateDesign.new())
		setDesignHover(MenuItemToggleStateDesign.new())
		setDesignFocusedHover(MenuItemToggleStateDesign.new())
	end
	
	/** \brief Create copy of widget designer. */
	public func new(DefaultMenuItemToggleDesigner designer) super(designer)
	end
	
	
	
	/** \brief Design for normal state. */
	public func MenuItemToggleStateDesign getMenuItemToggleDesignNormal()
		return getDesignNormal() cast MenuItemToggleStateDesign
	end
	
	/** \brief Design for disabled state. */
	public func MenuItemToggleStateDesign getMenuItemToggleDesignDisabled()
		return getDesignDisabled() cast MenuItemToggleStateDesign
	end
	
	/** \brief Design for focused state. */
	public func MenuItemToggleStateDesign getMenuItemToggleDesignFocused()
		return getDesignFocused() cast MenuItemToggleStateDesign
	end
	
	/** \brief Design for hover state. */
	public func MenuItemToggleStateDesign getMenuItemToggleDesignHover()
		return getDesignHover() cast MenuItemToggleStateDesign
	end
	
	/** \brief Design for focused hover state. */
	public func MenuItemToggleStateDesign getMenuItemToggleDesignFocusedHover()
		return getDesignFocusedHover() cast MenuItemToggleStateDesign
	end
	
	
	
	/**
	 * \brief Set parameter.
	 * 
	 * See DefaultButtonDesigner.setParameter for supported parameters.
	 * 
	 * Additional supported parameters:
	 * | name | value | Setter |
	 * | {state}.imageBox | Image | getDesign{state}.setImageBox |
	 * | {state}.imageMark | Image | getDesign{state}.setImageMark |
	 */
	public func void setParameter(String name, Object value)
		super.setParameter(name, value)
	end
	
	/** \brief Create copy of designer. */
	public func WidgetDesigner copyDesigner()
		return DefaultMenuItemToggleDesigner.new(this)
	end
	
	
	
	/** \brief Design widget. */
	public func void designWidget(Widget widget)
		// create box and mark widgets if not existing
		var MenuItemToggle menuItem = widget cast MenuItemToggle
		
		var DisplayImage widgetBox = menuItem.getBoxWidget() cast DisplayImage
		if widgetBox == null
			widgetBox = DisplayImage.new(null)
			menuItem.setBoxWidget(widgetBox)
		end
		
		var DisplayImage widgetMark = menuItem.getMarkWidget() cast DisplayImage
		if widgetMark == null
			widgetMark = DisplayImage.new(null)
			menuItem.setMarkWidget(widgetMark)
		end
		
		// design widget
		super.designWidget(widget)
	end
end
