/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */


namespace Dragengine.Gui.Designers

pin Dragengine.Gui.CanvasCreators
pin Dragengine.Gui.Borders.Factories
pin Dragengine.Scenery


/**
 * \brief Default implementation of WidgetDesigner for DisplayVideo.
 */
class DefaultVideoDesigner extends DefaultWidgetDesigner
	/** \brief Design for a particular widget state. */
	public class VideoStateDesign extends StateDesign
		var ColorMatrix pVideoColorTransform
		var Video pVideo
		
		
		
		/** \brief Create state design. */
		func new()
		end
		
		/** \brief Create copy of state design. */
		func new(VideoStateDesign stateDesign) super(stateDesign)
			pVideoColorTransform = stateDesign.pVideoColorTransform
			pVideo = stateDesign.pVideo
		end
		
		
		
		/** \brief Video color transform or null. */
		func ColorMatrix getVideoColorTransform()
			return pVideoColorTransform
		end
		
		/** \brief Set video color transform or null. */
		func void setVideoColorTransform(ColorMatrix colorMatrix)
			pVideoColorTransform = colorMatrix
		end
		
		/**
		 * \brief Video.
		 * \version 1.23
		 */
		func Video getVideo()
			return pVideo
		end
		
		/**
		 * \brief Set Video.
		 * \version 1.23
		 */
		func void setVideo(Video video)
			pVideo = video
		end
		
		
		
		/**
		 * \brief Set parameter.
		 * 
		 * Supported parameters:
		 * | name | value | Setter |
		 * | --- | --- | --- |
		 * | videoColorTransform | ColorMatrix | setVideoColorTransform |
		 * | video | Video | setVideo |
		 */
		func void setParameter(String name, Object value)
			if name.equals("videoColorTransform")
				setVideoColorTransform(value cast ColorMatrix)
				
			elif name.equals("video")
				setVideo(value cast Video)
				
			else
				super.setParameter(name, value)
			end
		end
		
		
		
		/** \brief Create copy of state. */
		func DefaultWidgetDesigner.StateDesign copyDesign()
			return VideoStateDesign.new(this)
		end
		
		/**
		 * \brief Merge states.
		 * 
		 * Updates state with parameters of this state if defined. Used to find the first
		 * defined parameter for a series of states acting as fallback for each other.
		 */
		func void merge(DefaultWidgetDesigner.StateDesign state)
			super.merge(state)
			
			var VideoStateDesign vdesign = state cast VideoStateDesign
			
			if pVideoColorTransform != null
				vdesign.pVideoColorTransform = pVideoColorTransform
				vdesign.pVideo = pVideo
			end
		end
		
		/**
		 * \brief Apply state design to widget.
		 * \deprected Use \ref #apply(Widget,DefaultVideoDesigner)
		 * 
		 * This is typically called on a merged design to find the first defined parameters.
		 */
		func void apply(Widget widget)
			super.apply(widget)
			
			var DisplayVideo displayVideo = widget cast DisplayVideo
			if not displayVideo.getProtectVideoColorTransform()
				if pVideoColorTransform != null
					displayVideo.setVideoColorTransform(pVideoColorTransform)
					
				else
					displayVideo.setVideoColorTransform(ColorMatrix.new())
				end
			end
		end
		
		/**
		 * \brief Apply state design to widget.
		 * 
		 * This is typically called on a merged design to find the first defined parameters.
		 */
		func void apply(Widget widget, DefaultVideoDesigner designer)
			super.apply(widget)
			
			var DisplayVideo displayVideo = widget cast DisplayVideo
			if not displayVideo.getProtectVideoColorTransform()
				if pVideoColorTransform != null
					displayVideo.setVideoColorTransform(pVideoColorTransform)
					
				else
					displayVideo.setVideoColorTransform(ColorMatrix.new())
				end
			end
			
			if designer.getReplaceVideo()
				displayVideo.setVideo(pVideo)
			end
		end
	end
	
	
	
	var bool pReplaceVideo
	
	
	
	/** \brief Create new video designer. */
	func new()
		setDesignNormal(VideoStateDesign.new())
		setDesignDisabled(VideoStateDesign.new())
		setDesignFocused(VideoStateDesign.new())
		setDesignHover(VideoStateDesign.new())
		setDesignFocusedHover(VideoStateDesign.new())
	end
	
	/** \brief Create copy of widget designer designer. */
	func new(DefaultVideoDesigner designer) super(designer)
	end
	
	
	
	/** \brief Design for normal state. */
	func VideoStateDesign getVideoDesignNormal()
		return getDesignNormal() cast VideoStateDesign
	end
	
	/** \brief Design for disabled state. */
	func VideoStateDesign getVideoDesignDisabled()
		return getDesignDisabled() cast VideoStateDesign
	end
	
	/** \brief Design for focused state. */
	func VideoStateDesign getVideoDesignFocused()
		return getDesignFocused() cast VideoStateDesign
	end
	
	/** \brief Design for hover state. */
	func VideoStateDesign getVideoDesignHover()
		return getDesignHover() cast VideoStateDesign
	end
	
	/** \brief Design for focused hover state. */
	func VideoStateDesign getVideoDesignFocusedHover()
		return getDesignFocusedHover() cast VideoStateDesign
	end
	
	
	
	/**
	 * \brief Replace video in widget.
	 * \version 1.23
	 */
	func bool getReplaceVideo()
		return pReplaceVideo
	end
	
	/**
	 * \brief Set replace video in widget.
	 * \version 1.23
	 */
	func void setReplaceVideo(bool ReplaceVideo)
		pReplaceVideo = ReplaceVideo
	end
	
	
	
	/**
	 * \brief Set parameter.
	 * 
	 * See DefaultWidgetDesigner.setParameter for supported parameters.
	 * 
	 * Additional supported parameters:
	 * | name | value | Setter |
	 * | --- | --- | --- |
	 * | replaceVideo | bool | setReplaceVideo |
	 * | {state}.videoColorTransform | ColorMatrix | getDesign{state}.setVideoColorTransform |
	 * | {state}.video | Video | getDesign{state}.setVideo |
	 */
	func void setParameter(String name, Object value)
		if name.equals("replaceVideo")
			setReplaceVideo(value cast bool)
			
		else
			super.setParameter(name, value)
		end
	end
	
	/** \brief Create copy of designer. */
	func WidgetDesigner copyDesigner()
		return DefaultVideoDesigner.new(this)
	end
	
	/** \brief Design widget. */
	public func void designWidget(Widget widget)
		(widgetStateFindDesign(widget) cast VideoStateDesign).apply(widget, this)
	end
end
