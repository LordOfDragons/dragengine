/* 
 * Drag[en]gine DragonScript Script Module
 *
 * Copyright (C) 2020, Roland Pl√ºss (roland@rptd.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */


namespace Dragengine.Gui.Designers

pin Dragengine.Gui.CanvasCreators
pin Dragengine.Gui.Designers
pin Dragengine.Gui.Layouts
pin Dragengine.Scenery


/**
 * \brief Default implementation of WidgetDesigner for ComboBox.
 */
class DefaultComboBoxDesigner extends DefaultWidgetDesigner
	private var StateDesign pDesignDroppedDown
	private var CanvasCreator pCreatorButtonDropDownNormal
	private var CanvasCreator pCreatorButtonDropDownDroppedDown
	private var CanvasCreator pCreatorButtonDropDownDisabled
	private var CanvasCreator pCreatorButtonDropDownHover
	private var Image pButtonDropDownImageNormal
	private var Image pButtonDropDownImageHover
	
	
	
	/** \brief Create new combo box designer. */
	public func new()
		pDesignDroppedDown = StateDesign.new()
	end
	
	/** \brief Create copy of widget designer. */
	public func new(DefaultComboBoxDesigner designer) super(designer)
		pDesignDroppedDown = StateDesign.new(designer.pDesignDroppedDown)
		
		pCreatorButtonDropDownNormal = designer.pCreatorButtonDropDownNormal
		pCreatorButtonDropDownDroppedDown = designer.pCreatorButtonDropDownDroppedDown
		pCreatorButtonDropDownHover = designer.pCreatorButtonDropDownHover
		pCreatorButtonDropDownDisabled = designer.pCreatorButtonDropDownDisabled
		
		pButtonDropDownImageNormal = designer.pButtonDropDownImageNormal
		pButtonDropDownImageHover = designer.pButtonDropDownImageHover
	end
	
	
	
	/** \brief Design for dropped down combo box state. */
	public func StateDesign getDesignDroppedDown()
		return pDesignDroppedDown
	end
	
	/** \brief Set design for dropped down combo box state. */
	protected func void setDesignDroppedDown(StateDesign design)
		if design == null
			throw EInvalidParam.new()
		end
		pDesignDroppedDown = design
	end
	
	
	
	/** \brief Canvas creator for drop down button normal combo box state. */
	public func CanvasCreator getCreatorButtonDropDownNormal()
		return pCreatorButtonDropDownNormal
	end
	
	/** \brief Set canvas creator for drop down button normal combo box state. */
	public func void setCreatorButtonDropDownNormal(CanvasCreator creator)
		pCreatorButtonDropDownNormal = creator
	end
	
	/** \brief Canvas creator for drop down button pressed combo box state. */
	public func CanvasCreator getCreatorButtonDropDownDroppedDown()
		return pCreatorButtonDropDownDroppedDown
	end
	
	/** \brief Set canvas creator for drop down button pressed combo box state. */
	public func void setCreatorButtonDropDownDroppedDown(CanvasCreator creator)
		pCreatorButtonDropDownDroppedDown = creator
	end
	
	/** \brief Canvas creator for drop down button disabled combo box state. */
	public func CanvasCreator getCreatorButtonDropDownDisabled()
		return pCreatorButtonDropDownDisabled
	end
	
	/** \brief Set canvas creator for drop down button disabled combo box state. */
	public func void setCreatorButtonDropDownDisabled(CanvasCreator creator)
		pCreatorButtonDropDownDisabled = creator
	end
	
	/** \brief Canvas creator for drop down button hover combo box state or \em null if not used. */
	public func CanvasCreator getCreatorButtonDropDownHover()
		return pCreatorButtonDropDownHover
	end
	
	/** \brief Set canvas creator for drop down button hover combo box state or \em null if not used. */
	public func void setCreatorButtonDropDownHover(CanvasCreator creator)
		pCreatorButtonDropDownHover = creator
	end
	
	
	
	/** \brief Button drop down image normal. */
	public func Image getButtonDropDownImageNormal()
		return pButtonDropDownImageNormal
	end
	
	/** \brief Set button drop down image normal. */
	public func void setButtonDropDownImageNormal(Image image)
		pButtonDropDownImageNormal = image
	end
	
	/** \brief Button drop down image hover. */
	public func Image getButtonDropDownImageHover()
		return pButtonDropDownImageHover
	end
	
	/** \brief Set button drop down image hover. */
	public func void setButtonDropDownImageHover(Image image)
		pButtonDropDownImageHover = image
	end
	
	
	
	/**
	 * \brief Set parameter.
	 * 
	 * Supported parameters:
	 * | name | value | Setter |
	 * | normal.canvas | CanvasCreator | getDesignNormal.setCanvasCreator |
	 * | normal.border | BorderFactory | getDesignNormal.setBorderFactory |
	 * | normal.font | Font | getDesignNormal.setFont |
	 * | normal.textColor | Color | getDesignNormal.setTextColor |
	 * | normal.padding | BorderSize | getDesignNormal.setPadding |
	 * | disabled.canvas | CanvasCreator | getDesignDisabled.setCanvasCreator |
	 * | disabled.border | BorderFactory | getDesignDisabled.setBorderFactory |
	 * | disabled.font | Font | getDesignDisabled.setFont |
	 * | disabled.textColor | Color | getDesignDisabled.setTextColor |
	 * | disabled.padding | BorderSize | getDesignDisabled.setPadding |
	 * | focused.canvas | CanvasCreator | getDesignFocused.setCanvasCreator |
	 * | focused.border | BorderFactory | getDesignFocused.setBorderFactory |
	 * | focused.font | Font | getDesignFocused.setFont |
	 * | focused.textColor | Color | getDesignFocused.setTextColor |
	 * | focused.padding | BorderSize | getDesignFocused.setPadding |
	 * | hover.canvas | CanvasCreator | getDesignHover.setCanvasCreator |
	 * | hover.border | BorderFactory | getDesignHover.setBorderFactory |
	 * | hover.font | Font | getDesignHover.setFont |
	 * | hover.textColor | Color | getDesignHover.setTextColor |
	 * | hover.padding | BorderSize | getDesignHover.setPadding |
	 * | droppedDown.canvas | CanvasCreator | getDesignDroppedDown.setCanvasCreator |
	 * | droppedDown.border | BorderFactory | getDesignDroppedDown.setBorderFactory |
	 * | droppedDown.font | Font | getDesignDroppedDown.setFont |
	 * | droppedDown.textColor | Color | getDesignDroppedDown.setTextColor |
	 * | droppedDown.padding | BorderSize | getDesignDroppedDown.setPadding |
	 * | buttonDropDownNormal | CanvasCreator | setCreatorButtonDropDownNormal |
	 * | buttonDropDownDroppedDown | CanvasCreator | setCreatorButtonDropDownDroppedDown |
	 * | buttonDropDownDisabled | CanvasCreator | setCreatorButtonDropDownDisabled |
	 * | buttonDropDownHover | CanvasCreator | setCreatorButtonDropDownHover |
	 * | imageDropDownNormal | Image | setButtonDropDownImageNormal |
	 * | imageDropDownHover | Image | setButtonDropDownImageHover |
	 */
	public func void setParameter(String name, Object value)
		if name.equals("buttonDropDownNormal")
			setCreatorButtonDropDownNormal(value cast CanvasCreator)
			
		elif name.equals("buttonDropDownDroppedDown")
			setCreatorButtonDropDownDroppedDown(value cast CanvasCreator)
			
		elif name.equals("buttonDropDownDisabled")
			setCreatorButtonDropDownDisabled(value cast CanvasCreator)
			
		elif name.equals("buttonDropDownHover")
			setCreatorButtonDropDownHover(value cast CanvasCreator)
			
		elif name.equals("imageDropDownNormal")
			setButtonDropDownImageNormal(value cast Image)
			
		elif name.equals("imageDropDownHover")
			setButtonDropDownImageHover(value cast Image)
			
		else
			super.setParameter(name, value)
		end
	end
	
	/** \brief Get state for parameter name selector component or null if not found. */
	protected func StateDesign getNamedStateDesign(String stateName)
		if stateName.equals("droppedDown")
			return pDesignDroppedDown
			
		else
			return super.getNamedStateDesign(stateName)
		end
	end
	
	/** \brief Create copy of designer. */
	public func WidgetDesigner copyDesigner()
		return DefaultComboBoxDesigner.new(this)
	end
	
	
	
	/** \brief Design widget. */
	public func void designWidget(Widget widget)
		super.designWidget(widget)
		
		var ComboBox comboBox = widget cast ComboBox
		
		var Panel widgetButtonDropDown = comboBox.getButtonDropDownWidget() cast Panel
		if widgetButtonDropDown == null
			widgetButtonDropDown = Panel.new()
			widgetButtonDropDown.setLayout(CentrizedBoxLayout.new(LayoutAxis.y))
			widgetButtonDropDown.setPadding(BorderSize.new(5))
			widgetButtonDropDown.setProtectPadding(true)
			widgetButtonDropDown.addWidget(DisplayImage.new())
			if pButtonDropDownImageNormal == null and pButtonDropDownImageHover == null
				// temporary hack until default designer uses images too
				widgetButtonDropDown.setPadding(BorderSize.new(5, 0, 5, 0))
				widgetButtonDropDown.addWidget(Label.new("v"))
			end
			comboBox.setDropDownButtonWidget(widgetButtonDropDown)
		end
		
		var DisplayImage displayImage = widgetButtonDropDown.getWidget(0) cast DisplayImage
		
		if comboBox.getEnabled()
			if comboBox.droppedDown()
				if pCreatorButtonDropDownDroppedDown == null
					widgetButtonDropDown.setBackgroundCanvasCreator(pCreatorButtonDropDownNormal)
					
				else
					widgetButtonDropDown.setBackgroundCanvasCreator(pCreatorButtonDropDownDroppedDown)
				end
				displayImage.setImage(pButtonDropDownImageNormal)
				
			elif comboBox.isMouseInside()
				if pCreatorButtonDropDownHover == null
					widgetButtonDropDown.setBackgroundCanvasCreator(pCreatorButtonDropDownNormal)
					
				else
					widgetButtonDropDown.setBackgroundCanvasCreator(pCreatorButtonDropDownHover)
				end
				
				if pButtonDropDownImageHover == null
					displayImage.setImage(pButtonDropDownImageNormal)
					
				else
					displayImage.setImage(pButtonDropDownImageHover)
				end
				
			else
				widgetButtonDropDown.setBackgroundCanvasCreator(pCreatorButtonDropDownNormal)
				displayImage.setImage(pButtonDropDownImageNormal)
			end
			
		else
			if pCreatorButtonDropDownDisabled == null
				widgetButtonDropDown.setBackgroundCanvasCreator(pCreatorButtonDropDownNormal)
				
			else
				widgetButtonDropDown.setBackgroundCanvasCreator(pCreatorButtonDropDownDisabled)
			end
			
			displayImage.setImage(pButtonDropDownImageNormal)
		end
	end
	
	/**
	 * \brief Get design to apply to widget.
	 * 
	 * Determines the state of the widget and the appropriate state design to use. The
	 * returned state design can be a set state design or a merge of multiple state
	 * designs using a fallback logic.
	 */
	protected func StateDesign widgetStateFindDesign(Widget widget)
		var ComboBox comboBox = widget cast ComboBox
		
		var bool editorFocus
		if comboBox.getEditor() != null
			var Widget editorWidget = comboBox.getEditor().getWidget()
			editorFocus = editorWidget.getHasFocus()
		end
		
		var StateDesign design = getDesignNormal()
		
		widget = getStateTrackWidget(widget)
		
		if widget.isFullEnabled()
			if widget.isMouseInside()
				design = design.copyDesign()
				getDesignHover().merge(design)
				
				if widget.getHasFocus() or editorFocus
					getDesignFocusedHover().merge(design)
				end
				
			elif widget.getHasFocus() or editorFocus
				design = design.copyDesign()
				getDesignFocused().merge(design)
			end
			
		else
			design = design.copyDesign()
			getDesignDisabled().merge(design)
		end
		
		if comboBox.getEnabled() and comboBox.droppedDown()
			design = design.copyDesign()
			pDesignDroppedDown.merge(design)
		end
		
		return design
	end
end
