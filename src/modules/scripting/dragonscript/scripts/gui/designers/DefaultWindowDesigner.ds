/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */


namespace Dragengine.Gui.Designers

pin Dragengine.Gui.CanvasCreators
pin Dragengine.Gui.Decorations.Factories
pin Dragengine.Scenery


/**
 * \brief Default implementation of WidgetDesigner for Window.
 */
class DefaultWindowDesigner extends DefaultWidgetDesigner implements WindowDesigner
	/** \brief Decoration factory or null. */
	private var DecorationFactory pDecorationFactory
	
	/** \brief Darkening color while modal window is in use. */
	private var Color pModalDarkenColor
	
	
	
	/** \brief Create new button designer. */
	public func new()
		this.pModalDarkenColor = Color.new( 0.65, 0.65, 0.65 )
	end
	
	/** \brief Create copy of widget designer. */
	public func new( DefaultWindowDesigner designer ) super( designer )
		this.pDecorationFactory = designer.pDecorationFactory
		this.pModalDarkenColor = designer.pModalDarkenColor
	end
	
	
	
	/** \brief Decoration factory or null. */
	public func DecorationFactory getDecorationFactory()
		return this.pDecorationFactory
	end
	
	/** \brief Set decoration factory or null. */
	public func void setDecorationFactory( DecorationFactory decorationFactory )
		this.pDecorationFactory = decorationFactory
	end
	
	/** \brief Darkening color while modal window is in use. */
	public func Color getModalDarkenColor()
		return this.pModalDarkenColor
	end
	
	/** \brief Set darkening color while modal window is in use. */
	public func void setModalDarkenColor( Color color )
		this.pModalDarkenColor = color
	end
	
	
	
	/**
	 * \brief Set parameter.
	 * 
	 * Supported parameters:
	 * | name | value | Setter |
	 * | normal.canvas | CanvasCreator | getDesignNormal.setCanvasCreator |
	 * | normal.border | BorderFactory | getDesignNormal.setBorderFactory |
	 * | normal.font | Font | getDesignNormal.setFont |
	 * | normal.textColor | Color | getDesignNormal.setTextColor |
	 * | normal.padding | BorderSize | getDesignNormal.setPadding |
	 * | disabled.canvas | CanvasCreator | getDesignDisabled.setCanvasCreator |
	 * | disabled.border | BorderFactory | getDesignDisabled.setBorderFactory |
	 * | disabled.font | Font | getDesignDisabled.setFont |
	 * | disabled.textColor | Color | getDesignDisabled.setTextColor |
	 * | disabled.padding | BorderSize | getDesignDisabled.setPadding |
	 * | focused.canvas | CanvasCreator | getDesignFocused.setCanvasCreator |
	 * | focused.border | BorderFactory | getDesignFocused.setBorderFactory |
	 * | focused.font | Font | getDesignFocused.setFont |
	 * | focused.textColor | Color | getDesignFocused.setTextColor |
	 * | focused.padding | BorderSize | getDesignFocused.setPadding |
	 * | hover.canvas | CanvasCreator | getDesignHover.setCanvasCreator |
	 * | hover.border | BorderFactory | getDesignHover.setBorderFactory |
	 * | hover.font | Font | getDesignHover.setFont |
	 * | hover.textColor | Color | getDesignHover.setTextColor |
	 * | hover.padding | BorderSize | getDesignHover.setPadding |
	 * | decoration | DecorationFactory | setDecorationFactory |
	 * | modalDarken | Color | setModalDarkenColor |
	 */
	public func void setParameter( String name, Object value )
		if name.equals( "decoration" )
			this.setDecorationFactory( value cast DecorationFactory )
			
		elif name.equals( "modalDarken" )
			this.setModalDarkenColor( value cast Color )
			
		else
			super.setParameter( name, value )
		end
	end
	
	/** \brief Create copy of designer. */
	public func WidgetDesigner copyDesigner()
		return DefaultWindowDesigner.new( this )
	end
	
	
	
	/** \brief Design widget. */
	public func void designWidget( Widget widget )
		super.designWidget( widget )
		
		var Window window = widget cast Window
		
		if not window.getProtectModalDarkenColor()
			window.setModalDarkenColor( this.pModalDarkenColor )
		end
	end
	
	
	
	/** \brief Create decoration for window. */
	public func Decoration createDecoration()
		if this.pDecorationFactory != null
			return this.pDecorationFactory.createDecoration()
			
		else
			return null
		end
	end
end
