/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */


namespace Dragengine.Gui.Designers

pin Dragengine.Scenery


/**
 * \brief List of widget designers for use with gui theme creation.
 *
 * The designers in this list server as blue prints for designers to be used by automatic
 * gui themes and must not be changed. For this reason call copyDesigner() on received
 * designers to create a new designer with appropriate configuration for modifying and
 * using. If not modified designers can be directly assigned to widgets. Widget users have
 * to keep in mind the used widget designers are shared.
 */
class WidgetDesigners
	var Dictionary pDesigners
	
	
	
	/** \brief Create widget designer factories. */
	func new()
		pDesigners = Dictionary.new()
	end
	
	
	
	/** \brief Add designer. */
	func void add(String name, WidgetDesigner designer)
		pDesigners.setAt(name, designer)
	end
	
	/** \brief Named designer or \em null if not found. */
	func WidgetDesigner getNamed(String name)
		return pDesigners.getAt(name, null) cast WidgetDesigner
	end
	
	/** \brief Remove designer if present. */
	func void removeNamed(String name)
		pDesigners.removeIfExisting(name)
	end
	
	/** \brief Remove all factories. */
	func void removeAll()
		pDesigners.removeAll()
	end
	
	
	
	/** \brief Add default factories. */
	func void addDefaultDesigners()
		add("Button", DefaultButtonDesigner.new())
		add("ButtonWidget", DefaultButtonWidgetDesigner.new())
		add("CheckBox", DefaultCheckBoxDesigner.new())
		add("ComboBox", DefaultComboBoxDesigner.new())
		add("Desktop", DefaultWidgetDesigner.new())
		add("Image", DefaultImageDesigner.new())
		add("Label", DefaultLabelDesigner.new())
		add("ListBox", DefaultWidgetDesigner.new())
		add("OptionBox", DefaultOptionBoxDesigner.new())
		add("PlayerChoiceEntry", DefaultLabelDesigner.new())
		add("ProgressBar", DefaultProgressBarDesigner.new())
		add("ProgressGauge", DefaultProgressGaugeDesigner.new())
		add("ScrollBar", DefaultScrollBarDesigner.new())
		add("Slider", DefaultSliderDesigner.new())
		add("SpinButton", DefaultSpinButtonDesigner.new())
		add("TextArea", DefaultWidgetDesigner.new())
		add("TextField", DefaultWidgetDesigner.new())
		add("Video", DefaultVideoDesigner.new())
		add("Widget", DefaultWidgetDesigner.new())
		add("Window", DefaultWindowDesigner.new())
		add("MenuItemToggle", DefaultMenuItemToggleDesigner.new())
		add("MenuItemSubMenu", DefaultMenuItemSubMenuDesigner.new())
	end
end
