/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */


namespace Dragengine.Gui.Designers

pin Dragengine.Gui.CanvasCreators
pin Dragengine.Gui.Designers
pin Dragengine.Gui.Events
pin Dragengine.Scenery


/**
 * \brief Default implementation of SpinButtonDesigner.
 */
class DefaultSpinButtonDesigner extends DefaultWidgetDesigner implements SpinButtonDesigner
	/** \brief Spin button size. */
	private var int pSize
	
	/** \brief Button designer factory for up button. */
	private var WidgetDesigner pButtonUp
	
	/** \brief Button designer factory for down button. */
	private var WidgetDesigner pButtonDown
	
	/** \brief Button up image normal. */
	private var Image pButtonUpImageNormal
	
	/** \brief Button up image hover. */
	private var Image pButtonUpImageHover
	
	/** \brief Button down image normal. */
	private var Image pButtonDownImageNormal
	
	/** \brief Button down image hover. */
	private var Image pButtonDownImageHover
	
	
	
	/** \brief Create new spin button designer. */
	public func new()
		this.pSize = 16
		
		this.pButtonUp = DefaultButtonDesigner.new()
		this.pButtonDown = DefaultButtonDesigner.new()
	end
	
	/** \brief Create copy of widget designer. */
	public func new( DefaultSpinButtonDesigner designer ) super( designer )
		this.pSize = designer.pSize
		this.pButtonUp = designer.pButtonUp
		this.pButtonDown = designer.pButtonDown
		this.pButtonUpImageNormal = designer.pButtonUpImageNormal
		this.pButtonUpImageHover = designer.pButtonUpImageHover
		this.pButtonDownImageNormal = designer.pButtonDownImageNormal
		this.pButtonDownImageHover = designer.pButtonDownImageHover
	end
	
	
	
	/** \brief Spin button size. */
	public func int getSize()
		return this.pSize
	end
	
	/** \brief Set spinbutton size. */
	public func void setSize( int size )
		if size < 0
			throw EInvalidParam.new()
		end
		this.pSize = size
	end
	
	
	
	/** \brief Button designer factory for up button. */
	public func WidgetDesigner getButtonUp()
		return this.pButtonUp
	end
	
	/** \brief Set button designer factory for up button. */
	public func void setButtonUp( WidgetDesigner factory )
		if factory == null
			throw EInvalidParam.new()
		end
		this.pButtonUp = factory
	end
	
	/** \brief Button designer factory for down button. */
	public func WidgetDesigner getButtonDown()
		return this.pButtonDown
	end
	
	/** \brief Set button designer factory for down button. */
	public func void setButtonDown( WidgetDesigner factory )
		if factory == null
			throw EInvalidParam.new()
		end
		this.pButtonDown = factory
	end
	
	
	
	/** \brief Button up image normal. */
	public func Image getButtonUpImageNormal()
		return this.pButtonUpImageNormal
	end
	
	/** \brief Set button up image normal. */
	public func void setButtonUpImageNormal( Image image )
		this.pButtonUpImageNormal = image
	end
	
	/** \brief Button up image hover. */
	public func Image getButtonUpImageHover()
		return this.pButtonUpImageHover
	end
	
	/** \brief Set button up image hover. */
	public func void setButtonUpImageHover( Image image )
		this.pButtonUpImageHover = image
	end
	
	/** \brief Button down image normal. */
	public func Image getButtonDownImageNormal()
		return this.pButtonDownImageNormal
	end
	
	/** \brief Set button down image normal. */
	public func void setButtonDownImageNormal( Image image )
		this.pButtonDownImageNormal = image
	end
	
	/** \brief Button down image hover. */
	public func Image getButtonDownImageHover()
		return this.pButtonDownImageHover
	end
	
	/** \brief Set button down image hover. */
	public func void setButtonDownImageHover( Image image )
		this.pButtonDownImageHover = image
	end
	
	
	
	/**
	 * \brief Set parameter.
	 * 
	 * Supported parameters:
	 * | name | value | Setter |
	 * | size | int | setSize |
	 * | buttonUp | WidgetDesigner | setButtonUp |
	 * | buttonDown | WidgetDesigner | setButtonDown |
	 * | imageUpNormal | Image | setButtonUpImageNormal |
	 * | imageUpHover | Image | setButtonUpImageHover |
	 * | imageDownNormal | Image | setButtonDownImageNormal |
	 * | imageDownHover | Image | setButtonDownImageHover |
	 */
	public func void setParameter( String name, Object value )
		if name.equals( "size" )
			this.setSize( value cast int )
			
		elif name.equals( "buttonUp" )
			this.setButtonUp( value cast WidgetDesigner )
			
		elif name.equals( "buttonDown" )
			this.setButtonDown( value cast WidgetDesigner )
			
		elif name.equals( "imageUpNormal" )
			this.setButtonUpImageNormal( value cast Image )
			
		elif name.equals( "imageUpHover" )
			this.setButtonUpImageHover( value cast Image )
			
		elif name.equals( "imageDownNormal" )
			this.setButtonDownImageNormal( value cast Image )
			
		elif name.equals( "imageDownHover" )
			this.setButtonDownImageHover( value cast Image )
			
		else
			super.setParameter( name, value )
		end
	end
	
	/** \brief Create copy of designer. */
	public func WidgetDesigner copyDesigner()
		return DefaultSpinButtonDesigner.new( this )
	end
	
	
	
	/** \brief Size of spin button. */
	public func int spinButtonSize( SpinButton spinbutton )
		return this.pSize
	end
	
	/** \brief Create up button. */
	public func Button createButtonUp( SpinButton spinbutton )
		var Button button = Button.new()
		
		button.setImage( this.pButtonUpImageNormal )
		button.setHoverImage( this.pButtonUpImageHover )
		if this.pButtonUpImageNormal == null
			button.setText( "^" )
			button.setMinimumSize( Point.new( 0, this.spinButtonSize( spinbutton ) ) )
		end
		button.setDesigner( this.pButtonUp )
		
		return button
	end
	
	/** \brief Create down button. */
	public func Button createButtonDown( SpinButton spinbutton )
		var Button button = Button.new()
		
		button.setImage( this.pButtonDownImageNormal )
		button.setHoverImage( this.pButtonDownImageHover )
		if this.pButtonDownImageNormal == null
			button.setText( "v" )
			button.setMinimumSize( Point.new( 0, this.spinButtonSize( spinbutton ) ) )
		end
		button.setDesigner( this.pButtonDown )
		
		return button
	end
	
	
	
	/**
	 * \brief Design widget.
	 * 
	 * Method not used for SpinButton. Default implementation is empty. Use the methods
	 * defined in SpinButtonDesigner to design the SpinButton.
	 */
	public func void designWidget( Widget widget )
	end
end
