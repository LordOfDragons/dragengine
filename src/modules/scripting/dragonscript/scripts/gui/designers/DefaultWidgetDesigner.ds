/* 
 * Drag[en]gine DragonScript Script Module
 *
 * Copyright (C) 2020, Roland Pl√ºss (roland@rptd.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */


namespace Dragengine.Gui.Designers

pin Dragengine.Gui.CanvasCreators
pin Dragengine.Gui.Borders.Factories
pin Dragengine.Gui.MousePointers.Factories
pin Dragengine.Scenery


/**
 * \brief Default implementation of WidgetDesigner.
 * 
 * Changes canvas creator and border depending on widget. Supports desigining widget
 * for normal state, disabled state, hovering state and focused state. Default
 * implementation chooses design depending on widget enabled, has focus and hover
 * state. Subclass can overwrite to use a different logi.
 */
class DefaultWidgetDesigner implements WidgetDesigner
	/** \brief Design for a particular widget state. */
	public class StateDesign
		private var CanvasCreator pCanvasCreator
		private var BorderFactory pBorderFactory
		private var Font pFont
		private var Color pTextColor
		private var BorderSize pPadding
		private var Point pMinimumSize
		private var MousePointerFactory pMousePointerFactory
		
		
		
		/** \brief Create state design. */
		public func new()
		end
		
		/** \brief Create copy of state design. */
		public func new( StateDesign stateDesign )
			this.pCanvasCreator = stateDesign.pCanvasCreator
			this.pBorderFactory = stateDesign.pBorderFactory
			this.pFont = stateDesign.pFont
			this.pTextColor = stateDesign.pTextColor
			this.pPadding = stateDesign.pPadding
			this.pMinimumSize = stateDesign.pMinimumSize
			this.pMousePointerFactory = stateDesign.pMousePointerFactory
		end
		
		/**
		 * \brief Set parameter.
		 * 
		 * Supported parameters:
		 * 
		 * | name | value | Setter |
		 * | canvas | CanvasCreator | setCanvasCreator |
		 * | border | BorderFactory | setBorderFactory |
		 * | font | Font | setFont |
		 * | textColor | Color | setTextColor |
		 * | padding | BorderSize | setPadding |
		 * | minimumSize | Point | setMinimumSize |
		 * | mousePointer | MousePointerFactory | setMousePointerFactory |
		 */
		public func void setParameter( String name, Object value )
			if name.equals( "canvas" )
				this.setCanvasCreator( value cast CanvasCreator )
				
			elif name.equals( "border" )
				this.setBorderFactory( value cast BorderFactory )
				
			elif name.equals( "font" )
				this.setFont( value cast Font )
				
			elif name.equals( "textColor" )
				this.setTextColor( value cast Color )
				
			elif name.equals( "padding" )
				this.setPadding( value cast BorderSize )
				
			elif name.equals( "minimumSize" )
				this.setMinimumSize( value cast Point )
				
			elif name.equals( "mousePointer" )
				this.setMousePointerFactory( value cast MousePointerFactory )
				
			else
				throw EInvalidParam.new( "unknown state parameter: " + name )
			end
		end
		
		
		
		/** \brief Canvas creator or null. */
		public func CanvasCreator getCanvasCreator()
			return this.pCanvasCreator
		end
		
		/** \brief Set canvas creator or null. */
		public func void setCanvasCreator( CanvasCreator creator )
			this.pCanvasCreator = creator
		end
		
		/** \brief Border factory or null. */
		public func BorderFactory getBorderFactory()
			return this.pBorderFactory
		end
		
		/** \brief Set border factory or null. */
		public func void setBorderFactory( BorderFactory borderFactory )
			this.pBorderFactory = borderFactory
		end
		
		/** \brief Font or null. */
		public func Font getFont()
			return this.pFont
		end
		
		/** \brief Set font or null. */
		public func void setFont( Font font )
			this.pFont = font
		end
		
		/** \brief Text color or null. */
		public func Color getTextColor()
			return this.pTextColor
		end
		
		/** \brief Set text color or null. */
		public func void setTextColor( Color color )
			this.pTextColor = color
		end
		
		/** \brief Padding or null. */
		public func BorderSize getPadding()
			return this.pPadding
		end
		
		/** \brief Set padding or null. */
		public func void setPadding( BorderSize padding )
			this.pPadding = padding
		end
		
		/** \brief Minimum widget size or null. */
		public func Point getMinimumSize()
			return this.pMinimumSize
		end
		
		/** \brief Set minimum widget size or null. */
		public func void setMinimumSize( Point size )
			this.pMinimumSize = size
		end
		
		/** \brief Mouse pointer factory or null. */
		public func MousePointerFactory getMousePointerFactory()
			return this.pMousePointerFactory
		end
		
		/** \brief Mouse pointer factory or null. */
		public func void setMousePointerFactory( MousePointerFactory factory )
			this.pMousePointerFactory = factory
		end
		
		
		
		/** \brief Create copy of state. */
		public func StateDesign copyDesign()
			return StateDesign.new( this )
		end
		
		/**
		 * \brief Merge states.
		 * 
		 * Updates state with parameters of this state if defined. Used to find the first
		 * defined parameter for a series of states acting as fallback for each other.
		 */
		public func void merge( StateDesign state )
			if this.pCanvasCreator != null
				state.pCanvasCreator = this.pCanvasCreator
			end
			if this.pBorderFactory != null
				state.pBorderFactory = this.pBorderFactory
			end
			if this.pPadding != null
				state.pPadding = this.pPadding
			end
			if this.pFont != null
				state.pFont = this.pFont
			end
			if this.pTextColor != null
				state.pTextColor = this.pTextColor
			end
			if this.pMinimumSize != null
				state.pMinimumSize = this.pMinimumSize
			end
			if this.pMousePointerFactory != null
				state.pMousePointerFactory = this.pMousePointerFactory
			end
		end
		
		/**
		 * \brief Apply state design to widget.
		 * 
		 * This is typically called on a merged design to find the first defined parameters.
		 */
		public func void apply( Widget widget )
			if not widget.getProtectBackgroundCanvasCreator()
				widget.setBackgroundCanvasCreator( this.pCanvasCreator )
			end
			
			if not widget.getProtectBorder()
				if this.pBorderFactory != null
					widget.setBorder( this.pBorderFactory.createBorder() )
					
				else
					widget.setBorder( null )
				end
			end
			
			if not widget.getProtectPadding()
				if this.pPadding != null
					widget.setPadding( this.pPadding )
					
				else
					widget.setPadding( BorderSize.new() )
				end
			end
			
			if not widget.getProtectFont()
				widget.setFont( this.pFont )
			end
			
			if not widget.getProtectTextColor()
				widget.setTextColor( this.pTextColor )
			end
			
			if not widget.getProtectMinimumSize()
				widget.setMinimumSize( this.pMinimumSize )
			end
			
			if not widget.getProtectMousePointer()
				widget.setMousePointer( this.pMousePointerFactory )
			end
		end
	end
	
	
	
	/** \brief Design for normal state. */
	private var StateDesign pDesignNormal
	
	/** \brief Design for disabled state. */
	private var StateDesign pDesignDisabled
	
	/** \brief Design for focused state. */
	private var StateDesign pDesignFocused
	
	/** \brief Design for hover state. */
	private var StateDesign pDesignHover
	
	/** \brief Design for focused hover state. */
	private var StateDesign pDesignFocusedHover
	
	
	
	/** \brief Create new widget designer. */
	public func new()
		this.pDesignNormal = StateDesign.new()
		this.pDesignDisabled = StateDesign.new()
		this.pDesignFocused = StateDesign.new()
		this.pDesignHover = StateDesign.new()
		this.pDesignFocusedHover = StateDesign.new()
	end
	
	/** \brief Create copy of widget designer. */
	public func new( DefaultWidgetDesigner designer )
		this.pDesignNormal = designer.pDesignNormal.copyDesign()
		this.pDesignDisabled = designer.pDesignDisabled.copyDesign()
		this.pDesignFocused = designer.pDesignFocused.copyDesign()
		this.pDesignHover = designer.pDesignHover.copyDesign()
		this.pDesignFocusedHover = designer.pDesignFocusedHover.copyDesign()
	end
	
	
	
	/** \brief Design for normal state. */
	public func StateDesign getDesignNormal()
		return this.pDesignNormal
	end
	
	/** \brief Set design for normal state. */
	protected func void setDesignNormal( StateDesign design )
		if design == null
			throw EInvalidParam.new()
		end
		this.pDesignNormal = design
	end
	
	/** \brief Design for disabled state. */
	public func StateDesign getDesignDisabled()
		return this.pDesignDisabled
	end
	
	/** \brief Set design for disabled state. */
	protected func void setDesignDisabled( StateDesign design )
		if design == null
			throw EInvalidParam.new()
		end
		this.pDesignDisabled = design
	end
	
	/** \brief Design for focused state. */
	public func StateDesign getDesignFocused()
		return this.pDesignFocused
	end
	
	/** \brief Set design for focused state. */
	protected func void setDesignFocused( StateDesign design )
		if design == null
			throw EInvalidParam.new()
		end
		this.pDesignFocused = design
	end
	
	/** \brief Design for hover state. */
	public func StateDesign getDesignHover()
		return this.pDesignHover
	end
	
	/** \brief Set design for hover state. */
	protected func void setDesignHover( StateDesign design )
		if design == null
			throw EInvalidParam.new()
		end
		this.pDesignHover = design
	end
	
	/** \brief Design for focused hover state. */
	public func StateDesign getDesignFocusedHover()
		return this.pDesignFocusedHover
	end
	
	/** \brief Set design for focused hover state. */
	protected func void setDesignFocusedHover( StateDesign design )
		if design == null
			throw EInvalidParam.new()
		end
		this.pDesignFocusedHover = design
	end
	
	
	
	/**
	 * \brief Set parameter.
	 * 
	 * Supported parameters:
	 * 
	 * | name | value | Setter |
	 * | {state}.canvas | CanvasCreator | getDesign{state}.setCanvasCreator |
	 * | {state}.border | BorderFactory | getDesign{state}.setBorderFactory |
	 * | {state}.font | Font | getDesign{state}.setFont |
	 * | {state}.textColor | Color | getDesign{state}.setTextColor |
	 * | {state}.padding | BorderSize | getDesign{state}.setPadding |
	 * | {state}.minimumSize | Point | getDesign{state}.setMinimumSize |
	 * | {state}.mousePointer | MousePointerFactory | getDesign{state}.setMousePointerFactory |
	 * 
	 * Whereas {state} can be:
	 * | name | value |
	 * | normal | Widget is in normal state |
	 * | disabled | Widget is disabled |
	 * | focused | Widget has focus |
	 * | hover | Mouse pointer hover over widget or children thereof |
	 * | focusedHover | Mouse pointer hover over widget or children thereof while focused |
	 */
	public func void setParameter( String name, Object value )
		var int delimiter = name.find( '.' )
		if delimiter == -1
			throw EInvalidParam.new( "unknown parameter: " + name )
		end
		
		var StateDesign stateDesign = this.getNamedStateDesign( name.substring( 0, delimiter ) )
		if stateDesign == null
			throw EInvalidParam.new( "unknown state: " + name.substring( 0, delimiter ) )
		end
		
		stateDesign.setParameter( name.substring( delimiter + 1 ), value )
	end
	
	/** \brief Get state for parameter name selector component or null if not found. */
	protected func StateDesign getNamedStateDesign( String stateName )
		if stateName.equals( "normal" )
			return this.pDesignNormal
			
		elif stateName.equals( "disabled" )
			return this.pDesignDisabled
			
		elif stateName.equals( "focused" )
			return this.pDesignFocused
			
		elif stateName.equals( "hover" )
			return this.pDesignHover
			
		elif stateName.equals( "focusedHover" )
			return this.pDesignFocusedHover
			
		else
			return null
		end
	end
	
	/** \brief Create copy of designer. */
	public func WidgetDesigner copyDesigner()
		return DefaultWidgetDesigner.new( this )
	end
	
	
	
	/** \brief Design widget. */
	public func void designWidget( Widget widget )
		this.widgetStateFindDesign( widget ).apply( widget )
	end
	
	/**
	 * \brief Get design to apply to widget.
	 * 
	 * Determines the state of the widget and the appropriate state design to use. The
	 * returned state design can be a set state design or a merge of multiple state
	 * designs using a fallback logic.
	 */
	protected func StateDesign widgetStateFindDesign( Widget widget )
		var StateDesign design = this.pDesignNormal
		
		widget = this.getStateTrackWidget( widget )
		
		if widget.isFullEnabled()
			if widget.isMouseInside()
				design = design.copyDesign()
				this.pDesignHover.merge( design )
				
				if widget.getHasFocus()
					this.pDesignFocusedHover.merge( design )
				end
				
			elif widget.getHasFocus()
				design = design.copyDesign()
				this.pDesignFocused.merge( design )
			end
			
		else
			design = design.copyDesign()
			this.pDesignDisabled.merge( design )
		end
		
		return design
	end
	
	/**
	 * \brief Find state track widget.
	 * \version 1.5
	 * 
	 * Finds the widget highest up in the parent widget chain with getStateChangeNotifyChildren()
	 * set to true. If not found returns \em widget.
	 */
	public func Widget getStateTrackWidget( Widget widget )
		var Container parent = widget.getParent()
		
		while true
			parent = widget.getParent()
			if parent == null or not parent.getStateChangeNotifyChildren()
				break
			end
			widget = parent
		end
		
		return widget
	end
end
