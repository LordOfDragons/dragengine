/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */


namespace Dragengine.Gui.Designers

pin Dragengine.Gui.CanvasCreators
pin Dragengine.Gui.Borders.Factories
pin Dragengine.Gui.MousePointers.Factories
pin Dragengine.Scenery


/**
 * \brief Default implementation of WidgetDesigner.
 * 
 * Changes canvas creator and border depending on widget. Supports desigining widget
 * for normal state, disabled state, hovering state and focused state. Default
 * implementation chooses design depending on widget enabled, has focus and hover
 * state. Subclass can overwrite to use a different logi.
 */
class DefaultWidgetDesigner implements WidgetDesigner
	/** \brief Design for a particular widget state. */
	public class StateDesign
		private var CanvasCreator pCanvasCreator
		private var BorderFactory pBorderFactory
		private var Font pFont
		private var Color pTextColor
		private var BorderSize pPadding
		private var Point pMinimumSize
		private var MousePointerFactory pMousePointerFactory
		
		
		
		/** \brief Create state design. */
		public func new()
		end
		
		/** \brief Create copy of state design. */
		public func new(StateDesign stateDesign)
			pCanvasCreator = stateDesign.pCanvasCreator
			pBorderFactory = stateDesign.pBorderFactory
			pFont = stateDesign.pFont
			pTextColor = stateDesign.pTextColor
			pPadding = stateDesign.pPadding
			pMinimumSize = stateDesign.pMinimumSize
			pMousePointerFactory = stateDesign.pMousePointerFactory
		end
		
		/**
		 * \brief Set parameter.
		 * 
		 * Supported parameters:
		 * 
		 * | name | value | Setter |
		 * | canvas | CanvasCreator | setCanvasCreator |
		 * | border | BorderFactory | setBorderFactory |
		 * | font | Font | setFont |
		 * | textColor | Color | setTextColor |
		 * | padding | BorderSize | setPadding |
		 * | minimumSize | Point | setMinimumSize |
		 * | mousePointer | MousePointerFactory | setMousePointerFactory |
		 */
		public func void setParameter(String name, Object value)
			if name.equals("canvas")
				setCanvasCreator(value cast CanvasCreator)
				
			elif name.equals("border")
				setBorderFactory(value cast BorderFactory)
				
			elif name.equals("font")
				setFont(value cast Font)
				
			elif name.equals("textColor")
				setTextColor(value cast Color)
				
			elif name.equals("padding")
				setPadding(value cast BorderSize)
				
			elif name.equals("minimumSize")
				setMinimumSize(value cast Point)
				
			elif name.equals("mousePointer")
				setMousePointerFactory(value cast MousePointerFactory)
				
			else
				throw EInvalidParam.new("unknown state parameter: " + name)
			end
		end
		
		
		
		/** \brief Canvas creator or null. */
		public func CanvasCreator getCanvasCreator()
			return pCanvasCreator
		end
		
		/** \brief Set canvas creator or null. */
		public func void setCanvasCreator(CanvasCreator creator)
			pCanvasCreator = creator
		end
		
		/** \brief Border factory or null. */
		public func BorderFactory getBorderFactory()
			return pBorderFactory
		end
		
		/** \brief Set border factory or null. */
		public func void setBorderFactory(BorderFactory borderFactory)
			pBorderFactory = borderFactory
		end
		
		/** \brief Font or null. */
		public func Font getFont()
			return pFont
		end
		
		/** \brief Set font or null. */
		public func void setFont(Font font)
			pFont = font
		end
		
		/** \brief Text color or null. */
		public func Color getTextColor()
			return pTextColor
		end
		
		/** \brief Set text color or null. */
		public func void setTextColor(Color color)
			pTextColor = color
		end
		
		/** \brief Padding or null. */
		public func BorderSize getPadding()
			return pPadding
		end
		
		/** \brief Set padding or null. */
		public func void setPadding(BorderSize padding)
			pPadding = padding
		end
		
		/** \brief Minimum widget size or null. */
		public func Point getMinimumSize()
			return pMinimumSize
		end
		
		/** \brief Set minimum widget size or null. */
		public func void setMinimumSize(Point size)
			pMinimumSize = size
		end
		
		/** \brief Mouse pointer factory or null. */
		public func MousePointerFactory getMousePointerFactory()
			return pMousePointerFactory
		end
		
		/** \brief Mouse pointer factory or null. */
		public func void setMousePointerFactory(MousePointerFactory factory)
			pMousePointerFactory = factory
		end
		
		
		
		/** \brief Create copy of state. */
		public func StateDesign copyDesign()
			return StateDesign.new(this)
		end
		
		/**
		 * \brief Merge states.
		 * 
		 * Updates state with parameters of this state if defined. Used to find the first
		 * defined parameter for a series of states acting as fallback for each other.
		 */
		public func void merge(StateDesign state)
			if pCanvasCreator != null
				state.pCanvasCreator = pCanvasCreator
			end
			if pBorderFactory != null
				state.pBorderFactory = pBorderFactory
			end
			if pPadding != null
				state.pPadding = pPadding
			end
			if pFont != null
				state.pFont = pFont
			end
			if pTextColor != null
				state.pTextColor = pTextColor
			end
			if pMinimumSize != null
				state.pMinimumSize = pMinimumSize
			end
			if pMousePointerFactory != null
				state.pMousePointerFactory = pMousePointerFactory
			end
		end
		
		/**
		 * \brief Apply state design to widget.
		 * 
		 * This is typically called on a merged design to find the first defined parameters.
		 */
		public func void apply(Widget widget)
			if not widget.getProtectBackgroundCanvasCreator()
				widget.setBackgroundCanvasCreator(pCanvasCreator)
			end
			
			if not widget.getProtectBorder()
				if pBorderFactory != null
					widget.setBorder(pBorderFactory.createBorder())
					
				else
					widget.setBorder(null)
				end
			end
			
			if not widget.getProtectPadding()
				if pPadding != null
					widget.setPadding(pPadding)
					
				else
					widget.setPadding(BorderSize.new())
				end
			end
			
			if not widget.getProtectFont()
				widget.setFont(pFont)
			end
			
			if not widget.getProtectTextColor()
				widget.setTextColor(pTextColor)
			end
			
			if not widget.getProtectMinimumSize()
				widget.setMinimumSize(pMinimumSize)
			end
			
			if not widget.getProtectMousePointer()
				widget.setMousePointer(pMousePointerFactory)
			end
		end
	end
	
	
	
	private var StateDesign pDesignNormal
	private var StateDesign pDesignDisabled
	private var StateDesign pDesignFocused
	private var StateDesign pDesignHover
	private var StateDesign pDesignFocusedHover
	
	
	
	/** \brief Create new widget designer. */
	public func new()
		pDesignNormal = StateDesign.new()
		pDesignDisabled = StateDesign.new()
		pDesignFocused = StateDesign.new()
		pDesignHover = StateDesign.new()
		pDesignFocusedHover = StateDesign.new()
	end
	
	/** \brief Create copy of widget designer. */
	public func new(DefaultWidgetDesigner designer)
		pDesignNormal = designer.pDesignNormal.copyDesign()
		pDesignDisabled = designer.pDesignDisabled.copyDesign()
		pDesignFocused = designer.pDesignFocused.copyDesign()
		pDesignHover = designer.pDesignHover.copyDesign()
		pDesignFocusedHover = designer.pDesignFocusedHover.copyDesign()
	end
	
	
	
	/** \brief Design for normal state. */
	public func StateDesign getDesignNormal()
		return pDesignNormal
	end
	
	/** \brief Set design for normal state. */
	protected func void setDesignNormal(StateDesign design)
		if design == null
			throw EInvalidParam.new()
		end
		pDesignNormal = design
	end
	
	/** \brief Design for disabled state. */
	public func StateDesign getDesignDisabled()
		return pDesignDisabled
	end
	
	/** \brief Set design for disabled state. */
	protected func void setDesignDisabled(StateDesign design)
		if design == null
			throw EInvalidParam.new()
		end
		pDesignDisabled = design
	end
	
	/** \brief Design for focused state. */
	public func StateDesign getDesignFocused()
		return pDesignFocused
	end
	
	/** \brief Set design for focused state. */
	protected func void setDesignFocused(StateDesign design)
		if design == null
			throw EInvalidParam.new()
		end
		pDesignFocused = design
	end
	
	/** \brief Design for hover state. */
	public func StateDesign getDesignHover()
		return pDesignHover
	end
	
	/** \brief Set design for hover state. */
	protected func void setDesignHover(StateDesign design)
		if design == null
			throw EInvalidParam.new()
		end
		pDesignHover = design
	end
	
	/** \brief Design for focused hover state. */
	public func StateDesign getDesignFocusedHover()
		return pDesignFocusedHover
	end
	
	/** \brief Set design for focused hover state. */
	protected func void setDesignFocusedHover(StateDesign design)
		if design == null
			throw EInvalidParam.new()
		end
		pDesignFocusedHover = design
	end
	
	
	
	/**
	 * \brief Set parameter.
	 * 
	 * Supported parameters:
	 * 
	 * | name | value | Setter |
	 * | {state}.canvas | CanvasCreator | getDesign{state}.setCanvasCreator |
	 * | {state}.border | BorderFactory | getDesign{state}.setBorderFactory |
	 * | {state}.font | Font | getDesign{state}.setFont |
	 * | {state}.textColor | Color | getDesign{state}.setTextColor |
	 * | {state}.padding | BorderSize | getDesign{state}.setPadding |
	 * | {state}.minimumSize | Point | getDesign{state}.setMinimumSize |
	 * | {state}.mousePointer | MousePointerFactory | getDesign{state}.setMousePointerFactory |
	 * 
	 * Whereas {state} can be:
	 * | name | value |
	 * | normal | Widget is in normal state |
	 * | disabled | Widget is disabled |
	 * | focused | Widget has focus |
	 * | hover | Mouse pointer hover over widget or children thereof |
	 * | focusedHover | Mouse pointer hover over widget or children thereof while focused |
	 */
	public func void setParameter(String name, Object value)
		var int delimiter = name.find('.')
		if delimiter == -1
			throw EInvalidParam.new("unknown parameter: " + name)
		end
		
		var StateDesign stateDesign = getNamedStateDesign(name.substring(0, delimiter))
		if stateDesign == null
			throw EInvalidParam.new("unknown state: " + name.substring(0, delimiter))
		end
		
		stateDesign.setParameter(name.substring(delimiter + 1), value)
	end
	
	/** \brief Get state for parameter name selector component or null if not found. */
	protected func StateDesign getNamedStateDesign(String stateName)
		if stateName.equals("normal")
			return pDesignNormal
			
		elif stateName.equals("disabled")
			return pDesignDisabled
			
		elif stateName.equals("focused")
			return pDesignFocused
			
		elif stateName.equals("hover")
			return pDesignHover
			
		elif stateName.equals("focusedHover")
			return pDesignFocusedHover
			
		else
			return null
		end
	end
	
	/** \brief Create copy of designer. */
	public func WidgetDesigner copyDesigner()
		return DefaultWidgetDesigner.new(this)
	end
	
	
	
	/** \brief Design widget. */
	public func void designWidget(Widget widget)
		widgetStateFindDesign(widget).apply(widget)
	end
	
	/**
	 * \brief Get design to apply to widget.
	 * 
	 * Determines the state of the widget and the appropriate state design to use. The
	 * returned state design can be a set state design or a merge of multiple state
	 * designs using a fallback logic.
	 */
	protected func StateDesign widgetStateFindDesign(Widget widget)
		var StateDesign design = pDesignNormal
		
		widget = getStateTrackWidget(widget)
		
		if widget.isFullEnabled()
			if widget.isMouseInside()
				design = design.copyDesign()
				pDesignHover.merge(design)
				
				if widget.getHasFocus()
					pDesignFocusedHover.merge(design)
				end
				
			elif widget.getHasFocus()
				design = design.copyDesign()
				pDesignFocused.merge(design)
			end
			
		else
			design = design.copyDesign()
			pDesignDisabled.merge(design)
		end
		
		return design
	end
	
	/**
	 * \brief Find state track widget.
	 * \version 1.5
	 * 
	 * Finds the widget highest up in the parent widget chain with getStateChangeNotifyChildren()
	 * set to true. If not found returns \em widget.
	 */
	public func Widget getStateTrackWidget(Widget widget)
		var Container parent = widget.getParent()
		
		while true
			parent = widget.getParent()
			if parent == null or not parent.getStateChangeNotifyChildren()
				break
			end
			widget = parent
		end
		
		return widget
	end
end
