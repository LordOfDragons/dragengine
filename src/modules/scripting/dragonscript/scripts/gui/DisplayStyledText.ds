/* 
 * Drag[en]gine DragonScript Script Module
 *
 * Copyright (C) 2020, Roland PlÃ¼ss (roland@rptd.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */


namespace Dragengine.Gui

pin Dragengine.Gui.Events
pin Dragengine.Utils.StyledText.Definition
pin Dragengine.Utils.StyledText.Rendering.Elements
pin Dragengine.Scenery


/**
 * \brief Display page of styled text document.
 * 
 * By default the text document uses page mode. In page mode the document is split into pages
 * with the size of the available space (widget width minus padding). To switch between the
 * pages call the setCurrentPage() method.
 * 
 * Optionally the text document can be set to non-page mode. In this mode the entire document
 * is formatted on one single page.
 * 
 * To properly layout the document width of the widget is used. This is especially important
 * if you want to use ScrollPanel to allow scrolling up and down. The Viewport widget is
 * required to be set to FlowLayout or another layout adjusting the widget size to cover the
 * full size. FlowLayout is best suited for this task since it allows the widget to be higher
 * than the available space while using the available width. The following code creates a
 * vertically scrollable DisplayStyledText.
 * 
 * \code{.ds}
 * var DisplayStyledText widget = DisplayStyledText.new()
 * // widget.setPagedMode(false) // if you want to use single page mode.
 * container.addWidge(ScrollPanel.new(Viewport.new(widget, FlowLayout.new(LayoutAxis.y))))
 * \endcode
 */
class DisplayStyledText extends Widget
	private var StyledTextDocument pStyledTextDocument
	private var Point pMinPageSize
	private var int pCurrentPage
	private var bool pPagedMode
	private var Point pMinSizeBare
	private var Point pMinSizeForWidthSize
	private var int pMinSizeForWidthWidth
	
	
	
	/** \brief Create widget. */
	public func new()
		pCurrentPage = 0
		pMinPageSize = Point.new(50, 50)
		pPagedMode = true
		pMinSizeForWidthWidth = 0
	end
	
	
	
	/** \brief Minimum page size in case widget size is smaller. */
	public func Point getMinPageSize()
		return pMinPageSize
	end
	
	/** \brief Set minimum page size in case widget size is smaller. */
	public func void setMinPageSize(Point size)
		if not (size > Point.new())
			throw EInvalidParam.new()
		end
		pMinPageSize = size
	end
	
	/** \brief Paged mode. */
	public func bool getPagedMode()
		return pPagedMode
	end
	
	/** \brief Set paged mode. */
	public func void setPagedMode(bool pagedMode)
		if pagedMode == pPagedMode
			return
		end
		
		pPagedMode = pagedMode
		
		if pStyledTextDocument != null
			if pagedMode
				pStyledTextDocument.setPageSize(getSize().largest(pMinPageSize))
				
			else
				pStyledTextDocument.setPageSize(getSize().largest(\
					Point.new(pMinPageSize.getX(), 100000)))
			end
			
			pStyledTextDocument.rebuildPages()
			
			pCurrentPage = 0
			updateCanvasPage()
			pMinSizeBare = null
			pMinSizeForWidthSize = null
		end
		
		layoutParent()
	end
	
	/** \brief Styled text document definition or \em null if not set. */
	public func StyledTextDefinition getStyledTextDefinition()
		if pStyledTextDocument == null
			return null
		end
		return pStyledTextDocument.getDefinition()
	end
	
	/** \brief Set styled text document definition or \em null if not set. */
	public func void setStyledTextDefinition(StyledTextDefinition definition)
		if definition == getStyledTextDefinition()
			return
		end
		
		if definition == null
			pStyledTextDocument = null
			
		else
			pStyledTextDocument = StyledTextDocument.new()
			pStyledTextDocument.setDefinition(definition)
			
			if pPagedMode
				pStyledTextDocument.setPageSize(getSize().largest(pMinPageSize))
				
			else
				pStyledTextDocument.setPageSize(getSize().largest(\
					Point.new(pMinPageSize.getX(), 100000)))
			end
			
			pStyledTextDocument.rebuildPages()
		end
		
		pMinSizeBare = null
		pMinSizeForWidthSize = null
		pCurrentPage = 0
		updateCanvasPage()
		
		layoutParent()
	end
	
	
	
	/** \brief Index of page to display. */
	public func int getCurrentPage()
		return pCurrentPage
	end
	
	/** \brief Set index of page to display. */
	public func void setCurrentPage(int page)
		page = DEMath.clamp(page, 0, getPageCount() - 1)
		if page == pCurrentPage
			return
		end
		
		pCurrentPage = page
		updateCanvasPage()
	end
	
	/** \brief Number of pages. */
	public func int getPageCount()
		if pStyledTextDocument == null
			return 0
		end
		return pStyledTextDocument.getPageCount()
	end
	
	
	
	/**
	 * \brief Minimum size of widget.
	 */
	public func Point getMinimumSize()
		if isMinimumSizeSet()
			return super.getMinimumSize()
		end
		
		if pMinSizeBare != null
			return pMinSizeBare
		end
		
		pMinSizeBare = calcMinSize(pMinPageSize)
		return pMinSizeBare
	end
	
	/**
	 * \brief Minimum size of widget using reference widget width and variable height.
	 */
	public func Point getMinimumSizeForWidth(int width)
		if isMinimumSizeSet()
			return super.getMinimumSizeForWidth(width)
		end
		
		if pMinSizeForWidthSize != null and width == pMinSizeForWidthWidth
			return pMinSizeForWidthSize
		end
		
		pMinSizeForWidthSize = calcMinSize(Point.new(width, pMinPageSize.getY()))
		pMinSizeForWidthWidth = width
		
		return pMinSizeForWidthSize
	end
	
	/** \brief Calculate minimum size for layout. */
	protected func Point calcMinSize(Point pageSize)
		if pStyledTextDocument == null
			return pMinPageSize
		end
		
		if pPagedMode
			return pMinPageSize.largest(pStyledTextDocument.getPageSize())
		end
		
		var StyledTextDocument document = StyledTextDocument.new()
		document.setDefinition(pStyledTextDocument.getDefinition())
		document.setPageSize(Point.new(100000, 100000).largest(pageSize))
		document.rebuildPages()
		
		var StyledTextRendering page = document.getPageAt(0)
		var int count = page.getElementCount()
		var Point extend = Point.new()
		var STRElement element
		var int i
		
		for i = 0 to count
			element = page.getElementAt(i)
			extend = extend.largest(element.getPosition() + element.calculateSize())
		end
		
		var STDStyle pageStyle = document.getDefinition().getPageStyle()
		extend = extend + Point.new(pageStyle.getMargins().getX2(), pageStyle.getMargins().getY2())
		
		return pMinPageSize.largest(extend)
	end
	
	
	
	/** \brief Size changed. */
	public func void onResize(WidgetEvent event)
		super.onResize(event)
		
		if pStyledTextDocument == null
			return
		end
		
		if pPagedMode
			pStyledTextDocument.setPageSize(getSize().largest(pMinPageSize))
			
		else
			pStyledTextDocument.setPageSize(getSize().largest(\
				Point.new(pMinPageSize.getX(), 100000)))
		end
		
		pStyledTextDocument.rebuildPages()
		
		pMinSizeBare = null
		pMinSizeForWidthSize = null
		pCurrentPage = 0
		updateCanvasPage()
	end
	
	/** \brief Update canvas page. */
	private func void updateCanvasPage()
		if pStyledTextDocument == null
			getCanvasContent().removeAllCanvas()
			return
		end
		
		var CanvasView canvas = getCanvasContent()
		canvas.removeAllCanvas()
		pStyledTextDocument.addToCanvas(canvas, pCurrentPage, Point.new())
	end
end
