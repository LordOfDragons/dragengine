/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */


namespace Dragengine.Gui.Modifiers

pin Dragengine.Gui.Events
pin Dragengine.Gui.Layouts
pin Dragengine.Scenery


/**
 * \brief Widget modifier toggling visibility of widgets matching ToggleModel.
 * 
 * Simple way to add widgets to UI showing up if certain game events happend
 * (propmpts for example).
 * 
 * To use add widget modifier to ToggleModel as listener for desired widget.
 * When model toggles on widget is set enabled otherwise disabled.
 * 
 * This modifier can be combined with TogglePresent to set up a list of widgets
 * showing if specific objects (typically enumerations) are present in a ListModel.
 */
class WModifierVisibility implements ToggleModelListener
	private var Widget pWidget
	
	
	
	/** \brief Create widget modifier showing widget if model is toggled. */
	public func new( ToggleModel model, Widget widget )
		if model == null
			throw ENullPointer.new( "model" )
		end
		if widget == null
			throw ENullPointer.new( "widget" )
		end
		
		this.pWidget = widget
		model.addListener( this )
		
		this.toggledChanged( model )
	end
	
	
	
	/** \brief Toggled state changed. */
	public func void toggledChanged( ToggleModel model )
		this.pWidget.setVisible( model.getToggled() )
	end
end
