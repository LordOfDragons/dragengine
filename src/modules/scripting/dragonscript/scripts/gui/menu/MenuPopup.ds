/* 
 * Drag[en]gine DragonScript Script Module
 *
 * Copyright (C) 2022, Roland Pl√ºss (roland@rptd.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */


namespace Dragengine.Gui

pin Dragengine.Gui.Events
pin Dragengine.Gui.Layouts
pin Dragengine.Utils


/**
 * \brief Popup menu with MenuItem subclass instances.
 * \version 1.11
 */
class MenuPopup extends WindowPopup
	private var MenuItemSubMenu pParentMenuItem
	private var MenuItemSubMenu pOpenSubMenu
	private var MenuPopupEventHandler pMenuPopupEventHandler
	private var MenuPopupAutoCloseSubMenu pAutoCloseSubMenu
	
	
	
	/** \brief Create popup menu. */
	public func new()
		setDesignerSelector("MenuPopup")
	end
	
	/** \brief Dispose of widget. */
	public func void dispose()
		setOpenSubMenu(null)
		pParentMenuItem = null
		pMenuPopupEventHandler = null
		super.dispose()
	end
	
	
	
	/** \brief Add widget. */
	public func void addWidget(Widget widget)
		super.addWidget(widget)
		
		if getVisible()
			fitToContent()
		end
	end
	
	/** \brief Add widget. */
	public func void addWidget(Widget widget, Object settings)
		super.addWidget(widget, settings)
		
		if getVisible()
			fitToContent()
		end
	end
	
	
	
	/** \brief Fit to content. Modified to update show icon count before fitting. */
	public func void fitToContent()
		updateShowIconCount()
		super.fitToContent()
	end
	
	/** \brief Capture mouse. */
	public func void captureMouse()
		// capture mouse only if this is the top level popup menu
		if pParentMenuItem == null
			super.captureMouse()
		end
	end
	
	/** \brief Release mouse capture. */
	public func void releaseMouse()
		// capture mouse only if this is the top level popup menu
		if pParentMenuItem == null
			super.releaseMouse()
		end
	end
	
	
	
	/** \brief Update menu items show icon count. */
	protected func void updateShowIconCount()
		var int showLeftIconCount = injectWidget(0, block int count, Widget widget
			if widget castable MenuItem
				return DEMath.max(count, (widget cast MenuItem).getLeftIconCount())
			end
			return count
		end) cast int
		
		var int showRightIconCount = injectWidget(0, block int count, Widget widget
			if widget castable MenuItem
				return DEMath.max(count, (widget cast MenuItem).getRightIconCount())
			end
			return count
		end) cast int
		
		runWhileBlockingLayout(block
			forEachWidget(block Widget widget
				if widget castable MenuItem
					var MenuItem menuItem = widget cast MenuItem
					menuItem.setShowLeftIconCount(showLeftIconCount)
					menuItem.setShowRightIconCount(showRightIconCount)
				end
			end)
		end)
		doLayoutIfBlocked()
	end
	
	
	
	/** \brief Parent menu item or null. */
	public func MenuItemSubMenu getParentMenuItem()
		return pParentMenuItem
	end
	
	/** \brief Set parent menu item or null. */
	public func void setParentMenuItem(MenuItemSubMenu menuItem)
		pParentMenuItem = menuItem
	end
	
	/** \brief Open sub menu item or null. */
	public func MenuItemSubMenu getOpenSubMenu()
		return pOpenSubMenu
	end
	
	/**
	 * \brief Set open sub menu or null.
	 * 
	 * If null hides sub menu. If not null shows submenu.
	 */
	public func void setOpenSubMenu(MenuItemSubMenu subMenu)
		if subMenu == pOpenSubMenu
			return
		end
		
		if pOpenSubMenu != null
			if pAutoCloseSubMenu != null
				pAutoCloseSubMenu.giveUp()
				pAutoCloseSubMenu = null
			end
			
			pOpenSubMenu.hideSubMenu()
		end
		
		pOpenSubMenu = subMenu
		
		if subMenu != null
			subMenu.showSubMenu()
			
			if pParentMenuItem == null and pAutoCloseSubMenu == null
				pAutoCloseSubMenu = MenuPopupAutoCloseSubMenu.new(this, 0.5)
			end
		end
	end
	
	
	
	/** \brief Array of MenuPopup in parent desktop owned by this menu popup. */
	public func Array getAllChildMenuPopups()
		var Array list = Array.new()
		
		var Desktop desktop = getDesktop()
		if desktop != null
			desktop.forEachWidget(block Widget each
				if each castable MenuPopup
					var MenuPopup menu = each cast MenuPopup
					if menu.getParentMenuItem() != null and menu.getParentMenuItem().getParentMenuPopup() == this
						list.add(menu)
					end
				end
			end)
		end
		
		return list
	end
	
	/** \brief Close all menu popups in parent desktop owned by this menu popup. */
	public func void closeAllChildMenuPopups()
		getAllChildMenuPopups().forEach(block MenuPopup each
			each.popdown()
		end)
	end
	
	/** \brief Set hover widget in parent menus to open sub menu. */
	public func void parentMenusSetHoverOpenSubMenu()
		if pOpenSubMenu != null
			setHoverWidget(pOpenSubMenu, MouseEvent.new(pOpenSubMenu,\
				MouseEvent.idMouseMoved, 0, 0, Point.new(), -1))
		end
		
		if pParentMenuItem != null
			var MenuPopup menu = pParentMenuItem.getParentMenuPopup()
			if menu != null
				menu.parentMenusSetHoverOpenSubMenu()
			end
		end
	end
	
	/** \brief Clear hover widget on open sub menus. */
	public func void openSubMenusClearHover()
		if pOpenSubMenu != null
			var MenuPopup menu = pOpenSubMenu.getSubMenu()
			if menu != null
				menu.clearHoverWidget()
				menu.openSubMenusClearHover()
			end
		end
	end
	
	
	
	/**
	 * \brief Pop down window.
	 * 
	 * Release mouse and hide window. If close on popdown is true close() is called too.
	 */
	public func void popdown()
		setOpenSubMenu(null)
		super.popdown()
	end
	
	/** \brief Send event to the widget. */
	public func void sendEvent(Event event)
		if event.getSource() != this
			return // child widget did not handle event
		end
		
		if pMenuPopupEventHandler == null
			pMenuPopupEventHandler = MenuPopupEventHandler.new()
		end
		
		if not pMenuPopupEventHandler.handleEvent(event, this, this)
			return
		end
		
		super.sendEvent(event)
	end
	
	
	
	/** \brief Frame update. */
	public func void onFrameUpdate(float elapsed)
		
	end
end
