/* 
 * Drag[en]gine DragonScript Script Module
 *
 * Copyright (C) 2022, Roland Pl√ºss (roland@rptd.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

namespace Dragengine.Gui

pin Dragengine.Gui.Events
pin Dragengine.Gui.Layouts
pin Dragengine.Utils


/**
 * \brief Auto close sub menu after delay if mouse cursor is not inside.
 * \version 1.11
 */
public class MenuPopupAutoCloseSubMenu extends FrameUpdateListener
	private var MenuPopup pMenuPopup
	private var float pTimeout
	private var float pElapsed
	
	
	
	/** \brief Create auto close sub menu. */
	public func new(MenuPopup menuPopup, float timeout)
		if menuPopup == null
			throw ENullPointer.new("menuPopup")
		end
		
		pMenuPopup = menuPopup
		pTimeout = DEMath.max(timeout, 0.0)
	end
	
	
	
	/** \brief Frame update. */
	public func void frameUpdate(float elapsed)
		// missing desktop should never happen. close all sub menus
		var Desktop desktop = pMenuPopup.getDesktop()
		if desktop == null
			pMenuPopup.setOpenSubMenu(null)
			return
		end
		
		// increment elapsed time
		pElapsed += elapsed
		
		// find lowest sub menu
		var MenuPopup subMenu = pMenuPopup.getLowestOpenSubMenu()
		
		// if mouse pointer is in lowest sub menu reset elapsed time to keep it open
		var Point mouseLocation = desktop.getMouseLocation()
		if subMenu != null and subMenu.isPointInside(mouseLocation - subMenu.getDesktopPosition())
			pElapsed = 0
			return
		end
		
		// mouse pointer is not in lowest sub menu. wait until timeout elapsed
		if pElapsed < pTimeout
			return
		end
		
		// timeout elapsed. reset elapsed time then walk up parent popup menus to find
		// highest level sub menu to keep open
		pElapsed = 0
		
		while subMenu != null
			// get parent menu item if present
			var MenuItemSubMenu menuItemSubMenu = subMenu.getParentMenuItem()
			if menuItemSubMenu == null
				break
			end
			
			// if mouse pointer is inside menu item keep sub menu open but close child sub menu
			if menuItemSubMenu.isPointInside(mouseLocation - menuItemSubMenu.getDesktopPosition())
				subMenu.setOpenSubMenu(null)
				return
			end
			
			// if mouse pointer is inside parent menu close sub menu
			subMenu = menuItemSubMenu.getParentMenuPopup()
			if subMenu.isPointInside(mouseLocation - subMenu.getDesktopPosition())
				subMenu.setOpenSubMenu(null)
				return
			end
		end
		
		// mouse pointer is outside top level menu. close top level sub menu
		pMenuPopup.setOpenSubMenu(null)
	end
end
