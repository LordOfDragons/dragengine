/* 
 * Drag[en]gine DragonScript Script Module
 *
 * Copyright (C) 2022, Roland Pl√ºss (roland@rptd.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */


namespace Dragengine.Gui

pin Dragengine.Gui.Events
pin Dragengine.Gui.Layouts


/**
 * \brief Base class for items in a menu panel.
 * \version 1.11
 * 
 * Menu items are containers. They contain the menu item content and optionally 1 or more
 * icons on the left side. Each menu item has a list of icons it wants to show as well as
 * well as a parameter indicating how many icons have to be shown. The parent MenuPanel
 * object sets the shown icon count on each menu item to the maximum icon count of all
 * children menu items. If the shown icon count is larger than the provided icon count
 * empty icons have to be drawn to properly align the content. Icons are added added
 * from right to left with empty space on the left side.
 */
class MenuItem extends Container
	/** \brief Mouse listener fireing MenuItem action. */
	protected class FireActionClickListener extends DefaultMouseListener
		private var MenuItem pMenuItem
		
		public func new(MenuItem menuItem)
			if menuItem == null
				throw ENullPointer.new("menuItem")
			end
			pMenuItem = menuItem
		end
		
		public func void onButtonRelease(MouseEvent event)
			pMenuItem.fireAction(0)
		end
	end
	
	
	
	private var Array pIconsLeft
	private var Array pIconsRight
	private var int pShowLeftIconCount
	private var int pShowRightIconCount
	private var Panel pPanelIconsLeft
	private var Panel pPanelIconsRight
	private var Array pActionListeners
	
	
	
	/** \brief Create menu item. */
	public func new()
		pIconsLeft = Array.new()
		pIconsRight = Array.new()
		pActionListeners = Array.new()
		
		setCanFocus(false)
		
		setLayout(BorderLayout.new(5))
		setStateChangeNotifyChildren(true)
		
		pPanelIconsLeft = Panel.new(GridLayout.new(0, 1, 5, LayoutAxis.inverseX))
		addWidget(pPanelIconsLeft, BorderLayout.Area.left)
		
		pPanelIconsRight = Panel.new(GridLayout.new(0, 1, 5, LayoutAxis.x))
		addWidget(pPanelIconsRight, BorderLayout.Area.right)
		
		setDesignerSelector("MenuItem")
	end
	
	/**
	 * \brief Create menu item calling block to add content.
	 * 
	 * Block receives MenuItem as argument. Block call is wrapped inside runWhileBlockingLayout()
	 * for efficiency. doLayout() will be called after leaving the block.
	 */
	public func new(Block blockAddContent) this()
		blockAddContent.run(this)
	end
	
	/** \brief Dispose of menu item. */
	public func void dispose()
		pIconsLeft.forEach(block Widget each
			each.safeDispose()
		end)
		pIconsLeft = null
		
		pIconsRight.forEach(block Widget each
			each.safeDispose()
		end)
		pIconsRight = null
		
		pPanelIconsLeft = null
		pPanelIconsRight = null
		
		pActionListeners = null
		
		super.dispose()
	end
	
	
	
	/** \brief Count of left side icons. */
	public func int getLeftIconCount()
		return pIconsLeft.getCount()
	end
	
	/** \brief Left side icon at index. */
	protected func Widget getLeftIconAt(int index)
		return pIconsLeft.getAt(index) cast Widget
	end
	
	/** \brief Add left side icon. */
	protected func void addLeftIcon(Widget icon)
		if icon == null
			throw ENullPointer.new("icon")
		end
		pIconsLeft.add(icon)
		
		runWhileBlockingLayout(block
			readdLeftIconWidgets()
		end)
	end
	
	/** \brief Add left side icon before index. */
	protected func void insertLeftIcon(Widget icon, int index)
		if icon == null
			throw ENullPointer.new("icon")
		end
		if index < 0
			throw EInvalidParam.new("index < 0")
		end
		if index > pIconsLeft.getCount()
			throw  EInvalidParam.new("index > icons.count")
		end
		
		pIconsLeft.insert(index, icon)
		
		runWhileBlockingLayout(block
			readdLeftIconWidgets()
		end)
	end
	
	/** \brief Set left side icon at index. */
	protected func void setLeftIconAt(int index, Widget icon)
		if icon == null
			throw ENullPointer.new("icon")
		end
		if index < 0
			throw EInvalidParam.new("index < 0")
		end
		if index >= pIconsLeft.getCount()
			throw  EInvalidParam.new("index >= icons.count")
		end
		
		runWhileBlockingLayout(block
			(pIconsLeft.getAt(index) cast Widget).safeDispose()
			
			pIconsLeft.setAt(index, icon)
			
			readdLeftIconWidgets()
		end)
	end
	
	/** \brief Remove left icon. */
	protected func void removeLeftIcon(Widget icon)
		var int index = pIconsLeft.indexOf(icon)
		if index == -1
			throw EInvalidParam.new("icon absent")
		end
		
		runWhileBlockingLayout(block
			(pIconsLeft.getAt(index) cast Widget).safeDispose()
			
			pIconsLeft.removeFrom(index)
			
			readdLeftIconWidgets()
		end)
	end
	
	/** \brief Remove all left side icons. */
	protected func void removeAllLeftIcons()
		if pIconsLeft.getCount() == 0
			return
		end
		
		runWhileBlockingLayout(block
			pIconsLeft.forEach(block Widget each
				each.safeDispose()
			end)
			pIconsLeft.removeAll()
		end)
	end
	
	
	
	/** \brief Count of right side icons. */
	public func int getRightIconCount()
		return pIconsRight.getCount()
	end
	
	/** \brief Right side icon at index. */
	protected func Widget getRightIconAt(int index)
		return pIconsRight.getAt(index) cast Widget
	end
	
	/** \brief Add right side icon. */
	protected func void addRightIcon(Widget icon)
		if icon == null
			throw ENullPointer.new("icon")
		end
		pIconsRight.add(icon)
		
		runWhileBlockingLayout(block
			readdRightIconWidgets()
		end)
	end
	
	/** \brief Add right side icon before index. */
	protected func void insertRightIcon(Widget icon, int index)
		if icon == null
			throw ENullPointer.new("icon")
		end
		if index < 0
			throw EInvalidParam.new("index < 0")
		end
		if index > pIconsRight.getCount()
			throw  EInvalidParam.new("index > icons.count")
		end
		
		pIconsRight.insert(index, icon)
		
		runWhileBlockingLayout(block
			readdRightIconWidgets()
		end)
	end
	
	/** \brief Set right side icon at index. */
	protected func void setRightIconAt(int index, Widget icon)
		if icon == null
			throw ENullPointer.new("icon")
		end
		if index < 0
			throw EInvalidParam.new("index < 0")
		end
		if index >= pIconsRight.getCount()
			throw  EInvalidParam.new("index >= icons.count")
		end
		
		runWhileBlockingLayout(block
			(pIconsRight.getAt(index) cast Widget).safeDispose()
			
			pIconsRight.setAt(index, icon)
			
			readdRightIconWidgets()
		end)
	end
	
	/** \brief Remove right icon. */
	protected func void removeRightIcon(Widget icon)
		var int index = pIconsRight.indexOf(icon)
		if index == -1
			throw EInvalidParam.new("icon absent")
		end
		
		runWhileBlockingLayout(block
			(pIconsRight.getAt(index) cast Widget).safeDispose()
			
			pIconsRight.removeFrom(index)
			
			readdRightIconWidgets()
		end)
	end
	
	/** \brief Remove all right side icons. */
	protected func void removeAllRightIcons()
		if pIconsRight.getCount() == 0
			return
		end
		
		runWhileBlockingLayout(block
			pIconsRight.forEach(block Widget each
				each.safeDispose()
			end)
			pIconsRight.removeAll()
		end)
	end
	
	
	
	/**
	 * \brief Count of left side icons the menu item has to show.
	 * 
	 * Count of left side icons to show can be different than the count if icons present.
	 */
	public func int getShowLeftIconCount()
		return pShowLeftIconCount
	end
	
	/**
	 * \brief Set count of left side icons the menu item has to show.
	 * 
	 * Count of left side icons to show can be different than the count if icons present.
	 */
	public func void setShowLeftIconCount(int count)
		if count < 0
			throw EInvalidParam.new("count < 0")
		end
		
		if count == pShowLeftIconCount
			return
		end
		
		pShowLeftIconCount = count
		
		runWhileBlockingLayout(block
			readdLeftIconWidgets()
		end)
	end
	
	
	
	/**
	 * \brief Count of right side icons the menu item has to show.
	 * 
	 * Count of right side icons to show can be different than the count if icons present.
	 */
	public func int getShowRightIconCount()
		return pShowRightIconCount
	end
	
	/**
	 * \brief Set count of right side icons the menu item has to show.
	 * 
	 * Count of right side icons to show can be different than the count if icons present.
	 */
	public func void setShowRightIconCount(int count)
		if count < 0
			throw EInvalidParam.new("count < 0")
		end
		
		if count == pShowRightIconCount
			return
		end
		
		pShowRightIconCount = count
		
		runWhileBlockingLayout(block
			readdRightIconWidgets()
		end)
	end
	
	
	
	/** \brief Fire action. */
	public func void fireAction(int modifiers)
		fireActionListeners(modifiers)
	end
	
	/** \brief Close top level MenuPopup. */
	public func void closeMenuPopup()
		var MenuPopup menu = getTopLevelMenuPopup()
		if menu != null
			menu.popdown()
		end
	end
	
	/** \brief Parent MenuPopup or null. */
	public func MenuPopup getParentMenuPopup()
		var Container container = getParent()
		while container != null
			if container castable MenuPopup
				return container cast MenuPopup
			end
			container = container.getParent()
		end
		return null
	end
	
	/** \brief Top level MenuPopup or null. */
	public func MenuPopup getTopLevelMenuPopup()
		var MenuPopup menu = getParentMenuPopup()
		if menu.getParentMenuItem() != null
			return menu.getParentMenuItem().getTopLevelMenuPopup()
		end
		return menu
	end
	
	
	
	/** \brief Add action listener. */
	public func void addActionListener(ActionListener listener)
		if listener == null
			throw EInvalidParam.new()
		end
		pActionListeners.add(listener)
	end
	
	/** \brief Remove action listener. */
	public func void removeActionListener(ActionListener listener)
		pActionListeners.remove(listener)
	end
	
	
	
	/** \brief Key on the keyboard has been released. */
	public func void onKeyRelease(KeyEvent event)
		select event.getKeyCode()
		case InputEventKey.enter
			sendEventToListeners(event, false)
			fireAction(0)
			
		else
			super.onKeyRelease(event)
		end
	end
	
	/** \brief Mouse button has been released. */
	public func void onButtonRelease(MouseEvent event)
		if event.getButton() == InputEventMouseButton.left
			sendEventToListeners(event, false)
			fireAction(event.getModifiers())
			
		else
			super.onButtonRelease(event)
		end
	end
	
	/** \brief Mouse moved. */
	public func void onMouseMove(MouseEvent event)
		super.onMouseMove(event)
		
		var MenuPopup menu = getParentMenuPopup()
		if menu != null
			menu.parentMenusSetHoverOpenSubMenu()
			menu.openSubMenusClearHover()
		end
	end
	
	/** \brief Fire action listeners. */
	protected func void fireActionListeners(int modifiers)
		if pActionListeners != null
			var ActionEvent event = ActionEvent.new(this, ActionEvent.idAction, modifiers)
			pActionListeners.forEach(block ActionListener each
				each.onAction(event)
			end)
		end
	end
	
	/** \brief Remove all left side icons then add them again. */
	protected func void readdLeftIconWidgets()
		while pPanelIconsLeft.getWidgetCount() > 0
			pPanelIconsLeft.removeWidget(pPanelIconsLeft.getWidget(0))
		end
		
		pIconsLeft.forEach(block int index, Widget icon
			if index < pShowLeftIconCount
				pPanelIconsLeft.addWidget(icon)
			end
		end)
		
		var int i
		for i = pIconsLeft.getCount() to pShowLeftIconCount
			pPanelIconsLeft.addWidget(createIconPlaceholderWidget())
		end
	end
	
	/** \brief Remove all right side icons then add them again. */
	protected func void readdRightIconWidgets()
		while pPanelIconsRight.getWidgetCount() > 0
			pPanelIconsRight.removeWidget(pPanelIconsRight.getWidget(0))
		end
		
		pIconsRight.forEach(block int index, Widget icon
			if index < pShowRightIconCount
				pPanelIconsRight.addWidget(icon)
			end
		end)
		
		var int i
		for i = pIconsRight.getCount() to pShowRightIconCount
			pPanelIconsRight.addWidget(createIconPlaceholderWidget())
		end
	end
	
	/** \brief Create icon placeholder widget. */
	protected func Widget createIconPlaceholderWidget()
		var Widget icon = Widget.new()
		icon.setDesignerSelector("IconPlaceholder." + getDesignerSelector())
		return icon
	end
end
