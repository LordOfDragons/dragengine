/* 
 * Drag[en]gine DragonScript Script Module
 *
 * Copyright (C) 2020, Roland Pl√ºss (roland@rptd.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */


namespace Dragengine.Gui

pin Dragengine.Gui.Events
pin Dragengine.Gui.Layouts
pin Dragengine.Scenery


/**
 * \brief Check box widget.
 * 
 * Specialization of the ToggleButton showing a tickable check box.
 */
class CheckBox extends ToggleButton
	/** \brief Check box widget. */
	private var Widget pWidgetCheckBox
	
	/** \brief Check widget. */
	private var Widget pWidgetCheck
	
	/** \brief Panel hosting checkbox widget. */
	private var Panel pPanelCheckBox
	
	/** \brief Panel hosting check widget. */
	private var Panel pPanelCheck
	
	
	
	/** \brief Create check box. */
	public func new()
		this.setDesignerSelector( "CheckBox" )
	end
	
	/** \brief Create text check button. */
	public func new( String text ) super( text )
		this.setDesignerSelector( "CheckBox" )
	end
	
	/** \brief Create text and image check button. */
	public func new( String text, Image image ) super( text, image )
		this.setDesignerSelector( "CheckBox" )
	end
	
	/** \brief Create check box. */
	public func new( ToggleModel model ) super( model )
		this.setDesignerSelector( "CheckBox" )
	end
	
	/** \brief Create text check button. */
	public func new( ToggleModel model, String text ) super( model, text )
		this.setDesignerSelector( "CheckBox" )
	end
	
	/** \brief Create text and image check button. */
	public func new( ToggleModel model, String text, Image image ) super( model, text, image )
		this.setDesignerSelector( "CheckBox" )
	end
	
	/**
	 * Disposes of the widget. This cleans all references and prepars the widget
	 * for beeing freed. If the widget is already disposed nothing happens.
	 */
	public func void dispose()
		this.pWidgetCheckBox = null
		this.pWidgetCheck = null
		this.pPanelCheckBox = null
		this.pPanelCheck = null
		
		super.dispose()
	end
	
	
	
	/**
	 * \brief Check box widget or \em null if not set.
	 * \details For use by check box designers.
	 */
	public func Widget getCheckBoxWidget()
		return this.pWidgetCheckBox
	end
	
	/**
	 * \brief Set check box widget or \em null if not set.
	 * \details For use by check box designers.
	 */
	public func void setCheckBoxWidget( Widget widget )
		if widget == this.pWidgetCheckBox
			return
		end
		
		if this.pWidgetCheckBox != null
			this.pPanelCheckBox.removeWidget( this.pWidgetCheckBox )
		end
		
		this.pWidgetCheckBox = widget
		
		if widget != null
			this.pPanelCheckBox.addWidget( widget )
		end
	end
	
	/**
	 * \brief Check mark widget or \em null if not set.
	 * \details For use by check box designers.
	 */
	public func Widget getCheckWidget()
		return this.pWidgetCheck
	end
	
	/**
	 * \brief Set check mark widget.
	 * \details For use by check box designers.
	 */
	public func void setCheckWidget( Widget widget )
		if widget == this.pWidgetCheck
			return
		end
		
		if this.pWidgetCheck != null
			this.pPanelCheck.removeWidget( this.pWidgetCheck )
		end
		
		this.pWidgetCheck = widget
		
		if widget != null
			this.pPanelCheck.addWidget( widget )
		end
	end
	
	
	
	/** \brief Designer changed. */
	public func void onDesignerChanged()
		super.onDesignerChanged()
		this.setCheckBoxWidget( null )
		this.setCheckWidget( null )
	end
	
	
	
	/**
	 * \brief Create button content widgets.
	 * \details Call if the layout of the widgets changes. Removes the old widgets first.
	 */
	public func void createContentWidgets()
		var bool enabled = this.getEnabled()
		var String text = this.getText()
		
		this.pWidgetCheckBox = null
		this.pWidgetCheck = null
		this.pPanelCheckBox = null
		this.pPanelCheck = null
		
		this.removeAllWidgets()
		this.setWidgetImage( null )
		this.setWidgetText( null )
		
		this.setLayout( BorderLayout.new( 5 ) )
		
		// checkbox with check mark
		this.addWidget( Panel.new( StackLayout.new(), block Panel p
			this.pPanelCheckBox = Panel.new( CentrizedBoxLayout.new( LayoutAxis.y ) )
			p.addWidget( this.pPanelCheckBox )
			
			this.pPanelCheck = Panel.new( CentrizedBoxLayout.new( LayoutAxis.y ) )
			p.addWidget( this.pPanelCheck )
		end ), BorderLayout.Area.left )
		
		// image and text
		this.addWidget( Panel.new( FlowLayout.new( LayoutAxis.x ), block Panel p
			var DisplayImage widgetImage = DisplayImage.new()
			widgetImage.setEnabled( enabled )
			p.addWidget( widgetImage )
			widgetImage.setVisible( false )
			this.setWidgetImage( widgetImage )
			
			var Label widgetText = Label.new( text, Label.middleLeft )
			widgetText.setFont( this.getFont() )
			widgetText.setTextColor( this.getTextColor() )
			widgetText.setEnabled( enabled )
			p.addWidget( widgetText )
			widgetText.setVisible( not text.empty() )
			this.setWidgetText( widgetText )
		end ), BorderLayout.Area.content )
	end
end
