/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */


namespace Dragengine.Gui

pin Dragengine.Gui.Events
pin Dragengine.Scenery
pin Dragengine.Utils


/**
 * \brief Gamepad controller generating mouse and keyboard input.
 * \version 1.20
 * 
 * For use by Desktop and other top level widgets. Allows the user to control the widget using
 * gamepads. The following input events can be generated.
 * 
 * \par InputDeviceAxisType.stick
 * 
 * Generates mouse movement events. All sticks can be used to control the mouse pointer directly.
 * 
 * \par InputDeviceAxisType.trigger
 * 
 * Generates mouse button press and release events. All triggers control the left mouse button.
 * 
 * A mouse button press event is send when the trigger value changes from less than 0.5 to larger
 * than 0.5. A mouse button release event is send when the trigger value changes from larger than
 * 0.5 to less than 0.5 .
 * 
 * \par InputDeviceAxisType.hat
 * 
 * Sets focus to the closest widget in the pressed direction. Then the trigger value changes from
 * less than 0.5 to larger than 0.5 the closest widget is searched for and the focused shifted.
 * 
 * \par Input Capturing
 * 
 * The GamepadController only works if InputSystem.getCaptureInputDevices() is true. If it is
 * false the system mouse position is used which can not be controlled by the gamepad. If this
 * value is false GamepadController behaves as if it is disabled.
 * 
 * \par Usage
 * 
 * To use the gamepad controller create an instance and store it in the Widget. Forward all
 * events received in Widget.processEvent() to GamepadController.processEvent() in addition
 * to processing them by the widget. The gamepad controller monitors itself changes in input
 * devices and sends generated events as needed. Sending events can be temporarily disabled.
 * Once the gamepad controller is not required anymore call dispose(). After creating the
 * gamepad controller it is initially enabled.
 * 
 * \par Version 1.24
 * 
 * If the monitored widget is a \ref Desktop widget a virtual keyboard is automatically added
 * the first time an input is registered on a gamepad if none is assigned yet. This allows
 * users to use mouse and keyboard or gamepad as they please and a virtual keyboard is
 * automatically present if needed.
 */
class GamepadController extends FrameUpdateListener
	private class InvalidateDevices extends GlobalEvents.DefaultListener
		var GamepadController pController
		
		func new(GamepadController controller)
			pController = controller
		end
		
		func void onEvent(Object source, Object data)
			pController.invalidateDevices()
		end
	end
	
	private enum AxisTarget
		mouseX
		mouseY
		button
		focusX
		focusY
	end
	
	/** \brief Axis state. */
	protected class AxisState
		var InputEventSource pSystem
		var int pDevice
		var int pAxis
		var AxisTarget pTarget
		var float pValue
		
		/** \brief Create axis state. */
		func new(InputEventSource system, int device, int axis, AxisTarget target)
			pSystem = system
			pDevice = device
			pAxis = axis
			pTarget = target
		end
		
		/** \brief Axis state matches event parameters. */
		func bool matches(InputEventSource system, int device, int axis)
			return pSystem == system and pDevice == device and pAxis == axis
		end
		
		/** \brief Update axis state using value sending events to controller if required. */
		func void update(GamepadController controller, float value)
			select pTarget
			case AxisTarget.button
				if value > 0.5
					if pValue <= 0.5
						controller.pressMouseButton()
					end
					
				else
					if pValue > 0.5
						controller.releaseMouseButton()
					end
				end
			end
			
			pValue = value
		end
		
		/** \brief Combine mouse movement. */
		func Vector2 combineMouse(Vector2 result)
			select pTarget
			case AxisTarget.mouseX
				return Vector2.new(result.getX() + pValue, result.getY())
				
			case AxisTarget.mouseY
				return Vector2.new(result.getX(), result.getY() + pValue)
				
			else
				return result
			end
		end
		
		/** \brief Combine focus. */
		func Vector2 combineFocus(Vector2 result)
			select pTarget
			case AxisTarget.focusX
				return Vector2.new(pValue, result.getY())
				
			case AxisTarget.focusY
				return Vector2.new(result.getX(), pValue)
				
			else
				return result
			end
		end
		
		/** \brief Clear value to 0. */
		func void clear()
			pValue = 0
		end
	end
	
	
	
	var GlobalEvents pGlobalEvents
	var InvalidateDevices pInvalidateDevices
	var Widget pWidget
	var bool pEnabled
	var float pMouseSpeed
	var Array pAxisStates
	var bool pDirtyDevices
	var int pButtonPressCount
	var Vector2 pMouseMoveAccum
	var float pMouseMovementAcceleration
	var bool pAutoAddVirtualKeyboard, pAutoAddVirtualKeyboardDone
	
	
	
	/** \brief Create controller sending events to widget. */
	func new(Widget widget) this(BaseGameApp.getApp().getGlobalEvents(), widget)
	end
	
	/** \brief Create controller sending events to widget. */
	func new(GlobalEvents globalEvents, Widget widget)
		if globalEvents == null
			throw ENullPointer.new("globalEvents")
		end
		
		setWidget(widget)
		
		pAxisStates = Array.new()
		pDirtyDevices = true
		pMouseSpeed = 1200
		pEnabled = true
		pMouseMoveAccum = Vector2.new()
		pMouseMovementAcceleration = 1.5
		pAutoAddVirtualKeyboard = true
		
		pGlobalEvents = globalEvents
		pInvalidateDevices = InvalidateDevices.new(this)
		globalEvents.addListener(BaseGameApp.eventDeviceAttachedDetached, pInvalidateDevices)
		globalEvents.addListener(BaseGameApp.eventDeviceParamsChanged, pInvalidateDevices)
	end
	
	/** \brief Dispose of gamepad controller. */
	func void dispose()
		giveUp()
		
		if pGlobalEvents != null and pInvalidateDevices != null
			pGlobalEvents.removeListener(BaseGameApp.eventDeviceAttachedDetached, pInvalidateDevices)
			pGlobalEvents.removeListener(BaseGameApp.eventDeviceParamsChanged, pInvalidateDevices)
		end
		
		pInvalidateDevices = null
		pGlobalEvents = null
		
		pAxisStates = null
	end
	
	
	
	/** \brief Widget to send event to. */
	func Widget getWidget()
		return pWidget
	end
	
	/** \brief Set widget to send event to. */
	func void setWidget(Widget widget)
		if widget == null
			throw ENullPointer.new("widget")
		end
		
		pWidget = widget
	end
	
	/** \brief Sending events is enabled. */
	func bool getEnabled()
		return pEnabled
	end
	
	/** \brief Enable sending events. */
	func void setEnabled(bool enable)
		pEnabled = enable
	end
	
	/** \brief Mouse speed in pixels per second. */
	func float getMouseSpeed()
		return pMouseSpeed
	end
	
	/** \brief Set mouse speed in pixels per second. */
	func void setMouseSpeed(float speed)
		pMouseSpeed = speed
	end
	
	/**
	 * \brief Mouse movement acceleration.
	 * 
	 * Applies a remapping of the mouse movement. With a value of 1 the mouse movement is
	 * not modified. With a value larger than 1 small mouse movement is slowed down while
	 * larger mouse movement is accelerated. This makes it easier to do precise mouse
	 * movement near the desired target while moving large distances is faster. The default
	 * value is 1.5 . Typical values are 1, 1.5 or 2. Values less than 1 are usually not
	 * that useful but can be experimented with if desired.
	 */
	func float getMouseMovementAcceleration()
		return pMouseMovementAcceleration
	end
	
	/**
	 * \brief Mouse movement acceleration.
	 * 
	 * Applies a remapping of the mouse movement. With a value of 1 the mouse movement is
	 * not modified. With a value larger than 1 small mouse movement is slowed down while
	 * larger mouse movement is accelerated. This makes it easier to do precise mouse
	 * movement near the desired target while moving large distances is faster. The default
	 * value is 1.5 . Typical values are 1, 1.5 or 2. Values less than 1 are usually not
	 * that useful but can be experimented with if desired.
	 */
	func void setMouseMovementAcceleration(float acceleration)
		pMouseMovementAcceleration = DEMath.max(acceleration, 0.1)
	end
	
	/**
	 * \brief Automatically add virtual keyboard on first input if not present.
	 * \version 1.24
	 */
	func bool getAutoAddVirtualKeyboard()
		return pAutoAddVirtualKeyboard
	end
	
	/**
	 * \brief Automatically add virtual keyboard on first input if not present.
	 * \version 1.24
	 */
	func void setAutoAddVirtualKeyboard(bool autoAdd)
		pAutoAddVirtualKeyboard = autoAdd
	end
	
	
	
	
	/** \brief Process event. */
	func void processEvent(Event event)
		select event.getIdentifier()
		case GamepadEvent.idGamepadAxisMoved
			processEventAxisMove(event cast GamepadEvent)
			
		case GamepadEvent.idGamepadButtonPressed
			processEventButtonPress(event cast GamepadEvent)
			
		case GamepadEvent.idGamepadButtonReleased
			processEventButtonRelease(event cast GamepadEvent)
		end
	end
	
	/**
	 * \brief Clear mouse movement and accumulated states.
	 * 
	 * Call this after switching input processor away from the widget. This will clear all
	 * accumulated mouse movement to stop moving the mouse until the input processing switches
	 * back to the widget.
	 */
	func void clear()
		pButtonPressCount = 0
		pMouseMoveAccum = Vector2.new()
		
		pAxisStates.forEach(block AxisState each
			each.clear()
		end)
	end
	
	
	
	/** \brief Press mouse button. */
	func void pressMouseButton()
		pButtonPressCount++
		
		if pButtonPressCount == 1
			autoAddVirtualKeyboard()
			sendMouseButtonPress()
		end
	end
	
	/** \brief Release mouse button. */
	func void releaseMouseButton()
		if pButtonPressCount == 0
			return
		end
		
		pButtonPressCount--
		
		if pButtonPressCount == 0
			sendMouseButtonRelease()
		end
	end
	
	
	
	/** \brief Frame update. */
	func void frameUpdate(float elapsed)
		if not pEnabled
			return
		end
		
		prepareDevices()
		processMouseMovement(elapsed)
		processFocus(elapsed)
	end
	
	/** \brief Invalidate devices. */
	func void invalidateDevices()
		pAxisStates.removeAll()
		pDirtyDevices = true
	end
	
	
	
	/** \brief All mouse movement combined. */
	func Vector2 combinedMouseMove()
		return pAxisStates.inject(Vector2.new(), block Vector2 result, AxisState each
			return each.combineMouse(result)
		end) cast Vector2
	end
	
	/** \brief All focus combined. */
	func Vector2 combinedFocus()
		return pAxisStates.inject(Vector2.new(), block Vector2 result, AxisState each
			return each.combineFocus(result)
		end) cast Vector2
	end
	
	
	
	/** \brief Send event mouse button press if enabled. */
	func void sendMouseButtonPress()
		if pEnabled and InputSystem.getCaptureInputDevices()
			pWidget.processEvent(MouseEvent.new(pWidget, MouseEvent.idMousePressed,\
				InputEventMouseButton.left, InputEventModifier.none, -1))
		end
	end
	
	/** \brief Send event mouse button release if enabled. */
	func void sendMouseButtonRelease()
		if pEnabled and InputSystem.getCaptureInputDevices()
			pWidget.processEvent(MouseEvent.new(pWidget, MouseEvent.idMouseReleased, \
				InputEventMouseButton.left, InputEventModifier.none, -1))
		end
	end
	
	/** \brief Send event mouse moved if enabled. */
	func void sendMouseMoved(Point distance)
		if pEnabled and InputSystem.getCaptureInputDevices() and not distance.isZero()
			pWidget.processEvent(MouseEvent.new(pWidget, MouseEvent.idMouseMoved, 0, 0, distance, -1))
		end
	end
	
	
	
	/** \brief Process axis move event. */
	protected func void processEventAxisMove(GamepadEvent event)
		var InputEventSource system = event.getSystem()
		var int device = event.getDevice()
		var int axis = event.getCode()
		
		var AxisState state = pAxisStates.find(block AxisState each
			return each.matches(system, device, axis)
		end) cast AxisState
		
		if state != null
			
			state.update(this, event.getAxisValue())
		end
	end
	
	/** \brief Process button press event. */
	protected func void processEventButtonPress(GamepadEvent event)
		if event.getCode() == 0
			pressMouseButton()
		end
	end
	
	/** \brief Process button release event. */
	protected func void processEventButtonRelease(GamepadEvent event)
		if event.getCode() == 0
			releaseMouseButton()
		end
	end
	
	
	
	/** \brief Generate mouse movement events. */
	protected func void processMouseMovement(float elapsed)
		pMouseMoveAccum = pMouseMoveAccum + combinedMouseMove()
		var float len = pMouseMoveAccum.getLength()
		if len < 0.001
			return
		end
		
		if len > 1
			pMouseMoveAccum = pMouseMoveAccum / len
		end
		
		var Point distance = (pMouseMoveAccum * elapsed * pMouseSpeed\
			* mapMouseMovement(DEMath.linearStep(len, 0, 1))).round()
		
		if not distance.isZero()
			pMouseMoveAccum = Vector2.new()
			sendMouseMoved(distance)
		end
	end
	
	/** \brief Generate focus events. */
	protected func void processFocus(float elapsed)
		// TODO
	end
	
	/**
	 * \brief Mouse movement mapping.
	 * 
	 * Input is value in the range from 0 to 1. Output is mapped value in the range from 0 to 1.
	 * Mapping is used to make mouse movement for small stick value smaller for precise control
	 * and larger for large stick values. The default implementation applies the mouse
	 * acceleration as power to the input value.
	 */
	protected func float mapMouseMovement(float factor)
		return DEMath.pow(factor, pMouseMovementAcceleration)
	end
	
	
	
	/** \brief Prepare devices. */
	protected func void prepareDevices()
		if pDirtyDevices
			pDirtyDevices = false
			updateInputDevices()
		end
	end
	
	/** \brief Update input devices. */
	protected func void updateInputDevices()
		pAxisStates.removeAll()
		
		var int i, count
		
		count = InputSystem.getDeviceCount()
		for i = 0 to count
			trackDeviceAxes(InputEventSource.input, i, InputSystem.getDeviceAt(i))
		end
		
		count = VRSystem.getDeviceCount()
		for i = 0 to count
			trackDeviceAxes(InputEventSource.vr, i, VRSystem.getDeviceAt(i))
		end
	end
	
	/** \brief Track device axes. */
	protected func void trackDeviceAxes(InputEventSource system, int deviceIndex, InputDevice device)
		select device.getType()
		case InputDeviceType.gamepad, InputDeviceType.joystick
		else
			return
		end
		
		var int i, count
		var int indexMouseAxis, indexFocusAxis, indexTrigger
		
		count = device.getAxisCount()
		for i = 0 to count
			select device.getAxisAt(i).getType()
			case InputDeviceAxisType.stick
				if indexMouseAxis % 2 == 0
					pAxisStates.add(AxisState.new(system, deviceIndex, i, AxisTarget.mouseX))
					
				else
					pAxisStates.add(AxisState.new(system, deviceIndex, i, AxisTarget.mouseY))
				end
				
				indexMouseAxis++
				
			case InputDeviceAxisType.hat
				if indexFocusAxis % 2 == 0
					pAxisStates.add(AxisState.new(system, deviceIndex, i, AxisTarget.focusX))
					
				else
					pAxisStates.add(AxisState.new(system, deviceIndex, i, AxisTarget.focusY))
				end
				
				indexFocusAxis++
				
			case InputDeviceAxisType.trigger
				if indexTrigger < 2
					pAxisStates.add(AxisState.new(system, deviceIndex, i, AxisTarget.button))
				end
				
				indexTrigger++
			end
		end
	end
	
	/**
	 * \brief Automatically add virtual keyboard if preconditions are fulfilled.
	 * \version 1.24
	 * 
	 * Virtual keyboard is added if:
	 * - \ref #getAutoAddVirtualKeyboard() is true.
	 * - \ref #getWidget() is castable to \ref Desktop.
	 * - \ref Desktop#getWindowVirtualKeyboard() is null.
	 */
	protected func void autoAddVirtualKeyboard()
		if pAutoAddVirtualKeyboardDone
			return
		end
		
		if pAutoAddVirtualKeyboard and pWidget castable Desktop
			var Desktop desktop = pWidget cast Desktop
			if desktop.getWindowVirtualKeyboard() == null
				desktop.setWindowVirtualKeyboard(createWindowVirtualKeyboard())
			end
		end
		
		pAutoAddVirtualKeyboardDone = true
	end
	
	/**
	 * \brief Create virtual keyboard window.
	 * \version 1.24
	 * 
	 * Default implementation returns instance of \ref WindowVirtualKeyboard.
	 */
	protected func WindowVirtualKeyboard createWindowVirtualKeyboard()
		return WindowVirtualKeyboard.new()
	end
end
