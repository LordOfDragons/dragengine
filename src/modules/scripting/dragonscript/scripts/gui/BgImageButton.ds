/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */


namespace Dragengine.Gui

pin Dragengine.Gui.Events
pin Dragengine.Gui.Layouts


/**
 * \brief Button with state dependent background image and optional text and image.
 */
class BgButton extends Button
	var Image pImageBgPressed
	var Image pImageBgUnpressed
	var DisplayImage pBackground
	var Panel pPanelText
	var Label pLabel
	var DisplayImage pImage
	
	
	
	/** \brief Create button. */
	func new(Image bgUnpressed, Image bgPressed) this(bgUnpressed, bgPressed, "", null)
	end
	
	/** \brief Create button. */
	func new(Image bgUnpressed, Image bgPressed, String text, Image image)
		pImageBgPressed = bgPressed
		pImageBgUnpressed = bgUnpressed
		
		setLayout(StackLayout.new())
		
		pBackground = DisplayImage.new(bgUnpressed, RepeatMode.stretch)
		addWidget(pBackground)
		
		pPanelText = Panel.new()
		pPanelText.setLayout(CentrizedBoxLayout.new(LayoutAxis.y))
		
		pImage = DisplayImage.new(image)
		pPanelText.addWidget(pImage)
		pImage.setVisible(image != null)
		
		pLabel = Label.new(text)
		pPanelText.addWidget(pLabel)
		pLabel.setVisible(not text.empty())
		
		addWidget(pPanelText)
		
		setBorder(null)
	end
	
	/** \brief Dispose of widget. */
	func void dispose()
		pImage = null
		pLabel = null
		pPanelText = null
		pBackground = null
		
		super.dispose()
	end
	
	
	
	/** \brief Text of the button. */
	func String getText()
		return pLabel.getText()
	end
	
	/** \brief Set text of the button. */
	func void setText(String text)
		pLabel.setText(text)
		pLabel.setVisible(not text.empty())
	end
	
	/** \brief Image of the button. */
	func Image getImage()
		return pImage.getImage()
	end
	
	/** \brief Set image of the button. */
	func void setImage(Image image)
		pImage.setImage(image)
		pImage.setVisible(image != null)
	end
	
	/** \brief Text padding. */
	func BorderSize getTextPadding()
		return BorderSize.new(pPanelText.getPadding().getLeft(), pPanelText.getPadding().getTop(), \
			pPanelText.getPadding().getRight(), pPanelText.getPadding().getBottom())
	end
	
	/** \brief Set text padding. */
	func void setTextPadding(BorderSize padding)
		pPanelText.setPadding(padding)
	end
	
	/** \brief Set text padding. */
	func void setTextPadding(int padding)
		pPanelText.setPadding(BorderSize.new(padding))
	end
	
	/** \brief Pressed background image. */
	func Image getImageBgPressed()
		return pImageBgPressed
	end
	
	/** \brief Set pressed background image. */
	func void setImageBgPressed(Image image)
		if image == pImageBgPressed
			return
		end
		
		pImageBgPressed = image
		updateBackgroundImage()
	end
	
	/** \brief Unpressed background image. */
	func Image getImageBgUnpressed()
		return pImageBgUnpressed
	end
	
	/** \brief Set unpressed background image. */
	func void setImageBgUnpressed(Image image)
		if image == pImageBgUnpressed
			return
		end
		
		pImageBgUnpressed = image
		updateBackgroundImage()
	end
	
	
	
	/** \brief Lock size to unpressed or presed image size, whichever exists. */
	func void lockSize()
		var Point size
		
		if pImageBgUnpressed != null
			size = pImageBgUnpressed.getSize()
			
		elif pImageBgPressed != null
			size = pImageBgPressed.getSize()
		end
		
		setMinimumSize(size)
	end
	
	/** \brief Unlock size. */
	func void unlockSize()
		setMinimumSize(null)
	end
	
	
	
	/** Set font of the button text. */
	func void setFont(Font font)
		super.setFont(font)
		pLabel.setFont(font)
	end
	
	/** Set foreground color of button text. */
	func void setTextColor(Color color)
		super.setTextColor(color)
		pLabel.setTextColor(color)
	end
	
	
	
	/** \brief State changed. */
	func void onStateChanged(StateChangeEvent event)
		super.onStateChanged(event)
		updateBackgroundImage()
	end
	
	/** Update background image. */
	func void updateBackgroundImage()
		if pBackground == null
			return // constructor call protection
		end
		
		if getPressed()
			pBackground.setImage(pImageBgPressed)
			
		else
			pBackground.setImage(pImageBgUnpressed)
		end
	end
end
