/* 
 * Drag[en]gine DragonScript Script Module
 *
 * Copyright (C) 2020, Roland Pl√ºss (roland@rptd.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */


namespace Dragengine.Gui

pin Dragengine.Gui.Events
pin Dragengine.Gui.Layouts


/**
 * \brief Button with state dependent background image and optional text and image.
 */
class BgButton extends Button
	var Image pImageBgPressed
	var Image pImageBgUnpressed
	var DisplayImage pBackground
	var Panel pPanelText
	var Label pLabel
	var DisplayImage pImage
	
	
	
	/** \brief Create button. */
	func new(Image bgUnpressed, Image bgPressed) this(bgUnpressed, bgPressed, "", null)
	end
	
	/** \brief Create button. */
	func new(Image bgUnpressed, Image bgPressed, String text, Image image)
		pImageBgPressed = bgPressed
		pImageBgUnpressed = bgUnpressed
		
		setLayout(StackLayout.new())
		
		pBackground = DisplayImage.new(bgUnpressed, RepeatMode.stretch)
		addWidget(pBackground)
		
		pPanelText = Panel.new()
		pPanelText.setLayout(CentrizedBoxLayout.new(LayoutAxis.y))
		
		pImage = DisplayImage.new(image)
		pPanelText.addWidget(pImage)
		pImage.setVisible(image != null)
		
		pLabel = Label.new(text)
		pPanelText.addWidget(pLabel)
		pLabel.setVisible(not text.empty())
		
		addWidget(pPanelText)
		
		setBorder(null)
	end
	
	/** \brief Dispose of widget. */
	func void dispose()
		pImage = null
		pLabel = null
		pPanelText = null
		pBackground = null
		
		super.dispose()
	end
	
	
	
	/** \brief Text of the button. */
	func String getText()
		return pLabel.getText()
	end
	
	/** \brief Set text of the button. */
	func void setText(String text)
		pLabel.setText(text)
		pLabel.setVisible(not text.empty())
	end
	
	/** \brief Image of the button. */
	func Image getImage()
		return pImage.getImage()
	end
	
	/** \brief Set image of the button. */
	func void setImage(Image image)
		pImage.setImage(image)
		pImage.setVisible(image != null)
	end
	
	/** \brief Text padding. */
	func BorderSize getTextPadding()
		return BorderSize.new(pPanelText.getPadding().getLeft(), pPanelText.getPadding().getTop(), \
			pPanelText.getPadding().getRight(), pPanelText.getPadding().getBottom())
	end
	
	/** \brief Set text padding. */
	func void setTextPadding(BorderSize padding)
		pPanelText.setPadding(padding)
	end
	
	/** \brief Set text padding. */
	func void setTextPadding(int padding)
		pPanelText.setPadding(BorderSize.new(padding))
	end
	
	/** \brief Pressed background image. */
	func Image getImageBgPressed()
		return pImageBgPressed
	end
	
	/** \brief Set pressed background image. */
	func void setImageBgPressed(Image image)
		if image == pImageBgPressed
			return
		end
		
		pImageBgPressed = image
		updateBackgroundImage()
	end
	
	/** \brief Unpressed background image. */
	func Image getImageBgUnpressed()
		return pImageBgUnpressed
	end
	
	/** \brief Set unpressed background image. */
	func void setImageBgUnpressed(Image image)
		if image == pImageBgUnpressed
			return
		end
		
		pImageBgUnpressed = image
		updateBackgroundImage()
	end
	
	
	
	/** \brief Lock size to unpressed or presed image size, whichever exists. */
	func void lockSize()
		var Point size
		
		if pImageBgUnpressed != null
			size = pImageBgUnpressed.getSize()
			
		elif pImageBgPressed != null
			size = pImageBgPressed.getSize()
		end
		
		setMinimumSize(size)
	end
	
	/** \brief Unlock size. */
	func void unlockSize()
		setMinimumSize(null)
	end
	
	
	
	/** Set font of the button text. */
	func void setFont(Font font)
		super.setFont(font)
		pLabel.setFont(font)
	end
	
	/** Set foreground color of button text. */
	func void setTextColor(Color color)
		super.setTextColor(color)
		pLabel.setTextColor(color)
	end
	
	
	
	/** \brief State changed. */
	func void onStateChanged(StateChangeEvent event)
		super.onStateChanged(event)
		updateBackgroundImage()
	end
	
	/** Update background image. */
	func void updateBackgroundImage()
		if pBackground == null
			return // constructor call protection
		end
		
		if getPressed()
			pBackground.setImage(pImageBgPressed)
			
		else
			pBackground.setImage(pImageBgUnpressed)
		end
	end
end
