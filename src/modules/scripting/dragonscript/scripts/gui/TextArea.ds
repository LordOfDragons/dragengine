/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */


namespace Dragengine.Gui

pin Dragengine.Gui.Borders
pin Dragengine.Gui.Events
pin Dragengine.Scenery
pin Dragengine.Utils


/**
 * Displays an edit field where the user can enter a text with more
 * than one line.
 * 
 * Supports designing using designer selector "TextArea".
 * 
 * \par Context Menu
 * 
 * Since version 1.16 showContextMenu() and createContextMenu() is present. If present the
 * BaseGameApp translation manager is used. To translate the menu entries add these entries:
 * - "UI.Menu.Cut": Cut text menu item
 * - "UI.Menu.Copy": Copy text menu item
 * - "UI.Menu.Paste": Paste text menu item
 * - "UI.Menu.SelectAll": Select all text menu item
 * - "UI.Menu.Deselect": Deselect text menu item
 */
class TextArea extends TextWidget implements RangeModelListener
	/**
	 * \brief Action listener calling setSelection(null).
	 * \version 1.16
	 */
	class ActionDeselect implements ActionListener
		protected var TextArea pWidget
		
		/** \brief Create action. */
		public func new(TextArea widget)
			if widget == null
				throw ENullPointer.new("widget")
			end
			pWidget = widget
		end
		
		/** \brief Action fired. */
		public func void onAction(ActionEvent event)
			pWidget.setSelection(null)
		end
	end
	
	/**
	 * \brief Action listener calling setSelectionAll().
	 * \version 1.16
	 */
	class ActionSelectAll implements ActionListener
		protected var TextArea pWidget
		
		/** \brief Create action. */
		public func new(TextArea widget)
			if widget == null
				throw ENullPointer.new("widget")
			end
			pWidget = widget
		end
		
		/** \brief Action fired. */
		public func void onAction(ActionEvent event)
			pWidget.setSelectionAll()
		end
	end
	
	
	
	private var TextLayout pTextLayout
	private var Point pCaret
	private var UTF8Navigator pCursorPos
	private var int pMaxWidth
	private var bool pNeedsUpdate
	private var int pRefXPos
	private var bool pRefXPosDirty
	private var UTF8Navigator pSelectionStart
	private var UTF8Navigator pSelectionEnd
	private var UTF8Navigator pOldCursorPos
	private var Point pSelXOffsets
	private var DefaultRangeModel pVertRangeModel
	private var int pRowCount
	
	
	
	/** Creates a new Text Area. */
	public func new() this(DefaultTextModel.new())
	end
	
	/** Creates a new Text Field. */
	public func new(String text) this(DefaultTextModel.new(text))
	end
	
	/** Creates a new Text Field. */
	public func new(TextModel textModel) this(textModel, false)
	end
	
	/** \brief Create text area. */
	public func new(TextModel textModel, bool readOnly) super(textModel, readOnly)
		pCursorPos = UTF8Navigator.new(textModel.getText())
		pMaxWidth = 150
		pRefXPos = 0
		pRefXPosDirty = true
		pNeedsUpdate = true
		pRowCount = 5
		
		setCanFocus(true)
		setCanFocusDirectional(true)
		pVertRangeModel = DefaultRangeModel.new(0, 0, 1, 0, 1)
		pVertRangeModel.addListener(this)
		
		setDesignerSelector("TextArea")
		setAddTabToText(true)
		
		updateCanvasText()
	end
	
	/** \brief Create text area. */
	public func new(TextModel textModel, int rowCount) this(textModel)
		setRowCount(rowCount)
	end
	
	/** \brief Create text area. */
	public func new(TextModel textModel, int rowCount, bool readOnly) this(textModel, readOnly)
		setRowCount(rowCount)
	end
	
	/** Dispose of this widget. */
	public func void dispose()
		pVertRangeModel.removeListener(this)
		pVertRangeModel = null
		super.dispose()
	end
	
	
	
	/**
	 * Retrieves the vertical range model. Viewport widgets can
	 * use this range model to synchronize with their vertical
	 * scrollbar. If this widget has no reasonable vertical
	 * range model it should return null.
	 */
	public func RangeModel getVerticalRangeModel()
		return pVertRangeModel
	end
	
	/**
	 * Retrieves the horizontal range model. Viewport widgets can
	 * use this range model to synchronize with their horizontal
	 * scrollbar. If this widget has no reasonable horizontal
	 * range model it should return null.
	 */
	public func RangeModel getHorizontalRangeModel()
		return null
	end
	
	
	
	/** Retrieves the line the cursor is on. */
	public func int getCursorLine()
		var int i, count = pTextLayout.getLineCount()
		var int cursorPos = pCursorPos.getPosition()
		
		for i = 1 to count
			if cursorPos < pTextLayout.getLine(i).getFirstChar()
				return i - 1
			end
		end
		
		return count - 1
	end
	
	/** Retrieves the line for a specific cursor position. */
	public func int getCursorLineFor(int pos)
		if pos < 0 or pos > getText().getLength()
			throw EInvalidParam.new()
		end
		
		var int i, count = pTextLayout.getLineCount()
		
		for i = 1 to count
			if pos < pTextLayout.getLine(i).getFirstChar()
				return i - 1
			end
		end
		
		return count - 1
	end
	
	/** Retrieves the current position of the cursor in the text. */
	public func int getCursorPosition()
		return pCursorPos.getPosition()
	end
	
	/** Retrieves the selection if present. */
	public func Point getSelection()
		if pSelectionStart != null
			return Point.new(pSelectionStart.getPosition(), pSelectionEnd.getPosition())
		end
		return null
	end
	
	/** Retrieves the index of the first line visible. */
	public func int getFirstLine()
		return pVertRangeModel.getValue()
	end
	
	/** Retrieve maximal width of text before break occurs. */
	public func int getMaximalWidth()
		return pMaxWidth
	end
	
	/** Retrieves the number of text lines. */
	public func int getLineCount()
		return pTextLayout.getLineCount()
	end
	
	/** Retrieves the number of UTF-8 bytes on the current line. */
	public func int getCursorLineCharCount()
		return pTextLayout.getLine(getCursorLine()).getCharCount()
	end
	
	/**
	 * Sets the current cursor position in the text. If the cursor is outside
	 * the visible area the text is shifted to make the cursor visible.
	 */
	public func void setCursorPosition(int pos)
		if pos < 0 or pos > getText().getLength()
			throw EInvalidParam.new()
		end
		
		pCursorPos.setPosition(pos)
		pCaret = null
		pRefXPosDirty = true
		pNeedsUpdate = true
		updateCanvasText()
	end
	
	/**
	 * \brief Set cursor position closest to position relative to widget.
	 * \version 1.16
	 */
	public func void setCursorPositionNear(Point position)
		var int scrollOffsetY = pVertRangeModel.getValue() * getFont().getSize()
		var int realX = position.getX() - getPadding().getLeft()
		var int realY = position.getY() - getPadding().getTop() + scrollOffsetY
		
		pCursorPos = bestCharNearNav(bestLineNear(realY), realX)
		pCaret = null
		pSelectionEnd = pSelectionStart = null
		pSelXOffsets = null
		pRefXPosDirty = true
		updateCanvasText()
	end
	
	/** Sets the cursor position to the start of the text. */
	public func void setCursorPositionStart()
		setCursorPosition(0)
	end
	
	/** Sets the cursor position to the end of the text. */
	public func void setCursorPositionEnd()
		setCursorPosition(getText().getLength())
	end
	
	/** Sets the selection or clears it. */
	public func void setSelection(Point selection)
		if selection != null
			var String text = getText()
			pSelectionStart = UTF8Navigator.new(text, selection.getX())
			pSelectionEnd = UTF8Navigator.new(text, selection.getY())
			sanitizeSelection()
			
		else
			pSelectionEnd = pSelectionStart = null
		end
		
		pSelXOffsets = null
		pNeedsUpdate = true
		updateCanvasText()
	end
	
	/** Sets the selection to the entire text. */
	public func void setSelectionAll()
		setSelection(Point.new(0, getText().getLength()))
	end
	
	/** Sets maximal width of text before break occurs. */
	public func void setMaximalWidth(int width)
		if width < 0
			throw EInvalidParam.new()
		end
		
		pMaxWidth = width
		pTextLayout = null
		pSelXOffsets = null
		pCaret = null
		updateCanvasText()
	end
	
	/** Calculates the size of the content text. */
	public func Point getTextSize()
		return Point.new(pTextLayout.getWidth(), pTextLayout.getHeight())
	end
	
	/** \brief Number display rows. */
	public func int getRowCount()
		return pRowCount
	end
	
	/** \brief Set number display rows. */
	public func void setRowCount(int rowCount)
		if rowCount == pRowCount
			return
		end
		
		if rowCount < 1
			throw EInvalidParam.new()
		end
		
		pRowCount = rowCount
		pTextLayout = null
		updateCanvasText()
	end
	
	
	
	/** Deletes the selected text if present. */
	public func void deleteSelectedText()
		if getReadOnly() or pSelectionStart == null
			return
		end
		
		var String curText = getText()
		var String newText = ""
		
		if not pSelectionStart.isAtStart()
			newText = newText + curText.substring(0, pSelectionStart.getPosition())
		end
		if not pSelectionEnd.isAtEnd()
			newText = newText + curText.substring(pSelectionEnd.getPosition())
		end
		
		if getValidator() == null or getValidator().validates(newText)
			pCursorPos = pSelectionStart
			pSelectionEnd = pSelectionStart = null
			setHasTyped(true)
			setText(newText)
		end
	end
	
	
	
	/** Ensure that the cursor is visible by scrolling the text if necessary. */
	public func void ensureCursorVisible()
		// make cursor line visible
		var int height = getHeight() - getPadding().getHeight()
		var int windowLines = height / getFont().getSize()
		var int cursorLine = getCursorLine()
		var int firstLine = pVertRangeModel.getValue()
		
		if cursorLine < firstLine
			pVertRangeModel.setValue(cursorLine)
			
		elif cursorLine >= firstLine + windowLines
			pVertRangeModel.setValue(cursorLine - windowLines + 1)
		end
		
		// horizontally scrolling is not possible so no check required here
	end
	
	
	
	/** Notification that the gui theme changed. */
	public func void onGuiThemeChanged()
		super.onGuiThemeChanged()
		
		pTextLayout = null
		pSelXOffsets = null
		pCaret = null
		pRefXPosDirty = true
		pNeedsUpdate = true
		updateCanvasText()
	end
	
	/** \brief Padding changed. */
	public func void onPaddingChanged()
		super.onPaddingChanged()
		
		pTextLayout = null
		pSelXOffsets = null
		pNeedsUpdate = true
		pCaret = null
		updateCanvasText()
	end
	
	/** \brief Size changed. */
	public func void onResize(WidgetEvent event)
		super.onResize(event)
		pTextLayout = null
		pSelXOffsets = null
		pCaret = null
		pNeedsUpdate = true
		updateCanvasText()
	end
	
	/** Notify about font change. */
	public func void onSetFont()
		pTextLayout = null
		pSelXOffsets = null
		pCaret = null
		pRefXPosDirty = true
		pNeedsUpdate = true
		updateCanvasText()
	end
	
	/** Foreground color changed. */
	public func void onSetTextColor()
		updateCanvasText()
	end
	
	/** \brief Widget received focus. */
	public func void onFocusReceived(FocusEvent event)
		super.onFocusReceived(event)
		updateCanvasText()
	end
	
	/** \brief Widget lost focus. */
	public func void onFocusLost(FocusEvent event)
		super.onFocusLost(event)
		updateCanvasText()
		popdownVirtualKeyboard()
	end
	
	
	
	/** Retrieve the minimal size of widget. */
	public func Point getMinimumSize()
		if isMinimumSizeSet()
			return super.getMinimumSize()
		end
		
		var Font font = getFont()
		if font == null
			return super.getMinimumSize()
		end
		
		return Point.new(pMaxWidth, font.getSize() * pRowCount + getPadding().getHeight())
	end
	
	
	
	/**
	 * \brief Minimum size of widget using reference widget width and variable height.
	 * \details Default implementation uses getMinimumSize().
	 */
	public func Point getMinimumSizeForWidth(int width)
		if isMinimumSizeSet()
			return super.getMinimumSize()
		end
		
		var Font font = getFont()
		if font == null
			return Point.new()
		end
		
		return Point.new(DEMath.min(width, pMaxWidth), font.getSize() * pRowCount + getPadding().getHeight())
	end
	
	
	
	/**
	 * \brief Show context menu at position relative to widget.
	 * \version 1.16
	 */
	public func void showContextMenu(Point position)
		var Desktop desktop = getDesktop()
		if desktop == null
			return
		end
		
		var MenuPopup menu = createContextMenu(position, getTranslationManager())
		if menu.getWidgetCount() == 0
			menu.safeDispose()
			return
		end
		
		desktop.addWindow(menu)
		menu.popup(getDesktopPosition() + position)
		menu.setGuiTheme(getGuiTheme())
	end
	
	/**
	 * \brief Create context menu at position relative to widget.
	 * \version 1.20
	 * \param position Position relative to text are the context menu has to be created for.
	 */
	protected func MenuPopup createContextMenu(Point position)
		var bool hasSelection = pSelectionStart != null
		var bool hasClipboard = getClipboard() != null
		var bool hasClip = hasClipboard and getClipboard().hasClip()
		var bool writeable = not getReadOnly()
		var MenuPopup menu = MenuPopup.new()
		
		menu.addItemCommand(menu, "@UI.Menu.Cut", null,\
			writeable and hasSelection and hasClipboard, ActionCut.new(this))
		menu.addItemCommand(menu, "@UI.Menu.Copy", null,\
			hasSelection and hasClipboard, ActionCopy.new(this))
		menu.addItemCommand(menu, "@UI.Menu.Paste", null,\
			writeable and hasClip, ActionPaste.new(this))
		
		menu.addWidget(MenuItemSeparator.new())
		menu.addItemCommand(menu, "@UI.Menu.SelectAll", null, true, ActionSelectAll.new(this))
		menu.addItemCommand(menu, "@UI.Menu.Deselect", null, hasSelection, ActionDeselect.new(this))
		
		return menu
	end
	
	/**
	 * \deprecated Use createContextMenu(Point).
	 * \version 1.16
	 */
	protected func MenuPopup createContextMenu(Point position, TranslationManager translationManager)
		return createContextMenu(position)
	end
	
	
	
	/** Key pressed event. */
	public func void onKeyPress(KeyEvent event)
		var bool shift = (event.getModifiers() & InputEventModifier.shift) == InputEventModifier.shift
		var bool control = (event.getModifiers() & InputEventModifier.control) == InputEventModifier.control
		var int line = getCursorLine()
		var int first = pTextLayout.getLine(line).getFirstChar()
		var int count = pTextLayout.getLine(line).getCharCount()
		var bool update
		
		select event.getKeyCode()
		case InputEventKey.arrowUp
			var UTF8Navigator nextCursorPos
			if line > 0
				nextCursorPos = bestCharNearNav(line - 1, getRefXPos())
				
			else
				nextCursorPos = pCursorPos.atStart()
			end
			
			if shift
				if nextCursorPos.getPosition() == pCursorPos.getPosition()
					break
				end
				extendSelectionLeft(UTF8Navigator.new(nextCursorPos))
				
			else
				if pSelectionStart == null and nextCursorPos.getPosition() == pCursorPos.getPosition()
					break
				end
				pSelectionEnd = pSelectionStart = null
			end
			
			pCursorPos = nextCursorPos
			pRefXPosDirty = true
			update = true
			
		case InputEventKey.arrowDown
			var UTF8Navigator nextCursorPos
			if line < getLineCount() - 1
				nextCursorPos = bestCharNearNav(line + 1, getRefXPos())
				
			else
				nextCursorPos = pCursorPos.atEnd()
			end
			
			if shift
				if nextCursorPos.getPosition() == pCursorPos.getPosition()
					break
				end
				extendSelectionRight(UTF8Navigator.new(nextCursorPos))
				
			else
				if pSelectionStart == null and nextCursorPos.getPosition() == pCursorPos.getPosition()
					break
				end
				pSelectionEnd = pSelectionStart = null
			end
			
			pCursorPos = nextCursorPos
			pRefXPosDirty = true
			update = true
			
		case InputEventKey.arrowLeft
			if shift
				if pCursorPos.isAtStart()
					break
				end
				extendSelectionLeft(pCursorPos - 1)
				
			else
				if pSelectionStart == null and pCursorPos.isAtStart()
					break
				end
				pSelectionEnd = pSelectionStart = null
			end
			
			pCursorPos.backward()
			pRefXPosDirty = true
			update = true
			
		case InputEventKey.arrowRight
			if shift
				if pCursorPos.isAtEnd()
					break
				end
				extendSelectionRight(pCursorPos + 1)
				
			else
				if pSelectionStart == null and pCursorPos.isAtEnd()
					break
				end
				pSelectionEnd = pSelectionStart = null
			end
			
			pCursorPos.forward()
			pRefXPosDirty = true
			update = true
			
		case InputEventKey.home
			if shift
				if pCursorPos.getPosition() == first
					break
				end
				extendSelectionLeft(UTF8Navigator.new(pCursorPos, first))
				
			else
				if pSelectionStart == null and pCursorPos.getPosition() == first
					break
				end
				pSelectionEnd = pSelectionStart = null
			end
			
			pCursorPos.setPosition(first)
			pRefXPosDirty = true
			update = true
			
		case InputEventKey.last
			if shift
				if pCursorPos.getPosition() == first + count
					break
				end
				extendSelectionRight(UTF8Navigator.new(pCursorPos, first + count))
				
			else
				if pSelectionStart == null and pCursorPos.getPosition() == first + count
					break
				end
				pSelectionEnd = pSelectionStart = null
			end
			
			pCursorPos.setPosition(first + count)
			pRefXPosDirty = true
			update = true
			
		case InputEventKey.a
			if control
				if shift
					if pSelectionStart == null
						break
					end
					
					pSelectionEnd = pSelectionStart = null
					update = true
					
				else
					if pSelectionStart != null and pSelectionStart.isAtStart() and pSelectionEnd.isAtEnd()
						break
					end
					
					pCursorPos.setPositionEnd()
					setSelectionAll()
					update = true
				end
				
			else
				super.onKeyPress(event)
			end
			
		//case InputEventKey.enter
			// we intercept enter to avoid launching a default button. later on a property can
			// be used to allow this if required
			
			// PROBLEM. super class call is required for KEY_RETURN to be processed as onKeyType()
			//          when default button is working we need a real solution for  most
			//          probably adding a parameter to TextWidget to state if KEY_RETURN has to
			//          be swallowed or not
			
		else
			super.onKeyPress(event)
		end
		
		if update
			pCaret = null
			pSelXOffsets = null
			ensureCursorVisible()
			updateCanvasText()
		end
	end
	
	/** Key released event. */
//	public func void onKeyRelease(KeyEvent event)
//	end
	
	
	
	func void focusClosestWidget(float angle)
		if angle < -135 or angle > 135
			if not pCursorPos.isAtEnd()
				simulateKeyPressRelease(InputEventKey.arrowDown, 0)
				desktopWarpMouseFocusLocation()
				return
			end
			
		elif angle < -45
			if not pCursorPos.isAtEnd()
				simulateKeyPressRelease(InputEventKey.arrowRight, 0)
				desktopWarpMouseFocusLocation()
				return
			end
			
		elif angle > 45
			if not pCursorPos.isAtStart()
				simulateKeyPressRelease(InputEventKey.arrowLeft, 0)
				desktopWarpMouseFocusLocation()
				return
			end
			
		else
			if not pCursorPos.isAtStart()
				simulateKeyPressRelease(InputEventKey.arrowUp, 0)
				desktopWarpMouseFocusLocation()
				return
			end
		end
		
		if not isCapturingMouse()
			super.focusClosestWidget(angle)
		end
	end
	
	func Point getFocusMouseLocation()
		var Font font = getFont()
		if font == null
			return super.getFocusMouseLocation()
		end
		
		var int width = getWidth() - 1 - getPadding().getWidth()
		var int height = getHeight() - 1 - getPadding().getHeight()
		var int charHeight = font.getSize()
		var int scrollOffsetY = pVertRangeModel.getValue() * charHeight
		var Point position = getCaret()
		
		var int x = getPadding().getLeft() + position.getX() + 1
		var int y = getPadding().getTop() - scrollOffsetY + position.getY() + charHeight * 2 / 3
		
		return Point.new(DEMath.clamp(x, 0, width - 1), DEMath.clamp(y, 0, height - 1))
	end
	
	
	
	/** Notification that a mouse button has been pressed. */
	public func void onButtonPress(MouseEvent event)
		super.onButtonPress(event)
		
		select event.getButton()
		case InputEventMouseButton.left
			setCursorPositionNear(event.getPosition())
			pOldCursorPos = UTF8Navigator.new(pCursorPos)
			captureMouse()
			
		case InputEventMouseButton.right
			if pSelectionStart == null
				setCursorPositionNear(event.getPosition())
			end
			showContextMenu(event.getPosition())
		end
	end
	
	/** Notification that a mouse button has been released. */
	public func void onButtonRelease(MouseEvent event)
		super.onButtonRelease(event)
		
		if event.getButton() == InputEventMouseButton.left
			if pOldCursorPos != null
				pOldCursorPos = null
				releaseMouse()
			end
			popupVirtualKeyboard()
		end
	end
	
	/** Notification that the mouse has moved. */
	public func void onMouseMove(MouseEvent event)
		super.onMouseMove(event)
		
		if pOldCursorPos != null
			var int scrollOffsetY = pVertRangeModel.getValue() * getFont().getSize()
			var Point position = event.getPosition()
			var int realX = position.getX() - getPadding().getLeft()
			var int realY = position.getY() - getPadding().getTop() + scrollOffsetY
			
			pCursorPos = bestCharNearNav(bestLineNear(realY), realX)
			
			if pCursorPos.getPosition() == pOldCursorPos.getPosition()
				pSelectionEnd = pSelectionStart = null
				
			elif pCursorPos.getPosition() < pOldCursorPos.getPosition()
				pSelectionStart = UTF8Navigator.new(pCursorPos)
				pSelectionEnd = UTF8Navigator.new(pOldCursorPos)
				
			else
				pSelectionStart = UTF8Navigator.new(pOldCursorPos)
				pSelectionEnd = UTF8Navigator.new(pCursorPos)
			end
			
			pSelXOffsets = null
			pCaret = null
			pRefXPosDirty = true
			updateCanvasText()
		end
	end
	
	func void onGamepadButtonPressed(GamepadEvent event)
		if event.getCode() == 1
			popdownVirtualKeyboardDirectional()
		end
		
		super.onGamepadButtonPressed(event)
	end
	
	
	
	/** \brief Index of best character on line in respect to reference x position. */
	protected func int bestCharNear(int line, int refXPos)
		return bestCharNearNav(line, refXPos).getPosition()
	end
	
	/**
	 * \brief Navigator of best character on line in respect to reference x position.
	 * \version 1.16
	 */
	protected func UTF8Navigator bestCharNearNav(int line, int refXPos)
		var UTF8Navigator nav = UTF8Navigator.new(pCursorPos, pTextLayout.getLine(line).getFirstChar())
		var int lastChar = nav.getPosition() + pTextLayout.getLine(line).getCharCount()
		var float floatRefXPos = (refXPos cast float) + 0.1
		var Font font = getFont()
		var int character
		var float x
		
		while nav.getPosition() < lastChar
			character = nav.decodeCharacter()
			if character != -1
				x += font.getCharAdvance(character)
			end
			if x > floatRefXPos
				break
			end
			nav.forward()
		end
		
		return nav
	end
	
	/** Finds best line in reference to a given y position. */
	protected func int bestLineNear(int refYPos)
		var int i, count = pTextLayout.getLineCount()
		
		for i = 1 to count
			if refYPos < pTextLayout.getLine(i).getY()
				return i - 1
			end
		end
		
		return count - 1
	end
	
	/** Calculates the offset to cursor. */
	protected func Point getOffsetToCursor()
		var TextLayoutLine line = pTextLayout.getLine(getCursorLine())
		var int x = measureAdvance(line.getFirstChar(), pCursorPos.getPosition(), getFont()) cast int
		return Point.new(x, line.getY())
	end
	
	/** Retrieves the reference x position. */
	protected func int getRefXPos()
		if pRefXPosDirty
			pRefXPos = getCaret().getX()
			pRefXPosDirty = false
		end
		return pRefXPos
	end
	
	/** Retrieves the caret position. */
	protected func Point getCaret()
		if pCaret == null
			pCaret = getOffsetToCursor()
		end
		return pCaret
	end
	
	/** Retrieves the selection x offsets. */
	protected func Point getSelectionXOffsets()
		if pSelXOffsets == null and pSelectionStart != null
			var int startLine = getCursorLineFor(pSelectionStart.getPosition())
			var int endLine = getCursorLineFor(pSelectionEnd.getPosition())
			var Font font = getFont()
			
			var float startOffset = measureAdvance(pTextLayout.getLine(startLine).getFirstChar(),\
				pSelectionStart.getPosition(), font)
			
			var float endOffset = measureAdvance(pTextLayout.getLine(endLine).getFirstChar(),\
				pSelectionEnd.getPosition(), font)
			
			pSelXOffsets = Point.new(startOffset cast int, endOffset cast int)
		end
		
		return pSelXOffsets
	end
	
	/** Update range models. */
	protected func void updateRangeModels()
		var int height = getHeight() - getPadding().getHeight()
		var int windowLines = DEMath.max(height / getFont().getSize(), 1)
		var int maxLines = DEMath.max(getLineCount() - windowLines, 0)
		
		pVertRangeModel.setAll(0, maxLines, windowLines, getFirstLine(), 1)
	end
	
	
	
	/**
	 * \brief Check cursor is inside text boundaries and adjust if necessary.
	 * \deprecated Not required anymore. Implementat is empty now.
	 */
	protected func void checkBoundaries()
	end
	
	
	
	/** Update canvas. */
	private func void updateCanvasText()
		var Font font = getFont()
		if font == null
			getCanvasContent().removeAllCanvas()
			return
		end
		
		updateTextLayout()
		
		var Color color = getTextColor()
		if color == null
			getCanvasContent().removeAllCanvas()
			return
		end
		
		pTextLayout.setFont(font)
		pTextLayout.setColor(color)
		pCaret = null
		
		var Point caret = getCaret()
		var int charHeight = font.getSize()
		var int scrollOffsetY = pVertRangeModel.getValue() * charHeight
		var int width = getWidth() - 1 - getPadding().getWidth()
		var int selFrom = -1, selTo = -1, soff, eoff
		var Point selXOffsets
		var int i
		
		// check for update
		if pNeedsUpdate
			pNeedsUpdate = false
			ensureCursorVisible()
		end
		
		// add text lines as canvas including selection rectangles
		var CanvasView canvas = getCanvasContent()
		canvas.removeAllCanvas()
		
		var int lineCount = pTextLayout.getLineCount()
		var int x = getPadding().getLeft()
		var int y = getPadding().getTop() - scrollOffsetY
		
		if pSelectionStart != null
			selXOffsets = getSelectionXOffsets()
			selFrom = pSelectionStart.getPosition()
			selTo = pSelectionEnd.getPosition()
		end
		
		for i = 0 to lineCount
			var TextLayoutLine textLine = pTextLayout.getLine(i)
			
			if selFrom != -1
				var int firstChar = textLine.getFirstChar()
				var int charCount = textLine.getCharCount()
				
				// add selection background rectangle if required
				if selFrom <= firstChar + charCount and selTo >= firstChar
					if selFrom < firstChar
						soff = 0
						
					else
						soff = selXOffsets.getX()
					end
					
					if selTo > firstChar + charCount
						eoff = textLine.getWidth()
						
					else
						eoff = selXOffsets.getY()
					end
					
					// add canvas
					var CanvasPaint canvasSelect = CanvasPaint.new()
					canvasSelect.setShapeType(CanvasPaintShape.rectangle)
					canvasSelect.setFillColor(Color.lightGray)
					canvasSelect.setThickness(0)
					canvasSelect.setPosition(Point.new(x + soff, y + textLine.getY()))
					canvasSelect.setSize(Point.new(eoff - soff, textLine.getHeight()))
					canvasSelect.setOrder(canvas.getCanvasCount() cast float)
					canvas.addCanvas(canvasSelect)
				end
			end
			
			// add text line canvas
			textLine.addToCanvas(pTextLayout, canvas, x, y)
		end
		
		// draw cursor
		if getHasFocus()
			x = caret.getX()
			y = caret.getY() - scrollOffsetY
			
			if x >= 0 and x <= width
				var CanvasPaint canvasCaret = CanvasPaint.new()
				canvasCaret.setShapeType(CanvasPaintShape.lines)
				canvasCaret.setFillColor(Color.transparent)
				canvasCaret.setLineColor(Color.black)
				canvasCaret.setPosition(Point.new(x + getPadding().getLeft(), y + getPadding().getTop()))
				canvasCaret.setSize(Point.new(1, charHeight))
				canvasCaret.setOrder(canvas.getCanvasCount() cast float)
				
				canvasCaret.addPoint(Point.new(0, 0))
				canvasCaret.addPoint(Point.new(0, charHeight + 1))
				
				canvas.addCanvas(canvasCaret)
			end
		end
	end
	
	/** Updates the text layout for the label. */
	protected func void updateTextLayout()
		pTextLayout = TextLayout.new(getText(), getFont())
		pTextLayout.setMaximalWidth(DEMath.max(getWidth() - getPadding().getWidth(), 0))
		pTextLayout.setAlignment(TextLayout.Align.left)
		pTextLayout.setAtLeastOneLine(true)
		
		pTextLayout.layoutText()
		
		updateRangeModels()
	end
	
	
	
	/** Key typed event. */
	public func void onKeyType(KeyEvent event)
		var String curText, newText = ""
		
		select event.getKeyCode()
		case InputEventKey.backspace
			// delete character left of cursor
			if pSelectionStart != null
				deleteSelectedText()
				
			elif not pCursorPos.isAtStart()
				var UTF8Navigator nav = pCursorPos - 1
				
				curText = getText()
				
				if not nav.isAtStart()
					newText = newText + curText.substring(0, nav.getPosition())
				end
				if not pCursorPos.isAtEnd()
					newText = newText + curText.substring(pCursorPos.getPosition())
				end
				
				if getValidator() == null or getValidator().validates(newText)
					pCursorPos = nav // for delete doing this before setText() is fine
					setHasTyped(true)
					setText(newText)
				end
			end
			
		case InputEventKey.delete
			// delete character to the right of the cursor
			if pSelectionStart != null
				deleteSelectedText()
				
			elif not pCursorPos.isAtEnd()
				curText = getText()
				
				var UTF8Navigator nav = pCursorPos + 1
				
				if not pCursorPos.isAtStart()
					newText = newText + curText.substring(0, pCursorPos.getPosition())
				end
				if not nav.isAtEnd()
					newText = newText + curText.substring(nav.getPosition())
				end
				
				if getValidator() == null or getValidator().validates(newText)
					setHasTyped(true)
					setText(newText)
				end
			end
			
		case InputEventKey.enter
			insertText("\n")
			
		else
			var int character = event.getKeyChar()
			if character == 0
				break  // no printable character
			end
			
			if not getFont().hasGlyph(character) or getFont().getCharAdvance(character) <= 0.5
				break
			end
			
			insertText(UnicodeString.new(character).toUTF8())
		end
	end
	
	/** \brief Text model changed. */
	public func void onModelChanged()
		updateCanvasText()
	end
	
	/**
	 * Send if the text string has changed.
	 * Implementation of TextModle interface.
	 */
	public func void textChanged(TextModel textModel)
		var UTF8Navigator base = UTF8Navigator.new(textModel.getText())
		pCursorPos = base + pCursorPos.countCharacters()
		
		if pOldCursorPos != null
			pOldCursorPos = base + pOldCursorPos.countCharacters()
		end
		
		if pSelectionStart != null
			pSelectionStart = base + pSelectionStart.countCharacters()
			pSelectionEnd = base + pSelectionEnd.countCharacters()
			sanitizeSelection()
		end
		
		pSelXOffsets = null
		pCaret = null
		pRefXPosDirty = true
		pNeedsUpdate = true
		
		updateCanvasText()
	end
	
	/**
	 * \brief Read only state changed.
	 * \version 1.7
	 */
// 	public func void onReadOnlyChanged()
// 		updateCanvasText()
// 	end
	
	
	
	/**
	 * Send if the outer range properties like minimum value, maximum value
	 * or page size has changed.
	 */
	public func void rangeChanged(RangeModel rangeModel)
	end
	
	/** Send if the value has changed. */
	public func void valueChanged(RangeModel rangeModel)
		updateCanvasText()
	end
	
	
	/**
	 * \brief Insert text at cursor deleting selected text if present.
	 * \version 1.11
	 */
	public func void insertText(String text)
		if text == null
			throw ENullPointer.new("text")
		end
		
		deleteSelectedText()
		
		var String curText = getText()
		var String newText = ""
		
		if not pCursorPos.isAtStart()
			newText = newText + curText.substring(0, pCursorPos.getPosition())
		end
		
		newText = newText + text
		
		if not pCursorPos.isAtEnd()
			newText = newText + curText.substring(pCursorPos.getPosition())
		end
		
		if getValidator() != null and not getValidator().validates(newText)
			return
		end
		
		setHasTyped(true)
		setText(newText)
		
		// has to come after setText()
		pCursorPos.setPosition(pCursorPos.getPosition() + text.getLength())
		ensureCursorVisible()
		
		updateCanvasText()
	end
	
	/**
	 * \brief Copy to clipboard requested.
	 * \version 1.11
	 */
	public func void onClipboardCopy()
		var Clipboard clipboard = getClipboard()
		if clipboard != null and pSelectionStart != null
			clipboard.setClipWith(getText().substring(\
				pSelectionStart.getPosition(), pSelectionEnd.getPosition()))
		end
	end
	
	/**
	 * \brief Cut to clipboard requested.
	 * \version 1.11
	 */
	public func void onClipboardCut()
		var Clipboard clipboard = getClipboard()
		if clipboard != null and pSelectionStart != null
			onClipboardCopy()
			deleteSelectedText()
		end
	end
	
	/**
	 * \brief Paste from clipboard requested.
	 * \version 1.11
	 */
	public func void onClipboardPaste()
		var Clipboard clipboard = getClipboard()
		if clipboard == null or clipboard.isEmpty()
			return
		end
		
		var ClipboardClip clip = clipboard.getClip()
		if clip.getCount() == 0
			return
		end
		
		if clip.findCastable(block String data
			insertText(data)
			return true
		end) != null
			return
		end
		
		if clip.findCastable(block UnicodeString data
			insertText(data.toUTF8())
			return true
		end) != null
			return
		end
		
		insertText(clip.getAt(0).toString())
	end
	
	/**
	 * \brief Sanitize selection.
	 * \version 1.16
	 * 
	 * If selection start equals end set selection to null. If selection end is before
	 * selection start swap selection end with start.
	 */
	protected func void sanitizeSelection()
		if pSelectionStart != null
			if pSelectionStart.getPosition() == pSelectionEnd.getPosition()
				pSelectionEnd = pSelectionStart = null
				
			elif pSelectionStart.getPosition() > pSelectionEnd.getPosition()
				var UTF8Navigator s = pSelectionStart
				pSelectionStart = pSelectionEnd
				pSelectionEnd = s
			end
		end
	end
	
	/**
	 * \brief Extend selection to the left.
	 * \version 1.16
	 */
	protected func void extendSelectionLeft(UTF8Navigator position)
		if pSelectionStart == null
			pSelectionStart = position
			pSelectionEnd = UTF8Navigator.new(pCursorPos)
			
		elif pSelectionEnd.getPosition() == pCursorPos.getPosition()
			pSelectionEnd = position
			
		elif pSelectionStart.getPosition() == pCursorPos.getPosition()
			pSelectionStart = position
			
		else
			pSelectionStart = position
			pSelectionEnd = UTF8Navigator.new(pCursorPos)
		end
		sanitizeSelection()
	end
	
	/**
	 * \brief Extend selection to the right.
	 * \version 1.16
	 */
	protected func void extendSelectionRight(UTF8Navigator position)
		if pSelectionStart == null
			pSelectionStart = UTF8Navigator.new(pCursorPos)
			pSelectionEnd = position
			
		elif pSelectionEnd.getPosition() == pCursorPos.getPosition()
			pSelectionEnd = position
			
		elif pSelectionStart.getPosition() == pCursorPos.getPosition()
			pSelectionStart = position
			
		else
			pSelectionStart = UTF8Navigator.new(pCursorPos)
			pSelectionEnd = position
		end
		sanitizeSelection()
	end
end
