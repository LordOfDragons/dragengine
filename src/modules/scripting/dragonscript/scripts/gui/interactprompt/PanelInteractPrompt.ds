/* 
 * Drag[en]gine DragonScript Script Module
 *
 * Copyright (C) 2020, Roland Pl√ºss (roland@rptd.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */


namespace Dragengine.Gui

pin Dragengine.Commands
pin Dragengine.Gui.Borders
pin Dragengine.Gui.Events
pin Dragengine.Gui.Layouts
pin Dragengine.Utils


/**
 * \brief Display list of InteractPromptEntry.
 * 
 * Uses DefaultListModel to store the list of InteractPromptEntry to display. Changing the
 * content of the list model updates the PanelInteractPrompt. For each model entry
 * a view widget is created and added to the panel.
 * 
 * This widget is non-interactive and best suited for showing a small number of prompts.
 * 
 * The panel can be styled using selector these designer selectors:
 * - "InteractPrompt": The prompt panel.
 */
class PanelInteractPrompt extends Panel implements ListModelListener
	/** \brief Bindings changed listener. */
	protected class BindingsChanged extends DefaultBindingManagerListener
		var PanelInteractPrompt pPanel
		
		func new(PanelInteractPrompt panel)
			pPanel = panel
		end
		
		func void allAxisBindingsRemoved(BindingManager manager)
			pPanel.reloadAllWidgets()
		end
		
		func void allButtonBindingsRemoved(BindingManager manager)
			pPanel.reloadAllWidgets()
		end
		
		func void axisBindingAdded(BindingManager manager, Binding binding)
			pPanel.reloadAllWidgets()
		end
		
		func void axisBindingRemoved(BindingManager manager, Binding binding)
			pPanel.reloadAllWidgets()
		end
		
		func void buttonBindingAdded(BindingManager manager, Binding binding)
			pPanel.reloadAllWidgets()
		end
		
		func void buttonBindingRemoved(BindingManager manager, Binding binding)
			pPanel.reloadAllWidgets()
		end
		
		func void devicesReloaded(BindingManager manager)
			pPanel.reloadAllWidgets()
		end
	end
	
	
	
	var BindingManager pBindingManager
	var int pBindingIconHeight
	var DisplayInteractPromptEntry.Placement pPlacement
	var DefaultListModel pModel
	var String pEntryBaseSelectorName
	var BindingsChanged pBindingsChanged
	
	
	
	/** \brief Create interact prompt panel. */
	func new() this(null, 1)
	end
	
	func new(BindingManager bindingManager, int bindingIconHeight)\
	this(bindingManager, bindingIconHeight, DisplayInteractPromptEntry.Placement.top)
	end
	
	func new(BindingManager bindingManager, int bindingIconHeight,\
	DisplayInteractPromptEntry.Placement placement) \
	this(bindingManager, bindingIconHeight, placement, "InteractPrompt", "InteractPromptEntry")
	end
	
	func new(BindingManager bindingManager, int bindingIconHeight,\
	DisplayInteractPromptEntry.Placement placement, String designerSelector,\
	String entryBaseSelectorName)
		if designerSelector == null
			throw ENullPointer.new("designerSelector")
		end
		if entryBaseSelectorName == null
			throw ENullPointer.new("entryBaseSelectorName")
		end
		
		pBindingManager = bindingManager
		pBindingIconHeight = DEMath.max(bindingIconHeight, 1)
		pPlacement = placement
		pEntryBaseSelectorName = entryBaseSelectorName
		
		pModel = DefaultListModel.new()
		pModel.addListener(this)
		
		setLayout(BoxLayout.new(LayoutAxis.x))
		setDesignerSelector(designerSelector)
		
		pBindingsChanged = BindingsChanged.new(this)
		pBindingManager.addListener(pBindingsChanged)
	end
	
	/** \brief Dispose of widget. */
	func void dispose()
		if pBindingsChanged != null
			pBindingManager.removeListener(pBindingsChanged)
			pBindingsChanged = null
		end
		
		pModel = null
		pBindingManager = null
		
		super.dispose()
	end
	
	
	
	/** \brief Binding manager. */
	func BindingManager getBindingManager()
		return pBindingManager
	end
	
	/** \brief Binding icon height. */
	func int getBindingIconHeight()
		return pBindingIconHeight
	end
	
	/** \brief Placement to use for newly created widgets. */
	func DisplayInteractPromptEntry.Placement getPlacement()
		return pPlacement
	end
	
	/** \brief Base selector name used for created entries. */
	func String getEntryBaseSelectorName()
		return pEntryBaseSelectorName
	end
	
	/** \brief List model. */
	func DefaultListModel getModel()
		return pModel
	end
	
	/** \brief Set list model. */
	func void setModel(DefaultListModel model)
		if model == null
			throw ENullPointer.new("model")
		end
		
		if model == pModel
			return
		end
		
		pModel.removeListener(this)
		pModel = model
		pModel.addListener(this)
		
		updateWidgets()
	end
	
	
	
	/** \brief Set prompts from array of instances of InteractPromptEntry. */
	func void setPrompts(Array prompts)
		pModel.setContent(prompts)
	end
	
	
	
	/**
	 * \brief Update widgets representing the entries.
	 * 
	 * Call if entries changed. Tries to update existing widgets first creating new ones if
	 * required. All unused widgets beyond the required count of widgets are hidden to reduce
	 * widget creation to a minimum.
	 */
	func void updateWidgets()
		runWhileBlockingLayout(block
			var int i, count = pModel.getCount()
			var int widgetCount = getWidgetCount()
			var InteractPromptEntry entry
			var Widget widget
			
			for i = 0 to count
				entry = pModel.getAt(i) cast InteractPromptEntry
				
				if i < widgetCount
					widget = getWidget(i)
					widget.setVisible(true)
					
				else
					widget = createWidget(entry)
					addWidget(widget)
				end
				
				updateWidget(widget, entry)
			end
			
			for i = count to widgetCount
				widget = getWidget(i)
				widget.setVisible(false)
				updateWidget(widget, null)
			end
		end)
		doLayoutIfBlocked()
	end
	
	/**
	 * \brief Reload all widgets.
	 * \version 1.20
	 * 
	 * Call this if bindings changed in a way a simple updateWidget() can not recognize it.
	 * Clears first all widgets then calls updateWidget().
	 */
	func void reloadAllWidgets()
		runWhileBlockingLayout(block
			forEachWidget(block Widget each
				each.setVisible(false)
				updateWidget(each, null)
			end)
			updateWidgets()
		end)
		doLayoutIfBlocked()
	end
	
	/**
	 * \brief Create widget for entry.
	 * 
	 * Default implementation creates instance of DisplayInteractPromptEntry.
	 */
	protected func Widget createWidget(InteractPromptEntry entry)
		return DisplayInteractPromptEntry.new(pBindingManager, \
			pBindingIconHeight, pPlacement, pEntryBaseSelectorName)
	end
	
	/**
	 * \brief Update widget with entry.
	 * 
	 * Default implementation operates on instances of type DisplayInteractPromptEntry.
	 */
	protected func void updateWidget(Widget widget, InteractPromptEntry entry)
		(widget cast DisplayInteractPromptEntry).updateFromEntry(entry)
	end
	
	
	
	/** \brief Elements added. */
	func void elementsAdded(ListModel listModel, int fromIndex, int toIndex)
		updateWidgets()
	end
	
	/** \brief Elements removed. */
	func void elementsRemoved(ListModel listModel, int fromIndex, int toIndex)
		updateWidgets()
	end
	
	/** \brief Content of the model changed. */
	func void contentChanged(ListModel listModel, int fromIndex, int toIndex)
		updateWidgets()
	end
	
	/** \brief Selection in the model changed. */
	func void selectionChanged(ListModel listModel)
	end
end
