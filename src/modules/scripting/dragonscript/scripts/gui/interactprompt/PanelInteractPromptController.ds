/* 
 * Drag[en]gine DragonScript Script Module
 *
 * Copyright (C) 2020, Roland Pl√ºss (roland@rptd.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */


namespace Dragengine.Gui

pin Dragengine.Commands
pin Dragengine.Gui.Borders
pin Dragengine.Gui.Events
pin Dragengine.Gui.Layouts
pin Dragengine.Scenery
pin Dragengine.Utils


/**
 * \brief PanelInteractPrompt controller.
 * 
 * Panel holding an instance of PanelInteractPrompt implementing
 * ECBehaviorPlayerLookAtInteractPrompt.PromptController and
 * ECBehaviorPlayerInteractPrompt.PromptController to manipulate it.
 */
class PanelInteractPromptController extends Panel implements \
ECBehaviorPlayerLookAtInteractPrompt.PromptController, \
ECBehaviorPlayerInteractPrompt.PromptController
	/** \brief Factory creating instance of PanelInteractPromptController. */
	class ControllerFactory implements \
	ECBehaviorPlayerLookAtInteractPrompt.PromptControllerFactory, \
	ECBehaviorPlayerInteractPrompt.PromptControllerFactory
		var DisplayInteractPromptEntry.Placement pPlacement
		var String pDesignerSelector
		var String pEntryBaseSelectorName
		
		/** \brief Create factory. */
		func new() this(DisplayInteractPromptEntry.Placement.top)
		end
		
		/** \brief Create factory. */
		func new(DisplayInteractPromptEntry.Placement placement) \
		this(placement, "InteractPrompt", "InteractPromptEntry")
		end
		
		/** \brief Create factory. */
		func new(DisplayInteractPromptEntry.Placement placement, \
		String designerSelector, String entryBaseSelectorName)
			if placement == null
				throw ENullPointer.new()
			end
			if designerSelector == null
				throw ENullPointer.new("designerSelector")
			end
			if entryBaseSelectorName == null
				throw ENullPointer.new("entryBaseSelectorName")
			end
			
			pPlacement = placement
			pDesignerSelector = designerSelector
			pEntryBaseSelectorName = entryBaseSelectorName
		end
		
		
		/** \brief Create instance of PromptController. */
		func ECBehaviorPlayerLookAtInteractPrompt.PromptController \
		createPromptController(ECBehaviorPlayerLookAtInteractPrompt.Instance instance)
			return PanelInteractPromptController.new(\
				instance.getECBehavior().getBindingManager(), \
				instance.getBindingIconHeight(), pPlacement, \
				pDesignerSelector, pEntryBaseSelectorName)
		end
		
		/** \brief Create instance of PromptController. */
		func ECBehaviorPlayerInteractPrompt.PromptController \
		createPromptController(ECBehaviorPlayerInteractPrompt.Instance instance)
			return PanelInteractPromptController.new(\
				instance.getECBehavior().getBindingManager(), \
				instance.getBindingIconHeight(), pPlacement, \
				pDesignerSelector, pEntryBaseSelectorName)
		end
	end
	
	
	
	var PanelInteractPrompt pPanelInteractPrompt
	
	
	
	/** \brief Create interact prompt panel. */
	func new() this(BaseGameApp.getApp().getBindingManager(), 32)
	end
	
	func new(BindingManager bindingManager, int bindingIconHeight) \
	this(bindingManager, bindingIconHeight, DisplayInteractPromptEntry.Placement.top)
	end
	
	func new(BindingManager bindingManager, int bindingIconHeight, \
	DisplayInteractPromptEntry.Placement placement)
		pPanelInteractPrompt = PanelInteractPrompt.new(bindingManager, bindingIconHeight, placement)
		createContent(pPanelInteractPrompt)
	end
	
	func new(BindingManager bindingManager, int bindingIconHeight, \
	DisplayInteractPromptEntry.Placement placement, String designerSelector, \
	String entryBaseSelectorName)
		pPanelInteractPrompt = PanelInteractPrompt.new(bindingManager, \
			bindingIconHeight, placement, designerSelector, entryBaseSelectorName)
		createContent(pPanelInteractPrompt)
	end
	
	/** \brief Dispose of widget. */
	func void dispose()
		pPanelInteractPrompt = null
		super.dispose()
	end
	
	
	
	/** \brief Panel interact prompt. */
	func PanelInteractPrompt getPanelInteractPrompt()
		return pPanelInteractPrompt
	end
	
	
	
	/**
	 * \brief Set prompt visibility.
	 * 
	 * Sets visibility of the controller panel.
	 */
	func void setPromptVisible(bool visible)
		setVisible(visible)
	end
	
	/**
	 * \brief Set prompt transparency.
	 * 
	 * Sets transparency of PanelInteractPrompt.
	 */
	func void setPromptTransparency(float transparency)
		pPanelInteractPrompt.setTransparency(transparency)
	end
	
	/**
	 * \brief Set prompts with Array of ECBehaviorInteractPrompt.Instance.
	 * 
	 * Calls PanelInteractPrompt.setPrompts().
	 */
	func void setPrompts(Array prompts)
		pPanelInteractPrompt.setPrompts(prompts)
	end
	
	/**
	 * \brief Prompt widget to be added to UI container.
	 * 
	 * Returns 
	 */
	func Widget promptWidget()
		return this
	end
	
	/** \brief Dispose of controller. */
	func void disposeController()
		dispose()
	end
	
	
	
	/**
	 * \brief Create content.
	 * 
	 * Interact prompt widget has been already created but has not been added yet. Create the
	 * panel content then add panelInteractPrompt to the appropriate place.
	 * 
	 * Default implementation sets CentrizedBoxLayout layout and adds the panel. This shows
	 * the panel centered on screen.
	 * 
	 * \warning
	 * 
	 * This is called in the base class constructor. Keep in mind that the subclass constructor
	 * has not run yet. If you need this to be the case create empty implementation and do the
	 * content creation at the appropriate time. You can get the panel by calling
	 * getPanelInteractPrompt().
	 */
	protected func void createContent(PanelInteractPrompt panelInteractPrompt)
		runWhileBlockingLayout(block
			setLayout(CentrizedBoxLayout.new(LayoutAxis.x))
			addWidget(panelInteractPrompt)
		end)
		doLayoutIfBlocked()
	end
end
