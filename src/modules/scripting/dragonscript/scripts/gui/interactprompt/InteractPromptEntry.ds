/* 
 * Drag[en]gine DragonScript Script Module
 *
 * Copyright (C) 2020, Roland Pl√ºss (roland@rptd.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */


namespace Dragengine.Gui

pin Dragengine.Commands
pin Dragengine.Gui
pin Dragengine.Utils


/**
 * \brief Interact prompt entry.
 * 
 * Contains the prompt information to show for use in an InteractPrompt widget. The entry
 * contains a bunch of information which can be displayed in a prompt. View widgets
 * decide what information to show.
 */
class InteractPromptEntry
	var Image pImage
	var Video pVideo
	var UnicodeString pVerb
	var UnicodeString pDescription
	var String pStyle
	var Command pCommand
	var Object pSettings
	
	
	
	/** \brief Create interact prompt entry. */
	func new()
		pVerb = UnicodeString.new()
		pDescription = UnicodeString.new()
		pStyle = ""
	end
	
	/** \brief Create copy of interact prompt entry. */
	func new(InteractPromptEntry copy)
		pImage = copy.pImage
		pVideo = copy.pVideo
		pVerb = copy.pVerb
		pDescription = copy.pDescription
		pStyle = copy.pStyle
		pCommand = copy.pCommand
		pSettings = copy.pSettings
	end
	
	
	
	/** \brief Image or null. */
	func Image getImage()
		return pImage
	end
	
	/** \brief Set image or null. */
	func void setImage(Image image)
		pImage = image
	end
	
	/** \brief Video or null. */
	func Video getVideo()
		return pVideo
	end
	
	/** \brief Set video or null. */
	func void setVideo(Video video)
		pVideo = video
	end
	
	/** \brief Style or empty string if not used. */
	func String getStyle()
		return pStyle
	end
	
	/** \brief Set style or empty string if not used. */
	func void setStyle(String style)
		if style == null
			throw ENullPointer.new()
		end
		pStyle = style
	end
	
	/** \brief Verb. */
	func UnicodeString getVerb()
		return pVerb
	end
	
	/** \brief Set verb. */
	func void setVerb(UnicodeString verb)
		if verb == null
			throw ENullPointer.new()
		end
		pVerb = verb
	end
	
	/** \brief Description. */
	func UnicodeString getDescription()
		return pDescription
	end
	
	/** \brief Set description. */
	func void setDescription(UnicodeString description)
		if description == null
			throw ENullPointer.new()
		end
		pDescription = description
	end
	
	/** \brief Command or null if not used. */
	func Command getCommand()
		return pCommand
	end
	
	/** \brief Set command or null if not used. */
	func void setCommand(Command command)
		pCommand = command
	end
	
	/**
	 * \brief Optional settings or null if not used.
	 * \version 1.19
	 */
	func Object getSettings()
		return pSettings
	end
	
	/**
	 * \brief Set optional settings or null if not used.
	 * \version 1.19
	 */
	func void setSettings(Object settings)
		pSettings = settings
	end
	
	
	
	/** \brief String representation. */
	func String toString()
		return pVerb.toUTF8()
	end
	
	/** \brief Prompts are equal. */
	func bool equals(Object other)
		if not other castable InteractPromptEntry
			return false
		end
		
		var InteractPromptEntry ipe = other cast InteractPromptEntry
		return pImage == ipe.pImage\
			and pVideo == ipe.pVideo\
			and pCommand == ipe.pCommand\
			and pVerb.equals(ipe.pVerb)\
			and pDescription.equals(ipe.pDescription)\
			and pStyle.equals(ipe.pStyle)\
			and (pSettings != null if pSettings.equals(ipe.pSettings) else ipe.pSettings == null)
	end
end
