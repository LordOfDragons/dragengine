/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
 
 
namespace Dragengine.Gui.Borders

pin Dragengine.Gui
pin Dragengine.Scenery


/**
 * Default border implementation drawing nothing at all.
 */
class DefaultBorder implements Border
	var CanvasView pCanvas
	var Widget pWidget
	
	
	
	/** Creates a new border. */
	func new()
		pCanvas = CanvasView.new()
	end
	
	
	
	/** Widget the border is assigned to or null if there is none. */
	func Widget getWidget()
		return pWidget
	end
	
	/** Set widget the border is assigned to or null if there is none. */
	func void setWidget(Widget widget)
		if widget == pWidget
			return
		end
		
		pWidget = widget
		
		onWidgetChanged()
	end
	
	/** Border size. */
	func BorderSize getBorderSize()
		return BorderSize.new()
	end
	
	/** Canvas to render this border. */
	func Canvas getCanvas()
		return pCanvas
	end
	
	/** Canvas to render this border. */
	func CanvasView getCanvasView()
		return pCanvas
	end
	
	/** Resize canvas to fit widget if widget is set. */
	func void resizeCanvas(Point widgetSize)
		pCanvas.setSize(widgetSize + getBorderSize().getSize())
		updateCanvas()
	end
	
	/** Update canvas. Overwrite to create canvas content. */
	func void updateCanvas()
	end
	
	/**
	 * Layout widget parent container. Call if parameters of the border changed in a
	 * way the border size is affected.
	 */
	func void layoutContainer()
		var Widget widget = getWidget()
		if widget == null
			return
		end
		
		var Container parent = widget.getParent()
		if parent == null
			return
		end
		
		parent.doLayout()
	end
	
	
	
	/** Gui theme of the widget changed. */
	func void onGuiThemeChanged()
		updateCanvas()
	end
	
	/** Widget changed. */
	func void onWidgetChanged()
		updateCanvas()
	end
	
	/** Widget parameters changed. */
	func void onWidgetParametersChanged()
		updateCanvas()
	end
end
