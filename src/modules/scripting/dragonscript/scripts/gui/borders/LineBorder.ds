/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
 
 
namespace Dragengine.Gui.Borders

pin Dragengine.Gui
pin Dragengine.Scenery


/**
 * Draws a line around a widget with a given color and thickness.
 */
class LineBorder extends DefaultBorder
	/** Color of the line. */
	private var Color pColor
	
	/** Thickness in pixels. */
	private var int pThickness
	
	
	
	/** Creates a new black, 1 pixel strong line border. */
	public func new() this( Color.black, 1 )
	end
	
	/** Creates a new line border. */
	public func new( Color color ) this( color, 1 )
	end
	
	/** Creates a new line border. */
	public func new( Color color, int thickness )
		if color == null or thickness < 1
			throw EInvalidParam.new()
		end
		
		this.pColor = color
		this.pThickness = thickness
	end
	
	
	
	/** Retrieves the line color. */
	public func Color getColor()
		return this.pColor
	end
	
	/** Sets the line color. */
	public func void setColor( Color color )
		if color.equals( this.pColor )
			return
		end
		
		this.pColor = color
		this.updateCanvas()
	end
	
	/** Retrieves the thickness. */
	public func int getThickness()
		return this.pThickness
	end
	
	/** Sets the thickness. */
	public func void setThickness( int thickness )
		if thickness < 1
			throw EInvalidParam.new()
		end
		
		if thickness == this.pThickness
			return
		end
		
		this.pThickness = thickness
		this.layoutContainer()
		this.updateCanvas()
	end
	
	
	
	/** Retrieves the size of the border sides for the given widget. */
	public func BorderSize getBorderSize()
		return BorderSize.new( this.pThickness, this.pThickness, this.pThickness, this.pThickness )
	end
	
	/** Update canvas. */
	public func void updateCanvas()
		var CanvasView borderCanvas = this.getCanvasView()
		var Point size = borderCanvas.getSize()
		var CanvasPaint rectangle
		var int i
		
		borderCanvas.removeAllCanvas()
		
		for i = 0 to this.pThickness
			rectangle = CanvasPaint.new()
			rectangle.setShapeType( CanvasPaintShape.rectangle )
			rectangle.setLineColor( this.pColor )
			rectangle.setFillColor( Color.transparent )
			rectangle.setPosition( Point.new( i, i ) )
			rectangle.setSize( size - Point.new( i * 2, i * 2 ) )
			borderCanvas.addCanvas( rectangle )
		end
	end
end
