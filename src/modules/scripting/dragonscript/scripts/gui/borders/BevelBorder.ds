/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
 
 
namespace Dragengine.Gui.Borders

pin Dragengine.Scenery


/**
 * Draws a bevelled border around a widget with a given color and thickness.
 */
class BevelBorder extends TwoColorBorder
	/** Creates a new raised etched border. */
	public func new()
	end
	
	/** Creates a new raised etched border with the given colors. */
	public func new( Color colorHighlight, Color colorShadow ) super( colorHighlight, colorShadow )
	end
	
	/** Creates a new etched border. */
	public func new( bool raised ) super( raised )
	end
	
	/** Creates a new etched border with the given colors. */
	public func new( bool raised, Color colorHighlight, Color colorShadow ) super( raised, colorHighlight, colorShadow )
	end
	
	
	
	/** Border size. */
	public func BorderSize getBorderSize()
		return BorderSize.new( 1, 1, 1, 1 )
	end
	
	/** Update canvas. */
	public func void updateCanvas()
		var Widget widget = this.getWidget()
		if widget == null
			return
		end
		
		var CanvasView borderCanvas = this.getCanvasView()
		var Point size = borderCanvas.getSize()
		var int bottom = size.getY() - 1
		var int right = size.getX() - 1
		var Color color1, color2
		var CanvasPaint canvas
		
		if this.getRaised()
			color1 = this.getColorHighlight()
			color2 = this.getColorShadow()
			
		else
			color1 = this.getColorShadow()
			color2 = this.getColorHighlight()
		end
		
		borderCanvas.removeAllCanvas()
		
		// color 1 if existing
		if color1 != null
			canvas = CanvasPaint.new()
			canvas.setShapeType( CanvasPaintShape.lines )
			canvas.setLineColor( color1 )
			canvas.setFillColor( Color.transparent )
			canvas.setSize( size )
			canvas.setOrder( 0.0 )
			
			canvas.addPoint( Point.new( 0, 0 ) )
			canvas.addPoint( Point.new( right + 1, 0 ) )
			
			canvas.addPoint( Point.new( 0, 1 ) )
			canvas.addPoint( Point.new( 0, bottom + 1 ) )
			
			borderCanvas.addCanvas( canvas )
		end
		
		// color 2
		if color2 != null
			canvas = CanvasPaint.new()
			canvas.setShapeType( CanvasPaintShape.lines )
			canvas.setLineColor( color2 )
			canvas.setFillColor( Color.transparent )
			canvas.setSize( size )
			canvas.setOrder( 1.0 )
			
			canvas.addPoint( Point.new( right, 1 ) )
			canvas.addPoint( Point.new( right, bottom + 1 ) )
			
			canvas.addPoint( Point.new( 1, bottom ) )
			canvas.addPoint( Point.new( right, bottom ) )
			
			borderCanvas.addCanvas( canvas )
		end
	end
end
