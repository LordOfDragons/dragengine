/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
 
 
namespace Dragengine.Gui.Borders.Factories


/**
 * \brief Factory for CombinedBorder.
 */
public class CombinedBorderFactory implements BorderFactory
	/** \brief Inner border or \em null. */
	private var BorderFactory pInnerBorderFactory
	
	/** \brief Outer border or \em null. */
	private var BorderFactory pOuterBorderFactory
	
	
	
	/** \brief Create border factory. */
	public func new()
	end
	
	/** \brief Create copy of border factory. */
	public func new( CombinedBorderFactory factory )
		if this.pInnerBorderFactory != null
			this.pInnerBorderFactory = factory.pInnerBorderFactory.copyFactory()
		end
		if this.pOuterBorderFactory != null
			this.pOuterBorderFactory = factory.pOuterBorderFactory.copyFactory()
		end
	end
	
	
	
	/** \brief Inner border or \em null. */
	public func BorderFactory getInnerBorderFactory()
		return this.pInnerBorderFactory
	end
	
	/** \brief Set inner border or \em null. */
	public func void setInnerBorderFactory( BorderFactory factory )
		this.pInnerBorderFactory = factory
	end
	
	/** \brief Outer border or \em null. */
	public func BorderFactory getOuterBorderFactory()
		return this.pOuterBorderFactory
	end
	
	/** \brief Set outer border or \em null. */
	public func void setOuterBorderFactory( BorderFactory factory )
		this.pOuterBorderFactory = factory
	end
	
	
	
	/** \brief Create border. */
	public func Border createBorder()
		var Border innerBorder, outerBorder
		
		if this.pInnerBorderFactory != null
			innerBorder = this.pInnerBorderFactory.createBorder()
		end
		if this.pOuterBorderFactory != null
			outerBorder = this.pOuterBorderFactory.createBorder()
		end
		
		return CombinedBorder.new( innerBorder, outerBorder )
	end
	
	/** \brief Create factory copy. */
	public func BorderFactory copyFactory()
		return CombinedBorderFactory.new( this )
	end
	
	/**
	 * \brief Set parameter.
	 * 
	 * Supported parameters:
	 * | name | value | Setter |
	 * | inner | BorderFactory | setInnerBorderFactory |
	 * | outer | BorderFactory | setOuterBorderFactory |
	 */
	public func void setParameter( String name, Object value )
		if name.equals( "inner" )
			this.setInnerBorderFactory( value cast BorderFactory )
			
		elif name.equals( "outer" )
			this.setOuterBorderFactory( value cast BorderFactory )
			
		else
			throw EInvalidParam.new()
		end
	end
end
