/* 
 * Drag[en]gine DragonScript Script Module
 *
 * Copyright (C) 2020, Roland Pl√ºss (roland@rptd.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */
 
 
namespace Dragengine.Gui.Borders.Factories


/**
 * \brief Factory for TwoColorBorder.
 */
public class TwoColorBorderFactory implements BorderFactory
	private var bool pRaised
	private var Color pColorHighlight
	private var Color pColorShadow
	
	
	
	/** \brief Create two color border factory. */
	public func new()
		pRaised = true
	end
	
	/** \brief Create copy of border factory. */
	public func new(TwoColorBorderFactory factory)
		pRaised = factory.pRaised
		pColorHighlight = factory.pColorHighlight
		pColorShadow = factory.pColorShadow
	end
	
	
	
	/** \brief Border is raised or lowered. */
	public func bool getRaised()
		return pRaised
	end
	
	/** \brief Set if border is raised or lowered. */
	public func void setRaised(bool raised)
		pRaised = raised
	end
	
	/** \brief Highlight color or null to not draw. */
	public func Color getColorHighlight()
		return pColorHighlight
	end
	
	/** \brief Set highlight color or null to not draw. */
	public func void setColorHighlight(Color color)
		pColorHighlight = color
	end
	
	/** \brief Shadow color or null to not draw. */
	public func Color getColorShadow()
		return pColorShadow
	end
	
	/** \brief Set shadow color or null to not draw. */
	public func void setColorShadow(Color color)
		pColorShadow = color
	end
	
	
	
	/** \brief Create border. */
	public func Border createBorder()
		var TwoColorBorder border = TwoColorBorder.new()
		
		border.setRaised(pRaised)
		border.setColorHighlight(pColorHighlight)
		border.setColorShadow(pColorShadow)
		
		return border
	end
	
	/** \brief Create factory copy. */
	public func BorderFactory copyFactory()
		return TwoColorBorderFactory.new(this)
	end
	
	/** \brief Set parameter. */
	public func void setParameter(String name, Object value)
		if name.equals("raised")
			setRaised(value cast bool)
			
		elif name.equals("colorHighlight") \
		/* backward compatibility */ or name.equals("colorHilight")
			setColorHighlight(value cast Color)
			
		elif name.equals("colorShadow")
			setColorShadow(value cast Color)
			
		else
			throw EInvalidParam.new()
		end
	end
	
	
	
	
	/** \deprecated Use getColorHighlight(). */
	public func Color getColorHilight()
		return getColorHighlight()
	end
	
	/** \deprecated Use setColorHighlight(Color). */
	public func void setColorHilight(Color color)
		setColorHighlight(color)
	end
end
