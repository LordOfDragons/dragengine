/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
 
 
namespace Dragengine.Gui.Borders.Factories


/**
 * \brief Factory for TwoColorBorder.
 */
public class TwoColorBorderFactory implements BorderFactory
	private var bool pRaised
	private var Color pColorHighlight
	private var Color pColorShadow
	
	
	
	/** \brief Create two color border factory. */
	public func new()
		pRaised = true
	end
	
	/** \brief Create copy of border factory. */
	public func new(TwoColorBorderFactory factory)
		pRaised = factory.pRaised
		pColorHighlight = factory.pColorHighlight
		pColorShadow = factory.pColorShadow
	end
	
	
	
	/** \brief Border is raised or lowered. */
	public func bool getRaised()
		return pRaised
	end
	
	/** \brief Set if border is raised or lowered. */
	public func void setRaised(bool raised)
		pRaised = raised
	end
	
	/** \brief Highlight color or null to not draw. */
	public func Color getColorHighlight()
		return pColorHighlight
	end
	
	/** \brief Set highlight color or null to not draw. */
	public func void setColorHighlight(Color color)
		pColorHighlight = color
	end
	
	/** \brief Shadow color or null to not draw. */
	public func Color getColorShadow()
		return pColorShadow
	end
	
	/** \brief Set shadow color or null to not draw. */
	public func void setColorShadow(Color color)
		pColorShadow = color
	end
	
	
	
	/** \brief Create border. */
	public func Border createBorder()
		var TwoColorBorder border = TwoColorBorder.new()
		
		border.setRaised(pRaised)
		border.setColorHighlight(pColorHighlight)
		border.setColorShadow(pColorShadow)
		
		return border
	end
	
	/** \brief Create factory copy. */
	public func BorderFactory copyFactory()
		return TwoColorBorderFactory.new(this)
	end
	
	/** \brief Set parameter. */
	public func void setParameter(String name, Object value)
		if name.equals("raised")
			setRaised(value cast bool)
			
		elif name.equals("colorHighlight") \
		/* backward compatibility */ or name.equals("colorHilight")
			setColorHighlight(value cast Color)
			
		elif name.equals("colorShadow")
			setColorShadow(value cast Color)
			
		else
			throw EInvalidParam.new()
		end
	end
	
	
	
	
	/** \deprecated Use getColorHighlight(). */
	public func Color getColorHilight()
		return getColorHighlight()
	end
	
	/** \deprecated Use setColorHighlight(Color). */
	public func void setColorHilight(Color color)
		setColorHighlight(color)
	end
end
