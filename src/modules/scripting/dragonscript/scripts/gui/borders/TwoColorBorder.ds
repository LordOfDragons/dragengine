/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
 
 
namespace Dragengine.Gui.Borders


/**
 * Base class for borders drawn using a highlight and a shadow color which
 * can be raised or lowered.
 */
class TwoColorBorder extends DefaultBorder
	/** Raised or lowered edge. */
	private var bool pRaised
	
	/** Highlight color or null to not draw. */
	private var Color pColorHighlight
	
	/** Shadow color or null to not draw. */
	private var Color pColorShadow
	
	
	
	/** Creates a new raised etched border. */
	public func new()
		this.pRaised = true
	end
	
	/** Creates a new raised etched border with the given colors. */
	public func new( Color colorHighlight, Color colorShadow )
		this.pRaised = true
		this.pColorHighlight = colorHighlight
		this.pColorShadow = colorShadow
	end
	
	/** Creates a new etched border. */
	public func new( bool raised )
		this.pRaised = raised
	end
	
	/** Creates a new etched border with the given colors. */
	public func new( bool raised, Color colorHighlight, Color colorShadow )
		this.pRaised = raised
		this.pColorHighlight = colorHighlight
		this.pColorShadow = colorShadow
	end
	
	
	
	/** Determines if the border is raised or lowered. */
	public func bool getRaised()
		return this.pRaised
	end
	
	/** Sets if the border is raised or lowered. */
	public func void setRaised( bool raised )
		if raised == this.pRaised
			return
		end
		
		this.pRaised = raised
		this.updateCanvas()
	end
	
	/** Retrieves the highlight color. If null the widget gui theme highlight color is returned. */
	public func Color getColorHighlight()
		return this.pColorHighlight
	end
	
	/** Sets the highlight color or null to not draw. */
	public func void setColorHighlight( Color color )
		if color == this.pColorHighlight
			return
		end
		
		this.pColorHighlight = color
		this.updateCanvas()
	end
	
	/** Retrieves the shadow color. If null the widget gui theme shadow color is returned. */
	public func Color getColorShadow()
		return this.pColorShadow
	end
	
	/** Sets the shadow color or null to not draw. */
	public func void setColorShadow( Color color )
		if color == this.pColorShadow
			return
		end
		
		this.pColorShadow = color
		this.updateCanvas()
	end
	
	
	
	
	/** \deprecated Use getColorHighlight(). */
	public func Color getColorHilight()
		return this.getColorHighlight()
	end
	
	/** \deprecated Use setColorHighlight(Color). */
	public func void setColorHilight( Color color )
		this.setColorHighlight( color )
	end
end
