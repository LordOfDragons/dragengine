/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
 
 
namespace Dragengine.Gui.Borders

pin Dragengine.Gui
pin Dragengine.Scenery


/**
 * \brief Draw etched border around a widget with a given color and thickness.
 */
class TitledEtchedBorder extends TitledTwoColorBorder
	/** \brief Create titled etched border. */
	func new()
	end
	
	/** \brief Create titled etched border. */
	func new(String text) super(text)
	end
	
	
	
	/** \brief Border size. */
	func BorderSize getBorderSize()
		return BorderSize.new(2, getTextSize().getY(), 2, 2)
	end
	
	/** \brief Update canvas. */
	func void updateCanvas()
		var Widget widget = getWidget()
		if widget == null
			return
		end
		
		var Color textColor = getTextColor()
		var Font font = getFont()
		var String text = widget.translate(getText())
		var Point textSize = getTextSize()
		
		var CanvasView borderCanvas = getCanvasView()
		var Point size = borderCanvas.getSize()
		var int bottom = size.getY() - 1
		var int right = size.getX() - 1
		var Color color1, color2
		
		var int textX1 = 8
		var int textX2 = textX1 + textSize.getX() + 4
		var int borderTop = 0
		
		if font != null
			borderTop = (font.getSize() - 2) / 2
		end
		
		if getRaised()
			color1 = getColorHighlight()
			color2 = getColorShadow()
			
		else
			color1 = getColorShadow()
			color2 = getColorHighlight()
		end
		
		borderCanvas.removeAllCanvas()
		
		// color 1 if existing
		if color1 != null
			var CanvasPaint canvas = CanvasPaint.new()
			canvas.setShapeType(CanvasPaintShape.lines)
			canvas.setLineColor(color1)
			canvas.setFillColor(Color.transparent)
			canvas.setSize(size)
			canvas.setOrder(0.0)
			
			canvas.addPoint(Point.new(1, borderTop + 1))
			canvas.addPoint(Point.new(textX1, borderTop + 1))
			
			canvas.addPoint(Point.new(textX2, borderTop + 1))
			canvas.addPoint(Point.new(right - 1, borderTop + 1))
			
			canvas.addPoint(Point.new(1, borderTop + 2))
			canvas.addPoint(Point.new(1, bottom - 1))
			
			canvas.addPoint(Point.new(right, borderTop))
			canvas.addPoint(Point.new(right, bottom + 1))
			
			canvas.addPoint(Point.new(0, bottom))
			canvas.addPoint(Point.new(right, bottom))
			
			borderCanvas.addCanvas(canvas)
		end
		
		// color 2 if existing
		if color2 != null
			var CanvasPaint canvas = CanvasPaint.new()
			canvas.setShapeType(CanvasPaintShape.lines)
			canvas.setLineColor(color2)
			canvas.setFillColor(Color.transparent)
			canvas.setSize(size)
			canvas.setOrder(1.0)
			
			canvas.addPoint(Point.new(0, borderTop))
			canvas.addPoint(Point.new(textX1, borderTop))
			
			canvas.addPoint(Point.new(textX2, borderTop))
			canvas.addPoint(Point.new(right - 1, borderTop))
			
			canvas.addPoint(Point.new(0, borderTop))
			canvas.addPoint(Point.new(0, bottom - 1))
			
			canvas.addPoint(Point.new(0, bottom - 1))
			canvas.addPoint(Point.new(right, bottom - 1))
			
			canvas.addPoint(Point.new(right - 1, borderTop))
			canvas.addPoint(Point.new(right - 1, bottom))
			
			borderCanvas.addCanvas(canvas)
		end
		
		// text if existing
		if not text.empty() and font != null and textColor != null
			var CanvasText canvas = CanvasText.new()
			canvas.setColor(textColor)
			canvas.setFont(font)
			canvas.setText(text)
			canvas.setPosition(Point.new(textX1 + 2, 0))
			canvas.setSize(textSize)
			canvas.setOrder(2.0)
			borderCanvas.addCanvas(canvas)
		end
	end
end
