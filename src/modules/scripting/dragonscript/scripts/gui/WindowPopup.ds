/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */


namespace Dragengine.Gui

pin Dragengine.Gui.Borders
pin Dragengine.Gui.Events
pin Dragengine.Gui.Layouts
pin Dragengine.Gui.Decorations


/**
 * \brief Window for temporarily overlapping widgets.
 * 
 * Window is shown as top window using popup(). The window captures the
 * mouse while shown and keeps recapturing if a child widget captures and
 * release the mouse.
 * 
 * Supports designing using designer selector "WindowPopup".
 */
class WindowPopup extends Window
	private var bool pCloseOnPopDown
	private var Widget pHoverWidget
	
	
	
	/**
	 * \brief Create window.
	 * 
	 * Window is initially hidden.
	 */
	public func new()
		runWhileBlockingLayout(block
			pCloseOnPopDown = true
			setVisible(false)
			setEnabled(true)
			setCanFocus(false)
			setCanReorder(false)
			setCanActivate(false)
			setCanMove(false)
			setCanResize(false)
			setCanClose(false)
			setCanMaximize(false)
			setCanMinimize(false)
			setAlwaysOnTop(true)
			setLayout(FlowLayout.new(LayoutAxis.y))
			setDesignerSelector("WindowPopup")
		end)
	end
	
	/** \brief Dispose of widget. */
	public func void dispose()
		pHoverWidget = null
		super.dispose()
	end
	
	
	
	/** \brief Close on popdown. */
	public func bool getCloseOnPopDown()
		return pCloseOnPopDown
	end
	
	/** \brief Set close on popdown. */
	public func void setCloseOnPopDown(bool closeOnPopDown)
		pCloseOnPopDown = closeOnPopDown
	end
	
	
	
	/**
	 * \brief Pop up window.
	 * \details Shows the window at the top and grabs mouse and keyboard input.
	 */
	public func void popup(Point position)
		popupInside(position, RectArea.new(Point.new(), getDesktop().getContainerSize() - Point.new(1, 1)))
	end
	
	/**
	 * \brief Pop up window at desktop coordinates.
	 * \details Shows the window at the top and grabs mouse and keyboard input.
	 */
	public func void popup(int x, int y)
		popup(Point.new(x, y))
	end
	
	/**
	 * \brief Pop up window not clipping outside area.
	 * \details Shows the window at the top and grabs mouse and keyboard input.
	 */
	public func void popupInside(Point position, RectArea boundary)
		fitToContent()
		setPosition(boundary.grow(-getSize()).clamp(position))
		setVisible(true)
		moveToTop()
		captureMouse()
		grabFocus()
	end
	
	/**
	 * \brief Pop down window.
	 * \details Release mouse and hide window. If close on popdown is \em true
	 *          close() is called too.
	 */
	public func void popdown()
		setVisible(false)
		releaseMouse()
		
		if pCloseOnPopDown
			close()
		end
	end
	
	
	
	/** \brief Widget the mouse hovers above or \em null. */
	public func Widget getHoverWidget()
		if pHoverWidget != null
			if pHoverWidget.getParent() == null or not pHoverWidget.getVisible()
				pHoverWidget = null
			end
		end
		return pHoverWidget != null if pHoverWidget else this
	end
	
	/**
	 * \brief Set widget the mouse hovers above.
	 * 
	 * If widget is different than the old one enter and leave messages are send.
	 */
	protected func void setHoverWidget(Widget widget, MouseEvent event)
		var Widget hoverWidget = getHoverWidget()
		if widget == hoverWidget
			return
		end
		
		var Widget leaveWidget = hoverWidget
		
		pHoverWidget = widget
		
		if leaveWidget != null
			runWhileBlockingLayout(block
				leaveWidget.sendEvent(MouseEvent.new(leaveWidget, MouseEvent.idMouseLeave, \
					event.getButton(), event.getModifiers(), event.getSystem(), event.getDevice()))
			end)
		end
		
		var Desktop desktop = getDesktop()
		if desktop != null
			if widget == null
				desktop.setActiveMousePointer(getFirstMousePointer())
				
			else
				desktop.setActiveMousePointer(widget.getFirstMousePointer())
				widget.sendEvent(MouseEvent.new(widget, MouseEvent.idMouseEnter, \
					event.getButton(), event.getModifiers(), event.getSystem(), event.getDevice()))
			end
		end
	end
	
	/**
	 * \brief Update hover widget.
	 * 
	 * Call if the hover widget is removed from the desktop.
	 */
	public func void updateHoverWidget()
		var Desktop desktop = getDesktop()
		if desktop != null
			var Widget widget = getWidgetAt(desktop.getMouseLocation() - getScreenPosition())
			if widget != getHoverWidget()
				setHoverWidget(widget, MouseEvent.new(widget, MouseEvent.idMouseMoved, 0, 0, Point.new(), -1))
			end
		end
	end
	
	/** \brief Clear hover widget. */
	protected func void clearHoverWidget()
		var Widget widget = getHoverWidget()
		if widget != null
			setHoverWidget(null, MouseEvent.new(widget, MouseEvent.idMouseLeave, 0, 0, -1))
		end
	end
	
	
	
	/** \brief Send event to the widget. */
	public func void sendEvent(Event event)
		// event from child widget bubbling up
		if event.getSource() != this
			return
		end
		
		// check if we have to intercept the event
		var int ident = event.getIdentifier()
		
		select ident
		case KeyEvent.idKeyPressed
			if (event cast KeyEvent).getKeyCode() == InputEventKey.escape
				popdown()
				return
			end
			
		case MouseEvent.idMousePressed
			var MouseEvent mouseEvent = event cast MouseEvent
			
			if requiresPopdown(mouseEvent)
				var Desktop desktop = getDesktop()
				var Point position = getDesktopPosition() + (event cast MouseEvent).getPosition()
				var Widget target = desktop.widgetAcceptingInputAt(position)
				
				popdown()
				
				if target != null
					target.sendEvent(MouseEvent.new(target, ident, mouseEvent.getButton(),\
						mouseEvent.getModifiers(), position - target.getDesktopPosition(),\
						mouseEvent.getSystem(), mouseEvent.getDevice()))
				end
				return
			end
		end
		
		// otherwise send event to widget under cursor if this is not a mouse event
		if not MouseEvent.isMouseEvent(ident)
			sendEventToListeners(event, false)
			return
		end
		
		var MouseEvent mouseEvent = event cast MouseEvent
		
		if ident == MouseEvent.idMouseWheeled
			updateHoverWidget()
			var Widget widget = getHoverWidget()
			if widget != null and widget != this
				widget.sendEvent(MouseEvent.new(widget, ident, mouseEvent.getButton(),\
					mouseEvent.getModifiers(), mouseEvent.getPosition(),\
					mouseEvent.getSystem(), mouseEvent.getDevice()))
			end
			
		else
			var Widget widget = getWidgetAt(mouseEvent.getPosition())
			
			if widget == this
				sendEventToListeners(event, false)
				
			else
				setHoverWidget(widget, mouseEvent)
				
				if widget != null
					select ident
					case MouseEvent.idMousePressed, MouseEvent.idMouseReleased
						if not getDesktop().isWidgetDeepEnabled(widget)
							return
						end
					end
					
					widget.sendEvent(MouseEvent.new(widget, ident,\
						mouseEvent.getButton(), mouseEvent.getModifiers(),\
						mouseEvent.getPosition() - widget.getWindowPosition(),\
						mouseEvent.getSystem(), mouseEvent.getDevice()))
				end
			end
		end
	end
	
	
	
	/**
	 * \brief Grab focus if possible.
	 * 
	 * Implementation for popup windows is slightly different than for regular
	 * windows. Regular windows focus the first focusable widget if they are not
	 * focusable itself. Popup windows can not grab the focus nor do they focus
	 * the first focusable widget. This avoids popup windows stealing focus from
	 * the underlaying window.
	 */
	public func void grabFocus()
	end
	
	/**
	 * \brief Request to release mouse capture.
	 * 
	 * Returns true if the request has been accepted. If the request is
	 * granted follow up with grabing capturing the mouse ourself. If
	 * somebody else did capture the mouse instead of us he is responsible
	 * to capture the mouse himself using an MouseListener on the child
	 * widget releasing the mouse.
	 */
	public func bool requestReleaseMouse(Widget widget)
		if super.requestReleaseMouse(widget)
			captureMouse()
			return true
			
		else
			return false
		end
	end
	
	/** \brief Release mouse capture. */
	public func void releaseMouse()
		clearHoverWidget()
		super.releaseMouse()
	end
	
	/**
	 * \brief Requires popdown window.
	 * \version 1.17
	 * 
	 * Returns true if the mouse button press event requires the window to popdown.
	 * Default implementation returns true if the mouse position is outside the window.
	 * Subclass can overwrite this method to extend this behavior.
	 */
	public func bool requiresPopdown(MouseEvent event)
		return not isPointInside(event.getPosition())
	end
end
