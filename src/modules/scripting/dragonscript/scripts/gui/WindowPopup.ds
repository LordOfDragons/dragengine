/* 
 * Drag[en]gine DragonScript Script Module
 *
 * Copyright (C) 2020, Roland Pl√ºss (roland@rptd.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */


namespace Dragengine.Gui

pin Dragengine.Gui.Borders
pin Dragengine.Gui.Events
pin Dragengine.Gui.Layouts
pin Dragengine.Gui.Decorations


/**
 * \brief Window for temporarily overlapping widgets.
 * 
 * Window is shown as top window using popup(). The window captures the
 * mouse while shown and keeps recapturing if a child widget captures and
 * release the mouse.
 * 
 * Supports designing using designer selector "WindowPopup".
 */
class WindowPopup extends Window
	private var bool pCloseOnPopDown
	private var Widget pHoverWidget
	
	
	
	/**
	 * \brief Create window.
	 * 
	 * Window is initially hidden.
	 */
	public func new()
		runWhileBlockingLayout(block
			pCloseOnPopDown = true
			setVisible(false)
			setEnabled(true)
			setCanFocus(false)
			setCanReorder(false)
			setCanActivate(false)
			setCanMove(false)
			setCanResize(false)
			setCanClose(false)
			setCanMaximize(false)
			setCanMinimize(false)
			setAlwaysOnTop(true)
			setLayout(FlowLayout.new(LayoutAxis.y))
			setDesignerSelector("WindowPopup")
		end)
	end
	
	/** \brief Dispose of widget. */
	public func void dispose()
		pHoverWidget = null
		super.dispose()
	end
	
	
	
	/** \brief Close on popdown. */
	public func bool getCloseOnPopDown()
		return pCloseOnPopDown
	end
	
	/** \brief Set close on popdown. */
	public func void setCloseOnPopDown(bool closeOnPopDown)
		pCloseOnPopDown = closeOnPopDown
	end
	
	
	
	/**
	 * \brief Pop up window.
	 * \details Shows the window at the top and grabs mouse and keyboard input.
	 */
	public func void popup(Point position)
		popupInside(position, RectArea.new(Point.new(), getDesktop().getContainerSize() - Point.new(1, 1)))
	end
	
	/**
	 * \brief Pop up window at desktop coordinates.
	 * \details Shows the window at the top and grabs mouse and keyboard input.
	 */
	public func void popup(int x, int y)
		popup(Point.new(x, y))
	end
	
	/**
	 * \brief Pop up window not clipping outside area.
	 * \details Shows the window at the top and grabs mouse and keyboard input.
	 */
	public func void popupInside(Point position, RectArea boundary)
		fitToContent()
		setPosition(boundary.grow(-getSize()).clamp(position))
		setVisible(true)
		moveToTop()
		captureMouse()
		grabFocus()
	end
	
	/**
	 * \brief Pop down window.
	 * \details Release mouse and hide window. If close on popdown is \em true
	 *          close() is called too.
	 */
	public func void popdown()
		releaseMouse()
		setVisible(false)
		
		if pCloseOnPopDown
			close()
		end
	end
	
	
	
	/** \brief Widget the mouse hovers above or \em null. */
	public func Widget getHoverWidget()
		if pHoverWidget != null
			if pHoverWidget.getParent() == null or not pHoverWidget.getVisible()
				pHoverWidget = null
			end
		end
		return pHoverWidget != null if pHoverWidget else this
	end
	
	/**
	 * \brief Set widget the mouse hovers above.
	 * 
	 * If widget is different than the old one enter and leave messages are send.
	 */
	protected func void setHoverWidget(Widget widget, MouseEvent event)
		var Widget hoverWidget = getHoverWidget()
		if widget == hoverWidget
			return
		end
		
		var Widget leaveWidget = hoverWidget
		
		pHoverWidget = widget
		
		if leaveWidget != null
			runWhileBlockingLayout(block
				leaveWidget.sendEvent(MouseEvent.new(leaveWidget, MouseEvent.idMouseLeave, \
					event.getButton(), event.getModifiers(), event.getSystem(), event.getDevice()))
			end)
		end
		
		var Desktop desktop = getDesktop()
		if desktop != null
			if widget == null
				desktop.setActiveMousePointer(getFirstMousePointer())
				
			else
				desktop.setActiveMousePointer(widget.getFirstMousePointer())
				widget.sendEvent(MouseEvent.new(widget, MouseEvent.idMouseEnter, \
					event.getButton(), event.getModifiers(), event.getSystem(), event.getDevice()))
			end
		end
	end
	
	/**
	 * \brief Update hover widget.
	 * 
	 * Call if the hover widget is removed from the desktop.
	 */
	public func void updateHoverWidget()
		var Desktop desktop = getDesktop()
		if desktop != null
			var Widget widget = getWidgetAt(desktop.getMouseLocation() - getScreenPosition())
			if widget != getHoverWidget()
				setHoverWidget(widget, MouseEvent.new(widget, MouseEvent.idMouseMoved, 0, 0, Point.new(), -1))
			end
		end
	end
	
	/** \brief Clear hover widget. */
	protected func void clearHoverWidget()
		var Widget widget = getHoverWidget()
		if widget != null
			setHoverWidget(null, MouseEvent.new(widget, MouseEvent.idMouseLeave, 0, 0, -1))
		end
	end
	
	
	
	/** \brief Send event to the widget. */
	public func void sendEvent(Event event)
		// a child widget did not handle its event. ignore it
		if event.getSource() != this
			return
		end
		
		// check if we have to intercept the event
		var int ident = event.getIdentifier()
		
		select ident
		case KeyEvent.idKeyPressed
			if (event cast KeyEvent).getKeyCode() == InputEventKey.escape
				popdown()
				return
			end
			
		case MouseEvent.idMousePressed
			if not isPointInside((event cast MouseEvent).getPosition())
				popdown()
				return
			end
		end
		
		// otherwise send event to widget under cursor if this is a mouse event
		if not MouseEvent.isMouseEvent(ident)
			sendEventToListeners(event, false)
			return
		end
		
		var MouseEvent mouseEvent = event cast MouseEvent
		
		if ident == MouseEvent.idMouseWheeled
			updateHoverWidget()
			var Widget widget = getHoverWidget()
			if widget != null
				widget.sendEvent(MouseEvent.new(widget, ident, mouseEvent.getButton(),\
					mouseEvent.getModifiers(), mouseEvent.getPosition(),\
					mouseEvent.getSystem(), mouseEvent.getDevice()))
			end
			
		else
			var Widget widget = getWidgetAt(mouseEvent.getPosition())
			
			if widget == this
				sendEventToListeners(event, false)
				
			else
				setHoverWidget(widget, mouseEvent)
				
				if widget != null
					widget.sendEvent(MouseEvent.new(widget, ident,\
						mouseEvent.getButton(), mouseEvent.getModifiers(),\
						mouseEvent.getPosition() - widget.getWindowPosition(),\
						mouseEvent.getSystem(), mouseEvent.getDevice()))
				end
			end
		end
	end
	
	
	
	/**
	 * \brief Grab focus if possible.
	 * 
	 * Implementation for popup windows is slightly different than for regular
	 * windows. Regular windows focus the first focusable widget if they are not
	 * focusable itself. Popup windows can not grab the focus nor do they focus
	 * the first focusable widget. This avoids popup windows stealing focus from
	 * the underlaying window.
	 */
	public func void grabFocus()
	end
	
	/**
	 * \brief Request to release mouse capture.
	 * 
	 * Returns true if the request has been accepted. If the request is
	 * granted follow up with grabing capturing the mouse ourself. If
	 * somebody else did capture the mouse instead of us he is responsible
	 * to capture the mouse himself using an MouseListener on the child
	 * widget releasing the mouse.
	 */
	public func bool requestReleaseMouse(Widget widget)
		if super.requestReleaseMouse(widget)
			captureMouse()
			return true
			
		else
			return false
		end
	end
	
	/** \brief Release mouse capture. */
	public func void releaseMouse()
		clearHoverWidget()
		super.releaseMouse()
	end
end
