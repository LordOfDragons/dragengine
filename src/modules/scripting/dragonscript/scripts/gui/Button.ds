/* 
 * Drag[en]gine DragonScript Script Module
 *
 * Copyright (C) 2020, Roland Pl√ºss (roland@rptd.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */


namespace Dragengine.Gui

pin Dragengine.Gui.Events
pin Dragengine.Gui.Layouts
pin Dragengine.Scenery


/**
 * \brief Button widget.
 * 
 * Supports designing using designer selector 'Button'. If present the child label is
 * designed using designer selector 'Label.Button'. If present the child display image
 * is designed using designer selector 'Image.Button'. For best results the child label
 * and image designer has to be a subclass of DefaultButtonWidgetDesigner.
 */
class Button extends Container
	private var bool pPressed
	private var Array pActionListeners
	private var bool pHasGrab
	
	private var String pText
	private var Image pImage
	private var Image pHoverImage
	
	private var Label pWidgetText
	private var DisplayImage pWidgetImage
	
	
	
	/** \brief Create button. */
	public func new()
		pText = ""
		pActionListeners = Array.new()
		
		runWhileBlockingLayout(block
			setLayout(CentrizedBoxLayout.new(LayoutAxis.y))
			setDesignerSelector("Button")
			setCanFocus(true)
			setStateChangeNotifyChildren(true)
			
			createContentWidgets()
		end)
	end
	
	/** \brief Create text button. */
	public func new(String text) this()
		setText(text)
	end
	
	/** \brief Create text and image button. */
	public func new(String text, Image image) this()
		setText(text)
		setImage(image)
	end
	
	/** \brief Create text button. */
	public func new(String text, ActionListener action) this(text)
		addActionListener(action)
	end
	
	/** \brief Create text and image button. */
	public func new(String text, Image image, ActionListener action) this(text, image)
		addActionListener(action)
	end
	
	/**
	 * Disposes of the widget. This cleans all references and prepars the widget
	 * for beeing freed. If the widget is already disposed nothing happens.
	 */
	public func void dispose()
		// it is possible the dispose is triggered due to an action listener call.
		// if Array.removeAll() is called in this case an exception is thrown due to
		// modifying the array while iterating over it. dropping the array is enough
		pWidgetImage = null
		pWidgetText = null
		pActionListeners = null
		super.dispose()
	end
	
	
	
	/** \brief Text of the button. */
	public func String getText()
		return pText
	end
	
	/** \brief Set text of the button. */
	public func void setText(String text)
		if text.equals(pText)
			return
		end
		
		pText = text
		pWidgetText.setText(text)
		pWidgetText.setVisible(not text.empty())
	end
	
	/** Image of the button. */
	public func Image getImage()
		return pImage
	end
	
	/** Set image of the button. */
	public func void setImage(Image image)
		if image == pImage
			return
		end
		
		pImage = image
		
		updateWidgetImage()
	end
	
	/** \brief Hover image or \em null to use regular image. */
	public func Image getHoverImage()
		return pHoverImage
	end
	
	/** \brief Set hover image or \em null to use regular image. */
	public func void setHoverImage(Image image)
		if image == pHoverImage
			return
		end
		
		pHoverImage = image
		
		updateWidgetImage()
	end
	
	
	
	/** Button is pressed. */
	public func bool getPressed()
		return pPressed
	end
	
	/** Set if button is pressed. */
	public func void setPressed(bool pressed)
		if pressed == pPressed
			return
		end
		
		pPressed = pressed
		
		runWhileBlockingLayout(block
			notifyBorderParametersChanged()
			notifyChildrenParentStateChanged()
			onStateChanged(StateChangeEvent.new(this, StateChangeEvent.idStateChanged))
		end)
		doLayoutIfBlocked()
	end
	
	
	
	/** Add action listener. */
	public func void addActionListener(ActionListener listener)
		if listener == null
			throw EInvalidParam.new()
		end
		pActionListeners.add(listener)
	end
	
	/** Remove action listener. */
	public func void removeActionListener(ActionListener listener)
		pActionListeners.remove(listener)
	end
	
	
	
	/** Fire button press action. */
	public func void fireAction(int modifiers)
		if pActionListeners == null
			return // disposed
		end
		
		var ActionEvent event = ActionEvent.new(this, ActionEvent.idAction, modifiers)
		pActionListeners.forEach(block ActionListener each
			each.onAction(event)
		end)
	end
	
	
	
	/** \brief Set if widget is enabled. */
	public func void setEnabled(bool enabled)
		super.setEnabled(enabled)
		
		if not enabled
			setPressed(false)
		end
		
		updateWidgetImage()
	end
	
	
	/** Key on the keyboard has been pressed. */
	public func void onKeyPress(KeyEvent event)
		select event.getKeyCode()
		case InputEventKey.enter
			sendEventToListeners(event, false)
			fireAction(0)
			
		case InputEventKey.space
			setPressed(true)
			sendEventToListeners(event, false)
			
		else
			super.onKeyPress(event)
		end
	end
	
	/** Key on the keyboard has been released. */
	public func void onKeyRelease(KeyEvent event)
		select event.getKeyCode()
		case InputEventKey.space
			if getPressed()
				sendEventToListeners(event, false)
				setPressed(false)
				fireAction(0)
				
			else
				sendEventToListeners(event, false)
			end
			
		else
			super.onKeyRelease(event)
		end
	end
	
	/** Mouse button has been pressed. */
	public func void onButtonPress(MouseEvent event)
		if event.getButton() == InputEventMouseButton.left
			if getCanFocus()
				grabFocus()
			end
			
			captureMouse()
			pHasGrab = true
			setPressed(true)
			
			sendEventToListeners(event, false)
			
		else
			super.onButtonPress(event)
		end
	end
	
	/** Mouse button has been released. */
	public func void onButtonRelease(MouseEvent event)
		if event.getButton() == InputEventMouseButton.left
			pHasGrab = false
			releaseMouse()
			
			if pPressed
				sendEventToListeners(event, false)
				setPressed(false)
				fireAction(event.getModifiers())
				
			else
				sendEventToListeners(event, false)
			end
			
		else
			super.onButtonRelease(event)
		end
	end
	
	/** \brief Widget received focus. */
	public func void onFocusReceived(FocusEvent event)
		super.onFocusReceived(event)
		updateWidgetImage()
	end
	
	/** \brief Widget lost focus. */
	public func void onFocusLost(FocusEvent event)
		super.onFocusLost(event)
		updateWidgetImage()
	end
	
	/** Mouse has moved. */
	public func void onMouseMove(MouseEvent event)
		if pHasGrab
			setPressed(isPointInside(event.getPosition()))
			sendEventToListeners(event, false)
			
		else
			super.onMouseMove(event)
		end
	end
	
	/**
	 * Notification that the mouse entered the widget. The default behaviour
	 * is to send the message to all registered listeners or propagate it back
	 * to the parent if allowed.
	 */
	public func void onMouseEnter(MouseEvent event)
		runWhileBlockingLayout(block
			super.onMouseEnter(event)
			updateWidgetImage()
		end)
		doLayoutIfBlocked()
	end
	
	/**
	 * Notification that the mouse left the widget. The default behaviour
	 * is to send the message to all registered listeners or propagate it back
	 * to the parent if allowed.
	 */
	public func void onMouseLeave(MouseEvent event)
		runWhileBlockingLayout(block
			super.onMouseLeave(event)
			updateWidgetImage()
		end)
		doLayoutIfBlocked()
	end
	
	/** \brief Designer selector changed. */
	public func void onDesignerSelectorChanged()
		if pWidgetImage != null
			pWidgetImage.setDesignerSelector("Image." + getDesignerSelector())
		end
		if pWidgetText != null
			pWidgetText.setDesignerSelector("Label." + getDesignerSelector())
		end
	end
	
	
	
	/** \brief Label or \em null if not used. */
	protected func Label getWidgetText()
		return pWidgetText
	end
	
	/** \brief Set label or \em null if not used. */
	protected func void setWidgetText(Label widget)
		pWidgetText = widget
	end
	
	/** \brief Image or \em null if not used. */
	protected func DisplayImage getWidgetImage()
		return pWidgetImage
	end
	
	/** \brief Set image or \em null if not used. */
	protected func void setWidgetImage(DisplayImage widget)
		pWidgetImage = widget
	end
	
	
	
	/**
	 * \brief Create button content widgets.
	 * \details Call if the layout of the widgets changes. Removes the old widgets first.
	 */
	public func void createContentWidgets()
		var bool enabled = getEnabled()
		
		removeAllWidgets()
		pWidgetImage = null
		pWidgetText = null
		
		setLayout(CentrizedBoxLayout.new(LayoutAxis.y))
		
		pWidgetImage = DisplayImage.new(null, "Image." + getDesignerSelector())
		addWidget(pWidgetImage)
		pWidgetImage.setVisible(false)
		
		pWidgetText = Label.new(pText, "Label." + getDesignerSelector())
		addWidget(pWidgetText)
		pWidgetText.setVisible(not pText.empty())
	end
	
	/** \brief Update image to display depending on current button state. */
	public func void updateWidgetImage()
		if pWidgetImage == null
			return
		end
		
		var bool enabled = getEnabled()
		
		pWidgetImage.setEnabled(enabled)
		
		if enabled
			if isMouseInside()
				if pHoverImage == null
					pWidgetImage.setImage(pImage)
					
				else
					pWidgetImage.setImage(pHoverImage)
				end
				
			else
				pWidgetImage.setImage(pImage)
			end
			
		else
			pWidgetImage.setImage(pImage)
		end
		
		pWidgetImage.setVisible(pWidgetImage.getImage() != null)
	end
end
