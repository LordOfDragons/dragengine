/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */


namespace Dragengine.Gui

pin Dragengine.Gui.Events
pin Dragengine.Gui.Layouts
pin Dragengine.Scenery


/**
 * \brief Button widget.
 * 
 * Supports designing using designer selector 'Button'. If present the child label is
 * designed using designer selector 'Label.Button'. If present the child display image
 * is designed using designer selector 'Image.Button'. For best results the child label
 * and image designer has to be a subclass of DefaultButtonWidgetDesigner.
 */
class Button extends Container
	var bool pPressed
	var Array pActionListeners
	var bool pHasGrab
	
	var String pText
	var Image pImage
	var Image pHoverImage
	
	var Label pWidgetText
	var DisplayImage pWidgetImage
	
	
	
	/** \brief Create button. */
	func new()
		pText = ""
		pActionListeners = Array.new()
		
		runWhileBlockingLayout(block
			setLayout(CentrizedBoxLayout.new(LayoutAxis.y))
			setDesignerSelector("Button")
			setCanFocus(true)
			setStateChangeNotifyChildren(true)
			
			createContentWidgets()
		end)
	end
	
	/** \brief Create text button. */
	func new(String text) this()
		setText(text)
	end
	
	/** \brief Create text and image button. */
	func new(String text, Image image) this()
		setText(text)
		setImage(image)
	end
	
	/** \brief Create text button. */
	func new(String text, ActionListener action) this(text)
		addActionListener(action)
	end
	
	/** \brief Create text and image button. */
	func new(String text, Image image, ActionListener action) this(text, image)
		addActionListener(action)
	end
	
	/**
	 * \brief Create text and image button.
	 * \version 1.25
	 */
	func new(String text, Image image, String designerSelector, ActionListener action) this(text, image, action)
		setDesignerSelector(designerSelector)
	end
	
	/**
	 * Disposes of the widget. This cleans all references and prepars the widget
	 * for beeing freed. If the widget is already disposed nothing happens.
	 */
	func void dispose()
		// it is possible the dispose is triggered due to an action listener call.
		// if Array.removeAll() is called in this case an exception is thrown due to
		// modifying the array while iterating over it. dropping the array is enough
		pWidgetImage = null
		pWidgetText = null
		pActionListeners = null
		super.dispose()
	end
	
	
	
	/** \brief Text of the button. */
	func String getText()
		return pText
	end
	
	/** \brief Set text of the button. */
	func void setText(String text)
		if text.equals(pText)
			return
		end
		
		pText = text
		pWidgetText.setText(text)
		pWidgetText.setVisible(not text.empty())
	end
	
	/** Image of the button. */
	func Image getImage()
		return pImage
	end
	
	/** Set image of the button. */
	func void setImage(Image image)
		if image == pImage
			return
		end
		
		pImage = image
		
		updateWidgetImage()
	end
	
	/** \brief Hover image or \em null to use regular image. */
	func Image getHoverImage()
		return pHoverImage
	end
	
	/** \brief Set hover image or \em null to use regular image. */
	func void setHoverImage(Image image)
		if image == pHoverImage
			return
		end
		
		pHoverImage = image
		
		updateWidgetImage()
	end
	
	
	
	/** Button is pressed. */
	func bool getPressed()
		return pPressed
	end
	
	/** Set if button is pressed. */
	func void setPressed(bool pressed)
		if pressed == pPressed
			return
		end
		
		pPressed = pressed
		
		runWhileBlockingLayout(block
			notifyBorderParametersChanged()
			notifyChildrenParentStateChanged()
			onStateChanged(StateChangeEvent.new(this, StateChangeEvent.idStateChanged))
		end)
		doLayoutIfBlocked()
	end
	
	
	
	/** Add action listener. */
	func void addActionListener(ActionListener listener)
		if listener == null
			throw EInvalidParam.new()
		end
		pActionListeners.add(listener)
	end
	
	/** Remove action listener. */
	func void removeActionListener(ActionListener listener)
		pActionListeners.remove(listener)
	end
	
	
	
	/** Fire button press action. */
	func void fireAction(int modifiers)
		if pActionListeners == null
			return // disposed
		end
		
		var ActionEvent event = ActionEvent.new(this, ActionEvent.idAction, modifiers)
		pActionListeners.forEach(block ActionListener each
			each.onAction(event)
		end)
	end
	
	
	
	/** \brief Set if widget is enabled. */
	func void setEnabled(bool enabled)
		super.setEnabled(enabled)
		
		if not enabled
			setPressed(false)
		end
		
		updateWidgetImage()
	end
	
	
	/** Key on the keyboard has been pressed. */
	func void onKeyPress(KeyEvent event)
		select event.getKeyCode()
		case InputEventKey.enter
			sendEventToListeners(event, false)
			fireAction(0)
			
		case InputEventKey.space
			setPressed(true)
			sendEventToListeners(event, false)
			
		else
			super.onKeyPress(event)
		end
	end
	
	/** Key on the keyboard has been released. */
	func void onKeyRelease(KeyEvent event)
		select event.getKeyCode()
		case InputEventKey.space
			if getPressed()
				sendEventToListeners(event, false)
				setPressed(false)
				fireAction(0)
				
			else
				sendEventToListeners(event, false)
			end
			
		else
			super.onKeyRelease(event)
		end
	end
	
	/** Mouse button has been pressed. */
	func void onButtonPress(MouseEvent event)
		if event.getButton() == InputEventMouseButton.left
			if getCanFocus()
				grabFocus()
			end
			
			captureMouse()
			pHasGrab = true
			setPressed(true)
			
			sendEventToListeners(event, false)
			
		else
			super.onButtonPress(event)
		end
	end
	
	/** Mouse button has been released. */
	func void onButtonRelease(MouseEvent event)
		if event.getButton() == InputEventMouseButton.left
			pHasGrab = false
			releaseMouse()
			
			if pPressed
				sendEventToListeners(event, false)
				setPressed(false)
				fireAction(event.getModifiers())
				
			else
				sendEventToListeners(event, false)
			end
			
		else
			super.onButtonRelease(event)
		end
	end
	
	/** \brief Widget received focus. */
	func void onFocusReceived(FocusEvent event)
		super.onFocusReceived(event)
		updateWidgetImage()
	end
	
	/** \brief Widget lost focus. */
	func void onFocusLost(FocusEvent event)
		super.onFocusLost(event)
		updateWidgetImage()
	end
	
	/** Mouse has moved. */
	func void onMouseMove(MouseEvent event)
		if pHasGrab
			setPressed(isPointInside(event.getPosition()))
			sendEventToListeners(event, false)
			
		else
			super.onMouseMove(event)
		end
	end
	
	/**
	 * Notification that the mouse entered the widget. The default behaviour
	 * is to send the message to all registered listeners or propagate it back
	 * to the parent if allowed.
	 */
	func void onMouseEnter(MouseEvent event)
		runWhileBlockingLayout(block
			super.onMouseEnter(event)
			updateWidgetImage()
		end)
		doLayoutIfBlocked()
	end
	
	/**
	 * Notification that the mouse left the widget. The default behaviour
	 * is to send the message to all registered listeners or propagate it back
	 * to the parent if allowed.
	 */
	func void onMouseLeave(MouseEvent event)
		runWhileBlockingLayout(block
			super.onMouseLeave(event)
			updateWidgetImage()
		end)
		doLayoutIfBlocked()
	end
	
	/** \brief Designer selector changed. */
	func void onDesignerSelectorChanged()
		if pWidgetImage != null
			pWidgetImage.setDesignerSelector("Image." + getDesignerSelector())
		end
		if pWidgetText != null
			pWidgetText.setDesignerSelector("Label." + getDesignerSelector())
		end
	end
	
	/** \brief Gui theme changed. */
	func void onGuiThemeChanged()
		runWhileBlockingLayout(block
			super.onGuiThemeChanged()
			
			// if the image widget has a designer assigned changing the image then the setVisible
			// does not work in updateWidgetImage() if the button has not been added to a container
			// and thus no image designer can be resolved. while adding the button to a container
			// the gui theme is changed and the image designer can be resolved and applied. for
			// this reason the visibility has to evaluated here too
			if pWidgetImage != null
				pWidgetImage.setVisible(pWidgetImage.getImage() != null)
			end
		end)
		
		doLayoutIfBlocked()
	end
	
	
	
	/** \brief Label or \em null if not used. */
	protected func Label getWidgetText()
		return pWidgetText
	end
	
	/** \brief Set label or \em null if not used. */
	protected func void setWidgetText(Label widget)
		pWidgetText = widget
	end
	
	/** \brief Image or \em null if not used. */
	protected func DisplayImage getWidgetImage()
		return pWidgetImage
	end
	
	/** \brief Set image or \em null if not used. */
	protected func void setWidgetImage(DisplayImage widget)
		pWidgetImage = widget
	end
	
	
	
	/**
	 * \brief Create button content widgets.
	 * \details Call if the layout of the widgets changes. Removes the old widgets first.
	 */
	func void createContentWidgets()
		removeAllWidgets()
		pWidgetImage = null
		pWidgetText = null
		
		setLayout(CentrizedBoxLayout.new(LayoutAxis.y))
		
		pWidgetImage = DisplayImage.new(null, "Image." + getDesignerSelector())
		addWidget(pWidgetImage)
		pWidgetImage.setVisible(false)
		
		pWidgetText = Label.new(pText, "Label." + getDesignerSelector())
		addWidget(pWidgetText)
		pWidgetText.setVisible(not pText.empty())
	end
	
	/** \brief Update image to display depending on current button state. */
	func void updateWidgetImage()
		if pWidgetImage == null
			return
		end
		
		var bool enabled = getEnabled()
		pWidgetImage.runWhileBlockingLayoutParent(block
			pWidgetImage.setEnabled(enabled)
			
			if enabled
				if isMouseInside()
					if pHoverImage == null
						pWidgetImage.setImage(pImage)
						
					else
						pWidgetImage.setImage(pHoverImage)
					end
					
				else
					pWidgetImage.setImage(pImage)
				end
				
			else
				pWidgetImage.setImage(pImage)
			end
			
			pWidgetImage.design()
			pWidgetImage.setVisible(pWidgetImage.getImage() != null)
		end)
		pWidgetImage.layoutParentIfBlocked()
	end
end
