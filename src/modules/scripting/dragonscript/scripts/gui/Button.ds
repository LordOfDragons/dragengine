/* 
 * Drag[en]gine DragonScript Script Module
 *
 * Copyright (C) 2020, Roland Pl√ºss (roland@rptd.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */


namespace Dragengine.Gui

pin Dragengine.Gui.Events
pin Dragengine.Gui.Layouts
pin Dragengine.Scenery


/**
 * \brief Button widget.
 * 
 * Supports designing using designer selector 'Button'. If present the child label is
 * designed using designer selector 'Label.Button'. If present the child display image
 * is designed using designer selector 'Image.Button'. For best results the child label
 * and image designer has to be a subclass of DefaultButtonWidgetDesigner.
 */
class Button extends Container
	/** Button is pressed */
	private var bool pPressed
	
	/** action listeners */
	private var Array pActionListeners
	
	/** Determines if we acquired a grab */
	private var bool pHasGrab
	
	
	
	/** \brief Button text. */
	private var String pText
	
	/** \brief Image or \em to display no image. */
	private var Image pImage
	
	/** \brief Hover image or \em null to use regular image. */
	private var Image pHoverImage
	
	
	
	/** \brief Label or \em null if not used. */
	private var Label pWidgetText
	
	/** \brief Image or \em null if not used. */
	private var DisplayImage pWidgetImage
	
	
	
	/** \brief Create button. */
	public func new()
		this.pPressed = false
		this.pHasGrab = false
		
		this.pText = ""
		
		this.pActionListeners = Array.new()
		
		this.setLayout( CentrizedBoxLayout.new( LayoutAxis.y ) )
		this.setDesignerSelector( "Button" )
		this.setCanFocus( true )
		
		this.createContentWidgets()
	end
	
	/** \brief Create text button. */
	public func new( String text ) this()
		this.setText( text )
	end
	
	/** \brief Create text and image button. */
	public func new( String text, Image image ) this()
		this.setText( text )
		this.setImage( image )
	end
	
	/** \brief Create text button. */
	public func new( String text, ActionListener action ) this( text )
		this.addActionListener( action )
	end
	
	/** \brief Create text and image button. */
	public func new( String text, Image image, ActionListener action ) this( text, image )
		this.addActionListener( action )
	end
	
	/**
	 * Disposes of the widget. This cleans all references and prepars the widget
	 * for beeing freed. If the widget is already disposed nothing happens.
	 */
	public func void dispose()
		// it is possible the dispose is triggered due to an action listener call.
		// if Array.removeAll() is called in this case an exception is thrown due to
		// modifying the array while iterating over it. dropping the array is enough
		this.pWidgetImage = null
		this.pWidgetText = null
		this.pActionListeners = null
		super.dispose()
	end
	
	
	
	/** \brief Text of the button. */
	public func String getText()
		return this.pText
	end
	
	/** \brief Set text of the button. */
	public func void setText( String text )
		if text.equals( this.pText )
			return
		end
		
		this.pText = text
		this.pWidgetText.setText( text )
		this.pWidgetText.setVisible( not text.empty() )
	end
	
	/** Image of the button. */
	public func Image getImage()
		return this.pImage
	end
	
	/** Set image of the button. */
	public func void setImage( Image image )
		if image == this.pImage
			return
		end
		
		this.pImage = image
		
		this.updateWidgetImage()
	end
	
	/** \brief Hover image or \em null to use regular image. */
	public func Image getHoverImage()
		return this.pHoverImage
	end
	
	/** \brief Set hover image or \em null to use regular image. */
	public func void setHoverImage( Image image )
		if image == this.pHoverImage
			return
		end
		
		this.pHoverImage = image
		
		this.updateWidgetImage()
	end
	
	
	
	/** Button is pressed. */
	public func bool getPressed()
		return this.pPressed
	end
	
	/** Set if button is pressed. */
	public func void setPressed( bool pressed )
		if pressed == this.pPressed
			return
		end
		
		this.pPressed = pressed
		
		this.runWhileBlockingLayout( block
			this.notifyBorderParametersChanged()
			this.notifyChildrenParentStateChanged()
			this.onStateChanged( StateChangeEvent.new( this, StateChangeEvent.idStateChanged ) )
		end )
		this.doLayoutIfBlocked()
	end
	
	
	
	/** Add action listener. */
	public func void addActionListener( ActionListener listener )
		if listener == null
			throw EInvalidParam.new()
		end
		this.pActionListeners.add( listener )
	end
	
	/** Remove action listener. */
	public func void removeActionListener( ActionListener listener )
		this.pActionListeners.remove( listener )
	end
	
	
	
	/** Fire button press action. */
	public func void fireAction( int modifiers )
		if this.pActionListeners == null
			return // disposed
		end
		
		var ActionEvent event = ActionEvent.new( this, ActionEvent.idAction, modifiers )
		this.pActionListeners.forEach( block ActionListener each
			each.onAction( event )
		end )
	end
	
	
	
	/** \brief Set if widget is enabled. */
	public func void setEnabled( bool enabled )
		super.setEnabled( enabled )
		
		if not enabled
			this.setPressed( false )
		end
		
		this.updateWidgetImage()
	end
	
	/** Key on the keyboard has been pressed. */
	public func void onKeyPress( KeyEvent event )
		select event.getKeyCode()
		case InputEventKey.enter
			this.sendEventToListeners( event, false )
			this.fireAction( 0 )
			
		case InputEventKey.space
			this.setPressed( true )
			this.sendEventToListeners( event, false )
			
		else
			super.onKeyPress( event )
		end
	end
	
	/** Key on the keyboard has been released. */
	public func void onKeyRelease( KeyEvent event )
		select event.getKeyCode()
		case InputEventKey.space
			if this.getPressed()
				this.sendEventToListeners( event, false )
				this.setPressed( false )
				this.fireAction( 0 )
				
			else
				this.sendEventToListeners( event, false )
			end
			
		else
			super.onKeyRelease( event )
		end
	end
	
	/** Mouse button has been pressed. */
	public func void onButtonPress( MouseEvent event )
		if event.getButton() == InputEventMouseButton.left
			if this.getCanFocus()
				this.grabFocus()
			end
			
			this.captureMouse()
			this.pHasGrab = true
			this.setPressed( true )
			
			this.sendEventToListeners( event, false )
			
		else
			super.onButtonPress( event )
		end
	end
	
	/** Mouse button has been released. */
	public func void onButtonRelease( MouseEvent event )
		if event.getButton() == InputEventMouseButton.left
			this.pHasGrab = false
			this.releaseMouse()
			
			if this.pPressed
				this.sendEventToListeners( event, false )
				this.setPressed( false )
				this.fireAction( event.getModifiers() )
				
			else
				this.sendEventToListeners( event, false )
			end
			
		else
			super.onButtonRelease( event )
		end
	end
	
	/** \brief Widget received focus. */
	public func void onFocusReceived( FocusEvent event )
		super.onFocusReceived( event )
		this.updateWidgetImage()
	end
	
	/** \brief Widget lost focus. */
	public func void onFocusLost( FocusEvent event )
		super.onFocusLost( event )
		this.updateWidgetImage()
	end
	
	/** Mouse has moved. */
	public func void onMouseMove( MouseEvent event )
		if this.pHasGrab
			this.setPressed( this.isPointInside( event.getPosition() ) )
			this.sendEventToListeners( event, false )
			
		else
			super.onMouseMove( event )
		end
	end
	
	/**
	 * Notification that the mouse entered the widget. The default behaviour
	 * is to send the message to all registered listeners or propagate it back
	 * to the parent if allowed.
	 */
	public func void onMouseEnter( MouseEvent event )
		this.runWhileBlockingLayout( block
			this.notifyChildrenParentStateChanged()
			super.onMouseEnter( event )
			this.updateWidgetImage()
		end )
		this.doLayoutIfBlocked()
	end
	
	/**
	 * Notification that the mouse left the widget. The default behaviour
	 * is to send the message to all registered listeners or propagate it back
	 * to the parent if allowed.
	 */
	public func void onMouseLeave( MouseEvent event )
		this.runWhileBlockingLayout( block
			this.notifyChildrenParentStateChanged()
			super.onMouseLeave( event )
			this.updateWidgetImage()
		end )
		this.doLayoutIfBlocked()
	end
	
	
	
	/** \brief Designer selector changed. */
	public func void onDesignerSelectorChanged()
		if this.pWidgetImage != null
			this.pWidgetImage.setDesignerSelector( "Image." + this.getDesignerSelector() )
		end
		if this.pWidgetText != null
			this.pWidgetText.setDesignerSelector( "Label." + this.getDesignerSelector() )
		end
	end
	
	
	
	/** \brief Label or \em null if not used. */
	protected func Label getWidgetText()
		return this.pWidgetText
	end
	
	/** \brief Set label or \em null if not used. */
	protected func void setWidgetText( Label widget )
		this.pWidgetText = widget
	end
	
	/** \brief Image or \em null if not used. */
	protected func DisplayImage getWidgetImage()
		return this.pWidgetImage
	end
	
	/** \brief Set image or \em null if not used. */
	protected func void setWidgetImage( DisplayImage widget )
		this.pWidgetImage = widget
	end
	
	
	
	/**
	 * \brief Create button content widgets.
	 * \details Call if the layout of the widgets changes. Removes the old widgets first.
	 */
	public func void createContentWidgets()
		var bool enabled = this.getEnabled()
		
		this.removeAllWidgets()
		this.pWidgetImage = null
		this.pWidgetText = null
		
		this.setLayout( CentrizedBoxLayout.new( LayoutAxis.y ) )
		
		this.pWidgetImage = DisplayImage.new( null, "Image." + this.getDesignerSelector() )
		this.addWidget( this.pWidgetImage )
		this.pWidgetImage.setVisible( false )
		
		this.pWidgetText = Label.new( this.pText, "Label." + this.getDesignerSelector() )
		this.addWidget( this.pWidgetText )
		this.pWidgetText.setVisible( not this.pText.empty() )
	end
	
	/** \brief Update image to display depending on current button state. */
	public func void updateWidgetImage()
		if this.pWidgetImage == null
			return
		end
		
		var bool enabled = this.getEnabled()
		
		this.pWidgetImage.setEnabled( enabled )
		
		if enabled
			if this.isMouseInside()
				if this.pHoverImage == null
					this.pWidgetImage.setImage( this.pImage )
					
				else
					this.pWidgetImage.setImage( this.pHoverImage )
				end
				
			else
				this.pWidgetImage.setImage( this.pImage )
			end
			
		else
			this.pWidgetImage.setImage( this.pImage )
		end
		
		this.pWidgetImage.setVisible( this.pWidgetImage.getImage() != null )
	end
end
