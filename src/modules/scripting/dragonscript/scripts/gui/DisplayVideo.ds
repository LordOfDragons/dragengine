/* 
 * Drag[en]gine DragonScript Script Module
 *
 * Copyright (C) 2020, Roland PlÃ¼ss (roland@rptd.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */


namespace Dragengine.Gui

pin Dragengine.Gui.Events
pin Dragengine.Scenery
pin Dragengine.Utils


/**
 * Displays video in the widget.
 * 
 * Uses a video player to play back the video. The widget updates the playback. To share
 * video playback between multiple widgets use one DisplayVideo widget as the master and
 * DisplayCanvas widgets as slave using getCanvasContent() as their source.
 * 
 * By default no audio is played if the video has audio. To play audio assign a Speaker.
 */
class DisplayVideo extends Widget
	var CanvasVideoPlayer pCanvasVideo
	var RepeatMode pRepeatMode
	var VideoPlayer pVideoPlayer
	var Speaker pSpeaker
	var Video pVideo
	var bool pProtectVideoColorTransform
	
	
	
	/** \brief Create display video widget. */
	func new() this(null, RepeatMode.once, true, null)
	end
	
	func new(Video video) this(video, RepeatMode.once, true, null)
	end
	
	func new(Video video, RepeatMode repeatMode) this(video, RepeatMode.once, true, null)
	end
	
	func new(Video video, RepeatMode repeatMode, bool autoPlay) this(video, repeatMode, autoPlay, null)
	end
	
	func new(Video video, RepeatMode repeatMode, bool autoPlay, Speaker speaker)
		pRepeatMode = repeatMode
		pProtectVideoColorTransform = false
		pVideo = video
		pVideoPlayer = VideoPlayer.new()
		pVideoPlayer.setVideo(video)
		pVideoPlayer.setLooping(true)
		
		pCanvasVideo = CanvasVideoPlayer.new()
		pCanvasVideo.setVideoPlayer(pVideoPlayer)
		getCanvasContent().addCanvas(pCanvasVideo)
		updateCanvasVideo()
		
		setSpeaker(speaker)
		
		setDesignerSelector("Video")
		
		if autoPlay
			play()
		end
	end
	
	func new(Video video, String designerSelector) this(video)
		setDesignerSelector(designerSelector)
	end
	
	/** \brief Dispose of widget. */
	func void dispose()
		stop()
		setSpeaker(null)
		super.dispose()
	end
	
	
	
	/** Video to display or null if not set. */
	func Video getVideo()
		return pVideo
	end
	
	/** Set video to display. */
	func void setVideo(Video video)
		if pVideo == video
			return
		end
		
		pVideo = video
		pVideoPlayer.setVideo(video)
		
		layoutParent()
		updateCanvasVideo()
	end
	
	/** Repeat mode. */
	func RepeatMode getRepeatMode()
		return pRepeatMode
	end
	
	/** Set repeat mode. Has to be one of REPEAT_* . */
	func void setRepeatMode(RepeatMode repeatMode)
		if repeatMode == pRepeatMode
			return
		end
		
		pRepeatMode = repeatMode
		
		updateCanvasVideo()
	end
	
	/** \brief Video color transform. */
	func ColorMatrix getVideoColorTransform()
		return pCanvasVideo.getColorTransform()
	end
	
	/** \brief Set color transformation. */
	func void setVideoColorTransform(ColorMatrix transform)
		pCanvasVideo.setColorTransform(transform)
	end
	
	/** \brief Protect custom set video color transform. */
	func bool getProtectVideoColorTransform()
		return pProtectVideoColorTransform
	end
	
	/** \brief Set protect custom set video color transform. */
	func void setProtectVideoColorTransform(bool protect)
		pProtectVideoColorTransform = protect
	end
	
	/** \brief Speaker or null. */
	func Speaker getSpeaker()
		return pSpeaker
	end
	
	/** \brief Set speaker or null. */
	func void setSpeaker(Speaker speaker)
		if speaker == pSpeaker
			return
		end
		
		if speaker != null and speaker.getVideoPlayer() != null
			throw EInvalidParam.new()
		end
		
		if pSpeaker != null
			pSpeaker.setVideoPlayer(pVideoPlayer)
		end
		
		pSpeaker = speaker
		
		if speaker != null
			speaker.setVideoPlayer(pVideoPlayer)
		end
	end
	
	
	
	/** Minimal size of widget. */
	func Point getMinimumSize()
		if pVideo == null or isMinimumSizeSet()
			return super.getMinimumSize()
		end
		return getPadding().getSize() + pVideo.getSize()
	end
	
	
	
	/**
	 * \brief State changed.
	 * \details Sends event to listeners.
	 */
	func void onStateChanged(StateChangeEvent event)
		super.onStateChanged(event)
		updateCanvasVideo()
	end
	
	/** \brief Padding changed. */
	func void onPaddingChanged()
		updateCanvasVideo()
	end
	
	
	
	/** \brief Looping playback. */
	func bool getLooping()
		return pVideoPlayer.getLooping()
	end
	
	/** \brief Set if playback is looping. */
	func void setLooping(bool looping)
		pVideoPlayer.setLooping(looping)
	end
	
	/** \brief Start playback. */
	func void play()
		if pVideoPlayer.isPlaying()
			return
		end
		
		pVideoPlayer.play()
		startFrameUpdater()
	end
	
	/** \brief Pause playback. */
	func void pause()
		pVideoPlayer.pause()
		stopFrameUpdater()
	end
	
	/** \brief Stop playback. */
	func void stop()
		pVideoPlayer.stop()
		stopFrameUpdater()
	end
	
	/** \brief Video is playing back. */
	func bool isPlaying()
		return pVideoPlayer.isPlaying()
	end
	
	/** \brief Video is paused. */
	func bool isPaused()
		return pVideoPlayer.isPaused()
	end
	
	/** \brief Video is stopped. */
	func bool isStopped()
		return pVideoPlayer.isStopped()
	end
	
	/**
	 * \brief Do frame update.
	 * 
	 * Called every frame update if startFrameUpdater() is called.
	 * 
	 * \param elapsed Elapsed time since the last frame update. Equals Engine.getElapsedTime().
	 */
	func void onFrameUpdate(float elapsed)
		pVideoPlayer.update(elapsed)
		
		if pVideoPlayer.getLooping() and not pVideoPlayer.isPlaying()
			stop()
		end
	end
	
	
	
	/** \brief Get play time in seconds. */
	func float getPlayTime()
		return pVideoPlayer.getPlayTo()
	end
	
	/** \brief Playback position in seconds. */
	func float getPlayPosition()
		return pVideoPlayer.getPlayPosition()
	end
	
	/** \brief Set playback position in seconds clamped to play range. */
	func void setPlayPosition(float position)
		pVideoPlayer.setPlayPosition(position)
	end
	
	/**
	 * \brief Advance play position wrapping around.
	 * 
	 * Use this if you want to advance the play time in variable time steps independend of
	 * the game frame time. Negative values advance the time backward.
	 */
	func void advancePlayPosition(float seconds)
		pVideoPlayer.setPlayPosition(DEMath.normalize(\
			pVideoPlayer.getPlayPosition() + seconds, pVideoPlayer.getPlayTo()))
	end
	
	
	
	/** Update canvas video. */
	func void updateCanvasVideo()
		if pVideo == null
			return
		end
		
		var BorderSize padding = getPadding()
		var Point size = Point.new().largest(getSize() - padding.getSize())
		var Point position = Point.new(padding.getLeft(), padding.getTop())
		
		select pRepeatMode
		case RepeatMode.once
			pCanvasVideo.setRepeatX(1)
			pCanvasVideo.setRepeatY(1)
			pCanvasVideo.setPosition(position)
			pCanvasVideo.setSize(pVideo.getSize())
			
		case RepeatMode.stretch
			pCanvasVideo.setRepeatX(1)
			pCanvasVideo.setRepeatY(1)
			pCanvasVideo.setPosition(position)
			pCanvasVideo.setSize(size)
			
		case RepeatMode.tileX
			var int videoWidth = pVideo.getWidth()
			var int videoHeight = pVideo.getHeight()
			var int repeatX = DEMath.max(size.getX() - 1, 0) / videoWidth + 1
			pCanvasVideo.setRepeatX(repeatX)
			pCanvasVideo.setRepeatY(1)
			pCanvasVideo.setPosition(position)
			pCanvasVideo.setSize(Point.new(videoWidth * repeatX, videoHeight))
			
		case RepeatMode.tileY
			var int videoWidth = pVideo.getWidth()
			var int videoHeight = pVideo.getHeight()
			var int repeatY = DEMath.max(size.getY() - 1, 0) / videoHeight + 1
			pCanvasVideo.setRepeatX(1)
			pCanvasVideo.setRepeatY(repeatY)
			pCanvasVideo.setPosition(position)
			pCanvasVideo.setSize(Point.new(videoWidth, videoHeight * repeatY))
			
		case RepeatMode.tile
			var int videoWidth = pVideo.getWidth()
			var int videoHeight = pVideo.getHeight()
			var int repeatX = DEMath.max(size.getX() - 1, 0) / videoWidth + 1
			var int repeatY = DEMath.max(size.getY() - 1, 0) / videoHeight + 1
			pCanvasVideo.setRepeatX(repeatX)
			pCanvasVideo.setRepeatY(repeatY)
			pCanvasVideo.setPosition(position)
			pCanvasVideo.setSize(Point.new(videoWidth * repeatX, videoHeight * repeatY))
			
		case RepeatMode.center
			pCanvasVideo.setRepeatX(1)
			pCanvasVideo.setRepeatY(1)
			pCanvasVideo.setPosition(position + (size - pVideo.getSize()) / 2)
			pCanvasVideo.setSize(pVideo.getSize())
			
		case RepeatMode.stretchRatio
			var Point videoSize = pVideo.getSize()
			var Point newSize = size
			if videoSize > Point.new()
				var int stretched = videoSize.getY() * size.getX() / videoSize.getX()
				if stretched <= size.getY()
					newSize = Point.new(size.getX(), stretched)
					
				else
					stretched = videoSize.getX() * size.getY() / videoSize.getY()
					newSize = Point.new(stretched, size.getY())
				end
			end
			
			pCanvasVideo.setRepeatX(1)
			pCanvasVideo.setRepeatY(1)
			pCanvasVideo.setPosition(position + (size - newSize) / 2)
			pCanvasVideo.setSize(newSize)
		end
	end
	
	
	
	/** \brief Size changed. */
	func void onResize(WidgetEvent event)
		super.onResize(event)
		updateCanvasVideo()
	end
end
