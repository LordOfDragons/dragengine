/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */


namespace Dragengine.Gui

pin Dragengine.Gui.Borders
pin Dragengine.Gui.Events
pin Dragengine.Gui.Layouts
pin Dragengine.Gui.MousePointers.Factories
pin Dragengine.Scenery


/**
 * \brief Groups child widgets arranged by a layout instance.
 */
class Container extends Widget
	var Layout pLayout
	var Array pChildren
	var bool pBlockLayout
	var bool pHasBlockedDoLayout
	var Point pCachedMinSize
	var Point pCachedMinSizeForWidthSize
	var int pCachedMinSizeForWidthWidth
	var Point pCachedMinSizeForHeightSize
	var int pCachedMinSizeForHeightHeight
	var bool pStateChangeNotifyChildren
	
	
	
	/** Creates a new container. */
	func new() this(0, 0, 0, 0)
	end
	
	/** Creates a new container located at (x,y) with the given size. */
	func new(int x, int y, int width, int height) this(Point.new(x, y), Point.new(width, height))
	end
	
	/** Creates a new container located at (x,y) with the given size. */
	func new(Point position, Point size) super(position, size)
		pChildren = Array.new()
		pLayout = BoxLayout.new(LayoutAxis.y, 0)
	end
	
	/** \brief Create container with layout. */
	func new(Layout layout)
		if layout == null
			throw EInvalidParam.new()
		end
		pChildren = Array.new()
		pLayout = layout
	end
	
	/**
	 * \brief Create container with layout calling block to add content.
	 * 
	 * Block receives container as argument. Block call is wrapped inside runWhileBlockingLayout()
	 * for efficiency. doLayout() will be called after leaving the block.
	 */
	func new(Layout layout, Block blockAddContent) this(layout)
		try
			setLayout(layout)
			runWhileBlockingLayout(block
				blockAddContent.run(this)
			end)
			doLayoutIfBlocked()
			
		catch Exception e
			dispose()
			throw
		end
	end
	
	
	
	/**
	 * Disposes of the widget. This cleans all references and prepars the widget
	 * for beeing freed. If the widget is already disposed nothing happens.
	 */
	func void dispose()
		pBlockLayout = true
		
		var int index
		var Widget widget
		
		// this part here is tricky. we want to clean things up fast but without tripping
		// over widgets doing funny things. for this reason parent is cleared first then
		// the widget removed. pay attention the widget might vanish between clearing the
		// parent and removing the widget. disposing comes last when nothing can break anymore
		while pChildren.getCount() > 0
			index = pChildren.getCount() - 1
			widget = pChildren.getAt(index) cast Widget
			
			widget.setParent(null)
			
			if index < pChildren.getCount()
				pChildren.removeFrom(index)
			end
			
			widget.dispose()
		end
		
		pLayout = null
		
		if getCanvasContent() != null
			getCanvasContent().removeAllCanvas()
		end
		
		super.dispose()
	end
	
	
	
	/** Retrieve the layout of the container. */
	func Layout getLayout()
		return pLayout
	end
	
	/**
	 * Retrieve width of area for child widgets excluding the padding.
	 * This calculates the the width remaining after subtracting the padding.
	 */
	func int getContainerWidth()
		return DEMath.max(getWidth() - getPadding().getWidth(), 0)
	end
	
	/**
	 * Retrieve height of area for child widgets excluding the padding.
	 * This calculates the the height remaining after subtracting the padding.
	 */
	func int getContainerHeight()
		return DEMath.max(getHeight() - getPadding().getHeight(), 0)
	end
	
	/**
	 * Size of area for child widgets excluding the padding.
	 * This calculates the size remaining after subtracting the padding.
	 */
	func Point getContainerSize()
		return Point.new(getContainerWidth(), getContainerHeight())
	end
	
	/**
	 * \brief Set mouse pointer to use.
	 * 
	 * If widget has no mouse pointer the parent mouse pointer is used.
	 */
	func void setMousePointer(MousePointerFactory mousePointer)
		if mousePointer == getMousePointer()
			return
		end
		
		super.setMousePointer(mousePointer)
		
		var Desktop desktop = getDesktop()
		if desktop != null
			var Widget hoverWidget = getHoverWidget()
			if hoverWidget != null and hoverWidget.hasParent(this)
				desktop.setActiveMousePointer(hoverWidget.getFirstMousePointer())
			end
		end
	end
	
	
	
	/** Set layout. */
	func void setLayout(Layout layout)
		if layout == null
			throw EInvalidParam.new()
		end
		
		if layout == pLayout
			return
		end
		
		pChildren.forEach(block Widget each
			pLayout.removeWidget(each)
		end)
		
		pLayout = layout
		
		pChildren.forEach(block Widget each
			pLayout.addWidget(each, null)
		end)
		
		doLayout()
	end
	
	
	
	/**
	 * \brief Block layout calls.
	 * 
	 * Used to prevent deadloops and performance problems with layoutParent/doLayout calls.
	 * Be careful to disable blocking even in case of exceptions. Also make sure to restore
	 * the block layout call in place before changing it by yourself to not break chains.
	 */
	func bool getBlockLayout()
		return pBlockLayout
	end
	
	/**
	 * \brief Set block layout calls.
	 * 
	 * Used to prevent deadloops and performance problems with layoutParent/doLayout calls.
	 * Be careful to disable blocking even in case of exceptions. Also make sure to restore
	 * the block layout call in place before changing it by yourself to not break chains.
	 */
	func void setBlockLayout(bool blockLayout)
		pBlockLayout = blockLayout
	end
	
	/**
	 * \brief Run block while layouting is blocked.
	 * 
	 * This method is useful when you have to add or remove multiple widgets avoiding layout
	 * calls to be done for each modification except once to avoid performance loss. The
	 * method ensures the blocking state is restored to the value present before even in
	 * case of exceptions. You still have to call doLayout() to trigger an update after
	 * returning from the method call. This method call can be nested safely.
	 */
	func void runWhileBlockingLayout(Block ablock)
		if pBlockLayout
			ablock.run()
			return
		end
		
		pBlockLayout = true
		
		try
			ablock.run()
			pBlockLayout = false
			
		catch Exception e
			pBlockLayout = false
			throw
		end
	end
	
	/** \brief doLayout calls happened during runWhileBlockingLayout. */
	func bool getHasBlockedDoLayout()
		return pHasBlockedDoLayout
	end
	
	/** \brief Set if doLayout calls happened during runWhileBlockingLayout. */
	func void setHasBlockedDoLayout(bool hasBlockedDoLayout)
		pHasBlockedDoLayout = hasBlockedDoLayout
	end
	
	/** Retrieve number of child widgets. */
	func int getWidgetCount()
		return pChildren.getCount()
	end
	
	/** Retrieve widget at the given index position. */
	func Widget getWidget(int index)
		return pChildren.getAt(index) cast Widget
	end
	
	/** Retrieves the index of the widget or -1 if not found. */
	func int indexOfWidget(Widget widget)
		return pChildren.indexOf(widget)
	end
	
	/** Determines if the widget is part of the container. */
	func bool hasWidget(Widget widget)
		return pChildren.has(widget)
	end
	
	func Widget getWidgetAt(Point position)
		if not isPointInside(position)
			return null
		end
		
		var int i, count = pChildren.getCount()
		var Widget widget
		
		for i = count - 1 downto 0
			widget = pChildren.getAt(i) cast Widget
			if not widget.getVisible()
				continue
			end
			
			widget = widget.getWidgetAt(position - widget.getPosition())
			if widget != null
				return widget
			end
		end
		
		return this
	end
	
	func Widget getWidgetClosestTo(Point position)
		var int i, count = pChildren.getCount()
		var Widget widget, bestWidget
		var float dist, bestDist = 10000
		
		for i = 0 to count
			widget = pChildren.getAt(i) cast Widget
			if not widget.getVisible()
				continue
			end
			
			widget = widget.getWidgetClosestTo(position - widget.getPosition())
			if widget == null
				continue
			end
			
			dist = Vector2.new(widget.getRelativePosition(this) + widget.getSize() / 2 - position).getLength()
			if dist < bestDist
				bestWidget = widget
				bestDist = dist
			end
		end
		
		return bestWidget
	end
	
	/** Adds a widget to this container using default settings. */
	func void addWidget(Widget widget)
		addWidget(widget, null)
	end
	
	/** Adds a widget to this container using the specified settings. */
	func void addWidget(Widget widget, Object settings)
		if widget == this or widget.hasParent(this)
			throw EInvalidParam.new()
		end
		
		pLayout.addWidget(widget, settings)
		pChildren.add(widget)
		
		widget.setParent(this)
		
		getCanvasContent().addCanvas(widget.getCanvasWidget())
		widget.getCanvasWidget().setOrder((pChildren.getCount() - 1) cast float)
		
		doLayout()
	end
	
	/**
	 * \brief Remove widget without disposing.
	 */
	func void removeWidget(Widget widget)
		if not pChildren.has(widget)
			throw EInvalidParam.new()
		end
		
		pLayout.removeWidget(widget)
		pChildren.remove(widget)
		
		getCanvasContent().removeCanvas(widget.getCanvasWidget())
		reorderChildCanvas()
		
		widget.setParent(null)
		
		doLayout()
	end
	
	/**
	 * \brief Remove and dispose all widgets.
	 */
	func void removeAllWidgets()
		// forEach with a block is not used here since it is possible a child widget removes
		// another child widget during setParent() or dispose()
		runWhileBlockingLayout(block
			var Widget widget
			var int index
			
			while pChildren.getCount() > 0
				index = pChildren.getCount() - 1
				widget = pChildren.getAt(index) cast Widget
				
				widget.setParent(null)
				
				pLayout.removeWidget(widget)
				pChildren.removeFrom(index)
				
				widget.dispose()
			end
		end)
		
		if getCanvasContent() != null
			getCanvasContent().removeAllCanvas()
		end
		
		doLayout()
	end
	
	/**
	 * \brief Visit widgets using block.
	 * 
	 * Block is called with single parameter of type Widget.
	 */
	func void forEachWidget(Block ablock)
		pChildren.forEach(ablock)
	end
	
	/**
	 * \brief Process value visiting widgets using block.
	 * 
	 * Works like Array.inject(). Block receives as first argument the Object injected value
	 * and as second argument Widget widget.
	 */
	func Object injectWidget(Object injectValue, Block ablock)
		return pChildren.inject(injectValue, ablock)
	end
	
	/**
	 * \brief Find widget using block or null if not found.
	 * 
	 * Block is called with single parameter of type Widget and has to return true to stop
	 * visiting and return widget or false to continue visiting.
	 */
	func Widget findWidget(Block ablock)
		return pChildren.find(ablock) cast Widget
	end
	
	/** Find first widget that can grab the focus or null if none exists. */
	func Widget findFocusableWidget()
		/* incorrect block context
		if getEnabled() and getVisible()
			var Widget widget = super.findFocusableWidget()
			
			if widget == null
				pChildren.forEachWhile(block Widget each
					widget = each.findFocusableWidget()
					return widget == null
				end)
			end
			
			return widget
		end
		
		return null
		*/
		
		if not getEnabled() or not getVisible()
			return null
		end
		
		var Widget widget = super.findFocusableWidget()
		if widget != null
			return widget
		end
		
		var int i, count = pChildren.getCount()
		for i = 0 to count
			widget = (pChildren.getAt(i) cast Widget).findFocusableWidget()
			if widget != null
				return widget
			end
		end
		
		return null
	end
	
	/** Find last widget that can grab the focus or null if none exists. */
	func Widget findLastFocusableWidget()
		if not getEnabled() or not getVisible()
			return null
		end
		
		var Widget widget = super.findLastFocusableWidget()
		if widget != null
			return widget
		end
		
		var int i, count = pChildren.getCount()
		for i = count - 1 downto 0
			widget = (pChildren.getAt(i) cast Widget).findLastFocusableWidget()
			if widget != null
				return widget
			end
		end
		
		return null
	end
	
	/**
	 * \brief Find next widget in the focus cycle that can grab the focus.
	 */
	func Widget nextFocusWidgetAfter(Widget widget)
		if not getEnabled() or not getVisible()
			return null
		end
		
		var int index = pChildren.indexOf(widget)
		if index == -1
			throw EInvalidParam.new()
		end
		
		// find next focusable widget in the remaining list of widget otherwise continue with parent if present
		var int i, count = pChildren.getCount()
		var Widget testWidget
		
		for i = index + 1 to count
			testWidget = (pChildren.getAt(i) cast Widget).findFocusableWidget()
			if testWidget != null
				return testWidget
			end
		end
		
		return nextFocusWidget()
	end
	
	/**
	 * \brief Find previous widget in the focus cycle that can grab the focus.
	 */
	func Widget prevFocusWidgetAfter(Widget widget)
		if not getEnabled() or not getVisible()
			return null
		end
		
		var int index = pChildren.indexOf(widget)
		if index == -1
			throw EInvalidParam.new()
		end
		
		// find previous focusable widget in the remaining list of widget otherwise continue with parent if present
		var Widget testWidget
		var int i
		
		for i = index - 1 downto 0
			testWidget = (pChildren.getAt(i) cast Widget).findLastFocusableWidget()
			if testWidget != null
				return testWidget
			end
		end
		
		return prevFocusWidget()
	end
	
	func Widget closestFocusWidget(Point origin, float angle)
		if not getEnabled() or not getVisible()
			return null
		end
		
		if getCanFocus()
			return this
		end
		
		var Vector2 angleDir = Vector2.new(-DEMath.sin(angle), -DEMath.cos(angle))
		var Vector2 angleRotDir = Vector2.new(angleDir.getY(), -angleDir.getX())
		
		var int i, count = pChildren.getCount()
		var float bestDist = 10000, dist, t1, t2, d1, d2, d3, d4
		var Widget bestWidget, widget
		var Vector2 c1, c2, c3, c4
		
		for i = 0 to count
			widget = pChildren.getAt(i) cast Widget
			widget = widget.closestFocusWidget(origin - widget.getPosition(), angle)
			if widget == null or widget.getHasFocus()
				continue
			end
			
			d1 = d2 = d3 = d4 = 10000
			
			c1 = Vector2.new(widget.getRelativePosition(this) - origin)
			c3 = c1 + Vector2.new(widget.getSize())
			c2 = Vector2.new(c3.getX(), c1.getY())
			c4 = Vector2.new(c1.getX(), c3.getY())
			
			t1 = angleRotDir * c1
			t2 = angleRotDir * c2
			if (t1 < -0.25 and t2 > 0.25) or (t2 < -0.25 and t1 > 0.25)
				d1 = angleDir * c1.mix(c2, -t1 / (t2 - t1))
			end
			
			t1 = angleRotDir * c2
			t2 = angleRotDir * c3
			if (t1 < -0.25 and t2 > 0.25) or (t2 < -0.25 and t1 > 0.25)
				d2 = angleDir * c2.mix(c3, -t1 / (t2 - t1))
			end
			
			t1 = angleRotDir * c3
			t2 = angleRotDir * c4
			if (t1 < -0.25 and t2 > 0.25) or (t2 < -0.25 and t1 > 0.25)
				d3 = angleDir * c3.mix(c4, -t1 / (t2 - t1))
			end
			
			t1 = angleRotDir * c4
			t2 = angleRotDir * c1
			if (t1 < -0.25 and t2 > 0.25) or (t2 < -0.25 and t1 > 0.25)
				d4 = angleDir * c4.mix(c1, -t1 / (t2 - t1))
			end
			
			dist = DEMath.min(d1, DEMath.min(d2, DEMath.min(d3, d4)))
			
			if dist > 0.5 and dist < bestDist
				bestWidget = widget
				bestDist = dist
			end
		end
		
		return bestWidget
	end
	
	/** Move widget from one position to another. */
	func void moveWidget(Widget widget, int newPosition)
		var int index = pChildren.indexOf(widget)
		
		pChildren.move(index, newPosition)
		reorderChildCanvas()
		
		doLayout()
	end
	
	
	
	/** Returns the minimal size calculated by our layout object for this widget. */
	func Point getMinimumSize()
		if isMinimumSizeSet()
			return super.getMinimumSize()
		end
		
		if pCachedMinSize == null
			pCachedMinSize = pLayout.getMinimumSize(this)
		end
		
		return pCachedMinSize
	end
	
	
	
	/**
	 * \brief Minimum size of widget using reference widget width and variable height.
	 * \details Default implementation uses getMinimumSize().
	 */
	func Point getMinimumSizeForWidth(int width)
		if isMinimumSizeSet()
			return super.getMinimumSize()
		end
		
		if pCachedMinSizeForWidthSize == null or width != pCachedMinSizeForWidthWidth
			pCachedMinSizeForWidthSize = pLayout.getMinimumSizeForWidth(this, width)
			pCachedMinSizeForWidthWidth = width
		end
		
		return pCachedMinSizeForWidthSize
	end
	
	/**
	 * \brief Minimum size of widget using reference widget height and variable width.
	 * \details Default implementation uses getMinimumSize().
	 */
	func Point getMinimumSizeForHeight(int height)
		if isMinimumSizeSet()
			return super.getMinimumSize()
		end
		
		if pCachedMinSizeForHeightSize == null or height != pCachedMinSizeForHeightHeight
			pCachedMinSizeForHeightSize = pLayout.getMinimumSizeForHeight(this, height)
			pCachedMinSizeForHeightHeight = height
		end
		
		return pCachedMinSizeForHeightSize
	end
	
	
	
	/**
	 * Layout parent if existing. Modified version to respect layout blocking.
	 */
	func void layoutParent()
		if not pBlockLayout
			super.layoutParent()
		end
	end
	
	/**
	 * Lay out widgets using the set layout. This call is protected against loops
	 * caused by layoutParent called from inside a widget being laid out. Furthermore
	 * changes to the minimum, preferred and maximum size are tracked to call
	 * layoutParent() only if required.
	 */
	func void doLayout()
		if pBlockLayout
			pHasBlockedDoLayout = true
			return
		end
		
		//var bool parentRequiresLayout
		
		// put aside the old min, pref and max size to check for changes later on
		//var Point oldMinSize = pCachedMinSize
		if pChildren.getCount() > 0
			runWhileBlockingLayout(block
				pLayout.doLayout(this)
			end)
		end
		
		pHasBlockedDoLayout = false
		
		// reset the cached size so we can check the new values
		pCachedMinSize = null
		pCachedMinSizeForWidthSize = null
		pCachedMinSizeForHeightSize = null
		
		// check if the min, pref or max size are still the same
		//parentRequiresLayout = not getMinimumSize().equals(oldMinSize) \
		
		// layout the parent if required
		//if parentRequiresLayout
		if not isMinimumSizeSet()
			// if the minimum size is set the layout of the parent does not change. this is
			// the case because all getMinimumSize* method calls return the minimum size.
			// avoiding the layoutParent call in this case improves performance
			layoutParent()
		end
		//end
	end
	
	/**
	 * \brief Calls doLayout if getHasBlockedDoLayout() is true.
	 * 
	 * Call this instead of calling doLayout() directly to improve performance by not calling
	 * doLayout() if not required. This method is typically called after calling
	 * runWhileBlockingLayout().
	 */
	func void doLayoutIfBlocked()
		if pHasBlockedDoLayout
			doLayout()
		end
	end
	
	
	
	/** Notifies that the current focus widget can no longer hold the focus. */
	func void giveUpFocus()
		var Container parent = getParent()
		
		if parent != null
			parent.giveUpFocus()
		end
	end
	
	/**
	 * Request to capture the mouse for the specified widget. Returns true if the request
	 * has been accepted.
	 */
	func bool requestCaptureMouse(Widget widget)
		var Container parent = getParent()
		if parent != null
			return parent.requestCaptureMouse(widget)
		end
		return true
	end
	
	/** Request to release mouse capture. Returns true  if the request has been accepted. */
	func bool requestReleaseMouse(Widget widget)
		var Container parent = getParent()
		if parent != null
			return parent.requestReleaseMouse(widget)
		end
		return true
	end
	
	/** Determines if the container allows child widgets to grab the focus. */
	func bool allowsChildGrabFocus()
		var Container parent = getParent()
		if not getEnabled() or not getVisible() or parent == null
			return false
		end
		return parent.allowsChildGrabFocus()
	end
	
	
	
	/**
	 * Determines if the given child widget is visible. This check if the
	 * widget is visible and that the widget boundaries lie inside the
	 * viewable area of the container.
	 */
	func bool isChildVisible(Widget child)
		if not child.getVisible()
			return false
		end
		
		var Point childPosition = child.getPosition()
		
		if (childPosition + child.getSize()).isAtMost(0) or childPosition >= getSize()
			return false
		end
		
		return true
	end
	
	/** \brief Focus widget is inside container somewhere. */
	func bool hasFocusWidget()
		var Desktop desktop = getDesktop()
		if desktop == null
			return false
		end
		
		var Widget focusWidget = desktop.getFocusWidget()
		if focusWidget == null
			return false
		end
		
		return focusWidget.hasParent(this)
	end
	
	/**
	 * \brief Mouse is hovering over this widget.
	 * 
	 * Tests if the hover widget is this widget.
	 */
	func bool isMouseInside()
		var Widget hoverWidget = getHoverWidget()
		return hoverWidget == this or (hoverWidget != null and hoverWidget.hasParent(this))
	end
	
	
	
	/**
	 * \brief Notify children if state changed.
	 * \version 1.5
	 */
	func bool getStateChangeNotifyChildren()
		return pStateChangeNotifyChildren
	end
	
	/**
	 * \brief Set to notify children if state changed.
	 * \version 1.5
	 */
	func void setStateChangeNotifyChildren(bool notify)
		pStateChangeNotifyChildren = notify
	end
	
	
	
	/** Set if widget is enabled. */
	func void setEnabled(bool enabled)
		if enabled == getEnabled()
			return
		end
		
		super.setEnabled(enabled)
		
		// enabled changes require children to be always updated
		runWhileBlockingLayout(block
			notifyChildrenParentStateChanged(true)
		end)
		doLayoutIfBlocked()
	end
	
	
	/** \brief Widget has been hidden. */
	func void onHidden(WidgetEvent event)
		super.onHidden(event)
		
		if hasFocusWidget()
			giveUpFocus()
		end
	end
	
	/** \brief State changed. */
	func void onStateChanged(StateChangeEvent event)
		super.onStateChanged(event)
		
		if hasFocusWidget() and not getEnabled()
			giveUpFocus()
		end
		
		runWhileBlockingLayout(block
			notifyChildrenParentStateChanged(false)
		end)
		doLayoutIfBlocked()
	end
	
	/**
	 * \brief Parent state changed.
	 * 
	 * Calls onParentStateChanged() on all child widgets.
	 */
	func void onParentStateChanged()
		if pStateChangeNotifyChildren
			runWhileBlockingLayout(block
				super.onParentStateChanged()
				notifyChildrenParentStateChanged()
			end)
			doLayoutIfBlocked()
			
		else
			super.onParentStateChanged()
		end
	end
	
	/**
	 * \brief Parent state changed.
	 * \version 1.7
	 * 
	 * Calls onParentStateChanged() on all child widgets. Supports forcing update on the
	 * entire children chain.
	 */
	func void onParentStateChanged(bool force)
		if pStateChangeNotifyChildren or force
			runWhileBlockingLayout(block
				super.onParentStateChanged(force)
				notifyChildrenParentStateChanged(force)
			end)
			doLayoutIfBlocked()
			
		else
			super.onParentStateChanged()
		end
	end
	
	/** \brief Notify children about parent state change. */
	func void notifyChildrenParentStateChanged()
		pChildren.forEach(block Widget each
			each.onParentStateChanged()
		end)
	end
	
	/**
	 * \brief Notify children about parent state change.
	 * \version 1.7
	 */
	func void notifyChildrenParentStateChanged(bool force)
		pChildren.forEach(block Widget each
			each.onParentStateChanged(force)
		end)
	end
	
	/** \brief Size changed. */
	func void onResize(WidgetEvent event)
		super.onResize(event)
		doLayout()
	end
	
	/** \brief Padding changed. */
	func void onPaddingChanged()
		doLayout()
	end
	
	/** Notification that the gui theme changed. */
	func void onGuiThemeChanged()
		runWhileBlockingLayout(block
			super.onGuiThemeChanged()
			
			pChildren.forEach(block Widget each
				if not each.isGuiThemeSet()
					each.onGuiThemeChanged()
				end
			end)
		end)
		
		doLayout() // theoretically a layout could have different properties with different gui themes
	end
	
	/**
	 * \brief Translation manager or active language pack changed.
	 * \version 1.20
	 */
	func void onTranslationChanged()
		runWhileBlockingLayout(block
			super.onTranslationChanged()
			pChildren.forEach(block Widget each
				each.onTranslationChanged()
			end)
		end)
		doLayoutIfBlocked()
	end
	
	/** \brief Design widget using WidgetDesigner. */
	func void design()
		if getDesigner() == null
			return
		end
		
		runWhileBlockingLayout(block
			super.design()
		end)
		doLayoutIfBlocked()
	end
	
	/** Update order of all child widget canvas. */
	func void reorderChildCanvas()
		var int i, count = pChildren.getCount()
		
		for i = 0 to count
			(pChildren.getAt(i) cast Widget).getCanvasWidget().setOrder(i cast float)
		end
	end
	
	/**
	 * Notification that the mouse entered the widget. The default behaviour
	 * is to send the message to all registered listeners or propagate it back
	 * to the parent if allowed.
	 */
	func void onMouseEnter(MouseEvent event)
		if pStateChangeNotifyChildren
			runWhileBlockingLayout(block
				notifyChildrenParentStateChanged(false)
				super.onMouseEnter(event)
			end)
			doLayoutIfBlocked()
			
		else
			super.onMouseEnter(event)
		end
	end
	
	/**
	 * Notification that the mouse left the widget. The default behaviour
	 * is to send the message to all registered listeners or propagate it back
	 * to the parent if allowed.
	 */
	func void onMouseLeave(MouseEvent event)
		if pStateChangeNotifyChildren
			runWhileBlockingLayout(block
				notifyChildrenParentStateChanged(false)
				super.onMouseLeave(event)
			end)
			doLayoutIfBlocked()
			
		else
			super.onMouseLeave(event)
		end
	end
end
