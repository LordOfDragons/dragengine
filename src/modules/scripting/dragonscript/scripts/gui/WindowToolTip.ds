/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */


namespace Dragengine.Gui

pin Dragengine.Gui.Events
pin Dragengine.Gui.Layouts


/**
 * \brief Window for showing tool tip.
 * \version 1.7
 * 
 * Similar to WindowPopup but does not capture the mouse nor does it allow hovering
 * 
 * Supports designing using designer selector "WindowToolTip".
 */
class WindowToolTip extends Window
	/** \brief Create window. */
	func new()
		runWhileBlockingLayout(block
			setVisible(false)
			setCanFocus(false)
			setCanReorder(false)
			setCanActivate(false)
			setCanMove(false)
			setCanResize(false)
			setCanClose(false)
			setCanMaximize(false)
			setCanMinimize(false)
			setAlwaysOnTop(true)
			setLayout(FlowLayout.new(LayoutAxis.y))
			setDesignerSelector("WindowToolTip")
		end)
	end
	
	
	
	/**
	 * \brief Pop up window.
	 * 
	 * Shows the window at position.
	 */
	func void popup(Point position)
		popupInside(position, RectArea.new(Point.new(), getDesktop().getContainerSize() - Point.new(1, 1)))
	end
	
	/**
	 * \brief Pop up window at desktop coordinates.
	 * 
	 * Shows the window at position.
	 */
	func void popup(int x, int y)
		popup(Point.new(x, y))
	end
	
	/**
	 * \brief Pop up window not clipping outside area.
	 * 
	 * Shows the window at position.
	 */
	func void popupInside(Point position, RectArea boundary)
		setPosition(boundary.grow(-getSize()).clamp(position))
		setVisible(true)
		moveToTop()
	end
	
	/**
	 * \brief Pop down window.
	 * 
	 * Hides window.
	 */
	func void popdown()
		setVisible(false)
	end
	
	
	
	/**
	 * \brief Grab focus if possible.
	 * 
	 * Implementation for popup windows is slightly different than for regular
	 * windows. Regular windows focus the first focusable widget if they are not
	 * focusable itself. Popup windows can not grab the focus nor do they focus
	 * the first focusable widget. This avoids popup windows stealing focus from
	 * the underlaying window.
	 */
	func void grabFocus()
	end
	
	
	
	/**
	 * \brief Widget at coordinates or \em null if not found.
	 * 
	 * Overwritten to always return \em null. Prevents this widget from hovering. Keep this
	 * in mind if you try to call this method. It might not work. If you need original
	 * getWidgetAt behavior from super class use realGetWidgetAt().
	 */
	func Widget getWidgetAt(Point position)
		return null
	end
	
	/** \brief Super class getWidgetAt without overwritten behavior. */
	func Widget realGetWidgetAt(Point position)
		return super.getWidgetAt(position)
	end
end
