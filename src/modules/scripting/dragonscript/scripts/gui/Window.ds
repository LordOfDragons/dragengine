/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */


namespace Dragengine.Gui

pin Dragengine.Gui.Borders
pin Dragengine.Gui.Decorations
pin Dragengine.Gui.Designers
pin Dragengine.Gui.Events
pin Dragengine.Scenery


/**
 * \brief Top level window.
 * 
 * Supports designing using designer selector "Window".
 */
class Window extends Container
	/** \brief Window.WindowState.. */
	enum WindowState
		/** \brief Window is displayed normally on the screen */
		normal
		
		/**
		 * \brief Window is minimized to an icon or otherwise symbol representing the window.
		 * \details This style requires that you render the icon for this window. you also
		 *          have to change the window style back to Window.WindowState.normal once the icon is used.
		 */
		minimized
		
		/** \brief Window is maximized filling the entire screen. */
		maximized
	end
	
	
	
	var Decoration pDecoration
	var WindowState pWindowState
	var Widget pActiveWidget
	var bool pCanReorder
	var bool pCanMove
	var bool pCanResize
	var bool pCanActivate
	var bool pCanClose
	var bool pCanMaximize
	var bool pCanMinimize
	var bool pAlwaysOnTop
	var bool pActivated
	var Array pWindowListeners
	var WindowModal pBlockingWindow
	var bool pProtectDecoration
	var Color pModalDarkenColor
	var bool pProtectModalDarkenColor
	
	
	
	/** \brief Create window. */
	func new() this(0, 0, 100, 100)
	end
	
	/** \brief Create window with the given geometry. */
	func new(int x, int y, int width, int height) \
	this(Point.new(x, y), Point.new(width, height))
	end
	
	/** \brief Create window with the given geometry. */
	func new(Point position, Point size) super(position, size)
		pWindowState = WindowState.normal
		pCanReorder = true
		pCanMove = true
		pCanResize = true
		pCanActivate = true
		pCanClose = true
		pCanMaximize = true
		pCanMinimize = true
		pAlwaysOnTop = false
		pActivated = false
		pModalDarkenColor = Color.new(0.65, 0.65, 0.65)
		
		pProtectDecoration = false
		pProtectModalDarkenColor = false
		
		setDesignerSelector("Window")
		pWindowListeners = Array.new()
		setCanFocus(false)
	end
	
	
	
	/** \brief Dispose of widget. */
	func void dispose()
		pWindowListeners = null
		pBlockingWindow = null
		pActiveWidget = null
		pDecoration = null
		
		super.dispose()
	end
	
	
	
	/**
	 * \brief Close window.
	 * \details Removes window from parent and disposes of the window.
	 */
	func void close()
		if pBlockingWindow != null
			pBlockingWindow.close()
		end
		
		onClosing(WindowEvent.new(this, WindowEvent.idWindowClosing))
		
		safeDispose()
	end
	
	/**
	 * \brief Request closing window.
	 * \version 1.23
	 * 
	 * Called by Desktop if user clicks on close window decoration button. Optionally can be
	 * called by other scripts to request closing window if there is the possibility to reject
	 * this request. Implementation has to call \ref #close() if the request is honored otherwise
	 * do nothing. The default implementation calls \ref #close().
	 */
	func void requestClose()
		close()
	end
	
	
	
	/** \brief Set window title. */
	func void setTitle(String title)
		var bool titleChanged = not title.equals(getTitle())
		
		super.setTitle(title)
		
		if titleChanged and pDecoration != null
			pDecoration.onWindowParametersChanged()
		end
	end
	
	/** \brief Decoration of window. */
	func Decoration getDecoration()
		return pDecoration
	end
	
	/**
	 * \brief Set decoration of window.
	 * \details If null create from gui theme.
	 */
	func void setDecoration(Decoration decoration)
		if decoration == pDecoration
			return
		end
		
		if pDecoration != null
			getCanvasWidget().removeCanvas(pDecoration.getCanvas())
			pDecoration.setWindow(null)
		end
		
		pDecoration = decoration
		
		if decoration != null
			decoration.setWindow(this)
			decoration.getCanvas().setOrder(3.0)
			getCanvasWidget().addCanvas(decoration.getCanvas())
		end
		
		updateCanvasGeometry()
	end
	
	/**
	 * \brief Get decoration size.
	 * 
	 * If no decoration is set an empty border size is returned.
	 */
	func BorderSize getDecorationSize()
		if pDecoration == null
			return BorderSize.new()
		end
		return pDecoration.getBorderSize()
	end
	
	/** \brief Window state. */
	func WindowState getWindowState()
		return pWindowState
	end
	
	/** \brief Set window state. */
	func void setWindowState(WindowState state)
		if pWindowState == state
			return
		end
		
		pWindowState = state
		if pDecoration != null
			pDecoration.onWindowParametersChanged()
		end
		
		var Container parent = getParent()
		if parent != null and parent castable Desktop
			(parent cast Desktop).windowStateChanged(this)
		end
		
		select state
		case WindowState.normal
			onRestored(WindowEvent.new(this, WindowEvent.idWindowRestored))
			
		case WindowState.minimized
			onMinimized(WindowEvent.new(this, WindowEvent.idWindowMinimized))
			
		case WindowState.maximized
			onMaximized(WindowEvent.new(this, WindowEvent.idWindowMaximized))
		end
		
		// onStateChanged() ???
	end
	
	
	
	/** \brief Protect custom set decoration. */
	func bool getProtectDecoration()
		return pProtectDecoration
	end
	
	/** \brief Set protect custom set decoration. */
	func void setProtectDecoration(bool protect)
		pProtectDecoration = protect
	end
	
	/** \brief Darkening color while modal window is in use. */
	func Color getModalDarkenColor()
		return pModalDarkenColor
	end
	
	/** \brief Set darkening color while modal window is in use. */
	func void setModalDarkenColor(Color color)
		pModalDarkenColor = color
	end
	
	/** \brief Protect custom set modal window darkening color. */
	func bool getProtectModalDarkenColor()
		return pProtectModalDarkenColor
	end
	
	/** \brief Set protect custom set modal window darkening color. */
	func void setProtectModalDarkenColor(bool protect)
		pProtectModalDarkenColor = protect
	end
	
	
	
	/** \brief Window can be reordered. */
	func bool getCanReorder()
		return pCanReorder
	end
	
	/** \brief Set if window can be reordered. */
	func void setCanReorder(bool canReorder)
		pCanReorder = canReorder
	end
	
	/** \brief Window can be moved. */
	func bool getCanMove()
		return pCanMove
	end
	
	/** \brief Set if window can be moved. */
	func void setCanMove(bool canMove)
		pCanMove = canMove
		// TODO state change on decoration
	end
	
	/** \brief Window can be resized. */
	func bool getCanResize()
		return pCanResize
	end
	
	/** \brief Set window can be resized. */
	func void setCanResize(bool canResize)
		pCanResize = canResize
		// TODO state change on decoration
	end
	
	/** \brief Window can be activated. */
	func bool getCanActivate()
		return pCanActivate
	end
	
	/** \brief Set if window can be activated. */
	func void setCanActivate(bool canActivate)
		pCanActivate = canActivate
	end
	
	/** \brief Window can be closed. */
	func bool getCanClose()
		return pCanClose
	end
	
	/** \brief Set if window can be closed. */
	func void setCanClose(bool canClose)
		if canClose == pCanClose
			return
		end
		
		pCanClose = canClose
		
		if pDecoration != null
			pDecoration.onWindowParametersChanged()
		end
		// onStateChanged() ???
	end
	
	/** \brief Window can be maximized. */
	func bool getCanMaximize()
		return pCanMaximize
	end
	
	/** \brief Set if window can be maximized. */
	func void setCanMaximize(bool canMaximize)
		if canMaximize == pCanMaximize
			return
		end
		
		pCanMaximize = canMaximize
		
		if pDecoration != null
			pDecoration.onWindowParametersChanged()
		end
		// onStateChanged() ???
	end
	
	/** \brief Window can be minimized. */
	func bool getCanMinimize()
		return pCanMinimize
	end
	
	/** \brief Set if window can be minimized. */
	func void setCanMinimize(bool canMinimize)
		if canMinimize == pCanMinimize
			return
		end
		
		pCanMinimize = canMinimize
		
		if pDecoration != null
			pDecoration.onWindowParametersChanged()
		end
		// onStateChanged() ???
	end
	
	/**
	 * \brief Window is always on top of all others.
	 * \version 1.15
	 */
	func bool getAlwaysOnTop()
		return pAlwaysOnTop
	end
	
	/**
	 * \brief Set if window is always on top of all others.
	 * \version 1.15
	 */
	func void setAlwaysOnTop(bool alwaysOnTop)
		pAlwaysOnTop = alwaysOnTop
	end
	
	
	
	/** \brief Window is activated. */
	func bool getActivated()
		return pActivated
	end
	
	/** \brief Set if window is activated. */
	func void setActivated(bool activated)
		if pActivated == activated
			return
		end
		
		pActivated = activated
		
		notifyBorderParametersChanged()
		
		if pDecoration != null
			pDecoration.onWindowParametersChanged()
		end
		
		if activated
			onActivated(WindowEvent.new(this, WindowEvent.idWindowActivated))
			
		else
			onDeactivated(WindowEvent.new(this, WindowEvent.idWindowDeactivated))
		end
	end
	
	
	
	/**
	 * \brief Grab the focus if possible.
	 * \details If the window is disabled or not visible the focus is not grabbed.
	 *          Otherwise the focus is grabbed by the first widget able to do so:
	 *          - Active widget
	 *          - First focusable widget otherwise
	 *          - Window itself
	 */
	func void grabFocus()
		if not pCanActivate or not getEnabled() or not getVisible()
			return
		end
		
		// focus active widget or first focusable widget
		var Widget widget = getActiveWidget()
		if widget != null
			widget.grabFocus()
			return
		end
		
		// otherwise focus the window itself unless already focused. not done using
		// super.grabFocus() since this checks if the window can focus. in this case
		// though the window always grabs the focus ignoring the can-focus parameter
		if getHasFocus()
			return
		end
		
		requestGrabFocus(this)
	end
	
	/** \brief Request to focus the specified widget. */
	func void requestGrabFocus(Widget widget)
		super.requestGrabFocus(widget)
		
		if widget == this or not pCanActivate
			return
		end
		
		if pActiveWidget == null
			pActiveWidget = widget
			
		elif widget.getHasFocus()
			pActiveWidget = widget
		end
	end
	
	/** \brief Active widget or null if there is none. */
	func Widget getActiveWidget()
		if pActiveWidget != null
			if pActiveWidget.getParent() == null /* removed or disposed while active */ \
			or not pActiveWidget.getCanFocus() \
			or not pActiveWidget.getEnabled() \
			or not pActiveWidget.getVisible()
				pActiveWidget = null
			end
		end
		
		if pActiveWidget == null
			pActiveWidget = findFocusableWidget()
			
			if pActiveWidget == this
				pActiveWidget = null // we do not look for ourself or we loop
			end
		end
		
		return pActiveWidget
	end
	
	/**
	 * \brief Set active widget.
	 * 
	 * Used to set the initial active widget for a window.
	 */
	func void setActiveWidget(Widget widget)
		pActiveWidget = widget
	end
	
	/** Tries to aquire the focus for the active widget. */
	func void activeWidgetGrabFocus()
		var Widget widget = getActiveWidget()
		if widget != null
			widget.grabFocus()
		end
	end
	
	/**
	 * \brief Find next widget in the focus cycle that can grab the focus.
	 * \details Similar to Container.nextFocusWidgetAfter but wraps around if no suitable
	 *          Widget is found until the last widget in the window.
	 */
	func Widget nextFocusWidgetAfter(Widget widget)
		if not getEnabled() or not getVisible()
			return null
		end
		
		var int index = indexOfWidget(widget)
		if index == -1
			throw EInvalidParam.new()
		end
		
		// find next focusable widget in the list of widgets wrapping around if required
		var int i, count = getWidgetCount()
		var Widget testWidget
		
		for i = index + 1 to count
			testWidget = getWidget(i).findFocusableWidget()
			if testWidget != null
				return testWidget
			end
		end
		
		return findFocusableWidget()
	end
	
	/**
	 * \brief Find previous widget in the focus cycle that can grab the focus.
	 * \details Similar to Container.prevFocusWidgetAfter but wraps around if no suitable
	 *          Widget is found until the first widget in the window.
	 */
	func Widget prevFocusWidgetAfter(Widget widget)
		if not getEnabled() or not getVisible()
			return null
		end
		
		var int index = indexOfWidget(widget)
		if index == -1
			throw EInvalidParam.new()
		end
		
		// find next focusable widget in the list of widgets wrapping around if required
		var Widget testWidget
		var int i
		
		for i = index - 1 downto 0
			testWidget = getWidget(i).findLastFocusableWidget()
			if testWidget != null
				return testWidget
			end
		end
		
		return findLastFocusableWidget()
	end
	
	
	
	/** \brief Modal window blocking this window or \em null. */
	func WindowModal getBlockingWindow()
		return pBlockingWindow
	end
	
	/**
	 * \brief Set modal window blocking this window or \em null.
	 * \details This call is for WindowModal only. Do not call directly.
	 */
	func void setBlockingWindow(WindowModal window)
		if window == pBlockingWindow
			return
		end
		
		if pBlockingWindow != null
			setEnabled(true)
			setColorTransformation(ColorMatrix.new())
		end
		
		pBlockingWindow = window
		
		if window != null
			setEnabled(false)
			setColorTransformation(ColorMatrix.newScaling(pModalDarkenColor))
		end
	end
	
	/** \brief Get top most blocking window or \em null. */
	func Window getTopBlockingWindow()
		if pBlockingWindow == null
			return null
		end
		
		var Window window = pBlockingWindow
		while window.pBlockingWindow != null
			window = window.pBlockingWindow
		end
		return window
	end
	
	
	
	/** \brief Move window to the center of the parent desktop. */
	func void centerWindow()
		var Container parent = getParent()
		if parent != null
			setPosition((parent.getSize() - getSize()) / 2)
		end
	end
	
	
	
	/**
	 * \brief Fit window size to content size.
	 * 
	 * Depending on the layout used and widgets contained in the window the
	 * current window size affects the result. For example if the window
	 * contains wrapping labels the current window size is used as reference
	 * width affecting the size of the wrapping label. It is thus preferable
	 * to set a reasonable window size before calling fitToContent() to
	 * obtain a window size near the set window size.
	 * 
	 * \note Calling this function only adjusts the window size. The user can
	 *       still resize the window afterwards. If you want the window to
	 *       stick to the fitting size use setCanResize() to lock the size.
	 *       This can be done before or after the call since fitToContent()
	 *       ignore the set can-resize value.
	 */
	func void fitToContent()
		setSize(getLayout().getMinimumSize(this))
	end
	
	
	
	/** \brief Move window to the top. */
	func void moveToTop()
		var Container parent = getParent()
		var int position = parent.getWidgetCount() - 1
		
		if parent.indexOfWidget(this) < position
			parent.moveWidget(this, position)
		end
		
		if pBlockingWindow != null
			pBlockingWindow.moveAboveBlockWindow()
		end
		
		if not pAlwaysOnTop
			var Desktop desktop = getDesktop()
			if desktop != null
				desktop.raiseWindowsAlwaysOnTop()
			end
		end
	end
	
	/** \brief Move window to the bottom. */
	func void moveToBottom()
		var Container parent = getParent()
		
		if parent.indexOfWidget(this) > 0
			parent.moveWidget(this, 0)
		end
		
		if pBlockingWindow != null
			pBlockingWindow.moveAboveBlockWindow()
		end
	end
	
	/** \brief Move window right above the given window. */
	func void moveAbove(Window window)
		if window == this
			throw EInvalidParam.new()
		end
		
		var Container parent = getParent()
		var int myIndex = parent.indexOfWidget(this)
		var int otherIndex = parent.indexOfWidget(window)
		
		if myIndex < otherIndex
			parent.moveWidget(this, otherIndex)
			
		elif myIndex > otherIndex + 1
			parent.moveWidget(this, otherIndex + 1)
		end
		
		if pBlockingWindow != null
			pBlockingWindow.moveAboveBlockWindow()
		end
	end
	
	/** \brief Move window right below the given window. */
	func void moveBelow(Window window)
		if window == this
			throw EInvalidParam.new()
		end
		
		var Container parent = getParent()
		var int myIndex = parent.indexOfWidget(this)
		var int otherIndex = parent.indexOfWidget(window)
		
		if myIndex < otherIndex - 1
			parent.moveWidget(this, otherIndex - 1)
			
		elif myIndex > otherIndex
			parent.moveWidget(this, otherIndex)
		end
		
		if pBlockingWindow != null
			pBlockingWindow.moveAboveBlockWindow()
		end
	end
	
	
	
	/** \brief Widget position in window coordinates. */
	func Point getWindowPosition()
		return Point.new()
	end
	
	
	
	/**
	 * \brief Window or null if this widget is not part of a window.
	 * \details The default implementation forwards the request to the parent with
	 *          the Window or a subclass thereof intercepting.
	 */
	func Window getWindow()
		return this
	end
	
	
	
	/** \brief Add window listener. */
	func void addWindowListener(WindowListener listener)
		if listener == null
			throw EInvalidParam.new()
		end
		pWindowListeners.add(listener)
	end
	
	/** \brief Remove window listener. */
	func void removeWindowListener(WindowListener listener)
		pWindowListeners.remove(listener)
	end
	
	
	
	/**
	 * \brief Send event to all appropriate listeners for events of its kind.
	 * \details If there are no listeners the event is send to the parent if
	 *          \em sendToParent is \em true.
	 */
	func void sendEventToListeners(Event event, bool sendToParent)
		var int identifier = event.getIdentifier()
		
		if WindowEvent.isWindowEvent(identifier)
			if pWindowListeners != null and pWindowListeners.getCount() > 0
				select identifier
				case WindowEvent.idWindowActivated
					pWindowListeners.forEach(block WindowListener each
						each.onWindowActivated(event cast WindowEvent)
					end)
					
				case WindowEvent.idWindowDeactivated
					pWindowListeners.forEach(block WindowListener each
						each.onWindowDeactivated(event cast WindowEvent)
					end)
					
				case WindowEvent.idWindowClosing
					pWindowListeners.forEach(block WindowListener each
						each.onWindowClosing(event cast WindowEvent)
					end)
					
				case WindowEvent.idWindowRestored
					pWindowListeners.forEach(block WindowListener each
						each.onWindowRestored(event cast WindowEvent)
					end)
					
				case WindowEvent.idWindowMinimized
					pWindowListeners.forEach(block WindowListener each
						each.onWindowMinimized(event cast WindowEvent)
					end)
					
				case WindowEvent.idWindowMaximized
					pWindowListeners.forEach(block WindowListener each
						each.onWindowMaximized(event cast WindowEvent)
					end)
				end
				
			elif sendToParent
				var Container parent = getParent()
				if parent != null
					parent.sendEvent(event)
				end
			end
			
		else
			super.sendEventToListeners(event, sendToParent)
		end
	end
	
	
	
	/** \brief Widget has been shown. */
	func void onShown(WidgetEvent event)
		super.onShown(event)
		
		if not pActivated and pCanActivate and getEnabled()
			activeWidgetGrabFocus()
		end
		
		doLayout()
	end
	
	/** \brief State changed. */
	func void onStateChanged(StateChangeEvent event)
		super.onStateChanged(event)
		
		// if enabled changed
		if not pActivated and pCanActivate and getVisible() and getEnabled()
			activeWidgetGrabFocus()
		end
		
		if pDecoration != null
			pDecoration.onWindowParametersChanged()
		end
	end
	
	/**
	 * \brief Window has been activated.
	 * \details Sends event to listeners.
	 */
	func void onActivated(WindowEvent event)
		sendEventToListeners(event, false)
	end
	
	/**
	 * \brief Window has been deactivated.
	 * \details Sends event to listeners.
	 */
	func void onDeactivated(WindowEvent event)
		sendEventToListeners(event, false)
	end
	
	/**
	 * \brief Window is closing.
	 * \details Sends event to listeners.
	 */
	func void onClosing(WindowEvent event)
		sendEventToListeners(event, false)
	end
	
	/**
	 * \brief Window state switched to normal.
	 * \details Sends event to listeners.
	 */
	func void onRestored(WindowEvent event)
		sendEventToListeners(event, false)
	end
	
	/**
	 * \brief Window has been minimized.
	 * \details Sends event to listeners.
	 */
	func void onMinimized(WindowEvent event)
		sendEventToListeners(event, false)
	end
	
	/**
	 * \brief Window has been maximized.
	 * \details Sends event to listeners.
	 */
	func void onMaximized(WindowEvent event)
		sendEventToListeners(event, false)
	end
	
	
	
	/** \brief Designer selector changed. */
	func void onDesignerSelectorChanged()
		super.onDesignerSelectorChanged()
		setDecorationFromDesigner()
	end
	
	/** \brief Gui theme changed. */
	func void onGuiThemeChanged()
		super.onGuiThemeChanged()
		setDecorationFromDesigner()
	end
	
	/** \brief Designer changed. */
	func void onDesignerChanged()
		super.onDesignerChanged()
		setDecorationFromDesigner()
	end
	
	/** \brief Desktop size changed. */
	func void onDesktopResized()
	end
	
	/**
	 * \brief Translation manager or active language pack changed.
	 * \version 1.20
	 */
	func void onTranslationChanged()
		super.onTranslationChanged()
		setDecorationFromDesigner()
	end
	
	
	
	/** \brief Set decoration from designer if not protected. */
	protected func void setDecorationFromDesigner()
		if pProtectDecoration
			return
		end
		
		var WindowDesigner designer = getDesigner() cast WindowDesigner
		
		if designer != null
			setDecoration(designer.createDecoration())
			
		else
			setDecoration(null)
		end
	end
	
	
	
	/**
	 * \brief Update canvas position and size.
	 * 
	 * The position and size of the background and content canvas are adjusted to match the
	 * position and size of the widget in the parent container. Border canvas if existing
	 * is adjusted to always fit properly around the canvas background and content.
	 * 
	 * \warning This method is also called from the constructor. Subclasses overwriting this
	 *          method have to be able to run while the subclass constructor has not yet
	 *          been processed.
	 */
	protected func void updateCanvasGeometry()
		var Border border = getBorder()
		var Point position = getPosition()
		var Point size = getSize()
		var BorderSize borderSize = BorderSize.new()
		
		if border != null
			borderSize = border.getBorderSize()
		end
		
		var BorderSize decorationSize
		if pDecoration != null
			decorationSize = pDecoration.getBorderSize()
			
		else
			decorationSize = BorderSize.new()
		end
		
		var Point decorationOffset = Point.new(decorationSize.getLeft(), decorationSize.getTop())
		var Point offset = Point.new(borderSize.getLeft(), borderSize.getTop()) + decorationOffset
		
		getCanvasWidget().setPosition(position - offset)
		getCanvasWidget().setSize(size + borderSize.getSize() + decorationSize.getSize())
		
		getCanvasBackground().setPosition(offset)
		getCanvasBackground().setSize(size)
		
		getCanvasContent().setPosition(offset)
		getCanvasContent().setSize(size)
		
		if border != null
			border.getCanvas().setPosition(decorationOffset)
			border.resizeCanvas(getSize())
		end
		
		if pDecoration != null
			pDecoration.resizeCanvas()
		end
	end
	
	
	
	/**
	 * \brief Set window to act as a non-interactive background window.
	 * 
	 * Convenience method to set canFocus and canActivate to false. In this mode the window
	 * is not activated nor brought to the front if clicked. Furthermore the window never
	 * grabs the focus. This is suitable configuration for windows acting as a background
	 * with other interactive windows placed ontop of it.
	 */
	func void becomeBackgroundWindow()
		setCanActivate(false)
		setCanFocus(false)
	end
end
