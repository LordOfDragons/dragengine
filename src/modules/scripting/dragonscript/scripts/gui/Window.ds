/* 
 * Drag[en]gine DragonScript Script Module
 *
 * Copyright (C) 2020, Roland Pl√ºss (roland@rptd.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */


namespace Dragengine.Gui

pin Dragengine.Gui.Borders
pin Dragengine.Gui.Decorations
pin Dragengine.Gui.Designers
pin Dragengine.Gui.Events
pin Dragengine.Scenery


/**
 * \brief Top level window.
 * 
 * Supports designing using designer selector "Window".
 */
class Window extends Container
	/** \brief Window.WindowState.. */
	enum WindowState
		/** \brief Window is displayed normally on the screen */
		normal
		
		/**
		 * \brief Window is minimized to an icon or otherwise symbol representing the window.
		 * \details This style requires that you render the icon for this window. you also
		 *          have to change the window style back to Window.WindowState.normal once the icon is used.
		 */
		minimized
		
		/** \brief Window is maximized filling the entire screen. */
		maximized
	end
	
	
	
	private var Decoration pDecoration
	private var WindowState pWindowState
	private var Widget pActiveWidget
	private var bool pCanReorder
	private var bool pCanMove
	private var bool pCanResize
	private var bool pCanActivate
	private var bool pCanClose
	private var bool pCanMaximize
	private var bool pCanMinimize
	private var bool pAlwaysOnTop
	private var bool pActivated
	private var Array pWindowListeners
	private var WindowModal pBlockingWindow
	private var bool pProtectDecoration
	private var Color pModalDarkenColor
	private var bool pProtectModalDarkenColor
	
	
	
	/** \brief Create window. */
	public func new() this( 0, 0, 100, 100 )
	end
	
	/** \brief Create window with the given geometry. */
	public func new( int x, int y, int width, int height ) \
	this( Point.new( x, y ), Point.new( width, height ) )
	end
	
	/** \brief Create window with the given geometry. */
	public func new( Point position, Point size ) super( position, size )
		this.pWindowState = WindowState.normal
		this.pCanReorder = true
		this.pCanMove = true
		this.pCanResize = true
		this.pCanActivate = true
		this.pCanClose = true
		this.pCanMaximize = true
		this.pCanMinimize = true
		pAlwaysOnTop = false
		this.pActivated = false
		this.pModalDarkenColor = Color.new( 0.65, 0.65, 0.65 )
		
		this.pProtectDecoration = false
		this.pProtectModalDarkenColor = false
		
		this.setDesignerSelector( "Window" )
		this.pWindowListeners = Array.new()
		this.setCanFocus( false )
	end
	
	
	
	/** \brief Dispose of widget. */
	public func void dispose()
		this.pWindowListeners = null
		this.pBlockingWindow = null
		this.pActiveWidget = null
		this.pDecoration = null
		
		super.dispose()
	end
	
	
	
	/**
	 * \brief Close window.
	 * \details Removes window from parent and disposes of the window.
	 */
	public func void close()
		if this.pBlockingWindow != null
			this.pBlockingWindow.close()
		end
		
		this.onClosing( WindowEvent.new( this, WindowEvent.idWindowClosing ) )
		
		this.safeDispose()
	end
	
	
	
	/** \brief Set window title. */
	public func void setTitle(String title)
		var bool titleChanged = not title.equals(getTitle())
		
		super.setTitle(title)
		
		if titleChanged and pDecoration != null
			pDecoration.onWindowParametersChanged()
		end
	end
	
	/** \brief Decoration of window. */
	public func Decoration getDecoration()
		return this.pDecoration
	end
	
	/**
	 * \brief Set decoration of window.
	 * \details If null create from gui theme.
	 */
	public func void setDecoration( Decoration decoration )
		if decoration == this.pDecoration
			return
		end
		
		if this.pDecoration != null
			this.getCanvasWidget().removeCanvas( this.pDecoration.getCanvas() )
			this.pDecoration.setWindow( null )
		end
		
		this.pDecoration = decoration
		
		if decoration != null
			decoration.setWindow( this )
			decoration.getCanvas().setOrder( 3.0 )
			this.getCanvasWidget().addCanvas( decoration.getCanvas() )
		end
		
		this.updateCanvasGeometry()
	end
	
	/**
	 * \brief Get decoration size.
	 * 
	 * If no decoration is set an empty border size is returned.
	 */
	public func BorderSize getDecorationSize()
		if this.pDecoration == null
			return BorderSize.new()
		end
		return this.pDecoration.getBorderSize()
	end
	
	/** \brief Window state. */
	public func WindowState getWindowState()
		return this.pWindowState
	end
	
	/** \brief Set window state. */
	public func void setWindowState( WindowState state )
		if this.pWindowState == state
			return
		end
		
		this.pWindowState = state
		if this.pDecoration != null
			this.pDecoration.onWindowParametersChanged()
		end
		
		var Container parent = this.getParent()
		if parent != null and parent castable Desktop
			( parent cast Desktop ).windowStateChanged( this )
		end
		
		select state
		case WindowState.normal
			this.onRestored( WindowEvent.new( this, WindowEvent.idWindowRestored ) )
			
		case WindowState.minimized
			this.onMinimized( WindowEvent.new( this, WindowEvent.idWindowMinimized ) )
			
		case WindowState.maximized
			this.onMaximized( WindowEvent.new( this, WindowEvent.idWindowMaximized ) )
		end
		
		// onStateChanged() ???
	end
	
	
	
	/** \brief Protect custom set decoration. */
	public func bool getProtectDecoration()
		return this.pProtectDecoration
	end
	
	/** \brief Set protect custom set decoration. */
	public func void setProtectDecoration( bool protect )
		this.pProtectDecoration = protect
	end
	
	/** \brief Darkening color while modal window is in use. */
	public func Color getModalDarkenColor()
		return this.pModalDarkenColor
	end
	
	/** \brief Set darkening color while modal window is in use. */
	public func void setModalDarkenColor( Color color )
		this.pModalDarkenColor = color
	end
	
	/** \brief Protect custom set modal window darkening color. */
	public func bool getProtectModalDarkenColor()
		return this.pProtectModalDarkenColor
	end
	
	/** \brief Set protect custom set modal window darkening color. */
	public func void setProtectModalDarkenColor( bool protect )
		this.pProtectModalDarkenColor = protect
	end
	
	
	
	/** \brief Window can be reordered. */
	public func bool getCanReorder()
		return this.pCanReorder
	end
	
	/** \brief Set if window can be reordered. */
	public func void setCanReorder( bool canReorder )
		this.pCanReorder = canReorder
	end
	
	/** \brief Window can be moved. */
	public func bool getCanMove()
		return this.pCanMove
	end
	
	/** \brief Set if window can be moved. */
	public func void setCanMove( bool canMove )
		this.pCanMove = canMove
		// TODO state change on decoration
	end
	
	/** \brief Window can be resized. */
	public func bool getCanResize()
		return this.pCanResize
	end
	
	/** \brief Set window can be resized. */
	public func void setCanResize( bool canResize )
		this.pCanResize = canResize
		// TODO state change on decoration
	end
	
	/** \brief Window can be activated. */
	public func bool getCanActivate()
		return this.pCanActivate
	end
	
	/** \brief Set if window can be activated. */
	public func void setCanActivate( bool canActivate )
		this.pCanActivate = canActivate
	end
	
	/** \brief Window can be closed. */
	public func bool getCanClose()
		return this.pCanClose
	end
	
	/** \brief Set if window can be closed. */
	public func void setCanClose( bool canClose )
		if canClose == this.pCanClose
			return
		end
		
		this.pCanClose = canClose
		
		if this.pDecoration != null
			this.pDecoration.onWindowParametersChanged()
		end
		// onStateChanged() ???
	end
	
	/** \brief Window can be maximized. */
	public func bool getCanMaximize()
		return this.pCanMaximize
	end
	
	/** \brief Set if window can be maximized. */
	public func void setCanMaximize( bool canMaximize )
		if canMaximize == this.pCanMaximize
			return
		end
		
		this.pCanMaximize = canMaximize
		
		if this.pDecoration != null
			this.pDecoration.onWindowParametersChanged()
		end
		// onStateChanged() ???
	end
	
	/** \brief Window can be minimized. */
	public func bool getCanMinimize()
		return this.pCanMinimize
	end
	
	/** \brief Set if window can be minimized. */
	public func void setCanMinimize( bool canMinimize )
		if canMinimize == this.pCanMinimize
			return
		end
		
		this.pCanMinimize = canMinimize
		
		if this.pDecoration != null
			this.pDecoration.onWindowParametersChanged()
		end
		// onStateChanged() ???
	end
	
	/**
	 * \brief Window is always on top of all others.
	 * \version 1.15
	 */
	public func bool getAlwaysOnTop()
		return pAlwaysOnTop
	end
	
	/**
	 * \brief Set if window is always on top of all others.
	 * \version 1.15
	 */
	public func void setAlwaysOnTop(bool alwaysOnTop)
		pAlwaysOnTop = alwaysOnTop
	end
	
	
	
	/** \brief Window is activated. */
	public func bool getActivated()
		return this.pActivated
	end
	
	/** \brief Set if window is activated. */
	public func void setActivated( bool activated )
		if this.pActivated == activated
			return
		end
		
		this.pActivated = activated
		
		this.notifyBorderParametersChanged()
		
		if this.pDecoration != null
			this.pDecoration.onWindowParametersChanged()
		end
		
		if activated
			this.onActivated( WindowEvent.new( this, WindowEvent.idWindowActivated ) )
			
		else
			this.onDeactivated( WindowEvent.new( this, WindowEvent.idWindowDeactivated ) )
		end
	end
	
	
	
	/**
	 * \brief Grab the focus if possible.
	 * \details If the window is disabled or not visible the focus is not grabbed.
	 *          Otherwise the focus is grabbed by the first widget able to do so:
	 *          - Active widget
	 *          - First focusable widget otherwise
	 *          - Window itself
	 */
	public func void grabFocus()
		if not this.pCanActivate or not this.getEnabled() or not this.getVisible()
			return
		end
		
		// focus active widget or first focusable widget
		var Widget widget = this.getActiveWidget()
		if widget != null
			widget.grabFocus()
			return
		end
		
		// otherwise focus the window itself unless already focused. not done using
		// super.grabFocus() since this checks if the window can focus. in this case
		// though the window always grabs the focus ignoring the can-focus parameter
		if this.getHasFocus()
			return
		end
		
		this.requestGrabFocus( this )
	end
	
	/** \brief Request to focus the specified widget. */
	public func void requestGrabFocus( Widget widget )
		super.requestGrabFocus( widget )
		
		if widget == this or not this.pCanActivate
			return
		end
		
		if this.pActiveWidget == null
			this.pActiveWidget = widget
			
		elif widget.getHasFocus()
			this.pActiveWidget = widget
		end
	end
	
	/** \brief Active widget or null if there is none. */
	public func Widget getActiveWidget()
		if pActiveWidget != null
			if pActiveWidget.getParent() == null /* removed or disposed while active */ \
			or not pActiveWidget.getCanFocus() \
			or not pActiveWidget.getEnabled() \
			or not pActiveWidget.getVisible()
				pActiveWidget = null
			end
		end
		
		if this.pActiveWidget == null
			this.pActiveWidget = this.findFocusableWidget()
			
			if this.pActiveWidget == this
				this.pActiveWidget = null // we do not look for ourself or we loop
			end
		end
		
		return this.pActiveWidget
	end
	
	/**
	 * \brief Set active widget.
	 * 
	 * Used to set the initial active widget for a window.
	 */
	public func void setActiveWidget( Widget widget )
		this.pActiveWidget = widget
	end
	
	/** Tries to aquire the focus for the active widget. */
	public func void activeWidgetGrabFocus()
		var Widget widget = this.getActiveWidget()
		if widget != null
			widget.grabFocus()
		end
	end
	
	/**
	 * \brief Find next widget in the focus cycle that can grab the focus.
	 * \details Similar to Container.nextFocusWidgetAfter but wraps around if no suitable
	 *          Widget is found until the last widget in the window.
	 */
	public func Widget nextFocusWidgetAfter( Widget widget )
		if not this.getEnabled() or not this.getVisible()
			return null
		end
		
		var int index = this.indexOfWidget( widget )
		if index == -1
			throw EInvalidParam.new()
		end
		
		// find next focusable widget in the list of widgets wrapping around if required
		var int i, count = this.getWidgetCount()
		var Widget testWidget
		
		for i = index + 1 to count
			testWidget = this.getWidget( i ).findFocusableWidget()
			if testWidget != null
				return testWidget
			end
		end
		
		return this.findFocusableWidget()
	end
	
	/**
	 * \brief Find previous widget in the focus cycle that can grab the focus.
	 * \details Similar to Container.prevFocusWidgetAfter but wraps around if no suitable
	 *          Widget is found until the first widget in the window.
	 */
	public func Widget prevFocusWidgetAfter( Widget widget )
		if not this.getEnabled() or not this.getVisible()
			return null
		end
		
		var int index = this.indexOfWidget( widget )
		if index == -1
			throw EInvalidParam.new()
		end
		
		// find next focusable widget in the list of widgets wrapping around if required
		var Widget testWidget
		var int i
		
		for i = index - 1 downto 0
			testWidget = this.getWidget( i ).findLastFocusableWidget()
			if testWidget != null
				return testWidget
			end
		end
		
		return this.findLastFocusableWidget()
	end
	
	
	
	/** \brief Modal window blocking this window or \em null. */
	public func WindowModal getBlockingWindow()
		return this.pBlockingWindow
	end
	
	/**
	 * \brief Set modal window blocking this window or \em null.
	 * \details This call is for WindowModal only. Do not call directly.
	 */
	public func void setBlockingWindow( WindowModal window )
		if window == this.pBlockingWindow
			return
		end
		
		if this.pBlockingWindow != null
			this.setEnabled( true )
			this.setColorTransformation( ColorMatrix.new() )
		end
		
		this.pBlockingWindow = window
		
		if window != null
			this.setEnabled( false )
			this.setColorTransformation( ColorMatrix.newScaling( this.pModalDarkenColor ) )
		end
	end
	
	/** \brief Get top most blocking window or \em null. */
	public func Window getTopBlockingWindow()
		if this.pBlockingWindow == null
			return null
		end
		
		var Window window = this.pBlockingWindow
		while window.pBlockingWindow != null
			window = window.pBlockingWindow
		end
		return window
	end
	
	
	
	/** \brief Move window to the center of the parent desktop. */
	public func void centerWindow()
		var Container parent = this.getParent()
		if parent != null
			this.setPosition( ( parent.getSize() - this.getSize() ) / 2 )
		end
	end
	
	
	
	/**
	 * \brief Fit window size to content size.
	 * 
	 * Depending on the layout used and widgets contained in the window the
	 * current window size affects the result. For example if the window
	 * contains wrapping labels the current window size is used as reference
	 * width affecting the size of the wrapping label. It is thus preferable
	 * to set a reasonable window size before calling fitToContent() to
	 * obtain a window size near the set window size.
	 * 
	 * \note Calling this function only adjusts the window size. The user can
	 *       still resize the window afterwards. If you want the window to
	 *       stick to the fitting size use setCanResize() to lock the size.
	 *       This can be done before or after the call since fitToContent()
	 *       ignore the set can-resize value.
	 */
	public func void fitToContent()
		this.setSize( this.getLayout().getMinimumSize( this ) )
	end
	
	
	
	/** \brief Move window to the top. */
	public func void moveToTop()
		var Container parent = this.getParent()
		var int position = parent.getWidgetCount() - 1
		
		if parent.indexOfWidget( this ) < position
			parent.moveWidget( this, position )
		end
		
		if this.pBlockingWindow != null
			this.pBlockingWindow.moveAboveBlockWindow()
		end
		
		if not pAlwaysOnTop
			var Desktop desktop = getDesktop()
			if desktop != null
				desktop.raiseWindowsAlwaysOnTop()
			end
		end
	end
	
	/** \brief Move window to the bottom. */
	public func void moveToBottom()
		var Container parent = this.getParent()
		
		if parent.indexOfWidget( this ) > 0
			parent.moveWidget( this, 0 )
		end
		
		if this.pBlockingWindow != null
			this.pBlockingWindow.moveAboveBlockWindow()
		end
	end
	
	/** \brief Move window right above the given window. */
	public func void moveAbove( Window window )
		if window == this
			throw EInvalidParam.new()
		end
		
		var Container parent = this.getParent()
		var int myIndex = parent.indexOfWidget( this )
		var int otherIndex = parent.indexOfWidget( window )
		
		if myIndex < otherIndex
			parent.moveWidget( this, otherIndex )
			
		elif myIndex > otherIndex + 1
			parent.moveWidget( this, otherIndex + 1 )
		end
		
		if this.pBlockingWindow != null
			this.pBlockingWindow.moveAboveBlockWindow()
		end
	end
	
	/** \brief Move window right below the given window. */
	public func void moveBelow( Window window )
		if window == this
			throw EInvalidParam.new()
		end
		
		var Container parent = this.getParent()
		var int myIndex = parent.indexOfWidget( this )
		var int otherIndex = parent.indexOfWidget( window )
		
		if myIndex < otherIndex - 1
			parent.moveWidget( this, otherIndex - 1 )
			
		elif myIndex > otherIndex
			parent.moveWidget( this, otherIndex )
		end
		
		if this.pBlockingWindow != null
			this.pBlockingWindow.moveAboveBlockWindow()
		end
	end
	
	
	
	/** \brief Widget position in window coordinates. */
	public func Point getWindowPosition()
		return Point.new()
	end
	
	
	
	/**
	 * \brief Window or null if this widget is not part of a window.
	 * \details The default implementation forwards the request to the parent with
	 *          the Window or a subclass thereof intercepting.
	 */
	public func Window getWindow()
		return this
	end
	
	
	
	/** \brief Add window listener. */
	public func void addWindowListener( WindowListener listener )
		if listener == null
			throw EInvalidParam.new()
		end
		this.pWindowListeners.add( listener )
	end
	
	/** \brief Remove window listener. */
	public func void removeWindowListener( WindowListener listener )
		this.pWindowListeners.remove( listener )
	end
	
	
	
	/**
	 * \brief Send event to all appropriate listeners for events of its kind.
	 * \details If there are no listeners the event is send to the parent if
	 *          \em sendToParent is \em true.
	 */
	public func void sendEventToListeners( Event event, bool sendToParent )
		var int identifier = event.getIdentifier()
		
		if WindowEvent.isWindowEvent( identifier )
			if this.pWindowListeners != null and this.pWindowListeners.getCount() > 0
				select identifier
				case WindowEvent.idWindowActivated
					this.pWindowListeners.forEach( block WindowListener each
						each.onWindowActivated( event cast WindowEvent )
					end )
					
				case WindowEvent.idWindowDeactivated
					this.pWindowListeners.forEach( block WindowListener each
						each.onWindowDeactivated( event cast WindowEvent )
					end )
					
				case WindowEvent.idWindowClosing
					this.pWindowListeners.forEach( block WindowListener each
						each.onWindowClosing( event cast WindowEvent )
					end )
					
				case WindowEvent.idWindowRestored
					this.pWindowListeners.forEach( block WindowListener each
						each.onWindowRestored( event cast WindowEvent )
					end )
					
				case WindowEvent.idWindowMinimized
					this.pWindowListeners.forEach( block WindowListener each
						each.onWindowMinimized( event cast WindowEvent )
					end )
					
				case WindowEvent.idWindowMaximized
					this.pWindowListeners.forEach( block WindowListener each
						each.onWindowMaximized( event cast WindowEvent )
					end )
				end
				
			elif sendToParent
				var Container parent = this.getParent()
				if parent != null
					parent.sendEvent( event )
				end
			end
			
		else
			super.sendEventToListeners( event, sendToParent )
		end
	end
	
	
	
	/** \brief Widget has been shown. */
	public func void onShown( WidgetEvent event )
		super.onShown( event )
		
		if not this.pActivated and this.pCanActivate and this.getEnabled()
			this.activeWidgetGrabFocus()
		end
	end
	
	/** \brief State changed. */
	public func void onStateChanged( StateChangeEvent event )
		super.onStateChanged( event )
		
		// if enabled changed
		if not this.pActivated and this.pCanActivate and this.getVisible() and this.getEnabled()
			this.activeWidgetGrabFocus()
		end
		
		if this.pDecoration != null
			this.pDecoration.onWindowParametersChanged()
		end
	end
	
	/**
	 * \brief Window has been activated.
	 * \details Sends event to listeners.
	 */
	public func void onActivated( WindowEvent event )
		this.sendEventToListeners( event, false )
	end
	
	/**
	 * \brief Window has been deactivated.
	 * \details Sends event to listeners.
	 */
	public func void onDeactivated( WindowEvent event )
		this.sendEventToListeners( event, false )
	end
	
	/**
	 * \brief Window is closing.
	 * \details Sends event to listeners.
	 */
	public func void onClosing( WindowEvent event )
		this.sendEventToListeners( event, false )
	end
	
	/**
	 * \brief Window state switched to normal.
	 * \details Sends event to listeners.
	 */
	public func void onRestored( WindowEvent event )
		this.sendEventToListeners( event, false )
	end
	
	/**
	 * \brief Window has been minimized.
	 * \details Sends event to listeners.
	 */
	public func void onMinimized( WindowEvent event )
		this.sendEventToListeners( event, false )
	end
	
	/**
	 * \brief Window has been maximized.
	 * \details Sends event to listeners.
	 */
	public func void onMaximized( WindowEvent event )
		this.sendEventToListeners( event, false )
	end
	
	
	
	/** \brief Designer selector changed. */
	public func void onDesignerSelectorChanged()
		super.onDesignerSelectorChanged()
		this.setDecorationFromDesigner()
	end
	
	/** \brief Gui theme changed. */
	public func void onGuiThemeChanged()
		super.onGuiThemeChanged()
		this.setDecorationFromDesigner()
	end
	
	/** \brief Designer changed. */
	public func void onDesignerChanged()
		super.onDesignerChanged()
		this.setDecorationFromDesigner()
	end
	
	/** \brief Desktop size changed. */
	public func void onDesktopResized()
	end
	
	
	
	/** \brief Set decoration from designer if not protected. */
	protected func void setDecorationFromDesigner()
		if this.pProtectDecoration
			return
		end
		
		var WindowDesigner designer = this.getDesigner() cast WindowDesigner
		
		if designer != null
			this.setDecoration( designer.createDecoration() )
			
		else
			this.setDecoration( null )
		end
	end
	
	
	
	/**
	 * \brief Update canvas position and size.
	 * 
	 * The position and size of the background and content canvas are adjusted to match the
	 * position and size of the widget in the parent container. Border canvas if existing
	 * is adjusted to always fit properly around the canvas background and content.
	 * 
	 * \warning This method is also called from the constructor. Subclasses overwriting this
	 *          method have to be able to run while the subclass constructor has not yet
	 *          been processed.
	 */
	protected func void updateCanvasGeometry()
		var Border border = this.getBorder()
		var Point position = this.getPosition()
		var Point size = this.getSize()
		var BorderSize borderSize = BorderSize.new()
		
		if border != null
			borderSize = border.getBorderSize()
		end
		
		var BorderSize decorationSize
		if this.pDecoration != null
			decorationSize = this.pDecoration.getBorderSize()
			
		else
			decorationSize = BorderSize.new()
		end
		
		var Point decorationOffset = Point.new( decorationSize.getLeft(), decorationSize.getTop() )
		var Point offset = Point.new( borderSize.getLeft(), borderSize.getTop() ) + decorationOffset
		
		this.getCanvasWidget().setPosition( position - offset )
		this.getCanvasWidget().setSize( size + borderSize.getSize() + decorationSize.getSize() )
		
		this.getCanvasBackground().setPosition( offset )
		this.getCanvasBackground().setSize( size )
		
		this.getCanvasContent().setPosition( offset )
		this.getCanvasContent().setSize( size )
		
		if border != null
			border.getCanvas().setPosition( decorationOffset )
			border.resizeCanvas( this.getSize() )
		end
		
		if this.pDecoration != null
			this.pDecoration.resizeCanvas()
		end
	end
	
	
	
	/**
	 * \brief Set window to act as a non-interactive background window.
	 * 
	 * Convenience method to set canFocus and canActivate to false. In this mode the window
	 * is not activated nor brought to the front if clicked. Furthermore the window never
	 * grabs the focus. This is suitable configuration for windows acting as a background
	 * with other interactive windows placed ontop of it.
	 */
	public func void becomeBackgroundWindow()
		this.setCanActivate( false )
		this.setCanFocus( false )
	end
end
