/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */


namespace Dragengine.Gui.CanvasCreators

pin Dragengine.Gui
pin Dragengine.Scenery


/**
 * \brief Canvas creator creating a canvas with a paint only simple rectangle fill and line color.
 */
class RectangleCanvasCreator extends DefaultCanvasCreator
	private var Color pColorFill
	private var Color pColorLine
	private var float pThickness
	
	
	
	/** \brief Create canvas creator. */
	public func new()
		pColorFill = Color.white
		pThickness = 1
	end
	
	/** \brief Create canvas creator. */
	public func new(Color colorFill) this()
		setColorFill(colorFill)
	end
	
	/** \brief Create canvas creator. */
	public func new(Color colorFill, Color colorLine) this()
		setColorFill(colorFill)
		setColorLine(colorLine)
	end
	
	/** \brief Create copy of canvas creator. */
	public func new(RectangleCanvasCreator creator) super(creator)
		pColorFill = creator.pColorFill
		pColorLine = creator.pColorLine
		pThickness = creator.pThickness
	end
	
	
	
	/** \brief Fill color. */
	public func Color getColorFill()
		return pColorFill
	end
	
	/** \brief Set fill color. */
	public func void setColorFill(Color color)
		if color == null
			throw EInvalidParam.new()
		end
		pColorFill = color
	end
	
	/** \brief Line color or \em null to use fill color. */
	public func Color getColorLine()
		return pColorLine
	end
	
	/** \brief Set line color or \em null to use fill color. */
	public func void setColorLine(Color color)
		pColorLine = color
	end
	
	/** \brief Line thickness. */
	public func float getThickness()
		return pThickness
	end
	
	/** \brief Set line thickness. */
	public func void setThickness(float thickness)
		pThickness = DEMath.max(thickness, 0.0)
	end
	
	
	
	/**
	 * \brief Set parameter.
	 * 
	 * Supported parameters:
	 * | name | value | Setter |
	 * | colorFill | Color | setColorFill |
	 * | colorLine | Color | setColorLine |
	 * | thickness | float | setThickness |
	 */
	public func void setParameter(String name, Object value)
		if name.equals("colorFill")
			setColorFill(value cast Color)
			
		elif name.equals("colorLine")
			setColorLine(value cast Color)
			
		elif name.equals("thickness")
			setThickness(value cast float)
			
		else
			throw EInvalidParam.new()
		end
	end
	
	/** \brief Create copy of canvas creator. */
	public func CanvasCreator copyCanvasCreator()
		return RectangleCanvasCreator.new(this)
	end
	
	
	
	/** \brief Create canvas for a specific widget size. */
	public func Canvas createCanvas(Point size)
		var CanvasPaint canvas = CanvasPaint.new()
		canvas.setShapeType(CanvasPaintShape.rectangle)
		
		canvas.setFillColor(pColorFill)
		
		if pColorLine == null
			canvas.setThickness(0.0)
			
		else
			canvas.setThickness(pThickness)
			canvas.setLineColor(pColorLine)
		end
		
		canvas.setSize(size)
		
		return canvas
	end
end
