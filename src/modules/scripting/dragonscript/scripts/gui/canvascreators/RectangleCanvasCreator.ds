/* 
 * Drag[en]gine DragonScript Script Module
 *
 * Copyright (C) 2020, Roland Pl√ºss (roland@rptd.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */


namespace Dragengine.Gui.CanvasCreators

pin Dragengine.Gui
pin Dragengine.Scenery


/**
 * \brief Canvas creator creating a canvas with a paint only simple rectangle fill and line color.
 */
class RectangleCanvasCreator extends DefaultCanvasCreator
	private var Color pColorFill
	private var Color pColorLine
	private var float pThickness
	
	
	
	/** \brief Create canvas creator. */
	public func new()
		pColorFill = Color.white
		pThickness = 1
	end
	
	/** \brief Create canvas creator. */
	public func new(Color colorFill) this()
		setColorFill(colorFill)
	end
	
	/** \brief Create canvas creator. */
	public func new(Color colorFill, Color colorLine) this()
		setColorFill(colorFill)
		setColorLine(colorLine)
	end
	
	/** \brief Create copy of canvas creator. */
	public func new(RectangleCanvasCreator creator) super(creator)
		pColorFill = creator.pColorFill
		pColorLine = creator.pColorLine
		pThickness = creator.pThickness
	end
	
	
	
	/** \brief Fill color. */
	public func Color getColorFill()
		return pColorFill
	end
	
	/** \brief Set fill color. */
	public func void setColorFill(Color color)
		if color == null
			throw EInvalidParam.new()
		end
		pColorFill = color
	end
	
	/** \brief Line color or \em null to use fill color. */
	public func Color getColorLine()
		return pColorLine
	end
	
	/** \brief Set line color or \em null to use fill color. */
	public func void setColorLine(Color color)
		pColorLine = color
	end
	
	/** \brief Line thickness. */
	public func float getThickness()
		return pThickness
	end
	
	/** \brief Set line thickness. */
	public func void setThickness(float thickness)
		pThickness = DEMath.max(thickness, 0.0)
	end
	
	
	
	/**
	 * \brief Set parameter.
	 * 
	 * Supported parameters:
	 * | name | value | Setter |
	 * | colorFill | Color | setColorFill |
	 * | colorLine | Color | setColorLine |
	 * | thickness | float | setThickness |
	 */
	public func void setParameter(String name, Object value)
		if name.equals("colorFill")
			setColorFill(value cast Color)
			
		elif name.equals("colorLine")
			setColorLine(value cast Color)
			
		elif name.equals("thickness")
			setThickness(value cast float)
			
		else
			throw EInvalidParam.new()
		end
	end
	
	/** \brief Create copy of canvas creator. */
	public func CanvasCreator copyCanvasCreator()
		return RectangleCanvasCreator.new(this)
	end
	
	
	
	/** \brief Create canvas for a specific widget size. */
	public func Canvas createCanvas(Point size)
		var CanvasPaint canvas = CanvasPaint.new()
		canvas.setShapeType(CanvasPaintShape.rectangle)
		
		canvas.setFillColor(pColorFill)
		
		if pColorLine == null
			canvas.setThickness(0.0)
			
		else
			canvas.setThickness(pThickness)
			canvas.setLineColor(pColorLine)
		end
		
		canvas.setSize(size)
		
		return canvas
	end
end
