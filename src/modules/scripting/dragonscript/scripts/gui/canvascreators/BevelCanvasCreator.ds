/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */


namespace Dragengine.Gui.CanvasCreators

pin Dragengine.Gui
pin Dragengine.Scenery


/**
 * \brief Canvas creator creating a canvas with a paint only simple bevel border.
 */
class BevelCanvasCreator extends DefaultCanvasCreator
	private var Color pColorHighlight
	private var Color pColorShadow
	private var Color pColorBackground
	private var ColorMatrix pColorMatrix
	
	
	
	/** \brief Create canvas creator. */
	public func new()
	end
	
	/** \brief Create copy of canvas creator. */
	public func new(BevelCanvasCreator creator) super(creator)
		pColorHighlight = creator.pColorHighlight
		pColorShadow = creator.pColorShadow
		pColorBackground = creator.pColorBackground
	end
	
	
	
	/** \brief Highlight color. */
	public func Color getColorHighlight()
		return pColorHighlight
	end
	
	/** \brief Set highlight color. */
	public func void setColorHighlight(Color color)
		pColorHighlight = color
	end
	
	/** \brief Shadow color. */
	public func Color getColorShadow()
		return pColorShadow
	end
	
	/** \brief Set shadow color. */
	public func void setColorShadow(Color color)
		pColorShadow = color
	end
	
	/** \brief Background color. */
	public func Color getColorBackground()
		return pColorBackground
	end
	
	/** \brief Set background color. */
	public func void setColorBackground(Color color)
		pColorBackground = color
	end
	
	/** \brief Color matrix to use for created canvas or \em null to use none. */
	public func ColorMatrix getColorMatrix()
		return pColorMatrix
	end
	
	/** \brief Set color matrix to use for created canvas or \em null to use none. */
	public func void setColorMatrix(ColorMatrix colorMatrix)
		pColorMatrix = colorMatrix
	end
	
	
	
	/**
	 * \brief Set parameter.
	 * 
	 * Supported parameters:
	 * | name | value | Setter |
	 * | colorHighlight | Color | setColorHighlight |
	 * | colorShadow | Color | setColorShadow |
	 * | colorBackground | Color | setColorBackground |
	 * | colorMatrix | ColorMatrix | setColorMatrix |
	 */
	public func void setParameter(String name, Object value)
		if name.equals("colorHighlight") \
		/* backward compatibility */ or name.equals("colorHilight")
			setColorHighlight(value cast Color)
			
		elif name.equals("colorShadow")
			setColorShadow(value cast Color)
			
		elif name.equals("colorBackground")
			setColorBackground(value cast Color)
			
		elif name.equals("colorMatrix")
			setColorMatrix(value cast ColorMatrix)
			
		else
			throw EInvalidParam.new()
		end
	end
	
	/** \brief Create copy of canvas creator. */
	public func CanvasCreator copyCanvasCreator()
		return BevelCanvasCreator.new(this)
	end
	
	
	
	/** \brief Create canvas for a specific widget size. */
	public func Canvas createCanvas(Point size)
		var CanvasView content = CanvasView.new()
		content.setSize(size)
		
		var int bottom = size.getY() - 1
		var int right = size.getX() - 1
		var CanvasPaint canvas
		
		if pColorMatrix != null
			content.setColorTransform(pColorMatrix)
		end
		
		if pColorBackground != null
			canvas = CanvasPaint.new()
			canvas.setShapeType(CanvasPaintShape.rectangle)
			canvas.setThickness(0)
			canvas.setFillColor(pColorBackground)
			canvas.setPosition(Point.new(1, 1))
			canvas.setSize(size - Point.new(2, 2))
			canvas.setOrder(0)
			
			canvas.addPoint(Point.new())
			canvas.addPoint(Point.new(right + 1, 0))
			
			canvas.addPoint(Point.new(0, 1))
			canvas.addPoint(Point.new(0, bottom + 1))
			
			content.addCanvas(canvas)
		end
		
		if pColorHighlight != null
			canvas = CanvasPaint.new()
			canvas.setShapeType(CanvasPaintShape.lines)
			canvas.setLineColor(pColorHighlight)
			canvas.setFillColor(Color.transparent)
			canvas.setSize(size)
			canvas.setOrder(1)
			
			canvas.addPoint(Point.new())
			canvas.addPoint(Point.new(right + 1, 0))
			
			canvas.addPoint(Point.new(0, 1))
			canvas.addPoint(Point.new(0, bottom + 1))
			
			content.addCanvas(canvas)
		end
		
		if pColorShadow != null
			canvas = CanvasPaint.new()
			canvas.setShapeType(CanvasPaintShape.lines)
			canvas.setLineColor(pColorShadow)
			canvas.setFillColor(Color.transparent)
			canvas.setSize(size)
			canvas.setOrder(2.0)
			
			canvas.addPoint(Point.new(right, 1))
			canvas.addPoint(Point.new(right, bottom + 1))
			
			canvas.addPoint(Point.new(1, bottom))
			canvas.addPoint(Point.new(right, bottom))
			
			content.addCanvas(canvas)
		end
		
		return content
	end
	
	
	
	/** \deprecated Use getColorHighlight(). */
	public func Color getColorHilight()
		return getColorHighlight()
	end
	
	/** \deprecated Use setColorHighlight(Color). */
	public func void setColorHilight(Color color)
		setColorHighlight(color)
	end
end
