/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */


namespace Dragengine.Gui.CanvasCreators

pin Dragengine.Gui
pin Dragengine.Scenery


/**
 * \brief Canvas creator creating a single image canvas.
 * 
 * Creates an image canvas with an image stretched to fit the entire widget.
 */
class ImageCanvasCreator extends DefaultCanvasCreator
	/** \brief Image. */
	private var Image pImage
	
	/** \brief Color matrix to use for created canvas or \em null to use none. */
	private var ColorMatrix pColorMatrix
	
	
	
	/** \brief Create canvas creator. */
	public func new()
	end
	
	/** \brief Create canvas creator. */
	public func new( Image image )
		this.pImage = image
	end
	
	/** \brief Create copy of canvas creator. */
	public func new( ImageCanvasCreator creator ) super( creator )
		this.pImage = creator.pImage
		this.pColorMatrix = creator.pColorMatrix
	end
	
	
	
	/** \brief Image. */
	public func Image getImage()
		return this.pImage
	end
	
	/** \brief Set image. */
	public func void setImage( Image image )
		this.pImage = image
	end
	
	/** \brief Color matrix to use for created canvas or \em null to use none. */
	public func ColorMatrix getColorMatrix()
		return this.pColorMatrix
	end
	
	/** \brief Set color matrix to use for created canvas or \em null to use none. */
	public func void setColorMatrix( ColorMatrix colorMatrix )
		this.pColorMatrix = colorMatrix
	end
	
	/**
	 * \brief Set parameter.
	 * 
	 * Supported parameters:
	 * | name | value | Setter |
	 * | image | Image | setImage |
	 * | colorMatrix | ColorMatrix | setColorMatrix |
	 */
	public func void setParameter( String name, Object value )
		if name.equals( "image" )
			this.setImage( value cast Image )
			
		elif name.equals( "colorMatrix" )
			this.setColorMatrix( value cast ColorMatrix )
			
		else
			throw EInvalidParam.new()
		end
	end
	
	/** \brief Create copy of canvas creator. */
	public func CanvasCreator copyCanvasCreator()
		return ImageCanvasCreator.new( this )
	end
	
	
	
	/** \brief Create canvas for a specific widget size. */
	public func Canvas createCanvas( Point size )
		var CanvasImage canvas = CanvasImage.new()
		canvas.setImage( this.pImage )
		canvas.setSize( size )
		
		if this.pColorMatrix != null
			canvas.setColorTransform( this.pColorMatrix )
		end
		
		return canvas
	end
end
