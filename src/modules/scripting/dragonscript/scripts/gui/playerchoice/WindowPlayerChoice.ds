/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */


namespace Dragengine.Gui

pin Dragengine.ConversationSystem
pin Dragengine.Gui.Borders
pin Dragengine.Gui.Events
pin Dragengine.Gui.Layouts
pin Dragengine.Utils


/**
 * \brief Display list of choices for the player to select one from.
 * 
 * The choice is done asynchronously so the game scripts continue running. Once an option
 * is selected a user provided ActionListener is triggered. The choices compose of a text
 * and an optional image. The layout is determined by the used layout object.
 * 
 * Upon starting the player choice the window checks if the parent desktop mouse pointer is
 * visible or not.
 * 
 * Mouse pointer is typically visible on games requiring the player to interact with the
 * game by clicking on elements. In this case the player also clicks on the presented choice
 * options to select them. By using GuiTheme styling hovering can be used to aid the player.
 * 
 * Mouse pointer is typically invisible on games using a first person type interaction.
 * In this case the player chooses the presented choice options a bit differently. The mouse
 * pointer is placed on the first choice option. When moving the mouse or pressing direction
 * keys the mouse pointer is shifted over the center of the next choice option. By clicking
 * the mouse button the hovered over choice is selected. Because the mouse pointer is not
 * visible using GuiTheme selectors to do appropriate hovering is required otherwise the
 * player does not know what option is the selected one.
 * 
 * By default the window captures the input processor. Upon starting the player choice the
 * input processor on the BaseGameApp instance is stored and replaced by a widget input
 * processor for parent desktop. Upon finishing the player choice the stored input processor
 * is put back into BaseGameApp. This is required if the BaseGameApp uses a
 * BindingInputProcess otherwise the player is unable to interact and finish the choice.
 * If you are using already the desktop input processor for your game then there is no need
 * to capture the input processor. Actually it could be looking strange if doing so. In this
 * case disable the capturing. If you do not use BaseGameApp overwrite the
 * replaceInputProcessor()  and restoreInputProcessor() method.
 * 
 * This behavior can be overwritten if desired.
 * 
 * Implements ConversationPlaybackPlayerChoice so the window can be directly used
 * as player choice interface by a conversation playback if required.
 */
class WindowPlayerChoice extends Window implements ConversationPlaybackPlayerChoice
	var PanelPlayerChoice pPanelPlayerChoice
	var bool pReplaceInputProcessor
	var InputProcessor pStoredInputProcessor
	var RectArea pStoredMouseArea
	var int pMaxEntryWidth
	
	
	
	/**
	 * \brief Create player choice box.
	 * 
	 * Window is initially hidden.
	 */
	func new(Desktop desktop) super(Point.new(), desktop.getSize())
		pReplaceInputProcessor = true
		pMaxEntryWidth = desktop.getSize().getX()
		
		runWhileBlockingLayout(block
			setTitle("")
			setDesignerSelector("WindowPlayerChoice")
			setCanMove(false)
			setCanResize(false)
			setCanReorder(false)
			setCanClose(false)
			setCanMaximize(false)
			setCanMinimize(false)
			setVisible(false)
			
			pPanelPlayerChoice = createPanelPlayerChoice()
			addWidget(pPanelPlayerChoice)
		end)
	end
	
	/** \brief Dispose of window. */
	func void dispose()
		pPanelPlayerChoice = null
		super.dispose()
	end
	
	
	
	/** \brief Replace input processor while player choice is in progress. */
	func bool getReplaceInputProcessor()
		return pReplaceInputProcessor
	end
	
	/** \brief Set to replace input processor while player choice is in progress. */
	func void setReplaceInputProcessor(bool restoreInputProcessor)
		pReplaceInputProcessor = restoreInputProcessor
	end
	
	/** \brief Maximum entry width. */
	func int getMaxEntryWidth()
		return pMaxEntryWidth
	end
	
	/** \brief Set maximum entry width. */
	func void setMaxEntryWidth(int width)
		width = DEMath.max(width, 50)
		if width == pMaxEntryWidth
			return
		end
		
		pMaxEntryWidth = width
		setWidth(width)
	end
	
	
	
	/** \brief Remove all choices. */
	func void removeAllChoices()
		pPanelPlayerChoice.removeAllChoices()
	end
	
	/** \brief Add choice. */
	func void addChoice(String text, ActionListener action)
		pPanelPlayerChoice.addChoice(text, action)
	end
	
	/** \brief Add choice. */
	func void addChoice(String text, Image image, ActionListener action)
		pPanelPlayerChoice.addChoice(text, image, action)
	end
	
	/**
	 * \brief Start player choosing.
	 * 
	 * Shows the choices to the player. Overwrite if you want to do a begin choosing
	 * animation. The default implementation shows the window centered on screen,
	 * shows it and moves it to the top. If there are no options an exception is thrown.
	 */
	func void startChoosing()
		pPanelPlayerChoice.startChoosing()
		
		fitToContent()
		centerWindow()
		setVisible(true)
		moveToTop()
		
		if pReplaceInputProcessor
			replaceInputProcessor()
			replaceMouseArea()
		end
		
		hoverOverFirstOption()
	end
	
	/**
	 * \brief End player choosing.
	 * 
	 * This hides the choices. Overwrite to if you want to do an end choosing animation.
	 * The default implementation hides the window.
	 */
	func void endChoosing()
		if pReplaceInputProcessor
			restoreInputProcessor()
			restoreMouseArea()
		end
		
		setVisible(false)
		
		// reset the window size to the desired initial size. this is required since
		// PanelPlayerChoice by default uses the parent container width to figure out how wide
		// options can be to do the proper layout. if we stay at the current size the calculation
		// will produce smaller and smaller layouts until nothing works anymore
		setWidth(pMaxEntryWidth)
		
		// end choosing
		pPanelPlayerChoice.endChoosing()
	end
	
	
	
	/** \brief Stored input processor or \em null. */
	protected func InputProcessor getStoredInputProcessor()
		return pStoredInputProcessor
	end
	
	/** \brief Set stored input processor or \em null. */
	protected func void setStoredInputProcessor(InputProcessor inputProcessor)
		pStoredInputProcessor = inputProcessor
	end
	
	/** \brief Stored mouse area or \em null. */
	protected func RectArea getStoredMouseArea()
		return pStoredMouseArea
	end
	
	/** \brief Set stored mouse area or \em null. */
	func void setStoredMouseArea(RectArea mouseArea)
		pStoredMouseArea = mouseArea
	end
	
	
	
	/** \brief Create player choice panel. */
	protected func PanelPlayerChoice createPanelPlayerChoice()
		return PanelPlayerChoice.new()
	end
	
	/**
	 * \brief Store BaseGameApp input processor and replace it with WidgetInputProcessor for desktop.
	 */
	protected func void replaceInputProcessor()
		pStoredInputProcessor = BaseGameApp.getApp().getInputProcessor()
		BaseGameApp.getApp().setInputProcessorDesktop()
	end
	
	/**
	 * \brief Restore input processor.
	 * 
	 * Replaces input processor in BaseGameApp with the previously stored input processor.
	 */
	protected func void restoreInputProcessor()
		if pStoredInputProcessor == null
			return
		end
		
		BaseGameApp.getApp().setInputProcessor(pStoredInputProcessor)
		pStoredInputProcessor = null
	end
	
	/**
	 * \brief Store mouse area of parent desktop and replace it with window boundary.
	 */
	protected func void replaceMouseArea()
		var Desktop desktop = getDesktop()
		pStoredMouseArea = desktop.getMouseArea()
		desktop.setMouseArea(getBoundary())
	end
	
	/**
	 * \brief Restore mouse area.
	 * 
	 * Replaces mouse area in parent desktop with stored mouse area.
	 */
	protected func void restoreMouseArea()
		if pStoredMouseArea == null
			return
		end
		
		getDesktop().setMouseArea(pStoredMouseArea)
		pStoredMouseArea = null
	end
	
	/** \brief Move mouse cursor to hover over first option. */
	protected func void hoverOverFirstOption()
		var Desktop desktop = getDesktop()
		var Widget widget = findFocusableWidget()
		widget.grabFocus()
		desktop.warpCenterMouseIn(widget)
	end
end
