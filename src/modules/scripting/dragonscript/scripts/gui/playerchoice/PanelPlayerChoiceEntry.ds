/* 
 * Drag[en]gine DragonScript Script Module
 *
 * Copyright (C) 2020, Roland Pl√ºss (roland@rptd.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */


namespace Dragengine.Gui

pin Dragengine.Gui.Borders
pin Dragengine.Gui.Events
pin Dragengine.Gui.Layouts
pin Dragengine.Utils


/**
 * \brief Simple text to be used as option in a player choice box.
 * 
 * Changes the background and text color when the mouse enters and leaves the widget.
 * 
 * PanelPlayerChoiceEntry is a Panel containing a Label and DisplayImage widget using a
 * CentrizedBoxLayout. The DisplayImage is created only if an image is provided in the
 * constructor.
 */
class PanelPlayerChoiceEntry extends Panel
	/** \brief Action listener to use if the entry is selected. */
	private var ActionListener pAction
	
	/** \brief Label. */
	private var Label pLabel
	
	/** \brief Image. */
	private var DisplayImage pImage
	
	
	
	/** \brief Create player choice option. */
	public func new( String text, ActionListener action ) this( text, null, action )
	end
	
	/** \brief Create player choice option. */
	public func new( String text, Image image, ActionListener action )
		if action == null
			throw EInvalidParam.new()
		end
		
		this.runWhileBlockingLayout( block
			this.setLayout( CentrizedBoxLayout.new( LayoutAxis.x, 5 ) )
			this.setCanFocus( true )
			this.setStateChangeNotifyChildren( true )
			
			if image != null
				this.pImage = DisplayImage.new( image, RepeatMode.stretch )
				this.addWidget( this.pImage )
			end
			
			this.pLabel = Label.new( text )
			this.pLabel.setWordWrap( true )
			this.addWidget( this.pLabel )
			
			this.setDesignerSelector( "PlayerChoiceEntry" )
		end )
		
		this.pAction = action
	end
	
	/** \brief Dispose of widget. */
	public func void dispose()
		super.dispose()
		this.pImage = null
		this.pLabel = null
		this.pAction = null
	end
	
	
	
	/** \brief Select action. */
	public func ActionListener getAction()
		return this.pAction
	end
	
	/** \brief Label widget. */
	public func Label getLabel()
		return this.pLabel
	end
	
	/** \brief Display image widget or null if no image has been used in the constructor. */
	public func DisplayImage getImage()
		return this.pImage
	end
	
	
	
	/** \brief Mouse button pressed. */
	public func void onButtonPress( MouseEvent event )
		super.onButtonPress( event )
		this.pAction.onAction( ActionEvent.new( this, ActionEvent.idAction, 0 ) )
	end
	
	
	
	/**
	 * Overrides Widget.onDesignerSelectorChanged(). Sets designer selector of label to
	 * "Label.{selector}" and display image to "Image.{selector}".
	 */
	public func void onDesignerSelectorChanged()
		var String selector = this.getDesignerSelector()
		
		this.pLabel.setDesignerSelector( "Label." + selector )
		
		if this.pImage != null
			this.pImage.setDesignerSelector( "Image." + selector )
		end
	end
end
