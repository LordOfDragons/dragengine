/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */


namespace Dragengine.Gui

pin Dragengine.ConversationSystem
pin Dragengine.Gui.Borders
pin Dragengine.Gui.Events
pin Dragengine.Gui.Layouts
pin Dragengine.Utils


/**
 * \brief Display list of choices for the player to select one from.
 * 
 * The choice is done asynchronously so the game scripts continue running. Once an
 * option is selected a user provided ActionListener is triggered. The choices
 * compose of a text and an optional image. The layout is determined by the used
 * layout object.
 * 
 * Implements ConversationPlaybackPlayerChoice so the panel can be directly used
 * as player choice interface by a conversation playback if required.
 * 
 * The panel can be styled using selector "Panel.PlayerChoice". The centrized entries
 * panel can be styled using "Panel.PlayerChoiceEntries"
 */
class PanelPlayerChoice extends Panel implements ConversationPlaybackPlayerChoice
	var Panel pPanelEntries
	
	
	
	/**
	 * \brief Create player choice panel.
	 * 
	 * Panel is initially hidden.
	 */
	func new()
		setLayout(CentrizedBoxLayout.new(LayoutAxis.y, 0))
		setDesignerSelector("Panel.PlayerChoice")
		setVisible(false)
		
		pPanelEntries = Panel.new()
		pPanelEntries.setLayout(FlowLayout.new(LayoutAxis.y, 2))
		pPanelEntries.setDesignerSelector("Panel.PlayerChoiceEntries")
		addWidget(pPanelEntries)
	end
	
	/** \brief Dispose of widget. */
	func void dispose()
		pPanelEntries = null
		super.dispose()
	end
	
	
	
	/** \brief Remove all choices. */
	func void removeAllChoices()
		pPanelEntries.removeAllWidgets()
	end
	
	/** \brief Add choice. */
	func void addChoice(String text, ActionListener action)
		addChoice(text, null, action)
	end
	
	/** \brief Add choice. */
	func void addChoice(String text, Image image, ActionListener action)
		if action == null
			throw EInvalidParam.new()
		end
		pPanelEntries.addWidget(createOptionWidget(text, image, action))
	end
	
	
	
	/**
	 * \brief Start player choosing.
	 * 
	 * This shows the choices to the player. Overwrite if you want to do a begin
	 * choosing animation. The default implementation shows the panel. If there
	 * are no options an exception is thrown.
	 */
	func void startChoosing()
		if getWidgetCount() == 0
			throw EInvalidParam.new()
		end
		setVisible(true)
	end
	
	/**
	 * \brief End player choosing.
	 * 
	 * This hides the choices. Overwrite to if you want to do an end choosing
	 * animation. The default implementation hides the panel.
	 */
	func void endChoosing()
		setVisible(false)
	end
	
	
	
	/**
	 * \brief Create option widget.
	 * \version 1.5
	 * 
	 * Default implementation creates instance of PanelPlayerChoiceEntry.
	 */
	protected func Widget createOptionWidget(String text, Image image, ActionListener action)
		var PanelPlayerChoiceEntry entry = PanelPlayerChoiceEntry.new(text, image, action)
		entry.getLabel().setMaximalWidth(getParent().getContainerWidth())
		return entry
	end
end
