/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

namespace Dragengine.Gui



/**
 * \brief Drag and drop data type list.
 */
class DNDTypeList
	/** \brief List of types. */
	private var Array pTypes
	
	
	
	/** \brief Create drag and drop data type list. */
	public func new()
		this.pTypes = Array.new()
	end
	
	/** \brief Create copy of a drag and drop data type list. */
	public func new( DNDTypeList list )
		this.pTypes = Array.new( list.pTypes )
	end
	
	
	
	/** \brief Number of data types. */
	public func int getCount()
		return this.pTypes.getCount()
	end
	
	/** \brief Type at index. */
	public func String getAt( int index )
		return this.pTypes.getAt( index ) cast String
	end
	
	/** \brief Type is present. */
	public func bool has( String type )
		return this.pTypes.has( type )
	end
	
	/** \brief Add type if absent. */
	public func void add( String type )
		if type == null
			throw EInvalidParam.new()
		end
		
		if not this.pTypes.has( type )
			this.pTypes.add( type )
		end
	end
	
	/** \brief Remove type if present. */
	public func void remove( String type )
		if this.pTypes.has( type )
			this.pTypes.remove( type )
		end
	end
	
	/** \brief Remove all types. */
	public func void removeAll()
		this.pTypes.removeAll()
	end
	
	/** \brief Visit types with a block. */
	public func void forEach( Block ablock )
		this.pTypes.forEach( ablock )
	end
end
