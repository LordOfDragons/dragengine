/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

namespace Dragengine.Gui

pin Dragengine.Gui.Events
pin Dragengine.Utils



/**
 * \brief Default implementation of DragAndDrop.
 * 
 * Provides support to do conveniently drag and drop operations. Subclass to use.
 * Call beginDrag to start a drag and drop operation with a specific mouse button to
 * track to end the drag operation. This grabs the mouse and keyboard on the widget
 * used during constructing the object and adds a temporary mouse listener to track
 * events. While tracking events the drop target can alter the can drop status.
 * To react to these changes overwrite onCanDropChanged() and check getCanDrop().
 * Upon receiving mouse button release event matching the requested mouse button
 * endDrag() is called. Drag can be cancelled any time by calling endDrag with abort
 * set to true. The endDrag() call removes the temporary mouse listener and notifies
 * the drop target if getCanDrop() is true. To react to this event overwrite
 * onDragFinished(). The drop target then calls getDragDataAs() to retrieve the data.
 * Overwrite getDragDataAs() to provide the data in the desired format if possible.
 * Once processed the drop target calls dropDone() to indicate drop having finished.
 * This can be any time later in case the drop target needs a longer time to finish.
 * Once dropDone() is called onDropFinished() is called which marks the end of the
 * drag and drop operation.
 * 
 * \todo
 * 
 * Also add support to manage an optional semi-transparent WindowPopup widget with a drag
 * image inside. If used the window has to be placed at the right offset underneath the
 * parent desktop mouse pointer. The window position is update when mouse events are
 * received. This replaces the removed DragMousePointer class.
 */
class DefaultDragAndDrop implements DragAndDrop
	/** \brief Drag processing listener. */
	protected class TrackDragListener extends DefaultMouseListener
		private var DefaultDragAndDrop pOwner
		private var int pMouseButton
		
		public func new( DefaultDragAndDrop owner, int mouseButton )
			if owner == null
				throw ENullPointer.new( "owner" )
			end
			if mouseButton < 0
				throw EInvalidParam.new( "mouseButton < 0" )
			end
			
			this.pOwner = owner
			this.pMouseButton = mouseButton
		end
		
		public func void onButtonRelease( MouseEvent event )
			if event.getButton() == this.pMouseButton
				this.pMouseButton = -1
				this.pOwner.endDrag( false )
			end
		end
		
		public func void onMouseMove( MouseEvent event )
			if this.pMouseButton != -1
				this.pOwner.mouseMove( event )
			end
		end
	end
	
	
	
	/** \brief Source widget. */
	private var Widget pSource
	
	/** \brief Desktop. */
	private var Desktop pDesktop
	
	/** \brief Target widget. */
	private var Widget pTarget
	
	/** \brief List of supported data types. */
	private var DNDTypeList pDataTypes
	
	/** \brief Drop status. */
	private var bool pDropStatus
	
	/** \brief Can drop status of target. */
	private var bool pCanDrop
	
	/** \brief Drag position. */
	private var Point pDragPosition
	
	/** \brief Track listener. */
	private var TrackDragListener pTrackListener
	
	
	
	/** \brief Create default drag and drop. */
	public func new( Widget source )
		if source == null
			throw ENullPointer.new( "source" )
		end
		this.pSource = source
		
		this.pDesktop = source.getDesktop()
		if this.pDesktop == null
			throw ENullPointer.new( "source desktop" )
		end
		
		this.pDataTypes = DNDTypeList.new()
		this.pDragPosition = Point.new()
	end
	
	
	
	/** \brief Drag source. */
	public func Widget getDragSource()
		return this.pSource
	end
	
	/** \brief Current target. */
	public func Widget getDragTarget()
		return this.pTarget
	end
	
	/** \brief Set list of supported data types. */
	public func void setDataTypes( DNDTypeList list )
		if list == null
			throw ENullPointer.new( "list" )
		end
		
		this.pDataTypes = list
	end
	
	/** \brief Drop action is valid on the target. */
	public func bool getCanDrop()
		return this.pCanDrop
	end
	
	/** \brief Set if dropping is possible at the current location. */
	public func void setCanDrop( bool canDrop )
		if canDrop == this.pCanDrop
			return
		end
		
		this.pCanDrop = canDrop
		
		this.onCanDropChanged()
	end
	
	/**
	 * \brief List of supported data types by the drag source.
	 * 
	 * Do not modify this unless you are the owner. If you need to modify this
	 * list create a copy first.
	 */
	public func DNDTypeList getDataTypes()
		return this.pDataTypes
	end
	
	/** \brief Drag source supports a type. */
	public func bool supportsDataType( String type )
		return this.pDataTypes.has( type )
	end
	
	/** \brief Add supported drag type. */
	public func void addSupportedDataType( String type )
		this.pDataTypes.add( type )
	end
	
	/**
	 * \brief Drag data in a specific format or \em null if not supported.
	 * 
	 * Overwrite in subclass to provided data in the appropriate format if possible.
	 */
	public func Object getDragDataAs( String type )
		return null
	end
	
	/**
	 * \brief Drop has been processed.
	 * 
	 * Called by the drop target to signal it has finished processing the data.
	 * The drag and drop operation is finished after this call.
	 */
	public func void dropDone( bool success )
		this.pDropStatus = success
		
		this.onDropFinished()
	end
	
	
	
	/**
	 * \brief Begin drag and drop operation.
	 * 
	 * Indicate mouse button tracked to end drag operation.
	 */
	public func void beginDrag( int mouseButton )
		if mouseButton < 0
			throw EInvalidParam.new( "mouseButton < 0" )
		end
		if this.pTrackListener != null
			throw EInvalidParam.new( "already dragging" )
		end
		
		this.pTarget = null
		this.pCanDrop = false
		this.pDropStatus = false
		this.pDragPosition = Point.new()
		
		this.pSource.captureMouse()
		
		this.pTrackListener = TrackDragListener.new( this, mouseButton )
		
		// usually beginDrag() is called from inside a MouseListener. it is not allowed
		// to modify listeners while listeners are processed. delay it until the next frame
		TimerBlock.new( 0, false, block
			this.pSource.addMouseListener( this.pTrackListener )
		end )
	end
	
	/**
	 * \brief Process mouse move event.
	 * 
	 * Called by TrackDragListener.
	 */
	public func void mouseMove( MouseEvent event )
		if this.pTrackListener == null
			return
		end
		
		this.pDragPosition = this.pSource.getScreenPosition() + event.getPosition()
		
		var Widget target = this.pDesktop.getWidgetAt( this.pDragPosition )
		
		if target == this.pTarget
			if this.pTarget != null
				this.pTarget.sendEvent( DragEvent.new( this.pTarget, DragEvent.idDragOver, this, 0, \
					this.pDragPosition - this.pTarget.getScreenPosition() ) )
			end
			
		else
			if this.pTarget != null
				this.pTarget.sendEvent( DragEvent.new( this.pTarget, DragEvent.idDragLeave, this, 0 ) )
			end
			
			this.pTarget = target
			this.setCanDrop( false )
			
			if target != null
				target.sendEvent( DragEvent.new( target, DragEvent.idDragEnter, this, 0, \
					this.pDragPosition - this.pTarget.getScreenPosition() ) )
			end
			
			this.onDropTargetChanged()
		end
	end
	
	/**
	 * \brief End drag and drop operation.
	 * 
	 * Called by TrackDragListener.
	 */
	public func void endDrag( bool abord )
		if this.pTrackListener == null
			return
		end
		
		this.pDropStatus = false
		
		if not abord and this.pCanDrop and this.pTarget != null
			this.pTarget.sendEvent( DragEvent.new( this.pTarget, DragEvent.idDragDrop, this, 0, \
				this.pDragPosition - this.pTarget.getScreenPosition() ) )
		end
		
		this.pSource.releaseMouse()
		
		// delay removing mouse listener to next frame update to not remove from inside listener
		var TrackDragListener trackListener = this.pTrackListener
		this.pTrackListener = null
		
		TimerBlock.new( 0, false, block
			this.pSource.removeMouseListener( trackListener )
		end )
		
		this.onDragFinished()
	end
	
	/**
	 * \brief Drop target changed.
	 */
	protected func void onDropTargetChanged()
	end
	
	/**
	 * \brief Can drop changed.
	 */
	protected func void onCanDropChanged()
	end
	
	/**
	 * \brief Drag finished.
	 */
	protected func void onDragFinished()
	end
	
	/**
	 * \brief Drop finished.
	 */
	protected func void onDropFinished()
	end
end
