/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */


namespace Dragengine.Gui

pin Dragengine.Gui.Events



/**
 * \brief Default implementation of ComboBoxEditor using a TextField.
 * 
 * Uses Object.toString() of the value object as text to edit. Returns
 * A String object if asked for the value.
 * 
 * Supports designing using designer selector "TextField.ComboBoxEditor".
 */
class DefaultComboBoxEditor extends TextField implements ComboBoxEditor
	var Array pEditorActionListeners
	
	
	
	/** \brief Create default combo box editor. */
	func new() this(DefaultTextModel.new())
	end
	
	/** \brief Create default combo box editor. */
	func new(TextModel model) super(model)
		pEditorActionListeners = Array.new()
		setDesignerSelector(getDesignerSelector() + ".ComboBoxEditor")
	end
	
	/** \brief Create default combo box editor. */
	func new(TextModel model, int displayCharCount) this(model)
		setDisplayCharCount(displayCharCount)
	end
	
	/** \brief Dispose of widget. */
	func void dispose()
		// it is possible the dispose is triggered due to an action listener call.
		// if Array.removeAll() is called in this case an exception is thrown due to
		// modifying the array while iterating over it. dropping the array is enough
		pEditorActionListeners = null
		super.dispose()
	end
	
	
	
	/** \brief Get widget to use for editing. */
	func Widget getWidget()
		return this
	end
	
	/**
	 * \brief Get editor value.
	 * \details The returned object can be the one previously set by
	 *          setEditorValue() if unchanged or a new object if changed.
	 */
	func Object getEditorValue()
		return getModel().getText()
	end
	
	/**
	 * \brief Set editor value to object or \em null to clear.
	 * \details \em object is garanteed to not be modified by the editor.
	 */
	func void setEditorValue(Object object)
		if object == null
			getModel().setText("")
			
		else
			getModel().setText(object.toString())
		end
		
		fireAction(0)
	end
	
	/**
	 * \brief Add action listener.
	 * \details Action listener is called whenever the edited object changes.
	 * \note This shadows TextWidget.addActionListener(). To use it use addTextActionListener().
	 */
	func void addActionListener(ActionListener listener)
		pEditorActionListeners.add(listener)
	end
	
	/**
	 * \brief Remove action listener.
	 * \note This shadows TextWidget.removeActionListener(). To use it use removeTextActionListener().
	 */
	func void removeActionListener(ActionListener listener)
		pEditorActionListeners.remove(listener)
	end
	
	/**
	 * \brief Add text widget action listener.
	 * \version 1.8
	 * \note Forwards to shadowed TextWidget.addActionListener().
	 */
	func void addTextActionListener(ActionListener listener)
		super.addActionListener(listener)
	end
	
	/**
	 * \brief Remove text widget action listener.
	 * \version 1.8
	 * \note Forwards to shadowed TextWidget.removeActionListener().
	 */
	func void removeTextActionListener(ActionListener listener)
		super.removeActionListener(listener)
	end
	
	/**
	 * \brief Start editing.
	 * \details Typically this selects the entire text or otherwise prepare
	 *          editor for directly manipulating the set value. There is no
	 *          stop editing call since the widget is hidden in this case.
	 */
	func void startEditing()
		setCursorPosition(getModel().getText().getLength())
		setSelectionAll()
		grabFocus()
	end
	
	/**
	 * \brief Get parent ComboBox.
	 * \version 1.17
	 */
	func ComboBox getComboBox()
		var Container container = getParent()
		while container != null
			if container castable ComboBox
				return container cast ComboBox
			end
			container = container.getParent()
		end
		return null
	end
	
	
	
	/** \brief Text string has changed. */
	func void textChanged(TextModel textModel)
		super.textChanged(textModel)
		
		var ActionEvent event = ActionEvent.new(this, ActionEvent.idAction, 0)
		
		pEditorActionListeners.forEach(block ActionListener each
			each.onAction(event)
		end)
	end
	
	
	
	/** \brief Key pressed. */
	func void onKeyPress(KeyEvent event)
		select event.getKeyCode()
		case InputEventKey.arrowDown
			var ComboBox comboBox = getComboBox()
			if comboBox != null
				comboBox.onArrowDown()
			end
			
		case InputEventKey.arrowUp
			var ComboBox comboBox = getComboBox()
			if comboBox != null
				comboBox.onArrowUp()
			end
			
		case InputEventKey.escape
			var ComboBox comboBox = getComboBox()
			if comboBox != null
				comboBox.rollUp()
			end
			
		else
			super.onKeyPress(event)
		end
	end
end
