/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */


namespace Dragengine.Gui

pin Dragengine.Gui.Events
pin Dragengine.Scenery



/**
 * \brief Widget rendering world using camera.
 */
class WorldRenderer extends Widget
	/** \brief Render world canvas. */
	private var CanvasRenderWorld pCanvasRenderWorld
	
	/** \brief Minimum renderer size or null if not set. */
	private var Point pRenderMinimumSize
	
	
	
	/** \brief Create world renderer. */
	public func new()
		pCanvasRenderWorld = CanvasRenderWorld.new()
		getCanvasContent().addCanvas(pCanvasRenderWorld)
		setDesignerSelector("WorldRenderer")
	end
	
	/** \brief Create world renderer. */
	public func new(int x, int y, int width, int height) super(x, y, width, height) 
		pRenderMinimumSize = Point.new(width, height)
		
		pCanvasRenderWorld = CanvasRenderWorld.new()
		getCanvasContent().addCanvas(pCanvasRenderWorld)
		
		updateCanvasRenderWorld()
		setDesignerSelector("WorldRenderer")
	end
	
	
	
	/** \brief Camera. */
	public func Camera getCamera()
		return pCanvasRenderWorld.getCamera()
	end
	
	/** \brief Set camera. */
	public func void setCamera(Camera camera)
		pCanvasRenderWorld.setCamera(camera)
	end
	
	/** \brief Minimum renderer size or null if not set. */
	public func Point getRenderMinimumSize()
		return pRenderMinimumSize
	end
	
	/** \brief Set minimum renderer size or null if not set. */
	public func void setRenderMinimumSize(Point size)
		if size == null
			if pRenderMinimumSize == null
				return
			end
			pRenderMinimumSize = size
			
		else
			if size.equals(pRenderMinimumSize)
				return
			end
			pRenderMinimumSize = Point.new().largest(size)
		end
		
		layoutParent()
	end
	
	
	
	/** \brief Project point from 3d world. */
	public func Point project(DVector position)
		var BorderSize padding = getPadding()
		return Point.new(padding.getLeft(), padding.getTop()) + pCanvasRenderWorld.project(position)
	end
	
	/** \brief Back project position into 3d world. */
	public func Vector backProject(Point position)
		var BorderSize padding = getPadding()
		return pCanvasRenderWorld.backProject(position - Point.new(padding.getLeft(), padding.getTop()))
	end
	
	
	
	/** \brief Minimal size of widget. */
	public func Point getMinimumSize()
		if isMinimumSizeSet()
			return super.getMinimumSize()
		end
		
		if pRenderMinimumSize != null
			return getPadding().getSize() + pRenderMinimumSize
			
		else
			return super.getMinimumSize()
		end
	end
	
	
	
	/** \brief State changed. */
	public func void onStateChanged(StateChangeEvent event)
		super.onStateChanged(event)
		updateCanvasRenderWorld()
	end
	
	/** \brief Padding changed. */
	public func void onPaddingChanged()
		updateCanvasRenderWorld()
	end
	
	/** \brief Size changed. */
	public func void onResize(WidgetEvent event)
		super.onResize(event)
		updateCanvasRenderWorld()
	end
	
	
	
	/** \brief Update canvas render world. */
	protected func void updateCanvasRenderWorld()
		var BorderSize padding = getPadding()
		pCanvasRenderWorld.setPosition(Point.new(padding.getLeft(), padding.getTop()))
		pCanvasRenderWorld.setSize(Point.new().largest(getSize() - padding.getSize()))
	end
end
