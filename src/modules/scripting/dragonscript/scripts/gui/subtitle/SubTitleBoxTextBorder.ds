/* 
 * Drag[en]gine DragonScript Script Module
 *
 * Copyright (C) 2020, Roland PlÃ¼ss (roland@rptd.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */


namespace Dragengine.Gui

pin Dragengine.Gui.Borders
pin Dragengine.Gui.Events
pin Dragengine.Gui.Layouts
pin Dragengine.Utils.StyledText.Definition
pin Dragengine.LoadSave


/**
 * \brief Sub title box text using border layout for name, text and portrait.
 * 
 * Displays a styled text and optionally name and portrait image or video. The box can be
 * designed with selector "SubTitleBoxText".
 * 
 * The name label can be designed with selector "Label.SubTitleBoxText.Name".
 * The text part can be designed with selector "Label.SubTitleBoxText.Text".
 * If StyledTextDefinition is used the label designers are ignored.
 * 
 * The portrait image can be designed with selector "Image.SubTitleBoxText.Portrait".
 * The portrait video can be designed with selector "Video.SubTitleBoxText.Portrait".
 * 
 * The most simple use of SubTitleBoxText is by using the designers mentioned above.
 * This uses the same design for all text.
 * 
 * For situation specific design setDesignerSelector can be used to assign a different
 * selector for different text.
 * 
 * For the most customization support use StyledTextDefinition which give full control over
 * the text combined with setDesignerSelector for desigining the portrait and panel itself.
 * 
 * The placement of the name text can be left or above the text as well as above or below
 * the portrait if present.
 */
class SubTitleBoxTextBorder extends Panel implements Persistable, SubTitleBoxText
	/** \brief Factory for loading actor actions. */
	public class Factory implements PersistencyFactory
		public static fixed var String NAME = "SubTitleBoxTextBorder"
		
		public func new()
		end
		
		public func Persistable readObjectFromFile(PersistencyEnvironment env, FileReader reader)
			return SubTitleBoxTextBorder.readFromFile(this, env, reader)
		end
		
		public static func void registerFactory(Persistency persistency)
			persistency.addFactory(NAME, Factory.new())
		end
		
		/**
		 * \brief Create SubTitleBoxTextBorder.
		 * \version 1.16
		 * 
		 * For use by subclass during loading.
		 */
		public func SubTitleBoxTextBorder createSubtitleBoxText(String text, String name,\
		StyledTextDefinition styledText, StyledTextDefinition styledName, Image portraitImage,\
		Video portraitVideo, Placement placement)
			return SubTitleBoxTextBorder.new(text, name, styledText, styledName,\
				portraitImage, portraitVideo, placement)
		end
	end
	
	/** \brief Hide timer. */
	protected class HideTimer extends Timer
		protected var SubTitleBoxTextBorder pText
		
		public func new(SubTitleBoxTextBorder text, float timeout) super(timeout, false)
			pText = text
		end
		
		public func void fire()
			pText.hideTimerElapsed()
		end
	end
	
	/** \brief Placement. */
	public enum Placement
		/** \brief Place name left of text above portrait. */
		leftAbove
		
		/** \brief Place name left of text below portrait. */
		leftBelow
		
		/** \brief Place name above text. */
		above
	end
	
	
	
	protected var Label pLabelName
	protected var Label pLabelText
	protected var Placement pPlacement
	protected var DisplayStyledText pStyledName
	protected var DisplayStyledText pStyledText
	protected var DisplayImage pImagePortrait
	protected var DisplayVideo pVideoPortrait
	protected var HideTimer pHideTimer
	
	
	
	/**
	 * \brief Create sub title box text.
	 * 
	 * Text is mandatory. Name and portrait are optional and can be set to \em null. If portrait
	 * is used either \em portraitImage or \em portraitVideo has to be set. The placement of
	 * the name is set using \em placement. Use designer selectors to style the elements.
	 * If \em styledName aor \em styledText is used designer selectors have no effect on \
	 * name or text.
	 * 
	 * \param text Simple text. Ignored if styledText is used.
	 * \param name Name or \em null to not display a name.
	 * \param styledText Styled text or \em null to use simple text.
	 * \param styledName Styled name or \em null to use simple name.
	 * \param portraitImage Portrait image or \em null if not used.
	 * \param portraitVideo Portrait video or \em null if not used.
	 * \param placement Name placement from NAME_*.
	 */
	public func new(String text, String name, StyledTextDefinition styledText, \
	StyledTextDefinition styledName, Image portraitImage, Video portraitVideo, \
	Placement placement)
		if text == null and styledText == null
			throw EInvalidParam.new()
		end
		
		pPlacement = placement
		
		// create the individual element. they will be added to the correct place below
		var Widget widgetName, widgetText, widgetPortrait
		
		if styledName != null
			pStyledName = DisplayStyledText.new()
			pStyledName.setPagedMode(false)
			pStyledName.setStyledTextDefinition(styledName)
			widgetName = pStyledName
			
		elif name != null
			pLabelName = Label.new(name)
			widgetName = pLabelName
		end
		
		if styledText != null
			pStyledText = DisplayStyledText.new()
			pStyledText.setPagedMode(false)
			pStyledText.setStyledTextDefinition(styledText)
			widgetText = pStyledText
			
		else
			pLabelText = Label.new(text)
			pLabelText.setWordWrap(true)
			widgetText = pLabelText
		end
		
		if portraitVideo != null
			pVideoPortrait = DisplayVideo.new(portraitVideo)
			pVideoPortrait.play()
			widgetPortrait = pVideoPortrait
			
		elif portraitImage != null
			pImagePortrait = DisplayImage.new(portraitImage)
			widgetPortrait = pImagePortrait
		end
		
		// build layout adding the elements in the right place
		runWhileBlockingLayout(block
			// why no FlowLayout.new(LayoutAxis.x, padding, FlowLayout.Stretch.last) used here?
			// FlowLayout with X_AXIS uses getMinimumSizeForHeight on children. Both Label and
			// DisplayStyledText return in this case the size for a single line even if they
			// would wrap around. we need thus a layout here which uses getMinimumSizeForWidth
			// on all children to work properly. BorderLayout is a candidate for  Another
			// solution would be FormLayout but sub titles have at most 3 elements arranged
			// in a border shape. BorderLayout here is the best solution
			setLayout(BorderLayout.new())
			
			var Panel sidePanel = Panel.new()
			sidePanel.setLayout(CentrizedBoxLayout.new(LayoutAxis.y))
			addWidget(sidePanel, BorderLayout.Area.left)
			
			select placement
			case Placement.leftBelow
				if widgetPortrait != null
					sidePanel.addWidget(widgetPortrait)
				end
				if widgetName != null
					sidePanel.addWidget(widgetName)
				end
				
			case Placement.leftAbove
				if widgetName != null
					sidePanel.addWidget(widgetName)
				end
				if widgetPortrait != null
					sidePanel.addWidget(widgetPortrait)
				end
				
			case Placement.above
				if widgetPortrait != null
					sidePanel.addWidget(widgetPortrait)
				end
				if widgetName != null
					addWidget(widgetName, BorderLayout.Area.top)
				end
			end
			
			addWidget(widgetText, BorderLayout.Area.content)
			
			setStateChangeNotifyChildren(true)
			setDesignerSelector("SubTitleBoxText")
		end)
	end
	
	/** \brief Read action from file. */
	public static func SubTitleBoxTextBorder readFromFile(PersistencyEnvironment env, FileReader reader)
		return readFromFile(null, env, reader)
	end
	
	/**
	 * \brief Read action from file.
	 * \version 1.16
	 */
	public static func SubTitleBoxTextBorder readFromFile(Factory factory,\
	PersistencyEnvironment env, FileReader reader)
		select reader.readByte() // version
		case 0
			// read content to know what kind of SubTitleBoxTextBorder to create
			var String labelName = env.readString8OrNullIfEmpty(reader)
			var String labelText = env.readString16OrNullIfEmpty(reader)
			var String pathImagePortrait = env.readString16OrNullIfEmpty(reader)
			var String pathVideoPortrait = env.readString16OrNullIfEmpty(reader)
			var SubTitleBoxTextBorder.Placement placement = \
				SubTitleBoxTextBorder.Placement.withOrder(reader.readByte())
			
			// TODO how to read styled text?
			var StyledTextDefinition styledText
			var StyledTextDefinition styledName
			
			var String designerSelector = reader.readString8()
			
			var float triggerTime = reader.readFloat()
			var float elapsedTime = reader.readFloat()
			
			// create SubTitleBoxTextBorder the right way
			var Image imagePortrait
			if pathImagePortrait != null
				imagePortrait = Image.new(pathImagePortrait)
			end
			
			var Video videoPortrait
			if pathVideoPortrait != null
				videoPortrait = Video.new(pathVideoPortrait)
			end
			
			var SubTitleBoxTextBorder stbt
			if factory != null
				stbt = factory.createSubtitleBoxText(labelText, labelName, \
					styledText, styledName, imagePortrait, videoPortrait, placement)
				
			else
				stbt = SubTitleBoxTextBorder.new(labelText, labelName, \
					styledText, styledName, imagePortrait, videoPortrait, placement)
			end
			
			stbt.setDesignerSelector(designerSelector)
			
			if triggerTime > 0
				stbt.pHideTimer = HideTimer.new(stbt, triggerTime)
				stbt.pHideTimer.setElapsedTime(elapsedTime)
			end
			
			return stbt
			
		else
			throw EInvalidParam.new("unsupported version")
		end
	end
	
	/** \brief Dispose of widget. */
	public func void dispose()
		if pHideTimer != null
			pHideTimer.giveUp()
			pHideTimer = null
		end
		
		pStyledText = null
		pStyledName = null
		pLabelText = null
		pLabelName = null
		pImagePortrait = null
		pVideoPortrait = null
		
		super.dispose()
	end
	
	
	
	/** \brief Name label or \em null. */
	public func Label getLabelName()
		return pLabelName
	end
	
	/** \brief Text label or \em null. */
	public func Label getLabelText()
		return pLabelText
	end
	
	/** \brief Placement. */
	public func Placement getPlacement()
		return pPlacement
	end
	
	/** \brief Name styled text or \em null. */
	public func DisplayStyledText getStyledName()
		return pStyledName
	end
	
	/** \brief Text styled text or \em null. */
	public func DisplayStyledText getStyledText()
		return pStyledText
	end
	
	/** \brief Portait image or \em null. */
	public func DisplayImage getImagePortrait()
		return pImagePortrait
	end
	
	/** \brief Video portrait or \em null. */
	public func DisplayVideo getVideoPortrait()
		return pVideoPortrait
	end
	
	
	/** \brief Hide after timer elapses. */
	public func void hideSubtitleAfter(float seconds)
		if pHideTimer != null
			pHideTimer.giveUp()
			pHideTimer = null
		end
		
		pHideTimer = HideTimer.new(this, seconds)
	end
	
	/** \brief Hide now. */
	public func void hideSubtitleNow()
		safeDispose()
	end
	
	/**
	 * \brief Hide subtitle due to hide timer elapsed.
	 * \version 1.16
	 * 
	 * Default implementation calls hideSubtitleNow()
	 */
	public func void hideTimerElapsed()
		hideSubtitleNow()
	end
	
	/** \brief Subtitle widget. */
	public func Widget subtitleWidget()
		return this
	end
	
	
	
	/**
	 * \brief Designer selector changed.
	 * 
	 * If name label is present sets designer selector to "Label.\{designerSelector\}.Name".
	 * If text label is present sets designer selector to "Label.\{designerSelector\}.Text".
	 * 
	 * Both labels can be designed with selector 'Label.{designerSelector}'.
	 */
	public func void onDesignerSelectorChanged()
		var String selector = getDesignerSelector()
		
		if pLabelName != null
			pLabelName.setDesignerSelector("Label." + selector + ".Name")
		end
		if pStyledName != null
			pStyledName.setDesignerSelector("Styled." + selector + ".Name")
		end
		if pLabelText != null
			pLabelText.setDesignerSelector("Label." + selector + ".Text")
		end
		if pStyledText != null
			pStyledText.setDesignerSelector("Styled." + selector + ".Text")
		end
		if pImagePortrait != null
			pImagePortrait.setDesignerSelector("Image." + selector + ".Portrait")
		end
		if pVideoPortrait != null
			pVideoPortrait.setDesignerSelector("Video." + selector + ".Portrait")
		end
	end
	
	
	
	
	/**
	 * \brief Name of PersistencyFactory required to load object from file.
	 * 
	 * Name of PersistencyFactory is first written to the file as string with
	 * 8-bit length. Then writeToFile() is called to write the object itself.
	 * Empty name is not allowed as is names longer than 255 characters.
	 * Name has to match a PersistencyFactory present in the Persistency
	 * instance used for loading objects. Object is read using
	 * PersistencyFactory.readObjectFromFile() of the matching PersistencyFactory.
	 */
	public func String persistencyFactoryName()
		return Factory.NAME
	end
	
	/** \brief Write object to file writer. */
	public func void writeObjectToFile(PersistencyEnvironment env, FileWriter writer)
		writer.writeByte(0) // version
		
		if pLabelName != null
			writer.writeString8(pLabelName.getText())
			
		else
			writer.writeString8("")
		end
		
		if pLabelText != null
			writer.writeString16(pLabelText.getText())
			
		else
			writer.writeString16("")
		end
		
		if pImagePortrait != null and pImagePortrait.getImage() != null
			writer.writeString16(pImagePortrait.getImage().getFilename())
			
		else
			writer.writeString16("")
		end
		
		if pVideoPortrait != null and pVideoPortrait.getVideo() != null
			writer.writeString16(pVideoPortrait.getVideo().getFilename())
			
		else
			writer.writeString16("")
		end
		
		writer.writeByte(pPlacement.order())
		
		// TODO how to write styled text?
		
		// selector name
		writer.writeString8(getDesignerSelector())
		
		// hide timer
		if pHideTimer == null
			writer.writeFloat(0.0)
			writer.writeFloat(0.0)
			
		else
			writer.writeFloat(pHideTimer.getTriggerTime())
			writer.writeFloat(pHideTimer.getElapsedTime())
		end
	end
end
