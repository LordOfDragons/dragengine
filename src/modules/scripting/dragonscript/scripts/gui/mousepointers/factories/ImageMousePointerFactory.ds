/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */


namespace Dragengine.Gui.MousePointers.Factories

pin Dragengine.Gui.CanvasCreators
pin Dragengine.Scenery


/**
 * \brief Mouse pointer factory using image.
 */
public class ImageMousePointerFactory extends DefaultMousePointerFactory
	var Image pImage
	var ColorMatrix pColorMatrix
	
	
	
	/** \brief Create mouse pointer factory. */
	func new()
	end
	
	/** \brief Create copy of mouse pointer factory. */
	func new(ImageMousePointerFactory factory) super(factory)
		pImage = factory.pImage
		pColorMatrix = factory.pColorMatrix
	end
	
	
	
	/** \brief Image or \em null if not set. */
	func Image getImage()
		return pImage
	end
	
	/** \brief Set image or \em null if not set. */
	func void setImage(Image image)
		pImage = image
	end
	
	/** \brief Color matrix to use. */
	func ColorMatrix getColorMatrix()
		return pColorMatrix
	end
	
	/** \brief Set color matrix to use. */
	func void setColorMatrix(ColorMatrix colorMatrix)
		pColorMatrix = colorMatrix
	end
	
	
	
	/**
	 * \brief Set parameter.
	 * 
	 * | Name | Type | Method |
	 * | size | Point | setSize |
	 * | offset | Point | setOffset |
	 * | image | Image | setImage |
	 * | colorMatrix | ColorMatrix | setColorMatrix |
	 */
	func void setParameter(String name, Object value)
		if name.equals("image")
			setImage(value cast Image)
			
		elif name.equals("colorMatrix")
			setColorMatrix(value cast ColorMatrix)
			
		else
			super.setParameter(name, value)
		end
	end
	
	
	
	/** \brief Create copy of mouse pointer factory. */
	func MousePointerFactory copyFactory()
		return ImageMousePointerFactory.new(this)
	end
	
	/** \brief Create mouse pointer. */
	func MousePointer createMousePointer()
		var ImageMousePointer mousePointer = ImageMousePointer.new()
		initImageMousePointer(mousePointer)
		return mousePointer
	end
	
	/** \brief Initialize canvas creator part of mouse pointer. */
	protected func void initImageMousePointer(ImageMousePointer mousePointer)
		initDefaultMousePointer(mousePointer)
		mousePointer.setImage(pImage)
		
		if pColorMatrix != null
			mousePointer.getCanvas().setColorTransform(pColorMatrix)
		end
	end
end
