/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */


namespace Dragengine.Gui.MousePointers.Factories

pin Dragengine.Gui.CanvasCreators
pin Dragengine.Scenery


/**
 * \brief Mouse pointer factory using video.
 */
public class VideoMousePointerFactory extends DefaultMousePointerFactory
	/** \brief Video. */
	private var Video pVideo
	
	/** \brief Color matrix to use. */
	private var ColorMatrix pColorMatrix
	
	
	
	/** \brief Create mouse pointer factory. */
	public func new()
	end
	
	/** \brief Create copy of mouse pointer factory. */
	public func new( VideoMousePointerFactory factory ) super( factory )
		this.pVideo = factory.pVideo
		this.pColorMatrix = factory.pColorMatrix
	end
	
	
	
	/** \brief Video or \em null if not set. */
	public func Video getVideo()
		return this.pVideo
	end
	
	/** \brief Set video or \em null if not set. */
	public func void setVideo( Video video )
		this.pVideo = video
	end
	
	/** \brief Color matrix to use. */
	public func ColorMatrix getColorMatrix()
		return this.pColorMatrix
	end
	
	/** \brief Set color matrix to use. */
	public func void setColorMatrix( ColorMatrix colorMatrix )
		this.pColorMatrix = colorMatrix
	end
	
	
	
	/**
	 * \brief Set parameter.
	 * 
	 * | Name | Type | Method |
	 * | size | Point | setSize |
	 * | offset | Point | setOffset |
	 * | video | Video | setVideo |
	 * | colorMatrix | ColorMatrix | setColorMatrix |
	 */
	public func void setParameter( String name, Object value )
		if name.equals( "video" )
			this.setVideo( value cast Video )
			
		elif name.equals( "colorMatrix" )
			this.setColorMatrix( value cast ColorMatrix )
			
		else
			super.setParameter( name, value )
		end
	end
	
	
	
	/** \brief Create copy of mouse pointer factory. */
	public func MousePointerFactory copyFactory()
		return VideoMousePointerFactory.new( this )
	end
	
	/** \brief Create mouse pointer. */
	public func MousePointer createMousePointer()
		var VideoMousePointer mousePointer = VideoMousePointer.new()
		this.initVideoMousePointer( mousePointer )
		return mousePointer
	end
	
	/** \brief Initialize canvas creator part of mouse pointer. */
	protected func void initVideoMousePointer( VideoMousePointer mousePointer )
		this.initDefaultMousePointer( mousePointer )
		mousePointer.setVideo( this.pVideo )
		
		if this.pColorMatrix != null
			mousePointer.getCanvas().setColorTransform( this.pColorMatrix )
		end
	end
end
