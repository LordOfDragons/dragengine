/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */


namespace Dragengine.Gui.MousePointers.Factories

pin Dragengine.Gui.CanvasCreators


/**
 * \brief Mouse pointer factory using canvas creator.
 */
public class CanvasCreatorMousePointerFactory extends DefaultMousePointerFactory
	/** \brief Canvas creator factory. */
	private var CanvasCreator pCanvasCreator
	
	
	
	/** \brief Create mouse pointer factory. */
	public func new()
	end
	
	/** \brief Create copy of mouse pointer factory. */
	public func new( CanvasCreatorMousePointerFactory factory ) super( factory )
		this.pCanvasCreator = factory.pCanvasCreator
	end
	
	
	
	/** \brief Canvas creator or \em null if not set. */
	public func CanvasCreator getCanvasCreator()
		return this.pCanvasCreator
	end
	
	/** \brief Set canvas creator or \em null if not set. */
	public func void setCanvasCreator( CanvasCreator canvasCreator )
		this.pCanvasCreator = canvasCreator
	end
	
	
	
	/**
	 * \brief Set parameter.
	 * 
	 * | Name | Type | Method |
	 * | size | Point | setSize |
	 * | offset | Point | setOffset |
	 * | canvasCreator | CanvasCreator | setCanvasCreator |
	 */
	public func void setParameter( String name, Object value )
		if name.equals( "canvasCreator" )
			this.setCanvasCreator( value cast CanvasCreator )
			
		else
			super.setParameter( name, value )
		end
	end
	
	
	
	/** \brief Create copy of mouse pointer factory. */
	public func MousePointerFactory copyFactory()
		return CanvasCreatorMousePointerFactory.new( this )
	end
	
	/** \brief Create mouse pointer. */
	public func MousePointer createMousePointer()
		var CanvasCreatorMousePointer mousePointer = CanvasCreatorMousePointer.new()
		this.initCanvasCreatorMousePointer( mousePointer )
		return mousePointer
	end
	
	/** \brief Initialize canvas creator part of mouse pointer. */
	protected func void initCanvasCreatorMousePointer( CanvasCreatorMousePointer mousePointer )
		this.initDefaultMousePointer( mousePointer )
		mousePointer.setCanvasCreator( this.pCanvasCreator )
	end
end
