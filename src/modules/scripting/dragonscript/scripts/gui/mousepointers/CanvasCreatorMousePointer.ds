/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */


namespace Dragengine.Gui.MousePointers

pin Dragengine.Gui.CanvasCreators
pin Dragengine.Scenery


/**
 * \brief Mouse pointer using canvas creator.
 */
class CanvasCreatorMousePointer extends DefaultMousePointer
	/** \brief Canvas creator. */
	private var CanvasCreator pCanvasCreator
	
	
	
	/** \brief Create mouse pointer. */
	public func new()
	end
	
	
	
	/** \brief Canvas creator or \em null if not set. */
	public func CanvasCreator getCanvasCreator()
		return this.pCanvasCreator
	end
	
	/** \brief Set canvas creator. */
	public func void setCanvasCreator( CanvasCreator canvasCreator )
		if canvasCreator == this.pCanvasCreator
			return
		end
		
		this.pCanvasCreator = canvasCreator
		this.updateCanvas()
	end
	
	
	
	/** \brief Update canvas. */
	public func void updateCanvas()
		var CanvasView canvasView = this.getCanvasView()
		
		canvasView.removeAllCanvas()
		
		if this.pCanvasCreator == null
			return
		end
		
		var Canvas canvas = this.pCanvasCreator.createCanvas( canvasView.getSize() )
		if canvas != null
			canvasView.addCanvas( canvas )
		end
	end
end
