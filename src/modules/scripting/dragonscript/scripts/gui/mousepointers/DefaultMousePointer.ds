/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */


namespace Dragengine.Gui.MousePointers

pin Dragengine.Gui
pin Dragengine.Scenery


/**
 * \brief Default mouse pointer.
 * 
 * Canvas is placed at an offset to the mouse pointer position.
 */
class DefaultMousePointer implements MousePointer
	var Point pPosition
	var Point pOffset
	var CanvasView pCanvas
	var TexMatrix2 pTransformation
	
	
	
	/** \brief Create mouse pointer. */
	func new() this(Point.new(), Point.new(), 1)
	end
	
	/** \brief Create mouse pointer. */
	func new(Point size) this(size, Point.new(), 1)
	end
	
	/** \brief Create mouse pointer. */
	func new(Point size, Point offset) this(size, offset, 1)
	end
	
	/** \brief Create mouse pointer. */
	func new(Point size, Point offset, float transparency)
		if size == null or offset == null
			throw EInvalidParam.new()
		end
		
		pPosition = Point.new()
		pOffset = offset
		
		pCanvas = CanvasView.new()
		pCanvas.setSize(size)
		pCanvas.setTransparency(transparency)
	end
	
	
	
	/** \brief Mouse pointer size. */
	func Point getSize()
		return pCanvas.getSize()
	end
	
	/** \brief Set mouse pointer size. */
	func void setSize(Point size)
		pCanvas.setSize(size)
	end
	
	/** \brief Canvas offset relative to mouse pointer position. */
	func Point getOffset()
		return pOffset
	end
	
	/** \brief Set canvas X offset relative to mouse pointer position. */
	func void setOffset(Point offset)
		if offset.equals(pOffset)
			return
		end
		
		pOffset = offset
		pCanvas.setPosition(pPosition + pOffset)
	end
	
	/** \brief Transparency. */
	func float getTransparency()
		return pCanvas.getTransparency()
	end
	
	/** \brief Set the transparency. */
	func void setTransparency(float transparency)
		pCanvas.setTransparency(transparency)
	end
	
	/** \brief Transformation or null if not set. */
	func TexMatrix2 getTransformation()
		return pTransformation
	end
	
	/** \brief Set transformation or null if not set. */
	func void setTransformation(TexMatrix2 transformation)
		pTransformation = transformation
	end
	
	
	
	/** \brief Mouse position. */
	func Point getPosition()
		return pPosition
	end
	
	/** \brief Set mouse position. */
	func void setPosition(Point position)
		if position.equals(pPosition)
			return
		end
		
		pPosition = position
		pCanvas.setPosition(pPosition + pOffset)
	end
	
	/** \brief Canvas to render mouse pointer with. */
	func Canvas getCanvas()
		return pCanvas
	end
	
	/** \brief Canvas to render mouse pointer with. */
	func CanvasView getCanvasView()
		return pCanvas
	end
end
