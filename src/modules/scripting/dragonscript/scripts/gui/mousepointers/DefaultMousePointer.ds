/* 
 * Drag[en]gine DragonScript Script Module
 *
 * Copyright (C) 2020, Roland Pl√ºss (roland@rptd.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */


namespace Dragengine.Gui.MousePointers

pin Dragengine.Gui
pin Dragengine.Scenery


/**
 * \brief Default mouse pointer.
 * 
 * Canvas is placed at an offset to the mouse pointer position.
 */
class DefaultMousePointer implements MousePointer
	var Point pPosition
	var Point pOffset
	var CanvasView pCanvas
	var TexMatrix2 pTransformation
	
	
	
	/** \brief Create mouse pointer. */
	func new() this(Point.new(), Point.new(), 1)
	end
	
	/** \brief Create mouse pointer. */
	func new(Point size) this(size, Point.new(), 1)
	end
	
	/** \brief Create mouse pointer. */
	func new(Point size, Point offset) this(size, offset, 1)
	end
	
	/** \brief Create mouse pointer. */
	func new(Point size, Point offset, float transparency)
		if size == null or offset == null
			throw EInvalidParam.new()
		end
		
		pPosition = Point.new()
		pOffset = offset
		
		pCanvas = CanvasView.new()
		pCanvas.setSize(size)
		pCanvas.setTransparency(transparency)
	end
	
	
	
	/** \brief Mouse pointer size. */
	func Point getSize()
		return pCanvas.getSize()
	end
	
	/** \brief Set mouse pointer size. */
	func void setSize(Point size)
		pCanvas.setSize(size)
	end
	
	/** \brief Canvas offset relative to mouse pointer position. */
	func Point getOffset()
		return pOffset
	end
	
	/** \brief Set canvas X offset relative to mouse pointer position. */
	func void setOffset(Point offset)
		if offset.equals(pOffset)
			return
		end
		
		pOffset = offset
		pCanvas.setPosition(pPosition + pOffset)
	end
	
	/** \brief Transparency. */
	func float getTransparency()
		return pCanvas.getTransparency()
	end
	
	/** \brief Set the transparency. */
	func void setTransparency(float transparency)
		pCanvas.setTransparency(transparency)
	end
	
	/** \brief Transformation or null if not set. */
	func TexMatrix2 getTransformation()
		return pTransformation
	end
	
	/** \brief Set transformation or null if not set. */
	func void setTransformation(TexMatrix2 transformation)
		pTransformation = transformation
	end
	
	
	
	/** \brief Mouse position. */
	func Point getPosition()
		return pPosition
	end
	
	/** \brief Set mouse position. */
	func void setPosition(Point position)
		if position.equals(pPosition)
			return
		end
		
		pPosition = position
		pCanvas.setPosition(pPosition + pOffset)
	end
	
	/** \brief Canvas to render mouse pointer with. */
	func Canvas getCanvas()
		return pCanvas
	end
	
	/** \brief Canvas to render mouse pointer with. */
	func CanvasView getCanvasView()
		return pCanvas
	end
end
