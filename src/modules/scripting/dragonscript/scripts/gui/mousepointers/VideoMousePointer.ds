/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */


namespace Dragengine.Gui.MousePointers

pin Dragengine.Gui.CanvasCreators
pin Dragengine.Scenery
pin Dragengine.Utils


/**
 * \brief Mouse pointer using image.
 */
class VideoMousePointer extends DefaultMousePointer
	/** \brief Playback timer. */
	class PlaybackTimer extends Timer
		/** \brief Video player to update. */
		private var VideoPlayer pVideoPlayer
		
		/** \brief Create playback timer. */
		public func new( VideoPlayer videoPlayer ) super( 0.0, true )
			this.pVideoPlayer = videoPlayer
		end
		
		/** \brief Timer elapsed. */
		public func void fire()
			this.pVideoPlayer.update( Engine.getElapsedTime() )
		end
	end
	
	/** \brief Playback timer. */
	private var PlaybackTimer pTimer
	
	
	
	/** \brief Video player. */
	private var VideoPlayer pVideoPlayer
	
	
	
	/** \brief Create mouse pointer. */
	public func new()
		this.pVideoPlayer = VideoPlayer.new()
		this.pVideoPlayer.setLooping( true )
	end
	
	/** \brief Destructor. */
	public func destructor()
		if this.pTimer != null
			this.pTimer.giveUp()
		end
	end
	
	
	
	/** \brief Video player or \em null if not set. */
	public func VideoPlayer getVideoPlayer()
		return this.pVideoPlayer
	end
	
	/** \brief Video or \em null if not set. */
	public func Video getVideo()
		return this.pVideoPlayer.getVideo()
	end
	
	/** \brief Set video. */
	public func void setVideo( Video video )
		if video == this.pVideoPlayer.getVideo()
			return
		end
		
		if this.pTimer != null
			this.pTimer.giveUp()
			this.pTimer = null
		end
		this.pVideoPlayer.stop()
		
		this.pVideoPlayer.setVideo( video )
		
		if video != null
			this.setSize( video.getSize() )
			this.pVideoPlayer.play()
			this.pTimer = PlaybackTimer.new( this.pVideoPlayer )
			
		else
			this.setSize( Point.new() )
		end
		
		this.updateCanvas()
	end
	
	
	
	/** \brief Update canvas. */
	public func void updateCanvas()
		var CanvasView canvasView = this.getCanvasView()
		
		canvasView.removeAllCanvas()
		
		if this.pVideoPlayer.getVideo() == null
			return
		end
		
		var CanvasVideoPlayer canvasVideo = CanvasVideoPlayer.new()
		canvasVideo.setVideoPlayer( this.pVideoPlayer )
		canvasVideo.setSize( this.pVideoPlayer.getVideo().getSize() )
		canvasView.addCanvas( canvasVideo )
	end
end
