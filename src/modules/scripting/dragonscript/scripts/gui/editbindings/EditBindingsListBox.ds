/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */


namespace Dragengine.Gui

pin Dragengine.Commands
pin Dragengine.Gui.Events
pin Dragengine.Gui.Listeners
pin Dragengine.Scenery
pin Dragengine.Utils


/**
 * \brief List box enabling user to edit bindings.
 * 
 * List box shows all commands the user can bind with all bindings they are currently
 * bound to. The user can edit commands to add new bindings by pressing input controls
 * or deleting all bindings for a command.
 * 
 * Model is instance of EditBindingsListModel.
 * 
 * To change the appearance of overwrite the appropriate methods.
 */
class EditBindingsListBox extends ListBox
	/** \brief Capture binding result listener. */
	class CaptureFinished implements WindowDialog.ResultListener
		var EditBindingsListBox pListBox
		var EditBindingsListModelEntry pEntry
		
		/** \brief Create listener. */
		func new(EditBindingsListBox listBox)
			pListBox = listBox
		end
		
		/**
		 * \brief Create listener.
		 * \version 1.20
		 */
		func new(EditBindingsListBox listBox, EditBindingsListModelEntry entry)
			pListBox = listBox
			pEntry = entry
		end
		
		/** \brief Dialog closed with result. */
		func void onResult(Object result)
			if result != null
				if pEntry != null
					pListBox.addCapturedBinding(pEntry,\
						result cast WindowCaptureBinding.CaptureResult, false)
					
				else
					pListBox.selectedAddCapturedBinding(\
						result cast WindowCaptureBinding.CaptureResult, false)
				end
			end
		end
	end
	
	/** \brief Reassign result listener. */
	class ReassignResult implements WindowDialog.ResultListener
		var EditBindingsListBox pListBox
		var EditBindingsListModelEntry pEntry
		var WindowCaptureBinding.CaptureResult pCaptured
		
		/** \brief Create listener. */
		func new(EditBindingsListBox listBox, WindowCaptureBinding.CaptureResult captured)
			pListBox = listBox
			pCaptured = captured
		end
		
		/**
		 * \brief Create listener.
		 * \version 1.20
		 */
		func new(EditBindingsListBox listBox, WindowCaptureBinding.CaptureResult captured,\
		EditBindingsListModelEntry entry)
			pListBox = listBox
			pCaptured = captured
			pEntry = entry
		end
		
		/** \brief Dialog closed with result. */
		func void onResult(Object result)
			if result cast bool
				if pEntry != null
					pListBox.addCapturedBinding(pEntry, pCaptured, true)
					
				else
					pListBox.selectedAddCapturedBinding(pCaptured, true)
				end
			end
		end
	end
	
	/**
	 * \brief Capture binding if mouse button is double clicked.
	 * \version 1.7
	 */
	class DoubleClickCaptureBinding extends ClickedActionListener
		var EditBindingsListBox pListBox
		
		/** \brief Create listener. */
		func new(EditBindingsListBox listBox)
			pListBox = listBox
			setMultiClickCount(2)
		end
		
		/** Double click detected. */
		func void onAction()
			pListBox.selectedCaptureBinding()
		end
	end
	
	
	
	/**
	 * \brief Create edit bindings list box.
	 * 
	 * \param model Model to use.
	 */
	func new(EditBindingsListModel model) this(model, EditBindingsListRenderer.new())
	end
	
	/**
	 * \brief Create edit bindings list box.
	 * 
	 * \param model Model to use.
	 * \param renderer Renderer to use.
	 */
	func new(EditBindingsListModel model, EditBindingsListRenderer renderer) \
	super(model, renderer)
		setDesignerSelector(getDesignerSelector() + ".EditBindings")
		addMouseListener(DoubleClickCaptureBinding.new(this))
	end
	
	
	
	/** \brief Capture and add binding for selected entry if any is selected. */
	func void selectedCaptureBinding()
		var int selection = getSelectedElement()
		if selection != -1
			captureBinding((getModel() cast EditBindingsListModel).\
				getAt(selection) cast EditBindingsListModelEntry)
		end
	end
	
	/**
	 * \brief Capture and add binding for entry.
	 * \version 1.20
	 */
	func void captureBinding(EditBindingsListModelEntry entry)
		var EditBindingsListModel model = getModel() cast EditBindingsListModel
		
		select entry.getInputSource()
		case EditBindingsListModelEntry.InputSource.axis
			WindowCaptureBinding.captureInput(model.getBindingManager(),\
				EditBindingsListModelEntry.InputSource.axis, getWindow(),\
				"@UI.Settings.CaptureBinding.Title", "@UI.Settings.CaptureBinding.PushAxis",\
				CaptureFinished.new(this, entry))
			
		case EditBindingsListModelEntry.InputSource.button
			WindowCaptureBinding.captureInput(model.getBindingManager(),\
				EditBindingsListModelEntry.InputSource.button, getWindow(),\
				"@UI.Settings.CaptureBinding.Title", "@UI.Settings.CaptureBinding.PushButton",\
				CaptureFinished.new(this, entry))
		end
	end
	
	/** \brief Remove all key bindings of selected entry if any is selected. */
	func void selectedRemoveBindings()
		var int selection = getSelectedElement()
		if selection == -1
			return
		end
		
		var EditBindingsListModel model = getModel() cast EditBindingsListModel
		var EditBindingsListModelEntry entry = model.getAt(selection) cast EditBindingsListModelEntry
		
		entry.forEachAxisBinding(block Binding each
			model.getBindingManager().removeAxisBinding(each)
		end)
		
		entry.forEachButtonBinding(block Binding each
			model.getBindingManager().removeButtonBinding(each)
		end)
		
		model.notifyContentChanged(selection, selection)
	end
	
	/** \brief Add capture result as binding to selected entry. */
	func void selectedAddCapturedBinding(WindowCaptureBinding.CaptureResult captured, bool reassign)
		var int selection = getSelectedElement()
		if selection != -1
			addCapturedBinding((getModel() cast EditBindingsListModel).\
				getAt(selection) cast EditBindingsListModelEntry, captured, reassign)
		end
	end
	
	/**
	 * \brief Add capture result as binding to entry.
	 * \version 1.20
	 */
	func void addCapturedBinding(EditBindingsListModelEntry entry,\
	WindowCaptureBinding.CaptureResult captured, bool reassign)
		var EditBindingsListModel model = getModel() cast EditBindingsListModel
		var int index = model.indexOf(entry)
		if index == -1
			return
		end
		
		var BindingManager bindingManager = model.getBindingManager()
		var InputEventSource system = captured.getSystem()
		var int deviceIndex = captured.getDeviceIndex()
		var int sourceIndex = captured.getSourceIndex()
		var Command command = entry.getCommand()
		var Command updateCommand
		var Binding binding
		
		// check if binding exist already
		select captured.getInputSource()
		case EditBindingsListModelEntry.InputSource.axis
			if entry.getInputSource() == EditBindingsListModelEntry.InputSource.button
				binding = bindingManager.findAxisBinding(system, deviceIndex, \
					sourceIndex, captured.getInverseAxis())
				
			else
				binding = bindingManager.findAxisBinding(system, deviceIndex, sourceIndex)
			end
			
			if binding == null
				break
			end
			
			// if binding exists with the same command nothing is added. changing axis
			// direction counts as binding change
			if binding.getCommand() == command
				if entry.getInputSource() == EditBindingsListModelEntry.InputSource.axis \
				and binding.getInverseAxis() != captured.getInverseAxis()
					// same command just axis flipped. replace without asking user
					reassign = true
					
				else
					return
				end
			end
			
			// binding is assigned to another command. the result of this dialog enters
			// this function again but with reassign set to true. in this case this
			// block will be skipped
			updateCommand = binding.getCommand()
			if not reassign
				askUserReassignBinding(entry, captured, updateCommand)
				return
			end
			
			// remove binding
			bindingManager.removeAxisBinding(binding)
			
		case EditBindingsListModelEntry.InputSource.button
			binding = bindingManager.findButtonBinding(system, deviceIndex, sourceIndex)
			
			if binding == null
				break
			end
			
			// if binding exists with the same command nothing is added
			if binding.getCommand() == command
				return
			end
			
			// binding is assigned to another command. the result of this dialog enters
			// this function again but with reassign set to true. in this case this
			// block will be skipped
			updateCommand = binding.getCommand()
			if not reassign
				askUserReassignBinding(entry, captured, updateCommand)
				return
			end
			
			// remove binding
			bindingManager.removeButtonBinding(binding)
		end
		
		// update list entry for command
		if updateCommand != null
			var EditBindingsListModelEntry updateEntry
			var int i, count = model.getCount()
			
			for i = 0 to count
				updateEntry = model.getAt(i) cast EditBindingsListModelEntry
				if updateEntry.getCommand() == updateCommand
					model.notifyContentChanged(i, i)
					break
				end
			end
		end
		
		// add binding
		select captured.getInputSource()
		case EditBindingsListModelEntry.InputSource.axis
			var InputDeviceAxis axis = captured.getInputDeviceAxis()
			binding = Binding.new(axis.getInputDevice().getID(), axis.getID(), command)
			binding.setInverseAxis(captured.getInverseAxis())
			bindingManager.addAxisBinding(binding)
			
		case EditBindingsListModelEntry.InputSource.button
			var InputDeviceButton button = captured.getInputDeviceButton()
			binding = Binding.new(button.getInputDevice().getID(), button.getID(), command)
			bindingManager.addButtonBinding(binding)
		end
		
		model.notifyContentChanged(index, index)
	end
	
	/**
	 * \brief Ask user to reassign binding.
	 * \param captured Captured binding causing the problem.
	 * \param command Command already assigned to the binding.
	 */
	protected func void askUserReassignBinding(WindowCaptureBinding.CaptureResult captured, Command command)
		askUserReassignBinding(null, captured, command)
	end
	
	/**
	 * \brief Ask user to reassign binding.
	 * \version 1.20
	 * \param captured Captured binding causing the problem.
	 * \param command Command already assigned to the binding.
	 */
	protected func void askUserReassignBinding(EditBindingsListModelEntry entry,\
	WindowCaptureBinding.CaptureResult captured, Command command)
		var TranslationManager tm = EngineTranslations.get()
		
		WindowDialog.question(getWindow(), "@UI.Settings.ReplaceBinding.Title",\
			translate("@UI.Settings.ReplaceBinding.Text").format(\
				Array.newWith(command.translateDisplayName(tm))),\
			null, Array.newWith(\
				WindowDialog.ButtonConfiguration.new("@UI.Yes", true),\
				WindowDialog.ButtonConfiguration.new("@UI.No", false)),\
			ReassignResult.new(this, captured, entry))
	end
	
	
	
	/** \brief Key pressed event. */
	func void onKeyPress(KeyEvent event)
		select event.getKeyCode()
		case InputEventKey.backspace, InputEventKey.delete
			selectedRemoveBindings()
			
		case InputEventKey.enter
			selectedCaptureBinding()
			
		else
			super.onKeyPress(event)
		end
	end
end
