/* 
 * Drag[en]gine DragonScript Script Module
 *
 * Copyright (C) 2020, Roland Pl√ºss (roland@rptd.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */


namespace Dragengine.Gui

pin Dragengine.Commands
pin Dragengine.Gui.Borders
pin Dragengine.Gui.Events
pin Dragengine.Gui.Layouts
pin Dragengine.Gui.Listeners
pin Dragengine.Scenery
pin Dragengine.Utils


/**
 * \brief List element renderer for ListBoxEditBindings.
 * 
 * Base designer selector is used to derive the designer selectors for all child elements.
 * The default base designer selector is 'EditBindingsEntry'. These are the derived selectors:
 * 
 * - Root panel (deselected): 'Panel.' + base-selector
 * - Root panel (selected): 'Panel.' + base-selector + '.Selected'
 * - Name label (deselected): 'Label.' + base-selector + '.Name'
 * - Name label (selected): 'Label.' + base-selector + '.Name.Selected'
 * - Binding label (deselected): 'Label.' + base-selector + '.Binding'
 * - Binding label (selected): 'Label.' + base-selector + '.Binding.Selected'
 */
class EditBindingsListRenderer extends DefaultListElementRenderer
	/**
	 * \brief Action deleting binding.
	 * \version 1.20
	 * 
	 * Deleting the binding is delayed by one frame update to avoid problems if widget is
	 * removed while action runs.
	 */
	protected class ActionDeleteBinding implements ActionListener
		var EditBindingsListModel pModel
		var EditBindingsListModelEntry pEntry
		var Binding pBinding
		
		func new(EditBindingsListModel model, EditBindingsListModelEntry entry, Binding binding)
			pModel = model
			pEntry = entry
			pBinding = binding
		end
		
		func void onAction(ActionEvent event)
			TimerBlock.new(0, false, block
				var int index = pModel.indexOf(pEntry)
				if index != -1
					if pEntry.hasAxisBinding(pBinding)
						pModel.getBindingManager().removeAxisBinding(pBinding)
						
					elif pEntry.hasButtonBinding(pBinding)
						pModel.getBindingManager().removeButtonBinding(pBinding)
					end
					
					pModel.notifyContentChanged(index, index)
				end
			end)
		end
	end
	
	/**
	 * \brief Action add binding.
	 * \version 1.20
	 * 
	 * Calls EditBindingsListBox.selectedCaptureBinding() .
	 */
	protected class ActionAddBinding implements ActionListener
		var EditBindingsListBox pListBox
		var EditBindingsListModel pModel
		var EditBindingsListModelEntry pEntry
		
		func new(EditBindingsListBox listBox, EditBindingsListModel model, EditBindingsListModelEntry entry)
			pListBox = listBox
			pModel = model
			pEntry = entry
		end
		
		func void onAction(ActionEvent event)
			if pModel.has(pEntry)
				pListBox.captureBinding(pEntry)
			end
		end
	end
	
	
	
	var int pWidthDisplayName
	var int pIconHeight
	var WeightLayout.LayoutSettings pLSDisplayName
	var WeightLayout.LayoutSettings pLSBindings
	
	
	
	/** \brief Create element renderer. */
	func new()
		pIconHeight = 32
		pLSBindings = WeightLayout.LayoutSettings.new(1)
		setDesignerSelector("EditBindingsEntry")
		setWidthDisplayName(200)
	end
	
	
	
	/** \brief Width of display name in pixels. */
	func int getWidthDisplayName()
		return pWidthDisplayName
	end
	
	/** \brief Set width of display name in pixels. */
	func void setWidthDisplayName(int width)
		if width < 1
			throw EInvalidParam.new()
		end
		
		if width == pWidthDisplayName
			return
		end
		
		pWidthDisplayName = width
		pLSDisplayName = WeightLayout.LayoutSettings.new(0, width)
	end
	
	/** \brief Icon height. */
	func int getIconHeight()
		return pIconHeight
	end
	
	/** \brief Set icon height. */
	func void setIconHeight(int height)
		pIconHeight = height
	end
	
	/**
	 * \deprecated Use ListBox.getTranslationManager() instead.
	 * \version 1.16
	 */
	func TranslationManager getTranslationManager()
		return TranslationManager.get()
	end
	
	/**
	 * \deprecated Use ListBox.getTranslationManager() instead.
	 * \version 1.16
	 */
	func void setTranslationManager(TranslationManager translationManager)
	end
	
	
	
	/**
	 * \brief Create renderer.
	 * 
	 * Renderer is a Panel containing as first element a command Label and as second element
	 * a Panel with all bindings. Bindings are Label widgets with a border.
	 */
	func Widget createRenderer(ListBox listBox)
		return Panel.new(WeightLayout.new(LayoutAxis.x, 5), block Panel panel
			panel.addWidget(Label.new(" "), pLSDisplayName)
			panel.addWidget(Panel.new(FlowLayout.new(\
				LayoutAxis.x, 2, FlowLayout.Stretch.none)), pLSBindings)
		end)
	end
	
	/** \brief Update renderer with object state. */
	func void updateRenderer(ListBox listBox, Widget renderer, Object element, \
	bool selected, bool focused)
		var EditBindingsListModelEntry entry = element cast EditBindingsListModelEntry
		var EditBindingsListModel model = listBox.getModel() cast EditBindingsListModel
		var String designerSelector = getDesignerSelector()
		var Panel panel = renderer cast Panel
		var Label labelName = panel.getWidget(0) cast Label
		var Panel bindingPanel = panel.getWidget(1) cast Panel
		var Command command
		
		panel.runWhileBlockingLayout(block
			if selected
				panel.setDesignerSelector("Panel." + designerSelector + ".Selected")
				labelName.setDesignerSelector("Label." + designerSelector + ".Name.Selected")
				
			else
				panel.setDesignerSelector("Panel." + designerSelector)
				labelName.setDesignerSelector("Label." + designerSelector + ".Name")
			end
			
			if entry == null
				bindingPanel.removeAllWidgets()
				bindingPanel.addWidget(createBindingWidget(model, entry, selected, \
					null, EditBindingsListModelEntry.InputSource.button))
				return null
			end
			
			command = entry.getCommand()
			if command.getTranslateDisplayName() != null
				labelName.setText("@" + command.getTranslateDisplayName())
				
			elif command.getDisplayName() != null
				labelName.setText(command.getDisplayName())
				
			else
				labelName.setText(command.getName())
			end
			
			bindingPanel.runWhileBlockingLayout(block
				bindingPanel.removeAllWidgets()
				
				if listBox castable EditBindingsListBox
					bindingPanel.addWidget(createAddBindingWidget(\
						listBox cast EditBindingsListBox, model, entry, selected))
				end
				
				entry.forEachAxisBinding(block Binding each
					bindingPanel.addWidget(wrapBindingWidget(model, entry, selected, each,\
						createBindingWidget(model, entry, selected, each,\
							EditBindingsListModelEntry.InputSource.axis)))
				end)
				entry.forEachButtonBinding(block Binding each
					bindingPanel.addWidget(wrapBindingWidget(model, entry, selected, each,\
						createBindingWidget(model, entry, selected, each,\
							EditBindingsListModelEntry.InputSource.button)))
				end)
			end)
			
			bindingPanel.doLayoutIfBlocked()
		end)
	end
	
	
	
	/**
	 * \brief Create widget representing binding.
	 * 
	 * Default implementation create instance of DisplayInputSource if input has display
	 * information otherwise calls createBindingWidgetFallback().
	 * 
	 * If \em binding is null create a placeholder element used to measure default size.
	 * 
	 * \param model Model to use.
	 * \param entry List entry for which the binding is created for.
	 * \param selected Entry is selected.
	 * \param binding Binding to create widget for.
	 * \param inputSource Input source
	 */
	protected func Widget createBindingWidget(EditBindingsListModel model, \
	EditBindingsListModelEntry entry, bool selected, Binding binding, \
	EditBindingsListModelEntry.InputSource inputSource)
		var BindingManager bindingManager = model.getBindingManager()
		var String designerSelector = getDesignerSelector()
		var DisplayInputSource dpi
		
		if binding == null
			dpi = DisplayInputSource.new(pIconHeight)
			
		else
			select inputSource
			case EditBindingsListModelEntry.InputSource.axis
				var InputDeviceAxis axis = binding.getInputDeviceAxis()
				if axis != null
					dpi = DisplayInputSource.new(pIconHeight, null, axis)
				end
				
			case EditBindingsListModelEntry.InputSource.button
				var InputDeviceButton button = binding.getInputDeviceButton()
				if button != null
					dpi = DisplayInputSource.new(pIconHeight, null, button)
				end
			end
		end
		
		if dpi == null
			return createBindingWidgetFallback(model, entry, selected, binding, inputSource)
		end
		
		if selected
			dpi.setDesignerSelector("DisplayInputSource." + designerSelector + ".Binding.Selected")
			
		else
			dpi.setDesignerSelector("DisplayInputSource." + designerSelector + ".Binding")
		end
		
		return dpi
	end
	
	/**
	 * \brief Create widget representing binding (fallback).
	 * 
	 * Default implementation returns a Label with border. The text is of the format
	 * "<device-id>: <source-id>".
	 * 
	 * \param model Model to use.
	 * \param entry List entry for which the binding is created for.
	 * \param selected Entry is selected.
	 * \param binding Binding to create widget for.
	 * \param inputSource Input source
	 */
	protected func Widget createBindingWidgetFallback(EditBindingsListModel model, \
	EditBindingsListModelEntry entry, bool selected, Binding binding, \
	EditBindingsListModelEntry.InputSource inputSource)
		var BindingManager bindingManager = model.getBindingManager()
		var String designerSelector = getDesignerSelector()
		var String deviceID = "??"
		var String sourceID = "??"
		var String inverseAxis = ""
		
		var InputDevice device = binding.getInputDevice()
		if device != null
			deviceID = device.getName()
		end
		
		select inputSource
		case EditBindingsListModelEntry.InputSource.axis
			var InputDeviceAxis axis = binding.getInputDeviceAxis()
			if axis != null
				sourceID = axis.getName()
			end
			
		case EditBindingsListModelEntry.InputSource.button
			var InputDeviceButton button = binding.getInputDeviceButton()
			if button != null
				sourceID = button.getName()
			end
		end
		
		if binding.getInverseAxis()
			inverseAxis = "-"
		end
		
		var Label label = Label.new(deviceID + ": " + sourceID + inverseAxis, \
			Label.middleCenter)
		
		if selected
			label.setDesignerSelector("Label." + designerSelector + ".Binding.Selected")
			
		else
			label.setDesignerSelector("Label." + designerSelector + ".Binding")
		end
		
		return label
	end
	
	/**
	 * \brief Wrap binding widget.
	 * \version 1.20
	 * 
	 * Default implementations creates a panel with BorderLayout. The widget is placed in the
	 * content area. A button to delete the binding is placed in the right area.
	 */
	protected func Container wrapBindingWidget(EditBindingsListModel model,\
	EditBindingsListModelEntry entry, bool selected, Binding binding, Widget widget)
		return Panel.new(BorderLayout.new(), block Panel p
			var String designerSelector = getDesignerSelector()
			
			if selected
				p.setDesignerSelector("Panel." + designerSelector + ".Binding.Selected")
				
			else
				p.setDesignerSelector("Panel." + designerSelector + ".Binding")
			end
			
			p.addWidget(widget, BorderLayout.Area.content)
			p.addWidget(createRemoveBindingWidget(model, entry, selected, binding),\
				BorderLayout.Area.right)
		end)
	end
	
	/**
	 * \brief Create widget to remove binding.
	 * \version 1.20
	 * 
	 * Default implementation creates a Button with a delete icon. Upon clicking the butten
	 * the action ActionDeleteBinding is run.
	 */
	protected func Widget createRemoveBindingWidget(EditBindingsListModel model,\
	EditBindingsListModelEntry entry, bool selected, Binding binding)
		var Button button = Button.new(" ", ActionDeleteBinding.new(model, entry, binding))
		button.setDesignerSelector("Button.EditBindingsEntry.DeleteBinding")
		button.setToolTip("@UI.EditBinding.DeleteBinding.ToolTip")
		return button
	end
	
	/**
	 * \brief Create widget to add binding.
	 * \version 1.20
	 * 
	 * Default implementation creates a Button with a add icon. Upon clicking the button
	 * the action ActionAddBinding is run.
	 */
	protected func Widget createAddBindingWidget(EditBindingsListBox listBox,\
	EditBindingsListModel model, EditBindingsListModelEntry entry, bool selected)
		var Button button = Button.new(" ", ActionAddBinding.new(listBox, model, entry))
		button.setDesignerSelector("Button.EditBindingsEntry.AddBinding")
		button.setToolTip("@UI.EditBinding.AddBinding.ToolTip")
		return button
	end
end
