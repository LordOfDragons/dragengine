/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */


namespace Dragengine.Gui

pin Dragengine.Commands
pin Dragengine.Gui.Events
pin Dragengine.Gui.Layouts
pin Dragengine.Scenery


/**
 * \brief Display button binding.
 * 
 * Shows display image and text of input source. Text is shown above image. Different
 * input sources as well as only input devices can be shown.
 */
class DisplayInputSource extends Panel
	var int pIconHeight
	
	var InputDevice pInputDevice
	var InputDeviceButton pInputButton
	var InputDeviceAxis pInputAxis
	
	var DisplayImage pDisplayImageDevice
	var Label pLabelDevice
	var DisplayImage pDisplayImageSource
	var Label pLabelSource
	
	
	
	/** \brief Create display input source widget. */
	func new(int iconHeight)
		if iconHeight < 1
			throw EInvalidParam.new("iconHeight < 1")
		end
		
		pIconHeight = iconHeight
		
		runWhileBlockingLayout(block
			setLayout(FlowLayout.new(LayoutAxis.x, 2))
			
			addWidget(Panel.new(StackLayout.new(), block Panel panel
				panel.addWidget(Panel.new(CentrizedBoxLayout.new(LayoutAxis.x), block Panel centrized
					pDisplayImageDevice = DisplayImage.new()
					pDisplayImageDevice.setMinimumSize(Point.new(iconHeight, iconHeight))
					pDisplayImageDevice.setProtectMinimumSize(true)
					centrized.addWidget(pDisplayImageDevice)
				end))
				
				pLabelDevice = Label.new(" ")
				panel.addWidget(pLabelDevice)
			end))
			
			addWidget(Panel.new(StackLayout.new(), block Panel panel
				panel.addWidget(Panel.new(CentrizedBoxLayout.new(LayoutAxis.x), block Panel centrized
					pDisplayImageSource = DisplayImage.new()
					pDisplayImageSource.setMinimumSize(Point.new(iconHeight, iconHeight))
					pDisplayImageSource.setProtectMinimumSize(true)
					centrized.addWidget(pDisplayImageSource)
				end))
				
				pLabelSource = Label.new(" ")
				panel.addWidget(pLabelSource)
			end))
			
			// has to come last since it modifies child widgets
			setDesignerSelector("DisplayInputSource")
		end)
	end
	
	/** \brief Create display input source widget. */
	func new(int iconHeight, InputDevice device) this(iconHeight)
		set(device)
	end
	
	/** \brief Create display input source widget. */
	func new(int iconHeight, InputDevice device, InputDeviceButton button) this(iconHeight)
		set(device, button)
	end
	
	/** \brief Create display input source widget. */
	func new(int iconHeight, InputDevice device, InputDeviceAxis axis) this(iconHeight)
		set(device, axis)
	end
	
	/** \brief Dispose of widget. */
	func void dispose()
		pDisplayImageDevice = null
		pLabelDevice = null
		pDisplayImageSource = null
		pLabelSource = null
		
		super.dispose()
	end
	
	
	
	/** \brief Icon height. */
	func int getIconHeight()
		return pIconHeight
	end
	
	/** \brief Set icon height. */
	func void setIconHeight(int height)
		if height < 1
			throw EInvalidParam.new("height < 1")
		end
		
		if height == pIconHeight
			return
		end
		
		pIconHeight = height
		
		updateWidgets()
	end
	
	/** \brief Input device or null if not set. */
	func InputDevice getInputDevice()
		return pInputDevice
	end
	
	/** \brief Input button or null if not set. */
	func InputDeviceButton getInputButton()
		return pInputButton
	end
	
	/** \brief Input axis or null if not set. */
	func InputDeviceAxis getInputAxis()
		return pInputAxis
	end
	
	
	
	/** \brief Clear. */
	func void clear()
		if pInputDevice == null and pInputButton == null and pInputAxis == null
			return
		end
		
		pInputDevice = null
		pInputButton = null
		pInputAxis = null
		
		updateWidgets()
	end
	
	/** \brief Set input device. */
	func void set(InputDevice device)
		if pInputDevice == device and pInputButton == null and pInputAxis == null
			return
		end
		
		pInputDevice = device
		pInputButton = null
		pInputAxis = null
		
		updateWidgets()
	end
	
	/**
	 * \brief Set input button.
	 * 
	 * If device is not null shows device and button otherwise only button.
	 */
	func void set(InputDevice device, InputDeviceButton button)
		if button == null
			throw ENullPointer.new("button")
		end
		if pInputDevice == device and pInputButton == button and pInputAxis == null
			return
		end
		
		pInputDevice = device
		pInputButton = button
		pInputAxis = null
		
		updateWidgets()
	end
	
	/**
	 * \brief Set input axis.
	 * 
	 * If device is not null shows device and axis otherwise only axis.
	 */
	func void set(InputDevice device, InputDeviceAxis axis)
		if axis == null
			throw ENullPointer.new("axis")
		end
		if pInputDevice == device and pInputButton == null and pInputAxis == axis
			return
		end
		
		pInputDevice = device
		pInputButton = null
		pInputAxis = axis
		
		updateWidgets()
	end
	
	
	
	/**
	 * \brief Set designer selector.
	 * 
	 * In addition to the base class behavior sets the designer selector of child widgets:
	 * - Device image: Image.<selector>
	 * - Source image: Image.<selector>
	 * - Device label: Label.<selector>
	 * - Source label: Label.<selector>
	 */
	func void setDesignerSelector(String selector)
		if selector.equals(getDesignerSelector())
			return
		end
		
		super.setDesignerSelector(selector)
		
		pDisplayImageDevice.setDesignerSelector("Image." + selector)
		pLabelDevice.setDesignerSelector("Label." + selector)
		pDisplayImageSource.setDesignerSelector("Image." + selector)
		pLabelSource.setDesignerSelector("Label." + selector)
	end
	
	
	/** \brief Update widgets. */
	protected func void updateWidgets()
		runWhileBlockingLayout(block
			if pInputDevice != null
				var Image image = pInputDevice.getLargestDisplayIconY(pIconHeight)
				if image != null
					pDisplayImageDevice.setImage(image)
					pDisplayImageDevice.setMinimumSize(null)
					
				else
					pDisplayImageDevice.setImage(null)
					pDisplayImageDevice.setMinimumSize(Point.new(pIconHeight, pIconHeight))
				end
				
				var String text = pInputDevice.getDisplayText()
				if text.empty()
					text = " "
				end
				pLabelDevice.setText(text)
				
			else
				pDisplayImageDevice.setImage(null)
				pDisplayImageDevice.setMinimumSize(Point.new(pIconHeight, pIconHeight))
				
				pLabelDevice.setText(" ")
			end
			
			if pInputButton != null
				var Image image = pInputButton.getLargestDisplayIconY(pIconHeight)
				if image != null
					pDisplayImageSource.setImage(image)
					pDisplayImageSource.setMinimumSize(null)
					
				else
					pDisplayImageSource.setImage(null)
					pDisplayImageSource.setMinimumSize(Point.new(pIconHeight, pIconHeight))
				end
				pDisplayImageSource.setVisible(true)
				
				var String text = pInputButton.getDisplayText()
				if text.empty()
					text = " "
				end
				pLabelSource.setText(text)
				pLabelSource.setVisible(true)
				
				pDisplayImageDevice.setVisible(pInputDevice != null)
				pLabelDevice.setVisible(pInputDevice != null)
				
			elif pInputAxis != null
				var Image image = pInputAxis.getLargestDisplayIconY(pIconHeight)
				if image != null
					pDisplayImageSource.setImage(image)
					pDisplayImageSource.setMinimumSize(null)
					
				else
					pDisplayImageSource.setImage(null)
					pDisplayImageSource.setMinimumSize(Point.new(pIconHeight, pIconHeight))
				end
				pDisplayImageSource.setVisible(true)
				
				var String text = pInputAxis.getDisplayText()
				if text.empty()
					text = " "
				end
				pLabelSource.setText(text)
				pLabelSource.setVisible(true)
				
				pDisplayImageDevice.setVisible(pInputDevice != null)
				pLabelDevice.setVisible(pInputDevice != null)
				
			else
				pDisplayImageSource.setImage(null)
				pDisplayImageSource.setMinimumSize(Point.new(pIconHeight, pIconHeight))
				pDisplayImageSource.setVisible(false)
				
				pLabelSource.setText(" ")
				pLabelSource.setVisible(false)
				
				pDisplayImageDevice.setVisible(true)
				pLabelDevice.setVisible(true)
			end
		end)
		
		doLayoutIfBlocked()
	end
	
	
	
	/** \brief Size changed. */
	/*
	func void onResize(WidgetEvent event)
		super.onResize(event)
		updateWidgets()
	end
	*/
end
