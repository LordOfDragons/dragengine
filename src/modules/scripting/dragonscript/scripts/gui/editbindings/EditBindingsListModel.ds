/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */


namespace Dragengine.Gui

pin Dragengine.Commands
pin Dragengine.Gui.Events
pin Dragengine.Gui.Listeners
pin Dragengine.Scenery
pin Dragengine.Utils


/**
 * \brief List model for ListBoxEditBindings.
 * 
 * Contains instances of EditBindingsListModelEntry.
 */
class EditBindingsListModel extends DefaultListModel
	/** \brief Binding manager. */
	private var BindingManager pBindingManager
	
	
	
	/**
	 * \brief Create empty list model.
	 * 
	 * Add commands to edit to the list. Binding manager is used to find the bound bindings
	 * for each command in the list.
	 * 
	 * \param bindingManager Binding manager to use.
	 */
	public func new( BindingManager bindingManager )
		if bindingManager == null
			throw EInvalidParam.new()
		end
		
		this.pBindingManager = bindingManager
	end
	
	
	
	/** \brief Binding manager. */
	public func BindingManager getBindingManager()
		return this.pBindingManager
	end
	
	/** \brief Entry at index. */
	public func EditBindingsListModelEntry getEntryAt( int index )
		return this.getAt( index ) cast EditBindingsListModelEntry
	end
	
	/** \brief Entry with command or \em null if not found. */
	public func EditBindingsListModelEntry getEntryWith( Command command )
		var EditBindingsListModelEntry entry
		var int i, count = this.getCount()
		
		for i = 0 to count
			entry = this.getAt( i ) cast EditBindingsListModelEntry
			if entry.getCommand() == command
				return entry
			end
		end
		
		return null
	end
	
	/** \brief Entry with command or \em null if not found. */
	public func EditBindingsListModelEntry getEntryWith( String commandName )
		var EditBindingsListModelEntry entry
		var int i, count = this.getCount()
		
		for i = 0 to count
			entry = this.getAt( i ) cast EditBindingsListModelEntry
			if entry.getCommand().getName().equals( commandName )
				return entry
			end
		end
		
		return null
	end
	
	/** \brief Visit entries with block with parameter EditBindingsListModelEntry. */
	public func void forEachEntry( Block ablock )
		var int i, count = this.getCount()
		for i = 0 to count
			ablock.run( this.getAt( i ) cast EditBindingsListModelEntry )
		end
	end
	
	
	
	/** \brief Notify all that the content of the model in the given range changed. */
	public func void notifyContentChanged( int fromIndex, int toIndex )
		this.updateBindings( fromIndex, toIndex )
		super.notifyContentChanged( fromIndex, toIndex )
	end
	
	/** \brief Notify all elements have been added. */
	public func void notifyElementsAdded( int fromIndex, int toIndex )
		this.updateBindings( fromIndex, toIndex )
		super.notifyElementsAdded( fromIndex, toIndex )
	end
	
	/** \brief Notify all elements have been removed. */
	public func void notifyElementsRemoved( int fromIndex, int toIndex )
		this.updateBindings( fromIndex, toIndex )
		super.notifyElementsRemoved( fromIndex, toIndex )
	end
	
	
	
	/** \brief Update bindings in range. */
	protected func void updateBindings( int fromIndex, int toIndex )
		var int i, lastIndex = toIndex + 1
		for i = fromIndex to lastIndex
			( this.getAt( i ) cast EditBindingsListModelEntry ).updateBindings( this )
		end
	end
end
