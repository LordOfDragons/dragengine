/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */


namespace Dragengine.Gui

pin Dragengine.Commands
pin Dragengine.Gui.Borders
pin Dragengine.Gui.Decorations
pin Dragengine.Gui.Events
pin Dragengine.Gui.Layouts
pin Dragengine.Gui.Listeners
pin Dragengine.Scenery
pin Dragengine.Utils


/**
 * \brief Window capturing binding.
 * 
 * Calls ResultListener with captured CaptureResult or null if InputDevice.KEY_ESCAPE is pressed.
 */
public class WindowCaptureBinding extends WindowDialog
	/** \brief Capture result. */
	public class CaptureResult
		var EditBindingsListModelEntry.InputSource pInputSource
		var InputEventSource pSystem
		var int pDeviceIndex
		var int pSourceIndex
		var bool pInverseAxis
		
		/**
		 * \brief Create capture result.
		 * \deprecated Use new(EditBindingsListModelEntry.InputSource,InputEventSource,int,int,bool)
		 */
		func new(EditBindingsListModelEntry.InputSource inputSource, int deviceIndex,\
		int sourceIndex, bool inverseAxis) this(inputSource, InputEventSource.input,\
		deviceIndex, sourceIndex, inverseAxis)
		end
		
		/**
		 * \brief Create capture result.
		 * \version 1.6
		 */
		func new(EditBindingsListModelEntry.InputSource inputSource,\
		InputEventSource system, int deviceIndex, int sourceIndex, bool inverseAxis)
			pInputSource = inputSource
			pSystem = system
			pDeviceIndex = deviceIndex
			pSourceIndex = sourceIndex
			pInverseAxis = inverseAxis
		end
		
		/** \brief Input source. */
		func EditBindingsListModelEntry.InputSource getInputSource()
			return pInputSource
		end
		
		/**
		 * \brief Captured device system.
		 * \version 1.6
		 */
		func InputEventSource getSystem()
			return pSystem
		end
		
		/** \brief Captured device index. */
		func int getDeviceIndex()
			return pDeviceIndex
		end
		
		/** \brief Captured source index. */
		func int getSourceIndex()
			return pSourceIndex
		end
		
		/** \brief Inverse axis. */
		func bool getInverseAxis()
			return pInverseAxis
		end
		
		
		
		/**
		 * \brief Device or null if not set.
		 * \version 1.6
		 */
		func InputDevice getInputDevice()
			if pDeviceIndex == -1
				return null
			end
			
			select pSystem
			case InputEventSource.input
				return InputSystem.getDeviceAt(pDeviceIndex)
				
			case InputEventSource.vr
				return VRSystem.getDeviceAt(pDeviceIndex)
			end
			
			return null
		end
		
		/**
		 * \brief Device axis or null if not set.
		 * \version 1.6
		 */
		func InputDeviceAxis getInputDeviceAxis()
			if pSourceIndex != -1
				var InputDevice device = getInputDevice()
				if device != null
					return device.getAxisAt(pSourceIndex)
				end
			end
			return null
		end
		
		/**
		 * \brief Device button or null if not set.
		 * \version 1.6
		 */
		func InputDeviceButton getInputDeviceButton()
			if pSourceIndex != -1
				var InputDevice device = getInputDevice()
				if device != null
					return device.getButtonAt(pSourceIndex)
				end
			end
			return null
		end
		
		/**
		 * \brief Device feedback or null if not set.
		 * \version 1.6
		 */
		func InputDeviceFeedback getInputDeviceFeedback()
			if pSourceIndex != -1
				var InputDevice device = getInputDevice()
				if device != null
					return device.getFeedbackAt(pSourceIndex)
				end
			end
			return null
		end
	end
	
	/** \brief Close dialog listener setting capture. */
	public class CaptureAxisListener extends DefaultMouseListener
		var WindowDialog pDialog
		var InputEventSource pSystem
		var int pDeviceIndex
		var int pAxisIndex
		var ToggleModel pInverseAxis
		
		/**
		 * \brief Create action listener with null result.
		 * \deprecated Use new(WindowDialog,InputEventSource,int,int,ToggleModel)
		 */
		func new(WindowDialog dialog, int deviceIndex, int axisIndex, ToggleModel inverseAxis) \
		this(dialog, InputEventSource.input, deviceIndex, axisIndex, inverseAxis)
		end
		
		/**
		 * \brief Create action listener with null result.
		 * \version 1.6
		 */
		func new(WindowDialog dialog, InputEventSource system, int deviceIndex,\
		int axisIndex, ToggleModel inverseAxis)
			pDialog = dialog
			pSystem = system
			pDeviceIndex = deviceIndex
			pAxisIndex = axisIndex
			pInverseAxis = inverseAxis
		end
		
		/** \brief Mouse button has been pressed. */
		func void onButtonPress(MouseEvent event)
			if event.getButton() != InputEventMouseButton.left
				return
			end
			
			WindowDialog.CloseDialog.new(pDialog, CaptureResult.new(\
				EditBindingsListModelEntry.InputSource.axis, pDeviceIndex,\
				pAxisIndex, pInverseAxis.getToggled())) \
					.onAction(ActionEvent.new(event.getSource(), ActionEvent.idAction, 0))
		end
		
		
		
		/**
		 * \brief Device or null if not set.
		 * \version 1.6
		 */
		func InputDevice getInputDevice()
			if pDeviceIndex == -1
				return null
			end
			
			select pSystem
			case InputEventSource.input
				return InputSystem.getDeviceAt(pDeviceIndex)
				
			case InputEventSource.vr
				return VRSystem.getDeviceAt(pDeviceIndex)
			end
			
			return null
		end
		
		/**
		 * \brief Device axis or null if not set.
		 * \version 1.6
		 */
		func InputDeviceAxis getInputDeviceAxis()
			if pAxisIndex != -1
				var InputDevice device = getInputDevice()
				if device != null
					return device.getAxisAt(pAxisIndex)
				end
			end
			return null
		end
	end
	
	
	
	var EditBindingsListModelEntry.InputSource pInputSource
	var DefaultToggleModel pModelInverseAxis
	
	
	
	/**
	 * \brief Create dialog window.
	 * 
	 * \param inputSource Input source allowed to capture. Has to be
	 *                    EditBindingsListModelEntry.InputSource.axis
	 *                    or EditBindingsListModelEntry.InputSource.button .
	 */
	func new(EditBindingsListModelEntry.InputSource inputSource)
		pInputSource = inputSource
		pModelInverseAxis = DefaultToggleModel.new()
		setCanFocus(true)
		setDesignerSelector("WindowDialog.CaptureBinding")
	end
	
	/**
	 * \brief Create window with the given geometry.
	 * 
	 * \param inputSource Input source allowed to capture. Has to be
	 *                    EditBindingsListModelEntry.InputSource.axis
	 *                    or EditBindingsListModelEntry.InputSource.button .
	 * \param x X position.
	 * \param y Y position.
	 * \param width Width.
	 * \param height Height.
	 */
	func new(EditBindingsListModelEntry.InputSource inputSource,\
	int x, int y, int width, int height) super(x, y, width, height)
		pInputSource = inputSource
		pModelInverseAxis = DefaultToggleModel.new()
		setCanFocus(true)
	end
	
	/** \brief Dispose of widget. */
	public func void dispose()
		pModelInverseAxis = null
		super.dispose()
	end
	
	
	
	/** \brief Type of input to capture from EditBindingsListModelEntry.* . */
	func EditBindingsListModelEntry.InputSource getInputSource()
		return pInputSource
	end
	
	
	
	/**
	 * \brief Show dialog asking user to push an axis or press a button.
	 * 
	 * Displays a dialog with a label asking for input. The user has to provide the input or
	 * press escape to abort. No buttons are shown since mouse movement counts as input.
	 * 
	 * \param bindingManager Binding manager.
	 * \param inputSource Input source allowed to capture. Has to be
	 *                    EditBindingsListModelEntry.InputSource.axis or EditBindingsListModelEntry.InputSource.button .
	 * \param window Window to block while dialog window is shown.
	 * \param title Title of the dialog window.
	 * \param message Message to show.
	 * \param listener Listener to call closing message box.
	 */
	public static func WindowCaptureBinding captureInput(BindingManager bindingManager,\
	EditBindingsListModelEntry.InputSource inputSource, Window window, String title,\
	String message, ResultListener listener)
		var WindowCaptureBinding dialog = WindowCaptureBinding.new(inputSource, 0, 0, 200, 200)
		
		dialog.runWhileBlockingLayout(block
			dialog.setLayout(BoxLayout.new(LayoutAxis.y, 0))
			dialog.setCanResize(false)
			dialog.setTitle(title)
			dialog.setResult(null) // result for closing window without button
			dialog.setResultListener(listener)
			
			// message
			var Label label = Label.new(message)
			label.setDesignerSelector("Label.WindowDialog.CaptureBinding")
			label.setWordWrap(true)
			dialog.addWidget(label)
			
			// add mouse axis buttons if required. for button input axis input is possible
			// too but mouse does not work for this
			if inputSource == EditBindingsListModelEntry.InputSource.axis
				var InputDevice device = bindingManager.findDevice(block InputDevice each
					return each.getType() == InputDeviceType.mouse
				end)
				
				if device != null
					dialog.addWidget(Panel.new(CentrizedBoxLayout.new(LayoutAxis.x, 5),\
					block Panel panelButton
						panelButton.setDesignerSelector("Panel.WindowDialogButtons.CaptureBinding")
						
						var DisplayInputSource dpi
						dpi = DisplayInputSource.new(32, null, device.getAxisAt(0))
						dpi.setDesignerSelector("DisplayInputSource.WindowDialog.CaptureBinding")
						panelButton.addWidget(dpi)
						dpi.addMouseListener(CaptureAxisListener.new(dialog,\
							device.getSource(), device.getIndex(), 0, dialog.pModelInverseAxis))
						
						dpi = DisplayInputSource.new(32, null, device.getAxisAt(1))
						dpi.setDesignerSelector("DisplayInputSource.WindowDialog.CaptureBinding")
						panelButton.addWidget(dpi)
						dpi.addMouseListener(CaptureAxisListener.new(dialog,\
							device.getSource(), device.getIndex(), 1, dialog.pModelInverseAxis))
						
						panelButton.addWidget(CheckBox.new(dialog.pModelInverseAxis, "Invert"))
					end), BorderLayout.Area.bottom)
				end
			end
		end)
		
		// show dialog
		dialog.show(window, false, WindowModal.Placement.window)
		
		dialog.setSize(Point.new(200, 200).largest(dialog.getMinimumSize()))
		dialog.doLayout()
		
		dialog.grabFocus()
		
		/* if we do this the user can not click the close button anymore to cancel the capture
		if inputSource != EditBindingsListModelEntry.InputSource.axis
			dialog.captureMouse()
		end
		*/
		
		return dialog
	end
	
	
	
	/**
	 * \brief Close dialog.
	 * \details Unblocks window and sends notification with result to listener if present.
	 */
	func void close()
		releaseMouse()
		super.close()
	end
	
	
	
	/** \brief Key pressed event. */
	func void onKeyPress(KeyEvent event)
		if pInputSource != EditBindingsListModelEntry.InputSource.button
			super.onKeyPress(event)
			return
		end
		
		if event.getDevice() == -1
			// generated event
			super.onKeyPress(event)
			return
		end
		
		setResult(CaptureResult.new(EditBindingsListModelEntry.InputSource.button,\
			event.getSystem(), event.getDevice(), event.getButtonCode(), false))
		requestClose()
	end
	
	/** \brief Mouse button pressed. */
	func void onButtonPress(MouseEvent event)
		if pInputSource != EditBindingsListModelEntry.InputSource.button
			super.onButtonPress(event)
			return
		end
		
		// we have to be clever while handling  we have captured the mouse so the user can
		// not click the close button on the window to abort binding. we have to see if the
		// mouse pointer is currently over the close button of our decorator if present. if
		// this is the case we have to event down to the desktop itself to handle things
		// correctly
		var Decoration decoration = getDecoration()
		if decoration != null
			var Desktop desktop = getDesktop()
			if decoration.areaHitBy(desktop.getMouseLocation()) == Decoration.Area.close
				requestClose()
				return
			end
		end
		
		// otherwise capture the input
		if event.getDevice() == -1
			// generated event
			super.onButtonPress(event)
			return
		end
		
		setResult(CaptureResult.new(EditBindingsListModelEntry.InputSource.button,\
			event.getSystem(), event.getDevice(), event.getButton(), false))
		requestClose()
	end
	
	/** \brief Mouse wheel moved. */
	func void onMouseWheel(MouseEvent event)
		/*if pInputSource != EditBindingsListModelEntry.InputSource.axis
			super.onMouseWheel(event)
			return
		end*/
		
		if event.getDevice() == -1
			// generated event
			super.onMouseWheel(event)
			return
		end
		
		var Point position = event.getPosition()
		
		if position.getX() > 0
			setResult(CaptureResult.new(EditBindingsListModelEntry.InputSource.axis,\
				event.getSystem(), event.getDevice(), event.getButton(), false))
			requestClose()
			
		elif position.getX() < 0
			setResult(CaptureResult.new(EditBindingsListModelEntry.InputSource.axis,\
				event.getSystem(), event.getDevice(), event.getButton(), true))
			requestClose()
			
		elif position.getY() > 0
			setResult(CaptureResult.new(EditBindingsListModelEntry.InputSource.axis,\
				event.getSystem(), event.getDevice(), event.getButton(), false))
			requestClose()
			
		elif position.getY() < 0
			setResult(CaptureResult.new(EditBindingsListModelEntry.InputSource.axis,\
				event.getSystem(), event.getDevice(), event.getButton(), true))
			requestClose()
		end
	end
	
	/** \brief Gamepad axis moved. */
	func void onGamepadAxisMoved(GamepadEvent event)
		/*if pInputSource != EditBindingsListModelEntry.InputSource.axis
			super.onGamepadAxisMoved(event)
			return
		end*/
		
		select event.getInputAxisType()
		case InputDeviceAxisType.stick, InputDeviceAxisType.steeringWheel
			if DEMath.fabs(event.getAxisValue()) < 0.8
				super.onGamepadAxisMoved(event)
				return
			end
			
			var bool inverseAxis
			if pInputSource == EditBindingsListModelEntry.InputSource.axis
				inverseAxis = pModelInverseAxis.getToggled()
				
			else
				inverseAxis = event.getAxisValue() > 0
			end
			
			setResult(CaptureResult.new(EditBindingsListModelEntry.InputSource.axis,\
				event.getSystem(), event.getDevice(), event.getCode(), inverseAxis))
			requestClose()
			
		else
			if event.getAxisValue() < 0.8
				super.onGamepadAxisMoved(event)
				return
			end
			
			setResult(CaptureResult.new(EditBindingsListModelEntry.InputSource.axis,\
				event.getSystem(), event.getDevice(), event.getCode(), false))
			requestClose()
		end
	end
	
	/** \brief Gamepad button pressed. */
	func void onGamepadButtonPressed(GamepadEvent event)
		if pInputSource != EditBindingsListModelEntry.InputSource.button
			super.onGamepadButtonPressed(event)
			return
		end
		
		setResult(CaptureResult.new(EditBindingsListModelEntry.InputSource.button,\
			event.getSystem(), event.getDevice(), event.getCode(), false))
		requestClose()
	end
end
