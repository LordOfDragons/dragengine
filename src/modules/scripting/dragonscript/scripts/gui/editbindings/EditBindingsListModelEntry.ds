/* 
 * Drag[en]gine DragonScript Script Module
 *
 * Copyright (C) 2020, Roland Pl√ºss (roland@rptd.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */


namespace Dragengine.Gui

pin Dragengine.Commands
pin Dragengine.Gui.Events
pin Dragengine.Gui.Listeners
pin Dragengine.Scenery
pin Dragengine.Utils


/**
 * \brief Command entry in EditBindingsListModel.
 */
class EditBindingsListModelEntry
	/** \brief Input source. */
	enum InputSource
		/** \brief Axis input. */
		axis
		
		/** \brief Button input. */
		button
	end
	
	
	
	var Command pCommand
	var InputSource pInputSource
	var Array pAxisBindings
	var Array pButtonBindings
	
	
	
	/**
	 * \brief Create command entry for EditBindingsListModel.
	 * 
	 * List of bindings is empty. Use updateBindings() to update the list. The input
	 * source defines what kind of bindings can be ued. Only matching input device
	 * sources are allowed to be used.
	 * 
	 * \param command Command to show.
	 * \param inputSource Input source required for this command.
	 */
	func new(Command command, InputSource inputSource)
		if command == null
			throw EInvalidParam.new()
		end
		
		pCommand = command
		pInputSource = inputSource
		pAxisBindings = Array.new()
		pButtonBindings = Array.new()
	end
	
	
	
	/** \brief Command. */
	func Command getCommand()
		return pCommand
	end
	
	/** \brief Input source. */
	func InputSource getInputSource()
		return pInputSource
	end
	
	
	
	/** \brief Number of axis bindings. */
	func int getAxisBindingCount()
		return pAxisBindings.getCount()
	end
	
	/** \brief Axis binding at index. */
	func Binding getAxisBindingAt(int index)
		return pAxisBindings.getAt(index) cast Binding
	end
	
	/**
	 * \brief Axis binding is present.
	 * \version 1.20
	 */
	func bool hasAxisBinding(Binding binding)
		return pAxisBindings.has(binding)
	end
	
	/** \brief Visit axis bindings with block with parameter Binding. */
	func void forEachAxisBinding(Block ablock)
		pAxisBindings.forEach(ablock)
	end
	
	/**
	 * \brief Add axis binding.
	 * 
	 * Call model.notifyContentChanged(int, int) to notifiy listeners about the change.
	 */
	func void addAxisBinding(Binding binding)
		if binding == null
			throw EInvalidParam.new()
		end
		pAxisBindings.add(binding)
	end
	
	/**
	 * \brief Remove all axis bindings.
	 * 
	 * Call model.notifyContentChanged(int, int) to notifiy listeners about the change.
	 */
	func void removeAllAxisBindings()
		pAxisBindings.removeAll()
	end
	
	/**
	 * \brief Remove axis binding.
	 * \version 1.20
	 * 
	 * Call model.notifyContentChanged(int, int) to notifiy listeners about the change.
	 */
	func void removeAxisBinding(Binding binding)
		pAxisBindings.remove(binding)
	end
	
	
	
	/** \brief Number of button bindings. */
	func int getButtonBindingCount()
		return pButtonBindings.getCount()
	end
	
	/** \brief Button binding at index. */
	func Binding getButtonBindingAt(int index)
		return pButtonBindings.getAt(index) cast Binding
	end
	
	/**
	 * \brief Button binding is present.
	 * \version 1.20
	 */
	func bool hasButtonBinding(Binding binding)
		return pButtonBindings.has(binding)
	end
	
	/** \brief Visit button bindings with block with parameter Binding. */
	func void forEachButtonBinding(Block ablock)
		pButtonBindings.forEach(ablock)
	end
	
	/**
	 * \brief Add button binding.
	 * 
	 * Call model.notifyContentChanged(int, int) to notifiy listeners about the change.
	 */
	func void addButtonBinding(Binding binding)
		if binding == null
			throw EInvalidParam.new()
		end
		pButtonBindings.add(binding)
	end
	
	/**
	 * \brief Remove all button bindings.
	 * 
	 * Call model.notifyContentChanged(int, int) to notifiy listeners about the change.
	 */
	func void removeAllButtonBindings()
		pButtonBindings.removeAll()
	end
	
	/**
	 * \brief Remove button binding.
	 * \version 1.20
	 * 
	 * Call model.notifyContentChanged(int, int) to notifiy listeners about the change.
	 */
	func void removeButtonBinding(Binding binding)
		pButtonBindings.remove(binding)
	end
	
	
	
	/**
	 * \brief Update bindings.
	 * 
	 * Call after bindings affecting command changed in the bindings manager. Call
	 * model.notifyContentChanged(int, int) to notifiy listeners about the change.
	 */
	func void updateBindings(EditBindingsListModel model)
		pAxisBindings.removeAll()
		pButtonBindings.removeAll()
		
		model.getBindingManager().forEachAxisBinding(block Binding each
			if each.getCommand() == pCommand
				pAxisBindings.add(each)
			end
		end)
		
		model.getBindingManager().forEachButtonBinding(block Binding each
			if each.getCommand() == pCommand
				pButtonBindings.add(each)
			end
		end)
	end
end
