/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */


namespace Dragengine.Gui

pin Dragengine.Commands
pin Dragengine.Gui.Events
pin Dragengine.Gui.Listeners
pin Dragengine.Scenery
pin Dragengine.Utils


/**
 * \brief Command entry in EditBindingsListModel.
 */
class EditBindingsListModelEntry
	/** \brief Input source. */
	enum InputSource
		/** \brief Axis input. */
		axis
		
		/** \brief Button input. */
		button
	end
	
	
	
	var Command pCommand
	var InputSource pInputSource
	var Array pAxisBindings
	var Array pButtonBindings
	
	
	
	/**
	 * \brief Create command entry for EditBindingsListModel.
	 * 
	 * List of bindings is empty. Use updateBindings() to update the list. The input
	 * source defines what kind of bindings can be ued. Only matching input device
	 * sources are allowed to be used.
	 * 
	 * \param command Command to show.
	 * \param inputSource Input source required for this command.
	 */
	func new(Command command, InputSource inputSource)
		if command == null
			throw EInvalidParam.new()
		end
		
		pCommand = command
		pInputSource = inputSource
		pAxisBindings = Array.new()
		pButtonBindings = Array.new()
	end
	
	
	
	/** \brief Command. */
	func Command getCommand()
		return pCommand
	end
	
	/** \brief Input source. */
	func InputSource getInputSource()
		return pInputSource
	end
	
	
	
	/** \brief Number of axis bindings. */
	func int getAxisBindingCount()
		return pAxisBindings.getCount()
	end
	
	/** \brief Axis binding at index. */
	func Binding getAxisBindingAt(int index)
		return pAxisBindings.getAt(index) cast Binding
	end
	
	/**
	 * \brief Axis binding is present.
	 * \version 1.20
	 */
	func bool hasAxisBinding(Binding binding)
		return pAxisBindings.has(binding)
	end
	
	/** \brief Visit axis bindings with block with parameter Binding. */
	func void forEachAxisBinding(Block ablock)
		pAxisBindings.forEach(ablock)
	end
	
	/**
	 * \brief Add axis binding.
	 * 
	 * Call model.notifyContentChanged(int, int) to notifiy listeners about the change.
	 */
	func void addAxisBinding(Binding binding)
		if binding == null
			throw EInvalidParam.new()
		end
		pAxisBindings.add(binding)
	end
	
	/**
	 * \brief Remove all axis bindings.
	 * 
	 * Call model.notifyContentChanged(int, int) to notifiy listeners about the change.
	 */
	func void removeAllAxisBindings()
		pAxisBindings.removeAll()
	end
	
	/**
	 * \brief Remove axis binding.
	 * \version 1.20
	 * 
	 * Call model.notifyContentChanged(int, int) to notifiy listeners about the change.
	 */
	func void removeAxisBinding(Binding binding)
		pAxisBindings.remove(binding)
	end
	
	
	
	/** \brief Number of button bindings. */
	func int getButtonBindingCount()
		return pButtonBindings.getCount()
	end
	
	/** \brief Button binding at index. */
	func Binding getButtonBindingAt(int index)
		return pButtonBindings.getAt(index) cast Binding
	end
	
	/**
	 * \brief Button binding is present.
	 * \version 1.20
	 */
	func bool hasButtonBinding(Binding binding)
		return pButtonBindings.has(binding)
	end
	
	/** \brief Visit button bindings with block with parameter Binding. */
	func void forEachButtonBinding(Block ablock)
		pButtonBindings.forEach(ablock)
	end
	
	/**
	 * \brief Add button binding.
	 * 
	 * Call model.notifyContentChanged(int, int) to notifiy listeners about the change.
	 */
	func void addButtonBinding(Binding binding)
		if binding == null
			throw EInvalidParam.new()
		end
		pButtonBindings.add(binding)
	end
	
	/**
	 * \brief Remove all button bindings.
	 * 
	 * Call model.notifyContentChanged(int, int) to notifiy listeners about the change.
	 */
	func void removeAllButtonBindings()
		pButtonBindings.removeAll()
	end
	
	/**
	 * \brief Remove button binding.
	 * \version 1.20
	 * 
	 * Call model.notifyContentChanged(int, int) to notifiy listeners about the change.
	 */
	func void removeButtonBinding(Binding binding)
		pButtonBindings.remove(binding)
	end
	
	
	
	/**
	 * \brief Update bindings.
	 * 
	 * Call after bindings affecting command changed in the bindings manager. Call
	 * model.notifyContentChanged(int, int) to notifiy listeners about the change.
	 */
	func void updateBindings(EditBindingsListModel model)
		pAxisBindings.removeAll()
		pButtonBindings.removeAll()
		
		model.getBindingManager().forEachAxisBinding(block Binding each
			if each.getCommand() == pCommand
				pAxisBindings.add(each)
			end
		end)
		
		model.getBindingManager().forEachButtonBinding(block Binding each
			if each.getCommand() == pCommand
				pButtonBindings.add(each)
			end
		end)
	end
end
