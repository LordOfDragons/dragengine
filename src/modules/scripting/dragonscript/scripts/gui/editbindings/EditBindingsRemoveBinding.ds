/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */


namespace Dragengine.Gui

pin Dragengine.Commands
pin Dragengine.Gui.Borders
pin Dragengine.Gui.Events
pin Dragengine.Gui.Layouts
pin Dragengine.Gui.Listeners
pin Dragengine.Scenery
pin Dragengine.Utils


/**
 * \brief Action removing binding from entry.
 */
public class EditBindingsRemoveBinding extends DefaultActionListener \
implements WindowDialog.ResultListener
	/** \brief Model. */
	private var EditBindingsListModel pModel
	
	/** \brief Entry to remove binding from. */
	private var EditBindingsListModelEntry pEntry
	
	/** \brief Binding to remove. */
	private var Binding pBinding
	
	
	
	/** \brief Create action. */
	public func new( EditBindingsListModel model, \
	EditBindingsListModelEntry entry, Binding binding )
		if model == null or entry == null or binding == null
			throw EInvalidParam.new()
		end
		
		this.pModel = model
		this.pEntry = entry
		this.pBinding = binding
	end
	
	
	
	/** \brief Model. */
	public func EditBindingsListModel getModel()
		return this.pModel
	end
	
	/** \brief Entry to remove binding from. */
	public func EditBindingsListModelEntry getEntry()
		return this.pEntry
	end
	
	/** \brief Binding to remove. */
	public func Binding getBinding()
		return this.pBinding
	end
	
	
	
	/** \brief Perform action. */
	public func void onAction( ActionEvent event )
		var Window window = ( event.getSource() cast Widget ).getWindow()
		
		WindowDialog.question( window, "Remove Binding", \
			"Do you really want to remove binding '" + this.getBindingText() + "'?", \
			null, Array.newWith( \
				WindowDialog.ButtonConfiguration.new( "Yes", true ), \
				WindowDialog.ButtonConfiguration.new( "No", false) ), \
			this )
	end
	
	/** \brief Ask user dialog finished. */
	public func void onResult( Object result )
		if result cast bool
			this.removeEntry()
		end
	end
	
	
	
	/** \brief Remove entry from model. */
	public func void removeEntry()
		select this.pEntry.getInputSource()
		case EditBindingsListModelEntry.InputSource.axis
			this.pModel.getBindingManager().removeAxisBinding( this.pBinding )
			
		case EditBindingsListModelEntry.InputSource.button
			this.pModel.getBindingManager().removeButtonBinding( this.pBinding )
		end
		
		var int index = this.pModel.indexOf( this.pEntry )
		this.pModel.notifyContentChanged( index, index )
	end
	
	
	
	/** \brief Binding text for binding. */
	public func String getBindingText()
		var String deviceID = "??"
		var String sourceID = "??"
		
		var InputDevice device = this.pBinding.getInputDevice()
		if device != null
			deviceID = device.getName()
		end
		
		select this.pEntry.getInputSource()
		case EditBindingsListModelEntry.InputSource.axis
			var InputDeviceAxis axis = this.pBinding.getInputDeviceAxis()
			if axis != null
				sourceID = axis.getName()
			end
			
		case EditBindingsListModelEntry.InputSource.button
			var InputDeviceButton button = this.pBinding.getInputDeviceButton()
			if button != null
				sourceID = button.getName()
			end
		end
		
		return deviceID + ": " + sourceID
	end
end
