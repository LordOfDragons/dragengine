/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */


namespace Dragengine.Gui

pin Dragengine.Commands
pin Dragengine.Gui.Events
pin Dragengine.Gui.Layouts
pin Dragengine.Gui.Listeners
pin Dragengine.Scenery
pin Dragengine.Utils


/**
 * \brief Panel to edit bindings.
 * 
 * Default implementation is a single EditBindingsListBox instance but can be replaced
 * with any custom panel layout desired. The panel creates a copy of the BindingManager
 * to edit. This is the working copy where the changes are made to. The  resetChanges()
 * method is provided to revert the changes to the original binding manager content.
 * Using the applyChanges() method the changes are applied to the original binding manager.
 */
class EditBindingsPanel extends Panel
	var BindingManager pBindingManager
	var BindingManager pEditBindingManager
	var EditBindingsListModel pModel
	var EditBindingsListBox pListBox
	var DefaultTextModel pModelInfo
	
	
	
	/**
	 * \brief Create edit bindings panel.
	 * 
	 * Creates a working copy of the binding manager to edit non-distructive. Create a
	 * EditBindingsListBox for editing. Once created add commands to edit to getEditModel().
	 * 
	 * \param bindingManager Bining manager to edit.
	 */
	func new(BindingManager bindingManager)
		if bindingManager == null
			throw EInvalidParam.new()
		end
		
		pBindingManager = bindingManager
		
		pEditBindingManager = BindingManager.new()
		pModel = EditBindingsListModel.new(pEditBindingManager)
		
		pModelInfo = DefaultTextModel.new()
		
		runWhileBlockingLayout(block
			createContent()
			resetChanges()
		end)
	end
	
	/** \brief Dispose of widget. */
	func void dispose()
		pModel = null
		pListBox = null
		pModelInfo = null
		
		super.dispose()
	end
	
	
	/** \brief Working copy of binding manager. */
	func BindingManager getEditBindingManager()
		return pEditBindingManager
	end
	
	/** \brief Edit bindings list model. */
	func EditBindingsListModel getModel()
		return pModel
	end
	
	/** \brief Edit bindings list box. */
	func EditBindingsListBox getListBox()
		return pListBox
	end
	
	/**
	 * \brief Text model to display command descriptions.
	 * \version1.16
	 */
	func DefaultTextModel getModelInfo()
		return pModelInfo
	end
	
	
	
	/** \brief Reset working binding manager to original binding manager. */
	func void resetChanges()
		pEditBindingManager.removeAllAxisBindings()
		pBindingManager.forEachAxisBinding(block Binding each
			pEditBindingManager.addAxisBinding(Binding.new(each))
		end)
		
		pEditBindingManager.removeAllButtonBindings()
		pBindingManager.forEachButtonBinding(block Binding each
			pEditBindingManager.addButtonBinding(Binding.new(each))
		end)
		
		pEditBindingManager.updateAllBindingIndices()
		
		pModel.notifyContentChanged(0, pModel.getCount() - 1)
	end
	
	/** \brief Copy working binding manager to original binding manager. */
	func void applyChanges()
		pModel.forEachEntry(block EditBindingsListModelEntry entry
			pBindingManager.removeBindingsWithCommand(entry.getCommand())
			
			entry.forEachAxisBinding(block Binding binding
				pBindingManager.addAxisBinding(Binding.new(binding))
			end)
			
			entry.forEachButtonBinding(block Binding binding
				pBindingManager.addButtonBinding(Binding.new(binding))
			end)
		end)
		
		pBindingManager.updateAllBindingIndices()
	end
	
	
	
	/**
	 * \brief Create content with a single EditBindingsListBox.
	 */
	protected func void createContent()
		setLayout(BorderLayout.new(3))
		
		pListBox = EditBindingsListBox.new(pModel)
		addWidget(ScrollPanel.new(pListBox), BorderLayout.Area.content)
		
		pModel.addListener(EditBindingShowDescriptionListener.new(pListBox, pModelInfo))
		
		addWidget(Panel.new(FlowLayout.new(LayoutAxis.y, 2), block Panel p
			var TextArea textArea = TextArea.new(pModelInfo)
			textArea.setReadOnly(true)
			textArea.setRowCount(3)
			textArea.setDesignerSelector("TextArea.EditBindings.CommandInfo")
			p.addWidget(ScrollPanel.new(textArea, ScrollPanel.Policy.hidden, ScrollPanel.Policy.visible))
			
			p.addWidget(Label.new("@UI.Settings.Bindings.Usage"))
		end), BorderLayout.Area.bottom)
	end
end
