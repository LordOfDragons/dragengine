/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */


namespace Dragengine.Gui

pin Dragengine.Gui.Events
pin Dragengine.Scenery


/**
 * \brief Display canvas in the widget.
 */
class DisplayCanvas extends Widget
	var CanvasCanvasView pCanvasCanvas
	var RepeatMode pRepeatMode
	var CanvasView pCanvasView
	
	
	
	/** \brief Create display canvas widget. */
	func new() this(null, RepeatMode.once)
	end
	
	/**
	 * \brief Create display canvas widget.
	 * \throws EInvalidParam \em canvasView is not of type Canvas.VIEW.
	 */
	func new(CanvasView canvasView) this(canvasView, RepeatMode.once)
	end
	
	/**
	 * \brief Create display canvas widget.
	 * \throws EInvalidParam \em canvasView is not of type Canvas.VIEW.
	 */
	func new(CanvasView canvasView, RepeatMode repeatMode)
		pRepeatMode = repeatMode
		pCanvasView = canvasView
		
		pCanvasCanvas = CanvasCanvasView.new()
		pCanvasCanvas.setCanvasView(canvasView)
		getCanvasContent().addCanvas(pCanvasCanvas)
		
		layoutParent()
		updateCanvasCanvas()
	end
	
	
	
	/** Canvas to display or null if not set. */
	func CanvasView getCanvas()
		return pCanvasView
	end
	
	/**
	 * \brief Set canvas view to display.
	 * \throws EInvalidParam \em canvasView is not of type Canvas.VIEW.
	 */
	func void setCanvas(CanvasView canvasView)
		if pCanvasView == canvasView
			return
		end
		
		pCanvasView = canvasView
		pCanvasCanvas.setCanvasView(canvasView)
		
		layoutParent()
		updateCanvasCanvas()
	end
	
	/** \brief Repeat mode. */
	func RepeatMode getRepeatMode()
		return pRepeatMode
	end
	
	/**
	 * \brief Set repeat mode.
	 * \param repeatMode Has to be one of REPEAT_* .
	 */
	func void setRepeatMode(RepeatMode repeatMode)
		if repeatMode == pRepeatMode
			return
		end
		
		pRepeatMode = repeatMode
		
		updateCanvasCanvas()
	end
	
	
	
	/** \brief Minimal size of widget. */
	func Point getMinimumSize()
		if pCanvasView == null or isMinimumSizeSet()
			return super.getMinimumSize()
		end
		
		select pRepeatMode
		case RepeatMode.once, RepeatMode.center
			return pCanvasView.getSize()
			
		case RepeatMode.tileX
			return Point.new(getWidth(), pCanvasView.getSize().getY())
			
		case RepeatMode.tileY
			return Point.new(pCanvasView.getSize().getX(), getHeight())
			
		case RepeatMode.stretch, RepeatMode.stretchRatio, RepeatMode.tile
			return super.getMinimumSize()
			
		else
			throw EInvalidParam.new()
		end
	end
	
	
	
	/** \brief Update canvas canvas. */
	func void updateCanvasCanvas()
		if pCanvasView == null
			return
		end
		
		var Point canvasSize = pCanvasView.getSize()
		var Point contentSize = getCanvasContent().getSize()
		var int repeatX, repeatY
		
		select pRepeatMode
		case RepeatMode.once
			pCanvasCanvas.setRepeatX(1)
			pCanvasCanvas.setRepeatY(1)
			pCanvasCanvas.setSize(pCanvasView.getSize())
			
		case RepeatMode.stretch
			pCanvasCanvas.setRepeatX(1)
			pCanvasCanvas.setRepeatY(1)
			pCanvasCanvas.setSize(contentSize)
			
		case RepeatMode.tileX
			repeatX = DEMath.max(contentSize.getX() - 1, 0) / canvasSize.getX() + 1
			pCanvasCanvas.setRepeatX(repeatX)
			pCanvasCanvas.setRepeatY(1)
			pCanvasCanvas.setSize(Point.new(repeatX, 1).compMultiply(canvasSize))
			
		case RepeatMode.tileY
			repeatY = DEMath.max(contentSize.getY() - 1, 0) / canvasSize.getY() + 1
			pCanvasCanvas.setRepeatX(1)
			pCanvasCanvas.setRepeatY(repeatY)
			pCanvasCanvas.setSize(Point.new(1, repeatY).compMultiply(canvasSize))
			
		case RepeatMode.tile
			repeatX = DEMath.max(contentSize.getX() - 1, 0) / canvasSize.getX() + 1
			repeatY = DEMath.max(contentSize.getY() - 1, 0) / canvasSize.getY() + 1
			pCanvasCanvas.setRepeatX(repeatX)
			pCanvasCanvas.setRepeatY(repeatY)
			pCanvasCanvas.setSize(Point.new(repeatX, repeatY).compMultiply(canvasSize))
			
		case RepeatMode.center
			pCanvasCanvas.setRepeatX(1)
			pCanvasCanvas.setRepeatY(1)
			pCanvasCanvas.setPosition((contentSize - pCanvasView.getSize()) / 2)
			pCanvasCanvas.setSize(pCanvasView.getSize())
			
		case RepeatMode.stretchRatio
			var Point newSize = contentSize
			if canvasSize > Point.new()
				var int stretched = canvasSize.getY() * contentSize.getX() / canvasSize.getX()
				if stretched <= contentSize.getY()
					newSize = Point.new(contentSize.getX(), stretched)
					
				else
					stretched = canvasSize.getX() * contentSize.getY() / canvasSize.getY()
					newSize = Point.new(stretched, contentSize.getY())
				end
			end
			
			pCanvasCanvas.setRepeatX(1)
			pCanvasCanvas.setRepeatY(1)
			pCanvasCanvas.setPosition((contentSize - newSize) / 2)
			pCanvasCanvas.setSize(newSize)
		end
	end
	
	
	
	/** \brief Size changed. */
	func void onResize(WidgetEvent event)
		super.onResize(event)
		updateCanvasCanvas()
	end
end
