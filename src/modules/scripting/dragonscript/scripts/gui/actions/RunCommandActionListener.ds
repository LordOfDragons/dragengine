/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */


namespace Dragengine.Gui

pin Dragengine.Commands
pin Dragengine.Gui.Events

/**
 * \brief Action listener running a command.
 */
class RunCommandActionListener extends DefaultActionListener
	/** \brief Command manager. */
	private var CommandManager pCommandManager
	
	/** \brief Name of command to execute. */
	private var String pCommand
	
	
	
	/** \brief Create action listener. */
	public func new( CommandManager manager, String command )
		if manager == null or command == null
			throw EInvalidParam.new()
		end
		
		this.pCommandManager = manager
		this.pCommand = command
	end
	
	
	
	/**
	 * \brief Perform action.
	 * \details Command is looked up in the command manager using a string identifier.
	 *          If found the command Command.start() and Command.stop() is called
	 *          in this order without delay. If not found nothing is done.
	 */
	public func void onAction( ActionEvent event )
		var Command command = this.pCommandManager.getNamed( this.pCommand )
		
		if command == null
			return
		end
		
		command.start()
		command.stop()
	end
end
