/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */


namespace Dragengine.LoadSave

pin Dragengine.Gui.Designers
pin Dragengine.Scenery
pin Dragengine.Utils
pin Dragengine.XML



/**
 * \brief Load designer from xml file.
 */
class LoadWidgetDesigner extends BaseXmlLoader
	var Dictionary pLoadedDesigners
	var LoadCanvasCreator pCanvasCreatorLoader
	var LoadBorder pBorderLoader
	var LoadDecoration pDecorationLoader
	var LoadMousePointer pMousePointerLoader
	var WidgetDesigners pDesigners
	
	
	
	/** \brief Create loader. */
	func new(Console console) this(console, "LoadWidgetDesigner")
	end
	
	/** \brief Create loader. */
	func new(Console console, String name) super(console, name)
		pLoadedDesigners = Dictionary.new()
		pDesigners = WidgetDesigners.new()
		pDesigners.addDefaultDesigners()
	end
	
	
	
	/** \brief Canvas creator loader. */
	func LoadCanvasCreator getCanvasCreatorLoader()
		return pCanvasCreatorLoader
	end
	
	/** \brief Set canvas creator loader. */
	func void setCanvasCreatorLoader(LoadCanvasCreator loader)
		pCanvasCreatorLoader = loader
	end
	
	/** \brief Border loader. */
	func LoadBorder getBorderLoader()
		return pBorderLoader
	end
	
	/** \brief Set border loader. */
	func void setBorderLoader(LoadBorder loader)
		pBorderLoader = loader
	end
	
	/** \brief Decoration loader. */
	func LoadDecoration getDecorationLoader()
		return pDecorationLoader
	end
	
	/** \brief Set decoration loader. */
	func void setDecorationLoader(LoadDecoration loader)
		pDecorationLoader = loader
	end
	
	/** \brief Mouse pointer loader. */
	func LoadMousePointer getMousePointerLoader()
		return pMousePointerLoader
	end
	
	/** \brief Set mouse pointer loader. */
	func void setMousePointerLoader(LoadMousePointer loader)
		pMousePointerLoader = loader
	end
	
	
	
	/** \brief Designers. */
	func WidgetDesigners getDesigners()
		return pDesigners
	end
	
	/** \brief Set designers. */
	func void setDesigners(WidgetDesigners designers)
		if designers == null
			throw EInvalidParam.new()
		end
		pDesigners = designers
	end
	
	
	
	/**
	 * \brief Load widget designer from xml file.
	 * 
	 * Widget designers are shared. Do not modify directly. If you need to modify them
	 * call copyDesigner() first.
	 */
	func WidgetDesigner loadFromFile(String filename)
		var WidgetDesigner designer = pLoadedDesigners.getAt(\
			filename, null) cast WidgetDesigner
		if designer!= null
			return designer
		end
		
		logLoadingFromFile(filename)
		
		if not FileSystem.existsFile(filename) and filename.endsWith(".wdesigner.xml")
			var String filename2 = filename.substring(0, -14) + ".dedesigner"
			if FileSystem.existsFile(filename2)
				printOnConsole(filename, "Renamed to '{}'. Please use new filename.".\
					format(Array.newWith(filename2)))
				filename = filename2
			end
		end
		
		var EasyXML document = EasyXML.new(filename)
		if document.hasParseFailed()
			logParsingFailed(document.getParseLog())
			throw EInvalidParam.new()
		end
		
		var EasyXMLElement root = document.getRootElement()
		if not root.getTagName().equals("designer")
			logUnknownTag(filename, root)
			throw EInvalidParam.new()
		end
		
		var String basePath = File.new(filename).getParent().getPath()
		
		designer = parseWidgetDesigner(filename, root, basePath)
		pLoadedDesigners.setAt(filename, designer)
		return designer
	end
	
	
	
	/**
	 * \brief Parse widget designer tag.
	 * \details This is public to be used by LoadGuiTheme.
	 */
	func WidgetDesigner parseWidgetDesigner(String filename, \
	EasyXMLElement root, String basePath)
		return parseWidgetDesigner(filename, root, basePath, null)
	end
	
	/**
	 * \brief Parse widget designer tag.
	 * \details This is public to be used by LoadGuiTheme.
	 */
	func WidgetDesigner parseWidgetDesigner(String filename, \
	EasyXMLElement root, String basePath, GuiTheme guitheme)
		var WidgetDesigner designer
		
		if root.hasAttributeNamed("extend")
			try
				designer = loadFromFile(File.absolutePath(\
					root.getAttributeNamed("extend"), basePath).getPath())
				
			catch Exception e
				printOnConsole(filename, root, "Failed loading widget designer '" \
					+ root.getAttributeNamed("extend") + "'")
				throw
			end
			
		elif root.hasAttributeNamed("extendNamed")
			if guitheme == null
				printOnConsole(filename, root, "extendNamed used with null guitheme.")
				throw EInvalidParam.new()
			end
			
			try
				designer = guitheme.getNamedWidgetDesigner(root.getAttributeNamed("extendNamed"))
				
			catch Exception e
				printOnConsole(filename, root, "Designer '" \
					+ root.getAttributeNamed("extendNamed") + "' not found.")
				throw
			end
			
		elif root.hasAttributeNamed("type")
			designer = pDesigners.getNamed(root.getAttributeNamed("type"))
			if designer == null
				printOnConsole(filename, root, "Widget designer type '" \
					+ root.getAttributeNamed("type") + "' not found")
				throw EInvalidParam.new()
			end
			
		else
			printOnConsole(filename, root, "Source attribute missing")
			throw EInvalidParam.new()
		end
		
		var int i, elementCount = root.getElementCount()
		var EasyXMLElement element
		var Object parameterValue
		var String parameterName
		var bool isShared = true
		
		for i = 0 to elementCount
			element = root.getElementAt(i)
			if element.getType() != EasyXMLElementType.tag
				continue
			end
			
			if isShared
				designer = designer.copyDesigner()
				isShared = false
			end
			
			parameterName = element.getAttributeNamed("parameter")
			parameterValue = parseParameter(filename, element, basePath, guitheme)
			
			try
				designer.setParameter(parameterName, parameterValue)
				
			catch Exception e
				printOnConsole(filename, element, designer.className() \
					+ " does not understand parameter '" + parameterName \
					+ "' with value '" + parameterValue + "'")
			end
		end
		
		return designer
	end
	
	
	
	/**
	 * \brief Parse designer parameter.
	 * \details Overwrite in subclass to extend the supported parameter types.
	 */
	private func Object parseParameter(String filename, EasyXMLElement element, \
	String basePath, GuiTheme guitheme)
		var String tagName = element.getTagName()
		
		if tagName.equals("integer")
			return element.getFirstCDataInt()
			
		elif tagName.equals("float")
			return element.getFirstCDataFloat()
			
		elif tagName.equals("boolean")
			return element.getFirstCDataBool()
			
		elif tagName.equals("string")
			return element.getFirstCData()
			
		elif tagName.equals("color")
			return readColor(element)
			
		elif tagName.equals("colorMatrix")
			return readColorMatrix(element)
			
		elif tagName.equals("font")
			try
				return readFont(element, basePath)
				
			catch Exception e
				printOnConsole(filename, element, "Failed loading font '" \
					+ element.getFirstCData() + "'")
				throw
			end
			
		elif tagName.equals("image")
			var String path = element.getFirstCData()
			if path.empty()
				return null
			end
			
			try
				return Image.new(File.absolutePath(path, basePath).getPath())
				
			catch Exception e
				printOnConsole(filename, element, "Failed loading image '" + path + "'")
				throw
			end
			
		elif tagName.equals("video")
			var String path = element.getFirstCData()
			if path.empty()
				return null
			end
			
			try
				return Video.new(File.absolutePath(path, basePath).getPath())
				
			catch Exception e
				printOnConsole(filename, element, "Failed loading video '" + path + "'")
				throw
			end
			
		elif tagName.equals("borderSize")
			return readBorderSize(element)
			
		elif tagName.equals("point")
			return readPoint(element)
			
		elif tagName.equals("canvasCreator")
			return pCanvasCreatorLoader.parseCanvasCreator(filename, element, basePath)
			
		elif tagName.equals("border")
			return pBorderLoader.parseBorder(filename, element, basePath)
			
		elif tagName.equals("decoration")
			return pDecorationLoader.parseDecoration(filename, element, basePath)
			
		elif tagName.equals("mousePointer")
			return pMousePointerLoader.parseMousePointer(filename, element, basePath)
			
		elif tagName.equals("designer")
			return parseWidgetDesigner(filename, element, basePath, guitheme)
			
		elif tagName.equals("null")
			return null
			
		else
			logUnknownTag(filename, element)
			throw EInvalidParam.new()
		end
	end
end
