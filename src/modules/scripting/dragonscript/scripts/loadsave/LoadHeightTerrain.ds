/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */


namespace Dragengine.LoadSave

pin Dragengine.Gui
pin Dragengine.Scenery
pin Dragengine.Utils
pin Dragengine.XML



/**
 * Loads an XML Height Terrain Sector.
 */
class LoadHeightTerrain extends BaseXmlLoader
	/** \brief Height terrain navspace loader. */
	private var LoadHeightTerrainNavSpace pLoadHTNavSpace
	
	/** \brief Collision filter to assign to terrain. */
	private var CollisionFilter pCollisionFilter
	
	
	
	/** Creates a new loader. */
	public func new( Console console, LoadHeightTerrainNavSpace loadHTNavSpace ) \
	this( console, "LoadHeightTerrain", loadHTNavSpace )
	end
	
	/** Creates a new loader. */
	public func new( Console console, String name, LoadHeightTerrainNavSpace loadHTNavSpace ) super( console, name )
		this.pLoadHTNavSpace = loadHTNavSpace
		
		var LayerMask cfcategory = LayerMask.newWith( BaseGameApp.CollisionFilterBit.geometry )
		
		var LayerMask cffilter = LayerMask.new()
		cffilter.setBit( BaseGameApp.CollisionFilterBit.dynamic )
		cffilter.setBit( BaseGameApp.CollisionFilterBit.actor )
		cffilter.setBit( BaseGameApp.CollisionFilterBit.actorAI )
		cffilter.setBit( BaseGameApp.CollisionFilterBit.particle )
		
		this.pCollisionFilter = CollisionFilter.new( cfcategory, cffilter )
	end
	
	
	
	/** \brief Collision filter to assign to terrain. */
	public func CollisionFilter getCollisionFilter()
		return this.pCollisionFilter
	end
	
	/** \brief Set collision filter to assign to terrain. */
	public func void setCollisionFilter( CollisionFilter collisionFilter )
		if collisionFilter == null
			throw ENullPointer.new()
		end
		this.pCollisionFilter = collisionFilter
	end
	
	
	
	/** \brief Load height terrain and assign it to game world. */
	public func void loadFromFile( GameWorld world, String filename )
		this.logLoadingFromFile( filename )
		
		var EasyXML document = EasyXML.new( filename )
		if document.hasParseFailed()
			this.logParsingFailed( document.getParseLog() )
			throw EInvalidParam.new()
		end
		
		var EasyXMLElement root = document.getRootElement()
		if not root.getTagName().equals( "heightTerrain" )
			this.logUnknownTag( root )
			throw EInvalidParam.new()
		end
		
		var HeightTerrain heightTerrain = HeightTerrain.new( \
			root.getAttributeFloatNamed( "sectorSize" ), \
			root.getAttributeIntNamed( "sectorResolution" ) )
		heightTerrain.setCollisionFilter( pCollisionFilter )
		
		world.getWorld().setHeightTerrain( heightTerrain )
		
		world.setCachedVegetation( this.createCachedVegetation( heightTerrain ) )
		
		this.pParseHeightTerrain( root, world, heightTerrain, File.new( filename ).getParent().getPath() )
	end
	
	
	
	/** \brief Create cached vegetation. */
	protected func CachedVegetation createCachedVegetation( HeightTerrain heightTerrain )
		return CachedVegetation.new( heightTerrain.getSectorSize(), 10 )
	end
	
	/** \brief Parse height terrain tag. */
	private func void pParseHeightTerrain( EasyXMLElement root, GameWorld world, \
	HeightTerrain heightTerrain, String basePath )
		root.forEachTag( block EasyXMLElement element, String tagName
			if tagName.equals( "baseHeight" )
				heightTerrain.setBaseHeight( element.getFirstCDataFloat() )
				
			elif tagName.equals( "heightScaling" )
				heightTerrain.setHeightScaling( element.getFirstCDataFloat() )
				
			elif tagName.equals( "sector" )
				this.pParseSector( element, world, heightTerrain, basePath )
				
			elif tagName.equals( "vegetationLayer" )
// 				this.logNotSupported( element, "Rule based vegetation" )
			end
		end )
	end
	
	/** Parse sector tag. */
	private func void pParseSector( EasyXMLElement root, GameWorld world, \
	HeightTerrain heightTerrain, String basePath )
		var int sector = heightTerrain.getSectorCount()
		var Point coords = Point.new( root.getAttributeIntNamed( "x" ), root.getAttributeIntNamed( "z" ) )
		heightTerrain.addSector( coords )
		
		root.forEachTag( block EasyXMLElement element, String tagName
			if tagName.equals( "heightImage" )
				var String filename = element.getFirstCData()
				if not filename.empty()
					heightTerrain.setHeightImage( sector, Image.new( \
						File.absolutePath( filename, basePath ).getPath() ) )
				end
				
			elif tagName.equals( "visibilityImage" )
				var String filename = element.getFirstCData()
				if not filename.empty()
					heightTerrain.setVisibilityFromImage( sector, Image.new( \
						File.absolutePath( filename, basePath ).getPath() ) )
				end
				
			elif tagName.equals( "pfcache" )
				var String filename = element.getFirstCData()
				var CachedVegetation cv = world.getCachedVegetation()
				if cv != null and not filename.empty()
					cv.addSector( coords, File.absolutePath( filename, basePath ).getPath() )
				end
				
			elif tagName.equals( "texture" )
				this.pParseTexture( element, heightTerrain, sector, basePath )
				
			elif tagName.equals( "navigationSpace" )
				this.pParseNavSpace( element, heightTerrain, sector, basePath )
			end
		end )
	end
	
	/** Parse texture tag. */
	private func void pParseTexture( EasyXMLElement root, HeightTerrain heightTerrain, \
	int sector, String basePath )
		var int texture = heightTerrain.getTextureCount( sector )
		heightTerrain.addTexture( sector )
		
		root.forEachTag( block EasyXMLElement element, String tagName
			if tagName.equals( "skin" )
				var String filename = element.getFirstCData()
				if not filename.empty()
					filename = File.absolutePath( filename, basePath ).getPath()
					try
						heightTerrain.textureSetSkin( sector, texture, Skin.new( filename ) )
						
					catch Exception e
						this.logLoadFileFailed( element, filename )
					end
				end
				
			elif tagName.equals( "uvOffset" )
				heightTerrain.textureSetUVOffset( sector, texture, this.readVector2UV( element ) )
				
			elif tagName.equals( "uvScaling" )
				heightTerrain.textureSetUVScaling( sector, texture, this.readVector2UV( element ) )
				
			elif tagName.equals( "uvRotation" )
				heightTerrain.textureSetUVRotation( sector, texture, element.getFirstCDataFloat() )
				
			elif tagName.equals( "mask" )
				var String filename = element.getFirstCData()
				if not filename.empty()
					filename = File.absolutePath( filename, basePath ).getPath()
					try
						heightTerrain.textureSetMask( sector, texture, Image.new( filename ) )
						
					catch Exception e
						this.logLoadFileFailed( element, filename )
					end
				end
			end
		end )
	end
	
	/** \brief Parse navspace tag. */
	private func void pParseNavSpace( EasyXMLElement root, HeightTerrain heightTerrain, \
	int sector, String basePath )
		var int navspace = heightTerrain.getNavSpaceCount( sector )
		heightTerrain.addNavSpace( sector )
		
		root.forEachTag( block EasyXMLElement element, String tagName
			if tagName.equals( "layer" )
				heightTerrain.navspaceSetLayer( sector, navspace, element.getFirstCDataInt() )
				
			elif tagName.equals( "snapDistance" )
				heightTerrain.navspaceSetSnapDistance( sector, navspace, element.getFirstCDataFloat() )
				
			elif tagName.equals( "snapAngle" )
				heightTerrain.navspaceSetSnapAngle( sector, navspace, element.getFirstCDataFloat() )
				
			elif tagName.equals( "path" )
				var String filename = element.getFirstCData()
				if not filename.empty()
					filename = File.absolutePath( filename, basePath ).getPath()
					this.pLoadHTNavSpace.loadFromFile( filename, heightTerrain, sector, navspace )
				end
			end
		end )
	end
end
