/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */


namespace Dragengine.LoadSave

pin Dragengine.Gui.MousePointers.Factories
pin Dragengine.Scenery
pin Dragengine.Utils
pin Dragengine.XML



/**
 * \brief Load mouse pointers from xml files.
 */
class LoadMousePointer extends BaseXmlLoader
	/** \brief Dictionary of loaded mouse pointer factories. */
	private var Dictionary pLoadedFactories
	
	/** \brief Canvas creator loader. */
	private var LoadCanvasCreator pCanvasCreatorLoader
	
	/** \brief Factories. */
	private var MousePointerFactories pFactories
	
	
	
	/** \brief Create loader. */
	public func new( Console console ) this( console, "LoadMousePointer" )
	end
	
	/** \brief Create loader. */
	public func new( Console console, String name ) super( console, name )
		this.pLoadedFactories = Dictionary.new()
		this.pFactories = MousePointerFactories.new()
		this.pFactories.addDefaultFactories()
	end
	
	
	
	/** \brief Canvas creator loader. */
	public func LoadCanvasCreator getCanvasCreatorLoader()
		return this.pCanvasCreatorLoader
	end
	
	/** \brief Set canvas creator loader. */
	public func void setCanvasCreatorLoader( LoadCanvasCreator loader )
		this.pCanvasCreatorLoader = loader
	end
	
	
	
	/** \brief Factories. */
	public func MousePointerFactories getFactories()
		return this.pFactories
	end
	
	/** \brief Set factories. */
	public func void setFactories( MousePointerFactories factories )
		if factories == null
			throw EInvalidParam.new()
		end
		this.pFactories = factories
	end
	
	
	
	/**
	 * \brief Load mouse pointer from xml file.
	 * \returns Factory to create instance of the customized mouse pointer.
	 */
	public func MousePointerFactory loadFromFile( String filename )
		var MousePointerFactory factory = this.pLoadedFactories.getAt( filename, null ) cast MousePointerFactory
		if factory != null
			return factory.copyFactory()
		end
		
		this.logLoadingFromFile( filename )
		
		var EasyXML document = EasyXML.new( filename )
		if document.hasParseFailed()
			this.logParsingFailed( document.getParseLog() )
			throw EInvalidParam.new()
		end
		
		var EasyXMLElement root = document.getRootElement()
		if not root.getTagName().equals( "mousePointer" )
			this.logUnknownTag( filename, root )
			throw EInvalidParam.new()
		end
		
		var String basePath = File.new( filename ).getParent().getPath()
		
		factory = this.parseMousePointer( filename, root, basePath )
		this.pLoadedFactories.setAt( filename, factory )
		return factory.copyFactory()
	end
	
	
	
	/**
	 * \brief Parse mouse pointer tag.
	 * \details This is public to be used by LoadGuiTheme.
	 * \returns Factory to create instance of the customized mouse pointer.
	 */
	public func MousePointerFactory parseMousePointer( String filename, EasyXMLElement root, String basePath )
		var MousePointerFactory factory
		
		if root.hasAttributeNamed( "extend" )
			try
				factory = this.loadFromFile( File.absolutePath( \
					root.getAttributeNamed( "extend" ), basePath ).getPath() )
				
			catch Exception e
				this.printOnConsole( filename, root, "Failed loading mouse pointer '" \
					+ root.getAttributeNamed( "extend" ) + "'" )
				throw
			end
			
		elif root.hasAttributeNamed( "type" )
			try
				factory = this.pFactories.getNamed( root.getAttributeNamed( "type" ) )
				
			catch Exception e
				this.printOnConsole( filename, root, "MousePointer factory type '" \
					+ root.getAttributeNamed( "type" ) + "' not found" )
				throw
			end
			
		else
			this.printOnConsole( filename, root, "Missing source attribute" )
			throw EInvalidParam.new()
		end
		
		var int i, elementCount = root.getElementCount()
		var EasyXMLElement element
		var Object parameterValue
		var String parameterName
		var bool isShared = true
		
		for i = 0 to elementCount
			element = root.getElementAt( i )
			if element.getType() != EasyXMLElementType.tag
				continue
			end
			
			if isShared
				factory = factory.copyFactory()
				isShared = false
			end
			
			parameterName = element.getAttributeNamed( "parameter" )
			parameterValue = this.parseParameter( filename, element, basePath )
			
			try
				factory.setParameter( parameterName, parameterValue )
				
			catch Exception e
				this.printOnConsole( filename, element, factory.className() \
					+ " does not understand parameter '" + parameterName \
					+ "' with value '" + parameterValue + "'" )
			end
		end
		
		return factory
	end
	
	/**
	 * \brief Parse mouse pointer parameter.
	 * \details Overwrite in subclass to extend the supported parameter types.
	 */
	public func Object parseParameter( String filename, EasyXMLElement element, String basePath )
		var String tagName = element.getTagName()
		
		if tagName.equals( "integer" )
			return element.getFirstCDataInt()
			
		elif tagName.equals( "float" )
			return element.getFirstCDataFloat()
			
		elif tagName.equals( "boolean" )
			return element.getFirstCDataBool()
			
		elif tagName.equals( "string" )
			return element.getFirstCData()
			
		elif tagName.equals( "color" )
			return this.readColor( element )
			
		elif tagName.equals( "borderSize" )
			return this.readBorderSize( element )
			
		elif tagName.equals( "point" )
			return this.readPoint( element )
			
		elif tagName.equals( "colorMatrix" )
			return this.readColorMatrix( element )
			
		elif tagName.equals( "image" )
			var String path = element.getFirstCData()
			if path.empty()
				return null
			end
			
			try
				return Image.new( File.absolutePath( path, basePath ).getPath() )
				
			catch Exception e
				this.printOnConsole( filename, element, "Failed loading image '" + path + "'" )
				throw
			end
			
		elif tagName.equals( "video" )
			var String path = element.getFirstCData()
			if path.empty()
				return null
			end
			
			try
				return Video.new( File.absolutePath( path, basePath ).getPath() )
				
			catch Exception e
				this.printOnConsole( filename, element, "Failed loading video '" + path + "'" )
				throw
			end
			
		elif tagName.equals( "null" )
			return null
			
		elif tagName.equals( "canvasCreator" )
			return this.pCanvasCreatorLoader.parseCanvasCreator( filename, element, basePath )
			
		else
			this.logUnknownTag( filename, element )
			throw EInvalidParam.new()
		end
	end
end
