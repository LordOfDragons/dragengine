/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */


namespace Dragengine.LoadSave

pin Dragengine.Audio.Announcer
pin Dragengine.Audio.DynamicMusic
pin Dragengine.Audio.MaterialSounds
pin Dragengine.ConversationSystem
pin Dragengine.Gui
pin Dragengine.Utils
pin Dragengine.Scenery



/**
 * \brief Hold all engine provided loaders.
 * 
 * Create an instance of this class in your project to use existing engine loaders.
 * Some loaders can be configurated. You should set their parameters after creating
 * an instance of this class:
 * - getCanvasCreator().getFactories()...
 * - getBorder().getFactories()...
 * - getDecoration().getFactories()...
 * - getDesigner().getFactories()...
 * - getMousePointer().getFactories()...
 * - getWorld().setCollisionFilterDecals(...)
 * - getWorld().setElementClassList(...)
 * 
 * Also provided is an instance of Persistency to support loading and saving complex
 * objects. To use persistency you have to create an instance of PersistencyEnvironment
 * using the configurated persistency instance. Before using persistency you have to
 * add all PersistencyFactory instances you need to the persistency instance. The
 * default cast of factories is added during construction time using
 * addDefaultPersistencyFactories().
 * 
 * Extend class to add your own loaders keeping them in a single place.
 */
class Loaders
	var LoadAnimator pAnimator
	var LoadAnnouncer pAnnouncer
	var LoadBehaviorTree pBehaviorTree
	var LoadStateMachine pStateMachine
	var LoadBorder pBorder
	var LoadCanvasCreator pCanvasCreator
	var LoadConversation pConversation
	var LoadDecoration pDecoration
	var LoadMousePointer pMousePointer
	var LoadWidgetDesigner pWidgetDesigner
	var LoadDynamicMusic pDynamicMusic
	var LoadElementClass pElementClass
	var LoadGuiTheme pGuiTheme
	var LoadHeightTerrainNavSpace pHeightTerrainNavSpace
	var LoadHeightTerrain pHeightTerrain
	var LoadBindings pBindings
	var LoadNavigationSpace pNavigationSpace
	var LoadParticleEmitter pParticleEmitter
	var LoadSky pSky
	var LoadSpeechAnimation pSpeechAnimation
	var LoadStyledTextDefinition pStyledTextDefinition
	var LoadSynthesizer pSynthesizer
	var LoadWorld pWorld
	var LoadParameterTree pParameterTree
	var LoadSkinAnnotations pSkinAnnotations
	var LoadImpactMaterialSound pImpactMaterialSound
	var LoadCamera pCamera
	var Persistency pPersistency
	
	
	
	/** \brief Create loaders instance. */
	func new(Console console)
		if console == null
			throw EInvalidParam.new()
		end
		
		// create loaders
		pAnimator = LoadAnimator.new(console)
		pAnnouncer = LoadAnnouncer.new(console)
		pBehaviorTree = LoadBehaviorTree.new(console)
		pStateMachine = LoadStateMachine.new(console)
		pBorder = LoadBorder.new(console)
		pCanvasCreator = LoadCanvasCreator.new(console)
		pConversation = LoadConversation.new(console)
		pDecoration = LoadDecoration.new(console)
		pMousePointer = LoadMousePointer.new(console)
		pWidgetDesigner = LoadWidgetDesigner.new(console)
		pDynamicMusic = LoadDynamicMusic.new(console)
		pElementClass = LoadElementClass.new(console)
		pGuiTheme = LoadGuiTheme.new(console)
		pHeightTerrainNavSpace = LoadHeightTerrainNavSpace.new(console)
		pBindings = LoadBindings.new(console)
		pNavigationSpace = LoadNavigationSpace.new() // TODO add console
		pParticleEmitter = LoadParticleEmitter.new(console)
		pSky = LoadSky.new(console)
		pSpeechAnimation = LoadSpeechAnimation.new(console)
		pStyledTextDefinition = LoadStyledTextDefinition.new(console)
		pSynthesizer = LoadSynthesizer.new(console)
		pParameterTree = LoadParameterTree.new(console)
		pSkinAnnotations = LoadSkinAnnotations.new(console)
		pImpactMaterialSound = LoadImpactMaterialSound.new(console)
		pCamera = LoadCamera.new(console)
		
		pHeightTerrain = LoadHeightTerrain.new(console, pHeightTerrainNavSpace)
		pWorld = LoadWorld.new(console, pHeightTerrain)
		
		// assign loaders to other loaders required them
		pAnnouncer.setSynthesizerLoader(pSynthesizer)
		
		pBorder.setCanvasCreatorLoader(pCanvasCreator)
		
		pDecoration.setCanvasCreatorLoader(pCanvasCreator)
		
		pMousePointer.setCanvasCreatorLoader(pCanvasCreator)
		
		pWidgetDesigner.setCanvasCreatorLoader(pCanvasCreator)
		pWidgetDesigner.setBorderLoader(pBorder)
		pWidgetDesigner.setMousePointerLoader(pMousePointer)
		pWidgetDesigner.setDecorationLoader(pDecoration)
		
		pGuiTheme.setDecorationLoader(pDecoration)
		pGuiTheme.setWidgetDesignerLoader(pWidgetDesigner)
		
		pImpactMaterialSound.setSynthesizerLoader(pSynthesizer)
		
		// create persistency and add default persistency factories
		pPersistency = Persistency.new(console)
		addDefaultPersistencyFactories(pPersistency)
	end
	
	
	
	/** \brief Animator loader. */
	func LoadAnimator getAnimator()
		return pAnimator
	end
	
	/** \brief Announcer loader. */
	func LoadAnnouncer getAnnouncer()
		return pAnnouncer
	end
	
	/** \brief Behavior tree loader. */
	func LoadBehaviorTree getBehaviorTree()
		return pBehaviorTree
	end
	
	/** \brief State machine loader. */
	func LoadStateMachine getStateMachine()
		return pStateMachine
	end
	
	/** \brief Border loader. */
	func LoadBorder getBorder()
		return pBorder
	end
	
	/** \brief Canvas creator loader. */
	func LoadCanvasCreator getCanvasCreator()
		return pCanvasCreator
	end
	
	/** \brief Conversation loader. */
	func LoadConversation getConversation()
		return pConversation
	end
	
	/** \brief Decoration loader. */
	func LoadDecoration getDecoration()
		return pDecoration
	end
	
	/** \brief Mouse pointer loader. */
	func LoadMousePointer getMousePointer()
		return pMousePointer
	end
	
	/** \brief Designer loader. */
	func LoadWidgetDesigner getDesigner()
		return pWidgetDesigner
	end
	
	/** \brief Dynamic music loader. */
	func LoadDynamicMusic getDynamicMusic()
		return pDynamicMusic
	end
	
	/** \brief Element class loader. */
	func LoadElementClass getElementClass()
		return pElementClass
	end
	
	/** \brief Gui theme loader. */
	func LoadGuiTheme getGuiTheme()
		return pGuiTheme
	end
	
	/** \brief Height terrain navspace loader. */
	func LoadHeightTerrainNavSpace getHeightTerrainNavSpace()
		return pHeightTerrainNavSpace
	end
	
	/** \brief Height terrain loader. */
	func LoadHeightTerrain getHeightTerrain()
		return pHeightTerrain
	end
	
	/** \brief Bindings loader. */
	func LoadBindings getBindings()
		return pBindings
	end
	
	/** \brief Navigation space loader. */
	func LoadNavigationSpace getNavigationSpace()
		return pNavigationSpace
	end
	
	/** \brief Particle emitter loader. */
	func LoadParticleEmitter getParticleEmitter()
		return pParticleEmitter
	end
	
	/** \brief Load skyanimation. */
	func LoadSky getSky()
		return pSky
	end
	
	/** \brief Load speech animation. */
	func LoadSpeechAnimation getSpeechAnimation()
		return pSpeechAnimation
	end
	
	/** \brief Styled text document loader. */
	func LoadStyledTextDefinition getStyledTextDefinition()
		return pStyledTextDefinition
	end
	
	/** \brief Synthesizer loader. */
	func LoadSynthesizer getSynthesizer()
		return pSynthesizer
	end
	
	/** \brief World loader. */
	func LoadWorld getWorld()
		return pWorld
	end
	
	/** \brief Parameter tree loader. */
	func LoadParameterTree getParameterTree()
		return pParameterTree
	end
	
	/** \brief Material sound loader. */
	func LoadSkinAnnotations getSkinAnnotations()
		return pSkinAnnotations
	end
	
	/** \brief Impact material sound loader. */
	func LoadImpactMaterialSound getImpactMaterialSound()
		return pImpactMaterialSound
	end
	
	/**
	 * \brief Camera parameter loader (loading and saving).
	 * \version 1.21
	 */
	func LoadCamera getCamera()
		return pCamera
	end
	
	/** \brief Persistency. */
	func Persistency getPersistency()
		return pPersistency
	end
	
	
	
	/**
	 * \brief Add default persistency factories.
	 * 
	 * Includes various persistency factories for classes supporting persistency.
	 * There is usually no reason to change this method. Subclass should add
	 * additional persistency factories elsewhere.
	 */
	 func void addDefaultPersistencyFactories(Persistency persistency)
		// conversation system
		ConversationCustomTarget.Factory.registerFactory(persistency)
		
		CActionActorAdd.Factory.registerFactory(persistency)
		CActionActorCommand.Factory.registerFactory(persistency)
		CActionActorRemove.Factory.registerFactory(persistency)
		CActionActorSpeak.Factory.registerFactory(persistency)
		CActionCameraShot.Factory.registerFactory(persistency)
		CActionCoordSystemAdd.Factory.registerFactory(persistency)
		CActionCoordSystemRemove.Factory.registerFactory(persistency)
		CActionGameCommand.Factory.registerFactory(persistency)
		CActionMusic.Factory.registerFactory(persistency)
		CActionIfElse.Factory.registerFactory(persistency)
		CActionPlayerChoice.Factory.registerFactory(persistency)
		CActionSetActorParameter.Factory.registerFactory(persistency)
		CActionSetVariable.Factory.registerFactory(persistency)
		CActionSnippet.Factory.registerFactory(persistency)
		CActionStopConversation.Factory.registerFactory(persistency)
		CActionStopTopic.Factory.registerFactory(persistency)
		CActionTrigger.Factory.registerFactory(persistency)
		CActionWait.Factory.registerFactory(persistency)
		
		CConditionActorCommand.Factory.registerFactory(persistency)
		CConditionActorInConversation.Factory.registerFactory(persistency)
		CConditionActorParameter.Factory.registerFactory(persistency)
		CConditionGameCommand.Factory.registerFactory(persistency)
		CConditionHasActor.Factory.registerFactory(persistency)
		CConditionLogic.Factory.registerFactory(persistency)
		CConditionTrigger.Factory.registerFactory(persistency)
		CConditionVariable.Factory.registerFactory(persistency)
		
		// gui
		SubTitleBoxTextBorder.Factory.registerFactory(persistency)
		
		// scenery
		BaseActorAction.Factory.registerFactory(persistency)
		BAAFirstPerson.Factory.registerFactory(persistency)
		BAAFirstPersonVR.Factory.registerFactory(persistency)
		BAAVehicle.Factory.registerFactory(persistency)
		
		BaseActorAI.Factory.registerFactory(persistency)
		BAAIBehaviorTree.Factory.registerFactory(persistency)
	 end
end
