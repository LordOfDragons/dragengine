/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */


namespace Dragengine.LoadSave

pin Dragengine.Scenery
pin Dragengine.Utils



/**
 * \brief Load height terrain navigation space from a .htnavspace file.
 */
class LoadHeightTerrainNavSpace
	public var Console pConsole
	public var String pName
	
	
	
	/** \brief Creates loader. */
	public func new( Console console ) this( console, "LoadHeightTerrainNavSpace" )
	end
	
	/** \brief Creates loader. */
	public func new( Console console, String name )
		this.pConsole = console
		this.pName = name
	end
	
	
	
	/** \brief Load height terrain navigation space from file. */
	public func void loadFromFile( String filename, HeightTerrain heightTerrain, int sector, int navspace )
		var String signatureCheck = "Drag[en]gine Height Terrain Navigation Space"
		var FileReader fileReader
		var String signature //44
		var int version
		var int flags
		var int cornerCount = 0
		var int edgeCount = 0
		var int faceCount = 0
		var int v1, v2, v3, v4
		var int i
		
		fileReader = FileReader.new( filename )
		
		signature = fileReader.readString( 44 )
		if not signature.equals( signatureCheck )
			throw EInvalidParam.new() // dueInvalidFileFormat
		end
		
		version = fileReader.readUShort()
		flags = fileReader.readUShort()
		
		if version == 1
			// read counts
			cornerCount = fileReader.readUShort()
			edgeCount = fileReader.readUShort()
			faceCount = fileReader.readUShort()
			
			heightTerrain.navspaceSetType( sector, navspace, NavigationSpaceType.withOrder( fileReader.readUShort() ) )
			
			heightTerrain.navspaceSetCornerCount( sector, navspace, cornerCount )
			heightTerrain.navspaceSetFaceCount( sector, navspace, faceCount )
			
			// read corners
			for i = 0 to cornerCount
				heightTerrain.navspaceSetCornerAt( sector, navspace, i, fileReader.readUInt() )
			end
			
			// read edges
			for  i = 0 to edgeCount
				v1 = fileReader.readUInt() // point 1
				v2 = fileReader.readUInt() // point 2
				v3 = fileReader.readUShort() // type number 1
				v4 = fileReader.readUShort() // type number 2
				heightTerrain.navspaceSetEdgeAt( sector, navspace, i, v1, v2, v3, v4 )
			end
			
			// read faces
			for  i = 0 to faceCount
				v1 = fileReader.readUShort() // corner count
				v2 = fileReader.readUShort() // type number
				heightTerrain.navspaceSetFaceAt( sector, navspace, i, v1, v2 )
			end
			
		else
			heightTerrain.navspaceSetCornerCount( sector, navspace, 0 )
			heightTerrain.navspaceSetFaceCount( sector, navspace, 0 )
		end
		
		heightTerrain.navspaceLayoutChanged( sector, navspace )
	end
end
