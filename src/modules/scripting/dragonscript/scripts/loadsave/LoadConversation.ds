/* 
 * Drag[en]gine DragonScript Script Module
 *
 * Copyright (C) 2020, Roland Pl√ºss (roland@rptd.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */


namespace Dragengine.LoadSave

pin Dragengine.ConversationSystem
pin Dragengine.Scenery
pin Dragengine.Utils
pin Dragengine.XML



/**
 * \brief Load conversation script from a conversation.xml file.
 * 
 * Supports caching conversations to avoid loading the same conversation multiple times.
 * The returned conversation can thus be shared so do not change it.
 */
class LoadConversation extends BaseXmlLoader
	/** Dictionary of loaded conversations. */
	private var Dictionary pConversations
	
	
	
	/** \brief Creates a new loader. */
	public func new(Console console) this(console, "LoadConversation")
	end
	
	/** \brief Creates a new loader. */
	public func new(Console console, String name) super(console, name)
		pConversations = Dictionary.new()
	end
	
	
	
	/** \brief Load conversation from file. */
	public func Conversation loadFromFile(String filename)
		var Conversation conversation = pConversations.getAt(filename, null) cast Conversation
		if conversation != null
			return conversation
		end
		
		logLoadingFromFile(filename)
		
		var EasyXML document = EasyXML.new(filename)
		if document.hasParseFailed()
			logParsingFailed(document.getParseLog())
			throw EInvalidParam.new()
		end
		
		var EasyXMLElement root = document.getRootElement()
		if not root.getTagName().equals("conversation")
			logUnknownTag(root)
			throw EInvalidParam.new()
		end
		
		conversation = Conversation.new(filename)
		pReadConversation(root, conversation, File.new(filename).getParent().getPath())
		pConversations.setAt(filename, conversation)
		
		return conversation
	end
	
	
	
	/** \brief Read conversation tag. */
	protected func void pReadConversation(EasyXMLElement root, Conversation conversation, String basePath)
		root.forEachTag(block EasyXMLElement element, String tagName
			if tagName.equals("target")
				pReadTarget(element, conversation)
				
			elif tagName.equals("cameraShot")
				pReadCameraShot(element, conversation)
				
			elif tagName.equals("pose")
				// deprecated
				
			elif tagName.equals("gesture")
				pReadGesture(element, conversation)
				
			elif tagName.equals("facePoseControllerNames")
				// for editing only
				
			elif tagName.equals("facePose")
				pReadFacePose(element, conversation)
				
			elif tagName.equals("lookAt")
				// deprecated
				
			elif tagName.equals("group") or tagName.equals("file") // "file" DEPRECATED
				pReadTopicGroup(element, conversation, basePath)
				
			elif tagName.equals("import")
				var String filename = element.getFirstCData()
				try
					conversation.import(loadFromFile(File.absolutePath(filename, basePath).getPath()))
					
				catch Exception e
					logLoadFileFailed(element, filename)
					throw
				end
				
			else
				logUnknownTag(element)
			end
		end)
	end
	
	/** \brief Read target tag. */
	protected func void pReadTarget(EasyXMLElement root, Conversation conversation)
		var ConversationTarget target = ConversationTarget.new(\
			StringID.new(root.getAttributeNamed("name")))
		
		root.forEachTag(block EasyXMLElement element, String tagName
			if tagName.equals("actor")
				target.setActorID(StringID.new(element.getFirstCData()))
				
			elif tagName.equals("coordSystem")
				target.setCoordSystemID(StringID.new(element.getFirstCData()))
				
			elif tagName.equals("bone")
				target.setBone(element.getFirstCData())
				
			elif tagName.equals("position")
				target.setPosition(readVector(element))
				
			elif tagName.equals("orientation")
				target.setOrientation(Matrix.newRotation(readVector(element)).toQuaternion())
				
			else
				logUnknownTag(element)
			end
		end)
		
		conversation.addTarget(target)
	end
	
	/** \brief Read camera shot tag. */
	protected func void pReadCameraShot(EasyXMLElement root, Conversation conversation)
		var ConversationCameraShot cameraShot = ConversationCameraShot.new(\
			StringID.new(root.getAttributeNamed("name")))
		
		root.forEachTag(block EasyXMLElement element, String tagName
			if tagName.equals("actorCount")
				cameraShot.setActorCount(element.getFirstCDataInt())
				
			elif tagName.equals("cameraTarget")
				// only for editing purpose
				
			elif tagName.equals("offsetCameraFrom")
				cameraShot.setOffsetCameraFrom(readVector(element))
				
			elif tagName.equals("offsetCameraTo")
				cameraShot.setOffsetCameraTo(readVector(element))
				
			elif tagName.equals("cameraOrbitFrom")
				cameraShot.setCameraOrbitFrom(readVector(element))
				
			elif tagName.equals("cameraOrbitTo")
				cameraShot.setCameraOrbitTo(readVector(element))
				
			elif tagName.equals("cameraDistanceFrom")
				cameraShot.setCameraDistanceFrom(element.getFirstCDataFloat())
				
			elif tagName.equals("cameraDistanceTo")
				cameraShot.setCameraDistanceTo(element.getFirstCDataFloat())
				
			elif tagName.equals("lookAtTarget")
				// only for editing purpose
				
			elif tagName.equals("offsetLookAtFrom")
				cameraShot.setOffsetLookAtFrom(readVector(element))
				
			elif tagName.equals("offsetLookAtTo")
				cameraShot.setOffsetLookAtTo(readVector(element))
				
			elif tagName.equals("positionFrom")
				cameraShot.setPositionFrom(readVector(element))
				
			elif tagName.equals("positionTo")
				cameraShot.setPositionTo(readVector(element))
				
			elif tagName.equals("rotationFrom")
				cameraShot.setRotationFrom(readVector(element))
				
			elif tagName.equals("rotationTo")
				cameraShot.setRotationTo(readVector(element))
				
			elif tagName.equals("tiltFrom")
				cameraShot.setTiltFrom(element.getFirstCDataFloat())
				
			elif tagName.equals("tiltTo")
				cameraShot.setTiltTo(element.getFirstCDataFloat())
				
			elif tagName.equals("fovFrom")
				cameraShot.setFovFrom(element.getFirstCDataFloat())
				
			elif tagName.equals("fovTo")
				cameraShot.setFovTo(element.getFirstCDataFloat())
				
			elif tagName.equals("alignTargets")
				cameraShot.setAlignTargets(element.getFirstCDataBool())
				
			elif tagName.equals("lockUpAxis")
				cameraShot.setLockUpAxis(element.getFirstCDataBool())
				
			elif tagName.equals("relativeToLookAt")
				cameraShot.setRelativeToLookAt(element.getFirstCDataBool())
				
			elif tagName.equals("lockCameraTarget")
				cameraShot.setLockCameraTarget(element.getFirstCDataBool())
				
			elif tagName.equals("lockLookAtTarget")
				cameraShot.setLockLookAtTarget(element.getFirstCDataBool())
				
			else
				logUnknownTag(element)
			end
		end)
		
		conversation.addCameraShot(cameraShot)
	end
	
	/** \brief Read gesture tag. */
	protected func void pReadGesture(EasyXMLElement root, Conversation conversation)
		var ConversationGesture gesture = ConversationGesture.new(\
			StringID.new(root.getAttributeNamed("name")))
		
		root.forEachTag(block EasyXMLElement element, String tagName
			if tagName.equals("animator")
				gesture.setAnimator(StringID.new(element.getFirstCData()))
				
			elif tagName.equals("hold")
				gesture.setHold(element.getFirstCDataBool())
				
			elif tagName.equals("duration")
				gesture.setDuration(element.getFirstCDataFloat())
				
			else
				logUnknownTag(element)
			end
		end)
		
		conversation.addGesture(gesture)
	end
	
	/** \brief Read face pose tag. */
	protected func void pReadFacePose(EasyXMLElement root, Conversation conversation)
		var ConversationFacePose facePose = ConversationFacePose.new(\
			StringID.new(root.getAttributeNamed("name")))
		
		root.forEachTag(block EasyXMLElement element, String tagName
			if tagName.equals("controller")
				facePose.addControllerValue(ConversationControllerValue.new(\
					element.getAttributeIntNamed("index"), \
					element.getAttributeFloatNamed("value")))
				
			else
				logUnknownTag(element)
			end
		end)
		
		conversation.addFacePose(facePose)
	end
	
	/** \brief Read file tag. */
	protected func void pReadTopicGroup(EasyXMLElement root, Conversation conversation, String basePath)
		var StringID id = StringID.new(root.getAttributeNamed("id"))
		
		var ConversationTopicGroup group = conversation.getTopicGroupWithID(id)
		if group == null
			group = ConversationTopicGroup.new(id)
			conversation.addTopicGroup(group)
		end
		
		root.forEachTag(block EasyXMLElement element, String tagName
			if tagName.equals("topic")
				pReadTopic(element, group, basePath)
				
			else
				logUnknownTag(element)
			end
		end)
	end
	
	/** \brief Read topic tag. */
	protected func void pReadTopic(EasyXMLElement root, ConversationTopicGroup group, String basePath)
		var ConversationTopic topic = ConversationTopic.new(StringID.new(root.getAttributeNamed("id")))
		
		root.forEachTag(block EasyXMLElement element, String tagName
			if tagName.equals("actions")
				pReadActions(element, basePath).forEach(block ConversationAction each
					topic.addAction(each)
				end)
				
			else
				logUnknownTag(element)
			end
		end)
		
		group.addTopic(topic)
	end
	
	/** \brief Read actions. */
	protected func Array pReadActions(EasyXMLElement root, String basePath)
		var Array actions = Array.new()
		
		root.forEachTag(block EasyXMLElement element, String tagName
			if tagName.equals("cameraShot")
				actions.add(pReadActionCameraShot(element))
				
			elif tagName.equals("music")
				actions.add(pReadActionMusic(element))
				
			elif tagName.equals("actorSpeak")
				actions.add(pReadActionActorSpeak(element, basePath))
				
			elif tagName.equals("ifElse")
				actions.add(pReadActionIfElse(element, basePath))
				
			elif tagName.equals("playerChoice")
				actions.add(pReadActionPlayerChoice(element, basePath))
				
			elif tagName.equals("stopConversation")
				actions.add(pReadActionStopConversation(element))
				
			elif tagName.equals("stopTopic")
				actions.add(pReadActionStopTopic(element))
				
			elif tagName.equals("snippet")
				actions.add(pReadActionSnippet(element))
				
			elif tagName.equals("setVariable")
				actions.add(pReadActionSetVariable(element))
				
			elif tagName.equals("setActorParameter")
				actions.add(pReadActionSetActorParameter(element))
				
			elif tagName.equals("actorCommand")
				actions.add(pReadActionActorCommand(element))
				
			elif tagName.equals("gameCommand")
				actions.add(pReadActionGameCommand(element))
				
			elif tagName.equals("wait")
				actions.add(pReadActionWait(element, basePath))
				
			elif tagName.equals("trigger")
				actions.add(pReadActionTrigger(element))
				
			elif tagName.equals("actorAdd")
				actions.add(pReadActionActorAdd(element))
				
			elif tagName.equals("actorRemove")
				actions.add(pReadActionActorRemove(element))
				
			elif tagName.equals("coordSystemAdd")
				actions.add(pReadActionCoordSystemAdd(element))
				
			elif tagName.equals("coordSystemRemove")
				actions.add(pReadActionCoordSystemRemove(element))
				
			elif tagName.equals("comment")
				// comments are ignored
				
			else
				logUnknownTag(element)
			end
		end)
		
		return actions
	end
	
	/** \brief Read common action. */
	protected func bool pReadActionCommon(EasyXMLElement root, ConversationAction action)
		var String tagName = root.getTagName()
		
		if tagName.equals("waitForActor")
			action.setWaitForActor(root.getFirstCDataBool())
			return true
			
		elif tagName.equals("waitForActorID")
			action.setWaitForActorID(root.getFirstCData())
			return true
			
		elif tagName.equals("delay")
			action.setDelay(root.getFirstCDataFloat())
			return true
		end
		
		return false
	end
	
	/** \brief Read camera shot action. */
	protected func ConversationAction pReadActionCameraShot(EasyXMLElement root)
		var CActionCameraShot action = CActionCameraShot.new()
		
		root.forEachTag(block EasyXMLElement element, String tagName
			if tagName.equals("name")
				action.setName(StringID.new(element.getFirstCData()))
				
			elif tagName.equals("duration")
				action.setDuration(element.getFirstCDataFloat())
				
			elif tagName.equals("cameraTarget")
				action.setCameraTarget(StringID.new(element.getFirstCData()))
				
			elif tagName.equals("lookAtTarget")
				action.setLookAtTarget(StringID.new(element.getFirstCData()))
				
			elif not pReadActionCommon(element, action)
				logUnknownTag(element)
			end
		end)
		
		return action
	end
	
	/** \brief Read music action. */
	protected func ConversationAction pReadActionMusic(EasyXMLElement root)
		var CActionMusic action = CActionMusic.new()
		
		root.forEachTag(block EasyXMLElement element, String tagName
			if tagName.equals("name")
				action.setName(element.getFirstCData())
				
			elif not pReadActionCommon(element, action)
				logUnknownTag(element)
			end
		end)
		
		return action
	end
	
	/** \brief Read actor speak action. */
	protected func ConversationAction pReadActionActorSpeak(EasyXMLElement root, String basePath)
		var CActionActorSpeak action = CActionActorSpeak.new()
		
		root.forEachTag(block EasyXMLElement element, String tagName
			if tagName.equals("actor")
				var String actorID = element.getFirstCData()
				
				if not actorID.empty()
					action.setActorID(StringID.new(actorID))
				end
				
			elif tagName.equals("textBoxText")
				action.setTextBoxText(UnicodeString.newFromUTF8(readMultilineString(element)))
				
			elif tagName.equals("textBoxTextStyle")
				action.setTextBoxTextStyle(StringID.new(element.getFirstCData()))
				
			elif tagName.equals("pathSound")
				action.setPathSound(File.absolutePath(element.getFirstCData(), basePath).getPath())
				
			elif tagName.equals("words")
				pReadStrips(element).forEach(block ConversationStrip each
					action.addWord(each)
				end)
				
			elif tagName.equals("facePoses")
				pReadStrips(element).forEach(block ConversationStrip each
					action.addFacePose(each)
				end)
				
			elif tagName.equals("gestures")
				pReadStrips(element).forEach(block ConversationStrip each
					action.addGesture(each)
				end)
				
			elif tagName.equals("bodyLookAts")
				pReadStrips(element).forEach(block ConversationStrip each
					action.addBodyLookAt(each)
				end)
				
			elif tagName.equals("headLookAts")
				pReadStrips(element).forEach(block ConversationStrip each
					action.addHeadLookAt(each)
				end)
				
			elif tagName.equals("eyesLookAts")
				pReadStrips(element).forEach(block ConversationStrip each
					action.addEyesLookAt(each)
				end)
				
			elif tagName.equals("movement")
				// not yet used
				
			elif tagName.equals("useSpeechAnimation")
				action.setUseSpeechAnimation(element.getFirstCDataBool())
				
			elif tagName.equals("minSpeechTime")
				action.setMinSpeechTime(element.getFirstCDataFloat())
				
			elif not pReadActionCommon(element, action)
				logUnknownTag(element)
			end
		end)
		
		return action
	end
	
	/** \brief Read if-else action. */
	protected func ConversationAction pReadActionIfElse(EasyXMLElement root, String basePath)
		var CActionIfElse action = CActionIfElse.new()
		
		root.forEachTag(block EasyXMLElement element, String tagName
			if tagName.equals("case")
				action.addCase(pReadActionIfElseCase(element, basePath))
				
			elif tagName.equals("else")
				pReadActions(element, basePath).forEach(block ConversationAction each
					action.addElseAction(each)
				end)
				
			elif not pReadActionCommon(element, action)
				logUnknownTag(element)
			end
		end)
		
		return action
	end
	
	/** \brief Read if-else if-case action. */
	protected func CActionIfElseCase pReadActionIfElseCase(EasyXMLElement root, String basePath)
		var CActionIfElseCase ifcase = CActionIfElseCase.new()
		
		root.forEachTag(block EasyXMLElement element, String tagName
			if tagName.equals("condition")
				ifcase.setCondition(pReadSingleCondition(element))
				
			elif tagName.equals("actions")
				pReadActions(element, basePath).forEach(block ConversationAction each
					ifcase.addAction(each)
				end)
				
			else
				logUnknownTag(element)
			end
		end)
		
		return ifcase
	end
	
	/** \brief Read player choice action. */
	protected func ConversationAction pReadActionPlayerChoice(EasyXMLElement root, String basePath)
		var CActionPlayerChoice action = CActionPlayerChoice.new()
		
		root.forEachTag(block EasyXMLElement element, String tagName
			if tagName.equals("variable")
				action.setVariable(element.getFirstCData())
				
			elif tagName.equals("option")
				action.addOption(pReadActionPlayerChoiceOption(element, basePath))
				
			elif tagName.equals("actions")
				pReadActions(element, basePath).forEach(block ConversationAction each
					action.addAction(each)
				end)
				
			elif not pReadActionCommon(element, action)
				logUnknownTag(element)
			end
		end)
		
		return action
	end
	
	/** \brief Read player choice option action. */
	protected func CActionPlayerChoiceOption pReadActionPlayerChoiceOption(EasyXMLElement root, String basePath)
		var CActionPlayerChoiceOption option = CActionPlayerChoiceOption.new()
		
		root.forEachTag(block EasyXMLElement element, String tagName
			if tagName.equals("text")
				option.setText(UnicodeString.newFromUTF8(element.getFirstCData()))
				
			elif tagName.equals("condition")
				option.setCondition(pReadSingleCondition(element))
				
			elif tagName.equals("actions")
				pReadActions(element, basePath).forEach(block ConversationAction each
					option.addAction(each)
				end)
				
			else
				logUnknownTag(element)
			end
		end)
		
		return option
	end
	
	/** \brief Read stop conversation action. */
	protected func ConversationAction pReadActionStopConversation(EasyXMLElement root)
		var CActionStopConversation action = CActionStopConversation.new()
		
		root.forEachTag(block EasyXMLElement element, String tagName
			if not pReadActionCommon(element, action)
				logUnknownTag(element)
			end
		end)
		
		return action
	end
	
	/** \brief Read stop topic action. */
	protected func ConversationAction pReadActionStopTopic(EasyXMLElement root)
		var CActionStopTopic action = CActionStopTopic.new()
		
		root.forEachTag(block EasyXMLElement element, String tagName
			if not pReadActionCommon(element, action)
				logUnknownTag(element)
			end
		end)
		
		return action
	end
	
	/** \brief Read snippet action. */
	protected func ConversationAction pReadActionSnippet(EasyXMLElement root)
		var CActionSnippet action = CActionSnippet.new()
		
		root.forEachTag(block EasyXMLElement element, String tagName
			if tagName.equals("group") or tagName.equals("file") // "file" DEPRECATED
				action.setGroupID(StringID.new(element.getFirstCData()))
				
			elif tagName.equals("topic")
				action.setTopicID(StringID.new(element.getFirstCData()))
				
			elif not pReadActionCommon(element, action)
				logUnknownTag(element)
			end
		end)
		
		return action
	end
	
	/** \brief Read set variable action. */
	protected func ConversationAction pReadActionSetVariable(EasyXMLElement root)
		var CActionSetVariable action = CActionSetVariable.new()
		var String identifier
		
		root.forEachTag(block EasyXMLElement element, String tagName
			if tagName.equals("name")
				action.setName(element.getFirstCData())
				
			elif tagName.equals("operator")
				identifier = element.getFirstCData()
				
				if identifier.equals("set")
					action.setOperator(CActionSetVariable.Operator.set)
					
				elif identifier.equals("increment")
					action.setOperator(CActionSetVariable.Operator.increment)
					
				elif identifier.equals("decrement")
					action.setOperator(CActionSetVariable.Operator.decrement)
					
				elif identifier.equals("random")
					action.setOperator(CActionSetVariable.Operator.random)
					
				else
					logInvalidValue(element, identifier)
				end
				
			elif tagName.equals("value")
				action.setValue(element.getFirstCDataInt())
				
			elif tagName.equals("valueVariable")
				var String valueVariable = element.getFirstCData()
				if not valueVariable.empty()
					action.setValueVariable(valueVariable)
				end
				
			elif not pReadActionCommon(element, action)
				logUnknownTag(element)
			end
		end)
		
		return action
	end
	
	/** \brief Read set actor parameter action. */
	protected func ConversationAction pReadActionSetActorParameter(EasyXMLElement root)
		var CActionSetActorParameter action = CActionSetActorParameter.new()
		var String identifier
		
		root.forEachTag(block EasyXMLElement element, String tagName
			if tagName.equals("actor")
				action.setActorID(StringID.new(element.getFirstCData()))
				
			elif tagName.equals("name")
				action.setName(element.getFirstCData())
				
			elif tagName.equals("operator")
				identifier = element.getFirstCData()
				
				if identifier.equals("set")
					action.setOperator(CActionSetActorParameter.Operator.set)
					
				elif identifier.equals("increment")
					action.setOperator(CActionSetActorParameter.Operator.increment)
					
				elif identifier.equals("decrement")
					action.setOperator(CActionSetActorParameter.Operator.decrement)
					
				elif identifier.equals("random")
					action.setOperator(CActionSetActorParameter.Operator.random)
					
				else
					logInvalidValue(element, identifier)
				end
				
			elif tagName.equals("value")
				action.setValue(element.getFirstCDataInt())
				
			elif tagName.equals("valueVariable")
				var String valueVariable = element.getFirstCData()
				if not valueVariable.empty()
					action.setValueVariable(valueVariable)
				end
				
			elif not pReadActionCommon(element, action)
				logUnknownTag(element)
			end
		end)
		
		return action
	end
	
	/** \brief Read send actor command action. */
	protected func ConversationAction pReadActionActorCommand(EasyXMLElement root)
		var CActionActorCommand action = CActionActorCommand.new()
		
		root.forEachTag(block EasyXMLElement element, String tagName
			if tagName.equals("actor")
				action.setActorID(StringID.new(element.getFirstCData()))
				
			elif tagName.equals("command")
				action.setCommand(element.getFirstCData())
				
			elif not pReadActionCommon(element, action)
				logUnknownTag(element)
			end
		end)
		
		return action
	end
	
	/** \brief Read send ganme command action. */
	protected func ConversationAction pReadActionGameCommand(EasyXMLElement root)
		var CActionGameCommand action = CActionGameCommand.new()
		
		root.forEachTag(block EasyXMLElement element, String tagName
			if tagName.equals("command")
				action.setCommand(element.getFirstCData())
				
			elif not pReadActionCommon(element, action)
				logUnknownTag(element)
			end
		end)
		
		return action
	end
	
	/** \brief Read wait action. */
	protected func ConversationAction pReadActionWait(EasyXMLElement root, String basePath)
		var CActionWait action = CActionWait.new()
		
		root.forEachTag(block EasyXMLElement element, String tagName
			if tagName.equals("condition")
				action.setCondition(pReadSingleCondition(element))
				
			elif tagName.equals("interval")
				action.setInterval(element.getFirstCDataFloat())
				
			elif tagName.equals("actions")
				pReadActions(element, basePath).forEach(block ConversationAction each
					action.addAction(each)
				end)
				
			elif not pReadActionCommon(element, action)
				logUnknownTag(element)
			end
		end)
		
		return action
	end
	
	/** \brief Read set variable action. */
	protected func ConversationAction pReadActionTrigger(EasyXMLElement root)
		var CActionTrigger action = CActionTrigger.new()
		
		root.forEachTag(block EasyXMLElement element, String tagName
			if tagName.equals("name")
				var String name = element.getFirstCData()
				if not name.empty()
					action.setName(StringID.new(name))
				end
				
			elif tagName.equals("action")
				var String identifier = element.getFirstCData()
				
				if identifier.equals("fire")
					action.setAction(CActionTrigger.Action.fire)
					
				elif identifier.equals("reset")
					action.setAction(CActionTrigger.Action.reset)
					
				elif identifier.equals("pulse")
					action.setAction(CActionTrigger.Action.pulse)
					
				elif identifier.equals("fullReset")
					action.setAction(CActionTrigger.Action.fullReset)
					
				else
					logInvalidValue(element, identifier)
				end
				
			elif not pReadActionCommon(element, action)
				logUnknownTag(element)
			end
		end)
		
		return action
	end
	
	/** \brief Read actor add action. */
	protected func ConversationAction pReadActionActorAdd(EasyXMLElement root)
		var CActionActorAdd action = CActionActorAdd.new()
		
		root.forEachTag(block EasyXMLElement element, String tagName
			if tagName.equals("actor")
				action.setActorID(StringID.new(element.getFirstCData()))
				
			elif tagName.equals("aliasID")
				action.setAliasID(StringID.new(element.getFirstCData()))
				
			elif not pReadActionCommon(element, action)
				logUnknownTag(element)
			end
		end)
		
		return action
	end
	
	/** \brief Read actor remove action. */
	protected func ConversationAction pReadActionActorRemove(EasyXMLElement root)
		var CActionActorRemove action = CActionActorRemove.new()
		
		root.forEachTag(block EasyXMLElement element, String tagName
			if tagName.equals("actor")
				action.setActorID(StringID.new(element.getFirstCData()))
				
			elif not pReadActionCommon(element, action)
				logUnknownTag(element)
			end
		end)
		
		return action
	end
	
	/** \brief Read coordinate system add action. */
	protected func ConversationAction pReadActionCoordSystemAdd(EasyXMLElement root)
		var CActionCoordSystemAdd action = CActionCoordSystemAdd.new()
		
		root.forEachTag(block EasyXMLElement element, String tagName
			if tagName.equals("coordSystem")
				action.setCoordSystemID(StringID.new(element.getFirstCData()))
				
			elif tagName.equals("aliasID")
				action.setAliasID(StringID.new(element.getFirstCData()))
				
			elif not pReadActionCommon(element, action)
				logUnknownTag(element)
			end
		end)
		
		return action
	end
	
	/** \brief Read coordinate system remove action. */
	protected func ConversationAction pReadActionCoordSystemRemove(EasyXMLElement root)
		var CActionCoordSystemRemove action = CActionCoordSystemRemove.new()
		
		root.forEachTag(block EasyXMLElement element, String tagName
			if tagName.equals("coordSystem")
				action.setCoordSystemID(StringID.new(element.getFirstCData()))
				
			elif not pReadActionCommon(element, action)
				logUnknownTag(element)
			end
		end)
		
		return action
	end
	
	/** \brief Read conditions. */
	protected func Array pReadConditions(EasyXMLElement root)
		var Array conditions = Array.new()
		
		root.forEachTag(block EasyXMLElement element, String tagName
			if tagName.equals("logic")
				conditions.add(pReadConditionLogic(element))
				
			elif tagName.equals("hasActor")
				conditions.add(pReadConditionHasActor(element))
				
			elif tagName.equals("actorInConversation")
				conditions.add(pReadConditionActorInConversation(element))
				
			elif tagName.equals("variable")
				conditions.add(pReadConditionVariable(element))
				
			elif tagName.equals("actorParameter")
				conditions.add(pReadConditionActorParameter(element))
				
			elif tagName.equals("actorCommand")
				conditions.add(pReadConditionActorCommand(element))
				
			elif tagName.equals("gameCommand")
				conditions.add(pReadConditionGameCommand(element))
				
			elif tagName.equals("trigger")
				conditions.add(pReadConditionTrigger(element))
				
			else
				logUnknownTag(element)
			end
		end)
		
		return conditions
	end
	
	/** \brief Read at most one conditions. */
	protected func ConversationCondition pReadSingleCondition(EasyXMLElement root)
		var Array conditions = pReadConditions(root)
		
		if conditions.getCount() == 1
			return conditions.getAt(0) cast ConversationCondition
			
		else
			printOnConsole(root, "Exactly one condition expected but not found.")
			throw EInvalidParam.new()
		end
	end
	
	/** \brief Read logic condition. */
	protected func ConversationCondition pReadConditionLogic(EasyXMLElement root)
		var CConditionLogic condition = CConditionLogic.new()
		var String identifier
		
		root.forEachTag(block EasyXMLElement element, String tagName
			if tagName.equals("operator")
				identifier = element.getFirstCData()
				
				if identifier.equals("none")
					condition.setOperator(CConditionLogic.Operator.none)
					
				elif identifier.equals("any")
					condition.setOperator(CConditionLogic.Operator.any)
					
				elif identifier.equals("all")
					condition.setOperator(CConditionLogic.Operator.all)
					
				else
					logInvalidValue(element, identifier)
				end
				
			elif tagName.equals("conditions")
				pReadConditions(element).forEach(block ConversationCondition each
					condition.addCondition(each)
				end)
				
			else
				logUnknownTag(element)
			end
		end)
		
		return condition
	end
	
	/** \brief Read has actor condition. */
	protected func ConversationCondition pReadConditionHasActor(EasyXMLElement root)
		var CConditionHasActor condition = CConditionHasActor.new()
		
		root.forEachTag(block EasyXMLElement element, String tagName
			if tagName.equals("actor")
				condition.setActorID(StringID.new(element.getFirstCData()))
				
			elif tagName.equals("negate")
				condition.setNegate(element.getFirstCDataBool())
				
			else
				logUnknownTag(element)
			end
		end)
		
		return condition
	end
	
	/** \brief Read actor in conversation condition. */
	protected func ConversationCondition pReadConditionActorInConversation(EasyXMLElement root)
		var CConditionActorInConversation condition = CConditionActorInConversation.new()
		
		root.forEachTag(block EasyXMLElement element, String tagName
			if tagName.equals("actor")
				condition.setActorID(StringID.new(element.getFirstCData()))
				
			elif tagName.equals("negate")
				condition.setNegate(element.getFirstCDataBool())
				
			else
				logUnknownTag(element)
			end
		end)
		
		return condition
	end
	
	/** \brief Read variable condition. */
	protected func ConversationCondition pReadConditionVariable(EasyXMLElement root)
		var CConditionVariable condition = CConditionVariable.new()
		var String identifier
		
		root.forEachTag(block EasyXMLElement element, String tagName
			if tagName.equals("operator")
				identifier = element.getFirstCData()
				
				if identifier.equals("equal")
					condition.setOperator(CConditionVariable.Operator.equal)
					
				elif identifier.equals("notEqual")
					condition.setOperator(CConditionVariable.Operator.notEqual)
					
				elif identifier.equals("less")
					condition.setOperator(CConditionVariable.Operator.lessThan)
					
				elif identifier.equals("lessEqual")
					condition.setOperator(CConditionVariable.Operator.lessThanOrEqual)
					
				elif identifier.equals("greater")
					condition.setOperator(CConditionVariable.Operator.greaterThan)
					
				elif identifier.equals("greaterEqual")
					condition.setOperator(CConditionVariable.Operator.greaterThanOrEqual)
					
				else
					logInvalidValue(element, identifier)
				end
				
			elif tagName.equals("variable")
				condition.setVariable(element.getFirstCData())
				
			elif tagName.equals("testValue")
				condition.setTestValue(element.getFirstCDataInt())
				
			elif tagName.equals("testVariable")
				condition.setTestVariable(element.getFirstCData())
				
			else
				logUnknownTag(element)
			end
		end)
		
		return condition
	end
	
	/** \brief Read actor parameter condition. */
	protected func ConversationCondition pReadConditionActorParameter(EasyXMLElement root)
		var CConditionActorParameter condition = CConditionActorParameter.new()
		var String identifier
		
		root.forEachTag(block EasyXMLElement element, String tagName
			if tagName.equals("actor")
				condition.setActorID(StringID.new(element.getFirstCData()))
				
			elif tagName.equals("operator")
				identifier = element.getFirstCData()
				
				if identifier.equals("equal")
					condition.setOperator(CConditionActorParameter.Operator.equal)
					
				elif identifier.equals("notEqual")
					condition.setOperator(CConditionActorParameter.Operator.notEqual)
					
				elif identifier.equals("less")
					condition.setOperator(CConditionActorParameter.Operator.lessThan)
					
				elif identifier.equals("lessEqual")
					condition.setOperator(CConditionActorParameter.Operator.lessThanOrEqual)
					
				elif identifier.equals("greater")
					condition.setOperator(CConditionActorParameter.Operator.greaterThan)
					
				elif identifier.equals("greaterEqual")
					condition.setOperator(CConditionActorParameter.Operator.greaterThanOrEqual)
					
				else
					logInvalidValue(element, identifier)
				end
				
			elif tagName.equals("parameter")
				condition.setParameter(element.getFirstCData())
				
			elif tagName.equals("testValue")
				condition.setTestValue(element.getFirstCDataInt())
				
			elif tagName.equals("testVariable")
				condition.setTestVariable(element.getFirstCData())
				
			else
				logUnknownTag(element)
			end
		end)
		
		return condition
	end
	
	/** \brief Read actor command condition. */
	protected func ConversationCondition pReadConditionActorCommand(EasyXMLElement root)
		var CConditionActorCommand condition = CConditionActorCommand.new()
		
		root.forEachTag(block EasyXMLElement element, String tagName
			if tagName.equals("actor")
				condition.setActorID(StringID.new(element.getFirstCData()))
				
			elif tagName.equals("command")
				condition.setCommand(element.getFirstCData())
				
			elif tagName.equals("negate")
				condition.setNegate(element.getFirstCDataBool())
				
			else
				logUnknownTag(element)
			end
		end)
		
		return condition
	end
	
	/** \brief Read game command condition. */
	protected func ConversationCondition pReadConditionGameCommand(EasyXMLElement root)
		var CConditionGameCommand condition = CConditionGameCommand.new()
		
		root.forEachTag(block EasyXMLElement element, String tagName
			if tagName.equals("command")
				condition.setCommand(element.getFirstCData())
				
			elif tagName.equals("negate")
				condition.setNegate(element.getFirstCDataBool())
				
			else
				logUnknownTag(element)
			end
		end)
		
		return condition
	end
	
	/** \brief Read trigger condition. */
	protected func ConversationCondition pReadConditionTrigger(EasyXMLElement root)
		var CConditionTrigger condition = CConditionTrigger.new()
		
		root.forEachTag(block EasyXMLElement element, String tagName
			if tagName.equals("testMode")
				var String identifier = element.getFirstCData()
				
				if identifier.equals("fired")
					condition.setTestMode(CConditionTrigger.TestMode.fired)
					
				elif identifier.equals("notFired")
					condition.setTestMode(CConditionTrigger.TestMode.notFired)
					
				elif identifier.equals("everFired")
					condition.setTestMode(CConditionTrigger.TestMode.everFired)
					
				elif identifier.equals("neverFired")
					condition.setTestMode(CConditionTrigger.TestMode.neverFired)
					
				else
					logInvalidValue(element, identifier)
				end
				
			elif tagName.equals("trigger")
				var String trigger = element.getFirstCData()
				if not trigger.empty()
					condition.setTrigger(StringID.new(trigger))
				end
				
			else
				logUnknownTag(element)
			end
		end)
		
		return condition
	end
	
	/** \brief Read strips. */
	protected func Array pReadStrips(EasyXMLElement root)
		var Array strips = Array.new()
		
		root.forEachTag(block EasyXMLElement element, String tagName
			if tagName.equals("entry")
				var float duration = element.getAttributeFloatNamed("duration")
				var String id = element.getFirstCData()
				var float pause = 0.0
				
				if element.hasAttributeNamed("pause")
					pause = element.getAttributeFloatNamed("pause")
				end
				
				if id.empty()
					strips.add(ConversationStrip.new(null, pause, duration))
					
				else
					strips.add(ConversationStrip.new(StringID.new(id), pause, duration))
				end
				
			else
				logUnknownTag(element)
			end
		end)
		
		return strips
	end
end
