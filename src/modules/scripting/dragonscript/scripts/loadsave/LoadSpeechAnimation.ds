/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */


namespace Dragengine.LoadSave

pin Dragengine.Preloading
pin Dragengine.SpeechAnimations
pin Dragengine.Scenery
pin Dragengine.Utils
pin Dragengine.XML



/**
 * Loads a speech animation from a desanim file. Supports caching speech animations
 * to avoid loading the same speech animation multiple times. The returned speech
 * animation can thus be shared so do not change it.
 */
class LoadSpeechAnimation extends BaseXmlLoader
	/** Class for holding loaded speech animations using the filename as unique identifier. */
	private class LoadedSpeechAnimation implements ResourceListener
		private var String pPathFile
		private var SpeechAnimation pSpeechAnimation
		private var Console pConsole
		private var PreloadCounter pCounter
		
		public func new(String pathFile, SpeechAnimation speechAnimation, Console console)
			pPathFile = pathFile
			pSpeechAnimation = speechAnimation
			pConsole = console
		end
		
		public func String getPathFile()
			return pPathFile
		end
		
		public func SpeechAnimation getSpeechAnimation()
			return pSpeechAnimation
		end
		
		public func Console getConsole()
			return pConsole
		end
		
		public func void preloadResources(PreloadCounter counter)
			pCounter = counter
			
			if pSpeechAnimation.getPathAnimation() != null
				if counter != null
					Animation.loadAsynchron(pSpeechAnimation.getPathAnimation(), this)
					counter.increase()
					
				else
					Animation.new(pSpeechAnimation.getPathAnimation())
				end
			end
			
			if pSpeechAnimation.getPathRig() != null
				if counter != null
					Rig.loadAsynchron(pSpeechAnimation.getPathRig(), this)
					counter.increase()
					
				else
					Rig.new(pSpeechAnimation.getPathRig())
				end
			end
		end
		
		public func void finishedLoading(String path, ResourceLoaderType resourceType, Object resource)
			if resourceType == ResourceLoaderType.animation and path.equals(pSpeechAnimation.getPathAnimation())
				pSpeechAnimation.getAnimator().setAnimation(resource cast Animation)
				
			elif resourceType == ResourceLoaderType.rig and  path.equals(pSpeechAnimation.getPathRig())
				pSpeechAnimation.getAnimator().setRig(resource cast Rig)
			end
			
			pCounter.decrease()
		end
		
		public func void failedLoading(String path, ResourceLoaderType resourceType)
			pConsole.addMessage("Speech Animation '" + pPathFile + "': Failed to load " + path)
			pCounter.decrease()
		end
	end
	
	private var Dictionary pSpeechAnimations
	
	
	
	/** Creates a new loader. */
	public func new(Console console) this(console, "LoadSpeechAnimation")
	end
	
	/** Creates a new loader. */
	public func new(Console console, String name) super(console, name)
		pSpeechAnimations = Dictionary.new()
	end
	
	
	
	/** Load character speech animation from file. */
	public func SpeechAnimation loadFromFile(String filename, PreloadCounter counter)
		var LoadedSpeechAnimation loadedSpeechAnimation = \
			pSpeechAnimations.getAt(filename, null) cast LoadedSpeechAnimation
		if loadedSpeechAnimation != null
			return loadedSpeechAnimation.getSpeechAnimation()
		end
		
		return loadAndParseRootTag(filename, "speechAnimation", block EasyXMLElement root
			var SpeechAnimation speechAnimation = SpeechAnimation.new()
			pReadSpeechAnimation(root, speechAnimation, File.new(filename).getParent().getPath())
			
			speechAnimation.buildAnimator()
			
			loadedSpeechAnimation = LoadedSpeechAnimation.new(\
				filename, speechAnimation, getConsole())
			loadedSpeechAnimation.preloadResources(counter)
			pSpeechAnimations.setAt(filename, loadedSpeechAnimation)
			
			return speechAnimation
		end) cast SpeechAnimation
	end
	
	
	
	/** Read speech animation tag. */
	private func void pReadSpeechAnimation(EasyXMLElement root, SpeechAnimation spa, String basePath)
		root.forEachTag(block EasyXMLElement element, String tagName
			if tagName.equals("display")
				// ignore, used only for editing
				
			elif tagName.equals("animation")
				spa.setPathAnimation(File.absolutePath(element.getFirstCData(), basePath).getPath())
				
			elif tagName.equals("rig")
				spa.setPathRig(File.absolutePath(element.getFirstCData(), basePath).getPath())
				
			elif tagName.equals("neutralMoveName")
				spa.setNeutralMove(element.getFirstCData())
				
			elif tagName.equals("neutralVertexPositionSet")
				spa.getNeutralVertexPositionSets().add(element.getFirstCData())
				
			elif tagName.equals("phoneme")
				pReadPhoneme(element, spa)
				
			elif tagName.equals("word")
				pReadWord(element, spa)
			end
		end)
	end
	
	/** Read phoneme tag. */
	private func void pReadPhoneme(EasyXMLElement root, SpeechAnimation spa)
		var int i, count = root.getElementCount()
		var EasyXMLElement element
		var String vertexPositionSet = ""
		var String moveName = ""
		var float length = 0.1
		var String tagName
		var int ipa = -1
		
		ipa = root.getAttributeIntNamed("ipa")
		
		if spa.getPhonemeWithIPA(ipa) != null
			printOnConsole(root, "A phoneme exists already with the IPA '" + ipa + "'.")
			throw EInvalidParam.new()
		end
		
		for i = 0 to count
			element = root.getElementAt(i)
			
			if element.getType() == EasyXMLElementType.tag
				tagName = element.getTagName()
				
				if tagName.equals("moveName")
					moveName = element.getFirstCData()
					
				elif tagName.equals("vertexPositionSet")
					vertexPositionSet = element.getFirstCData()
					
				elif tagName.equals("length")
					length = element.getFirstCData().toFloat()
				end
			end
		end
		
		spa.addPhoneme(SpeechAnimationPhoneme.new(ipa, length, moveName, vertexPositionSet))
	end
	
	/** Read word tag. */
	private func void pReadWord(EasyXMLElement root, SpeechAnimation spa)
		var int i, count = root.getElementCount()
		var UnicodeString phonetics
		var EasyXMLElement element
		var String tagName
		var StringID name
		
		name = StringID.new(root.getAttributeNamed("name"))
		
		if spa.getWordNamed(name) != null
			printOnConsole(root, "A word exists already with the name '" + name + "'.")
			throw EInvalidParam.new()
		end
		
		for i = 0 to count
			element = root.getElementAt(i)
			
			if element.getType() == EasyXMLElementType.tag
				tagName = element.getTagName()
				
				if tagName.equals("phonetics")
					phonetics = UnicodeString.newFromUTF8(element.getFirstCData())
					
				else
					logUnknownTag(element)
				end
			end
		end
		
		spa.addWord(SpeechAnimationWord.new(name, phonetics))
	end
end
