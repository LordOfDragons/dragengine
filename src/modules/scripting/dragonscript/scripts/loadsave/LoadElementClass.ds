/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */


namespace Dragengine.LoadSave

pin Dragengine.Scenery
pin Dragengine.Utils
pin Dragengine.Gui
pin Dragengine.XML



/**
 * \brief Load element class from XML file.
 */
class LoadElementClass extends BaseXmlLoader
	/** \brief Create loader. */
	public func new(Console console) this(console, "LoadElementClass")
	end
	
	/** \brief Create loader. */
	public func new(Console console, String name) super(console, name)
	end
	
	
	
	/** \brief Load element class from file. */
	public func ElementClass loadFromFile(ElementClassList ecmgr, String filename)
		logLoadingFromFile(filename)
		
		return loadAndParseRootTag(filename, "elementClass", block EasyXMLElement root
			return readClass(ecmgr, root, File.new(filename).getParent().getPath())
		end) cast ElementClass
	end
	
	/**
	 * \brief Scan for XML element class files adding them to element class list.
	 * 
	 * XML element class files have the extension ".deeclass". These files can be exported
	 * from the IGDE Game Definition Editor or edited manually.
	 * 
	 * \param list List to add loaded element classes to.
	 * \param directory Absolute path to directory to scan for files.
	 * \param recursive If true scans also in all child directories.
	 */
	public func void addXmlElementClasses(ElementClassList list, String directory, bool recursive)
		addXmlElementClasses(list, directory, "*.deeclass", recursive)
	end
	
	/**
	 * \brief Scan for XML element class files adding them to element class list.
	 * 
	 * XML element class files have the extension ".deeclass". These files can be exported
	 * from the IGDE Game Definition Editor or edited manually.
	 * 
	 * \param list List to add loaded element classes to.
	 * \param directory Absolute path to directory to scan for files.
	 * \param pattern File pattern to match. Has to be of the form "*.extension"
	 * \param recursive If true scans also in all child directories.
	 */
	public func void addXmlElementClasses(ElementClassList list, \
	String directory, String pattern, bool recursive)
		FileSystem.searchFiles(directory, recursive, block String each, FileType type
			if type == FileType.file and FileSystem.pathMatchesPattern(File.new(each).getName(), pattern)
				list.add(loadFromFile(list, each))
			end
			return true
		end)
	end
	
	
	
	/** \brief Parse element class tag. */
	public func ElementClass readClass(ElementClassList ecmgr, EasyXMLElement root, String basePath)
		if not root.hasAttributeNamed("name")
			logMissingAttribute(root, "name")
			throw EInvalidParam.new()
		end
		var String cname = root.getAttributeNamed("name")
		
		if not root.hasAttributeNamed("class")
			logMissingAttribute(root, "class")
			throw EInvalidParam.new()
		end
		var String baseClassName = root.getAttributeNamed("class")
		
		if ecmgr.hasNamed(cname)
			printOnConsole(root, "A class with the name '" + cname + "' exists already.")
			throw EInvalidParam.new()
		end
		
		// apply base class
		var ElementClass baseEClass = ecmgr.getNamed(baseClassName)
		if baseEClass == null
			printOnConsole(root, "Invalid class '" + baseClassName + "'.")
			throw EInvalidParam.new()
		end
		
		var ElementClass eclass = baseEClass.duplicateNamed(cname)
		if eclass == null
			printOnConsole(root, "Class '" + baseClassName + "' is not usable for XML extending.")
			throw EInvalidParam.new()
		end
		
		eclass.setIsXmlElementClass(true)
		
		// store the base path to support relative loading of resources
		eclass.setBasePath(basePath)
		
		// if the base element class is an XML element class copy property values.
		// this is required or XML set element property values are lost
		if baseEClass.getIsXmlElementClass()
			eclass.copyPropertyValues(baseEClass)
		end
		
		// load element class properties
		root.forEachTag(block EasyXMLElement element, String tagName
			if tagName.equals("property")
				pReadClassPropertyOld(element, baseClassName, eclass)
				
			else
				readClassProperty(element, baseClassName, eclass)
				//logUnknownTag(element)
			end
		end)
		
		return eclass
	end
	
	/** \brief Parse element class property tag. */
	public func void readClassProperty(EasyXMLElement tag, String baseClassName, ElementClass eclass)
		if not tag.hasAttributeNamed("name")
			logMissingAttribute(tag, "name")
			throw EInvalidParam.new()
		end
		var String propName = tag.getAttributeNamed("name")
		
		if not eclass.hasPropertyNamed(propName)
			if propName.findString("._", 1) != -1
				return // IGDE only property name. do not report it missing
			end
			
			printOnConsole(tag, "The class {}({}) does not have a property '{}'.".format(\
				Array.newWith(eclass.getClassname(), baseClassName, propName)))
			return
		end
		
		var String tagName = tag.getTagName()
		var Object propValue
		
		if tagName.equals("string")
			propValue = tag.getFirstCData()
			
		elif tagName.equals("float")
			propValue = tag.getFirstCDataFloat()
			
		elif tagName.equals("integer")
			propValue = tag.getFirstCDataInt()
			
		elif tagName.equals("boolean")
			propValue = tag.getFirstCDataBool()
			
		elif tagName.equals("vector")
			propValue = readVector(tag)
			
		elif tagName.equals("vector2")
			propValue = readVector2(tag)
			
		elif tagName.equals("point")
			propValue = readPoint(tag)
			
		elif tagName.equals("point3")
			propValue = readPoint3(tag)
			
		elif tagName.equals("borderSize")
			propValue = readBorderSize(tag)
			
		elif tagName.equals("rectArea")
			propValue = readRectArea(tag)
			
		elif tagName.equals("floatRectArea")
			propValue = readFloatRectArea(tag)
			
		elif tagName.equals("color")
			propValue = readColor(tag)
			
		elif tagName.equals("null")
			propValue = null
			
		elif tagName.equals("list")
			propValue = pReadList(tag)
			
		elif tagName.equals("map")
			propValue = pReadMap(tag)
			
		else
			logUnknownTag(tag)
			return
		end
		
		try
			eclass.setPropertyValue(propName, propValue)
			
		catch Exception e
			var int t, tcount = e.getTraceCount()
			
			printOnConsole(tag, "Property " + propName + " in class " + eclass.getClassname() \
				+ "(" + baseClassName + ") does not understand value '" + propValue + "'.")
			printOnConsole(tag, "Backtrace: " + e.getReason())
			for t = 0 to tcount
				printOnConsole(tag, "- " + e.getTraceClass(t) + "." + e.getTraceFunction(t) + "(" + e.getTraceLine(t) + ")")
			end
			
			throw EInvalidParam.new()
		end
	end
	
	/** \brief Parse element class property tag. */
	private func void pReadClassPropertyOld(EasyXMLElement root, String baseClassName, ElementClass eclass)
		if not root.hasAttributeNamed("name")
			logMissingAttribute(root, "name")
			throw EInvalidParam.new()
		end
		var String propName = root.getAttributeNamed("name")
		
		if not eclass.hasPropertyNamed(propName)
			printOnConsole(root, "The class '" + baseClassName + "' does not have a property '" + propName + "'.")
			return
		end
		
		var int i, count = root.getElementCount()
		var EasyXMLElement element
		var String tagName
		var Object propValue
		
		for i = 0 to count
			element = root.getElementAt(i)
			if element.getType() != EasyXMLElementType.tag
				continue
			end
			
			tagName = element.getTagName()
			
			if propValue == null
				if tagName.equals("string")
					propValue = element.getFirstCData()
					
				elif tagName.equals("float")
					propValue = element.getFirstCDataFloat()
					
				elif tagName.equals("integer")
					propValue = element.getFirstCDataInt()
					
				elif tagName.equals("boolean")
					propValue = element.getFirstCDataBool()
					
				elif tagName.equals("vector")
					propValue = readVector(element)
					
				elif tagName.equals("vector2")
					propValue = readVector2(element)
					
				elif tagName.equals("point")
					propValue = readPoint(element)
					
				elif tagName.equals("point3")
					propValue = readPoint3(element)
					
				elif tagName.equals("borderSize")
					propValue = readBorderSize(element)
					
				elif tagName.equals("rectArea")
					propValue = readRectArea(element)
					
				elif tagName.equals("floatRectArea")
					propValue = readFloatRectArea(element)
					
				elif tagName.equals("color")
					propValue = readColor(element)
					
				elif tagName.equals("list")
					propValue = pReadList(element)
					
				elif tagName.equals("map")
					propValue = pReadMap(element)
					
				else
					logUnknownTag(element)
				end
				
			else
				printOnConsole(element, "Only one value allowed for property " + propName + ".")
			end
		end
		
		if propValue == null
			printOnConsole(root, "Missing value for property " + propName + ".")
			throw EInvalidParam.new()
		end
		
		try
			eclass.setPropertyValue(propName, propValue)
			
		catch Exception e
			var int t, tcount = e.getTraceCount()
			
			printOnConsole(root, "Property '" + propName + "' in class '" + baseClassName + "' does not understand value '" + propValue + "'.")
			printOnConsole(root, "Backtrace: " + e.getReason())
			for t = 0 to tcount
				printOnConsole(root, "- " + e.getTraceClass(t) + "." + e.getTraceFunction(t) + "(" + e.getTraceLine(t) + ")")
			end
			
			throw EInvalidParam.new()
		end
	end
	
	/** \brief Parse list tag. */
	private func Array pReadList(EasyXMLElement root)
		var Array list = Array.new()
		
		root.forEachTag(block EasyXMLElement element, String tagName
			if tagName.equals("string")
				list.add(element.getFirstCData())
				
			elif tagName.equals("float")
				list.add(element.getFirstCDataFloat())
				
			elif tagName.equals("integer")
				list.add(element.getFirstCDataInt())
				
			elif tagName.equals("boolean")
				list.add(element.getFirstCDataBool())
				
			elif tagName.equals("vector")
				list.add(readVector(element))
				
			elif tagName.equals("vector2")
				list.add(readVector2(element))
				
			elif tagName.equals("point")
				list.add(readPoint(element))
				
			elif tagName.equals("point3")
				list.add(readPoint3(element))
				
			elif tagName.equals("borderSize")
				list.add(readBorderSize(element))
				
			elif tagName.equals("rectArea")
				list.add(readRectArea(element))
				
			elif tagName.equals("floatRectArea")
				list.add(readFloatRectArea(element))
				
			elif tagName.equals("color")
				list.add(readColor(element))
				
			elif tagName.equals("null")
				list.add(null)
				
			elif tagName.equals("list")
				list.add(pReadList(element))
				
			elif tagName.equals("map")
				list.add(pReadMap(element))
				
			else
				logUnknownTag(element)
			end
		end)
		
		return list
	end
	
	/** \brief Parse map tag. */
	private func Dictionary pReadMap(EasyXMLElement root)
		var Dictionary dict = Dictionary.new()
		var String key
		
		root.forEachTag(block EasyXMLElement element, String tagName
			key = element.getAttributeNamed("key")
			
			if tagName.equals("string")
				dict.setAt(key, element.getFirstCData())
				
			elif tagName.equals("float")
				dict.setAt(key, element.getFirstCDataFloat())
				
			elif tagName.equals("integer")
				dict.setAt(key, element.getFirstCDataInt())
				
			elif tagName.equals("boolean")
				dict.setAt(key, element.getFirstCDataBool())
				
			elif tagName.equals("vector")
				dict.setAt(key, readVector(element))
				
			elif tagName.equals("vector2")
				dict.setAt(key, readVector2(element))
				
			elif tagName.equals("point")
				dict.setAt(key, readPoint(element))
				
			elif tagName.equals("point3")
				dict.setAt(key, readPoint3(element))
				
			elif tagName.equals("borderSize")
				dict.setAt(key, readBorderSize(element))
				
			elif tagName.equals("rectArea")
				dict.setAt(key, readRectArea(element))
				
			elif tagName.equals("floatRectArea")
				dict.setAt(key, readFloatRectArea(element))
				
			elif tagName.equals("color")
				dict.setAt(key, readColor(element))
				
			elif tagName.equals("null")
				dict.setAt(key, null)
				
			elif tagName.equals("list")
				dict.setAt(key, pReadList(element))
				
			elif tagName.equals("map")
				dict.setAt(key, pReadMap(element))
				
			else
				logUnknownTag(element)
			end
		end)
		
		return dict
	end
end
