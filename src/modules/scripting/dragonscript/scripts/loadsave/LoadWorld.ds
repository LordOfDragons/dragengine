/* 
 * Drag[en]gine DragonScript Script Module
 *
 * Copyright (C) 2020, Roland Pl√ºss (roland@rptd.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */


namespace Dragengine.LoadSave

pin Dragengine.LoadSave
pin Dragengine.Preloading
pin Dragengine.Scenery
pin Dragengine.Utils
pin Dragengine.Gui
pin Dragengine.XML



/**
 * \brief Load world from world XML file.
 * 
 * Supports MutableID to generate identifiers for created element stubs. Unique identifiers
 * are required to identify elements loaded from save states or synchronized across networks.
 * Although for simple situations this may not be required using MutableID is mandatory.
 */
class LoadWorld extends BaseXmlLoader
	private var LoadHeightTerrain pLoadHeightTerrain
	private var ElementClassList pElementClassList
	
	
	
	/** \brief Create loader. */
	public func new(Console console, LoadHeightTerrain loadHeightTerrainSector) \
	this(console, "LoadWorld", loadHeightTerrainSector)
	end
	
	/** \brief Create loader. */
	public func new(Console console, String name, LoadHeightTerrain loadHeightTerrainSector) \
	super(console, name)
		if loadHeightTerrainSector == null
			throw EInvalidParam.new()
		end
		pLoadHeightTerrain = loadHeightTerrainSector
	end
	
	
	
	/** Retrieves the element class manager. */
	public func ElementClassList getElementClassList()
		return pElementClassList
	end
	
	/** Sets the element class manager. */
	public func void setElementClassList(ElementClassList list)
		if list == null
			throw EInvalidParam.new()
		end
		pElementClassList = list
	end
	
	
	
	/**
	 * \brief Load world file.
	 * 
	 * Unique identifiers for new elements are generated using \em idGenerator.
	 */
	public func void loadFromFile(StubGameWorld stubWorld, String filename, bool ignorePersistable)
		loadFromFile(stubWorld, filename, ignorePersistable, false)
	end
	
	public func void loadFromFile(StubGameWorld stubWorld, String filename, \
	bool ignorePersistable, bool enableNetworking)
		if pLoadHeightTerrain == null
			throw EInvalidParam.new()
		end
		
		logLoadingFromFile(filename)
		try
			var EasyXML document = EasyXML.new(filename)
			if document.hasParseFailed()
				logParsingFailed(document.getParseLog())
				throw EInvalidParam.new()
			end
			
			var EasyXMLElement root = document.getRootElement()
			if not root.getTagName().equals("world")
				logUnknownTag(root)
				throw EInvalidParam.new()
			end
			
			pParseWorld(root, stubWorld, filename, ignorePersistable, enableNetworking)
			
		catch Exception e
			logLoadingFailed(filename)
			throw
		end
	end
	
	
	
	/** \brief Parse world tag. */
	private func void pParseWorld(EasyXMLElement root, StubGameWorld stubWorld, \
	String filename, bool ignorePersistable, bool enableNetworking)
		var GameWorld world = stubWorld.getGameWorld()
		var float sectorDim = 500.0
		var int imageDim = 1024
		
		if world == null
			throw EInvalidParam.new()
		end
		
		try
			root.forEachTag(block EasyXMLElement element, String tagName
				if tagName.equals("size")
					world.getWorld().setSize(readDVector(element))
					
				elif tagName.equals("gravity")
					world.getWorld().setGravity(readVector(element))
					
				elif tagName.equals("nextObjectID")
					stubWorld.setNextObjectID(UniqueID.newFromHexString(element.getFirstCData()))
					
				elif tagName.equals("heightTerrain")
					var String basePath = File.new(filename).getParent().getPath()
					var String htpath = element.getFirstCData()
					pLoadHeightTerrain.loadFromFile(world, File.absolutePath(htpath, basePath).getPath())
					
				elif tagName.equals("property")
					stubWorld.setPropertyValueFor(element.getAttributeNamed("key"), \
						readMultilineString(element))
					
				elif tagName.equals("object")
					pParseObject(element, stubWorld, ignorePersistable, enableNetworking)
					
				elif tagName.equals("decal")
					pParseDecal(element, stubWorld)
					
				elif tagName.equals("portalSystem")
					logDeprecatedTag(element)
					
				elif tagName.equals("navigationSpace")
					pParseNavigationSpace(element, stubWorld)
				end
			end)
			
		catch Exception e
			world.dispose()
			throw
		end
	end
	
	/** Parse object tag. */
	private func void pParseObject(EasyXMLElement root, StubGameWorld stubWorld, \
	bool ignorePersistable, bool enableNetworking)
		var int i, count = root.getElementCount()
		var bool hasClassname = false
		var ElementClass elementClass
		var EasyXMLElement element
		var StubElement stubElement
		var String tagName
		
		for i = 0 to count
			element = root.getElementAt(i)
			if element.getType() != EasyXMLElementType.tag
				continue
			end
			
			tagName = element.getTagName()
			if not tagName.equals("classname")
				continue
			end
			
			var String classname = element.getFirstCData()
			if classname.empty()
				logInvalidValue(element, classname)
				throw EInvalidParam.new()
			end
			
			var UniqueID id = UniqueID.newFromHexString(root.getAttributeNamed("id"))
			elementClass = pElementClassList.getNamed(classname)
			
			if elementClass != null
				if ignorePersistable and elementClass.getPersistable()
					return
				end
				stubElement = StubElement.new(elementClass, id)
				
			else
				stubElement = StubElementClassNotFound.new(classname, id)
			end
			
			break
		end
		
		if stubElement == null
			printOnConsole(element, "Missing tag classname")
			throw EInvalidParam.new()
		end
		
		stubElement.setEnableNetworking(enableNetworking)
		
		root.forEachTag(block EasyXMLElement element, String tagName
			if tagName.equals("classname")
				// done
				
			elif tagName.equals("position")
				stubElement.setPosition(readDVector(element))
				
			elif tagName.equals("rotation")
				stubElement.setRotation(readVector(element))
				
			elif tagName.equals("scaling")
				stubElement.setScaling(readVector(element))
				
			elif tagName.equals("property")
				stubElement.setPropertyValueFor(element.getAttributeNamed("key"), \
					readMultilineString(element))
				
			elif tagName.equals("texture")
				pParseObjectTexture(element, stubElement)
				
			elif tagName.equals("attachTo")
				stubElement.setAttachTo(UniqueID.newFromHexString(element.getFirstCData()))
				
			else
				logUnknownTag(element)
				//throw EInvalidParam.new()
			end
		end)
		
		stubWorld.addElement(stubElement)
	end
	
	/** Parse object tag. */
	private func void pParseObjectTexture(EasyXMLElement root, StubElement stubElement)
		var StubElementTexture stubTexture = StubElementTexture.new(root.getAttributeNamed("name"))
		var int texture
		var Color color
		
		root.forEachTag(block EasyXMLElement element, String tagName
			if tagName.equals("skin")
				var String filename = element.getFirstCData()
				if not filename.empty()
					stubTexture.setPathSkin(filename)
				end
				
			elif tagName.equals("transform")
				stubTexture.setTransform(pParseObjectTextureTransform(element))
				
			elif tagName.equals("tint")
				color = readColor(element, Color.white)
				if not color.equals(Color.white)
					stubTexture.setColorTint(color)
				end
				
			elif tagName.equals("property")
				stubTexture.setPropertyValueFor(element.getAttributeNamed("key"), \
					readMultilineString(element))
				
			else
				logUnknownTag(element)
				//throw EInvalidParam.new()
			end
		end)
		
		stubElement.addTexture(stubTexture)
	end
	
	/** Parse object texture transform tag. */
	private func TexMatrix2 pParseObjectTextureTransform(EasyXMLElement root)
		var Vector2 translation = Vector2.new(0.0, 0.0)
		var Vector2 scaling = Vector2.new(1.0, 1.0)
		var int e, count = root.getElementCount()
		var EasyXMLElement element
		var float rotation = 0.0
		var String tagName
		
		for e = 0 to count
			element = root.getElementAt(e)
			
			if element.getType() == EasyXMLElementType.tag
				tagName = element.getTagName()
				
				if tagName.equals("translation")
					translation = readVector2UV(element)
					
				elif tagName.equals("scaling")
					scaling = readVector2UV(element)
					
				elif tagName.equals("rotation")
					rotation = element.getFirstCDataFloat()
					
				else
					logUnknownTag(element)
				end
			end
		end
		
		return TexMatrix2.newSRT(scaling, rotation, translation)
	end
	
	/** Parse decal tag. */
	private func void pParseDecal(EasyXMLElement root, StubGameWorld stubWorld)
		var StubWorldDecal stubDecal = StubWorldDecal.new()
		
		root.forEachTag(block EasyXMLElement element, String tagName
			if tagName.equals("skin")
				var String filename = element.getFirstCData()
				if not filename.empty()
					stubDecal.setPathSkin(filename)
				end
				
			elif tagName.equals("texture")
				var String filename = element.getFirstCData()
				if not filename.empty()
					stubDecal.setTextureName(filename)
				end
				
			elif tagName.equals("position")
				stubDecal.setPosition(readDVector(element))
				
			elif tagName.equals("rotation")
				stubDecal.setRotation(readVector(element))
				
			elif tagName.equals("size")
				stubDecal.setSize(readVector(element))
				
			elif tagName.equals("visible")
				stubDecal.setVisible(element.getFirstCDataBool())
				
			elif tagName.equals("transform")
				stubDecal.setTransform(pParseObjectTextureTransform(element))
				
			elif tagName.equals("tint")
				var Color color = readColor(element, Color.white)
				if not color.equals(Color.white)
					stubDecal.setColorTint(color)
				end
				
			elif tagName.equals("property")
				stubDecal.setPropertyValueFor(element.getAttributeNamed("key"), \
					readMultilineString(element))
				
			else
				logUnknownTag(element)
			end
		end)
		
		stubWorld.addWorldDecal(stubDecal)
	end
	
	/** Parse navigation space tag. */
	private func void pParseNavigationSpace(EasyXMLElement root, StubGameWorld stubWorld)
		var int i, count = root.getElementCount()
		var Quaternion orientation = Quaternion.new()
		var DVector position = DVector.new()
		var NavigationSpace navspace
		var EasyXMLElement element
		var String tagName
		
		for i = 0 to count
			element = root.getElementAt(i)
			
			if element.getType() == EasyXMLElementType.tag
				tagName = element.getTagName()
				
				if tagName.equals("position")
					position = readDVector(element)
					
				elif tagName.equals("orientation")
					orientation = Matrix.newRotation(readVector(element)).toQuaternion()
					
				elif tagName.equals("filename")
					var String filename = element.getFirstCData()
					if not filename.empty()
						navspace = LoadNavigationSpace.new().loadFromFile(filename)
					end
					
				else
					logUnknownTag(element)
				end
			end
		end
		
		if navspace != null
			navspace.setPosition(position)
			navspace.setOrientation(orientation)
			stubWorld.addNavigationSpace(navspace)
		end
	end
end
