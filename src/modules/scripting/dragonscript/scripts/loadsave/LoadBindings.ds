/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */


namespace Dragengine.LoadSave

pin Dragengine.Gui.Events
pin Dragengine.Commands
pin Dragengine.Utils
pin Dragengine.XML



/**
 * \brief Load bindings from xml file.
 * 
 * Supports saving bindings.
 */
class LoadBindings extends BaseXmlLoader
	/** \brief Create binding loader. */
	public func new( Console console ) this( console, "LoadBindings" )
	end
	
	/** \brief Create bindings loader. */
	public func new( Console console, String name ) super( console, name )
	end
	
	
	
	/**
	 * \brief Load binding from file.
	 * 
	 * Adds bindings to \em bindingManager. Existing bindings are replaced. Allows to load
	 * multiple binding files replacing previous definitions if required. Clear the binding
	 * manager before loading the first file.
	 * 
	 * Bindings with not found commands are ignored but logged to the console. This avoids
	 * failing reading bindings if the game is modified for example by modifications or patches.
	 * 
	 * In general reading bindings files only throws exceptions if the file is XML incorrect.
	 * Invalid tags, attributes or values are only logged but no exceptions thrown.
	 */
	public func void loadFromFile( String filename, BindingManager bindingManager, \
	CommandManager commandManager )
		this.logLoadingFromFile( filename )
		
		var EasyXML document = EasyXML.new( filename )
		if document.hasParseFailed()
			this.logParsingFailed( document.getParseLog() )
			throw EInvalidParam.new()
		end
		
		var EasyXMLElement root = document.getRootElement()
		if not root.getTagName().equals( "bindings" )
			this.logUnknownTag( root )
			throw EInvalidParam.new()
		end
		
		this.readBindings( root, bindingManager, commandManager )
	end
	
	/**
	 * \brief Save bindings to file.
	 * 
	 * Saves all bindings in \em bindingManager.
	 */
	public func void saveToFile( String filename, BindingManager bindingManager )
		if bindingManager == null
			throw EInvalidParam.new()
		end
		
		this.logSavingFromFile( filename )
		
		var EasyXML document = EasyXML.new()
		var EasyXMLElement root = document.getRootElement()
		
		root.setTagName( "bindings" )
		
		this.writeBindings( root, bindingManager )
		
		document.writeToFile( FileWriter.new( filename ), false )
	end
	
	
	
	/**
	 * \brief Read bindings tag.
	 * 
	 * Can be used by other classes to read a bindings tag from any XML outside bindings XML.
	 */
	public func void readBindings( EasyXMLElement root, BindingManager bindingManager, \
	CommandManager commandManager )
		root.forEachTag( block EasyXMLElement element, String tagName
			if tagName.equals( "button" )
				this.pReadButton( element, bindingManager, commandManager )
				
			elif tagName.equals( "axis" )
				this.pReadAxis( element, bindingManager, commandManager )
				
			else
				this.logUnknownTag( element )
			end
		end )
	end
	
	/** \brief Read button binding. */
	private func void pReadButton( EasyXMLElement root, BindingManager bindingManager, \
	CommandManager commandManager )
		var int i, count = root.getElementCount()
		var String deviceID, id
		var Command command
		
		for i = 0 to count
			var EasyXMLElement element = root.getElementAt( i )
			if element.getType() != EasyXMLElementType.tag
				continue
			end
			
			var String tagName = element.getTagName()
			
			if tagName.equals( "device" )
				deviceID = element.getFirstCData()
				
			elif tagName.equals( "id" )
				id = element.getFirstCData()
				
			elif tagName.equals( "command" )
				command = commandManager.getNamed( element.getFirstCData() )
				if command == null
					this.printOnConsole( element, "Unknown command '" \
						+ element.getFirstCData() + "'" )
					return
				end
				
			else
				this.logUnknownTag( element )
			end
		end
		
		if deviceID == null
			this.logMissingTag( "device" )
			return
		end
		if id == null
			this.logMissingTag( "id" )
			return
		end
		if command == null
			this.logMissingTag( "command" )
			return
		end
		
		var Binding binding = bindingManager.findButtonBinding( deviceID, id )
		if binding != null
			bindingManager.removeButtonBinding( binding )
		end
		bindingManager.addButtonBinding( Binding.new( deviceID, id, command, false ) )
	end
	
	/** \brief Read axis binding. */
	private func void pReadAxis( EasyXMLElement root, BindingManager bindingManager, \
	CommandManager commandManager )
		var int i, count = root.getElementCount()
		var bool inverseAxis = false
		var String deviceID, id
		var Command command
		
		for i = 0 to count
			var EasyXMLElement element = root.getElementAt( i )
			if element.getType() != EasyXMLElementType.tag
				continue
			end
			
			var String tagName = element.getTagName()
			
			if tagName.equals( "device" )
				deviceID = element.getFirstCData()
				
			elif tagName.equals( "id" )
				id = element.getFirstCData()
				
			elif tagName.equals( "command" )
				command = commandManager.getNamed( element.getFirstCData() )
				if command == null
					this.printOnConsole( element, "Unknown command '" \
						+ element.getFirstCData() + "'" )
					return
				end
				
			elif tagName.equals( "inverseAxis" )
				inverseAxis = element.getFirstCDataBool()
				
			else
				this.logUnknownTag( element )
			end
		end
		
		if deviceID == null
			this.logMissingTag( "device" )
			return
		end
		if id == null
			this.logMissingTag( "id" )
			return
		end
		if command == null
			this.logMissingTag( "command" )
			return
		end
		
		var Binding binding = bindingManager.findAxisBinding( deviceID, id, inverseAxis )
		if binding != null
			bindingManager.removeAxisBinding( binding )
		end
		bindingManager.addAxisBinding( Binding.new( deviceID, id, command, inverseAxis ) )
	end
	
	
	
	/**
	 * \brief Write bindings tag.
	 * 
	 * Can be used by other classes to write a bindings tag to any XML outside bindings XML.
	 */
	public func void writeBindings( EasyXMLElement root, BindingManager bindingManager )
		bindingManager.forEachAxisBinding( block Binding each
			if each.getCommand() != null
				this.writeAxisBinding( root, each )
			end
		end )
		
		bindingManager.forEachButtonBinding( block Binding each
			if each.getCommand() != null
				this.writeButtonBinding( root, each )
			end
		end )
	end
	
	/** \brief Write axis binding tag. */
	protected func void writeAxisBinding( EasyXMLElement root, Binding binding )
		var EasyXMLElement tag = root.addTag( "axis" )
		tag.addDataTag( "device", binding.getDeviceID() )
		tag.addDataTag( "id", binding.getSourceID() )
		tag.addDataTag( "command", binding.getCommand().getName() )
		if binding.getInverseAxis()
			tag.addDataTag( "inverseAxis", true )
		end
	end
	
	/** \brief Write button binding tag. */
	protected func void writeButtonBinding( EasyXMLElement root, Binding binding )
		var EasyXMLElement tag = root.addTag( "button" )
		tag.addDataTag( "device", binding.getDeviceID() )
		tag.addDataTag( "id", binding.getSourceID() )
		tag.addDataTag( "command", binding.getCommand().getName() )
	end
end
