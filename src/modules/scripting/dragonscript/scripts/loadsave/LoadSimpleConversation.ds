/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

namespace Dragengine.LoadSave

pin Dragengine.ConversationSystem
pin Dragengine.Utils
pin Dragengine.XML
pin Dragengine.Gui.Events
pin Dragengine.Scenery

/**
 * \brief Load simple conversation from XML file.
 * \version 1.25
 * \see SimpleConversation
 * 
 * The following example shows how a simple conversation definition looks like:
 * 
 * \code{.xml}
 * <simpleConversation>
 *   <!-- Import another simple conversation. Typically used to share basic configs -->
 *   <import>shared.desconvo</import>
 * 
 *   <!-- Camera configurations -->
 *   <camera id='left'>
 *      <!-- Randomly picks an entry from all presents tags -->
 *      <delay>0.25</delay> <!-- action delay to assign -->
 * 
 *      <!-- Play specific camera shot. Use cameraTarget and lookAtTarget
 *           if required by selected camera shot -->
 *      <cameraShot cameraTarget='...' lookAtTarget='...'>ots medium left</cameraShot>
 * 
 *      <!-- Run snippet with topic from topic group -->
 *      <snippet group='dynamic cameras'>dynamic camera left</snippet>
 * 
 *      <!-- Run game command -->
 *      <command>dynamic camera left</command>
 * 
 *      <!-- Run actor command -->
 *      <command actor='player'>dynamic camera left</command>
 *   </camera>
 * 
 *   <!-- Initial configuration for 'actor' tags -->
 *   <actor id='player'>
 *      <actorId>player</actorId> <!-- ConversationActor id or alias -->
 *      <camera>left</camera>
 *      <delay>0.25</delay> <!-- action delay to assign -->
 *      <prolongLastGesture>0.25</prolongLastGesture> <!-- prolong last gesture to look better -->
 *   </actor>
 * 
 *   <actor id='player.think'>
 *      <actorId>player</actorId>
 *      <camera>left</camera>
 *      <style>think</style>
 *      <useSpeechAnimation>false</useSpeechAnimation>
 * 
 *      <!-- Multiple gestures can be defined played one after the other -->
 *      <gesture>begin think</gesture>
 *      <gesture>loop think</gesture>
 *   </actor>
 * 
 *   <actor id='npc'>
 *      <actorId>npc</actorId>
 *      <camera>right</camera>
 *   </actor>
 * 
 *   <!-- Conversation snippets. These can be trigged using their id.
 *   Content works like HTML text with tags triggering changes. -->
 *   <snippet id='example convo'>
 *      <actor id='player'/>
 *         <gesture id='hello'/> Hi there <tag anim='somebody'>{npcName}</tag>! How are you?
 *      <actor id='npc'/>
 *         <gesture id='hello'/> Oh, hi there.<br/>
 *         I didn't notice you coming in?<br/>
 *         Have you read my eMail?
 *      <actor id='player.think'/>
 *         EMail? I guess I should check my smartphone.
 *      <command actor='player'>showHint useSmartphone</command>
 *         <!-- without actor='player' this is a game command -->
 * 
 *      <!-- more supported tags
 *      <stopTopic/>
 *      <stopConversation/>
 *      <variable name='my variable'>2</variable>
 *         value can be prefixed with '+' to increment, '-' to decrement
 *         and '~' to randomize between 0 and value inclusive.
 *         if actor='player' is present actor parameter is set instead of variable
 *      <trigger name='my trigger'>fire</variable>
 *         value can be fire, reset, pulse and fullReset.
 * 
 *      <if variable='variable name' test='=2'>snippet to run</if>
 *      <if actor='player' parameter='parameter name' test='=2'>snippet to run</if>
 *         test can be prefixed with '=', '!=', '<', '<=', '>' or '>='.
 *         if prefixed operator is absent '=' is used.
 *      <if trigger='trigger name' test='fired'>snippet to run</if>
 *         test can be fired, notFired, everFired, neverFired.
 *         if test attribute is absent 'fired' is used.
 *      <if condition='game condition' test='true'>snippet to run</if>
 *         test can be true or false. default is test='true'
 *      <if actor='player' condition='actor condition' test='true'>snippet to run</if>
 *         test can be true or false.
 *         if test attribute is absent 'fired' is used.
 * 
 *      <elif ...> same as <if ...> but adds another case to the previous <if>
 * 
 *      <else>snippet to run</else>
 *      -->
 * 
 *      <!--
 *      Some tags support a condensed form to make the conversation easier to read
 * 
 *      <actor id='player'/> = <a i='player'/>
 *      <gesture id='hello'/> = <g i='hello'/>
 *      <tag anim='somebody'>{npcName}</tag> = <t a='somebody'>{npcName}</t>
 *      -->
 *   </snippet>
 * </simleConversation>
 * \endcode
 */
class LoadSimpleConversation extends BaseXmlLoader
	var Dictionary pConversations
	
	
	/** \brief Create loader. */
	func new(Console console) this(console, "LoadSimpleConversation")
	end
	
	/** \brief Create loader. */
	func new(Console console, String name) super(console, name)
		pConversations = Dictionary.new()
	end
	
	
	/**
	 * \brief Load simple conversation from file.
	 * \warning Loaded simple conversation is shared. Do not change it.
	 */
	func SimpleConversation loadFromFile(String filename)
		var SimpleConversation conversation =\
			pConversations.getAt(filename, null) cast SimpleConversation
		if conversation != null
			return conversation
		end
		
		return loadAndParseRootTag(filename, "simpleConversation", block EasyXMLElement root
			conversation = SimpleConversation.new(filename)
			readConversation(root, conversation, File.new(filename).getParent().getPath())
			pConversations.setAt(filename, conversation)
			return conversation
		end) cast SimpleConversation
	end
	
	/**
	 * \brief Load simple conversations from file matching pattern.
	 * \warning Loaded simple conversations are shared. Do not change it.
	 * 
	 * Scans directory files for files matching pattern. Matching files are loaded using
	 * \ref #loadFromFile(). Loaded simple conversations are then added to the list.
	 */
	func void loadWithPattern(Array list, String directory, String pattern, bool recursive)
		FileSystem.searchFiles(directory, recursive, block String each, FileType type
			if type == FileType.file and FileSystem.pathMatchesPattern(File.new(each).getName(), pattern)
				list.add(loadFromFile(each))
			end
			return true
		end)
	end
	
	
	protected func void readConversation(EasyXMLElement root, SimpleConversation conversation, String basePath)
		root.forEachTag(block EasyXMLElement element, String tagName
			if tagName.equals("import")
				var String filename = element.getFirstCData()
				try
					conversation.import(loadFromFile(File.absolutePath(filename, basePath).getPath()))
					
				catch Exception e
					logLoadFileFailed(element, filename)
					throw
				end
				
			elif tagName.equals("camera")
				conversation.addCamera(readCamera(element))
				
			elif tagName.equals("actor")
				conversation.addActor(readActor(element))
				
			elif tagName.equals("snippet")
				conversation.addSnippet(readSnippet(element))
				
			else
				logUnknownTag(element)
			end
		end)
	end
	
	protected func SimpleConversationCamera readCamera(EasyXMLElement root)
		var SimpleConversationCamera camera = SimpleConversationCamera.new(\
			StringID.new(root.getAttributeNamed("id")))
		
		root.forEachTag(block EasyXMLElement element, String tagName
			if tagName.equals("cameraShot")
				var SimpleConversationCameraShot shot = SimpleConversationCameraShot.new(\
					SimpleConversationCameraShot.Type.cameraShot)
				shot.setTarget(StringID.new(element.getFirstCData()))
				
				if element.hasAttributeNamed("cameraTarget")
					shot.setCameraTarget(StringID.new(element.getAttributeNamed("cameraTarget")))
				end
				
				if element.hasAttributeNamed("lookAtTarget")
					shot.setLookAtTarget(StringID.new(element.getAttributeNamed("lookAtTarget")))
				end
				
				camera.addShot(shot)
				
			elif tagName.equals("snippet")
				var SimpleConversationCameraShot shot = SimpleConversationCameraShot.new(\
					SimpleConversationCameraShot.Type.snippet)
				shot.setTarget(StringID.new(element.getFirstCData()))
				shot.setSubTarget(StringID.new(element.getAttributeNamed("group")))
				camera.addShot(shot)
				
			elif tagName.equals("command")
				var SimpleConversationCameraShot shot = SimpleConversationCameraShot.new(\
					SimpleConversationCameraShot.Type.command)
				if element.hasAttributeNamed("actor")
					shot.setTarget(StringID.new(element.getAttributeNamed("actor")))
				end
				shot.setCommand(element.getFirstCData())
				camera.addShot(shot)
				
			elif tagName.equals("delay")
				camera.setDelay(element.getFirstCDataFloat())
				
			else
				logUnknownTag(element)
			end
		end)
		
		return camera
	end
	
	protected func SimpleConversationActor readActor(EasyXMLElement root)
		var SimpleConversationActor actor = SimpleConversationActor.new(\
			StringID.new(root.getAttributeNamed("id")))
		
		root.forEachTag(block EasyXMLElement element, String tagName
			if tagName.equals("actorId")
				actor.setActorId(StringID.new(element.getFirstCData()))
				
			elif tagName.equals("camera")
				actor.setCamera(StringID.new(element.getFirstCData()))
				
			elif tagName.equals("style")
				actor.setStyle(StringID.new(element.getFirstCData()))
				
			elif tagName.equals("gesture")
				actor.addGesture(StringID.new(element.getFirstCData()))
				
			elif tagName.equals("delay")
				actor.setDelay(element.getFirstCDataFloat())
				
			elif tagName.equals("prolongLastGesture")
				actor.setProlongLastGesture(element.getFirstCDataFloat())
				
			elif tagName.equals("useSpeechAnimation")
				actor.setUseSpeechAnimation(element.getFirstCDataBool())
				
			else
				logUnknownTag(element)
			end
		end)
		
		return actor
	end
	
	protected func SimpleConversationSnippet readSnippet(EasyXMLElement root)
		var SimpleConversationSnippet snippet = SimpleConversationSnippet.new(\
			StringID.new(root.getAttributeNamed("id")))
		var SimpleConversationAction action
		
		var int i, count = root.getElementCount()
		var EasyXMLElement element
		var String tagName, text
		var byte character
		
		for i = 0 to count
			element = root.getElementAt(i)
			
			select element.getType()
			case EasyXMLElementType.tag
				tagName = element.getTagName()
				if tagName.equals("actor")
					action = SimpleConversationAction.new(SimpleConversationAction.Type.actor)
					action.setActor(StringID.new(element.getAttributeNamed("id")))
					snippet.addAction(action)
					
				elif tagName.equals("gesture")
					action = SimpleConversationAction.new(SimpleConversationAction.Type.gesture)
					action.setTarget(StringID.new(element.getAttributeNamed("id")))
					snippet.addAction(action)
					
				elif tagName.equals("command")
					action = SimpleConversationAction.new(SimpleConversationAction.Type.command)
					if element.hasAttributeNamed("actor")
						action.setActor(StringID.new(element.getAttributeNamed("actor")))
					end
					action.setName(element.getFirstCData())
					snippet.addAction(action)
					
				elif tagName.equals("br")
					snippet.addAction(SimpleConversationAction.new(SimpleConversationAction.Type.actor))
					
				elif tagName.equals("tag")
					action = SimpleConversationAction.new(SimpleConversationAction.Type.speak)
					action.setText(UnicodeString.newFromUTF8(element.getFirstCData()))
					action.setAnimText(UnicodeString.newFromUTF8(element.getAttributeNamed("anim")))
					snippet.addAction(action)
					
				elif tagName.equals("stopTopic")
					snippet.addAction(SimpleConversationAction.new(\
						SimpleConversationAction.Type.stopTopic))
					
				elif tagName.equals("stopConversation")
					snippet.addAction(SimpleConversationAction.new(\
						SimpleConversationAction.Type.stopConversation))
					
				elif tagName.equals("variable")
					text = element.getFirstCData()
					character = text.getAt(0)
					
					action = SimpleConversationAction.new(SimpleConversationAction.Type.variable)
					action.setName(element.getAttributeNamed("name"))
					
					if element.hasAttributeNamed("actor")
						action.setActor(StringID.new(element.getAttributeNamed("actor")))
						
						select character
						case '+'
							action.setValue(text.substring(1).toInt())
							action.setMode(CActionSetActorParameter.Operator.increment)
							
						case '-'
							action.setValue(text.substring(1).toInt())
							action.setMode(CActionSetActorParameter.Operator.decrement)
							
						case '~'
							action.setValue(text.substring(1).toInt())
							action.setMode(CActionSetActorParameter.Operator.random)
							
						else
							action.setValue(text.toInt())
							action.setMode(CActionSetActorParameter.Operator.set)
						end
						
					else
						select character
						case '+'
							action.setValue(text.substring(1).toInt())
							action.setMode(CActionSetVariable.Operator.increment)
							
						case '-'
							action.setValue(text.substring(1).toInt())
							action.setMode(CActionSetVariable.Operator.decrement)
							
						case '~'
							action.setValue(text.substring(1).toInt())
							action.setMode(CActionSetVariable.Operator.random)
							
						else
							action.setValue(text.toInt())
							action.setMode(CActionSetVariable.Operator.set)
						end
					end
					
					snippet.addAction(action)
					
				elif tagName.equals("trigger")
					action = SimpleConversationAction.new(SimpleConversationAction.Type.trigger)
					action.setTarget(StringID.new(element.getAttributeNamed("name")))
					
					text = element.getFirstCData()
					action.setMode(CActionTrigger.Action.named(text))
					if action.getMode() == null
						logInvalidValue(element, text)
						throw EInvalidParam.new("invalid value: " + text)
					end
					
					snippet.addAction(action)
					
				elif tagName.equals("if") or tagName.equals("elif")
					action = SimpleConversationAction.new(tagName.equals("if")\
						if SimpleConversationAction.Type.condIf\
						else SimpleConversationAction.Type.condElif)
					action.setTarget(StringID.new(element.getFirstCData()))
					
					if element.hasAttributeNamed("variable")
						action.setCondition(SimpleConversationAction.Condition.variable)
						action.setName(element.getAttributeNamed("variable"))
						
						text = element.getAttributeNamed("test")
						if text.startsWith("!=")
							action.setValue(text.substring(2).toInt())
							action.setMode(CConditionVariable.Operator.notEqual)
							
						elif text.startsWith("<=")
							action.setValue(text.substring(2).toInt())
							action.setMode(CConditionVariable.Operator.lessThanOrEqual)
							
						elif text.startsWith(">=")
							action.setValue(text.substring(2).toInt())
							action.setMode(CConditionVariable.Operator.greaterThanOrEqual)
							
						elif text.startsWith("=")
							action.setValue(text.substring(1).toInt())
							action.setMode(CConditionVariable.Operator.equal)
							
						elif text.startsWith("<")
							action.setValue(text.substring(1).toInt())
							action.setMode(CConditionVariable.Operator.lessThan)
							
						elif text.startsWith(">")
							action.setValue(text.substring(1).toInt())
							action.setMode(CConditionVariable.Operator.greaterThan)
							
						else
							action.setValue(text.toInt())
							action.setMode(CConditionVariable.Operator.equal)
						end
						
					elif element.hasAttributeNamed("parameter")
						action.setCondition(SimpleConversationAction.Condition.variable)
						action.setName(element.getAttributeNamed("parameter"))
						action.setActor(StringID.new(element.getAttributeNamed("actor")))
						
						text = element.getAttributeNamed("test")
						if text.startsWith("!=")
							action.setValue(text.substring(2).toInt())
							action.setMode(CConditionActorParameter.Operator.notEqual)
							
						elif text.startsWith("<=")
							action.setValue(text.substring(2).toInt())
							action.setMode(CConditionActorParameter.Operator.lessThanOrEqual)
							
						elif text.startsWith(">=")
							action.setValue(text.substring(2).toInt())
							action.setMode(CConditionActorParameter.Operator.greaterThanOrEqual)
							
						elif text.startsWith("=")
							action.setValue(text.substring(1).toInt())
							action.setMode(CConditionActorParameter.Operator.equal)
							
						elif text.startsWith("<")
							action.setValue(text.substring(1).toInt())
							action.setMode(CConditionActorParameter.Operator.lessThan)
							
						elif text.startsWith(">")
							action.setValue(text.substring(1).toInt())
							action.setMode(CConditionActorParameter.Operator.greaterThan)
							
						else
							action.setValue(text.toInt())
							action.setMode(CConditionActorParameter.Operator.equal)
						end
						
					elif element.hasAttributeNamed("trigger")
						action.setCondition(SimpleConversationAction.Condition.trigger)
						action.setName(element.getAttributeNamed("trigger"))
						action.setMode(CConditionTrigger.TestMode.named(element.getAttributeNamed("test")))
						
					elif element.hasAttributeNamed("condition")
						action.setCondition(SimpleConversationAction.Condition.condition)
						action.setName(element.getAttributeNamed("condition"))
						if element.hasAttributeNamed("actor")
							action.setActor(StringID.new(element.getAttributeNamed("actor")))
						end
						
						if element.hasAttributeNamed("test")
							text = element.getAttributeNamed("test")
							if text.equals("true")
								action.setValue(1)
								
							elif text.equals("false")
								action.setValue(0)
								
							else
								logInvalidValue(element, text)
								throw EInvalidParam.new("invalid value: " + text)
							end
							
						else
							action.setValue(1)
						end
						
					else
						logMissingAttribute(element, "variable, parameter, trigger or condition")
						throw EInvalidParam.new("missing attribute")
					end
					
					snippet.addAction(action)
					
				elif tagName.equals("else")
					action = SimpleConversationAction.new(SimpleConversationAction.Type.condElse)
					action.setTarget(StringID.new(element.getFirstCData()))
					snippet.addAction(action)
					
				elif tagName.equals("a")
					action = SimpleConversationAction.new(SimpleConversationAction.Type.actor)
					action.setActor(StringID.new(element.getAttributeNamed("i")))
					snippet.addAction(action)
					
				elif tagName.equals("g")
					action = SimpleConversationAction.new(SimpleConversationAction.Type.gesture)
					action.setTarget(StringID.new(element.getAttributeNamed("i")))
					snippet.addAction(action)
					
				elif tagName.equals("t")
					action = SimpleConversationAction.new(SimpleConversationAction.Type.speak)
					action.setText(UnicodeString.newFromUTF8(element.getFirstCData()))
					action.setAnimText(UnicodeString.newFromUTF8(element.getAttributeNamed("a")))
					snippet.addAction(action)
					
				else
					logUnknownTag(element)
				end
				
			case EasyXMLElementType.cdata
				text = element.getCDataContent().trimBoth()
				if text.empty()
					continue
				end
				
				action = SimpleConversationAction.new(SimpleConversationAction.Type.speak)
				action.setText(UnicodeString.newFromUTF8(text))
				snippet.addAction(action)
			end
		end
		
		return snippet
	end
end
