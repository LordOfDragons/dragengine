/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */


namespace Dragengine.LoadSave

pin Dragengine.Scenery
pin Dragengine.Utils



/**
 * \brief Helper class for handling flags for persistency.
 * 
 * Simplifies handling flags persisted in files reducing coding effort. For
 * reading provides support to query set and cleared bits. For writing
 * provides support to set and clear bits.
 * 
 * Depending on the number of flags set in the constructor the flags are saved
 * as one or more consecutive bytes.
 */
class PersistencyFlags
	/** \brief Array of flags as boolean. */
	var Array pFlags
	
	
	
	/**
	 * \brief Create persistency flags.
	 * \details The default value of all flags is \em false.
	 * \throws EInvalidParam \em flagCount is less than 1.
	 */
	func new(int flagCount)
		if flagCount < 1
			throw EInvalidParam.new()
		end
		pFlags = Array.new(flagCount, false)
	end
	
	/**
	 * \brief Read flags from file writer.
	 * \throws EInvalidParam \em flagCount is less than 1.
	 * \throws EInvalidParam \em reader is \em null.
	 */
	func new(int flagCount, FileReader reader)
		if flagCount < 1 or reader == null
			throw EInvalidParam.new()
		end
		
		pFlags = Array.new(flagCount)
		
		var int i, j, value, lastBit
		
		for i = 0 to flagCount step 8
			lastBit = Math.min(8, flagCount - i)
			value = reader.readByte()
			
			for j = 0 to lastBit
				pFlags.add((value & (1 << j)) != 0)
			end
		end
	end
	
	
	
	/** \brief Number of flags. */
	func int getCount()
		return pFlags.getCount()
	end
	
	/**
	 * \brief Flag is set.
	 * \throws EInvalidParam \em flag is less than 0 or larger or equal than getFlagCount().
	 */
	func bool getAt(int flag)
		return pFlags.getAt(flag) cast bool
	end
	
	/**
	 * \brief Set flag.
	 * \throws EInvalidParam \em flag is less than 0 or larger or equal than getFlagCount().
	 */
	func void setAt(int flag, bool value)
		pFlags.setAt(flag, value)
	end
	
	/** \brief Write flags to file writer. */
	func void writeToFile(FileWriter writer)
		var int count = pFlags.getCount()
		var int i, j, value, lastBit
		
		for i = 0 to count step 8
			lastBit = Math.min(8, count - i)
			value = 0
			
			for j = 0 to lastBit
				if pFlags.getAt(i + j) cast bool
					value |= 1 << j
				end
			end
			
			writer.writeByte(value)
		end
	end
	
	/** \brief String representation of object. */
	func String toString()
		return pFlags.toString()
	end
end
