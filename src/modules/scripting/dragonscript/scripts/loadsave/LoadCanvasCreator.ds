/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */


namespace Dragengine.LoadSave

pin Dragengine.Gui.CanvasCreators
pin Dragengine.Scenery
pin Dragengine.Utils
pin Dragengine.XML



/**
 * \brief Load customized canvas creator from file.
 * 
 * Returns a canvas creatory.
 */
class LoadCanvasCreator extends BaseXmlLoader
	/** \brief Dictionary of loaded canvas creators. */
	private var Dictionary pLoadedCreators
	
	/** \brief Canvas creators. */
	private var CanvasCreators pCreators
	
	
	
	/** \brief Create loader. */
	public func new(Console console) this(console, "LoadCanvasCreator")
	end
	
	/** \brief Create loader. */
	public func new(Console console, String name) super(console, name)
		pLoadedCreators = Dictionary.new()
		pCreators = CanvasCreators.new()
		pCreators.addDefaultCreators()
	end
	
	
	
	/** \brief Factories. */
	public func CanvasCreators getFactories()
		return pCreators
	end
	
	/** \brief Set factories. */
	public func void setFactories(CanvasCreators factories)
		if factories == null
			throw EInvalidParam.new()
		end
		pCreators = factories
	end
	
	
	
	/**
	 * \brief Load canvas creator from xml file.
	 * 
	 * Creators are loaded once then shared across upcoming loading requests.
	 * Call copyCanvasCreator() if you want to modify the canvas creator.
	 */
	public func CanvasCreator loadFromFile(String filename)
		var CanvasCreator creator = pLoadedCreators.getAt(filename, null) cast CanvasCreator
		if creator != null
			return creator
		end
		
		logLoadingFromFile(filename)
		
		var EasyXML document = EasyXML.new(filename)
		if document.hasParseFailed()
			logParsingFailed(document.getParseLog())
			throw EInvalidParam.new()
		end
		
		var EasyXMLElement root = document.getRootElement()
		if not root.getTagName().equals("canvasCreator")
			logUnknownTag(filename, root)
			throw EInvalidParam.new()
		end
		
		var String basePath = File.new(filename).getParent().getPath()
		
		creator = parseCanvasCreator(filename, root, basePath)
		pLoadedCreators.setAt(filename, creator)
		return creator
	end
	
	
	
	/**
	 * \brief Parse canvas creator tag.
	 * 
	 * This is public to be used by LoadGuiTheme. Creators are loaded once then shared
	 * across upcoming loading requests. Call copyCanvasCreator() if you want to
	 * modify the canvas creator.
	 */
	public func CanvasCreator parseCanvasCreator(String filename, \
	EasyXMLElement root, String basePath)
		var CanvasCreator creator
		
		if root.hasAttributeNamed("extend")
			try
				creator = loadFromFile(File.absolutePath(\
					root.getAttributeNamed("extend"), basePath).getPath())
				
			catch Exception e
				printOnConsole(filename, root, "Failed loading canvas creator '" \
					+ root.getAttributeNamed("extend") + "'")
				throw
			end
			
		elif root.hasAttributeNamed("type")
			try
				creator = pCreators.getNamed(root.getAttributeNamed("type"))
				
			catch Exception e
				printOnConsole(filename, root, "Canvas creator type '" \
					+ root.getAttributeNamed("type") + "' not found")
				throw
			end
			
		else
			printOnConsole(filename, root, "Missing source attribute")
			throw EInvalidParam.new()
		end
		
		var int i, elementCount = root.getElementCount()
		var EasyXMLElement element
		var Object parameterValue
		var String parameterName
		var bool isShared = true
		
		for i = 0 to elementCount
			element = root.getElementAt(i)
			if element.getType() != EasyXMLElementType.tag
				continue
			end
			
			if isShared
				creator = creator.copyCanvasCreator()
				isShared = false
			end
			
			parameterName = element.getAttributeNamed("parameter")
			parameterValue = parseParameter(filename, element, basePath)
			
			try
				creator.setParameter(parameterName, parameterValue)
				
			catch Exception e
				printOnConsole(filename, element, creator.className() \
					+ " does not understand parameter '" + parameterName \
					+ "' with value '" + parameterValue + "'")
			end
		end
		
		return creator
	end
	
	/**
	 * \brief Parse canvas creator parameter.
	 * \details Overwrite in subclass to extend the supported parameter types.
	 */
	private func Object parseParameter(String filename, EasyXMLElement element, String basePath)
		var String tagName = element.getTagName()
		
		if tagName.equals("integer")
			return element.getFirstCDataInt()
			
		elif tagName.equals("float")
			return element.getFirstCDataFloat()
			
		elif tagName.equals("boolean")
			return element.getFirstCDataBool()
			
		elif tagName.equals("string")
			return element.getFirstCData()
			
		elif tagName.equals("color")
			return readColor(element)
			
		elif tagName.equals("borderSize")
			return readBorderSize(element)
			
		elif tagName.equals("point")
			return readPoint(element)
			
		elif tagName.equals("colorMatrix")
			return readColorMatrix(element)
			
		elif tagName.equals("image")
			var String path = element.getFirstCData()
			if path.empty()
				return null
			end
			
			try
				return Image.new(File.absolutePath(path, basePath).getPath())
				
			catch Exception e
				printOnConsole(filename, element, "Failed loading image '" + path + "'")
				throw
			end
			
		elif tagName.equals("video")
			var String path = element.getFirstCData()
			if path.empty()
				return null
			end
			
			try
				return Video.new(File.absolutePath(path, basePath).getPath())
				
			catch Exception e
				printOnConsole(filename, element, "Failed loading video '" + path + "'")
				throw
			end
			
		elif tagName.equals("canvasCreator")
			return parseCanvasCreator(filename, element, basePath)
			
		elif tagName.equals("null")
			return null
			
		else
			logUnknownTag(filename, element)
			throw EInvalidParam.new()
		end
	end
end
