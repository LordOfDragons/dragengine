/* 
 * Drag[en]gine DragonScript Script Module
 *
 * Copyright (C) 2020, Roland PlÃ¼ss (roland@rptd.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */


namespace Dragengine.LoadSave

pin Dragengine.Animators
pin Dragengine.Scenery
pin Dragengine.Utils
pin Dragengine.XML



/**
 * \brief Load animator from deanimator file.
 * 
 * Supports caching animators to avoid loading the same animator multiple times. Returned
 * animator can thus be shared so do not change it. Supports storing controller names.
 */
class LoadAnimator extends BaseXmlLoader
	/** \brief Dictionary of cached animators (Dictionary: String -> Animator). */
	var Dictionary pAnimators
	
	
	
	/** \brief Create loader. */
	func new(Console console) this(console, "LoadAnimator")
	end
	
	/** \brief Create new loader. */
	func new(Console console, String name) super(console, name)
		pAnimators = Dictionary.new()
	end
	
	
	
	/** \brief Load animator from file. */
	func Animator loadFromFile(String filename)
		var Animator animator = pAnimators.getAt(filename, null) cast Animator
		if animator != null
			return animator
		end
		
		return loadAndParseRootTag(filename, "animator", block EasyXMLElement root
			var AnimatorDefinition definition = AnimatorDefinition.new(filename)
			pParseAnimatorDefinition(root, definition, File.new(filename).getParent().getPath())
			
			animator = Animator.new()
			definition.buildAnimator(animator)
			pAnimators.setAt(filename, animator)
			return animator
		end) cast Animator
	end
	
	/**
	 * \brief Load animator definition from file.
	 * \version 1.13
	 * 
	 * Creates a new animator definition each time the function is called.
	 */
	func AnimatorDefinition loadDefinitionFromFile(String filename)
		return loadAndParseRootTag(filename, "animator", block EasyXMLElement root
			var AnimatorDefinition definition = AnimatorDefinition.new(filename)
			pParseAnimatorDefinition(root, definition, File.new(filename).getParent().getPath())
			return definition
		end) cast AnimatorDefinition
	end
	
	
	
	/** Parse animator tag. */
	private func void pParseAnimatorDefinition(EasyXMLElement root, \
	AnimatorDefinition animator, String basePath)
		var String filename
		
		root.forEachTag(block EasyXMLElement element, String tagName
			if tagName.equals("rig")
				filename = element.getFirstCData()
				
				if not filename.empty()
					try
						animator.setRig(Rig.new(\
							File.absolutePath(filename, basePath).getPath()))
						
					catch Exception e
						logLoadFileFailed(element, filename)
					end
				end
				
			elif tagName.equals("animation")
				filename = element.getFirstCData()
				
				if not filename.empty()
					try
						animator.setAnimation(Animation.new(\
							File.absolutePath(filename, basePath).getPath()))
						
					catch Exception e
						logLoadFileFailed(element, filename)
					end
				end
				
			elif tagName.equals("controller")
				pParseController(element, animator)
				
			elif tagName.equals("link")
				pParseLink(element, animator)
				
			elif tagName.equals("bone")
				animator.addBone(element.getFirstCData())
				
			elif tagName.equals("vertexPositionSet")
				animator.addVertexPositionSet(element.getFirstCData())
				
			else
				var ADRule rule = pParseRule(element, animator, basePath)
				if rule != null
					animator.addRule(rule)
				end
			end
		end)
	end
	
	/** Parse controller tag. */
	private func void pParseController(EasyXMLElement root, AnimatorDefinition animator)
		var ADController controller = ADController.new()
		
		root.forEachTag(block EasyXMLElement element, String tagName
			if tagName.equals("name")
				controller.setName(element.getFirstCData())
				
			elif tagName.equals("clamp")
				controller.setClamp(element.getFirstCDataBool())
				
			elif tagName.equals("frozen")
				controller.setFrozen(element.getFirstCDataBool())
				
			elif tagName.equals("limits")
				controller.setMinimum(element.getAttributeFloatNamed("min"))
				controller.setMaximum(element.getAttributeFloatNamed("max"))
				
			elif tagName.equals("value")
				controller.setValue(element.getFirstCDataFloat())
				
			elif tagName.equals("vector")
				controller.setVector(readVector(element))
			end
		end)
		
		animator.addController(controller)
	end
	
	/** Parse link tag. */
	private func void pParseLink(EasyXMLElement root, AnimatorDefinition animator)
		var ADLink link = ADLink.new()
		var int index
		
		root.forEachTag(block EasyXMLElement element, String tagName
			if tagName.equals("controller")
				index = element.getFirstCDataInt()
				
				if index >= 0 and index < animator.getControllerCount()
					link.setController(animator.getControllerAt(index))
				end
				
			elif tagName.equals("repeat")
				link.setRepeat(element.getFirstCDataInt())
				
			elif tagName.equals("curve")
				link.setCurve(readCurveBezier(element))
				
			elif tagName.equals("bone")
				link.setBone(element.getFirstCData())
				
			elif tagName.equals("boneParameter")
				link.setBoneParameter(AnimatorLinkBoneParameter.named(element.getFirstCData()))
				
			elif tagName.equals("boneLimits")
				link.setBoneMinimum(element.getAttributeFloatNamed("min"))
				link.setBoneMaximum(element.getAttributeFloatNamed("max"))
				
			elif tagName.equals("vertexPositionSet")
				link.setVertexPositionSet(element.getFirstCData())
				
			elif tagName.equals("vertexPositionSetLimits")
				link.setVertexPositionSetMinimum(element.getAttributeFloatNamed("min"))
				link.setVertexPositionSetMaximum(element.getAttributeFloatNamed("max"))
				
			elif tagName.equals("wrapY")
				link.setWrapY(element.getFirstCDataBool())
			end
		end)
		
		animator.addLink(link)
	end
	
	/** Parse common rule tag. */
	private func void pParseRuleCommon(EasyXMLElement element, AnimatorDefinition animator, ADRule rule)
		var String tagName = element.getTagName()
		
		if tagName.equals("name")
			rule.setName(element.getFirstCData())
			
		elif tagName.equals("enabled")
			rule.setEnabled(element.getFirstCDataBool())
			
		elif tagName.equals("blendMode")
			var AnimatorRuleBlendMode blendMode = AnimatorRuleBlendMode.named(element.getFirstCData())
			if blendMode != null
				rule.setBlendMode(blendMode)
				
			else
				logInvalidValue(element, element.getFirstCData())
			end
			
		elif tagName.equals("blendFactor")
			rule.setBlendFactor(element.getFirstCDataFloat())
			
		elif tagName.equals("invertBlendFactor")
			rule.setInvertBlendFactor(element.getFirstCDataBool())
			
		elif tagName.equals("bone")
			rule.addBone(element.getFirstCData())
			
		elif tagName.equals("vertexPositionSet")
			rule.addVertexPositionSet(element.getFirstCData())
		end
	end
	
	/** Parse animator tag. */
	private func ADRule pParseRule(EasyXMLElement root, AnimatorDefinition animator, String basePath)
		var String tagName = root.getTagName()
		
		if tagName.equals("ruleAnimation")
			return pParseRuleAnimation(root, animator)
			
		elif tagName.equals("ruleAnimationDifference")
			return pParseRuleAnimationDifference(root, animator)
			
		elif tagName.equals("ruleAnimationSelect")
			return pParseRuleAnimationSelect(root, animator)
			
		elif tagName.equals("ruleBoneTransformator")
			return pParseRuleBoneTransformator(root, animator)
			
		elif tagName.equals("ruleStateManipulator")
			return pParseRuleStateManipulator(root, animator)
			
		elif tagName.equals("ruleStateSnapshot")
			return pParseRuleStateShapshot(root, animator)
			
		elif tagName.equals("ruleInverseKinematic")
			return pParseRuleInverseKinematic(root, animator)
			
		elif tagName.equals("ruleForeignState")
			return pParseRuleForeignState(root, animator)
			
		elif tagName.equals("ruleMirror")
			return pParseRuleMirror(root, animator)
			
		elif tagName.equals("ruleSubAnimator")
			return pParseRuleSubAnimator(root, animator, basePath)
			
		elif tagName.equals("ruleTrackTo")
			return pParseRuleTrackTo(root, animator)
			
		elif tagName.equals("ruleLimit")
			return pParseRuleLimit(root, animator)
			
		elif tagName.equals("ruleGroup")
			return pParseRuleGroup(root, animator, basePath)
		end
		
		return null
	end
	
	/** Parse animation rule tag. */
	private func ADRule pParseRuleAnimation(EasyXMLElement root, AnimatorDefinition animator)
		var ADRuleAnimation rule = ADRuleAnimation.new()
		
		root.forEachTag(block EasyXMLElement element, String tagName
			if tagName.equals("moveName")
				rule.setMoveName(element.getFirstCData())
				
			elif tagName.equals("moveTime")
				rule.setMoveTime(element.getFirstCDataFloat())
				
			elif tagName.equals("enablePosition")
				rule.setEnablePosition(element.getFirstCDataBool())
				
			elif tagName.equals("enableOrientation")
				rule.setEnableOrientation(element.getFirstCDataBool())
				
			elif tagName.equals("enableSize")
				rule.setEnableSize(element.getFirstCDataBool())
				
			elif tagName.equals("enableVertexPositionSet")
				rule.setEnableVertexPositionSet(element.getFirstCDataBool())
				
			elif tagName.equals("target")
				var ARAnimationTarget target = ARAnimationTarget.named(element.getAttributeNamed("name"))
				if target != null
					pParseTarget(element, animator, rule, target)
					
				else
					logInvalidValue(element, element.getAttributeNamed("name"))
					throw EInvalidParam.new()
				end
				
			else
				pParseRuleCommon(element, animator, rule)
			end
		end)
		
		return rule
	end
	
	/** Parse animation difference rule tag. */
	private func ADRule pParseRuleAnimationDifference(EasyXMLElement root, AnimatorDefinition animator)
		var ADRuleAnimationDifference rule = ADRuleAnimationDifference.new()
		
		root.forEachTag(block EasyXMLElement element, String tagName
			if tagName.equals("leadingMoveName")
				rule.setLeadingMoveName(element.getFirstCData())
				
			elif tagName.equals("leadingMoveTime")
				rule.setLeadingMoveTime(element.getFirstCDataFloat())
				
			elif tagName.equals("referenceMoveName")
				rule.setReferenceMoveName(element.getFirstCData())
				
			elif tagName.equals("referenceMoveTime")
				rule.setReferenceMoveTime(element.getFirstCDataFloat())
				
			elif tagName.equals("enablePosition")
				rule.setEnablePosition(element.getFirstCDataBool())
				
			elif tagName.equals("enableOrientation")
				rule.setEnableOrientation(element.getFirstCDataBool())
				
			elif tagName.equals("enableSize")
				rule.setEnableSize(element.getFirstCDataBool())
				
			elif tagName.equals("enableVertexPositionSet")
				rule.setEnableVertexPositionSet(element.getFirstCDataBool())
				
			elif tagName.equals("target")
				var ARAnimationDifferenceTarget target = ARAnimationDifferenceTarget.named(element.getAttributeNamed("name"))
				if target != null
					pParseTarget(element, animator, rule, target)
					
				else
					logInvalidValue(element, element.getAttributeNamed("name"))
					throw EInvalidParam.new()
				end
				
			else
				pParseRuleCommon(element, animator, rule)
			end
		end)
		
		return rule
	end
	
	/** \brief Parse animation select rule tag. */
	private func ADRule pParseRuleAnimationSelect(EasyXMLElement root, AnimatorDefinition animator)
		var ADRuleAnimationSelect rule = ADRuleAnimationSelect.new()
		
		root.forEachTag(block EasyXMLElement element, String tagName
			if tagName.equals("move")
				rule.addMove(element.getFirstCData())
				
			elif tagName.equals("enablePosition")
				rule.setEnablePosition(element.getFirstCDataBool())
				
			elif tagName.equals("enableOrientation")
				rule.setEnableOrientation(element.getFirstCDataBool())
				
			elif tagName.equals("enableSize")
				rule.setEnableSize(element.getFirstCDataBool())
				
			elif tagName.equals("enableVertexPositionSet")
				rule.setEnableVertexPositionSet(element.getFirstCDataBool())
				
			elif tagName.equals("target")
				var ARAnimationSelectTarget target = ARAnimationSelectTarget.named(element.getAttributeNamed("name"))
				if target != null
					pParseTarget(element, animator, rule, target)
					
				else
					logInvalidValue(element, element.getAttributeNamed("name"))
					throw EInvalidParam.new()
				end
				
			else
				pParseRuleCommon(element, animator, rule)
			end
		end)
		
		return rule
	end
	
	/** Parse bone transformator rule tag. */
	private func ADRule pParseRuleBoneTransformator(EasyXMLElement root, AnimatorDefinition animator)
		var ADRuleBoneTransformator rule = ADRuleBoneTransformator.new()
		
		root.forEachTag(block EasyXMLElement element, String tagName
			if tagName.equals("minimumTranslation")
				rule.setMinimumTranslation(readVector(element))
				
			elif tagName.equals("maximumTranslation")
				rule.setMaximumTranslation(readVector(element))
				
			elif tagName.equals("minimumRotation")
				rule.setMinimumRotation(readVector(element))
				
			elif tagName.equals("maximumRotation")
				rule.setMaximumRotation(readVector(element))
				
			elif tagName.equals("minimumScaling")
				rule.setMinimumScaling(readVector(element))
				
			elif tagName.equals("maximumScaling")
				rule.setMaximumScaling(readVector(element))
				
			elif tagName.equals("axis")
				rule.setAxis(readVector(element))
				
			elif tagName.equals("minimumAngle")
				rule.setMinimumAngle(element.getFirstCDataFloat())
				
			elif tagName.equals("maximumAngle")
				rule.setMaximumAngle(element.getFirstCDataFloat())
				
			elif tagName.equals("cframe")
				var ARBoneTransformatorCFrame cframe = ARBoneTransformatorCFrame.named(element.getFirstCData())
				if cframe != null
					rule.setCoordinateFrame(cframe)
					
				else
					logInvalidValue(element, element.getFirstCData())
					throw EInvalidParam.new()
				end
				
			elif tagName.equals("enablePosition")
				rule.setEnablePosition(element.getFirstCDataBool())
				
			elif tagName.equals("enableOrientation")
				rule.setEnableOrientation(element.getFirstCDataBool())
				
			elif tagName.equals("enableSize")
				rule.setEnableSize(element.getFirstCDataBool())
				
			elif tagName.equals("useAxis")
				rule.setUseAxis(element.getFirstCDataBool())
				
			elif tagName.equals("targetBone")
				rule.setTargetBone(element.getFirstCData())
				
			elif tagName.equals("useAxis")
				rule.setUseAxis(element.getFirstCDataBool())
				
			elif tagName.equals("axis")
				rule.setAxis(readVector(element))
				
			elif tagName.equals("minimumAngle")
				rule.setMinimumAngle(element.getFirstCDataFloat())
				
			elif tagName.equals("maximumAngle")
				rule.setMaximumAngle(element.getFirstCDataFloat())
				
			elif tagName.equals("target")
				var ARBoneTransformatorTarget target = ARBoneTransformatorTarget.named(element.getAttributeNamed("name"))
				if target != null
					pParseTarget(element, animator, rule, target)
					
				else
					logInvalidValue(element, element.getAttributeNamed("name"))
					throw EInvalidParam.new()
				end
				
			else
				pParseRuleCommon(element, animator, rule)
			end
		end)
		
		return rule
	end
	
	/** Parse state manipulator rule tag. */
	private func ADRule pParseRuleStateManipulator(EasyXMLElement root, AnimatorDefinition animator)
		var ADRuleStateManipulator rule = ADRuleStateManipulator.new()
		
		root.forEachTag(block EasyXMLElement element, String tagName
			if tagName.equals("positionMinimum")
				rule.setMinimumPosition(readVector(element))
				
			elif tagName.equals("positionMaximum")
				rule.setMaximumPosition(readVector(element))
				
			elif tagName.equals("rotationMinimum")
				rule.setMinimumRotation(readVector(element))
				
			elif tagName.equals("rotationMaximum")
				rule.setMaximumRotation(readVector(element))
				
			elif tagName.equals("sizeMinimum")
				rule.setMinimumSize(readVector(element))
				
			elif tagName.equals("sizeMaximum")
				rule.setMaximumSize(readVector(element))
				
			elif tagName.equals("vertexPositionSetMinimum")
				rule.setMinimumVertexPositionSet(element.getFirstCDataFloat())
				
			elif tagName.equals("vertexPositionSetMaximum")
				rule.setMaximumVertexPositionSet(element.getFirstCDataFloat())
				
			elif tagName.equals("enablePosition")
				rule.setEnablePosition(element.getFirstCDataBool())
				
			elif tagName.equals("enableOrientation")
				rule.setEnableOrientation(element.getFirstCDataBool())
				
			elif tagName.equals("enableSize")
				rule.setEnableSize(element.getFirstCDataBool())
				
			elif tagName.equals("enableVertexPositionSet")
				rule.setEnableVertexPositionSet(element.getFirstCDataBool())
				
			elif tagName.equals("target")
				var ARStateManipulatorTarget target = ARStateManipulatorTarget.named(element.getAttributeNamed("name"))
				if target != null
					pParseTarget(element, animator, rule, target)
					
				else
					logInvalidValue(element, element.getAttributeNamed("name"))
					throw EInvalidParam.new()
				end
				
			else
				pParseRuleCommon(element, animator, rule)
			end
		end)
		
		return rule
	end
	
	/** Parse state snapshot rule tag. */
	private func ADRule pParseRuleStateShapshot(EasyXMLElement root, AnimatorDefinition animator)
		var ADRuleStateSnapshot rule = ADRuleStateSnapshot.new()
		
		root.forEachTag(block EasyXMLElement element, String tagName
			if tagName.equals("useLastState")
				rule.setUseLastState(element.getFirstCDataBool())
				
			elif tagName.equals("id")
				rule.setID(element.getFirstCDataInt())
				
			elif tagName.equals("enablePosition")
				rule.setEnablePosition(element.getFirstCDataBool())
				
			elif tagName.equals("enableOrientation")
				rule.setEnableOrientation(element.getFirstCDataBool())
				
			elif tagName.equals("enableSize")
				rule.setEnableSize(element.getFirstCDataBool())
				
			elif tagName.equals("enableVertexPositionSet")
				rule.setEnableVertexPositionSet(element.getFirstCDataBool())
				
			elif tagName.equals("target")
				var ARStateSnapshotTarget target = ARStateSnapshotTarget.named(element.getAttributeNamed("name"))
				if target != null
					pParseTarget(element, animator, rule, target)
					
				else
					logInvalidValue(element, element.getAttributeNamed("name"))
					throw EInvalidParam.new()
				end
				
			else
				pParseRuleCommon(element, animator, rule)
			end
		end)
		
		return rule
	end
	
	/** Parse inverse kinematic rule tag. */
	private func ADRule pParseRuleInverseKinematic(EasyXMLElement root, AnimatorDefinition animator)
		var ADRuleInverseKinematic rule = ADRuleInverseKinematic.new()
		
		root.forEachTag(block EasyXMLElement element, String tagName
			if tagName.equals("goalPosition")
				rule.setGoalPosition(readVector(element))
				
			elif tagName.equals("goalOrientation")
				rule.setGoalOrientation(readVector(element))
				
			elif tagName.equals("localPosition")
				rule.setLocalPosition(readVector(element))
				
			elif tagName.equals("localOrientation")
				rule.setLocalOrientation(readVector(element))
				
			elif tagName.equals("adjustOrientation")
				rule.setAdjustOrientation(element.getFirstCDataBool())
				
			elif tagName.equals("solverBone")
				rule.setSolverBone(element.getFirstCData())
				
			elif tagName.equals("useSolverBone")
				rule.setUseSolverBone(element.getFirstCDataBool())
				
			elif tagName.equals("reachRange")
				rule.setReachRange(element.getFirstCDataFloat())
				
			elif tagName.equals("reachBone")
				rule.setReachBone(element.getFirstCData())
				
			elif tagName.equals("reachCenter")
				rule.setReachCenter(readVector(element))
				
			elif tagName.equals("target")
				var ARInverseKinematicTarget target = ARInverseKinematicTarget.named(element.getAttributeNamed("name"))
				if target != null
					pParseTarget(element, animator, rule, target)
					
				else
					logInvalidValue(element, element.getAttributeNamed("name"))
					throw EInvalidParam.new()
				end
				
			else
				pParseRuleCommon(element, animator, rule)
			end
		end)
		
		return rule
	end
	
	/** Parse foreign state rule tag. */
	private func ADRule pParseRuleForeignState(EasyXMLElement root, AnimatorDefinition animator)
		var ADRuleForeignState rule = ADRuleForeignState.new()
		
		root.forEachTag(block EasyXMLElement element, String tagName
			if tagName.equals("scalePosition")
				rule.setScalePosition(element.getFirstCDataFloat())
				
			elif tagName.equals("scaleOrientation")
				rule.setScaleOrientation(element.getFirstCDataFloat())
				
			elif tagName.equals("scaleSize")
				rule.setScaleSize(element.getFirstCDataFloat())
				
			elif tagName.equals("scaleVertexPositionSet")
				rule.setScaleVertexPositionSet(element.getFirstCDataFloat())
				
			elif tagName.equals("enablePosition")
				rule.setEnablePosition(element.getFirstCDataBool())
				
			elif tagName.equals("enableOrientation")
				rule.setEnableOrientation(element.getFirstCDataBool())
				
			elif tagName.equals("enableSize")
				rule.setEnableSize(element.getFirstCDataBool())
				
			elif tagName.equals("enableVertexPositionSet")
				rule.setEnableVertexPositionSet(element.getFirstCDataBool())
				
			elif tagName.equals("foreignBone")
				rule.setForeignBone(element.getFirstCData())
				
			elif tagName.equals("foreignVertexPositionSet")
				rule.setForeignVertexPositionSet(element.getFirstCData())
				
			elif tagName.equals("srcCFrame")
				var ARForeignStateCFrame cframe = ARForeignStateCFrame.named(element.getFirstCData())
				if cframe != null
					rule.setSourceCoordinateFrame(cframe)
					
				else
					logInvalidValue(element, element.getFirstCData())
					throw EInvalidParam.new()
				end
				
			elif tagName.equals("destCFrame")
				var ARForeignStateCFrame cframe = ARForeignStateCFrame.named(element.getFirstCData())
				if cframe != null
					rule.setDestinationCoordinateFrame(cframe)
					
				else
					logInvalidValue(element, element.getFirstCData())
					throw EInvalidParam.new()
				end
				
			elif tagName.equals("target")
				var ARForeignStateTarget target = ARForeignStateTarget.named(element.getAttributeNamed("name"))
				if target != null
					pParseTarget(element, animator, rule, target)
					
				else
					logInvalidValue(element, element.getAttributeNamed("name"))
					throw EInvalidParam.new()
				end
				
			else
				pParseRuleCommon(element, animator, rule)
			end
		end)
		
		return rule
	end
	
	/** Parse mirror rule tag. */
	private func ADRule pParseRuleMirror(EasyXMLElement root, AnimatorDefinition animator)
		var ADRuleMirror rule = ADRuleMirror.new()
		
		root.forEachTag(block EasyXMLElement element, String tagName
			if tagName.equals("enablePosition")
				rule.setEnablePosition(element.getFirstCDataBool())
				
			elif tagName.equals("enableOrientation")
				rule.setEnableOrientation(element.getFirstCDataBool())
				
			elif tagName.equals("enableSize")
				rule.setEnableSize(element.getFirstCDataBool())
				
			elif tagName.equals("enableVertexPositionSet")
				rule.setEnableVertexPositionSet(element.getFirstCDataBool())
				
			elif tagName.equals("mirrorAxis")
				var ARMirrorMirrorAxis axis = ARMirrorMirrorAxis.named(element.getFirstCData())
				if axis != null
					rule.setMirrorAxis(axis)
					
				else
					logInvalidValue(element, element.getFirstCData())
					throw EInvalidParam.new()
				end
				
			elif tagName.equals("mirrorBone")
				rule.setMirrorBone(element.getFirstCData())
				
			elif tagName.equals("matchName")
				var String first = element.getAttributeNamed("first")
				var String second = element.getAttributeNamed("second")
				var ARMirrorMatchNameType type = ARMirrorMatchNameType.named(element.getAttributeNamed("type"))
				if type == null
					logInvalidValue(element, element.getFirstCData())
					throw EInvalidParam.new()
				end
				
				rule.addMatchName(first, second, type)
				
			elif tagName.equals("target")
				var ARMirrorTarget target = ARMirrorTarget.named(element.getAttributeNamed("name"))
				if target != null
					pParseTarget(element, animator, rule, target)
					
				else
					logInvalidValue(element, element.getAttributeNamed("name"))
					throw EInvalidParam.new()
				end
				
			else
				pParseRuleCommon(element, animator, rule)
			end
		end)
		
		return rule
	end
	
	/** Parse sub animator rule tag. */
	private func ADRule pParseRuleSubAnimator(EasyXMLElement root, \
	AnimatorDefinition animator, String basePath)
		var ADRuleSubAnimator rule = ADRuleSubAnimator.new()
		
		root.forEachTag(block EasyXMLElement element, String tagName
			if tagName.equals("pathAnimator")
				var String target = element.getFirstCData()
				
				if not target.empty()
					try
						rule.setSubAnimator(loadFromFile(\
							File.absolutePath(target, basePath).getPath()))
						
					catch Exception e
						logLoadFileFailed(element, target)
						e.printTrace()
					end
				end
				
			elif tagName.equals("connection")
				rule.addConnection(element.getFirstCData(), element.getAttributeIntNamed("controller"))
				
			elif tagName.equals("enablePosition")
				rule.setEnablePosition(element.getFirstCDataBool())
				
			elif tagName.equals("enableOrientation")
				rule.setEnableOrientation(element.getFirstCDataBool())
				
			elif tagName.equals("enableSize")
				rule.setEnableSize(element.getFirstCDataBool())
				
			elif tagName.equals("enableVertexPositionSet")
				rule.setEnableVertexPositionSet(element.getFirstCDataBool())
				
			elif tagName.equals("target")
				var ARSubAnimatorTarget target = ARSubAnimatorTarget.named(element.getAttributeNamed("name"))
				if target != null
					pParseTarget(element, animator, rule, target)
					
				else
					logInvalidValue(element, element.getAttributeNamed("name"))
					throw EInvalidParam.new()
				end
				
			else
				pParseRuleCommon(element, animator, rule)
			end
		end)
		
		return rule
	end
	
	/** Parse track to rule tag. */
	private func ADRule pParseRuleTrackTo(EasyXMLElement root, AnimatorDefinition animator)
		var ADRuleTrackTo rule = ADRuleTrackTo.new()
		
		root.forEachTag(block EasyXMLElement element, String tagName
			if tagName.equals("trackBone")
				rule.setTrackBone(element.getFirstCData())
				
			elif tagName.equals("trackAxis")
				var ARTrackToAxis axis = ARTrackToAxis.named(element.getFirstCData())
				if axis != null
					rule.setTrackAxis(axis)
					
				else
					logInvalidValue(element, element.getFirstCData())
					throw EInvalidParam.new()
				end
				
			elif tagName.equals("upAxis")
				var String axis = element.getFirstCData()
				
				if axis.equals("posX")
					rule.setUpAxis(ARTrackToAxis.posX)
					
				elif axis.equals("posY")
					rule.setUpAxis(ARTrackToAxis.posY)
					
				elif axis.equals("posZ")
					rule.setUpAxis(ARTrackToAxis.posZ)
					
				elif axis.equals("negX")
					rule.setUpAxis(ARTrackToAxis.negX)
					
				elif axis.equals("negY")
					rule.setUpAxis(ARTrackToAxis.negY)
					
				elif axis.equals("negZ")
					rule.setUpAxis(ARTrackToAxis.negZ)
					
				else
					logInvalidValue(element, axis)
					throw EInvalidParam.new()
				end
				
			elif tagName.equals("upTarget")
				var ARTrackToUp target = ARTrackToUp.named(element.getFirstCData())
				if target != null
					rule.setUpTarget(target)
					
				else
					logInvalidValue(element, element.getFirstCData())
					throw EInvalidParam.new()
				end
				
			elif tagName.equals("lockedAxis")
				var ARTrackToLocked locked = ARTrackToLocked.named(element.getFirstCData())
				if locked != null
					rule.setLockedAxis(locked)
					
				else
					logInvalidValue(element, element.getFirstCData())
					throw EInvalidParam.new()
				end
				
			elif tagName.equals("target")
				var ARTrackToTarget target = ARTrackToTarget.named(element.getAttributeNamed("name"))
				if target != null
					pParseTarget(element, animator, rule, target)
					
				else
					logInvalidValue(element, element.getAttributeNamed("name"))
					throw EInvalidParam.new()
				end
				
			else
				pParseRuleCommon(element, animator, rule)
			end
		end)
		
		return rule
	end
	
	/** Parse limit rule tag. */
	private func ADRule pParseRuleLimit(EasyXMLElement root, AnimatorDefinition animator)
		var ADRuleLimit rule = ADRuleLimit.new()
		
		root.forEachTag(block EasyXMLElement element, String tagName
			if tagName.equals("minimumPosition")
				rule.setMinimumPosition(readVector(element))
				
			elif tagName.equals("maximumPosition")
				rule.setMaximumPosition(readVector(element))
				
			elif tagName.equals("minimumRotation")
				rule.setMinimumRotation(readVector(element))
				
			elif tagName.equals("maximumRotation")
				rule.setMaximumRotation(readVector(element))
				
			elif tagName.equals("minimumScaling")
				rule.setMinimumScaling(readVector(element))
				
			elif tagName.equals("maximumScaling")
				rule.setMaximumScaling(readVector(element))
				
			elif tagName.equals("minimumVertexPositionSet")
				rule.setMinimumVertexPositionSet(element.getFirstCDataFloat())
				
			elif tagName.equals("maximumVertexPositionSet")
				rule.setMaximumVertexPositionSet(element.getFirstCDataFloat())
				
			elif tagName.equals("cframe")
				var ARLimitCFrame cframe = ARLimitCFrame.named(element.getFirstCData())
				if cframe != null
					rule.setCoordinateFrame(cframe)
					
				else
					logInvalidValue(element, element.getFirstCData())
					throw EInvalidParam.new()
				end
				
			elif tagName.equals("enablePosMin")
				rule.setEnablePosXMin(element.getAttributeBoolNamed("x"))
				rule.setEnablePosYMin(element.getAttributeBoolNamed("y"))
				rule.setEnablePosZMin(element.getAttributeBoolNamed("z"))
				
			elif tagName.equals("enablePosMax")
				rule.setEnablePosXMax(element.getAttributeBoolNamed("x"))
				rule.setEnablePosYMax(element.getAttributeBoolNamed("y"))
				rule.setEnablePosZMax(element.getAttributeBoolNamed("z"))
				
			elif tagName.equals("enableRotMin")
				rule.setEnableRotXMin(element.getAttributeBoolNamed("x"))
				rule.setEnableRotYMin(element.getAttributeBoolNamed("y"))
				rule.setEnableRotZMin(element.getAttributeBoolNamed("z"))
				
			elif tagName.equals("enableRotMax")
				rule.setEnableRotXMax(element.getAttributeBoolNamed("x"))
				rule.setEnableRotYMax(element.getAttributeBoolNamed("y"))
				rule.setEnableRotZMax(element.getAttributeBoolNamed("z"))
				
			elif tagName.equals("enableScaleMin")
				rule.setEnableScaleXMin(element.getAttributeBoolNamed("x"))
				rule.setEnableScaleYMin(element.getAttributeBoolNamed("y"))
				rule.setEnableScaleZMin(element.getAttributeBoolNamed("z"))
				
			elif tagName.equals("enableScaleMax")
				rule.setEnableScaleXMax(element.getAttributeBoolNamed("x"))
				rule.setEnableScaleYMax(element.getAttributeBoolNamed("y"))
				rule.setEnableScaleZMax(element.getAttributeBoolNamed("z"))
				
			elif tagName.equals("enableVertexPositionSetMin")
				rule.setEnableVertexPositionSetMin(element.getFirstCDataBool())
				
			elif tagName.equals("enableVertexPositionSetMax")
				rule.setEnableVertexPositionSetMax(element.getFirstCDataBool())
				
			elif tagName.equals("targetBone")
				rule.setTargetBone(element.getFirstCData())
				
			elif tagName.equals("target")
				var ARLimitTarget target = ARLimitTarget.named(element.getAttributeNamed("name"))
				if target != null
					pParseTarget(element, animator, rule, target)
					
				else
					logInvalidValue(element, element.getAttributeNamed("name"))
					throw EInvalidParam.new()
				end
				
			else
				pParseRuleCommon(element, animator, rule)
			end
		end)
		
		return rule
	end
	
	/** Parse group rule tag. */
	private func ADRule pParseRuleGroup(EasyXMLElement root, \
	AnimatorDefinition animator, String basePath)
		var ADRuleGroup rule = ADRuleGroup.new()
		
		root.forEachTag(block EasyXMLElement element, String tagName
			if tagName.equals("applicationType")
				var ARGroupApplication applicationType = ARGroupApplication.named(element.getFirstCData())
				if applicationType != null
					rule.setApplicationType(applicationType)
					
				else
					logInvalidValue(element, element.getFirstCData())
					throw EInvalidParam.new()
				end
				
			elif tagName.equals("useCurrentState")
				rule.setUseCurrentState(element.getFirstCDataBool())
				
			elif tagName.equals("enablePosition")
				rule.setEnablePosition(element.getFirstCDataBool())
				
			elif tagName.equals("enableOrientation")
				rule.setEnableOrientation(element.getFirstCDataBool())
				
			elif tagName.equals("enableSize")
				rule.setEnableSize(element.getFirstCDataBool())
				
			elif tagName.equals("enableVertexPositionSet")
				rule.setEnableVertexPositionSet(element.getFirstCDataBool())
				
			elif tagName.equals("target")
				var ARGroupTarget target = ARGroupTarget.named(element.getAttributeNamed("name"))
				if target != null
					pParseTarget(element, animator, rule, target)
					
				else
					logInvalidValue(element, element.getAttributeNamed("name"))
					throw EInvalidParam.new()
				end
				
			else
				var ADRule srule = pParseRule(element, animator, basePath)
				
				if srule != null
					rule.addRule(srule)
					
				else
					pParseRuleCommon(element, animator, rule)
				end
			end
		end)
		
		return rule
	end
	
	/** Parse target tag. */
	private func void pParseTarget(EasyXMLElement root, AnimatorDefinition animator, \
	ADRule rule, Enumeration target)
		var int index
		
		root.forEachTag(block EasyXMLElement element, String tagName
			if tagName.equals("link")
				index = element.getFirstCDataInt()
				rule.addTargetLink(ADRuleTargetLink.new(target, animator.getLinkAt(index)))
				
			else
				logUnknownTag(element)
				throw EInvalidParam.new()
			end
		end)
	end
end
