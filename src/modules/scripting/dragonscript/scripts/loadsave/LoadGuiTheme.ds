/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */


namespace Dragengine.LoadSave

pin Dragengine.Gui
pin Dragengine.Scenery
pin Dragengine.Utils
pin Dragengine.XML



/**
 * \brief Load gfui theme from xml file.
 */
class LoadGuiTheme extends BaseXmlLoader
	/** \brief Dictionary of loaded gui themes. */
	private var Dictionary pLoadedGuiThemes
	
	/** \brief Decoration loader. */
	private var LoadDecoration pDecorationLoader
	
	/** \brief Widget designer loader. */
	private var LoadWidgetDesigner pWidgetDesignerLoader
	
	
	
	
	/** \brief Create loader. */
	public func new( Console console ) this( console, "LoadGuiTheme" )
	end
	
	/** \brief Create loader. */
	public func new( Console console, String name ) super( console, name )
		this.pLoadedGuiThemes = Dictionary.new()
	end
	
	
	
	/** \brief Decoration loader. */
	public func LoadDecoration getDecorationLoader()
		return this.pDecorationLoader
	end
	
	/** \brief Set decoration loader. */
	public func void setDecorationLoader( LoadDecoration loader )
		this.pDecorationLoader = loader
	end
	
	/** \brief Widget designer loader. */
	public func LoadWidgetDesigner getWidgetDesignerLoader()
		return this.pWidgetDesignerLoader
	end
	
	/** \brief Set widget designer loader. */
	public func void setWidgetDesignerLoader( LoadWidgetDesigner loader )
		this.pWidgetDesignerLoader = loader
	end
	
	
	
	/**
	 * \brief Load gui theme from xml file.
	 * 
	 * Gui themes are shared. Do not modify directly. If you need to modify them create
	 * first a copy using the copy constructor.
	 */
	public func GuiTheme loadFromFile( String filename )
		var GuiTheme guitheme = this.pLoadedGuiThemes.getAt( filename, null ) cast GuiTheme
		if guitheme != null
			return guitheme
		end
		
		guitheme = this.loadFromFile( filename, null )
		this.pLoadedGuiThemes.setAt( filename, guitheme )
		return guitheme
	end
	
	
	
	/** \brief Parse gui theme tag. */
	public func GuiTheme parseGuiTheme( String filename, EasyXMLElement root, \
	String basePath, GuiTheme guitheme )
		var int e, elementCount = root.getElementCount()
		var EasyXMLElement element
		var bool isShared = false
		var String identifier
		var String tagName
		
		if root.hasAttributeNamed( "extend" )
			try
				guitheme = GuiTheme.new( this.loadFromFile( File.absolutePath( \
					root.getAttributeNamed( "extend" ), basePath ).getPath() ) )
				
			catch Exception e
				this.printOnConsole( filename, root, "Failed loading gui theme '" \
					+ root.getAttributeNamed( "extend" ) + "'" )
				throw
			end
			
			isShared = true
			
		elif root.hasAttributeNamed( "extendNamed" )
			if guitheme == null
				this.printOnConsole( filename, root, "Attribute extendNamed only works on 'import' and 'theme'" )
				throw EInvalidParam.new()
			end
			
			try
				guitheme = GuiTheme.new( guitheme.getNamedGuiTheme( \
					root.getAttributeNamed( "extendNamed" ) ) )
				
			catch Exception e
				this.printOnConsole( filename, root, "Gui theme named '" \
					+ root.getAttributeNamed( "extendNamed" ) + "' not found" )
				throw
			end
			
			isShared = true
			
		elif guitheme == null
			guitheme = GuiTheme.new()
		end
		
		for e = 0 to elementCount
			element = root.getElementAt( e )
			if element.getType() != EasyXMLElementType.tag
				continue
			end
			
			if isShared
				guitheme = GuiTheme.new( guitheme )
				isShared = false
			end
			
			tagName = element.getTagName()
			
			if tagName.equals( "font" )
				identifier = element.getAttributeNamed( "for" )
				
				if identifier.equals( "widget" )
					guitheme.setWidgetFont( this.readFont( element, basePath ) )
				end
				
			elif tagName.equals( "designer" )
				try
					guitheme.setWidgetDesigner( element.getAttributeNamed( "name" ), \
						this.pWidgetDesignerLoader.parseWidgetDesigner( \
							filename, element, basePath, guitheme ) )
					
				catch Exception e
					this.printOnConsole( filename, element, "Failed loading widget designer '" \
						+ element.getFirstCData() + "'" )
					throw
				end
				
			elif tagName.equals( "theme" )
				guitheme.setNamedGuiTheme( element.getAttributeNamed( "name" ), \
					this.parseGuiTheme( filename, element, basePath, guitheme ) )
				
			elif tagName.equals( "import" )
				try
					this.loadFromFile( File.absolutePath( element.getFirstCData(), \
						basePath ).getPath(), guitheme )
					
				catch Exception e
					this.printOnConsole( filename, element, "Failed importing gui theme '" \
						+ element.getFirstCData() + "'" )
					throw
				end
				
			else
				this.logUnknownTag( filename, element )
				throw EInvalidParam.new()
			end
		end
		
		return guitheme
	end
	
	
	
	/** \brief Load gui theme from xml file. */
	private func GuiTheme loadFromFile( String filename, GuiTheme guitheme )
		this.logLoadingFromFile( filename )
		
		var EasyXML document = EasyXML.new( filename )
		if document.hasParseFailed()
			this.logParsingFailed( document.getParseLog() )
			throw EInvalidParam.new()
		end
		
		var EasyXMLElement root = document.getRootElement()
		if not root.getTagName().equals( "guiTheme" )
			this.logUnknownTag( filename, root )
			throw EInvalidParam.new()
		end
		
		var String basePath = File.new( filename ).getParent().getPath()
		
		return this.parseGuiTheme( filename, root, basePath, guitheme )
	end
end
