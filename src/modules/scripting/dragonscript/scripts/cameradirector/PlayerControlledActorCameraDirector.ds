/* 
 * Drag[en]gine DragonScript Script Module
 *
 * Copyright (C) 2020, Roland Pl√ºss (roland@rptd.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

namespace Dragengine.CameraDirectors

pin Dragengine.Scenery



/**
 * \brief Place camera relative player controlled actor with orbit support.
 * 
 * Extends ElementCameraDirector with support to set the tracked element from the player
 * controlled actor set in BaseGameApp at every update call. Using this class the game can
 * switch player control from one actor to another without needing to update the camera
 * directory unless different actors require different parameters.
 * 
 * For convenience the actorChanged() hook method is called whenever the actor switched.
 * 
 * The pivot point is set at the center of the actor head. For best results this should
 * be straight above the actor position. The setPivotAboveGround() takes care of 
 * The actor locomotion is used to obtain the actor looking direction. The camera director
 * azimuth and elevation are set to match the looking direction. The distance is not
 * changed and can be set by users of the class to place the camera behind the actor for
 * example for 3rd person views.
 * 
 * \par Version 1.8
 * 
 * Updating azimuth and elevation from locomotion can be optionally disabled. This is
 * useful for third person cameras with locked elevation or azimuth.
 */
class PlayerControlledActorCameraDirector extends ElementCameraDirector
	/** \brief Tracker listener. */
	class ActorChanged extends ECBehaviorPlayerControllable.Tracker.DefaultListener
		private var WeakReference pDirector
		
		public func new(PlayerControlledActorCameraDirector director)
			pDirector = WeakReference.new(director)
		end
		
		public func void activeActorChanged(ECBehaviorPlayerControllable.Tracker tracker)
			var PlayerControlledActorCameraDirector director = \
				pDirector.get() cast PlayerControlledActorCameraDirector
			if director != null
				director.setActor(tracker.getActor())
			end
		end
	end
	
	
	
	private var ECBehaviorPlayerControllable.Tracker pTracker
	private var ActorChanged pActorChanged
	private var bool pLockAzimuth
	private var bool pLockElevation
	
	/** \brief Collider AI or \em null if absent. */
	protected var ECBehaviorColliderAI.Instance colliderAI
	
	/** \brief Locomotion or \em null if absent. */
	protected var ECBehaviorLocomotion.Instance locomotion
	
	
	
	/**
	 * \brief Create camera director.
	 * 
	 * Pivot point is set to 1.6m above ground.
	 */
	public func new() this(null, null)
	end
	
	/**
	 * \brief Create camera director.
	 * 
	 * Pivot point is set to 1.6m above ground.
	 */
	public func new(Camera camera, Microphone microphone) \
	this(camera, microphone, BaseGameApp.getApp().getPlayerControlledActor())
	end
	
	/**
	 * \brief Create camera director.
	 * 
	 * Pivot point is set to 1.6m above ground.
	 */
	public func new(Camera camera, Microphone microphone, ECBehaviorPlayerControllable.Tracker tracker) \
	super(null, camera, microphone)
		pActorChanged = ActorChanged.new(this)
		setPivotAboveGround(1.6)
		setTracker(tracker)
	end
	
	
	
	/** \brief Tracker or null. */
	public func ECBehaviorPlayerControllable.Tracker getTracker()
		return pTracker
	end
	
	/** \brief Set tracker or null. */
	public func void setTracker(ECBehaviorPlayerControllable.Tracker tracker)
		if tracker == pTracker
			return
		end
		
		if pTracker != null
			pTracker.removeListener(pActorChanged)
		end
		
		pTracker = tracker
		
		if tracker != null
			tracker.addListener(pActorChanged)
			setActor(tracker.getActor())
			
		else
			setActor(null)
		end
	end
	
	/** \brief Actor or \em null. */
	public func ECBehaviorPlayerControllable.Instance getActor()
		if pTracker != null
			return pTracker.getActor()
			
		else
			return null
		end
	end
	
	/** \brief Set actor or \em null. */
	public func void setActor(ECBehaviorPlayerControllable.Instance actor)
		if actor != null
			setElement(actor.getElement())
			initBehaviors(actor.getElement())
			
		else
			setElement(null)
			colliderAI = null
			locomotion = null
		end
		
		actorChanged()
	end
	
	/** \brief Init behaviors. */
	protected func void initBehaviors(BehaviorElement element)
		colliderAI = ECBehaviorColliderAI.getInstanceIn(element)
		locomotion = ECBehaviorLocomotion.getInstanceIn(element)
	end
	
	/** \brief Collider AI or \em null if absent. */
	public func ECBehaviorColliderAI.Instance getColliderAI()
		return colliderAI
	end
	
	/** \brief Locomotion or \em null if absent. */
	public func ECBehaviorLocomotion.Instance getLocomotion()
		return locomotion
	end
	
	
	
	/**
	 * \brief Set pivot point at desired distance above ground.
	 * 
	 * Typical value for \em distance is 1.6 for a adult human actor.
	 */
	public func void setPivotAboveGround(float distance)
		setPivot(DVector.new(0, distance, 0))
	end
	
	
	
	/**
	 * \brief Update camera.
	 * 
	 * Set camera director azimuth and elevation to match actor locomotion. Azimuth is set to
	 * locomotion.getOrientation() plus locomotion.getLookHorizontal(). Elevation is set to
	 * locomotion.getLookVertical(). This equals to actor orientation around his up-axis combined
	 * with actor looking around.
	 * 
	 * If no actor is present azimuth and elevation are set to 0.
	 */
	public func void updateCamera(float elapsed)
		if locomotion != null
			var Locomotion l = locomotion.getLocomotion()
			if not pLockAzimuth
				setAzimuth(l.getOrientation() + l.getLookHorizontal())
			end
			if not pLockElevation
				setElevation(-l.getLookVertical())
			end
			
		else
			if not pLockAzimuth
				setAzimuth(0)
			end
			if not pLockElevation
				setElevation(0)
			end
		end
		
		super.updateCamera(elapsed)
	end
	
	/**
	 * \brief Update microphone.
	 * 
	 * Extends the base functionality setting velocity to match actor velocity.
	 */
	public func void updateMicrophone(float elapsed)
		super.updateMicrophone(elapsed)
		
		if colliderAI != null
			getMicrophone().setVelocity(colliderAI.getCollider().getLinearVelocity())
			
		else
			getMicrophone().setVelocity(Vector.new())
		end
	end
	
	
	
	/**
	 * \brief Do not update azimuth from locomotion changes.
	 * \version 1.8
	 */
	public func bool getLockAzimuth()
		return pLockAzimuth
	end
	
	/**
	 * \brief Set to not update azimuth from locomotion changes.
	 * \version 1.8
	 */
	public func void setLockAzimuth(bool lock)
		pLockAzimuth = lock
	end
	
	/**
	 * \brief Do not update elevation from locomotion changes.
	 * \version 1.8
	 */
	public func bool getLockElevation()
		return pLockElevation
	end
	
	/**
	 * \brief Set to not update elevation from locomotion changes.
	 * \version 1.8
	 */
	public func void setLockElevation(bool lock)
		pLockElevation = lock
	end
	
	
	
	/**
	 * \brief Player controlled actor changed.
	 * 
	 * Called after the new actor has been assigned to the camera directory.
	 * Hook method for subclass to apply additional logic for actor switching.
	 */
	protected func void actorChanged()
	end
end

