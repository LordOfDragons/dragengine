/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

namespace Dragengine.CameraDirectors

pin Dragengine.Scenery



/**
 * \brief Place camera relative an element with orbit support.
 * 
 * Camera is placed using a rotation point, oribtal rotation and a matrix local to this
 * rotation point.
 */
class ElementCameraDirector extends CameraDirector
	var Element pElement
	var DVector pPivot
	var DMatrix pLocalMatrix
	var float pAzimuth
	var float pElevation
	var float pDistance
	var bool pUseOrientation
	
	
	
	/** \brief Create camera director. */
	func new(Element element)
		pElement = element
		pPivot = DVector.new()
		pLocalMatrix = DMatrix.new()
		pAzimuth = 0
		pElevation = 0
		pDistance = 0
	end
	
	/** \brief Create camera director. */
	func new(Element element, Camera camera, Microphone microphone) this(element)
		setCamera(camera)
		setMicrophone(microphone)
	end
	
	
	
	/** \brief Element. */
	func Element getElement()
		return pElement
	end
	
	/** \brief Set element. */
	func void setElement(Element element)
		pElement = element
	end
	
	/** \brief Rotation point. */
	func DVector getPivot()
		return pPivot
	end
	
	/** \brief Set rotation point. */
	func void setPivot(DVector pivot)
		if pivot == null
			throw EInvalidParam.new()
		end
		pPivot = pivot
	end
	
	/** \brief Local matrix. */
	func DMatrix getLocalMatrix()
		return pLocalMatrix
	end
	
	/** \brief Set local matrix. */
	func void setLocalMatrix(DMatrix localMatrix)
		if localMatrix == null
			throw EInvalidParam.new()
		end
		pLocalMatrix = localMatrix
	end
	
	/** \brief Set local matrix from position and rotation. */
	func void setLocalMatrix(Vector position, Vector rotation)
		pLocalMatrix = Matrix.newRT(rotation, position).toDMatrix()
	end
	
	/** \brief Vertical rotation. */
	func float getAzimuth()
		return pAzimuth
	end
	
	/** \brief Set vertical rotation. */
	func void setAzimuth(float azimuth)
		pAzimuth = azimuth
	end
	
	/** \brief Horizontal rotation. */
	func float getElevation()
		return pElevation
	end
	
	/** \brief Set horizontal rotation. */
	func void setElevation(float elevation)
		pElevation = elevation
	end
	
	/** \brief Distance. */
	func float getDistance()
		return pDistance
	end
	
	/** \brief Set distance. */
	func void setDistance(float distance)
		pDistance = DEMath.max(distance, 0.0)
	end
	
	/**
	 * \brief Use element orientation.
	 * \version 1.19
	 * 
	 * If true the camera rotates together with the element. If false the camera only moves
	 * together with the element. The default is false.
	 */
	func bool getUseOrientation()
		return pUseOrientation
	end
	
	/**
	 * \brief Set use element orientation.
	 * \version 1.19
	 * 
	 * If true the camera rotates together with the element. If false the camera only moves
	 * together with the element. The default is false.
	 */
	func void setUseOrientation(bool useOrientation)
		pUseOrientation = useOrientation
	end
	
	
	
	/** \brief Update camera. */
	func void updateCamera(float elapsed)
		var DMatrix matrix = getCameraMatrix()
		var Camera camera = getCamera()
		camera.setPosition(matrix.getPosition())
		camera.setOrientation(matrix.toQuaternion())
	end
	
	/** \brief Camera matrix. */
	func DMatrix getCameraMatrix()
		var DMatrix matrix = pLocalMatrix\
			* DMatrix.newTranslation(0, 0, -pDistance)\
			* DMatrix.newRotation(-pElevation, pAzimuth, 0)
		
		if pElement == null
			matrix = matrix * DMatrix.newTranslation(pPivot)
			
		elif pUseOrientation
			matrix = matrix * DMatrix.newTranslation(pPivot) * pElement.getElementMatrix()
			
		else
			matrix = matrix * DMatrix.newTranslation(pElement.getPosition() + pPivot)
		end
		
		return matrix
	end
end

