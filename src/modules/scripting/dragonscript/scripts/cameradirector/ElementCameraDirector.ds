/* 
 * Drag[en]gine DragonScript Script Module
 *
 * Copyright (C) 2020, Roland Pl√ºss (roland@rptd.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

namespace Dragengine.CameraDirectors

pin Dragengine.Scenery



/**
 * \brief Place camera relative an element with orbit support.
 * 
 * Camera is placed using a rotation point, oribtal rotation and a matrix local to this
 * rotation point.
 */
class ElementCameraDirector extends CameraDirector
	var Element pElement
	var DVector pPivot
	var DMatrix pLocalMatrix
	var float pAzimuth
	var float pElevation
	var float pDistance
	var bool pUseOrientation
	
	
	
	/** \brief Create camera director. */
	func new(Element element)
		pElement = element
		pPivot = DVector.new()
		pLocalMatrix = DMatrix.new()
		pAzimuth = 0
		pElevation = 0
		pDistance = 0
	end
	
	/** \brief Create camera director. */
	func new(Element element, Camera camera, Microphone microphone) this(element)
		setCamera(camera)
		setMicrophone(microphone)
	end
	
	
	
	/** \brief Element. */
	func Element getElement()
		return pElement
	end
	
	/** \brief Set element. */
	func void setElement(Element element)
		pElement = element
	end
	
	/** \brief Rotation point. */
	func DVector getPivot()
		return pPivot
	end
	
	/** \brief Set rotation point. */
	func void setPivot(DVector pivot)
		if pivot == null
			throw EInvalidParam.new()
		end
		pPivot = pivot
	end
	
	/** \brief Local matrix. */
	func DMatrix getLocalMatrix()
		return pLocalMatrix
	end
	
	/** \brief Set local matrix. */
	func void setLocalMatrix(DMatrix localMatrix)
		if localMatrix == null
			throw EInvalidParam.new()
		end
		pLocalMatrix = localMatrix
	end
	
	/** \brief Set local matrix from position and rotation. */
	func void setLocalMatrix(Vector position, Vector rotation)
		pLocalMatrix = Matrix.newRT(rotation, position).toDMatrix()
	end
	
	/** \brief Vertical rotation. */
	func float getAzimuth()
		return pAzimuth
	end
	
	/** \brief Set vertical rotation. */
	func void setAzimuth(float azimuth)
		pAzimuth = azimuth
	end
	
	/** \brief Horizontal rotation. */
	func float getElevation()
		return pElevation
	end
	
	/** \brief Set horizontal rotation. */
	func void setElevation(float elevation)
		pElevation = elevation
	end
	
	/** \brief Distance. */
	func float getDistance()
		return pDistance
	end
	
	/** \brief Set distance. */
	func void setDistance(float distance)
		pDistance = DEMath.max(distance, 0.0)
	end
	
	/**
	 * \brief Use element orientation.
	 * \version 1.19
	 * 
	 * If true the camera rotates together with the element. If false the camera only moves
	 * together with the element. The default is false.
	 */
	func bool getUseOrientation()
		return pUseOrientation
	end
	
	/**
	 * \brief Set use element orientation.
	 * \version 1.19
	 * 
	 * If true the camera rotates together with the element. If false the camera only moves
	 * together with the element. The default is false.
	 */
	func void setUseOrientation(bool useOrientation)
		pUseOrientation = useOrientation
	end
	
	
	
	/** \brief Update camera. */
	func void updateCamera(float elapsed)
		var DMatrix matrix = getCameraMatrix()
		var Camera camera = getCamera()
		camera.setPosition(matrix.getPosition())
		camera.setOrientation(matrix.toQuaternion())
	end
	
	/** \brief Camera matrix. */
	func DMatrix getCameraMatrix()
		var DMatrix matrix = pLocalMatrix\
			* DMatrix.newTranslation(0, 0, -pDistance)\
			* DMatrix.newRotation(-pElevation, pAzimuth, 0)
		
		if pElement == null
			matrix = matrix * DMatrix.newTranslation(pPivot)
			
		elif pUseOrientation
			matrix = matrix * DMatrix.newTranslation(pPivot) * pElement.getElementMatrix()
			
		else
			matrix = matrix * DMatrix.newTranslation(pElement.getPosition() + pPivot)
		end
		
		return matrix
	end
end

