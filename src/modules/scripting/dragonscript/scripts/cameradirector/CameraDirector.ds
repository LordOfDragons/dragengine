/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */



namespace Dragengine.CameraDirectors

pin Dragengine.Gui.Events
pin Dragengine.Gui.Layouts
pin Dragengine.Scenery



/**
 * \brief Directs camera and microphone required to render the game scene.
 * 
 * The default implementation sets the camera at the origin of the world and the microphone
 * at the same place and orientation as the camera. Subclasses are responsible to set the
 * camera in useful places.
 */
class CameraDirector
	/** \brief Normal camera FOV */
	public fixed var float fovNormal = 39.6
	
	/** \brief Wide camera FOV */
	public fixed var float fovWide = 65.47
	
	/** \brief Ultra wide camera FOV */
	public fixed var float fovUltraWide = 83.97
	
	/** \brief Short tele camera FOV */
	public fixed var float fovShortTele = 22.62
	
	/** \brief Medium tele camera FOV */
	public fixed var float fovMediumTele = 10.29
	
	/** \brief Long tele camera FOV */
	public fixed var float fovLongTele = 6.87
	
	/** \brief Typical first person FOV */
	public fixed var float fovFirstPerson = 90
	
	/** \brief Shorter first person FOV */
	public fixed var float fovShortFirstPerson = 75
	
	
	
	var Camera pCamera
	var Microphone pMicrophone
	
	var float pFov
	var float pFovRatio
	var float pExposure
	var float pLowestIntensity
	var float pHighestIntensity
	var float pAdaptionTime
	var float pImageDistance
	var float pViewDistance
	var LayerMask pLayerMask
	var bool pEnableHDRR
	var bool pEnableGI
	var float pWhiteIntensity
	var float pBloomIntensity
	var float pBloomStrength
	var float pBloomSize
	var float pBloomBlend
	var CurveBezier pToneMapCurve
	
	
	
	/** \brief Create camera director. */
	func new()
		pFov = fovFirstPerson
		pFovRatio = 1
		pExposure = 1
		pLowestIntensity = 1
		pHighestIntensity = 20
		pAdaptionTime = 0.1
		pImageDistance = 0.01
		pViewDistance = 200
		pEnableHDRR = true
		pEnableGI = Engine.getDefaultEnableGI()
		pWhiteIntensity = 3
		pBloomIntensity = 4
		pBloomStrength = 1
		pBloomSize = 0.25
		pBloomBlend = 1
		pToneMapCurve = CurveBezier.new()
		
		// set layer mask. theoretically a camera needs only the default layer bit.
		// light sources use by default both default and envmap layer bit. this would
		// cause the camera to potentially have a restricted set of visible scene elements
		// compared to the light sources. this can cause graphic modules to miss on
		// optimization opportunities. it is quite unlikely you will find a scene elemnt
		// this has the envmap layer bit set but not the default layer bit. it is thus
		// safe to use both bits on cameras to allow graphic modules to apply all optimizations
		pLayerMask = LayerMask.newWith(\
			BaseGameApp.WorldLayerBit.default, BaseGameApp.WorldLayerBit.envmap)
	end
	
	/** \brief Create camera director. */
	func new(Camera camera, Microphone microphone) this()
		setCamera(camera)
		setMicrophone(microphone)
	end
	
	
	
	/** \brief Camera to modify. */
	func Camera getCamera()
		return pCamera
	end
	
	/** \brief Set camera to modify. */
	func void setCamera(Camera camera)
		pCamera = camera
	end
	
	/** \brief Microphone to modify. */
	func Microphone getMicrophone()
		return pMicrophone
	end
	
	/** \brief Set microphone to modify. */
	func void setMicrophone(Microphone microphone)
		pMicrophone = microphone
	end
	
	
	
	/** \brief Field of view. */
	func float getFov()
		return pFov
	end
	
	/** \brief Set field of view. */
	func void setFov(float fov)
		pFov = fov
	end
	
	/**
	 * \brief Field of view ratio (height / width).
	 * \version 1.21
	 */
	func float getFovRatio()
		return pFovRatio
	end
	
	/**
	 * \brief Set field of view ratio (height / width).
	 * \version 1.21
	 */
	func void setFovRatio(float ratio)
		pFovRatio = ratio
	end
	
	
	
	/**
	 * \brief Enable high definition range rendering (HDRR) if supported.
	 * \version 1.5
	 */
	func bool getEnableHDRR()
		return pEnableHDRR
	end
	
	/**
	 * \brief Set to enable high definition range rendering (HDRR) if supported.
	 * \version 1.5
	 */
	func void setEnableHDRR(bool enable)
		pEnableHDRR = enable
	end
	
	/** \brief Exposure. */
	func float getExposure()
		return pExposure
	end
	
	/** \brief Set exposure. */
	func void setExposure(float exposure)
		pExposure = exposure
	end
	
	/** \brief Lowest intensity. */
	func float getLowestIntensity()
		return pLowestIntensity
	end
	
	/** \brief Set lowest intensity. */
	func void setLowestIntensity(float intensity)
		pLowestIntensity = intensity
	end
	
	/** \brief Highest intensity. */
	func float getHighestIntensity()
		return pHighestIntensity
	end
	
	/** \brief Set highest intensity. */
	func void setHighestIntensity(float intensity)
		pHighestIntensity = intensity
	end
	
	/** \brief Adaption time. */
	func float getAdaptionTime()
		return pAdaptionTime
	end
	
	/** \brief Set adaption time. */
	func void setAdaptionTime(float time)
		pAdaptionTime = time
	end
	
	/** \brief Camera view distance. */
	func float getViewDistance()
		return pViewDistance
	end
	
	/** \brief Set camera view distance. */
	func void setViewDistance(float distance)
		pViewDistance = distance
	end
	
	/**
	 * \brief Camera image distance.
	 * \version 1.21
	 */
	func float getImageDistance()
		return pImageDistance
	end
	
	/**
	 * \brief Set camera image distance.
	 * \version 1.21
	 */
	func void setImageDistance(float distance)
		pImageDistance = distance
	end
	
	
	
	/**
	 * \brief Enable global illumination (GI) if supported.
	 * \version 1.5
	 */
	func bool getEnableGI()
		return pEnableGI
	end
	
	/**
	 * \brief Set to enable global illumination (GI) if supported.
	 * \version 1.5
	 */
	func void setEnableGI(bool enable)
		pEnableGI = enable
	end
	
	
	
	/**
	 * \brief White intensity multiplier.
	 * \version 1.21
	 */
	func float getWhiteIntensity()
		return pWhiteIntensity
	end
	
	/**
	 * \brief Set white intensity multiplier.
	 * \version 1.21
	 */
	func void setWhiteIntensity(float intensity)
		pWhiteIntensity = intensity
	end
	
	/**
	 * \brief Bloom intensity multiplier.
	 * \version 1.21
	 */
	func float getBloomIntensity()
		return pBloomIntensity
	end
	
	/**
	 * \brief Set bloom intensity multiplier.
	 * \version 1.21
	 */
	func void setBloomIntensity(float intensity)
		pBloomIntensity = intensity
	end
	
	/**
	 * \brief Bloom strength as multiplier of intensity beyond bloom intensity.
	 * \version 1.21
	 */
	func float getBloomStrength()
		return pBloomStrength
	end
	
	/**
	 * \brief Set bloom strength as multiplier of intensity beyond bloom intensity.
	 * \version 1.21
	 */
	func void setBloomStrength(float strength)
		pBloomStrength = strength
	end
	
	/**
	 * \brief Bloom blend as multiplier of intensity beyond bloom intensity.
	 * \version 1.21
	 */
	func float getBloomBlend()
		return pBloomBlend
	end
	
	/**
	 * \brief Set bloom blend as multiplier of intensity beyond bloom intensity.
	 * \version 1.21
	 */
	func void setBloomBlend(float blend)
		pBloomBlend = blend
	end
	
	/**
	 * \brief Bloom size as percentage of screen width.
	 * \version 1.21
	 */
	func float getBloomSize()
		return pBloomSize
	end
	
	/**
	 * \brief Bloom size as percentage of screen width.
	 * \version 1.21
	 */
	func void setBloomSize(float size)
		pBloomSize = size
	end
	
	/**
	 * \brief Custom tone mapping curve or empty curve to disable.
	 * \version 1.21
	 */
	func CurveBezier getToneMapCurve()
		return pToneMapCurve
	end
	
	/**
	 * \brief Set custom tone mapping curve or empty curve to disable.
	 * \version 1.21
	 * \note If enabled make sure to match the curve range to the white intensity.
	 */
	func void setToneMapCurve(CurveBezier curve)
		if curve == null
			throw ENullPointer.new("curve")
		end
		pToneMapCurve = curve
	end
	
	
	
	/** \brief Layer mask. */
	func LayerMask getLayerMask()
		return pLayerMask
	end
	
	/** \brief Set layer mask. */
	func void setLayerMask(LayerMask layerMask)
		pLayerMask = layerMask
	end
	
	
	
	/**
	 * \brief Copy parameters from camera director.
	 * \version 1.21
	 */
	func void copyParameters(CameraDirector director)
		setFov(director.pFov)
		setFovRatio(director.pFovRatio)
		setImageDistance(director.pImageDistance)
		setViewDistance(director.pViewDistance)
		
		setEnableHDRR(director.pEnableHDRR)
		setExposure(director.pExposure)
		setLowestIntensity(director.pLowestIntensity)
		setHighestIntensity(director.pHighestIntensity)
		setAdaptionTime(director.pAdaptionTime)
		
		setEnableGI(director.pEnableGI)
		
		setWhiteIntensity(director.pWhiteIntensity)
		setBloomIntensity(director.pBloomIntensity)
		setBloomStrength(director.pBloomStrength)
		setBloomSize(director.pBloomSize)
		setBloomBlend(director.pBloomBlend)
		setToneMapCurve(director.pToneMapCurve)
		
		setLayerMask(director.pLayerMask)
	end
	
	/**
	 * \brief Copy parameters from camera.
	 * \version 1.21
	 */
	func void copyParameters(Camera camera)
		setFov(camera.getFov())
		setFovRatio(camera.getFovRatio())
		setImageDistance(camera.getImageDistance())
		setViewDistance(camera.getViewDistance())
		
		setEnableHDRR(camera.getEnableHDRR())
		setExposure(camera.getExposure())
		setLowestIntensity(camera.getLowestIntensity())
		setHighestIntensity(camera.getHighestIntensity())
		setAdaptionTime(camera.getAdaptionTime())
		
		setEnableGI(camera.getEnableGI())
		
		setWhiteIntensity(camera.getWhiteIntensity())
		setBloomIntensity(camera.getBloomIntensity())
		setBloomStrength(camera.getBloomStrength())
		setBloomSize(camera.getBloomSize())
		setBloomBlend(camera.getBloomBlend())
		setToneMapCurve(camera.getToneMapCurve())
		
		setLayerMask(camera.getLayerMask())
	end
	
	
	
	/** \brief Init camera parameters. */
	func void initCameraParameters()
		if pCamera != null
			applyParameters(pCamera)
		end
	end
	
	/**
	 * \brief Apply parameters to camera.
	 * \version 1.21
	 */
	func void applyParameters(Camera camera)
		camera.setFov(pFov)
		camera.setFovRatio(pFovRatio)
		camera.setImageDistance(pImageDistance)
		camera.setViewDistance(pViewDistance)
		
		camera.setEnableHDRR(pEnableHDRR)
		camera.setExposure(pExposure)
		camera.setLowestIntensity(pLowestIntensity)
		camera.setHighestIntensity(pHighestIntensity)
		camera.setAdaptionTime(pAdaptionTime)
		
		camera.setEnableGI(pEnableGI)
		
		camera.setWhiteIntensity(pWhiteIntensity)
		camera.setBloomIntensity(pBloomIntensity)
		camera.setBloomStrength(pBloomStrength)
		camera.setBloomSize(pBloomSize)
		camera.setBloomBlend(pBloomBlend)
		camera.setToneMapCurve(pToneMapCurve)
		
		camera.setLayerMask(pLayerMask)
	end
	
	/**
	 * \brief Request graphic module to reset camera adapted intensity to optimal value.
	 * \version 1.4
	 */
	func void resetCameraAdaptedIntensity()
		pCamera.resetAdaptedIntensity()
	end
	
	/**
	 * \brief Director has been activated.
	 * 
	 * Useful for init camera parameters that do not change over time. Default implementation
	 * calls initCameraParameters if camera is not null.
	 */
	func void activate()
		if pCamera != null
			initCameraParameters()
		end
	end
	
	/** \brief Director has been deactivated. */
	func void deactivate()
	end
	
	/**
	 * \brief Update director.
	 * 
	 * Default implementation calls updateCamera if camera is not null and updateMicrophone
	 * if microphone is not null.
	 */
	func void update(float elapsed)
		if pCamera != null
			updateCamera(elapsed)
		end
		if pMicrophone != null
			updateMicrophone(elapsed)
		end
	end
	
	/** \brief Update camera. */
	func void updateCamera(float elapsed)
		pCamera.setPosition(DVector.new())
		pCamera.setOrientation(Quaternion.new())
	end
	
	/** \brief Update microphone. */
	func void updateMicrophone(float elapsed)
		pMicrophone.setPosition(pCamera.getPosition())
		pMicrophone.setOrientation(pCamera.getOrientation())
	end
end
