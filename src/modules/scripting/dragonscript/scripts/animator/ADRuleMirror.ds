/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */


namespace Dragengine.Animators

pin Dragengine.Scenery
pin Dragengine.Utils



/**
 * \brief Definition of a mirror animator rule.
 * 
 * Once defined a rule can be added to an animator using the stored definition.
 */
class ADRuleMirror extends ADRule
	/** \brief Match bone name. */
	class MatchBoneName
		private var String pFirst
		private var String pSecond
		private var ARMirrorMatchNameType pType
		
		/** \brief Create match bone name. */
		public func new(String first, String second, ARMirrorMatchNameType type)
			if first == null
				throw ENullPointer.new("first")
			end
			if first.empty()
				throw EInvalidParam.new("first is empty string")
			end
			if second == null
				throw ENullPointer.new("second")
			end
			if second.empty()
				throw EInvalidParam.new("second is empty string")
			end
			if type == null
				throw ENullPointer.new("type")
			end
			
			pFirst = first
			pSecond = second
			pType = type
		end
		
		/** \brief First bone name component to match. */
		public func String getFirst()
			return pFirst
		end
		
		/** \brief Second bone name component to match. */
		public func String getSecond()
			return pSecond
		end
		
		/** \brief Match type. */
		public  func ARMirrorMatchNameType getType()
			return pType
		end
	end
	
	
	
	private var ARMirrorMirrorAxis pMirrorAxis
	private var String pMirrorBone
	private var Array pMatchNames
	private var bool pEnablePosition
	private var bool pEnableOrientation
	private var bool pEnableSize
	private var bool pEnableVertexPositionSet
	
	
	
	/** \brief Create animation rule definition. */
	public func new()
		pMirrorAxis = ARMirrorMirrorAxis.x
		pMirrorBone = ""
		pMatchNames = Array.new()
		pEnablePosition = true
		pEnableOrientation = true
		pEnableSize = false
		pEnableVertexPositionSet = true
	end
	
	/**
	 * \brief Create copy of animation rule definition.
	 * \version 1.13
	 */
	public func new(AnimatorDefinition fromDef, AnimatorDefinition toDef,\
	ADRuleMirror rule) super(fromDef, toDef, rule)
		pMirrorAxis = rule.pMirrorAxis
		pMirrorBone = rule.pMirrorBone
		pMatchNames = Array.new(rule.pMatchNames)
		pEnablePosition = rule.pEnablePosition
		pEnableOrientation = rule.pEnableOrientation
		pEnableSize = rule.pEnableSize
		pEnableVertexPositionSet = rule.pEnableVertexPositionSet
	end
	
	
	
	/** \brief Mirror axis. */
	public func ARMirrorMirrorAxis getMirrorAxis()
		return pMirrorAxis
	end
	
	/** \brief Set mirror axis. */
	public func void setMirrorAxis(ARMirrorMirrorAxis axis)
		pMirrorAxis = axis
	end
	
	/** \brief Name of mirror bone or empty string to use component. */
	public func String getMirrorBone()
		return pMirrorBone
	end
	
	/** \brief Set name of mirror bone or empty string to use component. */
	public func void setMirrorBone(String bone)
		if bone == null
			throw ENullPointer.new("bone")
		end
		pMirrorBone = bone
	end
	
	/** \brief Count of match bone names. */
	public func int getMatchNameCount()
		return pMatchNames.getCount()
	end
	
	/** \brief Match bone name at index. */
	public func MatchBoneName getMatchNameAt(int index)
		return pMatchNames.getAt(index) cast MatchBoneName
	end
	
	/** \brief Add match bone name. */
	public func void addMatchName(String first, String second, ARMirrorMatchNameType type)
		pMatchNames.add(MatchBoneName.new(first, second, type))
	end
	
	/** \brief Position manipulation is enabled. */
	public func bool getEnablePosition()
		return pEnablePosition
	end
	
	/** \brief Set if position manipulation is enabled. */
	public func void setEnablePosition(bool enable)
		pEnablePosition = enable
	end
	
	/** \brief Orientation manipulation is enabled. */
	public func bool getEnableOrientation()
		return pEnableOrientation
	end
	
	/** \brief Set orientation manipulation is enabled. */
	public func void setEnableOrientation(bool enable)
		pEnableOrientation = enable
	end
	
	/** \brief Size manipulation is enabled. */
	public func bool getEnableSize()
		return pEnableSize
	end
	
	/** \brief Setsif size manipulation is enabled. */
	public func void setEnableSize(bool enable)
		pEnableSize = enable
	end
	
	/**
	 * \brief Vertex position set manipulation is enabled.
	 * \version 1.17
	 */
	public func bool getEnableVertexPositionSet()
		return pEnableVertexPositionSet
	end
	
	/**
	 * \brief Set if vertex position set manipulation is enabled.
	 * \version 1.17
	 */
	public func void setEnableVertexPositionSet(bool enable)
		pEnableVertexPositionSet = enable
	end
	
	
	
	/** \brief Build engine animator rule using the stored definition. */
	public func AnimatorRule buildRule(Animator animator)
		var ARMirror rule = ARMirror.new()
		
		buildRuleCommon(rule)
		
		forEachTarget(block ADRuleTargetLink each
			rule.targetAddLink(each.getTarget() cast ARMirrorTarget, each.getLink().getIndex())
		end)
		
		rule.setMirrorAxis(pMirrorAxis)
		rule.setMirrorBone(pMirrorBone)
		pMatchNames.forEach(block MatchBoneName each
			rule.addMatchName(each.getFirst(), each.getSecond(), each.getType())
		end)
		rule.setEnablePosition(pEnablePosition)
		rule.setEnableOrientation(pEnableOrientation)
		rule.setEnableSize(pEnableSize)
		rule.setEnableVertexPositionSet(pEnableVertexPositionSet)
		
		return rule
	end
	
	
	
	/**
	 * \brief Create copy of rule.
	 * \version 1.13
	 */
	public func ADRule copy(AnimatorDefinition fromDef, AnimatorDefinition toDef)
		return new(fromDef, toDef, this)
	end
	
	
	
	public func void debug(Console console)
		console.addMessage(debugCommon("Mirror") + \
			" axis=" + pMirrorAxis + \
			" bone=" + pMirrorBone + \
			" epos=" + pEnablePosition + \
			" eorient=" + pEnableOrientation + \
			" esize=" + pEnableSize + \
			" evps=" + pEnableVertexPositionSet + ")")
	end
end
