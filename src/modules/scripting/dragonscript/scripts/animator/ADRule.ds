/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */


namespace Dragengine.Animators

pin Dragengine.Scenery
pin Dragengine.Utils



/**
 * \brief Definition of animator rule.
 * 
 * Once defined a rule can be added to an animator using the stored definition.
 * This is the base rule class with the properties shared amongst all rule types.
 */
abstract class ADRule
	private var String pName
	private var Array pTargetLinks
	private var Array pBones
	private var Array pVertexPositionSets
	private var bool pEnabled
	private var AnimatorRuleBlendMode pBlendMode
	private var float pBlendFactor
	private var bool pInvertBlendFactor
	
	
	
	/** \brief Create animation rule definition. */
	public func new()
		pName = ""
		pTargetLinks = Array.new()
		pBones = Array.new()
		pVertexPositionSets = Array.new()
		pEnabled = true
		pBlendMode = AnimatorRuleBlendMode.blend
		pBlendFactor = 1
	end
	
	/**
	 * \brief Create copy of animation rule definition.
	 * \version 1.13
	 */
	protected func new(AnimatorDefinition fromDef, AnimatorDefinition toDef, ADRule rule)
		if fromDef == null
			throw ENullPointer.new("fromDef")
		end
		if toDef == null
			throw ENullPointer.new("toDef")
		end
		if rule == null
			throw ENullPointer.new("rule")
		end
		
		pName = rule.pName
		pBones = Array.new(rule.pBones)
		pVertexPositionSets = Array.new(rule.pVertexPositionSets)
		pEnabled = rule.pEnabled
		pBlendMode = rule.pBlendMode
		pBlendFactor = rule.pBlendFactor
		pInvertBlendFactor = rule.pInvertBlendFactor
		
		pTargetLinks = rule.pTargetLinks.map(block ADRuleTargetLink link
			return ADRuleTargetLink.new(link.getTarget(), toDef.getLinkAt(fromDef.indexOfLink(link.getLink())))
		end)
	end
	
	
	
	/** \brief Name of rule. */
	public func String getName()
		return pName
	end
	
	/** \brief Set name of rule. */
	public func void setName(String name)
		pName = name
	end
	
	/** \brief Count of target links. */
	public func int getTargetLinkCount()
		return pTargetLinks.getCount()
	end
	
	/** \brief Target link at index. */
	public func ADRuleTargetLink getTargetLinkAt(int index)
		return pTargetLinks.getAt(index) cast ADRuleTargetLink
	end
	
	/** \brief Add target link. */
	public func void addTargetLink(ADRuleTargetLink targetLink)
		if targetLink == null
			throw ENullPointer.new("targetLink")
		end
		pTargetLinks.add(targetLink)
	end
	
	/** \brief Visit target links with a block. */
	public func void forEachTarget(Block ablock)
		pTargetLinks.forEach(ablock)
	end
	
	/**
	 * \brief Remove all target links.
	 * \version 1.13
	 */
	public func void removeAllTargetLinks()
		pTargetLinks.removeAll()
	end
	
	
	
	/** \brief Count of bones. */
	public func int getBoneCount()
		return pBones.getCount()
	end
	
	/** \brief Bone at index. */
	public func String getBoneAt(int index)
		return pBones.getAt(index) cast String
	end
	
	/** \brief Add bone. */
	public func void addBone(String bone)
		if bone == null
			throw ENullPointer.new("bone")
		end
		pBones.add(bone)
	end
	
	
	
	/**
	 * \brief Count of vertex position sets.
	 * \version 1.17
	 */
	public func int getVertexPositionSetCount()
		return pVertexPositionSets.getCount()
	end
	
	/**
	 * \brief Vertex position set at index.
	 * \version 1.17
	 */
	public func String getVertexPositionSetAt(int index)
		return pVertexPositionSets.getAt(index) cast String
	end
	
	/**
	 * \brief Add vertex position set.
	 * \version 1.17
	 */
	public func void addVertexPositionSet(String vertexPositionSet)
		if vertexPositionSet == null
			throw ENullPointer.new("vertexPositionSet")
		end
		pVertexPositionSets.add(vertexPositionSet)
	end
	
	
	
	/** \brief Rule is enabled. */
	public func bool getEnabled()
		return pEnabled
	end
	
	/** \brief Set if rule is enabled. */
	public func void setEnabled(bool enabled)
		pEnabled = enabled
	end
	
	/** \brief Blend mode. */
	public func AnimatorRuleBlendMode getBlendMode()
		return pBlendMode
	end
	
	/** \brief Set blend mode. */
	public func void setBlendMode(AnimatorRuleBlendMode mode)
		pBlendMode = mode
	end
	
	/** \brief Blend factor. */
	public func float getBlendFactor()
		return pBlendFactor
	end
	
	/** \brief Set blend factor. */
	public func void setBlendFactor(float factor)
		pBlendFactor = factor
	end
	
	/**
	 * \brief Invert blend factor (1 - blendFactor).
	 * \version 1.13
	 */
	public func bool getInvertBlendFactor()
		return pInvertBlendFactor
	end
	
	/**
	 * \brief Set invert blend factor (1 - blendFactor).
	 * \version 1.13
	 */
	public func void setInvertBlendFactor(bool invertBlendFactor)
		pInvertBlendFactor = invertBlendFactor
	end
	
	
	
	/** \brief Build engine animator rule using the stored definition. */
	abstract public func AnimatorRule buildRule(Animator animator)
	
	/** \brief Setup common parameters for animator rule. */
	protected func void buildRuleCommon(AnimatorRule rule)
		if rule == null
			throw ENullPointer.new("rule")
		end
		
		rule.setEnabled(pEnabled)
		rule.setBlendMode(pBlendMode)
		rule.setBlendFactor(pBlendFactor)
		rule.setInvertBlendFactor(pInvertBlendFactor)
		
		pBones.forEach(block String each
			rule.addBone(each)
		end)
		pVertexPositionSets.forEach(block String each
			rule.addVertexPositionSet(each)
		end)
	end
	
	
	
	/**
	 * \brief Create copy of rule.
	 * \version 1.13
	 */
	public func ADRule copy(AnimatorDefinition fromDef, AnimatorDefinition toDef)
		throw EInvalidAction.new("subclass responsibility")
	end
	
	
	
	public func void debug(Console console)
	end
	
	protected func String debugCommon(String type)
		var ADRuleTargetLink targetLink
		var int i, count
		
		var String text = "- Rule " + type + " (name=" + pName + " enabled=" + pEnabled \
			+ " mode=" + pBlendMode + " factor=" + pBlendFactor\
			+ " invertBlendFactor=" + pInvertBlendFactor
		
		count = pBones.getCount()
		for i = 0 to count
			text = text + " bone=" + pBones.getAt(i).toString()
		end
		
		count = pVertexPositionSets.getCount()
		for i = 0 to count
			text = text + " vertPosSet=" + pVertexPositionSets.getAt(i).toString()
		end
		
		count = pTargetLinks.getCount()
		for i = 0 to count
			targetLink = pTargetLinks.getAt(i) cast ADRuleTargetLink
			
			text = text + " link=" + targetLink.getTarget() + ":" + targetLink.getLink().getIndex()
		end
		
		return text
	end
end
