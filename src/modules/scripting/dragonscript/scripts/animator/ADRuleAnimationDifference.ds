/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */


namespace Dragengine.Animators

pin Dragengine.Scenery
pin Dragengine.Utils



/**
 * \brief Definition of animation difference animator rule.
 * 
 * Once defined a rule can be added to an animator using the stored definition.
 */
class ADRuleAnimationDifference extends ADRule
	private var String pLeadMoveName
	private var float pLeadMoveTime
	private var String pRefMoveName
	private var float pRefMoveTime
	private var bool pEnablePosition
	private var bool pEnableOrientation
	private var bool pEnableSize
	private var bool pEnableVertexPositionSet
	
	
	
	/** \brief Create new animation rule definition. */
	public func new()
		pLeadMoveName = "idle"
		pLeadMoveTime = 0
		pRefMoveName = "idle"
		pRefMoveTime = 0
		pEnablePosition = true
		pEnableOrientation = true
		pEnableSize = false
		pEnableVertexPositionSet = true
	end
	
	/**
	 * \brief Create copy of animation rule definition.
	 * \version 1.13
	 */
	public func new(AnimatorDefinition fromDef, AnimatorDefinition toDef,\
	ADRuleAnimationDifference rule) super(fromDef, toDef, rule)
		pLeadMoveName = rule.pLeadMoveName
		pLeadMoveTime = rule.pLeadMoveTime
		pRefMoveName = rule.pRefMoveName
		pRefMoveTime = rule.pRefMoveTime
		pEnablePosition = rule.pEnablePosition
		pEnableOrientation = rule.pEnableOrientation
		pEnableSize = rule.pEnableSize
		pEnableVertexPositionSet = rule.pEnableVertexPositionSet
	end
	
	
	
	/** \brief Leading move name. */
	public func String getLeadingMoveName()
		return pLeadMoveName
	end
	
	/** \brief Set leading move name. */
	public func void setLeadingMoveName(String name)
		if name == null
			throw ENullPointer.new("name")
		end
		pLeadMoveName = name
	end
	
	/** \brief Time relative to leading move playtime. */
	public func float getLeadingMoveTime()
		return pLeadMoveTime
	end
	
	/** \brief Set time relative to leading move playtime. */
	public func void setLeadingMoveTime(float time)
		pLeadMoveTime = time
	end
	
	/** \brief Reference move name. */
	public func String getReferenceMoveName()
		return pRefMoveName
	end
	
	/** \brief Set reference move name. */
	public func void setReferenceMoveName(String name)
		if name == null
			throw ENullPointer.new("name")
		end
		pRefMoveName = name
	end
	
	/** \brief Time relative to reference move playtime. */
	public func float getReferenceMoveTime()
		return pRefMoveTime
	end
	
	/** \brief Set time relative to reference move playtime. */
	public func void setReferenceMoveTime(float time)
		pRefMoveTime = time
	end
	
	/** \brief Position manipulation is enabled. */
	public func bool getEnablePosition()
		return pEnablePosition
	end
	
	/** \brief Set if position manipulation is enabled. */
	public func void setEnablePosition(bool enable)
		pEnablePosition = enable
	end
	
	/** \brief Orientation manipulation is enabled. */
	public func bool getEnableOrientation()
		return pEnableOrientation
	end
	
	/** \brief Set if orientation manipulation is enabled. */
	public func void setEnableOrientation(bool enable)
		pEnableOrientation = enable
	end
	
	/** \brief Size manipulation is enabled. */
	public func bool getEnableSize()
		return pEnableSize
	end
	
	/** \brief Set if size manipulation is enabled. */
	public func void setEnableSize(bool enable)
		pEnableSize = enable
	end
	
	/**
	 * \brief Vertex position set manipulation is enabled.
	 * \version 1.17
	 */
	public func bool getEnableVertexPositionSet()
		return pEnableVertexPositionSet
	end
	
	/**
	 * \brief Set if vertex position set manipulation is enabled.
	 * \version 1.17
	 */
	public func void setEnableVertexPositionSet(bool enable)
		pEnableVertexPositionSet = enable
	end
	
	
	
	/** \brief Build engine animator rule using the stored definition. */
	public func AnimatorRule buildRule(Animator animator)
		var ARAnimationDifference rule = ARAnimationDifference.new()
		
		buildRuleCommon(rule)
		
		forEachTarget(block ADRuleTargetLink each
			rule.targetAddLink(each.getTarget() cast ARAnimationDifferenceTarget, each.getLink().getIndex())
		end)
		
		rule.setLeadingMoveName(pLeadMoveName)
		rule.setLeadingMoveTime(pLeadMoveTime)
		rule.setReferenceMoveName(pRefMoveName)
		rule.setReferenceMoveTime(pRefMoveTime)
		rule.setEnablePosition(pEnablePosition)
		rule.setEnableOrientation(pEnableOrientation)
		rule.setEnableSize(pEnableSize)
		rule.setEnableVertexPositionSet(pEnableVertexPositionSet)
		
		return rule
	end
	
	
	
	/**
	 * \brief Create copy of rule.
	 * \version 1.13
	 */
	public func ADRule copy(AnimatorDefinition fromDef, AnimatorDefinition toDef)
		return new(fromDef, toDef, this)
	end
	
	
	
	public func void debug(Console console)
		console.addMessage(debugCommon("Animation Difference") + \
			" lmove=" + pLeadMoveName + ":" + pLeadMoveTime + \
			" rmove=" + pRefMoveName + ":" + pRefMoveTime + \
			" epos=" + pEnablePosition + " eorient=" + pEnableOrientation \
			+ " esize=" + pEnableSize  + " evps=" + pEnableVertexPositionSet + ")")
	end
end
