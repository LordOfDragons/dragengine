/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */


namespace Dragengine.Animators

pin Dragengine.Scenery
pin Dragengine.Utils



/**
 * \brief Definition of bone transformator animator rule.
 * 
 * Once defined a rule can be added to an animator using the stored definition.
 */
class ADRuleBoneTransformator extends ADRule
	private var Vector pMinimumTranslation
	private var Vector pMaximumTranslation
	private var Vector pMinimumRotation
	private var Vector pMaximumRotation
	private var Vector pMinimumScaling
	private var Vector pMaximumScaling
	private var ARBoneTransformatorCFrame pCoordFrame
	private var bool pEnablePosition
	private var bool pEnableOrientation
	private var bool pEnableSize
	private var String pTargetBone
	private var Vector pAxis
	private var float pMinimumAngle
	private var float pMaximumAngle
	private var bool pUseAxis
	
	
	
	/** \brief Create animation rule definition. */
	public func new()
		pMinimumTranslation = Vector.new()
		pMaximumTranslation = Vector.new()
		pMinimumRotation = Vector.new()
		pMaximumRotation = Vector.new()
		pMinimumScaling = Vector.new(1, 1, 1)
		pMaximumScaling = Vector.new(1, 1, 1)
		pCoordFrame = ARBoneTransformatorCFrame.component
		pEnablePosition = false
		pEnableOrientation = true
		pEnableSize = false
		pTargetBone = ""
		pAxis = Vector.new(0, 0, 1)
		pMinimumAngle = 0
		pMaximumAngle = 0
		pUseAxis = false
	end
	
	/**
	 * \brief Create copy of animation rule definition.
	 * \version 1.13
	 */
	public func new(AnimatorDefinition fromDef, AnimatorDefinition toDef,\
	ADRuleBoneTransformator rule) super(fromDef, toDef, rule)
		pMinimumTranslation = rule.pMinimumTranslation
		pMaximumTranslation = rule.pMaximumTranslation
		pMinimumRotation = rule.pMinimumRotation
		pMaximumRotation = rule.pMaximumRotation
		pMinimumScaling = rule.pMinimumScaling
		pMaximumScaling = rule.pMaximumScaling
		pCoordFrame = rule.pCoordFrame
		pEnablePosition = rule.pEnablePosition
		pEnableOrientation = rule.pEnableOrientation
		pEnableSize = rule.pEnableSize
		pTargetBone = rule.pTargetBone
		pAxis = rule.pAxis
		pMinimumAngle = rule.pMinimumAngle
		pMaximumAngle = rule.pMaximumAngle
		pUseAxis = rule.pUseAxis
	end
	
	
	
	/** \brief Mminimum translation. */
	public func Vector getMinimumTranslation()
		return pMinimumTranslation
	end
	
	/** \brief Set minimum translation. */
	public func void setMinimumTranslation(Vector translation)
		if translation == null
			throw ENullPointer.new("translation")
		end
		pMinimumTranslation = translation
	end
	
	/** \brief Maximum translation. */
	public func Vector getMaximumTranslation()
		return pMaximumTranslation
	end
	
	/** \brief Set maximum translation. */
	public func void setMaximumTranslation(Vector translation)
		if translation == null
			throw ENullPointer.new("translation")
		end
		pMaximumTranslation = translation
	end
	
	/** \brief Minimum rotation. */
	public func Vector getMinimumRotation()
		return pMinimumRotation
	end
	
	/** \brief Set minimum rotation. */
	public func void setMinimumRotation(Vector rotation)
		if rotation == null
			throw ENullPointer.new("rotation")
		end
		pMinimumRotation = rotation
	end
	
	/** \brief Maximum rotation. */
	public func Vector getMaximumRotation()
		return pMaximumRotation
	end
	
	/** \brief Set maximum rotation. */
	public func void setMaximumRotation(Vector rotation)
		if rotation == null
			throw ENullPointer.new("rotationn")
		end
		pMaximumRotation = rotation
	end
	
	/** \brief Minimum scaling. */
	public func Vector getMinimumScaling()
		return pMinimumScaling
	end
	
	/** \brief Set minimum scaling. */
	public func void setMinimumScaling(Vector scaling)
		if scaling == null
			throw ENullPointer.new("scaling")
		end
		pMinimumScaling = scaling
	end
	
	/** \brief Maximum scaling. */
	public func Vector getMaximumScaling()
		return pMaximumScaling
	end
	
	/** \brief Set maximum scaling. */
	public func void setMaximumScaling(Vector scaling)
		if scaling == null
			throw ENullPointer.new("scaling")
		end
		pMaximumScaling = scaling
	end
	
	/** \brief Coordinate frame of rotation. */
	public func ARBoneTransformatorCFrame getCoordinateFrame()
		return pCoordFrame
	end
	
	/** \brief Set if coordinate frame of rotation. */
	public func void setCoordinateFrame(ARBoneTransformatorCFrame coordFrame)
		pCoordFrame = coordFrame
	end
	
	/** \brief Ttransformation affects the position. */
	public func bool getEnablePosition()
		return pEnablePosition
	end
	
	/** \brief Set if transformation affects the position. */
	public func void setEnablePosition(bool enable)
		pEnablePosition = enable
	end
	
	/** \brief Transformation affects the orientation. */
	public func bool getEnableOrientation()
		return pEnableOrientation
	end
	
	/** \brief Set if transformation affects the orientation. */
	public func void setEnableOrientation(bool enable)
		pEnableOrientation = enable
	end
	
	/** \brief Transformation affects the size. */
	public func bool getEnableSize()
		return pEnableSize
	end
	
	/** \brief Set if transformation affects the size. */
	public func void setEnableSize(bool enable)
		pEnableSize = enable
	end
	
	/** \brief Target bone name. */
	public func String getTargetBone()
		return pTargetBone
	end
	
	/** \brief Set target bone name. */
	public func void setTargetBone(String name)
		if name == null
			throw ENullPointer.new("name")
		end
		pTargetBone = name
	end
	
	/**
	 * \brief Rotation axis.
	 * \version 1.6
	 */
	public func Vector getAxis()
		return pAxis
	end
	
	/**
	 * \brief Set rotation axis.
	 * \version 1.6
	 */
	public func void setAxis(Vector axis)
		if axis == null
			throw ENullPointer.new("axis")
		end
		pAxis = axis
	end
	
	/**
	 * \brief Minimum axis rotation angle.
	 * \version 1.6
	 */
	public func float getMinimumAngle()
		return pMinimumAngle
	end
	
	/**
	 * \brief Set minimum axis rotation angle.
	 * \version 1.6
	 */
	public func void setMinimumAngle(float angle)
		pMinimumAngle = angle
	end
	
	/**
	 * \brief Maximum axis rotation angle.
	 * \version 1.6
	 */
	public func float getMaximumAngle()
		return pMaximumAngle
	end
	
	/**
	 * \brief Set maximum axis rotation angle.
	 * \version 1.6
	 */
	public func void setMaximumAngle(float angle)
		pMaximumAngle = angle
	end
	
	/**
	 * \brief Use rotation axis instead of rotation directly.
	 * \version 1.6
	 */
	public func bool getUseAxis()
		return pUseAxis
	end
	
	/**
	 * \brief Set to use rotation axis instead of rotation directly.
	 * \version 1.6
	 */
	public func void setUseAxis(bool useAxis)
		pUseAxis = useAxis
	end
	
	
	
	/** Build engine animator rule using the stored definition. */
	public func AnimatorRule buildRule(Animator animator)
		var ARBoneTransformator rule = ARBoneTransformator.new()
		
		buildRuleCommon(rule)
		
		forEachTarget(block ADRuleTargetLink each
			rule.targetAddLink(each.getTarget() cast ARBoneTransformatorTarget, each.getLink().getIndex())
		end)
		
		rule.setMinimumTranslation(pMinimumTranslation)
		rule.setMaximumTranslation(pMaximumTranslation)
		rule.setMinimumRotation(pMinimumRotation)
		rule.setMaximumRotation(pMaximumRotation)
		rule.setMinimumScaling(pMinimumScaling)
		rule.setMaximumScaling(pMaximumScaling)
		rule.setCoordinateFrame(pCoordFrame)
		rule.setEnablePosition(pEnablePosition)
		rule.setEnableOrientation(pEnableOrientation)
		rule.setEnableSize(pEnableSize)
		rule.setTargetBone(pTargetBone)
		rule.setAxis(pAxis)
		rule.setMinimumAngle(pMinimumAngle)
		rule.setMaximumAngle(pMaximumAngle)
		rule.setUseAxis(pUseAxis)
		
		return rule
	end
	
	
	
	/**
	 * \brief Create copy of rule.
	 * \version 1.13
	 */
	public func ADRule copy(AnimatorDefinition fromDef, AnimatorDefinition toDef)
		return new(fromDef, toDef, this)
	end
	
	
	
	public func void debug(Console console)
		console.addMessage(debugCommon("Bone Transformator") + \
			" minTrans=" + pMinimumTranslation + " maxTrans=" + pMaximumTranslation + \
			" minRot=" + pMinimumRotation + " maxRot=" + pMaximumRotation + \
			" minScale=" + pMinimumScaling + " maxScale=" + pMaximumScaling + \
			" useAxis=" + pUseAxis + " axis=" + pAxis + \
			" minAngle=" + pMinimumAngle + " maxAngle=" + pMaximumAngle + ")")
	end
end
