/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */


namespace Dragengine.Animators

pin Dragengine.Scenery
pin Dragengine.Utils



/**
 * \brief Definition of bone transformator animator rule.
 * 
 * Once defined a rule can be added to an animator using the stored definition.
 */
class ADRuleBoneTransformator extends ADRule
	var Vector pMinimumTranslation, pMaximumTranslation, pMinimumRotation, pMaximumRotation
	var Vector pMinimumScaling, pMaximumScaling, pAxis
	var ARBoneTransformatorCFrame pCoordFrame
	var bool pEnablePosition, pEnableOrientation, pEnableSize
	var String pTargetBone, pInputBone
	var float pMinimumAngle, pMaximumAngle
	var bool pUseAxis
	var ARBoneTransformatorInputSource pInputSource
	
	
	
	/** \brief Create animation rule definition. */
	func new()
		pMinimumTranslation = Vector.new()
		pMaximumTranslation = Vector.new()
		pMinimumRotation = Vector.new()
		pMaximumRotation = Vector.new()
		pMinimumScaling = Vector.new(1, 1, 1)
		pMaximumScaling = Vector.new(1, 1, 1)
		pCoordFrame = ARBoneTransformatorCFrame.component
		pEnableOrientation = true
		pTargetBone = ""
		pAxis = Vector.new(0, 0, 1)
		pInputBone = ""
		pInputSource = ARBoneTransformatorInputSource.targetBlend
	end
	
	/**
	 * \brief Create copy of animation rule definition.
	 * \version 1.13
	 */
	func new(AnimatorDefinition fromDef, AnimatorDefinition toDef,\
	ADRuleBoneTransformator rule) super(fromDef, toDef, rule)
		pMinimumTranslation = rule.pMinimumTranslation
		pMaximumTranslation = rule.pMaximumTranslation
		pMinimumRotation = rule.pMinimumRotation
		pMaximumRotation = rule.pMaximumRotation
		pMinimumScaling = rule.pMinimumScaling
		pMaximumScaling = rule.pMaximumScaling
		pCoordFrame = rule.pCoordFrame
		pEnablePosition = rule.pEnablePosition
		pEnableOrientation = rule.pEnableOrientation
		pEnableSize = rule.pEnableSize
		pTargetBone = rule.pTargetBone
		pAxis = rule.pAxis
		pMinimumAngle = rule.pMinimumAngle
		pMaximumAngle = rule.pMaximumAngle
		pUseAxis = rule.pUseAxis
		pInputBone = rule.pInputBone
		pInputSource = rule.pInputSource
	end
	
	
	
	/** \brief Mminimum translation. */
	func Vector getMinimumTranslation()
		return pMinimumTranslation
	end
	
	/** \brief Set minimum translation. */
	func void setMinimumTranslation(Vector translation)
		if translation == null
			throw ENullPointer.new("translation")
		end
		pMinimumTranslation = translation
	end
	
	/** \brief Maximum translation. */
	func Vector getMaximumTranslation()
		return pMaximumTranslation
	end
	
	/** \brief Set maximum translation. */
	func void setMaximumTranslation(Vector translation)
		if translation == null
			throw ENullPointer.new("translation")
		end
		pMaximumTranslation = translation
	end
	
	/** \brief Minimum rotation. */
	func Vector getMinimumRotation()
		return pMinimumRotation
	end
	
	/** \brief Set minimum rotation. */
	func void setMinimumRotation(Vector rotation)
		if rotation == null
			throw ENullPointer.new("rotation")
		end
		pMinimumRotation = rotation
	end
	
	/** \brief Maximum rotation. */
	func Vector getMaximumRotation()
		return pMaximumRotation
	end
	
	/** \brief Set maximum rotation. */
	func void setMaximumRotation(Vector rotation)
		if rotation == null
			throw ENullPointer.new("rotationn")
		end
		pMaximumRotation = rotation
	end
	
	/** \brief Minimum scaling. */
	func Vector getMinimumScaling()
		return pMinimumScaling
	end
	
	/** \brief Set minimum scaling. */
	func void setMinimumScaling(Vector scaling)
		if scaling == null
			throw ENullPointer.new("scaling")
		end
		pMinimumScaling = scaling
	end
	
	/** \brief Maximum scaling. */
	func Vector getMaximumScaling()
		return pMaximumScaling
	end
	
	/** \brief Set maximum scaling. */
	func void setMaximumScaling(Vector scaling)
		if scaling == null
			throw ENullPointer.new("scaling")
		end
		pMaximumScaling = scaling
	end
	
	/** \brief Coordinate frame of rotation. */
	func ARBoneTransformatorCFrame getCoordinateFrame()
		return pCoordFrame
	end
	
	/** \brief Set if coordinate frame of rotation. */
	func void setCoordinateFrame(ARBoneTransformatorCFrame coordFrame)
		pCoordFrame = coordFrame
	end
	
	/** \brief Ttransformation affects the position. */
	func bool getEnablePosition()
		return pEnablePosition
	end
	
	/** \brief Set if transformation affects the position. */
	func void setEnablePosition(bool enable)
		pEnablePosition = enable
	end
	
	/** \brief Transformation affects the orientation. */
	func bool getEnableOrientation()
		return pEnableOrientation
	end
	
	/** \brief Set if transformation affects the orientation. */
	func void setEnableOrientation(bool enable)
		pEnableOrientation = enable
	end
	
	/** \brief Transformation affects the size. */
	func bool getEnableSize()
		return pEnableSize
	end
	
	/** \brief Set if transformation affects the size. */
	func void setEnableSize(bool enable)
		pEnableSize = enable
	end
	
	/** \brief Target bone name. */
	func String getTargetBone()
		return pTargetBone
	end
	
	/** \brief Set target bone name. */
	func void setTargetBone(String name)
		if name == null
			throw ENullPointer.new("name")
		end
		pTargetBone = name
	end
	
	/**
	 * \brief Rotation axis.
	 * \version 1.6
	 */
	func Vector getAxis()
		return pAxis
	end
	
	/**
	 * \brief Set rotation axis.
	 * \version 1.6
	 */
	func void setAxis(Vector axis)
		if axis == null
			throw ENullPointer.new("axis")
		end
		pAxis = axis
	end
	
	/**
	 * \brief Minimum axis rotation angle.
	 * \version 1.6
	 */
	func float getMinimumAngle()
		return pMinimumAngle
	end
	
	/**
	 * \brief Set minimum axis rotation angle.
	 * \version 1.6
	 */
	func void setMinimumAngle(float angle)
		pMinimumAngle = angle
	end
	
	/**
	 * \brief Maximum axis rotation angle.
	 * \version 1.6
	 */
	func float getMaximumAngle()
		return pMaximumAngle
	end
	
	/**
	 * \brief Set maximum axis rotation angle.
	 * \version 1.6
	 */
	func void setMaximumAngle(float angle)
		pMaximumAngle = angle
	end
	
	/**
	 * \brief Use rotation axis instead of rotation directly.
	 * \version 1.6
	 */
	func bool getUseAxis()
		return pUseAxis
	end
	
	/**
	 * \brief Set to use rotation axis instead of rotation directly.
	 * \version 1.6
	 */
	func void setUseAxis(bool useAxis)
		pUseAxis = useAxis
	end
	
	/**
	 * \brief Input bone name.
	 * \version 1.28
	 */
	func String getInputBone()
		return pInputBone
	end
	
	/**
	 * \brief Set input bone name.
	 * \version 1.28
	 */
	func void setInputBone(String name)
		if name == null
			throw ENullPointer.new("name")
		end
		pInputBone = name
	end
	
	/**
	 * \brief Input source.
	 * \version 1.28
	 */
	func ARBoneTransformatorInputSource getInputSource()
		return pInputSource
	end
	
	/**
	 * \brief Set input source.
	 * \version 1.28
	 */
	func void setInputSource(ARBoneTransformatorInputSource source)
		pInputSource = source
	end
	
	
	
	/** Build engine animator rule using the stored definition. */
	func AnimatorRule buildRule(Animator animator)
		var ARBoneTransformator rule = ARBoneTransformator.new()
		
		buildRuleCommon(rule)
		
		forEachTarget(block ADRuleTargetLink each
			rule.targetAddLink(each.getTarget() cast ARBoneTransformatorTarget, each.getLink().getIndex())
		end)
		
		rule.setMinimumTranslation(pMinimumTranslation)
		rule.setMaximumTranslation(pMaximumTranslation)
		rule.setMinimumRotation(pMinimumRotation)
		rule.setMaximumRotation(pMaximumRotation)
		rule.setMinimumScaling(pMinimumScaling)
		rule.setMaximumScaling(pMaximumScaling)
		rule.setCoordinateFrame(pCoordFrame)
		rule.setEnablePosition(pEnablePosition)
		rule.setEnableOrientation(pEnableOrientation)
		rule.setEnableSize(pEnableSize)
		rule.setTargetBone(pTargetBone)
		rule.setAxis(pAxis)
		rule.setMinimumAngle(pMinimumAngle)
		rule.setMaximumAngle(pMaximumAngle)
		rule.setUseAxis(pUseAxis)
		rule.setInputBone(pInputBone)
		rule.setInputSource(pInputSource)
		
		return rule
	end
	
	
	
	/**
	 * \brief Create copy of rule.
	 * \version 1.13
	 */
	func ADRule copy(AnimatorDefinition fromDef, AnimatorDefinition toDef)
		return new(fromDef, toDef, this)
	end
	
	
	
	func void debug(Console console)
		console.addMessage(debugCommon("Bone Transformator") + \
			" minTrans=" + pMinimumTranslation + " maxTrans=" + pMaximumTranslation + \
			" minRot=" + pMinimumRotation + " maxRot=" + pMaximumRotation + \
			" minScale=" + pMinimumScaling + " maxScale=" + pMaximumScaling + \
			" useAxis=" + pUseAxis + " axis=" + pAxis + \
			" minAngle=" + pMinimumAngle + " maxAngle=" + pMaximumAngle + ")")
	end
end
