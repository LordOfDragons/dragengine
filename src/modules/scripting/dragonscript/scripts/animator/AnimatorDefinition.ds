/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */


namespace Dragengine.Animators

pin Dragengine.Gui
pin Dragengine.Scenery
pin Dragengine.Utils



/**
 * \brief Stores definition of an animator.
 * 
 * Once defined an animator can be updated using the stored definition easily.
 * Avoids storing real animators as often multiple animator definitions have
 * to be loaded at the beginning of a gaming session.
 */
class AnimatorDefinition
	private var String pPathFile
	private var Rig pRig
	private var Animation pAnimation
	private var Array pControllers
	private var Array pLinks
	private var Array pRules
	private var Array pBones
	private var Array pVertexPositionSets
	
	
	
	/** \brief Create animator definition. */
	public func new(String pathFile)
		pPathFile = pathFile
		pControllers = Array.new()
		pLinks = Array.new()
		pRules = Array.new()
		pBones = Array.new()
		pVertexPositionSets = Array.new()
	end
	
	/**
	 * \brief Create deep copy of animator definition.
	 * \version 1.13
	 */
	public func new(AnimatorDefinition definition)
		if definition == null
			throw ENullPointer.new("definition")
		end
		
		pPathFile = definition.pPathFile
		pRig = definition.pRig
		pAnimation = definition.pAnimation
		
		pControllers = definition.pControllers.map(block ADController controller
			return ADController.new(controller)
		end)
		pLinks = definition.pLinks.map(block ADLink link
			return ADLink.new(definition, this, link)
		end)
		pRules = definition.pRules.map(block ADRule rule
			return rule.copy(definition, this)
		end)
		pBones = Array.new(definition.pBones)
		pVertexPositionSets = Array.new(definition.pVertexPositionSets)
	end
	
	
	
	/** \brief Path the animator has been loaded from. */
	public func String getPathFile()
		return pPathFile
	end
	
	/** \brief Rig. */
	public func Rig getRig()
		return pRig
	end
	
	/** \brief Set rig. */
	public func void setRig(Rig rig)
		pRig = rig
	end
	
	/** \brief Animation. */
	public func Animation getAnimation()
		return pAnimation
	end
	
	/** \brief Set animation. */
	public func void setAnimation(Animation animation)
		pAnimation = animation
	end
	
	/** \brief Count of controllers. */
	public func int getControllerCount()
		return pControllers.getCount()
	end
	
	/** \brief Controller at index. */
	public func ADController getControllerAt(int index)
		return pControllers.getAt(index) cast ADController
	end
	
	/**
	 * \brief Index of controller or -1 if absent.
	 * \version 1.13
	 */
	public func int indexOfController(ADController controller)
		return pControllers.indexOf(controller)
	end
	
	/** \brief Add controller. */
	public func void addController(ADController controller)
		if controller == null
			throw ENullPointer.new("controller")
		end
		pControllers.add(controller)
	end
	
	/**
	 * \brief Visit controllers using block.
	 * \version 1.13
	 */
	public func void forEachController(Block ablock)
		pControllers.forEach(ablock)
	end
	
	
	
	/** \briec Count of links. */
	public func int getLinkCount()
		return pLinks.getCount()
	end
	
	/** \brief Link at index. */
	public func ADLink getLinkAt(int index)
		return pLinks.getAt(index) cast ADLink
	end
	
	/**
	 * \brief Index of link or -1 if absent.
	 * \version 1.13
	 */
	public func int indexOfLink(ADLink link)
		return pLinks.indexOf(link)
	end
	
	/** \brief Add link. */
	public func void addLink(ADLink link)
		if link == null
			throw ENullPointer.new("link")
		end
		pLinks.add(link)
	end
	
	/**
	 * \brief Visit links using block.
	 * \version 1.13
	 */
	public func void forEachLink(Block ablock)
		pLinks.forEach(ablock)
	end
	
	
	
	/** \brief Count of rules. */
	public func int getRuleCount()
		return pRules.getCount()
	end
	
	/** \brief Rule at index. */
	public func ADRule getRuleAt(int index)
		return pRules.getAt(index) cast ADRule
	end
	
	/**
	 * \brief Index of rule or -1 if absent.
	 * \version 1.13
	 */
	public func int indexOfRule(ADRule rule)
		return pRules.indexOf(rule)
	end
	
	/** \brief Add rule. */
	public func void addRule(ADRule rule)
		if rule == null
			throw ENullPointer.new("rule")
		end
		pRules.add(rule)
	end
	
	/**
	 * \brief Visit rules using block.
	 * \version 1.13
	 */
	public func void forEachRule(Block ablock)
		pRules.forEach(ablock)
	end
	
	
	
	/** \brief Count of bones. */
	public func int getBoneCount()
		return pBones.getCount()
	end
	
	/** \brief Bone at index. */
	public func String getBoneAt(int index)
		return pBones.getAt(index) cast String
	end
	
	/** \brief Add bone. */
	public func void addBone(String bone)
		if bone == null
			throw ENullPointer.new("bone")
		end
		pBones.add(bone)
	end
	
	
	
	/**
	 * \brief Count of bones.
	 * \version 1.17
	 */
	public func int getVertexPositionSetCount()
		return pVertexPositionSets.getCount()
	end
	
	/**
	 * \brief VertexPositionSet at index.
	 * \version 1.17
	 */
	public func String getVertexPositionSetAt(int index)
		return pVertexPositionSets.getAt(index) cast String
	end
	
	/**
	 * \brief Add bone.
	 * \version 1.17
	 */
	public func void addVertexPositionSet(String bone)
		if bone == null
			throw ENullPointer.new("bone")
		end
		pVertexPositionSets.add(bone)
	end
	
	
	
	/** \brief Build animator. */
	public func void buildAnimator(Animator animator)
		if animator == null
			throw ENullPointer.new("animator")
		end
		
		animator.removeAllRules()
		animator.removeAllLinks()
		animator.setControllerCount(pControllers.getCount())
		
		pControllers.forEach(block int index, ADController each
			each.addToAnimator(animator, index)
		end)
		pLinks.forEach(block ADLink each
			each.addToAnimator(animator)
		end)
		pRules.forEach(block ADRule each
			animator.addRule(each.buildRule(animator))
		end)
		pBones.forEach(block String each
			animator.addBone(each)
		end)
		pVertexPositionSets.forEach(block String each
			animator.addVertexPositionSet(each)
		end)
		
		animator.setRig(pRig)
		animator.setAnimation(pAnimation)
	end
	
	
	
	public func void debug(Console console)
		var String text = "Animator Definition:"
		var int i, count
		
		if pRig != null
			text = text + " rig=" + pRig.getFilename()
		else
			text = text + " rig=null"
		end
		
		if pAnimation != null
			text = text + " animation=" + pAnimation.getFilename()
		else
			text = text + " animation=null"
		end
		
		count = pBones.getCount()
		for i = 0 to count
			text = text + " bone=" + pBones.getAt(i).toString()
		end
		
		count = pVertexPositionSets.getCount()
		for i = 0 to count
			text = text + " vertPosSet=" + pVertexPositionSets.getAt(i).toString()
		end
		
		console.addMessage(text)
		
		pControllers.forEach(block int index, ADController each
			each.debug(console, index)
		end)
		pLinks.forEach(block int index, ADLink each
			each.debug(console, index)
		end)
		pRules.forEach(block ADRule each
			each.debug(console)
		end)
	end
end
