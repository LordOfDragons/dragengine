/* 
 * Drag[en]gine DragonScript Script Module
 *
 * Copyright (C) 2020, Roland Pl√ºss (roland@rptd.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */


namespace Dragengine.Animators

pin Dragengine.Scenery
pin Dragengine.Utils



/**
 * \brief Definition of an animator link.
 * 
 * Once defined a link can be added to an animator using the stored definition.
 */
class ADLink
	private var ADController pController
	private var int pIndex
	private var CurveBezier pCurve
	private var int pRepeat
	private var String pBone
	private var AnimatorLinkBoneParameter pBoneParameter
	private var float pBoneMinimum
	private var float pBoneMaximum
	
	
	
	/** \brief Create link definition. */
	public func new()
		this.pIndex = 0
		this.pCurve = CurveBezier.newDefaultLinear()
		this.pRepeat = 1
		this.pBone = ""
		this.pBoneParameter = AnimatorLinkBoneParameter.positionZ
		this.pBoneMinimum = 0.0
		this.pBoneMaximum = 1.0
	end
	
	
	
	/** \brief Controller or \em null if not set. */
	public func ADController getController()
		return this.pController
	end
	
	/** \brief Set controller or \em null if not set. */
	public func void setController( ADController controller )
		this.pController = controller
	end
	
	/** \brief Curve. */
	public func CurveBezier getCurve()
		return this.pCurve
	end
	
	/** \brief Set curve. */
	public func void setCurve( CurveBezier curve )
		this.pCurve = curve
	end
	
	/** \brief Repeat count along X axis. */
	public func int getRepeat()
		return this.pRepeat
	end
	
	/** \brief Set repeat along X axis. */
	public func void setRepeat( int repeat )
		this.pRepeat = repeat
	end
	
	/**
	 * \brief Bone to use parameter of as input or empty string to not use.
	 * \version 1.6
	 */
	public func String getBone()
		return this.pBone
	end
	
	/**
	 * \brief Set bone to use parameter of as input or empty string to not use.
	 * \version 1.6
	 */
	public func void setBone( String bone )
		if bone == null
			throw ENullPointer.new( "bone" )
		end
		this.pBone = bone
	end
	
	/**
	 * \brief Bone parameter to use as input.
	 * \version 1.6
	 */
	public func AnimatorLinkBoneParameter getBoneParameter()
		return this.pBoneParameter
	end
	
	/**
	 * \brief Set bone parameter to use as input.
	 * \version 1.6
	 */
	public func void setBoneParameter( AnimatorLinkBoneParameter parameter )
		if parameter == null
			throw ENullPointer.new( "parameter" )
		end
		this.pBoneParameter = parameter
	end
	
	/**
	 * \brief Minimum bone parameter value.
	 * \version 1.6
	 */
	public func float getBoneMinimum()
		return this.pBoneMinimum
	end
	
	/**
	 * \brief Set minimum bone parameter value.
	 * \version 1.6
	 */
	public func void setBoneMinimum( float value )
		this.pBoneMinimum = value
	end
	
	/**
	 * \brief Maximum bone parameter value.
	 * \version 1.6
	 */
	public func float getBoneMaximum()
		return this.pBoneMaximum
	end
	
	/**
	 * \brief Set maximum bone parameter value.
	 * \version 1.6
	 */
	public func void setBoneMaximum( float value )
		this.pBoneMaximum = value
	end
	
	
	
	/** \brief Index of link in animator. */
	public func int getIndex()
		return this.pIndex
	end
	
	
	
	/** \brief Add link to animator using the stored definition. */
	public func void addToAnimator( Animator animator )
		if animator == null
			throw EInvalidParam.new()
		end
		
		if this.pController == null
			this.pIndex = animator.addLink( -1 )
			
		else
			this.pIndex = animator.addLink( this.pController.getIndex() )
		end
		
		animator.setLinkCurve( this.pIndex, this.pCurve )
		animator.setLinkRepeat( this.pIndex, this.pRepeat )
		animator.setLinkBone( this.pIndex, this.pBone )
		animator.setLinkBoneParameter( this.pIndex, this.pBoneParameter )
		
		select this.pBoneParameter
		case AnimatorLinkBoneParameter.rotationX, \
			AnimatorLinkBoneParameter.rotationY, \
			AnimatorLinkBoneParameter.rotationZ
				animator.setLinkBoneValueRangeRotation( this.pIndex, this.pBoneMinimum, this.pBoneMaximum )
			
		else
			animator.setLinkBoneValueRange( this.pIndex, this.pBoneMinimum, this.pBoneMaximum )
		end
	end
	
	
	
	public func void debug( Console console, int index )
		this.pIndex = index
		
		console.addMessage( "- Link " + index + " ( controller=" \
			+ ( this.pController == null if -1 else this.pController.getIndex() ) \
			+ " repeat=" + this.pRepeat \
			+ " bone=" + this.pBone + " boneParam=" + this.pBoneParameter \
			+ " boneMin=" + this.pBoneMinimum + " " + this.pBoneMaximum + ")" )
	end
end
