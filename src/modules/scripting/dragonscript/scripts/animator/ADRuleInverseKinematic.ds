/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */


namespace Dragengine.Animators

pin Dragengine.Scenery
pin Dragengine.Utils



/**
 * \brief Definition of a inverse kinematic animator rule.
 * 
 * Once defined a rule can be added to an animator using the stored definition.
 */
class ADRuleInverseKinematic extends ADRule
	private var Vector pGoalPosition
	private var Vector pGoalOrientation
	private var Vector pLocalPosition
	private var Vector pLocalOrientation
	private var bool pAdjustPosition
	private var bool pAdjustOrientation
	private var String pSolverBone
	private var bool pUseSolverBone
	
	private var float pReachRange
	private var String pReachBone
	private var Vector pReachCenter
	
	
	
	/** \brief Create animation rule definition. */
	public func new()
		pGoalPosition = Vector.new()
		pGoalOrientation = Vector.new()
		pLocalPosition = Vector.new()
		pLocalOrientation = Vector.new()
		pAdjustPosition = true
		pAdjustOrientation = false
		pSolverBone = ""
		pUseSolverBone = false
		pReachRange = 0
		pReachBone = ""
		pReachCenter = Vector.new()
	end
	
	/**
	 * \brief Create copy of animation rule definition.
	 * \version 1.13
	 */
	public func new(AnimatorDefinition fromDef, AnimatorDefinition toDef,\
	ADRuleInverseKinematic rule) super(fromDef, toDef, rule)
		pGoalPosition = rule.pGoalPosition
		pGoalOrientation = rule.pGoalOrientation
		pLocalPosition = rule.pLocalPosition
		pLocalOrientation = rule.pLocalOrientation
		pAdjustPosition = rule.pAdjustPosition
		pAdjustOrientation = rule.pAdjustOrientation
		pSolverBone = rule.pSolverBone
		pUseSolverBone = rule.pUseSolverBone
		pReachRange = rule.pReachRange
		pReachBone = rule.pReachBone
		pReachCenter = rule.pReachCenter
	end
	
	
	
	/** \brief Goal position. */
	public func Vector getGoalPosition()
		return pGoalPosition
	end
	
	/** \brief Set goal position. */
	public func void setGoalPosition(Vector position)
		if position == null
			throw ENullPointer.new("position")
		end
		pGoalPosition = position
	end
		
	/** \brief Goal orientation. */
	public func Vector getGoalOrientation()
		return pGoalOrientation
	end
	
	/** \brief Set goal orientation. */
	public func void setGoalOrientation(Vector orientation)
		if orientation == null
			throw ENullPointer.new("orientation")
		end
		pGoalOrientation = orientation
	end
	
	/** \brief Local position. */
	public func Vector getLocalPosition()
		return pLocalPosition
	end
	
	/** \brief Set local position. */
	public func void setLocalPosition(Vector position)
		if position == null
			throw ENullPointer.new("position")
		end
		pLocalPosition = position
	end
		
	/** \brief Local orientation. */
	public func Vector getLocalOrientation()
		return pLocalOrientation
	end
	
	/** \brief Set local orientation. */
	public func void setLocalOrientation(Vector orientation)
		if orientation == null
			throw ENullPointer.new("orientation")
		end
		pLocalOrientation = orientation
	end
	
	/**
	 * \brief Bone position is adjusted.
	 * \version 1.6
	 */
	public func bool getAdjustPosition()
		return pAdjustPosition
	end
	
	/**
	 * \brief Set if bone position is adjusted.
	 * \version 1.6
	 */
	public func void setAdjustPosition(bool adjust)
		pAdjustPosition = adjust
	end
	
	/** \brief Bone orientation is adjusted. */
	public func bool getAdjustOrientation()
		return pAdjustOrientation
	end
	
	/** \brief Set if bone orientation is adjusted. */
	public func void setAdjustOrientation(bool adjust)
		pAdjustOrientation = adjust
	end
	
	
	
	/** \brief Solver bone name. */
	public func String getSolverBone()
		return pSolverBone
	end
	
	/** \brief Set solver bone name. */
	public func void setSolverBone(String bone)
		if bone == null
			throw EInvalidParam.new()
		end
		
		pSolverBone = bone
	end
	
	/** \brief Solver bone is used. */
	public func bool getUseSolverBone()
		return pUseSolverBone
	end
	
	/** \brief Set if solver bone is used. */
	public func void setUseSolverBone(bool useSolverBone)
		pUseSolverBone = useSolverBone
	end
	
	
	
	/**
	 * \brief Limit reach in meters.
	 * 
	 * 0 disables reach limit.
	 */
	public func float getReachRange()
		return pReachRange
	end
	
	/**
	 * \brief Set limit reach in meters.
	 * 
	 * 0 disables reach limit.
	 */
	public func void setReachRange(float range)
		pReachRange = DEMath.max(range, 0.0)
	end
	
	/** \brief Bone to use as reach origin or an empty string to use a constant position. */
	public func String getReachBone()
		return pReachBone
	end
	
	/** \brief Set bone to use as reach origin or an empty string to use a constant position. */
	public func void setReachBone(String bone)
		if bone == null
			throw ENullPointer.new("bone")
		end
		pReachBone = bone
	end
	
	/** Reach center if no bone is used. */
	public func Vector getReachCenter()
		return pReachCenter
	end
	
	/** Set reach center if no bone is used. */
	public func void setReachCenter(Vector center)
		if center == null
			throw ENullPointer.new("center")
		end
		pReachCenter = center
	end
	
	
	
	/** \brief Build engine animator rule using the stored definition. */
	public func AnimatorRule buildRule(Animator animator)
		var ARInverseKinematic rule = ARInverseKinematic.new()
		
		buildRuleCommon(rule)
		
		forEachTarget(block ADRuleTargetLink each
			rule.targetAddLink(each.getTarget() cast ARInverseKinematicTarget, each.getLink().getIndex())
		end)
		
		rule.setGoalPosition(pGoalPosition)
		rule.setGoalOrientation(pGoalOrientation)
		rule.setLocalPosition(pLocalPosition)
		rule.setLocalOrientation(pLocalOrientation)
		rule.setAdjustPosition(pAdjustPosition)
		rule.setAdjustOrientation(pAdjustOrientation)
		rule.setSolverBone(pSolverBone)
		rule.setUseSolverBone(pUseSolverBone)
		
		rule.setReachRange(pReachRange)
		rule.setReachBone(pReachBone)
		rule.setReachCenter(pReachCenter)
		
		return rule
	end
	
	
	
	/**
	 * \brief Create copy of rule.
	 * \version 1.13
	 */
	public func ADRule copy(AnimatorDefinition fromDef, AnimatorDefinition toDef)
		return new(fromDef, toDef, this)
	end
	
	
	
	public func void debug(Console console)
		console.addMessage(debugCommon("Inverse Kinematic") + \
			" gpos=" + pGoalPosition + " gorient" + pGoalOrientation + " lpos=" + pLocalPosition + \
			" lorient" + pLocalOrientation + " adjpos=" + pAdjustPosition + \
			" adjorient=" + pAdjustOrientation + ")")
	end
end
