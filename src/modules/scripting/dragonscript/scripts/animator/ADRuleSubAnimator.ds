/* 
 * Drag[en]gine DragonScript Script Module
 *
 * Copyright (C) 2020, Roland Pl√ºss (roland@rptd.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */


namespace Dragengine.Animators

pin Dragengine.Scenery
pin Dragengine.Utils



/**
 * \brief Definition of sub animator animator rule.
 * 
 * Once defined a rule can be added to an animator using the stored definition.
 */
class ADRuleSubAnimator extends ADRule
	private var Animator pSubAnimator
	private var Array pConnections
	private var bool pEnablePosition
	private var bool pEnableOrientation
	private var bool pEnableSize
	private var bool pEnableVertexPositionSet
	
	
	
	/** \brief Create animation rule definition. */
	public func new()
		pConnections = Array.new()
		pEnablePosition = true
		pEnableOrientation = true
		pEnableSize = true
		pEnableVertexPositionSet = true
	end
	
	/**
	 * \brief Create copy of animation rule definition.
	 * \version 1.13
	 */
	public func new(AnimatorDefinition fromDef, AnimatorDefinition toDef,\
	ADRuleSubAnimator rule) super(fromDef, toDef, rule)
		pSubAnimator = rule.pSubAnimator
		pConnections = Array.new(rule.pConnections)
		pEnablePosition = rule.pEnablePosition
		pEnableOrientation = rule.pEnableOrientation
		pEnableSize = rule.pEnableSize
		pEnableVertexPositionSet = rule.pEnableVertexPositionSet
	end
	
	
	
	/** \brief Sub animator. */
	public func Animator getSubAnimator()
		return pSubAnimator
	end
	
	/** \brief Set sub animator. */
	public func void setSubAnimator(Animator subAnimator)
		pSubAnimator = subAnimator
	end
	
	/** \brief Count of connections. */
	public func int getConnectionCount()
		return pConnections.getCount()
	end
	
	/** \brief Connection. */
	public func int getConnectionAt(int index)
		return pConnections.getAt(index) cast int
	end
	
	/** \brief Add connection. */
	public func void addConnection(int subAnimatorController, int localController)
		if subAnimatorController < 0
			throw EInvalidParam.new("subAnimatorController < 0")
		end
		if subAnimatorController >= pSubAnimator.getControllerCount()
			throw EInvalidParam.new("subAnimatorController >= controllerCount")
		end
		
		while subAnimatorController >= pConnections.getCount()
			pConnections.add(-1)
		end
		
		pConnections.setAt(subAnimatorController, localController)
	end
	
	/** \brief Add connection. */
	public func void addConnection(String subAnimatorController, int localController)
		if pSubAnimator == null
			return
		end
		
		var int index = pSubAnimator.indexOfControllerNamed(subAnimatorController)
		if index != -1
			addConnection(index, localController)
		end
	end
	
	/** \brief Remove all connections. */
	public func void clearConnections()
		pConnections.removeAll()
	end
	
	
	
	/** \brief Position manipulation is enabled. */
	public func bool getEnablePosition()
		return pEnablePosition
	end
	
	/** \brief Set if position manipulation is enabled. */
	public func void setEnablePosition(bool enable)
		pEnablePosition = enable
	end
	
	/** \brief Orientation manipulation is enabled. */
	public func bool getEnableOrientation()
		return pEnableOrientation
	end
	
	/** \brief Set if orientation manipulation is enabled. */
	public func void setEnableOrientation(bool enable)
		pEnableOrientation = enable
	end
	
	/** \brief Size manipulation is enabled. */
	public func bool getEnableSize()
		return pEnableSize
	end
	
	/** \brief Set if size manipulation is enabled. */
	public func void setEnableSize(bool enable)
		pEnableSize = enable
	end
	
	/**
	 * \brief Vertex position set manipulation is enabled.
	 * \version 1.17
	 */
	public func bool getEnableVertexPositionSet()
		return pEnableVertexPositionSet
	end
	
	/**
	 * \brief Set if vertex position set manipulation is enabled.
	 * \version 1.17
	 */
	public func void setEnableVertexPositionSet(bool enable)
		pEnableVertexPositionSet = enable
	end
	
	
	
	/** \brief Build engine animator rule using the stored definition. */
	public func AnimatorRule buildRule(Animator animator)
		var ARSubAnimator rule = ARSubAnimator.new()
		
		buildRuleCommon(rule)
		
		forEachTarget(block ADRuleTargetLink each
			rule.targetAddLink(each.getTarget() cast ARSubAnimatorTarget, each.getLink().getIndex())
		end)
		
		if pSubAnimator != null
			rule.setSubAnimator(pSubAnimator)
		end
		
		var int connectionCount = pConnections.getCount()
		if connectionCount == 0
			rule.setMatchingConnections(animator)
			
		else
			var int i
			for i = 0 to connectionCount
				rule.setConnectionAt(i, pConnections.getAt(i) cast int)
			end
		end
		
		rule.setEnablePosition(pEnablePosition)
		rule.setEnableOrientation(pEnableOrientation)
		rule.setEnableSize(pEnableSize)
		rule.setEnableVertexPositionSet(pEnableVertexPositionSet)
		
		return rule
	end
	
	
	
	/**
	 * \brief Create copy of rule.
	 * \version 1.13
	 */
	public func ADRule copy(AnimatorDefinition fromDef, AnimatorDefinition toDef)
		return new(fromDef, toDef, this)
	end
	
	
	
	public func void debug(Console console)
		console.addMessage(debugCommon("Sub Animator") + " epos=" + pEnablePosition \
			+ " eorient=" + pEnableOrientation + " esize=" + pEnableSize \
			+ " evps=" + pEnableVertexPositionSet + ")")
	end
end
