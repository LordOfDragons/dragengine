/* 
 * Drag[en]gine DragonScript Script Module
 *
 * Copyright (C) 2020, Roland Pl√ºss (roland@rptd.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */


namespace Dragengine.Animators

pin Dragengine.Scenery
pin Dragengine.Utils



/**
 * \brief Definition of  limit animator rule.
 * 
 * Once defined a rule can be added to an animator using the stored definition.
 */
class ADRuleLimit extends ADRule
	private var Vector pMinimumPosition
	private var Vector pMaximumPosition
	private var Vector pMinimumRotation
	private var Vector pMaximumRotation
	private var Vector pMinimumScaling
	private var Vector pMaximumScaling
	private var float pMinimumVertexPositionSet
	private var float pMaximumVertexPositionSet
	private var ARLimitCFrame pCoordFrame
	private var String pTargetBone
	private var String pTargetVertexPositionSet
	
	private var bool pEnablePosXMin
	private var bool pEnablePosXMax
	private var bool pEnablePosYMin
	private var bool pEnablePosYMax
	private var bool pEnablePosZMin
	private var bool pEnablePosZMax
	
	private var bool pEnableRotXMin
	private var bool pEnableRotXMax
	private var bool pEnableRotYMin
	private var bool pEnableRotYMax
	private var bool pEnableRotZMin
	private var bool pEnableRotZMax
	
	private var bool pEnableScaleXMin
	private var bool pEnableScaleXMax
	private var bool pEnableScaleYMin
	private var bool pEnableScaleYMax
	private var bool pEnableScaleZMin
	private var bool pEnableScaleZMax
	
	private var bool pEnableVertexPositionSetMin
	private var bool pEnableVertexPositionSetMax
	
	
	
	/** \brief Create animation rule definition. */
	public func new()
		pMinimumPosition = Vector.new()
		pMaximumPosition = Vector.new()
		pMinimumRotation = Vector.new()
		pMaximumRotation = Vector.new()
		pMinimumScaling = Vector.new(1, 1, 1)
		pMaximumScaling = Vector.new(1, 1, 1)
		pMinimumVertexPositionSet = 1
		pMaximumVertexPositionSet = 1
		pCoordFrame = ARLimitCFrame.component
		pTargetBone = ""
		pTargetVertexPositionSet = ""
		
		pEnablePosXMin = false
		pEnablePosXMax = false
		pEnablePosYMin = false
		pEnablePosYMax = false
		pEnablePosZMin = false
		pEnablePosZMax = false
		
		pEnableRotXMin = false
		pEnableRotXMax = false
		pEnableRotYMin = false
		pEnableRotYMax = false
		pEnableRotZMin = false
		pEnableRotZMax = false
		
		pEnableScaleXMin = false
		pEnableScaleXMax = false
		pEnableScaleYMin = false
		pEnableScaleYMax = false
		pEnableScaleZMin = false
		pEnableScaleZMax = false
		
		pEnableVertexPositionSetMin = true
		pEnableVertexPositionSetMax = true
	end
	
	/** \brief Create animation rule definition. */
	public func new(AnimatorDefinition fromDef, AnimatorDefinition toDef,\
	ADRuleLimit rule) super(fromDef, toDef, rule)
		pMinimumPosition = rule.pMinimumPosition
		pMaximumPosition = rule.pMaximumPosition
		pMinimumRotation = rule.pMinimumRotation
		pMaximumRotation = rule.pMaximumRotation
		pMinimumScaling = rule.pMinimumScaling
		pMaximumScaling = rule.pMaximumScaling
		pMinimumVertexPositionSet = rule.pMinimumVertexPositionSet
		pMaximumVertexPositionSet = rule.pMaximumVertexPositionSet
		pCoordFrame = rule.pCoordFrame
		pTargetBone = rule.pTargetBone
		pTargetVertexPositionSet = rule.pTargetVertexPositionSet
		
		pEnablePosXMin = rule.pEnablePosXMin
		pEnablePosXMax = rule.pEnablePosXMax
		pEnablePosYMin = rule.pEnablePosYMin
		pEnablePosYMax = rule.pEnablePosYMax
		pEnablePosZMin = rule.pEnablePosZMin
		pEnablePosZMax = rule.pEnablePosZMax
		
		pEnableRotXMin = rule.pEnableRotXMin
		pEnableRotXMax = rule.pEnableRotXMax
		pEnableRotYMin = rule.pEnableRotYMin
		pEnableRotYMax = rule.pEnableRotYMax
		pEnableRotZMin = rule.pEnableRotZMin
		pEnableRotZMax = rule.pEnableRotZMax
		
		pEnableScaleXMin = rule.pEnableScaleXMin
		pEnableScaleXMax = rule.pEnableScaleXMax
		pEnableScaleYMin = rule.pEnableScaleYMin
		pEnableScaleYMax = rule.pEnableScaleYMax
		pEnableScaleZMin = rule.pEnableScaleZMin
		pEnableScaleZMax = rule.pEnableScaleZMax
		
		pEnableVertexPositionSetMin = rule.pEnableVertexPositionSetMin
		pEnableVertexPositionSetMax = rule.pEnableVertexPositionSetMax
	end
	
	
	
	/** \brief Minimum position. */
	public func Vector getMinimumPosition()
		return pMinimumPosition
	end
	
	/** \brief Set minimum position. */
	public func void setMinimumPosition(Vector position)
		if position == null
			throw ENullPointer.new("position")
		end
		pMinimumPosition = position
	end
	
	/** \brief Maximum position. */
	public func Vector getMaximumPosition()
		return pMaximumPosition
	end
	
	/** \brief Set maximum position. */
	public func void setMaximumPosition(Vector position)
		if position == null
			throw ENullPointer.new("position")
		end
		pMaximumPosition = position
	end
	
	/** \brief Minimum rotation. */
	public func Vector getMinimumRotation()
		return pMinimumRotation
	end
	
	/** \brief Set minimum rotation. */
	public func void setMinimumRotation(Vector rotation)
		if rotation == null
			throw ENullPointer.new("rotation")
		end
		pMinimumRotation = rotation
	end
	
	/** \brief Maximum rotation. */
	public func Vector getMaximumRotation()
		return pMaximumRotation
	end
	
	/** \brief Set maximum rotation. */
	public func void setMaximumRotation(Vector rotation)
		if rotation == null
			throw ENullPointer.new("rotation")
		end
		pMaximumRotation = rotation
	end
	
	/** \brief Minimum scaling. */
	public func Vector getMinimumScaling()
		return pMinimumScaling
	end
	
	/** \brief Set minimum scaling. */
	public func void setMinimumScaling(Vector scaling)
		if scaling == null
			throw ENullPointer.new("scaling")
		end
		pMinimumScaling = scaling
	end
	
	/** \brief Maximum scaling. */
	public func Vector getMaximumScaling()
		return pMaximumScaling
	end
	
	/** \brief Set maximum scaling. */
	public func void setMaximumScaling(Vector scaling)
		if scaling == null
			throw ENullPointer.new("scaling")
		end
		pMaximumScaling = scaling
	end
	
	/**
	 * \brief Minimum vertex position set weight.
	 * \version 1.17
	 */
	public func float getMinimumVertexPositionSet()
		return pMinimumVertexPositionSet
	end
	
	/**
	 * \brief Set minimum vertex position set.
	 * \version 1.17
	 */
	public func void setMinimumVertexPositionSet(float weight)
		pMinimumVertexPositionSet = weight
	end
	
	/**
	 * \brief Maximum vertex position set.
	 * \version 1.17
	 */
	public func float getMaximumVertexPositionSet()
		return pMaximumVertexPositionSet
	end
	
	/**
	 * \brief Set maximum scaling.
	 * \version 1.17
	 */
	public func void setMaximumVertexPositionSet(float weight)
		pMaximumVertexPositionSet = weight
	end
	
	/** \brief Coordinate frame of rotation. */
	public func ARLimitCFrame getCoordinateFrame()
		return pCoordFrame
	end
	
	/** \brief Set if coordinate frame of rotation. */
	public func void setCoordinateFrame(ARLimitCFrame coordFrame)
		pCoordFrame = coordFrame
	end
	
	/** \brief Target bone name. */
	public func String getTargetBone()
		return pTargetBone
	end
	
	/** \brief Set target bone name. */
	public func void setTargetBone(String name)
		if name == null
			throw ENullPointer.new("name")
		end
		pTargetBone = name
	end
	
	/**
	 * \brief Target vertex position set name.
	 * \version 1.17
	 */
	public func String getTargetVertexPositionSet()
		return pTargetVertexPositionSet
	end
	
	/**
	 * \brief Set target vertex position set name.
	 * \version 1.17
	 */
	public func void setTargetVertexPositionSet(String name)
		if name == null
			throw ENullPointer.new("name")
		end
		pTargetVertexPositionSet = name
	end
	
	
	
	/** \brief X position is limited to the minimum. */
	public func bool getEnablePosXMin()
		return pEnablePosXMin
	end
	
	/** \brief Set if x position is limited to the minimum. */
	public func void setEnablePosXMin(bool enable)
		pEnablePosXMin = enable
	end
	
	/** \brief X position is limited to the maximum. */
	public func bool getEnablePosXMax()
		return pEnablePosXMax
	end
	
	/** \brief Set if x position is limited to the maximum. */
	public func void setEnablePosXMax(bool enable)
		pEnablePosXMax = enable
	end
	
	/** \brief Y position is limited to the minimum. */
	public func bool getEnablePosYMin()
		return pEnablePosYMin
	end
	
	/** \brief Set if y position is limited to the minimum. */
	public func void setEnablePosYMin(bool enable)
		pEnablePosYMin = enable
	end
	
	/** \brief Y position is limited to the mayimum. */
	public func bool getEnablePosYMax()
		return pEnablePosYMax
	end
	
	/** \brief Set if y position is limited to the mayimum. */
	public func void setEnablePosYMax(bool enable)
		pEnablePosYMax = enable
	end
	
	/** \brief Z position is limited to the minimum. */
	public func bool getEnablePosZMin()
		return pEnablePosZMin
	end
	
	/** \brief Set if z position is limited to the minimum. */
	public func void setEnablePosZMin(bool enable)
		pEnablePosZMin = enable
	end
	
	/** \brief Z position is limited to the mazimum. */
	public func bool getEnablePosZMax()
		return pEnablePosZMax
	end
	
	/** \brief Set if z position is limited to the mazimum. */
	public func void setEnablePosZMax(bool enable)
		pEnablePosZMax = enable
	end
	
	
	
	/** \brief X rotation is limited to the minimum. */
	public func bool getEnableRotXMin()
		return pEnableRotXMin
	end
	
	/** \brief Set if x rotation is limited to the minimum. */
	public func void setEnableRotXMin(bool enable)
		pEnableRotXMin = enable
	end
	
	/** \brief X rotation is limited to the maximum. */
	public func bool getEnableRotXMax()
		return pEnableRotXMax
	end
	
	/** \brief Set if x rotation is limited to the maximum. */
	public func void setEnableRotXMax(bool enable)
		pEnableRotXMax = enable
	end
	
	/** \brief Y rotation is limited to the minimum. */
	public func bool getEnableRotYMin()
		return pEnableRotYMin
	end
	
	/** \brief Set if y rotation is limited to the minimum. */
	public func void setEnableRotYMin(bool enable)
		pEnableRotYMin = enable
	end
	
	/** \brief Y rotation is limited to the mayimum. */
	public func bool getEnableRotYMax()
		return pEnableRotYMax
	end
	
	/** \brief Set if y rotation is limited to the mayimum. */
	public func void setEnableRotYMax(bool enable)
		pEnableRotYMax = enable
	end
	
	/** \brief Z rotation is limited to the minimum. */
	public func bool getEnableRotZMin()
		return pEnableRotZMin
	end
	
	/** \brief Set if z rotation is limited to the minimum. */
	public func void setEnableRotZMin(bool enable)
		pEnableRotZMin = enable
	end
	
	/** \brief Z rotation is limited to the mazimum. */
	public func bool getEnableRotZMax()
		return pEnableRotZMax
	end
	
	/** \brief Set if z rotation is limited to the mazimum. */
	public func void setEnableRotZMax(bool enable)
		pEnableRotZMax = enable
	end
	
	
	
	/** \brief X scaling is limited to the minimum. */
	public func bool getEnableScaleXMin()
		return pEnableScaleXMin
	end
	
	/** \brief Set if x scaling is limited to the minimum. */
	public func void setEnableScaleXMin(bool enable)
		pEnableScaleXMin = enable
	end
	
	/** \brief X scaling is limited to the maximum. */
	public func bool getEnableScaleXMax()
		return pEnableScaleXMax
	end
	
	/** \brief Set if x scaling is limited to the maximum. */
	public func void setEnableScaleXMax(bool enable)
		pEnableScaleXMax = enable
	end
	
	/** \brief Y scaling is limited to the minimum. */
	public func bool getEnableScaleYMin()
		return pEnableScaleYMin
	end
	
	/** \brief Set if y scaling is limited to the minimum. */
	public func void setEnableScaleYMin(bool enable)
		pEnableScaleYMin = enable
	end
	
	/** \brief Y scaling is limited to the mayimum. */
	public func bool getEnableScaleYMax()
		return pEnableScaleYMax
	end
	
	/** \brief Set if y scaling is limited to the mayimum. */
	public func void setEnableScaleYMax(bool enable)
		pEnableScaleYMax = enable
	end
	
	/** \brief Z scaling is limited to the minimum. */
	public func bool getEnableScaleZMin()
		return pEnableScaleZMin
	end
	
	/** \brief Set if z scaling is limited to the minimum. */
	public func void setEnableScaleZMin(bool enable)
		pEnableScaleZMin = enable
	end
	
	/** \brief Z scaling is limited to the mazimum. */
	public func bool getEnableScaleZMax()
		return pEnableScaleZMax
	end
	
	/** \brief Set if z scaling is limited to the mazimum. */
	public func void setEnableScaleZMax(bool enable)
		pEnableScaleZMax = enable
	end
	
	
	
	/**
	 * \brief Minimum vertex position set manipulation is enabled.
	 * \version 1.17
	 */
	public func bool getEnableVertexPositionSetMin()
		return pEnableVertexPositionSetMin
	end
	
	/**
	 * \brief Set if minimum vertex position set manipulation is enabled.
	 * \version 1.17
	 */
	public func void setEnableVertexPositionSetMin(bool enable)
		pEnableVertexPositionSetMin = enable
	end
	
	/**
	 * \brief Maximum vertex position set manipulation is enabled.
	 * \version 1.17
	 */
	public func bool getEnableVertexPositionSetMax()
		return pEnableVertexPositionSetMax
	end
	
	/**
	 * \brief Set if maximum vertex position set manipulation is enabled.
	 * \version 1.17
	 */
	public func void setEnableVertexPositionSetMax(bool enable)
		pEnableVertexPositionSetMax = enable
	end
	
	
	
	/** \brief Build engine animator rule using the stored definition. */
	public func AnimatorRule buildRule(Animator animator)
		var ARLimit rule = ARLimit.new()
		
		buildRuleCommon(rule)
		
		forEachTarget(block ADRuleTargetLink each
			rule.targetAddLink(each.getTarget() cast ARLimitTarget, each.getLink().getIndex())
		end)
		
		rule.setMinimumPosition(pMinimumPosition)
		rule.setMaximumPosition(pMaximumPosition)
		rule.setMinimumRotation(pMinimumRotation)
		rule.setMaximumRotation(pMaximumRotation)
		rule.setMinimumScaling(pMinimumScaling)
		rule.setMaximumScaling(pMaximumScaling)
		rule.setMinimumVertexPositionSet(pMinimumVertexPositionSet)
		rule.setMaximumVertexPositionSet(pMaximumVertexPositionSet)
		rule.setCoordinateFrame(pCoordFrame)
		rule.setTargetBone(pTargetBone)
		rule.setTargetVertexPositionSet(pTargetVertexPositionSet)
		rule.setEnablePosMin(pEnablePosXMin, pEnablePosYMin, pEnablePosZMin)
		rule.setEnablePosMax(pEnablePosXMax, pEnablePosYMax, pEnablePosZMax)
		rule.setEnableRotMin(pEnableRotXMin, pEnableRotYMin, pEnableRotZMin)
		rule.setEnableRotMax(pEnableRotXMax, pEnableRotYMax, pEnableRotZMax)
		rule.setEnableScaleMin(pEnableScaleXMin, pEnableScaleYMin, pEnableScaleZMin)
		rule.setEnableScaleMax(pEnableScaleXMax, pEnableScaleYMax, pEnableScaleZMax)
		rule.setEnableVertexPositionSetMin(pEnableVertexPositionSetMin)
		rule.setEnableVertexPositionSetMax(pEnableVertexPositionSetMax)
		
		return rule
	end
	
	
	
	/**
	 * \brief Create copy of rule.
	 * \version 1.13
	 */
	public func ADRule copy(AnimatorDefinition fromDef, AnimatorDefinition toDef)
		return new(fromDef, toDef, this)
	end
	
	
	
	public func void debug(Console console)
		console.addMessage(debugCommon("Limit") + \
			" minPos=" + pMinimumPosition + " maxPos=" + pMaximumPosition + \
			" minRot=" + pMinimumRotation + " maxRot=" + pMaximumRotation + \
			" minScale=" + pMinimumScaling + " maxScale=" + pMaximumScaling + \
			" minVPS=" + pMinimumVertexPositionSet + " maxVPS=" + pMaximumVertexPositionSet + \
			" enMinXPos=" + pEnablePosXMin + " enMaxXPos=" + pEnablePosXMax + \
			" enMinYPos=" + pEnablePosYMin + " enMaxYPos=" + pEnablePosYMax + \
			" enMinZPos=" + pEnablePosZMin + " enMaxZPos=" + pEnablePosZMax + \
			" enMinXRot=" + pEnableRotXMin + " enMaxXRot=" + pEnableRotXMax + \
			" enMinYRot=" + pEnableRotYMin + " enMaxYRot=" + pEnableRotYMax + \
			" enMinZRot=" + pEnableRotZMin + " enMaxZRot=" + pEnableRotZMax + \
			" enMinXScale=" + pEnableScaleXMin + " enMaxXScale=" + pEnableScaleXMax + \
			" enMinYScale=" + pEnableScaleYMin + " enMaxYScale=" + pEnableScaleYMax + \
			" enMinZScale=" + pEnableScaleZMin + " enMaxZScale=" + pEnableScaleZMax + \
			" evpsMin=" + pEnableVertexPositionSetMin  + " evpsMax=" + pEnableVertexPositionSetMax + ")")
	end
end
