/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */


namespace Dragengine.Animators

pin Dragengine.Scenery
pin Dragengine.Utils



/**
 * \brief Definition of track to animator rule.
 * 
 * Once defined a rule can be added to an animator using the stored definition.
 */
class ADRuleTrackTo extends ADRule
	private var String pTrackBone
	private var ARTrackToAxis pTrackAxis
	private var ARTrackToAxis pUpAxis
	private var ARTrackToUp pUpTarget
	private var ARTrackToLocked pLockedAxis
	
	
	
	/** \brief Create animation rule definition. */
	public func new()
		pTrackBone = ""
		pTrackAxis = ARTrackToAxis.posZ
		pUpAxis = ARTrackToAxis.posY
		pUpTarget = ARTrackToUp.componentY
		pLockedAxis = ARTrackToLocked.none
	end
	
	/**
	 * \brief Create copy of animation rule definition.
	 * \version 1.13
	 */
	public func new(AnimatorDefinition fromDef, AnimatorDefinition toDef,\
	ADRuleTrackTo rule) super(fromDef, toDef, rule)
		pTrackBone = rule.pTrackBone
		pTrackAxis = rule.pTrackAxis
		pUpAxis = rule.pUpAxis
		pUpTarget = rule.pUpTarget
		pLockedAxis = rule.pLockedAxis
	end
	
	
	
	/** \brief Name of track bone or empty string to use none. */
	public func String getTrackBone()
		return pTrackBone
	end
	
	/** \brief Set name of track bone or empty string to use none. */
	public func void setTrackBone(String boneName)
		if boneName == null
			throw ENullPointer.new("boneName")
		end
		pTrackBone = boneName
	end
	
	/** \brief Ttrack axis. */
	public func ARTrackToAxis getTrackAxis()
		return pTrackAxis
	end
	
	/** \brief Set track axis. */
	public func void setTrackAxis(ARTrackToAxis axis)
		pTrackAxis = axis
	end
	
	/** \brief Up axis. */
	public func ARTrackToAxis getUpAxis()
		return pUpAxis
	end
	
	/** \brief Set up axis. */
	public func void setUpAxis(ARTrackToAxis axis)
		pUpAxis = axis
	end
	
	/** \brief Up target. */
	public func ARTrackToUp getUpTarget()
		return pUpTarget
	end
	
	/** \brief Set up target. */
	public func void setUpTarget(ARTrackToUp target)
		pUpTarget = target
	end
	
	/** \brief Locked axis. */
	public func ARTrackToLocked getLockedAxis()
		return pLockedAxis
	end
	
	/** \brief Set locked axis. */
	public func void setLockedAxis(ARTrackToLocked axis)
		pLockedAxis = axis
	end
	
	
	
	/** \brief Build engine animator rule using the stored definition. */
	public func AnimatorRule buildRule(Animator animator)
		var ARTrackTo rule = ARTrackTo.new()
		
		buildRuleCommon(rule)
		
		forEachTarget(block ADRuleTargetLink each
			rule.targetAddLink(each.getTarget() cast ARTrackToTarget, each.getLink().getIndex())
		end)
		
		rule.setTrackBone(pTrackBone)
		rule.setTrackAxis(pTrackAxis)
		rule.setUpAxis(pUpAxis)
		rule.setUpTarget(pUpTarget)
		rule.setLockedAxis(pLockedAxis)
		
		return rule
	end
	
	
	
	/**
	 * \brief Create copy of rule.
	 * \version 1.13
	 */
	public func ADRule copy(AnimatorDefinition fromDef, AnimatorDefinition toDef)
		return new(fromDef, toDef, this)
	end
	
	
	
	public func void debug(Console console)
		console.addMessage(debugCommon("Track To") + \
			" trackBone=" + pTrackBone + \
			" trackAxis=" + pTrackAxis + \
			" upAxis=" + pUpAxis + \
			" upTarget=" + pUpTarget + \
			" lockedAxis=" + pLockedAxis + ")")
	end
end
