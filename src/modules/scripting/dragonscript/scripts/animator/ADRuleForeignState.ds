/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */


namespace Dragengine.Animators

pin Dragengine.Scenery
pin Dragengine.Utils



/**
 * \brief Definition of foreign state animator rule.
 * 
 * Once defined a rule can be added to an animator using the stored definition.
 */
class ADRuleForeignState extends ADRule
	private var float pScalePos
	private var float pScaleOrient
	private var float pScaleSize
	private var float pScaleVertexPositionSet
	private var String pForeignBone
	private var String pForeignVertexPositionSet
	private var ARForeignStateCFrame pSrcCoordFrame
	private var ARForeignStateCFrame pDestCoordFrame
	private var bool pModifyX
	private var bool pModifyY
	private var bool pModifyZ
	private var bool pEnablePosition
	private var bool pEnableOrientation
	private var bool pEnableSize
	private var bool pEnableVertexPositionSet
	
	
	
	/** \brief Create animation rule definition. */
	public func new()
		pScalePos = 1
		pScaleOrient = 1
		pScaleSize = 1
		pScaleVertexPositionSet = 1
		pForeignBone = "bone"
		pForeignVertexPositionSet = ""
		pSrcCoordFrame = ARForeignStateCFrame.local
		pDestCoordFrame = ARForeignStateCFrame.local
		pModifyX = true
		pModifyY = true
		pModifyZ = true
		pEnablePosition = true
		pEnableOrientation = true
		pEnableSize = false
		pEnableVertexPositionSet = true
	end
	
	/**
	 * \brief Create copy of animation rule definition.
	 * \version 1.13
	 */
	public func new(AnimatorDefinition fromDef, AnimatorDefinition toDef,\
	ADRuleForeignState rule) super(fromDef, toDef, rule)
		pScalePos = rule.pScalePos
		pScaleOrient = rule.pScaleOrient
		pScaleSize = rule.pScaleSize
		pScaleVertexPositionSet = rule.pScaleVertexPositionSet
		pForeignBone = rule.pForeignBone
		pForeignVertexPositionSet = rule.pForeignVertexPositionSet
		pSrcCoordFrame = rule.pSrcCoordFrame
		pDestCoordFrame = rule.pDestCoordFrame
		pModifyX = rule.pModifyX
		pModifyY = rule.pModifyY
		pModifyZ = rule.pModifyZ
		pEnablePosition = rule.pEnablePosition
		pEnableOrientation = rule.pEnableOrientation
		pEnableSize = rule.pEnableSize
		pEnableVertexPositionSet = rule.pEnableVertexPositionSet
	end
	
	
	
	/** \brief Pposition scale factor. */
	public func float getScalePosition()
		return pScalePos
	end
	
	/** \brief Set position scale factor. */
	public func void setScalePosition(float scaleFactor)
		pScalePos = scaleFactor
	end
	
	/** \brief Orientation scale factor. */
	public func float getScaleOrientation()
		return pScaleOrient
	end
	
	/** \brief Set orientation scale factor. */
	public func void setScaleOrientation(float scaleFactor)
		pScaleOrient = scaleFactor
	end
	
	/** \brief Size scale factor. */
	public func float getScaleSize()
		return pScaleSize
	end
	
	/** \brief Set size scale factor. */
	public func void setScaleSize(float scaleFactor)
		pScaleSize = scaleFactor
	end
	
	/**
	 * \brief Vertex position set scale factor.
	 * \version 1.17
	 */
	public func float getScaleVertexPositionSet()
		return pScaleVertexPositionSet
	end
	
	/**
	 * \brief Set vertex position set scale factor.
	 * \version 1.17
	 */
	public func void setScaleVertexPositionSet(float scale)
		pScaleVertexPositionSet = scale
	end
	
	/** \brief Foreign bone name. */
	public func String getForeignBone()
		return pForeignBone
	end
	
	/** \brief Set foreign bone name. */
	public func void setForeignBone(String bone)
		if bone == null
			throw ENullPointer.new("bone")
		end
		pForeignBone = bone
	end
	
	/**
	 * \brief Foreign vertex position set name.
	 * \version 1.17
	 */
	public func String getForeignVertexPositionSet()
		return pForeignVertexPositionSet
	end
	
	/**
	 * \brief Set foreign vertex position set name.
	 * \version 1.17
	 */
	public func void setForeignVertexPositionSet(String vertexPositionSet)
		if vertexPositionSet == null
			throw ENullPointer.new("vertexPositionSet")
		end
		pForeignVertexPositionSet = vertexPositionSet
	end
	
	/** \brief Source coordinate frame. */
	public func ARForeignStateCFrame getSourceCoordinateFrame()
		return pSrcCoordFrame
	end
	
	/** \brief Set if source coordinate frame. */
	public func void setSourceCoordinateFrame(ARForeignStateCFrame coordFrame)
		pSrcCoordFrame = coordFrame
	end
	
	/** \brief Destination coordinate frame. */
	public func ARForeignStateCFrame getDestinationCoordinateFrame()
		return pDestCoordFrame
	end
	
	/** \brief Set if destination coordinate frame. */
	public func void setDestinationCoordinateFrame(ARForeignStateCFrame coordFrame)
		pDestCoordFrame = coordFrame
	end
	
	/**
	 * \brief X component is modified.
	 * \version 1.6
	 */
	public func bool getModifyX()
		return pModifyX
	end
	
	/**
	 * \brief Set if X component is modified.
	 * \version 1.6
	 */
	public func void setModifyX(bool modify)
		pModifyX = modify
	end
	
	/**
	 * \brief Y component is modified.
	 * \version 1.6
	 */
	public func bool getModifyY()
		return pModifyY
	end
	
	/**
	 * \brief Set if Y component is modified.
	 * \version 1.6
	 */
	public func void setModifyY(bool modify)
		pModifyY = modify
	end
	
	/**
	 * \brief Z component is modified.
	 * \version 1.6
	 */
	public func bool getModifyZ()
		return pModifyZ
	end
	
	/**
	 * \brief Set if z component is modified.
	 * \version 1.6
	 */
	public func void setModifyZ(bool modify)
		pModifyZ = modify
	end
	
	/** \brief Position manipulation is enabled. */
	public func bool getEnablePosition()
		return pEnablePosition
	end
	
	/** \brief Set if position manipulation is enabled. */
	public func void setEnablePosition(bool enable)
		pEnablePosition = enable
	end
	
	/** \brief Orientation manipulation is enabled. */
	public func bool getEnableOrientation()
		return pEnableOrientation
	end
	
	/** \brief Set if orientation manipulation is enabled. */
	public func void setEnableOrientation(bool enable)
		pEnableOrientation = enable
	end
	
	/** \brief Size manipulation is enabled. */
	public func bool getEnableSize()
		return pEnableSize
	end
	
	/** \brief Set if size manipulation is enabled. */
	public func void setEnableSize(bool enable)
		pEnableSize = enable
	end
	
	/**
	 * \brief Vertex position set manipulation is enabled.
	 * \version 1.17
	 */
	public func bool getEnableVertexPositionSet()
		return pEnableVertexPositionSet
	end
	
	/**
	 * \brief Set if vertex position set manipulation is enabled.
	 * \version 1.17
	 */
	public func void setEnableVertexPositionSet(bool enable)
		pEnableVertexPositionSet = enable
	end
	
	
	
	/** \brief Build engine animator rule using the stored definition. */
	public func AnimatorRule buildRule(Animator animator)
		var ARForeignState rule = ARForeignState.new()
		
		buildRuleCommon(rule)
		
		forEachTarget(block ADRuleTargetLink each
			rule.targetAddLink(each.getTarget() cast ARForeignStateTarget, each.getLink().getIndex())
		end)
		
		rule.setScalePosition(pScalePos)
		rule.setScaleOrientation(pScaleOrient)
		rule.setScaleSize(pScaleSize)
		rule.setScaleVertexPositionSet(pScaleVertexPositionSet)
		rule.setForeignBone(pForeignBone)
		rule.setForeignVertexPositionSet(pForeignVertexPositionSet)
		rule.setSourceCoordinateFrame(pSrcCoordFrame)
		rule.setDestinationCoordinateFrame(pDestCoordFrame)
		rule.setModifyX(pModifyX)
		rule.setModifyY(pModifyY)
		rule.setModifyZ(pModifyZ)
		rule.setEnablePosition(pEnablePosition)
		rule.setEnableOrientation(pEnableOrientation)
		rule.setEnableSize(pEnableSize)
		rule.setEnableVertexPositionSet(pEnableVertexPositionSet)
		
		return rule
	end
	
	
	
	/**
	 * \brief Create copy of rule.
	 * \version 1.13
	 */
	public func ADRule copy(AnimatorDefinition fromDef, AnimatorDefinition toDef)
		return new(fromDef, toDef, this)
	end
	
	
	
	public func void debug(Console console)
		console.addMessage(debugCommon("Foreign State") + \
			" spos=" + pScalePos + \
			" sorient=" + pScaleOrient + \
			" ssize=" + pScaleSize + \
			" svps=" + pScaleVertexPositionSet + \
			" modx=" + pModifyX + \
			" mody=" + pModifyY + \
			" modz=" + pModifyZ + \
			" epos=" + pEnablePosition + \
			" eorient=" + pEnableOrientation + \
			" esize=" + pEnableSize + \
			" evps=" + pEnableVertexPositionSet + ")")
	end
end
