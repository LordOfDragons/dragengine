/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */


namespace Dragengine.Animators

pin Dragengine.Scenery
pin Dragengine.Utils



/**
 * \brief Definition of group animator rule.
 * 
 * Once defined a rule can be added to an animator using the stored definition.
 */
class ADRuleGroup extends ADRule
	private var ARGroupApplication pApplicationType
	private var bool pUseCurrentState
	private var Array pRules
	private var bool pEnablePosition
	private var bool pEnableOrientation
	private var bool pEnableSize
	private var bool pEnableVertexPositionSet
	
	
	
	/** \brief Create animation rule definition. */
	public func new()
		pApplicationType = ARGroupApplication.all
		pUseCurrentState = false
		pRules = Array.new()
		pEnablePosition = true
		pEnableOrientation = true
		pEnableSize = true
		pEnableVertexPositionSet = true
	end
	
	/**
	 * \brief Create copy animation rule definition.
	 * \version 1.13
	 */
	public func new(AnimatorDefinition fromDef, AnimatorDefinition toDef,\
	ADRuleGroup rule) super(fromDef, toDef, rule)
		pApplicationType = rule.pApplicationType
		pUseCurrentState = rule.pUseCurrentState
		pEnablePosition = rule.pEnablePosition
		pEnableOrientation = rule.pEnableOrientation
		pEnableSize = rule.pEnableSize
		pEnableVertexPositionSet = rule.pEnableVertexPositionSet
		
		pRules = rule.pRules.map(block ADRule rule
			return rule.copy(fromDef, toDef)
		end)
	end
	
	
	
	/** \brief Application type. */
	public func ARGroupApplication getApplicationType()
		return pApplicationType
	end
	
	/** \brief Set application type. */
	public func void setApplicationType(ARGroupApplication applicationType)
		pApplicationType = applicationType
	end
	
	/** \brief Use current animation state instead of empty state. */
	public func bool getUseCurrentState()
		return pUseCurrentState
	end
	
	/** \brief Set if current animation state is used instead of empty state. */
	public func void setUseCurrentState(bool useCurrentState)
		pUseCurrentState = useCurrentState
	end
	
	/** \brief Pposition manipulation is enabled. */
	public func bool getEnablePosition()
		return pEnablePosition
	end
	
	/** \brief Set if position manipulation is enabled. */
	public func void setEnablePosition(bool enable)
		pEnablePosition = enable
	end
	
	/** \brief Orientation manipulation is enabled. */
	public func bool getEnableOrientation()
		return pEnableOrientation
	end
	
	/** \brief Set if orientation manipulation is enabled. */
	public func void setEnableOrientation(bool enable)
		pEnableOrientation = enable
	end
	
	/** \brief Size manipulation is enabled. */
	public func bool getEnableSize()
		return pEnableSize
	end
	
	/** \brief Set if size manipulation is enabled. */
	public func void setEnableSize(bool enable)
		pEnableSize = enable
	end
	
	/**
	 * \brief Vertex position set manipulation is enabled.
	 * \version 1.17
	 */
	public func bool getEnableVertexPositionSet()
		return pEnableVertexPositionSet
	end
	
	/**
	 * \brief Set if vertex position set manipulation is enabled.
	 * \version 1.17
	 */
	public func void setEnableVertexPositionSet(bool enable)
		pEnableVertexPositionSet = enable
	end
	
	
	
	/** \brief Count of rules. */
	public func int getRuleCount()
		return pRules.getCount()
	end
	
	/** \brief Rule at index. */
	public func ADRule getRuleAt(int index)
		return pRules.getAt(index) cast ADRule
	end
	
	/** \brief Add rule. */
	public func void addRule(ADRule rule)
		if rule == null or pRules.has(rule)
			throw ENullPointer.new("rule")
		end
		pRules.add(rule)
	end
	
	/** \brief Remove rule. */
	public func void removeRule(ADRule rule)
		pRules.remove(rule)
	end
	
	/** \brief Remove all rules. */
	public func void removeAllRules()
		pRules.removeAll()
	end
	
	/** \brief Visit rules using block. */
	public func void forEachRule(Block ablock)
		pRules.forEach(ablock)
	end
	
	
	
	/** \brief Build engine animator rule using the stored definition. */
	public func AnimatorRule buildRule(Animator animator)
		var ARGroup rule = ARGroup.new()
		
		buildRuleCommon(rule)
		
		forEachTarget(block ADRuleTargetLink each
			rule.targetAddLink(each.getTarget() cast ARGroupTarget, each.getLink().getIndex())
		end)
		
		rule.setEnablePosition(pEnablePosition)
		rule.setEnableOrientation(pEnableOrientation)
		rule.setEnableSize(pEnableSize)
		rule.setEnableVertexPositionSet(pEnableVertexPositionSet)
		
		rule.setApplicationType(pApplicationType)
		rule.setUseCurrentState(pUseCurrentState)
		pRules.forEach(block ADRule each
			rule.addRule(each.buildRule(animator))
		end)
		
		return rule
	end
	
	
	
	/**
	 * \brief Create copy of rule.
	 * \version 1.13
	 */
	public func ADRule copy(AnimatorDefinition fromDef, AnimatorDefinition toDef)
		return new(fromDef, toDef, this)
	end
	
	
	
	public func void debug(Console console)
		console.addMessage(debugCommon("Group") + \
			" applicationType=" + pApplicationType + \
			" useCurrentState=" + pUseCurrentState + \
			" rules=" + pRules.getCount() + ")")
		pRules.forEach(block ADRule each
			each.debug(console)
		end)
	end
end
