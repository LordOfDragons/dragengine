/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */


namespace Dragengine.Animators

pin Dragengine.Scenery
pin Dragengine.Utils



/**
 * \brief Definition of animator controller.
 * 
 * Once defined a controller can be added to an animator using the stored definition.
 */
class ADController
	var String pName
	var bool pFrozen
	var bool pClamp
	var float pMinimum
	var float pMaximum
	var float pValue
	var Vector pVector
	var int pIndex
	
	
	
	/** \brief Create animation controller definition. */
	func new()
		pName = ""
		pClamp = true
		pMaximum = 1
		pVector = Vector.new()
	end
	
	/**
	 * \brief Create copy of animation controller definition.
	 * \version 1.13
	 */
	func new(ADController controller)
		if controller == null
			throw ENullPointer.new("controller")
		end
		
		pName = controller.pName
		pFrozen = controller.pFrozen
		pClamp = controller.pClamp
		pMinimum = controller.pMinimum
		pMaximum = controller.pMaximum
		pVector = controller.pVector
		pValue = controller.pValue
		pIndex = 0
	end
	
	
	
	/** \brief Name. */
	func String getName()
		return pName
	end
	
	/** \brief Set name. */
	func void setName(String name)
		pName = name
	end
	
	/** \brief Controller is frozen. */
	func bool getFrozen()
		return pFrozen
	end
	
	/** \brief Set if controller is frozen. */
	func void setFrozen(bool frozen)
		pFrozen = frozen
	end
	
	/** \brief Controller value is clamped. */
	func bool getClamp()
		return pClamp
	end
	
	/** \brief Set if controller value is clamped. */
	func void setClamp(bool clamp)
		pClamp = clamp
	end
	
	/** \brief Minimum value. */
	func float getMinimum()
		return pMinimum
	end
	
	/** \brief Set minimum value. */
	func void setMinimum(float minimum)
		pMinimum = minimum
	end
	
	/** \brief Maximum value. */
	func float getMaximum()
		return pMaximum
	end
	
	/** \brief Set maximum value. */
	func void setMaximum(float maximum)
		pMaximum = maximum
	end
	
	/**
	 * \brief Value.
	 * \version 1.21
	 */
	func float getValue()
		return pValue
	end
	
	/**
	 * \brief Set value.
	 * \version 1.21
	 */
	func void setValue(float value)
		pValue = value
	end
	
	/** \brief Vector value. */
	func Vector getVector()
		return pVector
	end
	
	/** \brief Set vector value. */
	func void setVector(Vector vector)
		pVector = vector
	end
	
	
	
	/** \brief Index of controller in animator. */
	func int getIndex()
		return pIndex
	end
	
	
	
	/** \brief Add controller to animator using stored definition. */
	func void addToAnimator(Animator animator, int index)
		if animator == null
			throw ENullPointer.new("animator")
		end
		
		pIndex = index
		
		var AnimatorController controller = animator.getControllerAt(index)
		controller.setName(pName)
		controller.setClamp(pClamp)
		controller.setRange(pMinimum, pMaximum)
		controller.setValue(pValue)
		controller.setVector(pVector)
		controller.setFrozen(pFrozen)
	end
	
	
	
	func void debug(Console console, int index)
		var Array v = Array.new()
		v.add(pName)
		v.add(index)
		v.add(pFrozen)
		v.add(pClamp)
		v.add(pMinimum)
		v.add(pMaximum)
		v.add(pValue)
		v.add(pVector)
		console.addMessage("- Controller '{}' {} (frozen={} clamp={} min={} max={} value={} vector={}".format(v))
	end
end
