/*
 * MIT License
 *
 * Copyright (C) 2024, DragonDreams GmbH (info@dragondreams.ch)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */


namespace Dragengine.Animators

pin Dragengine.Scenery
pin Dragengine.Utils



/**
 * \brief Definition of state manipulator animator rule.
 * 
 * Once defined a rule can be added to an animator using the stored definition.
 */
class ADRuleStateManipulator extends ADRule
	private var Vector pMinPos
	private var Vector pMaxPos
	private var Vector pMinRot
	private var Vector pMaxRot
	private var Vector pMinSize
	private var Vector pMaxSize
	private var float pMinVertexPositionSet
	private var float pMaxVertexPositionSet
	private var bool pEnablePos
	private var bool pEnableOrient
	private var bool pEnableSize
	private var bool pEnableVertexPositionSet
	
	
	
	/** \brief Create animation rule definition. */
	public func new()
		pMinPos = Vector.new()
		pMaxPos = Vector.new()
		pMinRot = Vector.new()
		pMaxRot = Vector.new()
		pMinSize = Vector.new(1, 1, 1)
		pMaxSize = Vector.new(1, 1, 1)
		pMinVertexPositionSet = 0
		pMaxVertexPositionSet = 0
		pEnablePos = false
		pEnableOrient = true
		pEnableSize = false
		pEnableVertexPositionSet = true
	end
	
	/**
	 * \brief Create copy of animation rule definition.
	 * \version 1.13
	 */
	public func new(AnimatorDefinition fromDef, AnimatorDefinition toDef,\
	ADRuleStateManipulator rule) super(fromDef, toDef, rule)
		pMinPos = rule.pMinPos
		pMaxPos = rule.pMaxPos
		pMinRot = rule.pMinRot
		pMaxRot = rule.pMaxRot
		pMinSize = rule.pMinSize
		pMaxSize = rule.pMaxSize
		pMinVertexPositionSet = rule.pMinVertexPositionSet
		pMaxVertexPositionSet = rule.pMaxVertexPositionSet
		pEnablePos = rule.pEnablePos
		pEnableOrient = rule.pEnableOrient
		pEnableSize = rule.pEnableSize
		pEnableVertexPositionSet = rule.pEnableVertexPositionSet
	end
	
	
	
	/** \brief Minimum position. */
	public func Vector getMinimumPosition()
		return pMinPos
	end
	
	/** \brief Set minimum position. */
	public func void setMinimumPosition(Vector position)
		if position == null
			throw ENullPointer.new("position")
		end
		pMinPos = position
	end
	
	/** \brief Maximum position. */
	public func Vector getMaximumPosition()
		return pMaxPos
	end
	
	/** \brief Set maximum position. */
	public func void setMaximumPosition(Vector position)
		if position == null
			throw ENullPointer.new("position")
		end
		pMaxPos = position
	end
	
	/** \brief Minimum rotation. */
	public func Vector getMinimumOrientation()
		return pMinRot
	end
	
	/** \brief Set minimum rotation. */
	public func void setMinimumRotation(Vector rotation)
		if rotation == null
			throw ENullPointer.new("rotation")
		end
		pMinRot = rotation
	end
	
	/** \brief Maximum rotation. */
	public func Vector getMaximumRotation()
		return pMaxRot
	end
	
	/** \brief Set maximum rotation. */
	public func void setMaximumRotation(Vector rotation)
		if rotation == null
			throw ENullPointer.new("rotation")
		end
		pMaxRot = rotation
	end
	
	/** \brief Minimum size. */
	public func Vector getMinimumSize()
		return pMinSize
	end
	
	/** \brief Set minimum size. */
	public func void setMinimumSize(Vector size)
		if size == null
			throw ENullPointer.new("size")
		end
		pMinSize = size
	end
	
	/** \brief Maximum size. */
	public func Vector getMaximumSize()
		return pMaxSize
	end
	
	/** \brief Set maximum size. */
	public func void setMaximumSize(Vector size)
		if size == null
			throw ENullPointer.new("size")
		end
		pMaxSize = size
	end
	
	/**
	 * \brief Minimum vertex position set weight.
	 * \version 1.17
	 */
	public func float getMinimumVertexPositionSet()
		return pMinVertexPositionSet
	end
	
	/** \brief Set minimum vertex position set weight. */
	public func void setMinimumVertexPositionSet(float weight)
		pMinVertexPositionSet = weight
	end
	
	/** \brief Maximum vertex position set weight. */
	public func float getMaximumVertexPositionSet()
		return pMaxVertexPositionSet
	end
	
	/** \brief Set maximum vertex position set weight. */
	public func void setMaximumVertexPositionSet(float weight)
		pMaxVertexPositionSet = weight
	end
	
	/** \brief Pposition manipulation is enabled. */
	public func bool getEnablePosition()
		return pEnablePos
	end
	
	/** \brief Set if position manipulation is enabled. */
	public func void setEnablePosition(bool enable)
		pEnablePos = enable
	end
	
	/** \brief Rotation manipulation is enabled. */
	public func bool getEnableOrientation()
		return pEnableOrient
	end
	
	/** \brief Set if rotation manipulation is enabled. */
	public func void setEnableOrientation(bool enable)
		pEnableOrient = enable
	end
	
	/** \brief Size manipulation is enabled. */
	public func bool getEnableSize()
		return pEnableSize
	end
	
	/** \brief Set if size manipulation is enabled. */
	public func void setEnableSize(bool enable)
		pEnableSize = enable
	end
	
	/**
	 * \brief Vertex position set manipulation is enabled.
	 * \version 1.17
	 */
	public func bool getEnableVertexPositionSet()
		return pEnableVertexPositionSet
	end
	
	/**
	 * \brief Set if vertex position set manipulation is enabled.
	 * \version 1.17
	 */
	public func void setEnableVertexPositionSet(bool enable)
		pEnableVertexPositionSet = enable
	end
	
	
	
	/** \brief Build engine animator rule using the stored definition. */
	public func AnimatorRule buildRule(Animator animator)
		var ARStateManipulator rule = ARStateManipulator.new()
		
		buildRuleCommon(rule)
		
		forEachTarget(block ADRuleTargetLink each
			rule.targetAddLink(each.getTarget() cast ARStateManipulatorTarget, each.getLink().getIndex())
		end)
		
		rule.setMinimumPosition(pMinPos)
		rule.setMaximumPosition(pMaxPos)
		rule.setMinimumRotation(pMinRot)
		rule.setMaximumRotation(pMaxRot)
		rule.setMinimumSize(pMinSize)
		rule.setMaximumSize(pMaxSize)
		rule.setMinimumVertexPositionSet(pMinVertexPositionSet)
		rule.setMaximumVertexPositionSet(pMaxVertexPositionSet)
		rule.setEnablePosition(pEnablePos)
		rule.setEnableOrientation(pEnableOrient)
		rule.setEnableSize(pEnableSize)
		rule.setEnableVertexPositionSet(pEnableVertexPositionSet)
		
		return rule
	end
	
	
	
	/**
	 * \brief Create copy of rule.
	 * \version 1.13
	 */
	public func ADRule copy(AnimatorDefinition fromDef, AnimatorDefinition toDef)
		return new(fromDef, toDef, this)
	end
	
	
	
	public func void debug(Console console)
		console.addMessage(debugCommon("State Manipulator") + \
			" minp=" + pMinPos + " maxp=" + pMaxPos + " mino=" + pMinRot + " maxo=" + pMaxRot + \
			" mins=" + pMinSize + " maxs=" + pMaxSize + " epos=" + pEnablePos + \
			" eorient=" + pEnableOrient + " esize=" + pEnableSize + \
			" evps=" + pEnableVertexPositionSet + ")")
	end
end
