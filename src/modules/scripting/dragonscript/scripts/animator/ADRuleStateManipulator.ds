/* 
 * Drag[en]gine DragonScript Script Module
 *
 * Copyright (C) 2020, Roland Pl√ºss (roland@rptd.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */


namespace Dragengine.Animators

pin Dragengine.Scenery
pin Dragengine.Utils



/**
 * Definition of a state manipulator animator rule. Once defined a rule can be
 * added to an animator using the stored definition.
 */
class ADRuleStateManipulator extends ADRule
	/** Minimum position. */
	private var Vector pMinPos
	/** Maximum position. */
	private var Vector pMaxPos
	/** Minimum rotation. */
	private var Vector pMinRot
	/** Maximum rotation. */
	private var Vector pMaxRot
	/** Minimum size. */
	private var Vector pMinSize
	/** Maximum size. */
	private var Vector pMaxSize
	/** Enables position manipulation. */
	private var bool pEnablePos
	/** Enables rotation manipulation. */
	private var bool pEnableOrient
	/** Enables size manipulation. */
	private var bool pEnableSize
	
	
	
	/** Creates a new animation rule definition. */
	public func new()
		this.pMinPos = Vector.new()
		this.pMaxPos = Vector.new()
		this.pMinRot = Vector.new()
		this.pMaxRot = Vector.new()
		this.pMinSize = Vector.new( 1.0, 1.0, 1.0 )
		this.pMaxSize = Vector.new( 1.0, 1.0, 1.0 )
		this.pEnablePos = false
		this.pEnableOrient = true
		this.pEnableSize = false
	end
	
	
	
	/** Retrieves the minimum position. */
	public func Vector getMinimumPosition()
		return this.pMinPos
	end
	
	/** Sets the minimum position. */
	public func void setMinimumPosition( Vector minimumPosition )
		if minimumPosition == null
			throw EInvalidParam.new()
		end
		
		this.pMinPos = minimumPosition
	end
	
	/** Retrieves the maximum position. */
	public func Vector getMaximumPosition()
		return this.pMaxPos
	end
	
	/** Sets the maximum position. */
	public func void setMaximumPosition( Vector maximumPosition )
		if maximumPosition == null
			throw EInvalidParam.new()
		end
		
		this.pMaxPos = maximumPosition
	end
	
	/** Retrieves the minimum rotation. */
	public func Vector getMinimumOrientation()
		return this.pMinRot
	end
	
	/** Sets the minimum rotation. */
	public func void setMinimumRotation( Vector minimumRotation )
		if minimumRotation == null
			throw EInvalidParam.new()
		end
		
		this.pMinRot = minimumRotation
	end
	
	/** Retrieves the maximum rotation. */
	public func Vector getMaximumRotation()
		return this.pMaxRot
	end
	
	/** Sets the maximum rotation. */
	public func void setMaximumRotation( Vector maximumRotation )
		if maximumRotation == null
			throw EInvalidParam.new()
		end
		
		this.pMaxRot = maximumRotation
	end
	
	/** Retrieves the minimum size. */
	public func Vector getMinimumSize()
		return this.pMinSize
	end
	
	/** Sets the minimum size. */
	public func void setMinimumSize( Vector minimumSize )
		if minimumSize == null
			throw EInvalidParam.new()
		end
		
		this.pMinSize = minimumSize
	end
	
	/** Retrieves the maximum size. */
	public func Vector getMaximumSize()
		return this.pMaxSize
	end
	
	/** Sets the maximum size. */
	public func void setMaximumSize( Vector maximumSize )
		if maximumSize == null
			throw EInvalidParam.new()
		end
		
		this.pMaxSize = maximumSize
	end
	
	/** Determines if the position manipulation is enabled. */
	public func bool getEnablePosition()
		return this.pEnablePos
	end
	
	/** Sets if the position manipulation is enabled. */
	public func void setEnablePosition( bool enable )
		this.pEnablePos = enable
	end
	
	/** Determines if the rotation manipulation is enabled. */
	public func bool getEnableOrientation()
		return this.pEnableOrient
	end
	
	/** Sets if the rotation manipulation is enabled. */
	public func void setEnableOrientation( bool enable )
		this.pEnableOrient = enable
	end
	
	/** Determines if the size manipulation is enabled. */
	public func bool getEnableSize()
		return this.pEnableSize
	end
	
	/** Sets if the size manipulation is enabled. */
	public func void setEnableSize( bool enable )
		this.pEnableSize = enable
	end
	
	
	
	/**
	 * Build engine animator rule using the stored definition.
	 */
	public func AnimatorRule buildRule( Animator animator )
		var ARStateManipulator rule = ARStateManipulator.new()
		
		this.buildRuleCommon( rule )
		
		this.forEachTarget( block ADRuleTargetLink each
			rule.targetAddLink( each.getTarget() cast ARStateManipulatorTarget, each.getLink().getIndex() )
		end )
		
		rule.setMinimumPosition( this.pMinPos )
		rule.setMaximumPosition( this.pMaxPos )
		rule.setMinimumRotation( this.pMinRot )
		rule.setMaximumRotation( this.pMaxRot )
		rule.setMinimumSize( this.pMinSize )
		rule.setMaximumSize( this.pMaxRot )
		rule.setEnablePosition( this.pEnablePos )
		rule.setEnableOrientation( this.pEnableOrient )
		rule.setEnableSize( this.pEnableSize )
		
		return rule
	end
	
	
	
	public func void debug( Console console )
		console.addMessage( this.debugCommon( "State Manipulator" ) + \
			" minp=" + this.pMinPos + " maxp=" + this.pMaxPos + " mino=" + this.pMinRot + " maxo=" + this.pMaxRot + \
			" mins=" + this.pMinSize + " maxs=" + this.pMaxSize + " epos=" + this.pEnablePos + \
			" eorient=" + this.pEnableOrient + " esize=" + this.pEnableSize + " )" )
	end
end
