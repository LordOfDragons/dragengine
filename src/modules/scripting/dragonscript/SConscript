from SConsCommon import *

Import('parent_env parent_targets parent_report')

buildModule = parent_env['build_script_ds'] != TernaryVariableNo

internalModule = parent_env['build_script_ds_internal']
parent_report['build DragonScript Script Module'] = ('yes (internal)' if internalModule else 'yes') if buildModule else 'no'
if not buildModule:
	Return()

envModule = parent_env.Clone()

libs = []
appendLibrary(envModule, parent_targets['dragengine'], libs, internalModule=internalModule)
appendLibrary(envModule, parent_targets['lib_dragonscript'], libs)

# fetch values in expanded form for later use
versionString = '1.26'
if envModule['force_version']:
	versionString = envModule['force_version']

pathConfig = '{}/modules/scripting/dragonscript/{}'.format(envModule.subst(envModule['path_de_config']), versionString)
pathModule = '{}/modules/scripting/dragonscript/{}'.format(envModule.subst(envModule['path_de_data']), versionString)
pathShared = '{}/modules/scripting/dragonscript/{}'.format(envModule.subst(envModule['path_de_share']), versionString)

pathIGDEShared = envModule.subst(envModule['path_igde_share'])

envModule.Append(CPPFLAGS = parent_env['MODULE_CPPFLAGS'])
envModule.Append(LINKFLAGS = parent_env['MODULE_LINKFLAGS'])

if parent_targets['lib_dragonscript']['runtimedata']:
	envModule.Append(CXXFLAGS = ['-DUSE_INTERNAL_DSCRIPT'])

envModule.Append(CXXFLAGS = ['-DDS_MODULE_VERSION=\\"{}\\"'.format(versionString)])

# setup the builders
sources = []
headers = []
globFiles(envModule, 'src', '*.cpp', sources)
globFiles(envModule, 'src', '*.h', headers)

scripts = []
globFiles(envModule, 'scripts', '*.ds', scripts)

nativeclasses = []
globFiles(envModule, 'doc/nativeclasses', '*.ds', nativeclasses)

data = []
globFiles(envModule, 'data', '*', data)

igdeGameDefs = []
globFiles(envModule, 'igde/gamedefs', '*.degd', igdeGameDefs)

igdeTemplates = []
globFiles(envModule, 'igde/templates', '*', igdeTemplates)

install = []
archive = {}
archiveIGDE = {}

if internalModule:
	envModule.Append(CPPFLAGS = ['-DWITH_INTERNAL_MODULE'])
	envModule.Append(CPPFLAGS = ['-DMODULE_VERSION=\\"{}\\"'.format(versionString)])
	
	objects = [envModule.SharedObject(s) for s in sources]
	envModule.Depends(objects, parent_targets['dragengine']['headers'])
	
	library = envModule.StaticLibrary(target='scrdscript', source=objects, LIBS=libs)
	targetBuild = parent_env.Alias('scr_dragonscript_build', library)
	install.extend(targetBuild)
	
	parent_targets['dragengine']['add internal module'](
		envModule, library, ['lib_dragonscript'], 'dedsRegisterInternalModule')
	
else:
	objects = [envModule.SharedObject(s) for s in sources]
	
	library = envModule.LoadableModule(target='scrdscript', source=objects, LIBS=libs)
	targetBuild = envModule.Alias('scr_dragonscript_build', library)
	
	for l in library:
		if l.name.endswith(envModule['SHLIBSUFFIX']):
			install.append(envModule.Install(pathModule, l))
			archive[os.path.join(pathModule, l.name)] = l
	
	if envModule['OSWindows'] and envModule['CROSSCOMPILE_CLANG'] and envModule['with_install_pdb']:
		pathPdb = os.path.join(envModule.subst(envModule['path_pdb']), 'EngineModules')
		install.append(envModule.Install(pathPdb, 'scrdscript.pdb'))
		archive['{}/scrdscript.pdb'.format(pathPdb)] = envModule.File('scrdscript.pdb')
	
	manifestUpdates = [
		{'action': 'filename', 'name': library[0].name, 'keyword': 'FILENAME'},
		{'action': 'filesize', 'path': library[0].abspath, 'keyword': 'FILESIZE'},
		{'action': 'filehash', 'path': library[0].abspath, 'keyword': 'SHA1SUM'},
		{'action': 'text', 'value': versionString, 'keyword': 'VERSION'}]
	
	for l in reversed(parent_targets['lib_dragonscript']['runtimelibs']):
		manifestUpdates.append({'action': 'preloadLibrary', 'path': l.name})
		install.append(envModule.Install(pathModule, l))
		archive[os.path.join(pathModule, l.name)] = l
	
	manifest = envModule.File('src/module.xml')
	updateManifest = envModule.Command(manifest, manifest.srcnode(),
		Action(UpdateModuleManifest), ManifestUpdates=manifestUpdates)
	Depends(updateManifest, library)
	Depends(updateManifest, 'SConscript')
	Depends(updateManifest, parent_targets['lib_dragonscript']['runtimelibs'])
	
	install.append(envModule.Install(pathModule, updateManifest))
	archive[os.path.join(pathModule, 'module.xml')] = updateManifest[0]

for s in scripts:
	filename = os.path.join(pathShared, s)
	install.append(envModule.InstallAs(filename, s))
	archive[filename] = envModule.File(s).srcnode()

for s in nativeclasses:
	filename = os.path.join(pathShared, 'native', *(os.path.join(s).split(os.sep)[2:]))
	install.append(envModule.InstallAs(filename, s))
	archive[filename] = envModule.File(s).srcnode()

for s in data:
	filename = os.path.join(pathShared, s)
	install.append(envModule.InstallAs(filename, s))
	archive[filename] = envModule.File(s).srcnode()

replacements = []
if envModule['OSWindows']:
	# NOTE there is no other solution. to support cross-building path in the sconscripts
	#      have to be with unix slashes not native path separators. this means we have
	#      to manually do this thing here otherwise it won't work
	replacements.append(('%{PATH_MODULE_SHARED}',
		'%{{DE_SHARE_PATH}}\\modules\\scripting\\dragonscript\\{}\\data'.format(versionString)))
else:
	replacements.append(('%{PATH_MODULE_SHARED}',
		'%{{DE_SHARE_PATH}}/modules/scripting/dragonscript/{}/data'.format(versionString)))

for s in igdeGameDefs:
	node = envModule.File(s)
	modifiedFile = envModule.Command(node, node.srcnode(),
		Action(ActionReplaceTokenInPlace), Replacements=replacements)
	envModule.Depends(modifiedFile, 'SConscript')
	
	filename = os.path.join(pathIGDEShared, 'gamedefs', s.split('/')[-1])
	
	install.append(envModule.InstallAs(filename, modifiedFile))
	archiveIGDE[filename] = modifiedFile[0]

for s in igdeTemplates:
	node = envModule.File(s)
	filename = os.path.join(pathIGDEShared, 'templates', *(s.split('/')[2:]))
	
	install.append(envModule.InstallAs(filename, node))
	archiveIGDE[filename] = node.srcnode()

if parent_targets['lib_dragonscript']['runtimedatadir']:
	basedir = parent_targets['lib_dragonscript']['runtimedatadir']
	for d in parent_targets['lib_dragonscript']['runtimedata']:
		filename = os.path.join(pathShared, 'dsinstall', basedir.rel_path(d))
		install.append(envModule.InstallAs(filename, d))
		archive[filename] = d

if envModule['OSPosix'] and not envModule['OSBeOS']:
	pathDataDir = envModule.subst('$datadir')
	filename = os.path.join(pathDataDir, 'katepart5', 'syntax', 'dragonscript.xml')
	install.append(envModule.InstallAs(filename, 'kate_syntax/dragonscript.xml'))
	archiveIGDE[filename] = envModule.File('kate_syntax/dragonscript.xml').srcnode()
	
	filename = os.path.join(pathDataDir, 'mime', 'packages', 'dragonscript-dragonscript.xml')
	install.append(envModule.InstallAs(filename, 'dragonscript-mimetype.xml'))
	archiveIGDE[filename] = envModule.File('dragonscript-mimetype.xml').srcnode()

targetInstall = envModule.Alias('scr_dragonscript', install)

# source directory required for special commands
srcdir = Dir('.').srcnode().abspath

# doxygen
doxyfileModule = envModule.Command(envModule.File('doxyfile_module').srcnode(), 'doxyfile_module.in',
	Action(UpdateModuleManifest),
	ManifestUpdates=[{'action': 'text', 'value': versionString, 'keyword': '%VERSION%'}] )

buildDoxygenModule = envModule.Alias('scr_dragonscript_doc_module', envModule.Command(
	'doc/module/html/index.html', doxyfileModule, 'cd {} && doxygen doxyfile_module'.format(srcdir)))

doxyfileScript = envModule.Command(envModule.File('doxyfile_script').srcnode(), 'doxyfile_script.in',
	Action(UpdateModuleManifest),
	ManifestUpdates=[{'action': 'text', 'value': versionString, 'keyword': '%VERSION%'}] )

buildDoxygenScript = envModule.Alias('scr_dragonscript_doc_script', envModule.Command(
	'doc/script/html/index.html', doxyfileScript, 'cd {} && doxygen doxyfile_script'.format(srcdir)))

buildDoxygen = envModule.Alias('scr_dragonscript_doc', [buildDoxygenModule, buildDoxygenScript])

# cloc
buildClocBare = BuildCLOC(envModule,
	['{}/src'.format(srcdir), '{}/scripts'.format(srcdir)],
	'{}/clocreport.csv'.format(srcdir), ['doc'])
Depends(buildClocBare, sources)
Depends(buildClocBare, headers)
Depends(buildClocBare, scripts)
Depends(buildClocBare, nativeclasses)
buildCloc = envModule.Alias('scr_dragonscript_cloc', buildClocBare)

# add the targets to the targets list
parent_targets['scr_dragonscript'] = {
	'name' : 'DragonScript Script Module',
	'build' : targetBuild,
	'install' : targetInstall,
	'install-engine-runtime' : targetInstall,
	'archive-engine' : archive,
	'archive-igde' : archiveIGDE,
	'doxygen' : buildDoxygen,
	'cloc' : buildCloc,
	'clocReport' : '{}/clocreport.csv'.format(srcdir)}
