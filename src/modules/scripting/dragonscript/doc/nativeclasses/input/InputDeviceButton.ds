//////////////////////////////////////////////////////////////////////////////////
//                                                                              //
//                 This is a native class documentation                         //
//                                                                              //
//                  This file is used only for DoxyGen                          //
//                                                                              //
//////////////////////////////////////////////////////////////////////////////////

namespace Dragengine

pin Dragengine.Gui


/**
 * \brief Input device button.
 * 
 * Wraps a input device button by button index.
 * 
 * Buttons can be anything a user can press. This can be a mouse button,
 * buttons on keypads, keys on keyboards or touch fields on screens.
 * Buttons have a pressed or not pressed state. Pressure sensitive input
 * elements are handled as axes not buttons.
 * 
 * This is a native class.
 */
class InputDeviceButton
	/** \name Constructors */
	/*@{*/
	/** \brief Input device button can not be created directly. */
	private func new()
	end
	/*@}*/
	
	
	
	/** \name Management */
	/*@{*/
	/** \brief Owner input device. */
	public func InputDevice getInputDevice()
		return null
	end
	
	/** \brief Button index. */
	public func int getButtonIndex()
		return 0
	end
	/*@}*/
	
	
	
	/** \name Buttons */
	/*@{*/
	/**
	 * \brief Button identifier.
	 * 
	 * Unique identifier for the button identifying it inside the parent device. The prefix
	 * is a normalized string that contains only letters, numbers and underscores. It is
	 * suitable to be combined with the device identifier to store them in config files as
	 * key bindings.
	 */
	public func String getID()
		return null
	end
	
	/**
	 * \brief Display name.
	 * 
	 * Dispaly name is human readable like for example 'Button #1'. The name is unique but
	 * not guaranteed to stay the same across restarting the input module or game engine.
	 */
	public func String getName()
		return null
	end
	
	/**
	 * \brief Image to represent the button in 2D user interfaces or NULL if not set.
	 * 
	 * Large image of 128 pixels squared or larger.
	 */
	public func Image getDisplayImage()
		return null
	end
	
	/** \brief Count of icons representing the button in bindings. */
	public func int getDisplayIconCount()
		return 0
	end
	
	/**
	 * \brief Icon at index representing the button in bindings.
	 * 
	 * Icon is of square size and typically has a size of 16, 24, 32 or 64.
	 */
	public func Image getDisplayIconAt( int index )
		return null
	end
	
	/**
	 * \brief Largest icon not exceeding width representing the device in bindings.
	 * 
	 * Icon typically has a size of 16, 24, 32 or 64.
	 */
	public func Image getLargestDisplayIconX( int maxWidth )
		return null
	end
	
	/**
	 * \brief Largest icon not exceeding height representing the device in bindings.
	 * 
	 * Icon typically has a size of 16, 24, 32 or 64.
	 */
	public func Image getLargestDisplayIconY( int maxHeight )
		return null
	end
	
	/** \brief Text to display centered across display image or icon. */
	public func String getDisplayText()
		return null
	end
	
	
	
	/**
	 * \brief Get pressed state.
	 * 
	 * This obtains the current pressed state from the input module. If the device has been
	 * detached from the host platform in the mean time false is returned. In contrary to
	 * InputSystem.getButtonPressed() no exception is thrown. This allows to keep a reference
	 * to this instance without worrying about the device being detached from the system.
	 * If reattached the device properly works again.
	 */
	public func bool isPressed()
		return false
	end
	/*@}*/
end
