//////////////////////////////////////////////////////////////////////////////////
//                                                                              //
//                 This is a native class documentation                         //
//                                                                              //
//                  This file is used only for DoxyGen                          //
//                                                                              //
//////////////////////////////////////////////////////////////////////////////////

namespace Dragengine.Scenery

/**
 * \brief Collider.
 * 
 * Colliders provide collision detection and physical simulation to world objects.
 * Colliders can be static (where they do not move), kinematic (where the game
 * scripts provide physics response) or dynamic (where the physics module provides
 * the physics response). Colliders can be a shape (ColliderVolume) or a articulated
 * (ColliderRig or ColliderComponent). Colliders can be linked to other colliders
 * using constraints (ColliderConstraint). ColliderRig and ColliderComponent use
 * also rig defined constraints which are automatically created while external
 * constraints are created by the game scripts.
 * 
 * \par Attachments
 * 
 * All resources with a position and orientation can be attached to a collider or
 * bone if articulated. The following resources can be attached:
 * - Billboard
 * - Camera
 * - Collider
 * - Component
 * - DebugDrawer
 * - EnvMapProbe
 * - ForceField
 * - Light
 * - Lumimeter
 * - Microphone
 * - NavigationSpace
 * - Navigator
 * - ParticleEmitterInstance
 * - PropField
 * - Speaker
 * - TouchSensor
 * - SoundLevelMeter
 * 
 * This is a native class.
 */
class Collider
	/** \name Constructors */
	/*@{*/
	/** \brief Create collider. */
	protected func new()
	end
	/*@}*/
	
	
	
	/** \name Management */
	/*@{*/
	/** \brief Position. */
	public func DVector getPosition()
		return null
	end
	
	/** \brief Set position. */
	public func void setPosition( DVector position )
	end
	
	/** \brief Oorientation. */
	public func Quaternion getOrientation()
		return null
	end
	
	/** \brief Set orientation. */
	public func void setOrientation( Quaternion orientation )
	end
	
	/** \brief Scale. */
	public func Vector getScale()
		return null
	end
	
	/**
	 * \brief Set scale.
	 * 
	 * For deColliderComponent the scaling is used from the set deComponent
	 * in the first place. The collider scaling is applied on top of it.
	 * Hence if you use deColliderComponent with scaled components you
	 * do not have to set the scaling on the deColliderComponent. For
	 * deColliderVolume and deColliderRig using scaling is required.
	 */
	public func void setScale( Vector scale )
	end
	
	/**
	 * \brief Set position and orientation at the same time.
	 * 
	 * Colliders are the only resources supporting attachments. Using SetPosition() and
	 * SetOrientation() causes attachments to be repositions immediately. If many resources
	 * are attached to the collider (perhaps even nested) this can reduce performance since
	 * attachments are potentially repositioned twice. This call ensures attachments are
	 * only repositioned once improving performance.
	 */
	public func void setGeometry( DVector position, Quaternion orientation )
	end
	
	/**
	 * \brief Set position and orientation at the same time.
	 * 
	 * Colliders are the only resources supporting attachments. Using SetPosition() and
	 * SetOrientation() causes attachments to be repositions immediately. If many resources
	 * are attached to the collider (perhaps even nested) this can reduce performance since
	 * attachments are potentially repositioned twice. This call ensures attachments are
	 * only repositioned once improving performance.
	 */
	public func void setGeometry( DVector position, Quaternion orientation, Vector scale )
	end
	
	/** \brief View direction. */
	public func Vector getView()
		return null
	end
	
	/** \brief Up direction. */
	public func Vector getUp()
		return null
	end
	
	/** \brief Right direction. */
	public func Vector getRight()
		return null
	end
	
	/** \brief Get matrix. */
	public func DMatrix getMatrix()
		return null
	end
	
	/** \brief Get inverse matrix. */
	public func DMatrix getInverseMatrix()
		return null
	end
	
	
	
	/** \brief Linear velocity in m/s. */
	public func Vector getLinearVelocity()
		return null
	end
	
	/** \brief Set linear velocity in m/s. */
	public func void setLinearVelocity( Vector linVelo )
	end
	
	/** \brief Angular velocity in degrees/s. */
	public func Vector getAngularVelocity()
		return null
	end
	
	/** \brief Set angular velocity degrees/s. */
	public func void setAngularVelocity( Vector angVelo )
	end
	
	/** \brief Mass in kg. */
	public func float getMass()
		return 0.0
	end
	
	/** \brief Set mass in kg. */
	public func void setMass( float mass )
	end
	
	/** \brief Constant acceleration in N/s^2. */
	public func Vector getGravity()
		return null
	end
	
	/** \brief Set constant acceleration in N/s^2. */
	public func void setGravity( Vector force )
	end
	
	/** \brief Collider is enabled. */
	public func bool getEnabled()
		return false
	end
	
	/** \brief Set if collider is enabled. */
	public func void setEnabled( bool enabled )
	end
	
	/** \brief Response type. */
	public func CollisionResponse getResponseType()
		return null
	end
	
	/** \brief Set response type. */
	public func void setResponseType( CollisionResponse responseType )
	end
	
	/** \brief Collider defined gravity is used instead of World gravity. */
	public func bool getUseLocalGravity()
		return false
	end
	
	/** \brief Set if collider defined gravity is used instead of World gravity. */
	public func void setUseLocalGravity( bool useLocalGravity )
	end
	
	
	
	/** \brief Object owning the collider for interaction or \em null if not used. */
	public func Object getOwner()
		return null
	end
	
	/** \brief Set object owning the collider for interaction or \em null if not used. */
	public func void setOwner( Object owner )
	end
	
	
	
	/** \brief Factor for direct type force fields. */
	public func float getForceFieldDirect()
		return 0.0
	end
	
	/** \brief Set factor for direct type force fields. */
	public func void setForceFieldDirect( float factor )
	end
	
	/** \brief Factor for surface type force fields. */
	public func float getForceFieldSurface()
		return 0.0
	end
	
	/** \brief Set factor for surface type force fields. */
	public func void setForceFieldSurface( float factor )
	end
	
	/** \brief Factor for mass type force fields. */
	public func float getForceFieldMass()
		return 0.0
	end
	
	/** \brief Set factor for mass type force fields. */
	public func void setForceFieldMass( float factor )
	end
	
	/** \brief Factor for speed type force fields. */
	public func float getForceFieldSpeed()
		return 0.0
	end
	
	/** \brief Set factor for speed type force fields. */
	public func void setForceFieldSpeed( float factor )
	end
	
	
	
	/** \brief Collision filter. */
	public func CollisionFilter getCollisionFilter()
		return null
	end
	
	/** \brief Set collision filter. */
	public func void setCollisionFilter( CollisionFilter collisionFilter )
	end
	
	
	
	/**
	 * \brief Collider is equal to another object.
	 * \details Implements Object.equals(Object).
	 * \returns \em true if \em other is of type Collider and both point to the same engine collider.
	 */
	public func bool equals( Object other )
		return false
	end
	
	/**
	 * \brief Two colliders are equal.
	 * \details This is an extended version of equals() accepting also \em null for \em collider1
	 *          and \em collider2. equals() would thrown an exception if \em null is compared to
	 *          anything. This call though allows to compare \em null against colliders or even
	 *          \em null itself. If \em collider1 or \em collider2 is \em null \em false is returned.
	 *          If both are \em null \em true is returned.
	 */
	public static func bool equals( Collider collider1, Collider collider2 )
		return false
	end
	
	/**
	 * \brief Hash code for use as dictionary keys.
	 * \details Implements Object.hashCode().
	 */
	public func int hashCode()
		return 0
	end
	/*@}*/
	
	
	
	/** \name Attachments */
	/*@{*/
	/** \brief Number of attachments. */
	public func int getAttachmentCount()
		return 0
	end
	
	/**
	 * \brief Resource of attachment at index.
	 * \throws EOutOfBoundary \em index is less than 0 or larger than or equal to getAttachmentCount().
	 */
	public func Object getAttachedResource( int index )
		return null
	end
	
	/** \brief Attach resource using static mode relative to current position. */
	public func void attachStatic( Object resource )
	end
	
	/** \brief Attach resource using static mode with specific position. */
	public func void attachStatic( Object resource, Vector position, Quaternion orientation )
	end
	
	/** \brief Attach collider keeping relative position and orientation. */
	public func void attachRelativeMovement( Object resource )
	end
	
	/** \brief Detach resource. */
	public func void detach( Object resource )
	end
	
	/** \brief Detach all resources. */
	public func void detachAll()
	end
	
	/**
	 * \brief Force update of all attachments.
	 * \details You have to call this if want to reset colliders and components to a
	 *          predefined state like after warping or resetting objects. This requires
	 *          an attachment update outside the regular physics simulation run by the
	 *          physics module to prevent exploding behavior.
	 */
	public func void attachmentsForceUpdate()
	end
	/*@}*/
	
	
	
	/** \name Constraints */
	/*@{*/
	/** \brief Number of constraints. */
	public func int getConstraintCount()
		return 0
	end
	
	/** \brief Add constraint from a collider constraint. */
	public func void addConstraint( ColliderConstraint constraint )
	end
	
	/**
	 * \brief Set constraint from a collider constraint.
	 * \throws EOutOfBoundary \em index is less than 0 or larger than or equal to getConstraintCount().
	 */
	public func void setConstaintAt( int index, ColliderConstraint constraint )
	end
	
	/**
	 * \brief Remove constraint from index.
	 * \throws EOutOfBoundary \em index is less than 0 or larger than or equal to getConstraintCount().
	 */
	public func void removeConstraintFrom( int index )
	end
	
	/** \brief Remove all constraints. */
	public func void removeAllConstraints()
	end
	/*@}*/
	
	
	
	/** \name Ignore colliders */
	/*@{*/
	/** \brief Number of colliders to ignore. */
	public func int getIgnoreColliderCount()
		return 0
	end
	
	/**
	 * \brief Ignore collider at index.
	 * \throws deeInvalidParam \em index is less than 0 or equal than or equal to getIgnoreColliderCount().
	 */
	public func Collider getIgnoreColliderAt( int index )
		return null
	end
	
	/** \brief Ignore collider is present. */
	public func bool hasIgnoreCollider( Collider collider )
		return false
	end
	
	/** \brief Add collider to ignore. */
	public func void addIgnoreCollider( Collider collider )
	end
	
	/**
	 * \brief Remove collider to ignore.
	 * \throws deeInvalidParam \em collider is absent.
	 */
	public func void removeIgnoreCollider( Collider collider )
	end
	
	/** \brief Remove all colliders to ignore. */
	public func void removeAllIgnoreColliders()
	end
	/*@}*/
	
	
	
	
	/** \name Post physics collision tests */
	/*@{*/
	/** \brief Number of post physics collision tests. */
	public func int getCollisionTestCount()
		return 0
	end
	
	/**
	 * \brief Post physics collision test at index.
	 * \throws deeInvalidParam \em index is less than 0 or equal than or equal to getCollisionTestCount().
	 */
	public func ColliderCollisionTest getCollisionTestAt( int index )
		return null
	end
	
	/** \brief Add post physics collision test. */
	public func void addCollisionTest( ColliderCollisionTest collisionTest )
	end
	
	/**
	 * \brief Remove post physics collision test.
	 * \throws deeInvalidParam \em collisionTest is absent.
	 */
	public func void removeCollisionTest( ColliderCollisionTest collisionTest )
	end
	
	/** \brief Remove all post physics collision tests. */
	public func void removeAllCollisionTests()
	end
	/*@}*/
	
	
	/** \name Force and Impuls */
	/*@{*/
	/** \brief Apply impulse at central mass point. */
	public func void applyImpuls( Vector impuls )
	end
	
	/** \brief Apply impulse at position. */
	public func void applyImpulsAt( Vector impuls, Vector position )
	end
	
	/** \brief Apply torque at central mass point. */
	public func void applyTorque( Vector torque )
	end
	
	/** \brief Apply torque and impulse at center mass point. */
	public func void applyTorqueImpuls( Vector torqueImpuls )
	end
	
	/** \brief Apply force at central mass point. */
	public func void applyForce( Vector force )
	end
	
	/** \brief Apply force at position. */
	public func void applyForceAt( Vector force, Vector position )
	end
	/*@}*/
	
	
	
	/** \name Notifications */
	/*@{*/
	/** \brief Collider listener or \em null if not set. */
	public func ColliderListener getColliderListener()
		return null
	end
	
	/** \brief Set collider listener or \em null to clear. */
	public func void setColliderListener( ColliderListener listener )
	end
	
	/** \brief Custom can hit callback is enabled. */
	public func bool colliderListenerGetCustomCanHit()
		return false
	end
	
	/** \brief Set if custom can hit callback is enabled. */
	public func void colliderListenerSetCustomCanHit( bool customCanHit )
	end
	
	/** \brief Breaking listener or \em null if not set. */
	public func ColliderBreakingListener getBreakingListener()
		return null
	end
	
	/** \brief Set breaking listener or \em null if not set. */
	public func void setBreakingListener( ColliderBreakingListener listener )
	end
	/*@}*/
	
	
	
	/** \name Collision detection */
	/*@{*/
	/** \brief Point is inside collider. */
	public func bool pointInside( DVector point )
		return false
	end
	
	/** \brief Ray cast intersection test. */
	public func void rayHits( DVector rayOrigin, Vector rayDirection, ColliderListener listener )
	end
	
	/**
	 * \brief Closest ray cast intersection test.
	 * \details Only closest intersection is reported to listener. rayHits() reports all intersections.
	 */
	public func void rayHitsClosest( DVector rayOrigin, Vector rayDirection, ColliderListener listener )
	end
	
	/** \brief Test collider for intersection. */
	public func void colliderHits( Collider collider, ColliderListener listener )
	end
	
	/** \brief Tests moving collider for collision. */
	public func void colliderMoveHits( Collider collider, Vector displacement, ColliderListener listener )
	end
	
	/** \brief Tests moving collider for collision. */
	public func void colliderMoveHitsCLosest( Collider collider, Vector displacement, ColliderListener listener )
	end
	
	/** \brief Test rotating collider for collision. */
	public func void colliderRotateHits( Collider collider, ColliderListener listener )
	end
	
	/** \brief Test rotating collider for collision. */
	public func void colliderRotateHitsClosest( Collider collider, ColliderListener listener )
	end
	
	/** \brief Test moving and rotating collider for collision. */
	public func void colliderMoveRotateHits( Collider collider, Vector displacement, ColliderListener listener )
	end
	
	/** \brief Test moving and rotating collider for collision. */
	public func void colliderMoveRotateHitsClosest( Collider collider, Vector displacement, ColliderListener listener )
	end
	/*@}*/
end
