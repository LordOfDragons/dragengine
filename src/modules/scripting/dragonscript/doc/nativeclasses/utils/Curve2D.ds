//////////////////////////////////////////////////////////////////////////////////
//                                                                              //
//                 This is a native class documentation                         //
//                                                                              //
//                  This file is used only for DoxyGen                          //
//                                                                              //
//////////////////////////////////////////////////////////////////////////////////

namespace Dragengine.Scenery

/**
 * \brief 2D Curve.
 * 
 * This is a native class.
 */
class Curve2D
	/** \name Constructors */
	/*@{*/
	/** \brief Create 2d curve. */
	public func new()
	end
	/*@}*/
	
	
	
	/** \name Management */
	/*@{*/
	/** \brief Nnumber of points. */
	public func int getPointCount()
		return 0
	end
	
	/**
	 * \brief Point at positon.
	 * \throws EOutOfBoundary \em position is less than 0 or larger than or equal to getPointCount().
	 */
	public func Vector2 getPointAt( int position )
		return null
	end
	
	/**
	 * \brief Index of the point closest to an x coordinate.
	 * \details If no such point can be found -1 is returned.
	 */
	public func int indexOfPointClosestTo( float coordinate )
		return 0
	end
	
	/**
	 * \brief Index of the point with matching x coordinates or point right before.
	 * \details This method can be used to find the interval a point is located in by returning the
	 *          most prior point. Returns -1 if there are no points satisfying this criteria.
	 */
	public func int indexOfPointBefore( float coordinate )
		return 0
	end
	
	/** \brief Add point returning index where it has been added. */
	public func int addPoint( Vector2 point )
		return 0
	end
	
	/** \brief Add point returning index where it has been added. */
	public func int addPoint( float x, float y )
		return 0
	end
	
	/**
	 * \brief Remove point from position.
	 * \throws EOutOfBoundary \em position is less than 0 or larger than or equal to getPointCount().
	 */
	public func void removePointFrom( int position )
	end
	
	/** \brief Remove all points. */
	public func void removeAllPoints()
	end
	
	
	
	/** \brief Clear curve to a straight line from (0,0) to (1,1). */
	public func void setDefaultCurve()
	end
	
	/** \brief Offset Y coordinate of all curve points. */
	public func void offsetPointsBy( float offset )
	end
	
	/** \brief Scale Y coordinate of all curve points. */
	public func void scalePointsBy( float scale )
	end
	
	
	
	/** \brief Evaluate curve at coordinate using constant interpolation. */
	public func float evaluateConstant( float coordinate )
		return 0.0
	end
	
	/** \brief Evaluate curve at coordinate using linear interpolation. */
	public func float evaluateLinear( float coordinate )
		return 0.0
	end
	/*@}*/
end
