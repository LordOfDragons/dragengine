//////////////////////////////////////////////////////////////////////////////////
//                                                                              //
//                 This is a native class documentation                         //
//                                                                              //
//                  This file is used only for DoxyGen                          //
//                                                                              //
//////////////////////////////////////////////////////////////////////////////////

namespace Dragengine.Scenery

/**
 * \brief Smooth floating point value.
 * 
 * Smooth dynamic changing floating point value across time.
 */
class SmoothFloat
	/** \name Constructors */
	/*@{*/
	/**
	 * \brief Create smooth float.
	 * \details Value, goal and change speed are set to 0. Adjust time is set to 1s.
	 *          Change speed limit is set to 1 unit per second.
	 */
	public func new()
	end
	
	/** \brief Create copy of smooth float. */
	public func new( SmoothFloat copy )
	end
	/*@}*/
	
	
	
	/** \name Management */
	/*@{*/
	/** \brief Current value. */
	public func float getValue()
		return 0.0
	end
	
	/** \brief Set current value. */
	public func void setValue( float value )
	end
	
	/** \brief Goal value. */
	public func float getGoal()
		return 0.0
	end
	
	/** \brief Set goal value. */
	public func void setGoal( float goal )
	end
	
	/** \brief Adjustment time in seconds. */
	public func float getAdjustTime()
		return 0.0
	end
	
	/** \brief Adjustment time in seconds clamped to 0 or larger. */
	public func void setAdjustTime( float adjustTime )
	end
	
	/** \brief Adjustment range in units. */
	public func float getAdjustRange()
		return 0.0
	end
	
	/** \brief Set adjustment range in units clamped to 0 or larger. */
	public func void setAdjustRange( float limit )
	end
	
	/** \brief Change speed of the value in units per second. */
	public func float getChangeSpeed()
		return 0.0
	end
	
	/** \brief Set change speed of the value in units per second. */
	public func void setChangeSpeed( float changeSpeed )
	end
	
	
	
	/** \brief Reset value, goal and change speed to 0. */
	public func void reset()
	end
	
	/**
	 * \brief Update value with goal using current smoothing parameters.
	 * \details Goal is not modified.
	 * \param[in] elapsed Elapsed time in seconds. If less than 0.001s update is skipped.
	 */
	public func void update( float elapsed )
	end
	/*@}*/
	
	
	
	/** \name File Handling */
	/*@{*/
	/** \brief Read from file reader. */
	static public func SmoothFloat readFromFile( FileReader reader )
		return null
	end
	
	/** \brief Write to file writer. */
	public func void writeToFile( FileWriter writer )
	end
	/*@}*/
end
