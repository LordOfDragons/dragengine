//////////////////////////////////////////////////////////////////////////////////
//                                                                              //
//                 This is a native class documentation                         //
//                                                                              //
//                  This file is used only for DoxyGen                          //
//                                                                              //
//////////////////////////////////////////////////////////////////////////////////

namespace Dragengine

/**
 * \brief Immutable unique ID.
 * 
 * This is a native class.
 */
class UniqueID
	/** \name Constructors */
	/*@{*/
	/** \brief Create unique id with value 0. */
	func new()
	end
	
	/** \brief Create unique id with value. */
	func new(int value)
	end
	/*@}*/
	
	
	
	/** \name Management */
	/*@{*/
	/** \brief Bit count. */
	func int getBitCount()
		return 0
	end
	
	/**
	 * \brief Byte at position in LSB.
	 * \throws EOutOfBoundary \em position is less than 0 or larger than or equal to getBitCount().
	 */
	func int getByteAt(int position)
		return 0
	end
	
	
	
	/** \brief Hex string representation. */
	func String toHexString()
		return null
	end
	
	/** \brief Unique id from hex string. */
	static func UniqueID newFromHexString(String string)
		return null
	end
	
	/**
	 * \brief ID is 0.
	 * \version 1.26
	 */
	func bool zero()
		return false
	end
	
	/**
	 * \brief ID is not 0.
	 * \version 1.26
	 */
	func bool notZero()
		return false
	end
	
	
	
	/** \brief String representation of unique id. */
	func String toString()
		return null
	end
	
	/**
	 * \brief Unique ID is equal to another object.
	 * \details Implements Object.equals(Object).
	 * \returns \em true if \em other is of type UniqueID and both IDs are equal.
	 */
	func bool equals(Object other)
		return false
	end
	
	/**
	 * \brief Compare object with another object.
	 * \details Used to sort objects. Overwrite to implement sorting.
	 * \retval 0 Object is equal to \em obj.
	 * \retval <0 Object comes before \em obj.
	 * \retval >0 Object comes after \em obj.
	 */
	func int compare(Object obj)
		return 0
	end
	
	/**
	 * \brief Hash code for use as dictionary keys.
	 * \details Implements Object.hashCode().
	 */
	func int hashCode()
		return 0
	end
	/*@}*/
	
	
	
	/** \name File Handling */
	/*@{*/
	/** \brief Read unique id from a file reader. */
	static func UniqueID readFromFile(FileReader reader)
		return null
	end
	
	/** \brief Write unique id to a file writer. */
	func void writeToFile(FileWriter writer)
	end
	/*@}*/
	
	
	
	/** \name Operators */
	/*@{*/
	/** \brief UniqueID incremented by value. */
	func UniqueID +(int value)
		return null
	end
	
	/** \brief UniqueID incremented by another UniqueID. */
	func UniqueID +(UniqueID id)
		return null
	end
	
	/** \brief UniqueID decremented by value. */
	func UniqueID -(int value)
		return null
	end
	
	/** \brief UniqueID decremented by another UniqueID. */
	func UniqueID -(UniqueID id)
		return null
	end
	
	/** \brief ID is less than another ID. */
	func bool <(UniqueID id)
		return false
	end
	
	/** \brief ID is less than or equal to another ID. */
	func bool <=(UniqueID id)
		return false
	end
	
	/** \brief ID is greater than another ID. */
	func bool >(UniqueID id)
		return false
	end
	
	/** \brief ID is greater than or equal to another ID. */
	func bool >=(UniqueID id)
		return false
	end
	/*@}*/
end
