//////////////////////////////////////////////////////////////////////////////////
//                                                                              //
//                 This is a native class documentation                         //
//                                                                              //
//                  This file is used only for DoxyGen                          //
//                                                                              //
//////////////////////////////////////////////////////////////////////////////////

namespace Dragengine.Scenery

/**
 * \brief 3D Bezier curve.
 * 
 * This is a native class.
 * 
 */
class CurveBezier3D
	/** \name Constructors */
	/*@{*/
	/** \brief Create bezier curve. */
	func new()
	end
	
	/** \brief Create copy of bezier curve. */
	func new(CurveBezier3D copy)
	end
	/*@}*/
	
	
	
	/** \name Management */
	/*@{*/
	/** \brief Number of points. */
	func int getPointCount()
		return 0
	end
	
	/**
	 * \brief Point at position.
	 * \throws EInvalidParam \em position is less than 0.
	 * \throws EInvalidParam \em position is larger or equal to getPointCount()-1.
	 */
	func Vector getPointAt(int position)
		return null
	end
	
	/**
	 * \brief First handle at position.
	 * \throws EInvalidParam \em position is less than 0.
	 * \throws EInvalidParam \em position is larger or equal to getPointCount()-1.
	 */
	func Vector getHandle1At(int position)
		return null
	end
	
	/**
	 * \brief Second handle at position.
	 * \throws EInvalidParam \em position is less than 0.
	 * \throws EInvalidParam \em position is larger or equal to getPointCount()-1.
	 */
	func Vector getHandle2At(int position)
		return null
	end
	
	/**
	 * \brief Set point at position.
	 * \details Set both handles to \em point.
	 * \throws EInvalidParam \em position is less than 0.
	 * \throws EInvalidParam \em position is larger or equal to getPointCount()-1.
	 */
	func void setPointAt(int position, Vector point)
	end
	
	/**
	 * \brief Set point and handles at position.
	 * \throws EInvalidParam \em position is less than 0.
	 * \throws EInvalidParam \em position is larger or equal to getPointCount()-1.
	 */
	func void setPointAt(int position, Vector point, Vector handle1, Vector handle2)
	end
	
	/**
	 * \brief Add point.
	 * \details Set both handles to \em point.
	 */
	func void addPoint(Vector point)
	end
	
	/** \brief Add point with handles. */
	func void addPoint(Vector point, Vector handle1, Vector handle2)
	end
	
	/**
	 * \brief Insert point.
	 * \details Set both handles to \em point.
	 * \throws EInvalidParam \em position is less than 0.
	 * \throws EInvalidParam \em position is larger or equal to getPointCount().
	 */
	func void insertPoint(int position, Vector point)
	end
	
	/**
	 * \brief Insert point with handles.
	 * \throws EInvalidParam \em position is less than 0.
	 * \throws EInvalidParam \em position is larger or equal to getPointCount().
	 */
	func void insertPoint(int position, Vector point, Vector handle1, Vector handle2)
	end
	
	/**
	 * \brief Remove point from the given position.
	 * \throws EInvalidParam \em position is less than 0.
	 * \throws EInvalidParam \em position is larger or equal to getPointCount()-1.
	 */
	func void removePointFrom(int position)
	end
	
	/** \brief Remove all points. */
	func void removeAllPoints()
	end
	
	
	
	/**
	 * \brief Interpolation mode.
	 * \version 1.26
	 */
	func CurveBezierInterpolation getInterpolationMode()
		return null
	end
	
	/**
	 * \brief Set interpolation mode.
	 * \version 1.26
	 * \throws EInvalidParam \em mode is not a valid value.
	 */
	func void setInterpolationMode(CurveBezierInterpolation mode)
	end
	
	
	
	/** \brief Evaluate curve at segment position. */
	func Vector evaluateAt(int segment, float blend)
		return null
	end
	
	/**
	 * \brief Evaluate curve using curve value.
	 * \details Curve value composes of segment as integral part and blend factor as fractional part.
	 */
	func Vector evaluateAt(float curveValue)
		return null
	end
	/*@}*/
	
	
	
	/** \name File Handling */
	/*@{*/
	/**
	 * \brief Read curve from file reader.
	 * \version 1.26
	 */
	static func CurveBezier3D readFromFile(FileReader reader)
		return null
	end
	
	/**
	 * \brief Write curve to file writer.
	 * \version 1.26
	 */
	func void writeToFile(FileWriter writer)
	end
	/*@}*/
end
