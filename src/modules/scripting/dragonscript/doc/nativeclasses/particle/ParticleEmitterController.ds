//////////////////////////////////////////////////////////////////////////////////
//                                                                              //
//                 This is a native class documentation                         //
//                                                                              //
//                  This file is used only for DoxyGen                          //
//                                                                              //
//////////////////////////////////////////////////////////////////////////////////

namespace Dragengine.Scenery

/**
 * \brief ParticleEmitter or particle emitter instance controller.
 * 
 * Wraps a particle emitter or particle emitter instance controller by controller index. Valid only as long
 * as the wrapped particle emitter or particle emitter instance does not change controller layout.
 * 
 * If wrapping a particle emitter instance controller any changes to a controller triggers an
 * update in the game engine.
 * 
 * If wrapping a particle emitter controller the user is responsible to call ParticleEmitter.contentChanged()
 * after changing one or more controllers. ParticleEmitter controllers should not be changed if
 * possible after being used in particle emitter instances.
 * 
 * This is a native class.
 */
class ParticleEmitterController
	/** \name Constructors */
	/*@{*/
	/** \brief ParticleEmitter controller can not be created directly. */
	private func new()
	end
	/*@}*/
	
	
	
	/** \name Management */
	/*@{*/
	/** \brief Owner particle emitter or \em null if not owned by particle emitter. */
	public func ParticleEmitter getParticleEmitter()
		return null
	end
	
	/** \brief Onwer particle emitter instance or \em null if not owned by particle emitter instance. */
	public func ParticleEmitterInstance getParticleEmitterInstance()
		return null
	end
	
	/** \brief Controller index. */
	public func int getControllerIndex()
		return 0
	end
	/*@}*/
	
	
	
	/** \name Controllers */
	/*@{*/
	/** \brief Name. */
	public func String getName()
		return null
	end
	
	/** \brief Set name. */
	public func void setName( String name )
	end
	
	/** \brief Lower limit. */
	public func float getLower()
		return 0.0
	end
	
	/** \brief Upper limit. */
	public func float getUpper()
		return 0.0
	end
	
	/** \brief Set value range. */
	public func void setRange( float lower, float upper )
	end
	
	/** \brief Value. */
	public func float getValue()
		return 0.0
	end
	
	/** \brief Set value. */
	public func void setValue( float value )
	end
	
	/** \brief Value mapped from range (minimum..maximum) to range (0..1). */
	public func float getRelativeValue()
		return 0.0
	end
	
	/** \brief Set value from range (0..1) mapped to range (minimum..maximum). */
	public func void setRelativeValue( float value )
	end
	
	/** \brief Controller is frozen. */
	public func bool getFrozen()
		return false
	end
	
	/** \brief Set if controller is frozen. */
	public func void setFrozen( bool frozen )
	end
	
	/** \brief Controller value is clamped instead of wrapped around if outside range. */
	public func bool getClamp()
		return false
	end
	
	/** \brief Set if controller value is clamped instead of wrapped around if outside range. */
	public func void setClamp( bool clamp )
	end
	
	
	
	/** \brief Increment controller value. */
	public func void increment( float amount )
	end
	
	/** \brief Set controller value to lower value. */
	public func void setToLower()
	end
	
	/** \brief Set controller value to upper value. */
	public func void setToUpper()
	end
	
	/** \brief Set controller value to maximum - currentValue. */
	public func void reverse()
	end
	
	/** \brief Set controller value and vector from another controller. */
	public func void setValueFrom( ParticleEmitterInstance instance )
	end
	
	/** \brief Set entire controller configuration from another controller. */
	public func void setAllFrom( ParticleEmitterInstance instance )
	end
	
	/** \brief Controller value is at lower value. */
	public func bool isAtLower()
		return false
	end
	
	/** \brief Controller value is at upper value. */
	public func bool isAtUpper()
		return false
	end
	/*@}*/
end
