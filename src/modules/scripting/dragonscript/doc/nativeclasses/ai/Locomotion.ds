//////////////////////////////////////////////////////////////////////////////////
//                                                                              //
//                 This is a native class documentation                         //
//                                                                              //
//                  This file is used only for DoxyGen                          //
//                                                                              //
//////////////////////////////////////////////////////////////////////////////////

namespace Dragengine.Scenery

/**
 * \brief Locomotion.
 * 
 * Native class implementation of typical actor locomotion. Provides support to track locomotion
 * state of various kinds of actors and optionally updating AnimatorInstance and Collider
 * automatically. The native locomotion implementation has better performance than implementing
 * the same functionality in pure scripts. You can subclass to add your game specific locomotion
 * needs. Do not overload methods from  "State control and frame update" if possible. Some of
 * them are used internally by other calls. For performance reasons they do not use late binding
 * calls. Your overloaded methods would only work if called from game scripts directly.
 * 
 * This locomotion implementation provides the following functionality out of the box:
 * - Locomotion handling for natural, fps and vehicle type actors
 * - Looking up/down and left/right using digital and analog input with smoothing
 * - Turning using digital and analog input with smoothign for vehicle type locomotion
 * - Forced actor orientation adjusting if looking too far left/right
 * - Walk and running movement using digital and analog input with smoothing
 * - Uprect and crouching stance using digital input with smoothing
 * - Moving direction (strafing) using digital and analog input with smoothing
 * - Body tilting calculation to fit actor to ground
 * - Automatically updating AnimatorInstance mapping attributes to controllers
 * - Automatically updating AI Collider velocities
 * 
 * This is a native class.
 */
class Locomotion
	/** \name Constructors */
	/*@{*/
	/** \brief Create locomotion. */
	func new()
	end
	/*@}*/
	
	
	
	/** \name Basic Parameters */
	/*@{*/
	/** \brief Determine if the actor can turn. */
	func bool getCanTurn()
		return false
	end
	
	/** \brief Set if the actor can turn. */
	func void setCanTurn(bool canTurn)
	end
	
	/**
	 * \brief Look left/right is always limited.
	 * \version 1.26
	 */
	func bool getAlwaysLimitLeftRight()
		return false
	end
	
	/**
	 * \brief Set if look left/right is always limited.
	 * \version 1.26
	 */
	func void setAlwaysLimitLeftRight(bool alwaysLimitLeftRight)
	end
	/*@}*/
	
	
	
	/** \name Looking around */
	/*@{*/
	/** \brief Looking up limit angle in degrees. */
	func float getLimitLookUp()
		return 0
	end
	
	/** \brief Set looking up limit angle in degrees. */
	func void setLimitLookUp(float limit)
	end
	
	/** \brief Looking down limit angle in degrees. */
	func float getLimitLookDown()
		return 0
	end
	
	/** \brief Set looking down limit angle in degrees. */
	func void setLimitLookDown(float limit)
	end
	
	/** \brief Look up-down adjustment time in seconds. */
	func float getAdjustTimeVertical()
		return 0
	end
	
	/** \brief Set look up-down adjustment time in seconds. */
	func void setAdjustTimeVertical(float time)
	end
	
	/** \brief Look up-down adjustment range. */
	func float getAdjustRangeVertical()
		return 0
	end
	
	/** \brief Set look up-down adjustment range. */
	func void setAdjustRangeVertical(float range)
	end
	
	/** \brief Looking up-down goal. */
	func float getLookVerticalGoal()
		return 0
	end
	
	/** \brief Set looking up-down goal. */
	func void setLookVerticalGoal(float goal)
	end
	
	/** \brief Looking up-down value. */
	func float getLookVertical()
		return 0
	end
	
	/** \brief Looking up-down value. */
	func void setLookVertical(float value)
	end
	
	
	
	/** \brief Looking left limit in degrees. */
	func float getLimitLookLeft()
		return 0
	end
	
	/** \brief Set looking left limit in degrees. */
	func void setLimitLookLeft(float limit)
	end
	
	/** \brief Looking right limit in degrees. */
	func float getLimitLookRight()
		return 0
	end
	
	/** \brief Set looking right limit in degrees. */
	func void setLimitLookRight(float limit)
	end
	
	/** \brief Look left-right adjustment time in seconds. */
	func float getAdjustTimeHorizontal()
		return 0
	end
	
	/** \brief Set look left-right adjustment time in seconds. */
	func void setAdjustTimeHorizontal(float time)
	end
	
	/** \brief Look left-right adjustment range. */
	func float getAdjustRangeHorizontal()
		return 0
	end
	
	/** \brief Set look left-right adjustment range. */
	func void setAdjustRangeHorizontal(float range)
	end
	
	/** \brief Look left-right goal. */
	func float getLookHorizontalGoal()
		return 0
	end
	
	/** \brief Set look left-right goal. */
	func void setLookHorizontalGoal(float goal)
	end
	
	/** \brief Look left-right value. */
	func float getLookHorizontal()
		return 0
	end
	
	/** \brief Set look left-right value. */
	func void setLookHorizontal(float value)
	end
	
	/** \brief Adjust looking left-right while turning. */
	func bool getTurnAdjustLookHorizontal()
		return false
	end
	
	/** \brief Set if looking left-right is adjusted while turning. */
	func void setTurnAdjustLookHorizontal(bool turnAdjust)
	end
	
	
	
	/** \brief Analog looking up-down. */
	func float getAnalogMovingVertical()
		return 0
	end
	
	/** \brief Set analog looking up-down. */
	func void setAnalogMovingVertical(float value)
	end
	/*@}*/
	
	
	
	/** \name Turning */
	/*@{*/
	/** \brief Turn left-right value. */
	func float getTurnHorizontal()
		return 0
	end
	
	/** \brief Set turn left-right value. */
	func void setTurnHorizontal(float value)
	end
	
	
	
	/** \brief Orientation adjustment time in seconds. */
	func float getAdjustTimeOrientation()
		return 0
	end
	
	/** \brief Set orientation adjustment time in seconds. */
	func void setAdjustTimeOrientation(float time)
	end
	
	/** \brief Actor orientation in world space. */
	func float getOrientation()
		return 0
	end
	
	/** \brief Set actor orientation in world space. */
	func void setOrientation(float orientation)
	end
	
	/** \brief Actor orientation as quaternion. */
	func Quaternion getOrientationQuaternion()
		return null
	end
	
	/** \brief Set actor orientation as quaternion. */
	func void setOrientationQuaternion(Quaternion orientation)
	end
	
	/** \brief Turning speed in meters per second. */
	func float getTurningSpeed()
		return 0
	end
	
	/** \brief Set turning speed in meters per second. */
	func void setTurningSpeed(float speed)
	end
	
	/** \brief Angular velocity of the actor turning. */
	func Vector getAngularVelocity()
		return null
	end
	
	/** \brief Set angular velocity of the actor turning. */
	func void setAngularVelocity(Vector velocity)
	end
	
	
	
	/** \brief Determine if the actor is turning in place. */
	func bool getIsTurningIP()
		return false
	end
	
	/** \brief Set if the actor is turning in place. */
	func void setIsTurningIP(bool turnInPlace)
	end
	
	/** \brief Adjustment time in seconds for turning in-place. */
	func float getAdjustTimeTurnIP()
		return 0
	end
	
	/** \brief Set adjustment time in seconds for turning in-place. */
	func void setAdjustTimeTurnIP(float time)
	end
	
	/** \brief Turn in place value. */
	func float getTurnIP()
		return 0
	end
	
	/** \brief Set turn in place value. */
	func void setTurnIP(float value)
	end
	
	/** \brief Determine if the turn in place time linked controllers have to be reset. */
	func bool getResetTimeTurnIP()
		return false
	end
	
	/** \brief Set if the turn in place time linked controllers have to be reset. */
	func void setResetTimeTurnIP(bool reset)
	end
	
	/** \brief Determine if the turn in place time linked controllers have to be reversed. */
	func bool getReverseTimeTurnIP()
		return false
	end
	
	/** \brief Set if the turn in place time linked controllers have to be reversed. */
	func void setReverseTimeTurnIP(bool reverse)
	end
	
	
	
	/** \brief Actor can turn in-place if looking beyond limits. */
	func bool getCanTurnInPlace()
		return false
	end
	
	/** \brief Set if actor can turn in-place if looking beyond limits. */
	func void setCanTurnInPlace(bool canTurnInPlace)
	end
	
	/** \brief Looking left limit in degrees before turning in-place. */
	func float getLimitTurnInPlaceLeft()
		return 0
	end
	
	/** \brief Set looking left limit in degrees before turning in-place. */
	func void setLimitTurnInPlaceLeft(float limit)
	end
	
	/** \brief Looking right limit in degrees before turning in-place. */
	func float getLimitTurnInPlaceRight()
		return 0
	end
	
	/** \brief Set looking right limit in degrees before turning in-place. */
	func void setLimitTurnInPlaceRight(float limit)
	end
	/*@}*/
	
	
	
	/** \name Movement */
	/*@{*/
	/** \brief Analog looking left-right adjustment time in seconds. */
	func float getAdjustTimeAnalogMovingHorizontal()
		return 0
	end
	
	/** \brief Set analog looking left-right adjustment time in seconds. */
	func void setAdjustTimeAnalogMovingHorizontal(float time)
	end
	
	/** \brief Analog looking left-right adjustment range. */
	func float getAdjustRangeAnalogMovingHorizontal()
		return 0
	end
	
	/** \brief Set analog looking left-right adjustment range. */
	func void setAdjustRangeAnalogMovingHorizontal(float range)
	end
	
	/** \brief Analog looking left-right goal. */
	func float getAnalogMovingHorizontalGoal()
		return 0
	end
	
	/** \brief Set analog looking left-right goal. */
	func void setAnalogMovingHorizontalGoal(float value)
	end
	
	/** \brief Analog looking left-right. */
	func float getAnalogMovingHorizontal()
		return 0
	end
	
	/** \brief Set analog looking left-right. */
	func void setAnalogMovingHorizontal(float value)
	end
	
	
	
	/** \brief Analog moving speed. */
	func float getAnalogMovingSpeed()
		return 0
	end
	
	/** \brief Set analog moving speed. */
	func void setAnalogMovingSpeed(float value)
	end
	
	
	
	/** \brief Determine if the actor is moving direct or analog. */
	func bool getIsMoving()
		return false
	end
	
	/** \brief Set determine if the actor is moving direct or analog. */
	func void setIsMoving(bool isMoving)
	end
	
	/**
	 * \brief Relative movement speed.
	 * 
	 * Speed is positive for moving forward and negative for moving backward.
	 */
	func float getMovingSpeed()
		return 0
	end
	
	/**
	 * \brief Absolute movement speed.
	 * 
	 * Absolute value of getMovingSpeed() no matter if moving forward or backward.
	 */
	func float getAbsMovingSpeed()
		return 0
	end
	
	/**
	 * \brief Set movement speed.
	 * \details For Non-FPS locomotion type this is negative for moving backward.
	 */
	func void setMovingSpeed(float speed)
	end
	
	
	
	/** \brief Linear velocity. */
	func Vector getLinearVelocity()
		return null
	end
	
	/** \brief Set linear velocity. */
	func void setLinearVelocity(Vector velocity)
	end
	
	/** \brief Linear velocity adjustment time in seconds. */
	func float getAdjustTimeLinearVelocity()
		return 0
	end
	
	/** \brief Set linear velocity adjustment time in seconds. */
	func void setAdjustTimeLinearVelocity(float time)
	end
	
	/** \brief Linear velocity adjustment range in meters per second. */
	func float getAdjustRangeLinearVelocity()
		return 0
	end
	
	/** \brief Set linear velocity adjustment range in meters per second. */
	func void setAdjustRangeLinearVelocity(float range)
	end
	
	
	
	/** \brief Movement orientation in world space. */
	func float getMovingOrientation()
		return 0
	end
	
	/** \brief Set movement orientation in world space. */
	func void setMovingOrientation(float orientation)
	end
	
	/** \brief Movement direction relative to view orientation. */
	func float getMovingDirection()
		return 0
	end
	
	/** \brief Movement direction vector relative to view orientation. */
	func Vector getMovingDirectionVector()
		return null
	end
	
	/** \brief Set movement direction relative to view orientation. */
	func void setMovingDirection(float direction)
	end
	
	
	
	/** \brief Determine if the walk/run time linked controllers have to be reset. */
	func bool getResetTimeWalk()
		return false
	end
	
	/** \brief Set if the walk/run time linked controllers have to be reset. */
	func void setResetTimeWalk(bool reset)
	end
	/*@}*/
	
	
	
	/** \name Stance */
	/*@{*/
	/** \brief Adjustment time for stance in seconds. */
	func float getAdjustTimeStance()
		return 0
	end
	
	/** \brief Adjustment time for stance in seconds. */
	func void setAdjustTimeStance(float time)
	end
	
	/** \brief Adjustment range for stance. */
	func float getAdjustRangeStance()
		return 0
	end
	
	/** \brief Adjustment range for stance. */
	func void setAdjustRangeStance(float time)
	end
	
	/** \brief Stance value. */
	func float getStance()
		return 0
	end
	
	/** \brief Set stance value. */
	func void setStance(float stance)
	end
	
	/** \brief Stance goal value. */
	func float getStanceGoal()
		return 0
	end
	
	/** \brief Set stance goal value. */
	func void setStanceGoal(float stance)
	end
	/*@}*/
	
	
	
	/** \name Body tilting */
	/*@{*/
	/** \brief Determine if the actor can tilt the body. */
	func bool getCanTilt()
		return false
	end
	
	/** \brief Set if the actor can tilt the body. */
	func void setCanTilt(bool canTilt)
	end
	
	/** \brief Tilt mode. */
	func LocomotionTilt getTiltMode()
		return null
	end
	
	/** \brief Set tilt mode. */
	func void setTiltMode(LocomotionTilt mode)
	end
	
	/** \brief Set single collider collision test for tilt calculation or null if not set. */
	func void setCCTTiltSingle(ColliderCollisionTest collisionTest)
	end
	
	/** \brief Set front left collider collision test for tilt calculation or null if not set. */
	func void setCCTTiltFrontLeft(ColliderCollisionTest collisionTest)
	end
	
	/** \brief Set front right collider collision test for tilt calculation or null if not set. */
	func void setCCTTiltFrontRight(ColliderCollisionTest collisionTest)
	end
	
	/** \brief Set back left collider collision test for tilt calculation or null if not set. */
	func void setCCTTiltBackLeft(ColliderCollisionTest collisionTest)
	end
	
	/** \brief Set back right collider collision test for tilt calculation or NULL if not set. */
	func void setCCTTiltBackRight(ColliderCollisionTest collisionTest)
	end
	
	
	
	/** \brief Tilt up limit in degrees. */
	func float getLimitTiltUp()
		return 0
	end
	
	/** \brief Set tilt up limit in degrees. */
	func void setLimitTiltUp(float limit)
	end
	
	/** \brief Tilt down limit in degrees. */
	func float getLimitTiltDown()
		return 0
	end
	
	/** \brief Set tilt down limit in degrees. */
	func void setLimitTiltDown(float limit)
	end
	
	/** \brief Current tilt up/down angle in degrees. */
	func float getTiltVertical()
		return 0
	end
	
	/** \brief Set current tilt up/down angle in degrees. */
	func void setTiltVertical(float tiltVertical)
	end
	
	/** \brief Goal tilt up/down angle in degrees. */
	func float getTiltVerticalGoal()
		return 0
	end
	
	/** \brief Set goal tilt up/down angle in degrees. */
	func void setTiltVerticalGoal(float tiltVertical)
	end
	
	/** \brief Tilt up/down adjust time in seconds. */
	func float getAdjustTimeTiltVertical()
		return 0
	end
	
	/** \brief Set tilt up/down afjust time in seconds. */
	func void setAdjustTimeTiltVertical(float tiltVertical)
	end
	
	/** \brief Tilt up/down adjust range. */
	func float getAdjustRangeTiltVertical()
		return 0
	end
	
	/** \brief Set tilt up/down afjust range. */
	func void setAdjustRangeTiltVertical(float tiltVertical)
	end
	
	
	
	/** \brief Tilt left limit in degrees. */
	func float getLimitTiltLeft()
		return 0
	end
	
	/** \brief Set tilt left limit in degrees. */
	func void setLimitTiltLeft(float limit)
	end
	
	/** \brief Tilt right limit in degrees. */
	func float getLimitTiltRight()
		return 0
	end
	
	/** \brief Set Tilt right limit in degrees. */
	func void setLimitTiltRight(float limit)
	end
	
	/** \brief Current tilt left/right angle in degrees. */
	func float getTiltHorizontal()
		return 0
	end
	
	/** \brief Set current tilt left/right angle in degrees. */
	func void setTiltHorizontal(float tiltHorizontal)
	end
	
	/** \brief Goal tilt left/right angle in degrees. */
	func float getTiltHorizontalGoal()
		return 0
	end
	
	/** \brief Set goal tilt left/right angle in degrees. */
	func void setTiltHorizontalGoal(float tiltHorizontal)
	end
	
	/** \brief Tilt left/right adjust time in seconds. */
	func float getAdjustTimeTiltHorizontal()
		return 0
	end
	
	/** \brief Set tilt left/right afjust time in seconds. */
	func void setAdjustTimeTiltHorizontal(float tiltHorizontal)
	end
	
	/** \brief Tilt left/right adjust range. */
	func float getAdjustRangeTiltHorizontal()
		return 0
	end
	
	/** \brief Set tilt left/right afjust range. */
	func void setAdjustRangeTiltHorizontal(float tiltHorizontal)
	end
	
	
	
	/** \brief Tilt offset in meters. */
	func float getTiltOffset()
		return 0
	end
	
	/** \brief Set tilt offset in meters. */
	func void setTiltOffset(float offset)
	end
	/*@}*/
	
	
	
	/** \name State control and frame update */
	/*@{*/
	/**
	 * \brief Cancel input.
	 * 
	 * Resets these parameters:
	 * - Analog moving left-right: set value and goal to 0
	 * - Analog moving speed: set to 0
	 * - Turn left right: set to 0
	 * - Look left-right: set goal to value
	 * - Look up-down: set goal to value
	 * - Stance: set goal to value
	 */
	func void cancelInput()
	end
	
	/**
	 * \brief Cancel Movement.
	 * 
	 * Includes cancelInput().
	 * 
	 * Resets these parameters:
	 * - Linear velocity: set goal and value to 0
	 * - Moving speed: set to 0
	 * - Moving orientation: set to 0
	 * - Moving direction: set to 0
	 */
	func void cancelMovement()
	end
	
	/**
	 * \brief Cancel motion.
	 * 
	 * Includes cancelInput(), cancelMovement() and cancelTurnInPlace().
	 * 
	 * Resets these parameters:
	 * - Turning speed: set to 0
	 * - Turn in-place: set to 0
	 * - Tilt left-right: set goal to value
	 * - Tilt up-down: set goal to value
	 */
	func void cancelMotion()
	end
	
	/**
	 * \brief Cancel turning in-place.
	 * 
	 * Resets these parameters:
	 * - Turn in-place: set to 0
	 * - Is Turning: set to false
	 */
	func void cancelTurnInPlace()
	end
	
	/** \brief Force body adjustment. */
	func void forceBodyAdjustment()
	end
	
	
	
	/** \brief Update looking. */
	func void updateLooking(float elapsed)
	end
	
	/** \brief Apply states without interpolation or smoothing. */
	func void applyStates()
	end
	
	/** \brief Update locomotion. */
	func void updateLocomotion(float elapsed)
	end
	
	/** \brief Update is moving. */
	func void updateIsMoving()
	end
	
	/** \brief Update orientation. */
	func void updateOrientation(float elapsed)
	end
	
	/** \brief Update linear velocity. */
	func void updateLinearVelocity(float elapsed)
	end
	
	/** \brief Update stance. */
	func void updateStance(float elapsed)
	end
	
	/** \brief Update locomotion after physics calculations. */
	func void updatePostLocomotion(float elapsed)
	end
	
	/** \brief Update body tilting. */
	func void updateTilt(float elapsed)
	end
	
	/** \brief Update animator instance controllers if set with locomotion parameters. */
	func void updateAnimatorInstance(float elapsed)
	end
	
	/** \brief Update AI collider linear and angular velocity. */
	func void updateAICollider()
	end
	
	/**
	 * \brief Adjust orientation.
	 * \version 1.18
	 * 
	 * Adjusts various orientation parameters to rotate by a given angle ensuring all relationships
	 * between the various parameters are still correct. Use this method if you want to manually
	 * rotate an actor while keeping the looking and movement direction intact. In particular this
	 * method adjust the following parameters without taking limitations into account:
	 * - Orientation
	 * - Look horizontal
	 * - Look horizontal goal
	 * - Analog move horizontal
	 * - Turn horizontal
	 */
	func void adjustOrientation(float angle)
	end
	/*@}*/
	
	
	
	/** \name Animator and collider control */
	/*@{*/
	/** \brief Add or change controller mapping. */
	func void addControllerMapping(AnimatorController controller, LocomotionAttribute attribute)
	end
	
	/** \brief Remove controller mapping if present. */
	func void removeControllerMapping(AnimatorController controller)
	end
	
	/** \brief Remove all controller mappings. */
	func void removeAllControllerMappings()
	end
	
	
	
	/** \brief AI collider to update or NULL if not used. */
	func Collider getAICollider()
		return null
	end
	
	/** \brief Set AI collider to update or NULL if not used. */
	func void setAICollider(Collider collider)
	end
	
	/** \brief Determine if the angular velocity of the AI collider is updated. */
	func Collider getUpdateAIColliderAngularVelocity()
		return null
	end
	
	/** \brief Set if the angular velocity of the AI collider is updated. */
	func void setUpdateAIColliderAngularVelocity(bool updateAngularVelocity)
	end
	/*@}*/
	
	
	
	/** \name File Handling */
	/*@{*/
	/**
	 * \brief Read locomotion state from file reader.
	 * 
	 * Restores all parameters except:
	 * - Controller Mappings
	 * - Assigned AI Collider
	 */
	func void readFromFile(FileReader reader)
	end
	
	/**
	 * \brief Write locomotion state to file writer.
	 * 
	 * Saves all parameters except:
	 * - Controller Mappings
	 * - Assigned AI Collider
	 */
	func void writeToFile(FileWriter writer)
	end
	/*@}*/
end
