//////////////////////////////////////////////////////////////////////////////////
//                                                                              //
//                 This is a native class documentation                         //
//                                                                              //
//                  This file is used only for DoxyGen                          //
//                                                                              //
//////////////////////////////////////////////////////////////////////////////////

namespace Dragengine.Scenery

/**
 * \brief Immutable 4x4-component row major double precision matrix.
 * 
 * This is a native class. It can not be subclassed.
 * 
 */
fixed class DMatrix4
	/** \name Constructors */
	/*@{*/
	/** \brief Create identity matrix. */
	public func new()
	end
	
	/** \brief Create matrix from values. */
	public func new( float a11, float a12, float a13, float a14, float a21, float a22, float a23, float a24, float a31, float a32, float a33, float a34, float a41, float a42, float a43, float a44 )
	end
	
	/** \brief Create translation matrix. */
	public static func DMatrix4 newTranslation( DVector translation )
		return null
	end
	
	/** \brief Create translation matrix. */
	public static func DMatrix4 newTranslation( float tx, float ty, float tz )
		return null
	end
	
	/** \brief Create scaling matrix. */
	public static func DMatrix4 newScaling( DVector scaling )
		return null
	end
	
	/** \brief Create scaling matrix. */
	public static func DMatrix4 newScaling( float sx, float sy, float sz )
		return null
	end
	
	/** \brief Create rotation around the x axis matrix. */
	public static func DMatrix4 newRotationX( float rotation )
		return null
	end
	
	/** \brief Create rotation around the y axis matrix. */
	public static func DMatrix4 newRotationY( float rotation )
		return null
	end
	
	/** \brief Create rotation around the z axis matrix. */
	public static func DMatrix4 newRotationZ( float rotation )
		return null
	end
	
	/** \brief Create rotation matrix. */
	public static func DMatrix4 newRotation( DVector rotation )
		return null
	end
	
	/** \brief Create rotation matrix. */
	public static func DMatrix4 newRotation( float rx, float ry, float rz )
		return null
	end
	
	/** \brief Create scaling-rotation-translation matrix composing of a scaling followed by a rotation and a translation. */
	public static func DMatrix4 newSRT( DVector scaling, DVector rotation, DVector translation )
		return null
	end
	
	/** \brief Create rotation-translation matrix composing of a rotation followed by a translation. */
	public static func DMatrix4 newRT( DVector rotation, DVector translation )
		return null
	end
	
	/** \brief Create scale-view-up-translation matrix composing of a rotation followed by a world matrix. */
	public static func DMatrix4 newSVUT( DVector scaling, DVector view, DVector up, DVector translation )
		return null
	end
	
	/** \brief Create view-up matrix. */
	public static func DMatrix4 newVU( DVector view, DVector up )
		return null
	end
	
	/** \brief Create camera matrix. */
	public static func DMatrix4 newCamera( DVector position, DVector view, DVector up )
		return null
	end
	
	/** \brief Create world matrix. */
	public static func DMatrix4 newWorld( DVector position, DVector view, DVector up )
		return null
	end
	
	/** \brief Create world matrix. */
	public static func DMatrix4 newWorld( DVector position, Quaternion quaternion )
		return null
	end
	
	/** \brief Create projection matrix. */
	public static func DMatrix4 newProjection( int width, int height, float fov, float fovRatio, float znear, float zfar )
		return null
	end
	
	/** \brief Create an orthogonal matrix. */
	public static func DMatrix4 newOrtho( int left, int right, int top, int bottom, int znear, int zfar )
		return null
	end
	
	/** \brief Create rotation matrix from the given quaternion. */
	public static func DMatrix4 newFromQuaternion( Quaternion quaternion )
		return null
	end
	/*@}*/
	
	
	
	/** \name Management */
	/*@{*/
	/**
	 * \brief Value at row and colon.
	 * \throws EInvalidParam \em row is less than 0 or larger than 3.
	 * \throws EInvalidParam \em col is less than 0 or larger than 3.
	 */
	public func float getAt( int row, int col )
		return 0.0
	end
	
	/** \brief Value at (1,1). */
	public func float get11()
		return 0.0
	end
	
	/** \brief Value at (1,2). */
	public func float get12()
		return 0.0
	end
	
	/** \brief Value at (1,3). */
	public func float get13()
		return 0.0
	end
	
	/** \brief Value at (1,4). */
	public func float get14()
		return 0.0
	end
	
	/** \brief Value at (2,1). */
	public func float get21()
		return 0.0
	end
	
	/** \brief Value at (2,2). */
	public func float get22()
		return 0.0
	end
	
	/** \brief Value at (2,3). */
	public func float get23()
		return 0.0
	end
	
	/** \brief Value at (2,4). */
	public func float get24()
		return 0.0
	end
	
	/** \brief Value at (3,1). */
	public func float get31()
		return 0.0
	end
	
	/** \brief Value at (3,2). */
	public func float get32()
		return 0.0
	end
	
	/** \brief Value at (3,3). */
	public func float get33()
		return 0.0
	end
	
	/** \brief Value at (3,4). */
	public func float get34()
		return 0.0
	end
	
	/** \brief Value at (4,1). */
	public func float get41()
		return 0.0
	end
	
	/** \brief Value at (4,2). */
	public func float get42()
		return 0.0
	end
	
	/** \brief Value at (4,3). */
	public func float get43()
		return 0.0
	end
	
	/** \brief Value at (4,4). */
	public func float get44()
		return 0.0
	end
	
	/** \brief Vector composed of the third column. */
	public func DVector getViewVector()
		return null
	end
	
	/** \brief Vector composed of the second column. */
	public func DVector getUpVector()
		return null
	end
	
	/** \brief Vector composed of the first column. */
	public func DVector getRightVector()
		return null
	end
	
	/** \brief Vector composed of the fourth column. */
	public func DVector getPosition()
		return null
	end
	
	/** \brief Transform normal by matrix. */
	public func DVector transformNormal( DVector normal )
		return null
	end
	
	/** \brief Euler angles. */
	public func DVector getEulerAngles()
		return null
	end
	
	/** \brief Inverse. */
	public func DMatrix4 getInverse()
		return null
	end
	
	/**
	 * \brief Normalize matrix.
	 * 
	 * Returns matrix with scaling removed. Only normalized matrices are safe to be used
	 * with the getEulerAngles() and toQuaternion() calls since scaling interferes with
	 * the calculation.
	 * 
	 * This calls the same as this code
	 * \code{.ds}
	 * DMatrix.newWorld(m.getPosition(), getViewVector(), m.getUpVector())
	 * \endcode
	 * 
	 * but is safe against 0-scaling. In such a case a 0-rotation matrix is created.
	 */
	public func DMatrix4 normalize()
		return null
	end
	
	/** \brief Quaternion from upper 3x3 matrix. */
	public func Quaternion toQuaternion()
		return null
	end
	
	/** \brief the double precision matrix. */
	public func DMatrix toDMatrix()
		return null
	end
	
	/** \brief the single precision matrix. */
	public func Matrix4 toMatrix4()
		return null
	end
	
	/** \brief the single precision matrix. */
	public func Matrix toMatrix()
		return null
	end
	
	
	
	/**
	 * \brief Matrix is equal to another object.
	 * \details Implements Object.equals(Object).
	 * \returns \em true if \em other is of type DMatrix4 and components are equal.
	*/
	public func bool equals( Object other )
		return false
	end
	
	/**
	 * \brief Hash code for use as dictionary keys.
	 * \details Implements Object.hashCode().
	 */
	public func int hashCode()
		return 0
	end
	
	/**
	 * \brief String representation of matrix.
	 * \details Implements Object.toString()
	 */
	public func String toString()
		return null
	end
	/*@}*/
	
	
	
	/** \name File Handling */
	/*@{*/
	/** \brief Read matrix from a file reader. */
	static public func DMatrix4 readFromFile( FileReader reader )
		return null
	end
	
	/** \brief Write matrix to a file writer. */
	public func void writeToFile( FileWriter writer )
	end
	/*@}*/
	
	
	
	/** \name Operators */
	/*@{*/
	/** \brief Sum of matrix with another DMatrix4. */
	public func DMatrix4 +( DMatrix4 matrix )
		return null
	end
	
	/** \brief Difference of matrix and another DMatrix4. */
	public func DMatrix4 -( DMatrix4 matrix )
		return null
	end
	
	/** \brief Matrix multiplied by a factor. */
	public func DMatrix4 *( float k )
		return null
	end
	
	/**
	 * \brief Matrix divided by a factor.
	 * \throws EDivisionByZero \em scalar is \em 0.
	 */
	public func DMatrix4 /( float k )
		return null
	end
	
	/** \brief Matrix multiplied by another DMatrix4. */
	public func DMatrix4 *( DMatrix4 matrix )
		return null
	end
	
	/** \brief Vector transformed by matrix. */
	public func DVector *( DVector vector )
		return null
	end
	/*@}*/
end
