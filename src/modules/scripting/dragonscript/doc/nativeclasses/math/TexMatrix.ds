//////////////////////////////////////////////////////////////////////////////////
//                                                                              //
//                 This is a native class documentation                         //
//                                                                              //
//                  This file is used only for DoxyGen                          //
//                                                                              //
//////////////////////////////////////////////////////////////////////////////////

namespace Dragengine.Scenery

/**
 * \brief Immutable 3x3-component row major texture matrix.
 * 
 * This is a native class. It can not be subclassed.
 */
fixed class TexMatrix
	/** \name Constructors */
	/*@{*/
	/** \brief Create identity texture matrix. */
	func new()
	end
	
	/** \brief Create copy of a texture matrix. */
	func new(TexMatrix matrix)
	end
	
	/** \brief Create translation texture matrix. */
	static func TexMatrix newTranslation(Vector2 translation)
		return null
	end
	
	/** \brief Create translation texture matrix. */
	static func TexMatrix newTranslation(float u, float v)
		return null
	end
	
	/** \brief Create scaling texture matrix. */
	static func TexMatrix newScaling(Vector2 scaling)
		return null
	end
	
	/** \brief Create scaling texture matrix. */
	static func TexMatrix newScaling(float u, float v)
		return null
	end
	
	/** \brief Create rotation texture matrix. */
	static func TexMatrix newRotation(float rotation)
		return null
	end
	
	/**
	 * \brief Create shearing texture matrix.
	 * \version 1.29
	 */
	static func TexMatrix newShear(Vector2 shear)
		return null
	end
	
	/**
	 * \brief Create shearing texture matrix.
	 * \version 1.29
	 */
	static func TexMatrix newShear(float u, float v)
		return null
	end
	
	/** \brief Create scaling-translation texture matrix composing of a scaling followed by a translation. */
	static func TexMatrix newST(Vector2 scaling, Vector2 translation)
		return null
	end
	
	/** \brief Create scaling-translation texture matrix composing of a scaling followed by a translation. */
	static func TexMatrix newST(float scalingU, float scalingV, float translationU, float translationV)
		return null
	end
	
	/** \brief Create scaling-rotation-translation texture matrix composing of a scaling followed by a rotation and a translation. */
	static func TexMatrix newSRT(Vector2 scaling, float rotation, Vector2 translation)
		return null
	end
	
	/** \brief Create scaling-rotation-translation texture matrix composing of a scaling followed by a rotation and a translation. */
	static func TexMatrix newSRT(float scalingU, float scalingV, float rotation, float translationU, float translationV)
		return null
	end
	
	/**
	 * \brief Create rotation-translation texture matrix composing of a rotation followed by a translation.
	 * \version 1.29
	 */
	static func TexMatrix newRT(float rotation, Vector2 translation)
		return null
	end
	
	/**
	 * \brief Create rotation-translation texture matrix composing of a rotation followed by a translation.
	 * \version 1.29
	 */
	static func TexMatrix newRT(float rotation, float translationU, float translationV)
		return null
	end
	
	/**
	 * \brief Create center scaling-rotation-translation texture matrix.
	 * 
	 * Composing of a scaling followed by a rotation and a translation. Similar to newSRT but the
	 * coordinate system is first shifted to the center of the texture (0.5,0.5) before
	 * scale-rotate-translation is applied.
	 */
	static func TexMatrix newCenterSRT(Vector2 scaling, float rotation, Vector2 translation)
		return null
	end
	
	/**
	 * \brief Create center scaling-rotation-translation texture matrix.
	 * 
	 * Composing of a scaling followed by a rotation and a translation. Similar to newSRT but the
	 * coordinate system is first shifted to the center of the texture (0.5,0.5) before
	 * scale-rotate-translation is applied.
	 */
	static func TexMatrix newCenterSRT(float scalingU, float scalingV, float rotation, float translationU, float translationV)
		return null
	end
	
	/**
	 * \brief Create center rotation texture matrix.
	 * \version 1.29
	 * 
	 * Similar to newRotation but the coordinate system is first shifted to the center of the
	 * texture (0.5,0.5) before rotation is applied.
	 */
	static func TexMatrix newCenterRotation(float rotation)
		return null
	end
	/*@}*/
	
	
	
	/** \name Management */
	/*@{*/
	/**
	 * \brief Value at row and colon.
	 * \throws EInvalidParam \em row is less than 0 or larger than 2.
	 * \throws EInvalidParam \em col is less than 0 or larger than 2.
	 */
	func float getAt(int row, int col)
		return 0.0
	end
	
	/** \brief Value at (1,1). */
	func float get11()
		return 0.0
	end
	
	/** \brief Value at (1,2). */
	func float get12()
		return 0.0
	end
	
	/** \brief Value at (1,3). */
	func float get13()
		return 0.0
	end
	
	/** \brief Value at (2,1). */
	func float get21()
		return 0.0
	end
	
	/** \brief Value at (2,2). */
	func float get22()
		return 0.0
	end
	
	/** \brief Value at (2,3). */
	func float get23()
		return 0.0
	end
	
	/** \brief Value at (3,1). */
	func float get31()
		return 0.0
	end
	
	/** \brief Value at (3,2). */
	func float get32()
		return 0.0
	end
	
	/** \brief Value at (3,3). */
	func float get33()
		return 0.0
	end
	
	/** \brief Transform normal by matrix. */
	func Vector2 transformNormal(Vector2 normal)
		return null
	end
	
	/**
	 * \brief Vector composed of the third column.
	 * \version 1.29
	 */
	func Vector2 getPosition()
		return null
	end
	
	/**
	 * \brief Rotation angle in degrees.
	 * \version 1.29
	 */
	func float getRotationAngle()
		return 0.0
	end
	
	/**
	 * \brief Scaling.
	 * \version 1.29
	 */
	func Vector2 getScaling()
		return null
	end
	
	/**
	 * \brief Inverse.
	 * \version 1.29
	 */
	func TexMatrix getInverse()
		return null
	end
	
	/**
	 * \brief Matrix with only the rotational part.
	 * \version 1.29
	 */
	func TexMatrix getRotation()
		return null
	end
	
	/**
	 * \brief Normalize matrix.
	 * \version 1.29
	 * 
	 * Returns matrix with scaling removed. Only normalized matrices are safe to be used
	 * with the getRotationAngle() calls since scaling interferes with the calculation.
	 */
	func TexMatrix normalize()
		return null
	end
	
	/**
	 * \brief the single precision matrix.
	 * \version 1.29
	 */
	func TexMatrix2 toTexMatrix2()
		return null
	end
	
	
	
	/**
	 * \brief TexMatrix is equal to another object.
	 * \details Implements Object.equals(Object).
	 * \returns \em true if \em other is of type TexMatrix and components are equal.
	*/
	func bool equals(Object other)
		return false
	end
	
	/**
	 * \brief Hash code for use as dictionary keys.
	 * \details Implements Object.hashCode().
	 */
	func int hashCode()
		return 0
	end
	
	/**
	 * \brief String representation of texture matrix.
	 * \details Implements Object.toString()
	 */
	func String toString()
		return null
	end
	
	/**
	 * \brief String representation of texture matrix with precision.
	 * 
	 * Same as toString() except the count of digits of each component is precision.
	 * 
	 * \param precision Precision in digits in the range from 0 to 9 inclusive.
	 * \throws EInvalidParam precision is less than 0 or larger than 9.
	 */
	func String toString(int precision)
		return null
	end
	/*@}*/
	
	
	
	/** \name File Handling */
	/*@{*/
	/** \brief Read texture matrix from a file reader. */
	static func TexMatrix readFromFile(FileReader reader)
		return null
	end
	
	/** \brief Write texture matrix to a file writer. */
	func void writeToFile(FileWriter writer)
	end
	/*@}*/
	
	
	
	/** \name Operators */
	/*@{*/
	/** \brief Sum of matrix with another texture matrix. */
	func TexMatrix +(TexMatrix matrix)
		return null
	end
	
	/** \brief Difference of matrix and another texture matrix. */
	func TexMatrix -(TexMatrix matrix)
		return null
	end
	
	/** \brief Texture matrix multiplied by a factor. */
	func TexMatrix *(float k)
		return null
	end
	
	/**
	 * \brief Texture matrix divided by a factor.
	 * \throws EDivisionByZero \em scalar is \em 0.
	 */
	func TexMatrix /(float k)
		return null
	end
	
	/** \brief Texture matrix multiplied by another texture matrix. */
	func TexMatrix *(TexMatrix matrix)
		return null
	end
	
	/** \brief Vector transformed by texture matrix. */
	func Vector2 *(Vector2 texcoord)
		return null
	end
	
	/** \brief Vector transformed by texture matrix. */
	func Vector2 *(float u, float v)
		return null
	end
	/*@}*/
end
