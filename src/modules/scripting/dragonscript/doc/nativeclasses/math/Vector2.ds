//////////////////////////////////////////////////////////////////////////////////
//                                                                              //
//                 This is a native class documentation                         //
//                                                                              //
//                  This file is used only for DoxyGen                          //
//                                                                              //
//////////////////////////////////////////////////////////////////////////////////

namespace Dragengine.Scenery

pin Dragengine.Gui

/**
 * \brief Immutable 2-component vector.
 * 
 * This is a native class. It can not be subclassed.
 */
fixed class Vector2
	/** \name Constructors */
	/*@{*/
	/** \brief Create Vector2 with all components set to 0. */
	public func new()
	end
	
	/** \brief Create Vector2 using the specified components. */
	public func new( float x, float y )
	end
	
	/** \brief Create copy of a Vector2. */
	public func new( Vector2 v )
	end
	
	/** \brief Create Vector2 from Point. */
	public func new( Point p )
	end
	/*@}*/
	
	
	
	/** \name Management */
	/*@{*/
	/** \brief X-Component. */
	public func float getX()
		return 0.0
	end
	
	/** \brief Y-Component. */
	public func float getY()
		return 0.0
	end
	
	/** \brief Component by index (0=X, 1=Y). */
	public func float getComponentAt( int component )
		return 0.0
	end
	
	/** \brief Length. */
	public func float getLength()
		return 0.0
	end
	
	/**
	 * \brief Vector divided by length().
	 * \throws EDivisionByZero Length is \em 0.
	 */
	public func Vector2 normalize()
		return null
	end
	
	/** \brief Vector with absolute of all components. */
	public func Vector2 absolute()
		return null
	end
	
	/** \brief Vector with all components set to the smallest value of two vectors. */
	public func Vector2 smallest( Vector2 v )
		return null
	end
	
	/** \brief Vector with all components set to the largest value of two vectors. */
	public func Vector2 largest( Vector2 v )
		return null
	end
	
	/** \brief Vector with all components clamped to a range of two vectors. */
	public func Vector2 clamped( Vector2 min, Vector2 max )
		return null
	end
	
	/** \brief Convert to point rounding to the nearest integer value. */
	public func Point round()
		return null
	end
	
	/** \brief Two vectors are equal. */
	public func bool isEqualTo( Vector2 v, float delta )
		return false
	end
	
	/** \brief All coordinates are at least of a minimal value. */
	public func bool isAtLeast( float value )
		return false
	end
	
	/** \brief All coordinates are at most of a maximal value. */
	public func bool isAtMost( float value )
		return false
	end
	
	/** \brief Vector is equal to zero vector. */
	public func bool isZero()
		return false
	end
	
	
	
	/**
	 * \brief Vector is equal to another object.
	 * \details Implements Object.equals(Object).
	 * \returns \em true if \em other is of type Vector2 and components are equal.
	*/
	public func bool equals( Object other )
		return false
	end
	
	/**
	 * \brief Hash code for use as dictionary keys.
	 * \details Implements Object.hashCode().
	 */
	public func int hashCode()
		return 0
	end
	
	/**
	 * \brief String representation of vector.
	 * \details Implements Object.toString()
	 */
	public func String toString()
		return null
	end
	/*@}*/
	
	
	
	/** \name File Handling */
	/*@{*/
	/** \brief Read vector from a file reader. */
	static public func Vector2 readFromFile( FileReader reader )
		return null
	end
	
	/** \brief Write vector to a file writer. */
	public func void writeToFile( FileWriter writer )
	end
	/*@}*/
	
	
	
	/** \name Operators */
	/*@{*/
	/** \brief Negated vector. */
	public func Vector2 -()
		return null
	end
	
	/** \brief Sum of two vectors. */
	public func Vector2 +( Vector2 v )
		return null
	end
	
	/** \brief Difference between two vectors. */
	public func Vector2 -( Vector2 v )
		return null
	end
	
	/** \brief Vector multiplied by scalar. */
	public func Vector2 *( float scalar )
		return null
	end
	
	/**
	 * \brief Vector divided by scalar.
	 * \throws EDivisionByZero \em scalar is \em 0.
	 */
	public func Vector2 /( float scalar )
		return null
	end
	
	/** \brief Dot-Product between two vectors. */
	public func float *( Vector2 v )
		return 0.0
	end
	
	/** \brief Vector is less than another vector in all components. */
	public func bool <( Vector2 v )
		return false
	end
	
	/** \brief Vector is less than or equal to another vector in all components. */
	public func bool <=( Vector2 v )
		return false
	end
	
	/** \brief Vector is greater than another vector in all components. */
	public func bool >( Vector2 v )
		return false
	end
	
	/** \brief Vector is greater than or equal to another vector in all components. */
	public func bool >=( Vector2 v )
		return false
	end
	/*@}*/
end
