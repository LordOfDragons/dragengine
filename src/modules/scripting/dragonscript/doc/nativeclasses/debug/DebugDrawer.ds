//////////////////////////////////////////////////////////////////////////////////
//                                                                              //
//                 This is a native class documentation                         //
//                                                                              //
//                  This file is used only for DoxyGen                          //
//                                                                              //
//////////////////////////////////////////////////////////////////////////////////

namespace Dragengine.Scenery

pin Dragengine.Gui


/**
 * \brief Debug drawer.
 * 
 * This is a native class.
 */
class DebugDrawer
	/** \name Constructors */
	/*@{*/
	/** \brief Create debug drawer. */
	public func new()
	end
	/*@}*/
	
	
	
	/** \name Management */
	/*@{*/
	/** \brief Pposition. */
	public func DVector getPosition()
		return null
	end
	
	/** \brief Set position. */
	public func void setPosition( DVector position )
	end
	
	/** \brief Orientation. */
	public func Quaternion getOrientation()
		return null
	end
	
	/** \brief Set orientation. */
	public func void setOrientation( Quaternion orientation )
	end
	
	/** \brief Scaling. */
	public func Vector getScale()
		return null
	end
	
	/** \brief Set scaling. */
	public func void setScale( Vector scale )
	end
	
	
	
	/** \brief Debug drawer is visible. */
	public func bool getVisible()
		return false
	end
	
	/** \brief Set if debug drawer is visible. */
	public func void setVisible( bool visible )
	end
	
	/** \brief Debug drawer is rendered in x-ray mode. */
	public func bool getXRay()
		return false
	end
	
	/** \brief Set if debug drawer is rendered in x-ray mode. */
	public func void setXRay( bool xray )
	end
	/*@}*/
	
	
	
	/** \name Shapes */
	/*@{*/
	/** \brief Number of shapes. */
	public func int getShapeCount()
		return 0
	end
	
	/** \brief Set number of shapes. */
	public func void setShapeCount( int count )
	end
	
	
	
	/**
	 * \brief Set shae position.
	 * \throws EOutOfBoundary \em shape is less than 0 or larger than or equal to getShapeCount().
	 */
	public func void shapeSetPosition( int shape, Vector position )
	end
	
	/**
	 * \brief Set shape orientation.
	 * \throws EOutOfBoundary \em shape is less than 0 or larger than or equal to getShapeCount().
	 */
	public func void shapeSetOrientation( int shape, Quaternion orientation )
	end
	
	/**
	 * \brief Set shape scaling.
	 * \throws EOutOfBoundary \em shape is less than 0 or larger than or equal to getShapeCount().
	 */
	public func void shapeSetScale( int shape, Vector scale )
	end
	
	
	
	/**
	 * \brief Set shape shape list.
	 * \throws EOutOfBoundary \em shape is less than 0 or larger than or equal to getShapeCount().
	 */
	public func void shapeSetShapes( int shape, ShapeList shapes )
	end
	
	/**
	 * \brief Remove all shapes from shape.
	 * \throws EOutOfBoundary \em shape is less than 0 or larger than or equal to getShapeCount().
	 */
	public func void shapeRemoveAllShapes( int shape )
	end
	
	
	
	/**
	 * \brief Set shape edge color.
	 * \throws EOutOfBoundary \em shape is less than 0 or larger than or equal to getShapeCount().
	 */
	public func void shapeSetEdgeColor( int shape, Color color )
	end
	
	/**
	 * \brief Set shape fill color.
	 * \throws EOutOfBoundary \em shape is less than 0 or larger than or equal to getShapeCount().
	 */
	public func void shapeSetFillColor( int shape, Color color )
	end
	/*@}*/
end
