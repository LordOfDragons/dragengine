//////////////////////////////////////////////////////////////////////////////////
//                                                                              //
//                 This is a native class documentation                         //
//                                                                              //
//                  This file is used only for DoxyGen                          //
//                                                                              //
//////////////////////////////////////////////////////////////////////////////////

namespace Dragengine.Scenery

pin Dragengine.Gui


/**
 * \brief Speaker.
 *
 * Defines a sound or music emmiting source in a world similar to a speaker. Every speaker can
 * play a sound file once or in a loop multiple times as well as music. To avoid a lot of adding
 * and removing of speakers they can be muted individually preventing them from emitting sound
 * or music without removing them. Speakers usually act like a point source emitting sound in
 * all directions. Optionally the speaker can be set to be directed like a spot light emitting
 * sound only in one direction.
 * 
 * The range and roll-off factor is used to shape the attenuation of the speaker. The roll-off
 * factor works similar to the Inverse Distance attenuation model. A value of 1 indicates
 * physically realistic behavior. Values above 1 produce stronger attenuation while values
 * less than 1 produce weaker attenuation. Beyond the range the sound becomes fully inaudible.
 * The sound modules ensure the sound is attenuated in a way it reaches 0 at the range boundary.
 * Typically this is done with a linear scaling across the entire range but can be chosen by
 * the audio module to produce best results.
 * 
 * The best way to set these parameters is to start with the default values to get a physically
 * realistic sound attenuation. Then adjust the range to be smaller to reduce the number of
 * speakers affecting the listener at the same time. Doing so usually saves processing time.
 * If the range becomes small it might be required to alter the roll-off to compensate. Usually
 * though there is no need to change the roll-off value.
 * 
 * This is a native class.
 */
class Speaker
	/** \name Constructors */
	/*@{*/
	/** \brief Create speaker. */
	func new()
	end
	/*@}*/
	
	
	
	/** \name Management */
	/*@{*/
	/** \brief Type. */
	func SpeakerType getType()
		return null
	end
	
	/** \brief Set type. */
	func void setType(SpeakerType type)
	end
	
	/** \brief Sound or \em null if not set. */
	func Sound getSound()
		return null
	end
	
	/** \brief Set sound or \em null to not set. */
	func void setSound(Sound sound)
	end
	
	/** \brief Synthesizer or \em null if not set. */
	func SynthesizerInstance getSynthesizer()
		return null
	end
	
	/** \brief Set synthesizer or \em null to not set. */
	func void setSynthesizer(SynthesizerInstance synthesizer)
	end
	
	/** \brief Video player or \em null if not set. */
	func VideoPlayer getVideoPlayer()
		return null
	end
	
	/** \brief Set video player or \em null to not set. */
	func void setVideoPlayer(VideoPlayer videoPlayer)
	end
	
	/** \brief Position. */
	func DVector getPosition()
		return null
	end
	
	/** \brief Set position. */
	func void setPosition(DVector position)
	end
	
	/** \brief Orientation. */
	func Quaternion getOrientation()
		return null
	end
	
	/** \brief Set orientation. */
	func void setOrientation(Quaternion orientation)
	end
	
	/** \brief Velocity in m/s. */
	func Vector getVelocity()
		return null
	end
	
	/** \brief Set velocity in m/s. */
	func void setVelocity(Vector velocity)
	end
	
	
	
	/** \brief Speaker is muted. */
	func bool getMuted()
		return false
	end
	
	/** \brief Set if speaker is muted. */
	func void setMuted(bool muted)
	end
	
	/** \brief Sound is looping. */
	func bool getLooping()
		return false
	end
	
	/** \brief Set if sound is looping. */
	func void setLooping(bool looping)
	end
	
	/** \brief Play speed. */
	func float getPlaySpeed()
		return 0.0
	end
	
	/** \brief Set play speed. */
	func void setPlaySpeed(float playSpeed)
	end
	
	/** \brief Volume. */
	func float getVolume()
		return 0.0
	end
	
	/** \brief Set volume. */
	func void setVolume(float volume)
	end
	
	
	
	/** \brief Range in meters beyond which the sound is inaudible. */
	func float getRange()
		return 0.0
	end
	
	/** \brief Set range in meters beyond which the sound is inaudible. */
	func void setRange(float range)
	end
	
	/**
	 * \brief Roll off factor.
	 * 
	 * 1 is physically realistic. Larger than 1 applies stronger attenuation. Smaller values
	 * apply weaker attenuation.
	 */
	func float getRollOff()
		return 0.0
	end
	
	/**
	 * \brief Set roll off factor.
	 * 
	 * 1 is physically realistic. Larger than 1 applies stronger attenuation. Smaller values
	 * apply weaker attenuation.
	 */
	func void setRollOff(float rollOff)
	end
	
	/**
	 * \brief Distance offset for attenuation calculation.
	 * \version 1.12
	 * 
	 * For use by distance sounds. Offsets the true distance to the sound source for attenuation
	 * calculation to make the sound appear coming from far away. Requires increasing the volume
	 * to compensate for the distance increased attenuation.
	 */
	func float getDistanceOffset()
		return 0.0
	end
	
	/**
	 * \brief Set distance offset for attenuation calculation.
	 * \version 1.12
	 * 
	 * For use by distance sounds. Offsets the true distance to the sound source for attenuation
	 * calculation to make the sound appear coming from far away. Requires increasing the volume
	 * to compensate for the distance increased attenuation.
	 */
	func void setDistanceOffset(float distanceOffset)
	end
	
	/** \brief Sound generation shape. */
	func ShapeList getShape()
		return null
	end
	
	/** \brief Set sound generation shape. */
	func void setShape(ShapeList shape)
	end
	
	/** \brief Layer mask for visibility masking. */
	func LayerMask getLayerMask()
		return null
	end
	
	/** \brief Set layer mask for visibility masking. */
	func void setLayerMask(LayerMask layerMask)
	end
	
	
	
	/** \brief Object owning the speaker for use with SoundLevelMeter or \em null if not used. */
	func Object getOwner()
		return null
	end
	
	/** \brief Set object owning the speaker for use with SoundLevelMeter or \em null if not used. */
	func void setOwner(Object owner)
	end
	/*@}*/
	
	
	
	/** \name Playback */
	/*@{*/
	/** \brief Start play position in samples. */
	func int getPlayFrom()
		return 0
	end
	
	/** \brief End play position in samples. */
	func int getPlayTo()
		return 0
	end
	
	/** \brief Set play position in samples. */
	func void setPlayPosition(int playFrom, int playTo)
	end
	
	
	
	/** \brief Speaker is playing. */
	func bool getPlaying()
		return false
	end
	
	/** \brief Speaker is paused. */
	func bool getPaused()
		return false
	end
	
	/** \brief Speaker is stopped. */
	func bool getStopped()
		return false
	end
	
	/** \brief Start playing. */
	func void play()
	end
	
	/** \brief Stop playing. */
	func void stop()
	end
	
	/** \brief Pause playing. */
	func void pause()
	end
	
	
	
	/**
	 * \brief Speaker is equal to another object.
	 * \details Implements Object.equals(Object).
	 * \returns \em true if \em other is of type Speaker and both point to the same engine speaker.
	 */
	func bool equals(Object other)
		return false
	end
	
	/**
	 * \brief Hash code for use as dictionary keys.
	 * \details Implements Object.hashCode().
	 */
	func int hashCode()
		return 0
	end
	/*@}*/
end
