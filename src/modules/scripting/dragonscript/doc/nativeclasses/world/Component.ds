//////////////////////////////////////////////////////////////////////////////////
//                                                                              //
//                 This is a native class documentation                         //
//                                                                              //
//                  This file is used only for DoxyGen                          //
//                                                                              //
//////////////////////////////////////////////////////////////////////////////////

namespace Dragengine.Scenery

/**
 * \brief Component.
 * 
 * This is a native class.
 */
class Component
	/** \name Constructors */
	/*@{*/
	/** \brief Create component. */
	func new()
	end
	
	/** \brief Create component. */
	func new(Model model, Skin skin)
	end
	/*@}*/
	
	
	
	/** \name Management */
	/*@{*/
	/** \brief Position. */
	func DVector getPosition()
		return null
	end
	
	/** \brief Set position. */
	func void setPosition(DVector position)
	end
	
	/** \brief Orientation. */
	func Quaternion getOrientation()
		return null
	end
	
	/** \brief Set orientation. */
	func void setOrientation(Quaternion orientation)
	end
	
	/** \brief Scaling. */
	func Vector getScaling()
		return null
	end
	
	/** \brief Set scaling. */
	func void setScaling(Vector scaling)
	end
	
	/** \brief Matrix. */
	func DMatrix getMatrix()
		return null
	end
	
	/** \brief Inverse matrix. */
	func DMatrix getInverseMatrix()
		return null
	end
	
	/** \brief Component is visible. */
	func bool getVisible()
		return false
	end
	
	/** \brief Set if component is visible. */
	func void setVisible(bool visible)
	end
	
	
	
	/** \brief Model or \em null if not set. */
	func Model getModel()
		return null
	end
	
	/**
	 * \brief Set model or \em null if not set.
	 * \details Textures are reset. To keep textures use setModelKeepTextures.
	 */
	func void setModel(Model model)
	end
	
	/**
	 * \brief Set model or \em null if not set while keeping textures.
	 * 
	 * Restores current state of textures after switching model if possible.
	 * Use this method instead of setModel if you set textures on the component
	 * and the new model is similar enough to match. Textures not existing anymore
	 * are not restored.
	 */
	func void setModelKeepTextures(Model model)
	end
	
	/** \brief Skin or \em null if not set. */
	func Skin getSkin()
		return null
	end
	
	/** \brief Set skin or \em null if not set. */
	func void setSkin(Skin skin)
	end
	
	/** \brief Set model and skin or \em null if not set. */
	func void setModelAndSkin(Model model, Skin skin)
	end
	
	/** \brief Rig or \em null if not set. */
	func Rig getRig()
		return null
	end
	
	/** \brief Set rig or \em null if not set. */
	func void setRig(Rig rig)
	end
	
	/** \brief Occlusion mesh or \em null if not set. */
	func OcclusionMesh getOcclusionMesh()
		return null
	end
	
	/** \brief Set occlusion mesh or \em null if not set. */
	func void setOcclusionMesh(OcclusionMesh occlusionMesh)
	end
	
	/** \brief Audio model or \em null if not set. */
	func Model getAudioModel()
		return null
	end
	
	/**
	 * \brief Set audio model or \em null if not set.
	 * 
	 * Shares textures with assigned model.
	 */
	func void setAudioModel(Model model)
	end
	
	/** \brief Layer mask for visibility masking. */
	func LayerMask getLayerMask()
		return null
	end
	
	/** \brief Set layer mask for visibility masking. */
	func void setLayerMask(LayerMask layerMask)
	end
	
	/** \brief Dynamic skin or \em null if not set. */
	func DynamicSkin getDynamicSkin()
		return null
	end
	
	/** \brief Set dynamic skin or \em null if not set. */
	func void setDynamicSkin(DynamicSkin dynamicSkin)
	end
	
	
	
	/** \brief Update bone matrices. */
	func void updateBones()
	end
	
	/** \brief Copy bone states to matching bones states of another component. */
	func void copyBonesToComponent(Component component)
	end
	/*@}*/
	
	
	
	/** \name Textures */
	/*@{*/
	/** \brief Count of textures in the model or 0 if no model is set. */
	func int getTextureCount()
		return 0
	end
	
	/** \brief Index of named texture or -1 if not found or model is not set. */
	func int indexOfTextureNamed(String name)
		return 0
	end
	
	/**
	 * \brief Name of texture.
	 * \version 1.9
	 * \throws EOutOfBoundary \em texture is less than 0 or greater than or equal to getTextureCount().
	 */
	func String getTextureNameAt(int texture)
		return null
	end
	
	/**
	 * \brief Skin of texture or \em null if not used.
	 * \throws EOutOfBoundary \em texture is less than 0 or greater than or equal to getTextureCount().
	 */
	func Skin getTextureSkinAt(int texture)
		return null
	end
	
	/**
	 * \brief Texture number of texture or \em null if not used.
	 * \throws EOutOfBoundary \em texture is less than 0 or greater than or equal to getTextureCount().
	 */
	func int getTextureTextureAt(int texture)
		return 0
	end
	
	/**
	 * \brief Set skin of texture or \em null if not set.
	 * \throws EOutOfBoundary \em texture is less than 0 or greater than or equal to getTextureCount().
	 */
	func void setTextureSkinAt(int texture, Skin skin, int skinTexture)
	end
	
	/**
	 * \brief Texture coordinates transformation of texture.
	 * \throws EOutOfBoundary \em texture is less than 0 or greater than or equal to getTextureCount().
	 */
	func TexMatrix2 getTextureTransformAt(int texture)
		return null
	end
	
	/**
	 * \brief Set texture coordinates transformation of texture.
	 * \throws EOutOfBoundary \em texture is less than 0 or greater than or equal to getTextureCount().
	 */
	func void setTextureTransformAt(int texture, TexMatrix2 transform)
	end
	
	/**
	 * \brief Dynamic skin of texture or \em null if not set.
	 * \throws EOutOfBoundary \em texture is less than 0 or greater than or equal to getTextureCount().
	 */
	func DynamicSkin getTextureDynamicSkinAt(int texture)
		return null
	end
	
	/**
	 * \brief Set dynamic skin of texture or \em null if not set.
	 * \throws EOutOfBoundary \em texture is less than 0 or greater than or equal to getTextureCount().
	 */
	func void setTextureDynamicSkinAt(int texture, DynamicSkin dynamicSkin)
	end
	/*@}*/
	
	
	
	/** \name Bones */
	/*@{*/
	/** \brief Number of bones. */
	func int getBoneCount()
		return 0
	end
	
	/** \brief Index of named bone or -1 if not found in rig or rig is not set. */
	func int indexOfBoneNamed(String name)
		return 0
	end
	
	/**
	 * \brief Name of bone.
	 * \throws EInvalidParam \em bone is less than 0 or larger than or equal to GetBoneCount().
	 */
	func String boneGetName(int index)
		return null
	end
	
	/**
	 * \brief Position of bone relative to bone origin matrix.
	 * \throws EInvalidParam \em bone is less than 0 or larger than or equal to GetBoneCount().
	 */
	func Vector boneGetPosition(int bone)
		return null
	end
	
	/**
	 * \brief Set position of the bone relative to bone origin matrix.
	 * \throws EInvalidParam \em bone is less than 0 or larger than or equal to GetBoneCount().
	 */
	func void boneSetPosition(int bone, Vector position)
	end
	
	/**
	 * \brief Rotation of bone relative to bone origin matrix.
	 * \throws EInvalidParam \em bone is less than 0 or larger than or equal to GetBoneCount().
	 */
	func Quaternion boneGetRotation(int bone)
		return null
	end
	
	/**
	 * \brief Set rotation of the bone relative to bone origin matrix.
	 * \throws EInvalidParam \em bone is less than 0 or larger than or equal to GetBoneCount().
	 */
	func void boneSetRotation(int bone, Quaternion rotation)
	end
	
	/**
	 * \brief Scale of bone relative to bone origin matrix.
	 * \version 1.28
	 * \throws EInvalidParam \em bone is less than 0 or larger than or equal to GetBoneCount().
	 */
	func Vector boneGetScale(int bone)
		return null
	end
	
	/**
	 * \brief Set scale of bone relative to bone origin matrix.
	 * \version 1.28
	 * \throws EInvalidParam \em bone is less than 0 or larger than or equal to GetBoneCount().
	 */
	func void boneSetScale(int bone, Vector scale)
	end
	
	/**
	 * \brief Bone matrix relative to component space.
	 * \throws EInvalidParam \em bone is less than 0 or larger than or equal to GetBoneCount().
	 */
	func Matrix boneGetMatrix(int bone)
		return null
	end
	
	/**
	 * \brief Inverse bone matrix relative to component space.
	 * \throws EInvalidParam \em bone is less than 0 or larger than or equal to GetBoneCount().
	 */
	func Matrix boneGetInverseMatrix(int bone)
		return null
	end
	
	/**
	 * \brief Bone origin matrix in component space.
	 * \details The bone origina matrix is the matrix in component space where the bone
	 *          has no position, no rotation and 1 scaling.
	 * \throws EInvalidParam \em bone is less than 0 or larger than or equal to GetBoneCount().
	 */
	func Matrix getBoneOriginMatrix(int bone)
		return null
	end
	
	/**
	 * \brief Inverse bone origin matrix in component space.
	 * \details The bone origina matrix is the matrix in component space where the bone
	 *          has no position, no rotation and 1 scaling.
	 * \throws EInvalidParam \em bone is less than 0 or larger than or equal to GetBoneCount().
	 */
	func Matrix getBoneOriginInverseMatrix(int bone)
		return null
	end
	
	
	
	/**
	 * \brief Position of bone relative to bone origin matrix.
	 * \throws EInvalidParam No bone with name \em bone found.
	 * \deprecated Use boneGetPosition(indexOfBoneNamed(bone))
	 */
	func Vector getBonePosition(String bone)
		return null
	end
	
	/**
	 * \brief Set position of the bone relative to bone origin matrix.
	 * \throws EInvalidParam No bone with name \em boneName found.
	 * \deprecated Use boneSetPosition(indexOfBoneNamed(bone), position)
	 */
	func void setBonePosition(String bone, Vector position)
	end
	
	/**
	 * \brief Rotation of bone relative to bone origin matrix.
	 * \throws EInvalidParam No bone with name \em boneName found.
	 * \deprecated Use boneSetRotation(indexOfBoneNamed(bone), position)
	 */
	func Quaternion getBoneRotation(String bone)
		return null
	end
	
	/**
	 * \brief Set rotation of the bone relative to bone origin matrix.
	 * \throws EInvalidParam No bone with name \em boneName found.
	 * \deprecated Use boneSetRotation(indexOfBoneNamed(bone), rotation)
	 */
	func void setBoneRotation(String bone, Quaternion rotation)
	end
	
	/**
	 * \brief Bone matrix relative to component space.
	 * \throws EInvalidParam No bone with name \em boneName found.
	 */
	func Matrix getBoneMatrix(String bone)
		return null
	end
	
	/**
	 * \brief Inverse bone matrix relative to component space.
	 * \throws EInvalidParam No bone with name \em boneName found.
	 */
	func Matrix getBoneInverseMatrix(String bone)
		return null
	end
	/*@}*/
	
	
	
	/** \name Vertex position sets */
	/*@{*/
	/**
	 * \brief Count of vertex position sets.
	 * \version 1.17
	 */
	func int getVertexPositionSetCount()
		return 0
	end
	
	/**
	 * \brief Index of vertex position set with name or -1 if not found.
	 * \version 1.17
	 */
	func int indexOfVertexPositionSetNamed(String name)
		return 0
	end
	
	/**
	 * \brief Name of vertex position set at index.
	 * \version 1.17
	 * \throws EOutOfBoundary Index is less than 0.
	 * \throws EOutOfBoundary Index is larger than or equal to getVertexPositionSetCount().
	 */
	func String vertexPositionSetGetNameAt(int index)
		return null
	end
	
	/**
	 * \brief Weight of vertex position set at index.
	 * \version 1.17
	 * \throws EOutOfBoundary Index is less than 0.
	 * \throws EOutOfBoundary Index is larger than or equal to getVertexPositionSetCount().
	 */
	func float vertexPositionSetGetWeightAt(int index)
		return 0.0
	end
	
	/**
	 * \brief Weight of vertex position set by name.
	 * \version 1.17
	 * \throws EOutOfBoundary Vertex position set with name is absent.
	 */
	func float vertexPositionSetGetWeightNamed(String name)
		return 0.0
	end
	
	/**
	 * \brief Set weight of vertex position set at index.
	 * \version 1.17
	 * \throws EOutOfBoundary Index is less than 0.
	 * \throws EOutOfBoundary Index is larger than or equal to getVertexPositionSetCount().
	 */
	func void vertexPositionSetSetWeightAt(int index, float weight)
	end
	
	/**
	 * \brief Set weight of vertex position set by name.
	 * \version 1.17
	 * \throws EOutOfBoundary Vertex position set with name is absent.
	 */
	func void vertexPositionSetSetWeightNamed(String name, float weight)
	end
	
	/** \brief Movement hint. */
	func ComponentHintMovement getHintMovement()
		return null
	end
	
	/** \brief Set movement hint. */
	func void setHintMovement(ComponentHintMovement hint)
	end
	
	/**
	 * \brief Enable GI in graphic module if supported.
	 * \version 1.19
	 */
	func bool getEnableGI()
		return false
	end
	
	/**
	 * \brief Set if enabled for GI in graphic module if supported.
	 * \version 1.19
	 */
	func void setEnableGI( bool enable )
	end
	
	/**
	 * \brief GI important hint.
	 * \version 1.19
	 * 
	 * Value is in the range from 0 (very unimportant) to 4 (very important). This hint
	 * can be used by the graphic module to improve performance by excluding components
	 * with a GI important below a user chosen threashold. The default important is 4.
	 */
	func int getHintGIImportance()
		return 0
	end
	
	/**
	 * \brief Set GI important hint.
	 * \version 1.19
	 * 
	 * Value is in the range from 0 (very unimportant) to 4 (very important). This hint
	 * can be used by the graphic module to improve performance by excluding components
	 * with a GI important below a user chosen threshold.
	 */
	func void setHintGIImportance( int importance )
	end
	/*@}*/
	
	
	
	/** \name Decals */
	/*@{*/
	/** \brief Number of decals. */
	func int getDecalCount()
		return 0
	end
	
	/** \brief Add decal. */
	func void addDecal(Decal decal)
	end
	
	/** \brief Remove decal. */
	func void removeDecal(Decal decal)
	end
	
	/** \brief Remove all decals. */
	func void removeAllDecals()
	end
	
	/**
	 * \brief Visit decals with block with parameter Decal.
	 * 
	 * \warning Do not add or remove decals from inside the block.
	 */
	func void forEachDecal(Block ablock)
	end
	/*@}*/
end
