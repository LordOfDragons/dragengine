//////////////////////////////////////////////////////////////////////////////////
//                                                                              //
//                 This is a native class documentation                         //
//                                                                              //
//                  This file is used only for DoxyGen                          //
//                                                                              //
//////////////////////////////////////////////////////////////////////////////////

namespace Dragengine.Scenery

pin Dragengine.Gui
pin Dragengine.Networking


/**
 * \brief World.
 * 
 * This is a native class.
 */
class World
	/** \name Constructors */
	/*@{*/
	/** \brief Create world. */
	func new()
	end
	/*@}*/
	
	
	
	/** \name Management */
	/*@{*/
	/** \brief Detect collisions. */
	func void detectCollisions( float elapsed )
	end
	
	/** \brief Update the world. */
	func void update( float elapsed )
	end
	
	/** \brief Size of the world. */
	func DVector getSize()
		return null
	end
	
	/** \brief Set size of the world. */
	func void setSize( DVector size )
	end
	/*@}*/
	
	
	
	/** \name Physics */
	/*@{*/
	/** \brief Gravity vector. */
	func Vector getGravity()
		return null
	end
	
	/** \brief Set gravity vector. */
	func void setGravity( Vector gravity )
	end
	/*@}*/
	
	
	
	/** \name Audio */
	/*@{*/
	/**
	 * \brief Gain to multiply all speakers with.
	 * \version 1.16
	 */
	func float getSpeakerGain()
		return 0.0
	end
	
	/**
	 * \brief Set gain to multiply all speakers with.
	 * \version 1.16
	 */
	func void setSpeakerGain(float gain)
	end
	/*@}*/
	
	
	
	/** \name Lighting */
	/*@{*/
	/** \brief All lights are disabled rendering world in full bright. */
	func bool getDisableLights()
		return false
	end
	
	/** \brief Set if all lights are disabled rendering world in full bright. */
	func void setDisableLights(bool disable)
	end
	
	/** \brief Ambient light. */
	func Color getAmbientLight()
		return null
	end
	
	/** \brief Set ambient light. */
	func void setAmbientLight(Color light)
	end
	
	/** \brief Light color matrix. */
	func Matrix getLightColorMatrix()
		return null
	end
	
	/** \brief Set light color matrix. */
	func void setLightColorMatrix( Matrix matrix )
	end
	/*@}*/
	
	
	
	/** \name Skies */
	/*@{*/
	/** \brief Number of skies. */
	func int getSkyCount()
		return 0
	end
	
	/** \brief Add sky. */
	func void addSky( SkyInstance sky )
	end
	
	/** \brief Remove sky. */
	func void removeSky( SkyInstance sky )
	end
	
	/** \brief Remove all skies. */
	func void removeAllSkies()
	end
	/*@}*/
	
	
	
	/** \name Height terrain */
	/*@{*/
	/** \brief Hheight terrain or \em null if not set. */
	func HeightTerrain getHeightTerrain()
		return null
	end
	
	/** \brief Set height terrain or \em null if not set. */
	func void setHeightTerrain( HeightTerrain heightTerrain )
	end
	/*@}*/
	
	
	
	/** \name Cameras */
	/*@{*/
	/** \brief Number of camera. */
	func int getCameraCount()
		return 0
	end
	
	/** \brief Add camera. */
	func void addCamera( Camera camera )
	end
	
	/** \brief Remove camera. */
	func void removeCamera( Camera camera )
	end
	
	/** \brief Remove all cameras. */
	func void removeAllCameras()
	end
	/*@}*/
	
	
	
	/** \name Speakers */
	/*@{*/
	/** \brief Number of speakers. */
	func int getSpeakerCount()
		return 0
	end
	
	/** \brief Add speaker. */
	func void addSpeaker( Speaker speaker )
	end
	
	/** \brief Remove speaker. */
	func void removeSpeaker( Speaker speaker )
	end
	
	/** \brief Remove all speakers. */
	func void removeAllSpeakers()
	end
	/*@}*/
	
	
	
	/** \name Microphones */
	/*@{*/
	/** \brief Number of microphones. */
	func int getMicrophoneCount()
		return 0
	end
	
	/** \brief Add microphone. */
	func void addMicrophone( Microphone microphone )
	end
	
	/** \brief Remove microphone. */
	func void removeMicrophone( Microphone microphone )
	end
	
	/** \brief Remove all microphones. */
	func void removeAllMicrophones()
	end
	/*@}*/
	
	
	
	/** \name Sound level meters */
	/*@{*/
	/** \brief Number of sound level meters. */
	func int getSoundLevelMeterCount()
		return 0
	end
	
	/** \brief Add sound level meter. */
	func void addSoundLevelMeter( SoundLevelMeter soundLevelMeter )
	end
	
	/** \brief Remove sound level meter. */
	func void removeSoundLevelMeter( SoundLevelMeter soundLevelMeter )
	end
	
	/** \brief Remove all sound level meters. */
	func void removeAllSoundLevelMeters()
	end
	/*@}*/
	
	
	
	/** \name Network states */
	/*@{*/
	/** \brief Number of network states. */
	func int getNetworkStateCount()
		return 0
	end
	
	/** \brief Add network state. */
	func void addNetworkState( NetworkState networkState )
	end
	
	/** \brief Remove network state. */
	func void removeNetworkState( NetworkState networkState )
	end
	
	/** \brief Remove all network states. */
	func void removeAllNetworkStates()
	end
	/*@}*/
	
	
	
	/** \name Components */
	/*@{*/
	/** \brief Number of components. */
	func int getComponentCount()
		return 0
	end
	
	/** \brief Add component. */
	func void addComponent(Component comp)
	end
	
	/** \brief Remove component. */
	func void removeComponent(Component comp)
	end
	
	/** \brief Remove all components. */
	func void removeAllComponents()
	end
	/*@}*/
	
	
	
	/** \name Lights */
	/*@{*/
	/** \brief Number of lights. */
	func int getLightCount()
		return 0
	end
	
	/** \brief Add light. */
	func void addLight(Light light)
	end
	
	/** \brief Remove light. */
	func void removeLight(Light light)
	end
	
	/** \brief Remove all lights. */
	func void removeAllLights()
	end
	/*@}*/
	
	
	
	/** \name Colliders */
	/*@{*/
	/** \brief Number of colliders. */
	func int getColliderCount()
		return 0
	end
	
	/** \brief Add collider. */
	func void addCollider( Collider collider )
	end
	
	/** \brief Remove collider. */
	func void removeCollider( Collider collider )
	end
	
	/** \brief Remove all colliders. */
	func void removeAllColliders()
	end
	/*@}*/
	
	
	
	/** \name Lumimeters */
	/*@{*/
	/** \brief Number of lumimeters. */
	func int getLumimeterCount()
		return 0
	end
	
	/** \brief Add lumimeter. */
	func void addLumimeter( Lumimeter lumimeter )
	end
	
	/** \brief Remove lumimeter. */
	func void removeLumimeter( Lumimeter lumimeter )
	end
	
	/** \brief Remove all lumimeters. */
	func void removeAllLumimeters()
	end
	/*@}*/
	
	
	
	/** \name Touch sensors */
	/*@{*/
	/** \brief Number of touch sensors. */
	func int getTouchSensorCount()
		return 0
	end
	
	/** \brief Add touch sensor. */
	func void addTouchSensor( TouchSensor touchSensor )
	end
	
	/** \brief Remove touch sensor. */
	func void removeTouchSensor( TouchSensor touchSensor )
	end
	
	/** \brief Remove all touch sensors. */
	func void removeAllTouchSensors()
	end
	/*@}*/
	
	
	
	/** \name Prop fields */
	/*@{*/
	/** \brief Number of prop fields. */
	func int getPropFieldCount()
		return 0
	end
	
	/** \brief Add prop field. */
	func void addPropField( PropField propfield )
	end
	
	/** \brief Remove prop field. */
	func void removePropField( PropField propfield )
	end
	
	/** \brief Remove all prop fields. */
	func void removeAllPropFields()
	end
	/*@}*/
	
	
	
	/** \name Force fields */
	/*@{*/
	/** \brief Number of force fields. */
	func int getForceFieldCount()
		return 0
	end
	
	/** \brief Add force field. */
	func void addForceField( ForceField forcefield )
	end
	
	/** \brief Remove force field. */
	func void removeForceField( ForceField forcefield )
	end
	
	/** \brief Remove all force fields. */
	func void removeAllForceFields()
	end
	/*@}*/
	
	
	
	/** \name Particle emitters */
	/*@{*/
	/** \brief Number of particle emitters. */
	func int getParticleEmitterCount()
		return 0
	end
	
	/** \brief Add particle emitter. */
	func void addParticleEmitter( ParticleEmitterInstance emitter )
	end
	
	/** \brief Remove particle emitter. */
	func void removeParticleEmitter( ParticleEmitterInstance emitter )
	end
	
	/** \brief Remove all particle emitters. */
	func void removeAllParticleEmitters()
	end
	/*@}*/
	
	
	
	/** \name Debug drawers */
	/*@{*/
	/** \brief Number of debug drawers. */
	func int getDebugDrawerCount()
		return 0
	end
	
	/** \brief Add debug drawer. */
	func void addDebugDrawer( DebugDrawer debugDrawer )
	end
	
	/** \brief Remove debug drawer. */
	func void removeDebugDrawer( DebugDrawer debugDrawer )
	end
	
	/** \brief Remove all debug drawers. */
	func void removeAllDebugDrawers()
	end
	/*@}*/
	
	
	
	/** \name Navigation spaces */
	/*@{*/
	/** \brief Number of navigation spaces. */
	func int getNavigationSpaceCount()
		return 0
	end
	
	/** \brief Add navigation space if absent. */
	func void addNavigationSpace( NavigationSpace navspace )
	end
	
	/** \brief Remove navigation space if present. */
	func void removeNavigationSpace( NavigationSpace navspace )
	end
	
	/** \brief Remove all navigation spaces. */
	func void removeAllNavigationSpaces()
	end
	/*@}*/
	
	
	
	/** \name Navigation blockers */
	/*@{*/
	/** \brief Number of navigation blockers. */
	func int getNavigationBlockerCount()
		return 0
	end
	
	/** \brief Add navigation blockers if absent. */
	func void addNavigationBlocker( NavigationBlocker blocker )
	end
	
	/** \brief Remove navigation blocker if present. */
	func void removeNavigationBlocker( NavigationBlocker blocker )
	end
	
	/** \brief Remove all navigation blockers. */
	func void removeAllNavigationBlockers()
	end
	/*@}*/
	
	
	
	/** \name Navigators */
	/*@{*/
	/** \brief Number of navigators. */
	func int getNavigatorCount()
		return 0
	end
	
	/** \brief Add navigator if absent. */
	func void addNavigator( Navigator navigator )
	end
	
	/** \brief Remove navigator if present. */
	func void removeNavigator( Navigator navigator )
	end
	
	/** \brief Remove all navigators. */
	func void removeAllNavigators()
	end
	/*@}*/
	
	
	
	/** \name Environment map probes */
	/*@{*/
	/** \brief Number of environment map probes. */
	func int getEnvMapProbeCount()
		return 0
	end
	
	/** \brief Add environment map probe if absent. */
	func void addEnvMapProbe( EnvMapProbe envMapProbe )
	end
	
	/** \brief Remove environment map probe if present. */
	func void removeEnvMapProbe( EnvMapProbe envMapProbe )
	end
	
	/** \brief Remove all environment map probes. */
	func void removeAllEnvMapProbes()
	end
	/*@}*/
	
	
	
	/** \name Billboards */
	/*@{*/
	/** \brief Number of billboards. */
	func int getBillboardCount()
		return 0
	end
	
	/** \brief Add billboard. */
	func void addBillboard( Billboard billboard )
	end
	
	/** \brief Remove billboard. */
	func void removeBillboard( Billboard billboard )
	end
	
	/** \brief Remove all billboards. */
	func void removeAllBillboards()
	end
	/*@}*/
	
	
	
	/** \name Collision detection. */
	/*@{*/
	/**
	 * \brief Test a point for collision with colliders.
	 * 
	 * For each collision the collisionResponse function the given listener is called. To
	 * stop testing set StopTesting in the provided collision information object to true.
	 */
	func void pointHits( DVector point, ColliderListener listener, CollisionFilter collisionFilter )
	end
	
	/** \brief Static collider intersection test. */
	func void colliderHits( Collider collider, ColliderListener listener )
	end
	
	/** \brief Moving collider collision test. */
	func void colliderMoveHits( Collider collider, Vector displacement, ColliderListener listener )
	end
	
	/** \brief Moving collider collision test reporting only closest hit. */
	func void colliderMoveHitsClosest( Collider collider, Vector displacement, ColliderListener listener )
	end
	
	/** \brief Ray cast intersection test. */
	func void rayHits( DVector rayOrigin, Vector rayDirection, ColliderListener listener, CollisionFilter collisionFilter )
	end
	
	/**
	 * \brief Closest ray cast intersection test.
	 * \details Only closest intersection is reported to listener. rayHits() reports all intersections.
	 */
	func void rayHitsClosest( DVector rayOrigin, Vector rayDirection, ColliderListener listener, CollisionFilter collisionFilter )
	end
	
	
	
	/**
	 * \brief World is equal to another object.
	 * \details Implements Object.equals(Object).
	 * \returns \em true if \em other is of type World and both point to the same engine world resource.
	 */
	func bool equals(Object other)
		return false
	end
	
	/**
	 * \brief Hash code for use as dictionary keys.
	 * \details Implements Object.hashCode().
	 */
	func int hashCode()
		return 0
	end
	/*@}*/
end
