//////////////////////////////////////////////////////////////////////////////////
//                                                                              //
//                 This is a native class documentation                         //
//                                                                              //
//                  This file is used only for DoxyGen                          //
//                                                                              //
//////////////////////////////////////////////////////////////////////////////////

namespace Dragengine.Scenery

/**
 * \brief Animator instance.
 * 
 * Animators define how animation states are calculated. Animator instances carry out the
 * actual calculation of animation states for a specific world element.
 * 
 * Animator instances have a component and animation set. If the component is not \em null
 * the animation state can be applied to the set component using apply(). If animation is
 * \em null the animation set in the animator is used. Otherwise the animation set in the
 * animator instance replaces the one defined in the animator. This allows to reuse an
 * animator with different animations.
 * 
 * This is a native class. It can not be subclassed.
 */
class AnimatorInstance
	/** \name Constructors */
	/*@{*/
	/** \brief Create animator instance. */
	public func new()
	end
	/*@}*/
	
	
	
	/** \name Management */
	/*@{*/
	/** \brief animator or \em null if not set. */
	public func Animator getAnimator()
		return null
	end
	
	/**
	 * \brief Set animator or \em null if not set.
	 * 
	 * Initializes all controllers to the value of the animator.
	 */
	public func void setAnimator( Animator animator )
	end
	
	/**
	 * \brief Set animator or \em null if not set.
	 * 
	 * If \em keepValues is true keeps all controller values unchanged which have the same
	 * name in the old and new animator. Otherwise initializes all controllers to the value
	 * of the new animator.
	 */
	public func void setAnimator( Animator animator, bool keepValues )
	end
	
	/** \brief Component or \em null if not set. */
	public func Component getComponent()
		return null
	end
	
	/** \brief Set component or \em null if not set. */
	public func void setComponent( Component component )
	end
	
	/** \brief Animation or \em null if not set. */
	public func Animation getAnimation()
		return null
	end
	
	/** \brief Set animation or null if not set. */
	public func void setAnimation( Animation animation )
	end
	
	
	
	/** \brief Blend mode. */
	public func AnimatorRuleBlendMode getBlendMode()
		return null
	end
	
	/** \brief Set blend mode. */
	public func void setBlendMode( AnimatorRuleBlendMode mode )
	end
	
	/** \brief Blend factor in the range from 0 to 1. */
	public func float getBlendFactor()
		return 0.0
	end
	
	/** \brief Set blend factor clamped to the range from 0 to 1. */
	public func void setBlendFactor( float factor )
	end
	
	/** \brief Retargeting is enabled. */
	public func bool getEnableRetargeting()
		return false
	end
	
	/** \brief Set if retargeting is enabled. */
	public func void setEnableRetargeting( bool enableRetargeting )
	end
	
	
	
	/**
	 * \brief Apply animator.
	 * 
	 * Starts calculating animator state in a parallel task. Once completed
	 * the animation state is applied to the component. You can access the
	 * component state any time after this call. If the calculation is not
	 * finished by then the affected call waits until it is finished.
	 */
	public func void apply()
	end
	
	/**
	 * \brief Apply animator immediately.
	 * 
	 * Calculates animator state and waits for calculation to complete.
	 */
	public func void applyDirect()
	end
	
	/**
	 * \brief Capture current state into snapshot rules matching identifier
	 */
	public func void captureState( int identifier )
	end
	
	/**
	 * \brief Store animation frame from animation into into rules matching identifier.
	 * \details If \em moveName does not exist in the animation a default state is captured.
	 * \throws EInvalidParam \em moveName is \em NULL.
	 */
	public func void storeFrame( int identifier, String moveName, float moveTime )
	end
	/*@}*/
	
	
	
	/** \name Controllers */
	/*@{*/
	/** \brief Nnumber of controllers. */
	public func int getControllerCount()
		return 0
	end
	
	/**
	 * \brief Get wrapper for controller.
	 * 
	 * \warning The wrapper is only valid as long as the animator is not changed and the
	 *          controller structure in the animator instance is not changed.
	 * 
	 * \param index Index of controller. If index is negative controller count is added to it.
	 *              This allows to get controllers starting from the last controller.
	 * \throws EOutOfBoundary \em controller is less than -getControllerCount() or larger
	 *                        than or equal to getControllerCount().
	 */
	public func AnimatorController getControllerAt( int index )
		return null
	end
	
	/**
	 * \brief Get wrapper for controller if present.
	 * 
	 * \warning The wrapper is only valid as long as the animator is not changed and the
	 *          controller structure in the animator instance is not changed.
	 * 
	 * \param name Name of controller. If no controller with this name is present
	 *             \em null is returned.
	 */
	public func AnimatorController getControllerNamed( String name )
		return null
	end
	
	/** \brief Index of named controller or -1 if not found. */
	public func int indexOfControllerNamed( String name )
		return 0
	end
	
	/**
	 * \brief Copy the first count controller values and vectors from another animator instance.
	 * \details Bones outside the number of controllers are ignored.
	 * \throws EInvalidParam \em count is less than 0.
	 */
	public func void copyControllerStates( AnimatorInstance instance, int count )
	end
	
	/**
	 * \brief Copy the first count controller values and vectors from another animator instance.
	 * \details Offset index of controller to copy from other animator. Bones outside the number
	 *          of controllers are ignored.
	 * \throws EInvalidParam \em count is less than 0.
	 */
	public func void copyControllerStates( AnimatorInstance instance, int offset, int count )
	end
	
	/**
	 * \brief Copy name matching controller values and vectors from another animator instance.
	 * \details Non-matching controllers are ignored.
	 */
	public func void copyNamedControllerStates( AnimatorInstance instance )
	end
	/*@}*/
end
