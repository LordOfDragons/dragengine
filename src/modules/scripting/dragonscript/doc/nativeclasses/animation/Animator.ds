//////////////////////////////////////////////////////////////////////////////////
//                                                                              //
//                 This is a native class documentation                         //
//                                                                              //
//                  This file is used only for DoxyGen                          //
//                                                                              //
//////////////////////////////////////////////////////////////////////////////////

namespace Dragengine.Scenery

/**
 * \brief Animator resources.
 * 
 * Animators provide support to generate animation states from different sources using rules.
 * Rules can use static precanned animation data from Animation resources, calculate state
 * using algorithms or capture and store previous animation states.
 * 
 * Animators only define how animation states are calculated. Use AnimatorInstance to do
 * actual calculation of animation states for a specific world element. Thus a single
 * animator can be shared by multiple animator instances each having an own state.
 * 
 * While it is allowed to change an animator while it is in use by animator instances it is
 * not an adviceable practise. Changing the animator structure invalidates the state of
 * animator instances resulting in unpredictable states.
 * 
 * Animators are valid if they have a Rig assigned. It is not required to assign an Animation.
 * Without an Animation only procedural rules can be used. Animation rules only work if an
 * Animation is assigned. If you want to use different animations you have to use different
 * animators using the sub animator rule.
 * 
 * Animators can be created in the DEIGDE Animator Editor. Animator XML files can be loaded
 * using LoadSave.LoadAnimator.
 * 
 * This is a native class. It can not be subclassed.
 */
class Animator
	/** \name Constructors */
	/*@{*/
	/** \brief Create animator. */
	public func new()
	end
	/*@}*/
	
	
	
	/** \name Management */
	/*@{*/
	/** \brief Rig or \em null if not set. */
	public func Rig getRig()
		return null
	end
	
	/** \brief Set rig or \em null if not set. */
	public func void setRig( Rig rig )
	end
	
	/** \brief Animation or \em null if not set. */
	public func Animation getAnimation()
		return null
	end
	
	/** \brief Set animation or null if not set. */
	public func void setAnimation( Animation animation )
	end
	
	/**
	 * \brief Two animators are equal.
	 * 
	 * This is an extended version of equals() accepting also \em null for \em animator1 and
	 * \em animator2. equals() would thrown an exception if \em null is compared to anything.
	 * This call though allows to compare \em null against animators or even \em null itself.
	 * If \em animator1 or \em animator2 is \em null \em false is returned. If both are
	 * \em null \em true is returned.
	 */
	public static func bool equals( Animator animator1, Animator animator2 )
		return false
	end
	/*@}*/
	
	
	
	/** \name Controllers */
	/*@{*/
	/** \brief Nnumber of controllers. */
	public func int getControllerCount()
		return 0
	end
	
	/**
	 * \brief Set number of controllers.
	 * \throws EInvalidParam \em count is less than 0.
	 */
	public func void setControllerCount( int count )
	end
	
	/**
	 * \brief Get wrapper for controller.
	 * 
	 * \warning The wrapper is only valid as long as the controller structure in the animator
	 *          is not changed.
	 * 
	 * \param index Index of controller. If index is negative controller count is added to it.
	 *              This allows to get controllers starting from the last controller.
	 * \throws EOutOfBoundary \em controller is less than -getControllerCount() or larger
	 *                        than or equal to getControllerCount().
	 */
	public func AnimatorController getControllerAt( int index )
		return null
	end
	
	/**
	 * \brief Get wrapper for controller if present.
	 * 
	 * \warning The wrapper is only valid as long as the controller structure in the animator
	 *          is not changed.
	 * 
	 * \param name Name of controller. If no controller with this name is present
	 *             \em null is returned.
	 */
	public func AnimatorController getControllerNamed( String name )
		return null
	end
	
	/** \brief Index of named controller or -1 if not found. */
	public func int indexOfControllerNamed( String name )
		return 0
	end
	/*@}*/
	
	
	
	/** \name Links */
	/*@{*/
	/** \brief Number of links. */
	public func int getLinkCount()
		return 0
	end
	
	/**
	 * \brief Add link with controller and no mapping points.
	 * \details If the controller does not exist the link uses 0 as input value during calculations.
	 * \returns Index of added link.
	 */
	public func int addLink( int controller )
		return 0
	end
	
	/** \brief Remove all links. */
	public func void removeAllLinks()
	end
	
	/**
	 * \brief Set controller of link.
	 * \details If the controller does not exist the link uses 0 as input value during calculations.
	 * \throws EOutOfBoundary \em link is less than 0 or large than or equal to getLinkCount().
	 */
	public func void setLinkController( int link, int controller )
	end
	
	/**
	 * \brief Set repeat count along X axis of link.
	 * \throws EInvalidParam \em repeat is less than 1.
	 */
	public func void setLinkRepeat( int link, int repeat )
	end
	
	/**
	 * \brief Set link curve.
	 * \throws EOutOfBoundary \em link is less than 0 or large than or equal to getLinkCount().
	 */
	public func void setLinkCurve( int link, CurveBezier curve )
	end
	/*@}*/
	
	
	
	/** \name Rules */
	/*@{*/
	/** \brief Number of rules. */
	public func int getRuleCount()
		return 0
	end
	
	/** \brief Add rule. */
	public func void addRule( AnimatorRule rule )
	end
	
	/**
	 * \brief Rule at index.
	 * \throws EOutOfBoundary \em index is less than 0 or large than or equal to getRuleCount().
	 */
	public func AnimatorRule getRuleAt( int index )
		return null
	end
	
	/** \brief Remove all rules. */
	public func void removeAllRules()
	end
	/*@}*/
	
	
	
	/** \name Bones */
	/*@{*/
	/** \brief Add bone. */
	public func void addBone( String bone )
	end
	
	/** \brief Remove all bones. */
	public func void removeAllBones()
	end
	/*@}*/
end
