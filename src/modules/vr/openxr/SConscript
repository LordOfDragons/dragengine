from SConsCommon import *

# import whatever is given by the parent builder
Import('parent_env parent_targets parent_report')

# setup the environment matching the OS
envModule = parent_env.Clone()

useInternalLoader = False

if envModule['OSBeOS']:
	Return()

if envModule['OSWindows']:
	useInternalLoader = True

# fetch values in expanded form for later use
versionString = '1.10'
if envModule['force_version']:
	versionString = envModule['force_version']

pathConfig = os.path.join(envModule.subst(envModule['path_de_config']), 'modules', 'vr', 'openxr', versionString)
pathModule = os.path.join(envModule.subst(envModule['path_de_data']), 'modules', 'vr', 'openxr', versionString)
pathShared = os.path.join(envModule.subst(envModule['path_de_share']), 'modules', 'vr', 'openxr', versionString)

envModule.Append(CXXFLAGS = ['-DOXR_MODULE_VERSION=\\"{}\\"'.format(versionString)])

envModule.Append(CPPFLAGS = parent_env['MODULE_CPPFLAGS'])
envModule.Append(LINKFLAGS = parent_env['MODULE_LINKFLAGS'])

if envModule['with_debug']:
	envModule.Append(CPPFLAGS = ['-DWITH_DEBUG'])

if useInternalLoader:
	envModule.Append(CPPFLAGS = ['-DINTERNAL_XR_LOADER'])

# setup the builders
sources = []
headers = []
globFiles(envModule, 'src', '*.cpp', sources)
globFiles(envModule, 'src', '*.h', headers)
globFiles(envModule, 'extern', '*.h', headers)

data = []
globFiles(envModule, 'data', '*', data)

objects = [envModule.SharedObject(s) for s in sources]

libs = []
appendLibrary(envModule, parent_targets['dragengine'], libs)
appendLibrary( envModule, parent_targets['lib_openxr'], libs)

library = envModule.LoadableModule(target='vropenxr', source=objects, LIBS=libs)
targetBuild = envModule.Alias('vr_openxr_build', library)

install = []
archive = {}
for l in library:
	if l.name.endswith(envModule['SHLIBSUFFIX']):
		install.append(envModule.Install(pathModule, l))
		archive[os.path.join(pathModule, l.name)] = l

if envModule['OSWindows'] and envModule['CROSSCOMPILE_CLANG'] and envModule['with_install_pdb']:
	pathPdb = os.path.join(envModule.subst(envModule['path_pdb']), 'EngineModules')
	install.append(envModule.Install(pathPdb, 'vropenxr.pdb'))
	archive['{}/vropenxr.pdb'.format(pathPdb)] = envModule.File('vropenxr.pdb')

manifestUpdates = [
	{'action': 'filename', 'name': library[0].name, 'keyword': 'FILENAME'},
	{'action': 'filesize', 'path': library[0].abspath, 'keyword': 'FILESIZE'},
	{'action': 'filehash', 'path': library[0].abspath, 'keyword': 'SHA1SUM'},
	{'action': 'text', 'value': versionString, 'keyword': 'VERSION'}]

for l in reversed(parent_targets['lib_openxr']['runtimelibs']):
	manifestUpdates.append({'action': 'preloadLibrary', 'path': l.name})
	install.append(envModule.Install(pathModule, l))
	archive[os.path.join(pathModule, l.name)] = l

manifest = envModule.File('src/module.xml')
updateManifest = envModule.Command(manifest, manifest.srcnode(),
	Action(UpdateModuleManifest), ManifestUpdates=manifestUpdates)
Depends(updateManifest, library)
Depends(updateManifest, 'SConscript')
Depends(updateManifest, parent_targets['lib_openxr']['runtimelibs'])

install.append(envModule.Install(pathModule, updateManifest))
archive[os.path.join(pathModule, 'module.xml')] = updateManifest[0]

for d in data:
	filename = os.path.join(pathShared, d[5:])
	install.append(envModule.InstallAs(filename, d))
	archive[filename] = envModule.File(d).srcnode()

targetInstall = envModule.Alias('vr_openxr', install)

# source directory required for special commands
srcdir = Dir('.').srcnode().abspath

# cloc
buildClocBare = BuildCLOC(envModule, ['{}/src'.format(srcdir)], '{}/clocreport.csv'.format(srcdir), ['doc'])
Depends(buildClocBare, sources)
Depends(buildClocBare, headers)
buildCloc = envModule.Alias('vr_openxr_cloc', buildClocBare)

# add the targets to the targets list
parent_targets['vr_openxr'] = {
	'name' : 'OpenXR VR Module',
	'build' : targetBuild,
	'install' : targetInstall,
	'install-engine-runtime' : targetInstall,
	'archive-engine' : archive,
	'cloc' : buildCloc,
	'clocReport' : '{}/clocreport.csv'.format(srcdir)}
