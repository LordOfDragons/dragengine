from SConsCommon import *

# import whatever is given by the parent builder
Import('parent_env parent_targets parent_report')

# setup the environment matching the OS
envModule = parent_env.Clone()

useInternalLoader = False

buildModule = envModule['build_vr_openxr' ] != TernaryVariableNo
internalModule = envModule['build_vr_openxr_internal']
parent_report['build OpenXR VR Module'] = ('yes (internal)' if internalModule else 'yes') if buildModule else 'no'

if not buildModule:
	Return()

if envModule['OSBeOS']:
	Return()

if envModule['OSWindows']:
	pass #useInternalLoader = True

# fetch values in expanded form for later use
versionString = '1.28'
if envModule['force_version']:
	versionString = envModule['force_version']

pathConfig = os.path.join(envModule.subst(envModule['path_de_config']), 'modules', 'vr', 'openxr', versionString)
pathModule = os.path.join(envModule.subst(envModule['path_de_data']), 'modules', 'vr', 'openxr', versionString)
pathShared = os.path.join(envModule.subst(envModule['path_de_share']), 'modules', 'vr', 'openxr', versionString)
pathAsset = os.path.join('modules', 'vr', 'openxr', versionString)
withEngineDeal = envModule['with_engine_deal']

envModule.Append(CXXFLAGS = ['-DMODULE_VERSION=\\"{}\\"'.format(versionString)])

envModule.Append(CPPFLAGS = parent_env['MODULE_CPPFLAGS'])
envModule.Append(LINKFLAGS = parent_env['MODULE_LINKFLAGS'])

if envModule['with_debug']:
	envModule.Append(CPPFLAGS = ['-DWITH_DEBUG'])

if useInternalLoader:
	envModule.Append(CPPFLAGS = ['-DINTERNAL_XR_LOADER'])
	envModule.Append(CPPPATH = ['extern/include'])

if envModule['platform_android'] != 'no':
	envModule.Append(CPPFLAGS = ['-Wno-cast-calling-convention'])

# setup the builders
sources = []
headers = []
globFiles(envModule, 'src', '*.cpp', sources)
globFiles(envModule, 'src', '*.h', headers)
globFiles(envModule, 'extern', '*.h', headers)

data = []
globFiles(envModule, 'data', '*', data)

libs = []
appendLibrary(envModule, parent_targets['dragengine'], libs, internalModule=internalModule)

extraLibs = []
if not useInternalLoader:
	extraLibs.append('lib_openxr')
	appendLibrary( envModule, parent_targets['lib_openxr'], libs)

install = []
archive = {}
assetEngine = {}

if internalModule:
	envModule.Append(CPPFLAGS = ['-DWITH_INTERNAL_MODULE'])
	
	objects = [envModule.SharedObject(s) for s in sources]
	
	library = envModule.StaticLibrary(target='vropenxr', source=objects, LIBS=libs)
	targetBuild = parent_env.Alias('vr_openxr_build', library)
	install.extend(targetBuild)
	
	parent_targets['dragengine']['add internal module'](
		envModule, library, extraLibs, 'deoxrRegisterInternalModule')
	
else:
	objects = [envModule.SharedObject(s) for s in sources]
	
	library = envModule.LoadableModule(target='vropenxr', source=objects, LIBS=libs)
	targetBuild = envModule.Alias('vr_openxr_build', library)
	
	for l in library:
		if l.name.endswith(envModule['SHLIBSUFFIX']):
			install.append(envModule.Install(pathModule, l))
			archive[os.path.join(pathModule, l.name)] = l
	
	if envModule['OSWindows'] and envModule['CROSSCOMPILE_CLANG'] and envModule['with_install_pdb']:
		pathPdb = os.path.join(envModule.subst(envModule['path_pdb']), 'EngineModules')
		install.append(envModule.Install(pathPdb, 'vropenxr.pdb'))
		archive['{}/vropenxr.pdb'.format(pathPdb)] = envModule.File('vropenxr.pdb')
	
	manifestUpdates = [
		{'action': 'filename', 'file': library[0], 'keyword': 'FILENAME'},
		{'action': 'filesize', 'file': library[0], 'keyword': 'FILESIZE'},
		{'action': 'filehash', 'file': library[0], 'keyword': 'SHA1SUM'},
		{'action': 'text', 'value': versionString, 'keyword': 'VERSION'}]
	
	if not useInternalLoader:
		for l in reversed(parent_targets['lib_openxr']['runtimelibs']):
			manifestUpdates.append({'action': 'preloadLibrary', 'library': l})
			install.append(envModule.Install(pathModule, l))
			archive[os.path.join(pathModule, l.name)] = l
	
	manifest = envModule.File('src/module.xml')
	updateManifest = envModule.UpdateModuleManifest(manifest,
		manifest.srcnode(), ManifestUpdates=manifestUpdates)
	
	install.append(envModule.Install(pathModule, updateManifest))
	archive[os.path.join(pathModule, 'module.xml')] = updateManifest[0]

for d in data:
	if withEngineDeal:
		filename = os.path.join(pathAsset, d[5:])
		assetEngine[filename] = envModule.File(d).srcnode()
	else:
		filename = os.path.join(pathShares, d[5:])
		install.append(envModule.InstallAs(filename, d))
		archive[filename] = envModule.File(d).srcnode()

targetInstall = envModule.Alias('vr_openxr', install)

# source directory required for special commands
srcdir = Dir('.').srcnode().abspath

# cloc
buildClocBare = BuildCLOC(envModule, ['{}/src'.format(srcdir)], '{}/clocreport.csv'.format(srcdir), ['doc'])
buildCloc = envModule.Alias('vr_openxr_cloc', buildClocBare)

# add the targets to the targets list
parent_targets['vr_openxr'] = {
	'name' : 'OpenXR VR Module',
	'build' : targetBuild,
	'install' : targetInstall,
	'install-engine-runtime' : targetInstall,
	'archive-engine' : archive,
	'asset-engine' : assetEngine,
	'cloc' : buildCloc,
	'clocReport' : '{}/clocreport.csv'.format(srcdir)}
