from SConsCommon import *

# import whatever is given by the parent builder
Import( 'parent_env parent_targets parent_report' )

# setup the environment matching the OS
envModule = parent_env.Clone()

internalModule = envModule['build_network_basic_internal']
parent_report['build Basic Network Module'] = 'yes (internal)' if internalModule else 'yes'

libs = []

if envModule['OSBeOS']:
	libs.append( 'network' )
	
elif envModule['OSWindows']:
	libs.append('wsock32')
	libs.append('iphlpapi')
	libs.append('ws2_32')

# fetch values in expanded form for later use
versionString = '1.24'
if envModule['force_version']:
	versionString = envModule['force_version']

pathConfig = '{}/modules/network/basic/{}'.format( envModule.subst( envModule[ 'path_de_config' ] ), versionString )
pathModule = '{}/modules/network/basic/{}'.format( envModule.subst( envModule[ 'path_de_data' ] ), versionString )

envModule.Append( CPPFLAGS = parent_env[ 'MODULE_CPPFLAGS' ] )
envModule.Append( LINKFLAGS = parent_env[ 'MODULE_LINKFLAGS' ] )

if envModule['platform_android'] != 'no':
	envModule.Append(CPPFLAGS = ['-Wno-unused-function'])

# setup the builders
sources = []
headers = []
globFiles( envModule, 'src', '*.cpp', sources )
globFiles( envModule, 'src', '*.h', headers )

appendLibrary(envModule, parent_targets['dragengine'], libs, internalModule=internalModule)

install = []
archive = {}

objects = [ envModule.SharedObject( s ) for s in sources ]

if internalModule:
	envModule.Append(CPPFLAGS = ['-DWITH_INTERNAL_MODULE'])
	envModule.Append(CPPFLAGS = ['-DMODULE_VERSION=\\"{}\\"'.format(versionString)])
	
	objects = [envModule.SharedObject(s) for s in sources]
	
	library = envModule.StaticLibrary(target='netbasicnetwork', source=objects, LIBS=libs)
	targetBuild = parent_env.Alias('net_basic_build', library)
	install.extend(targetBuild)
	
	parent_targets['dragengine']['add internal module'](
		envModule, library, [], 'denbRegisterInternalModule')
	
else:
	library = envModule.LoadableModule( target='netbasicnetwork', source=objects, LIBS=libs )
	targetBuild = envModule.Alias( 'net_basic_build', library )
	
	for l in library:
		if l.name.endswith( envModule[ 'SHLIBSUFFIX' ] ):
			install.append( envModule.Install( pathModule, l ) )
			archive[ os.path.join( pathModule, l.name ) ] = l
	
	if envModule['OSWindows'] and envModule['CROSSCOMPILE_CLANG'] and envModule['with_install_pdb']:
		pathPdb = os.path.join(envModule.subst(envModule['path_pdb']), 'EngineModules')
		install.append(envModule.Install(pathPdb, 'netbasicnetwork.pdb'))
		archive['{}/netbasicnetwork.pdb'.format(pathPdb)] = envModule.File('netbasicnetwork.pdb')
	
	manifestUpdates = [
		{ 'action': 'filename', 'name': library[ 0 ].name, 'keyword': 'FILENAME' },
		{ 'action': 'filesize', 'path': library[ 0 ].abspath, 'keyword': 'FILESIZE' },
		{ 'action': 'filehash', 'path': library[ 0 ].abspath, 'keyword': 'SHA1SUM' },
		{'action': 'text', 'value': versionString, 'keyword': 'VERSION'}]
	
	manifest = envModule.File( 'src/module.xml' )
	updateManifest = envModule.Command(manifest,
		[manifest.srcnode(), library, 'SConscript'],
		Action(UpdateModuleManifest), ManifestUpdates=manifestUpdates)
	
	install.append( envModule.Install( pathModule, updateManifest ) )
	archive[ os.path.join( pathModule, 'module.xml' ) ] = updateManifest[ 0 ]

targetInstall = envModule.Alias( 'net_basic', install )

# source directory required for special commands
srcdir = Dir( '.' ).srcnode().abspath

# cloc
buildClocBare = BuildCLOC( envModule, [ '{}/src'.format( srcdir ) ], '{}/clocreport.csv'.format( srcdir ), [ 'doc' ] )
buildCloc = envModule.Alias( 'net_basic_cloc', buildClocBare )

# add the targets to the targets list
parent_targets[ 'net_basic' ] = {
	'name' : 'Basic Network Module',
	'build' : targetBuild,
	'install' : targetInstall,
	'install-engine-runtime' : targetInstall,
	'archive-engine' : archive,
	'cloc' : buildCloc,
	'clocReport' : '{}/clocreport.csv'.format( srcdir ) }
