from SConsCommon import *

# import whatever is given by the parent builder
Import( 'parent_env parent_targets parent_report' )

# setup the environment matching the OS
envModule = parent_env.Clone()

# fetch values in expanded form for later use
versionString = '1.2'
if envModule['force_version']:
	versionString = envModule['force_version']

pathConfig = '{}/modules/model/demodel/{}'.format( envModule.subst( envModule[ 'path_de_config' ] ), versionString )
pathModule = '{}/modules/model/demodel/{}'.format( envModule.subst( envModule[ 'path_de_data' ] ), versionString )

envModule.Append( CPPFLAGS = parent_env[ 'MODULE_CPPFLAGS' ] )
envModule.Append( LINKFLAGS = parent_env[ 'MODULE_LINKFLAGS' ] )

# setup the builders
sources = []
headers = []
globFiles( envModule, 'src', '*.cpp', sources )
globFiles( envModule, 'src', '*.h', headers )

objects = [ envModule.SharedObject( s ) for s in sources ]

libs = []
appendLibrary( envModule, parent_targets[ 'dragengine' ], libs )

library = envModule.LoadableModule( target='mdldemodel', source=objects, LIBS=libs )
targetBuild = envModule.Alias( 'mdl_demodel_build', library )

install = []
archive = {}
for l in library:
	if l.name.endswith( envModule[ 'SHLIBSUFFIX' ] ):
		install.append( envModule.Install( pathModule, l ) )
		archive[ os.path.join( pathModule, l.name ) ] = l

if envModule['OSWindows'] and envModule['CROSSCOMPILE_CLANG'] and envModule['with_install_pdb']:
	install.append(envModule.Install(pathModule, 'mdldemodel.pdb'))
	archive['{}/mdldemodel.pdb'.format(pathModule)] = envModule.File('mdldemodel.pdb')

manifestUpdates = [
	{ 'action': 'filename', 'name': library[ 0 ].name, 'keyword': 'FILENAME' },
	{ 'action': 'filesize', 'path': library[ 0 ].abspath, 'keyword': 'FILESIZE' },
	{ 'action': 'filehash', 'path': library[ 0 ].abspath, 'keyword': 'SHA1SUM' },
	{'action': 'text', 'value': versionString, 'keyword': 'VERSION'}]

manifest = envModule.File( 'src/module.xml' )
updateManifest = envModule.Command( manifest, manifest.srcnode(),
	Action( UpdateModuleManifest ), ManifestUpdates=manifestUpdates )
Depends( updateManifest, library )
Depends( updateManifest, 'SConscript' )

install.append( envModule.Install( pathModule, updateManifest ) )
archive[ os.path.join( pathModule, 'module.xml' ) ] = updateManifest[ 0 ]

targetInstall = envModule.Alias( 'mdl_demodel', install )

# source directory required for special commands
srcdir = Dir( '.' ).srcnode().abspath

# cloc
buildClocBare = BuildCLOC( envModule, [ '{}/src'.format( srcdir ) ], '{}/clocreport.csv'.format( srcdir ), [ 'doc' ] )
Depends( buildClocBare, sources )
Depends( buildClocBare, headers )
buildCloc = envModule.Alias( 'mdl_demodel_cloc', buildClocBare )

# add the targets to the targets list
parent_targets[ 'mdl_demodel' ] = {
	'name' : 'Drag[en]gine binary Model Module',
	'build' : targetBuild,
	'install' : targetInstall,
	'install-engine-runtime' : targetInstall,
	'archive-engine' : archive,
	'cloc' : buildCloc,
	'clocReport' : '{}/clocreport.csv'.format( srcdir ) }
