from SConsCommon import *

# import whatever is given by the parent builder
Import( 'parent_env parent_targets parent_report' )

# setup the environment matching the OS
envModule = parent_env.Clone()

internalModule = envModule['build_rig_derig_internal']
parent_report['build DERig Rig Module'] = 'yes (internal)' if internalModule else 'yes'

# fetch values in expanded form for later use
versionString = '1.18'
if envModule['force_version']:
	versionString = envModule['force_version']

pathConfig = '{}/modules/rig/derig/{}'.format( envModule.subst( envModule[ 'path_de_config' ] ), versionString )
pathModule = '{}/modules/rig/derig/{}'.format( envModule.subst( envModule[ 'path_de_data' ] ), versionString )

envModule.Append( CPPFLAGS = parent_env[ 'MODULE_CPPFLAGS' ] )
envModule.Append( LINKFLAGS = parent_env[ 'MODULE_LINKFLAGS' ] )

# setup the builders
sources = []
headers = []
globFiles( envModule, 'src', '*.cpp', sources )
globFiles( envModule, 'src', '*.h', headers )

libs = []
appendLibrary(envModule, parent_targets['dragengine'], libs, internalModule=internalModule)

install = []
archive = {}

if internalModule:
	envModule.Append(CPPFLAGS = ['-DWITH_INTERNAL_MODULE'])
	envModule.Append(CPPFLAGS = ['-DMODULE_VERSION=\\"{}\\"'.format(versionString)])
	
	objects = [envModule.SharedObject(s) for s in sources]
	
	library = envModule.StaticLibrary(target='rigderig', source=objects, LIBS=libs)
	targetBuild = parent_env.Alias('rig_derig_build', library)
	install.extend(targetBuild)
	
	parent_targets['dragengine']['add internal module'](
		envModule, library, [], 'dermRegisterInternalModule')
	
else:
	objects = [ envModule.SharedObject( s ) for s in sources ]
	
	library = envModule.LoadableModule( target='rigderig', source=objects, LIBS=libs )
	targetBuild = envModule.Alias( 'rig_derig_build', library )
	
	for l in library:
		if l.name.endswith( envModule[ 'SHLIBSUFFIX' ] ):
			install.append( envModule.Install( pathModule, l ) )
			archive[ os.path.join( pathModule, l.name ) ] = l
	
	if envModule['OSWindows'] and envModule['CROSSCOMPILE_CLANG'] and envModule['with_install_pdb']:
		pathPdb = os.path.join(envModule.subst(envModule['path_pdb']), 'EngineModules')
		install.append(envModule.Install(pathPdb, 'rigderig.pdb'))
		archive['{}/rigderig.pdb'.format(pathPdb)] = envModule.File('rigderig.pdb')
	
	manifestUpdates = [
		{'action': 'filename', 'file': library[0], 'keyword': 'FILENAME'},
		{'action': 'filesize', 'file': library[0], 'keyword': 'FILESIZE'},
		{'action': 'filehash', 'file': library[0], 'keyword': 'SHA1SUM'},
		{'action': 'text', 'value': versionString, 'keyword': 'VERSION'}]
	
	manifest = envModule.File( 'src/module.xml' )
	updateManifest = envModule.UpdateModuleManifest(manifest,
		manifest.srcnode(), ManifestUpdates=manifestUpdates)
	
	install.append( envModule.Install( pathModule, updateManifest ) )
	archive[ os.path.join( pathModule, 'module.xml' ) ] = updateManifest[ 0 ]

targetInstall = envModule.Alias( 'rig_derig', install )

# source directory required for special commands
srcdir = Dir( '.' ).srcnode().abspath

# cloc
buildClocBare = BuildCLOC( envModule, [ '{}/src'.format( srcdir ) ], '{}/clocreport.csv'.format( srcdir ), [ 'doc' ] )
buildCloc = envModule.Alias( 'rig_derig_cloc', buildClocBare )

# add the targets to the targets list
parent_targets[ 'rig_derig' ] = {
	'name' : 'Drag[en]gine Rig Module',
	'build' : targetBuild,
	'install' : targetInstall,
	'install-engine-runtime' : targetInstall,
	'archive-engine' : archive,
	'cloc' : buildCloc,
	'clocReport' : '{}/clocreport.csv'.format( srcdir ) }
