from SConsCommon import *

# import whatever is given by the parent builder
Import( 'parent_env parent_targets parent_report' )

# setup the environment matching the OS
envModule = parent_env.Clone()

libs = []

# do configure stuff
buildModule = envModule[ 'build_physics_bullet' ]

# build module if requested
parent_report[ 'build Bullet Physics Module' ] = 'yes' if buildModule else 'no'

if not buildModule:
	Return()

# special debug flag
useDebugSnapshot = True

# fetch values in expanded form for later use
versionString = '1.4'
if envModule['force_version']:
	versionString = envModule['force_version']

pathSConscript = Dir( "." ).srcnode().abspath

pathConfig = '{}/modules/physics/bullet/{}'.format(
	envModule.subst(envModule['path_de_config']), versionString)
pathModule = '{}/modules/physics/bullet/{}'.format(
	envModule.subst(envModule['path_de_data']), versionString)

envModule.Append(CPPFLAGS = parent_env['MODULE_CPPFLAGS'])
envModule.Append(LINKFLAGS = parent_env['MODULE_LINKFLAGS'])

# update the compile flags
envModule.Append(CPPFLAGS = ['-I{}/src'.format(pathSConscript)])
envModule.Append(CPPFLAGS = ['-I{}/Bullet'.format(pathSConscript)])

#envModule.Append(CPPFLAGS = ['-O0'])

# disable bullet profiling support
#envModule.Append(CPPFLAGS = ['-DBT_NO_PROFILE'])

"""if useDebugSnapshot:
	envModule.Append( CPPFLAGS = '-DBULLET_USE_DEBUG_SNAPSHOT' )"""

# bullet misses user-provided default constructors in some structs
envModule.Append(CFLAGS = ['-fpermissive'])
envModule.Append(CPPFLAGS = ['-fpermissive'])

"""
if envModule['with_debug'] and envModule['with_sanitize']:
	envModule.Append(CPPFLAGS = ['-fno-sanitize=all'])
	envModule.Append(LINKFLAGS = ['-fno-sanitize=all'])
"""
if envModule['with_debug'] and envModule['with_sanitize']:
	fixFlags = []
	fixFlags.append('-fno-sanitize=pointer-compare')
	
	envModule.Append(CPPFLAGS = fixFlags)
	envModule.Append(LINKFLAGS = fixFlags)

envSpecialBullet = envModule.Clone()

"""if useDebugSnapshot:
	envSpecialBulletExtras = envSpecialBullet.Clone()
	
	envSpecialBulletExtras.Append( CPPFLAGS = '-I{}/BulletExtras/COLLADA_DOM/include/1.4'.format( pathSConscript ) )
	envSpecialBulletExtras.Append( CPPFLAGS = '-I{}/BulletExtras/COLLADA_DOM/include'.format( pathSConscript ) )
	envSpecialBulletExtras.Append( CPPFLAGS = '-I{}/BulletExtras/LibXML/include'.format( pathSConscript ) )
	envSpecialBulletExtras.Append( CFLAGS = '-I{}/BulletExtras/COLLADA_DOM/include/1.4'.format( pathSConscript ) )
	envSpecialBulletExtras.Append( CFLAGS = '-I{}/BulletExtras/COLLADA_DOM/include'.format( pathSConscript ) )
	envSpecialBulletExtras.Append( CFLAGS = '-I{}/BulletExtras/LibXML/include'.format( pathSConscript ) )"""

# temporary hack for bullet being not 64-bit compliant. i'll fix the source code errors later on.
# right now there are too many updates to redo it all the times. windows hack only

# bullet source code contains lots of warnings and other problems. with with_warnerrors enabled
# this causes problems. disable the problematic warnings in this case
#if envSpecialBullet[ 'with_warnerrors' ]:
#	envSpecialBullet.Append( CPPFLAGS = '-Wno-error=unused-variable' )
#	envSpecialBullet.Append( CPPFLAGS = '-Wno-error=parentheses' )
#	envSpecialBullet.Append( CPPFLAGS = '-Wno-error=maybe-uninitialized' )
#	envSpecialBullet.Append( CPPFLAGS = '-Wno-error=strict-aliasing' )
#	envSpecialBullet.Append( CPPFLAGS = '-Wno-error=unused-function' )
#	envSpecialBullet.Append( CPPFLAGS = '-Wno-error=unused-but-set-variable' )
#	envSpecialBullet.Append( CPPFLAGS = '-Wno-error=reorder' )
#	envSpecialBullet.Append( CPPFLAGS = '-Wno-error=misleading-indentation' )
"""
envSpecialBullet.Append( CPPFLAGS = '-Wno-unused-variable' )
envSpecialBullet.Append( CPPFLAGS = '-Wno-parentheses' )
envSpecialBullet.Append( CPPFLAGS = '-Wno-maybe-uninitialized' )
envSpecialBullet.Append( CPPFLAGS = '-Wno-strict-aliasing' )
envSpecialBullet.Append( CPPFLAGS = '-Wno-unused-function' )
envSpecialBullet.Append( CPPFLAGS = '-Wno-unused-but-set-variable' )
envSpecialBullet.Append( CPPFLAGS = '-Wno-reorder' )
envSpecialBullet.Append( CPPFLAGS = '-Wno-sign-compare' )
#envSpecialBullet.Append( CPPFLAGS = '-Wno-misleading-indentation' )  # suddenly unrecognized?
"""

if envSpecialBullet['with_warnerrors']:
	envSpecialBullet.Append(CPPFLAGS = ['-Wno-error'])

# determine the source files
sources = []
headers = []
globFiles( envModule, 'src', '*.cpp', sources )
globFiles( envModule, 'src', '*.h', headers )

sourcesBullet = []
headersBullet = []
globFiles( envModule, 'Bullet', '*.cpp', sourcesBullet )
globFiles( envModule, 'Bullet', '*.h', headersBullet )

sourcesBulletExtras = []
headersBulletExtras = []
if useDebugSnapshot and False:
	globFiles( envModule, 'BulletExtras', '*.cpp', sourcesBulletExtras )
	globFiles( envModule, 'BulletExtras', '*.c', sourcesBulletExtras )
	globFiles( envModule, 'BulletExtras', '*.h', headersBulletExtras )

# setup the builders
objects = [ envModule.SharedObject( s ) for s in sources ]

if envModule['OSWindows']:
	objgroup1 = []
	for s in sourcesBullet:
		objgroup1.append( envSpecialBullet.SharedObject( s ) )
	libgroup1 = envModule.StaticLibrary( target='objgroup1', source=objgroup1 )
	objects.append( libgroup1 )
	
	"""if useDebugSnapshot:
		objgroup2 = []
		for s in sourcesBulletExtras:
			objgroup2.append( envSpecialBulletExtras.SharedObject( s ) )
		libgroup2 = envModule.StaticLibrary( target='objgroup2', source=objgroup2 )
		objects.append( libgroup2 )"""
	
else:
	for s in sourcesBullet:
		objects.append( envSpecialBullet.SharedObject( s ) )
	"""if useDebugSnapshot:
		for s in sourcesBulletExtras:
			objects.append( envSpecialBulletExtras.SharedObject( s ) )"""

appendLibrary( envModule, parent_targets[ 'dragengine' ], libs )

library = envModule.LoadableModule( target='phybullet', source=objects, LIBS=libs )
targetBuild = envModule.Alias( 'phy_bullet_build', library )

install = []
archive = {}
for l in library:
	if l.name.endswith( envModule[ 'SHLIBSUFFIX' ] ):
		install.append( envModule.Install( pathModule, l ) )
		archive[ os.path.join( pathModule, l.name ) ] = l

manifestUpdates = [
	{ 'action': 'filename', 'name': library[ 0 ].name, 'keyword': 'FILENAME' },
	{ 'action': 'filesize', 'path': library[ 0 ].abspath, 'keyword': 'FILESIZE' },
	{ 'action': 'filehash', 'path': library[ 0 ].abspath, 'keyword': 'SHA1SUM' },
	{'action': 'text', 'value': versionString, 'keyword': 'VERSION'}]

manifest = envModule.File( 'src/module.xml' )
updateManifest = envModule.Command( manifest, manifest.srcnode(),
	Action( UpdateModuleManifest ), ManifestUpdates=manifestUpdates )
Depends( updateManifest, library )
Depends(updateManifest, 'SConscript')

install.append( envModule.Install( pathModule, updateManifest ) )
archive[ os.path.join( pathModule, 'module.xml' ) ] = updateManifest[ 0 ]

targetInstall = envModule.Alias( 'phy_bullet', install )

# source directory required for special commands
srcdir = Dir( '.' ).srcnode().abspath

# cloc
buildClocBare = BuildCLOC( envModule, [ '{}/src'.format( srcdir ) ], '{}/clocreport.csv'.format( srcdir ), [ 'doc' ] )
Depends( buildClocBare, sources )
Depends( buildClocBare, headers )
buildCloc = envModule.Alias( 'phy_bullet_cloc', buildClocBare )

# add the targets to the targets list
parent_targets[ 'phy_bullet' ] = {
	'name' : 'Bullet Physics Module',
	'build' : targetBuild,
	'install' : targetInstall,
	'install-engine-runtime' : targetInstall,
	'archive-engine' : archive,
	'cloc' : buildCloc,
	'clocReport' : '{}/clocreport.csv'.format( srcdir ) }
