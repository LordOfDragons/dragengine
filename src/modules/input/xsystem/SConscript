from SConsCommon import *

# import whatever is given by the parent builder
Import('parent_env parent_targets parent_report')

# setup the environment matching the OS
envModule = parent_env.Clone()

libs = []

# do configure stuff
hasX = False
buildModule = False

if parent_env['OSPosix'] and envModule['build_input_x'] != TernaryVariableNo:
	conf = envModule.Configure()
	
	if envModule['with_x'] != TernaryVariableNo:
		hasX = conf.CheckLibWithHeader('X11', 'X11/Xlib.h', 'c++', call='XOpenDisplay(NULL);')
		if hasX:
			buildModule = True
			envModule.Append(CXXFLAGS = '-DHAS_LIB_X11')
			libs.append('X11')
		elif envModule['with_x'] == TernaryVariableYes:
			Exit('Requested to use X Window System but Xlib.h or libX11 could not be found or is not usable.')
		
		hasXi = conf.CheckLibWithHeader('Xi', 'X11/extensions/XInput.h', 'c++', call='XListInputDevices(0,0);')
		if hasXi:
			buildModule = buildModule and True
			envModule.Append(CXXFLAGS = '-DHAS_LIB_XI')
			libs.append('Xi')
		elif envModule['with_x'] == TernaryVariableYes:
			Exit('Requested to use X Window System but XInput.h or libXi could not be found or is not usable.')
		
		if parent_env['with_system_libevdev'] == TernaryVariableNo:
			buildModule = buildModule and True
			appendLibrary(envModule, parent_targets['lib_libevdev'], libs)
		else:
			hasEvdev = conf.CheckLibWithHeader('evdev', 'libevdev-1.0/libevdev/libevdev.h',
				'c++', call='libevdev_get_driver_version(0);')
			if hasEvdev:
				buildModule = buildModule and True
				envModule.Append(CXXFLAGS = '-DHAS_LIB_EVDEV')
				libs.append('evdev')
			elif envModule['with_x'] == TernaryVariableYes:
				Exit('Requested to use X Window System but libevdev.h or libevdev could not be found or is not usable.')
	
	conf.Finish()

if envModule['build_input_x'] == TernaryVariableYes and (not hasX or not hasXi):
	Exit('Requested to build X Input Module but X could not be found or is not usable.')

# build module if requested
internalModule = envModule['build_input_x_internal']
parent_report['build X Input Module'] = ('yes (internal)' if internalModule else 'yes') if buildModule else 'no'

if not buildModule:
	Return()

# fetch values in expanded form for later use
versionString = '1.24'
if envModule['force_version']:
	versionString = envModule['force_version']

pathConfig = '{}/modules/input/xsystem/{}'.format(envModule.subst(envModule['path_de_config']), versionString)
pathModule = '{}/modules/input/xsystem/{}'.format(envModule.subst(envModule['path_de_data']), versionString)
pathShared = '{}/modules/input/xsystem/{}'.format(envModule.subst(envModule['path_de_share']), versionString)
pathAsset = 'modules/input/xsystem/{}'.format(versionString)
withEngineDeal = envModule['with_engine_deal']

envModule.Append(CPPFLAGS = parent_env['MODULE_CPPFLAGS'])
envModule.Append(LINKFLAGS = parent_env['MODULE_LINKFLAGS'])

# setup the builders
sources = []
headers = []
globFiles(envModule, 'src', '*.cpp', sources)
globFiles(envModule, 'src', '*.h', headers)

data = []
globFiles(envModule, 'data', '*', data)

appendLibrary(envModule, parent_targets['dragengine'], libs, internalModule=internalModule)
appendLibrary(envModule, parent_targets['lib_libevdev'], libs)

install = []
archive = {}
assetEngine = {}

if internalModule:
	envModule.Append(CPPFLAGS = ['-DWITH_INTERNAL_MODULE'])
	envModule.Append(CPPFLAGS = ['-DMODULE_VERSION=\\"{}\\"'.format(versionString)])
	
	objects = [envModule.SharedObject(s) for s in sources]
	
	library = envModule.StaticLibrary(target='inpxsystem', source=objects, LIBS=libs)
	targetBuild = parent_env.Alias('inp_x_build', library)
	install.extend(targetBuild)
	
	parent_targets['dragengine']['add internal module'](
		envModule, library, ['lib_libevdev'], 'dexsiRegisterInternalModule')
	
else:
	objects = [envModule.SharedObject(s) for s in sources]
	
	library = envModule.LoadableModule(target='inpxsystem', source=objects, LIBS=libs)
	targetBuild = envModule.Alias('inp_x_build', library)
	
	for l in library:
		if l.name.endswith(envModule['SHLIBSUFFIX']):
			install.append(envModule.Install(pathModule, l))
			archive[os.path.join(pathModule, l.name)] = l
	
	manifestUpdates = [
		{'action': 'filename', 'file': library[0], 'keyword': 'FILENAME'},
		{'action': 'filesize', 'file': library[0], 'keyword': 'FILESIZE'},
		{'action': 'filehash', 'file': library[0], 'keyword': 'SHA1SUM'},
		{'action': 'text', 'value': versionString, 'keyword': 'VERSION'}]
	
	for l in reversed(parent_targets['lib_libevdev']['runtimelibs']):
		manifestUpdates.append({'action': 'preloadLibrary', 'library': l})
		install.append(envModule.Install(pathModule, l))
		archive[os.path.join(pathModule, l.name)] = l
	
	manifest = envModule.File('src/module.xml')
	updateManifest = envModule.UpdateModuleManifest(manifest,
		manifest.srcnode(), ManifestUpdates=manifestUpdates)
	
	install.append(envModule.Install(pathModule, updateManifest))
	archive[os.path.join(pathModule, 'module.xml')] = updateManifest[0]

for d in data:
	if withEngineDeal:
		filename = os.path.join(pathAsset, d[5:])
		assetEngine[filename] = envModule.File(d).srcnode()
	else:
		filename = os.path.join(pathShares, d[5:])
		install.append(envModule.InstallAs(filename, d))
		archive[filename] = envModule.File(d).srcnode()

targetInstall = envModule.Alias('inp_x', install)

# source directory required for special commands
srcdir = Dir('.').srcnode().abspath

# cloc
buildClocBare = BuildCLOC(envModule, ['{}/src'.format(srcdir)], '{}/clocreport.csv'.format(srcdir), ['doc'])
buildCloc = envModule.Alias('inp_x_cloc', buildClocBare)

# add the targets to the targets list
parent_targets['inp_x'] = {
	'name' : 'X Input Module',
	'build' : targetBuild,
	'install' : targetInstall,
	'install-engine-runtime' : targetInstall,
	'archive-engine' : archive,
	'asset-engine' : assetEngine,
	'cloc' : buildCloc,
	'clocReport' : '{}/clocreport.csv'.format(srcdir) }
