from SConsCommon import *
import os

Import( 'parent_env parent_targets parent_report' )

buildModule = parent_env['OSMacOS'] and parent_env['build_input_macos'] != TernaryVariableNo

parent_report['build MacOS Input Module'] = 'yes' if buildModule else 'no'

if not buildModule:
	if parent_env['build_input_macos'] == TernaryVariableYes:
		Exit( 'Requested to use build MacOS Input Module but platform is not MacOS.' )
	Return()

# build module
envModule = parent_env.Clone()
envModule.Append(FRAMEWORKS = ['Cocoa', 'Carbon'])

# fetch values in expanded form for later use
versionString = '1.0'
if envModule['force_version']:
	versionString = envModule['force_version']

pathDEConfig = envModule.subst(envModule['path_de_config'])
pathDEData = envModule.subst(envModule['path_de_data'])

pathConfig = os.path.join(pathDEConfig, 'modules', 'input', 'macos', versionString)
pathModule = os.path.join(pathDEData, 'modules', 'input', 'macos', versionString)

envModule.Append(CPPFLAGS = parent_env['MODULE_CPPFLAGS'])
envModule.Append(LINKFLAGS = parent_env['MODULE_LINKFLAGS'])

# setup builders
sources = []
headers = []
globFiles(envModule, 'src', '*.cpp', sources)
globFiles(envModule, 'src', '*.h', headers)
globFiles(envModule, 'src', '*.mm', sources)

objects = [envModule.SharedObject(s) for s in sources]

libs = []
appendLibrary(envModule, parent_targets['dragengine'], libs)
envModule.Append(LIBS = libs)

library = envModule.LoadableModule(target='inpmacos', source=objects)
targetBuild = envModule.Alias('inp_macos_build', library)

install = []
archive = {}
for l in library:
	if l.name.endswith(envModule['SHLIBSUFFIX']):
		install.append(envModule.Install(pathModule, l))
		archive[os.path.join(pathModule, l.name)] = l

manifestUpdates = [
	{'action': 'filename', 'name': library[0].name, 'keyword': 'FILENAME'},
	{'action': 'filesize', 'path': library[0].abspath, 'keyword': 'FILESIZE'},
	{'action': 'filehash', 'path': library[0].abspath, 'keyword': 'SHA1SUM'},
	{'action': 'text', 'value': versionString, 'keyword': 'VERSION'}]

manifest = envModule.File('src/module.xml')
updateManifest = envModule.Command(manifest, manifest.srcnode(), Action(UpdateModuleManifest), ManifestUpdates=manifestUpdates)
Depends(updateManifest, library)
Depends(updateManifest, 'SConscript')

install.append(envModule.Install(pathModule, updateManifest))
archive[os.path.join(pathModule, 'module.xml')] = updateManifest[0]

targetInstall = envModule.Alias('inp_macos', install)

# source directory required for special commands
srcdir = Dir('.').srcnode().abspath

# cloc
buildClocBare = BuildCLOC(envModule, [os.path.join(srcdir, 'src')], os.path.join(srcdir, 'clocreport.csv'), ['doc'])
Depends(buildClocBare, sources)
Depends(buildClocBare, headers)
buildCloc = envModule.Alias('inp_macos_cloc', buildClocBare)

# add the targets to the targets list
parent_targets['inp_macos'] = {
	'name' : 'MacOS Input Module',
	'build' : targetBuild,
	'install' : targetInstall,
	'install-engine-runtime' : targetInstall,
	'archive-engine' : archive,
	'cloc' : buildCloc,
	'clocReport' : os.path.join(srcdir, 'clocreport.csv')}
