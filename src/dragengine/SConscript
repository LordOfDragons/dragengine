from SConsCommon import *
import os

# import whatever is given by the parent builder
Import('parent_env parent_targets parent_report')

# setup the environment matching the OS
envDragengine = parent_env.Clone()

libs = []

if envDragengine['OSBeOS']:
	libs.extend(['root', 'be'])
	
elif envDragengine['OSMacOS']:
	envDragengine.Append(FRAMEWORKS = ['Cocoa'])
	
elif envDragengine['OSPosix']:
	pass
	
elif envDragengine['OSWindows']:
	libs.extend(envDragengine['WINDOWS_LIBS'])
	libs.append('winmm')
	#libs.extend(['kernel32', 'user32', 'gdi32', 'winmm', 'wsock32', 'advapi32'])
	"""if envDragengine['with_debug']:
		lib.append('dbghelp')
		envDragengine.Append(CXXFLAGS = ['-DWITH_DBGHELP'])"""
	
else:
	Exit('No supported OS found!')

if envDragengine['platform_android'] != 'no':
	libs.extend(envDragengine['ANDROID_LIBS'])

binlibs = []
linklibs = ['dragengine']

# do configure stuff
conf = envDragengine.Configure()

if envDragengine['OSPosix'] or envDragengine['OSMacOS']:
	hasDL = False
	if envDragengine['with_dl'] != TernaryVariableNo:
		hasDL = conf.CheckLibWithHeader('dl', 'dlfcn.h', 'c++', 'dlerror();')
		if hasDL:
			envDragengine.Append(CXXFLAGS = '-DHAS_LIB_DL')
			if envDragengine['platform_android'] == 'no':
				libs.append('dl')
				binlibs.append('dl')
		elif envDragengine['with_dl'] == TernaryVariableYes:
			print('Requested to use dynamic library system but dlfcn.h or libdl could not be found or is not usable.')
			Exit(1)
	
	hasPThreads = False
	if envDragengine['platform_android'] != 'no':
		envDragengine.Append(CXXFLAGS = '-DHAS_LIB_PTHREAD')
		hasPThreads = True # special implementation bundled in OS. no library include
	elif envDragengine['with_pthread'] != TernaryVariableNo:
		hasPThreads = conf.CheckLibWithHeader('pthread', 'pthread.h', 'c++', 'pthread_exit(NULL);')
		if hasPThreads:
			envDragengine.Append(CXXFLAGS = '-DHAS_LIB_PTHREAD')
			libs.append('pthread')
			binlibs.append('pthread')
		else:
			hasPThreads = conf.CheckLibWithHeader('pthreads', 'pthread.h', 'c++', 'pthread_exit(NULL);')
			if hasPThreads:
				envDragengine.Append(CXXFLAGS = '-DHAS_LIB_PTHREAD')
				libs.append('pthreads')
				binlibs.append('pthreads')
			else:
				hasPThreads = conf.CheckLibWithHeader('root', 'pthread.h', 'c++', 'pthread_exit(NULL);')
				if hasPThreads:
					envDragengine.Append(CXXFLAGS = '-DHAS_LIB_PTHREAD')
					# no lib append since root is already included
				elif envDragengine['with_pthread'] == TernaryVariableYes:
					print('Requested to use pthreads but pthread.h or libpthread could not be found or is not usable.')
					Exit(1)
	
	hasX11 = False
	if envDragengine['with_x'] != TernaryVariableNo:
		hasX11 = conf.CheckLibWithHeader('X11', 'X11/Xlib.h', 'c++', 'XOpenDisplay(NULL);')
		if hasX11:
			envDragengine.Append(CXXFLAGS = '-DHAS_LIB_X11')
			libs.append('X11')
			binlibs.append('X11')
			
			if conf.CheckLibWithHeader('Xrandr', 'X11/extensions/Xrandr.h', 'c++', 'XRRQueryVersion(NULL,NULL,NULL);'):
				envDragengine.Append(CXXFLAGS = '-DHAS_LIB_XRANDR')
				libs.append('Xrandr')
				binlibs.append('Xrandr')
			else:
				Exit('X11 is used but no Xrandr extension is not found.')
			
		elif envDragengine['with_x'] == TernaryVariableYes:
			print('Requested to use X Window System but Xlib.h or libX11 could not be found or is not usable.')
			Exit(1)
	
	# android specific problems
	#hasUtimensat = conf.CheckFunc('utimensat', 'sys/stat.h')
	hasPthreadCancel = conf.CheckFunc('pthread_cancel')

conf.Finish()

# fetch values in expanded form for later use
pathLib = envDragengine.subst(envDragengine['path_de_lib'])
pathInclude = envDragengine.subst(envDragengine['path_de_include'])
pathConfig = envDragengine.subst(envDragengine['path_de_config'])
pathEngine = envDragengine.subst(envDragengine['path_de_data'])
pathShare = envDragengine.subst(envDragengine['path_de_share'])
pathCache = envDragengine.subst(envDragengine['path_de_cache'])

if envDragengine['OSWindows']:
	pathSysLib = envDragengine.subst(envDragengine['systemroot'])
	#pathSysLib = envDragengine.subst(envDragengine['path_de'])

versionString = envDragengine['version']
if envDragengine['force_version']:
	versionString = envDragengine['force_version']

libVersionString = versionString
while len(libVersionString.split('.')) < 3:
	libVersionString = '{}.0'.format(libVersionString)

# write the configuration file required by a few source files
def buildWriteConfig(source, target, env):
	configFilePath = target[0].abspath
	configFileDefines = {}
	configFileDefines['DE_VERSION'] = versionString
	configFileDefines['OS_UNIX'] = env['OSPosix']
	configFileDefines['OS_UNIX_X11'] = (env['OSPosix'] and hasX11
		and not env['OSWindows']
		and not env['OSBeOS']
		and not env['OSMacOS']
		and env['platform_android'] == 'no'
		and not env['platform_webwasm'])
	configFileDefines['OS_W32'] = env['OSWindows']
	configFileDefines['OS_BEOS'] = env['OSBeOS']
	configFileDefines['OS_MACOS'] = env['OSMacOS']
	configFileDefines['OS_ANDROID'] = env['platform_android'] != 'no'
	configFileDefines['OS_WEBWASM'] = env['platform_webwasm']
	if env['platform_android'] == 'quest':
		configFileDefines['OS_ANDROID_QUEST'] = True
	if env['OSPosix'] or env['OSMacOS']:
		configFileDefines['HAS_LIB_X11'] = hasX11
		configFileDefines['HAS_LIB_PTHREAD'] = hasPThreads
		configFileDefines['HAS_LIB_DL'] = hasDL
		# android specific problems
		#configFileDefines['HAS_FUNC_UTIMENSAT'] = hasUtimensat
		configFileDefines['HAS_FUNC_PTRHEAD_CANCEL'] = hasPthreadCancel
	
	if WriteConfigFile(configFilePath, configFileDefines, env):
		raise Exception('Writing configuration file failed')

targetConfig = envDragengine.Command(
	envDragengine.File('src/dragengine_configuration.h').srcnode(),
	'SConscript', buildWriteConfig)

# update the compile flags
# envDragengine.Append(CXXFLAGS=' -D__DEBUG__')
# envDragengine.Append(CXXFLAGS=' -D_TESTING_')
envDragengine.Append(CXXFLAGS = [
	cmdlineDefinePath(envDragengine, 'DE_ENGINE_PATH', pathEngine),
	cmdlineDefinePath(envDragengine, 'DE_CONFIG_PATH', pathConfig),
	cmdlineDefinePath(envDragengine, 'DE_SHARE_PATH', pathShare),
	cmdlineDefinePath(envDragengine, 'DE_CACHE_PATH', pathCache)])

if envDragengine['OSWindows']:
	pathEngineBase = envDragengine.subst(envDragengine['path_de'])
	envDragengine.Append(CXXFLAGS = [
		cmdlineDefinePath(envDragengine, 'DE_ENGINE_BASE_PATH', pathEngineBase)])

if envDragengine['platform_android'] != 'no':
	archMap = {
		'armv7': 'armv7',
		'armv8': 'armv8',
		'x86': 'x860',
		'quest': 'armv8'}
	
	envDragengine.Append(CXXFLAGS = [
		cmdlineDefinePath(envDragengine, 'ANDROID_ARCH', archMap[envDragengine['platform_android']]),
		cmdlineDefinePath(envDragengine, 'ANDROID_JNIDIR', envDragengine['ANDROID_JNIDIR'])])

if 'mingw' in envDragengine['TOOLS']:
	# this line is important or else we have to ship libstdc++-6.dll and libgcc_s_sjlj-1.dll alongside
	# the build library which is a pain. if this library depends on another cross-compiled library
	# comment out this line or the static inclusion is duplicate causing errors
	pass #envDragengine.Append(LINKFLAGS = ['-static', '-static-libgcc', '-static-libstdc++'])

envDragengine.Replace(WINDOWS_INSERT_DEF = 1) # generated .def file if dll is build

if envDragengine['OSWindows']:
	envDragengine.Append(LINKFLAGS = ['-Wl,--export-all-symbols'])

if envDragengine['OSMacOS']:
	envDragengine.Append(LINKFLAGS = ['-install_name', '@rpath/libdragengine.dylib'])

# seems to affect only 32-bit compiler version
#if envDragengine['OSBeOS']:
#	envDragengine.Append(CXXFLAGS = '-Wno-multichar')

envDragengine.Append(CPPFLAGS = envDragengine['SANITIZE_FLAGS'])
envDragengine.Append(LINKFLAGS = envDragengine['SANITIZE_FLAGS'])

# setup the builders
sources = []
headers = []
globFiles(envDragengine, 'src', '*.cpp', sources)
globFiles(envDragengine, 'src', '*.h', headers)
if envDragengine['OSMacOS']:
	globFiles(envDragengine, 'src', '*.mm', sources)

sources.append('base64/base64.cpp')
envDragengine.Append(CPPPATH = ['base64'])

ignoreHeaders = []
ignoreHeaders.append('src/doxy_main.h')

headers = [envDragengine.File(h).srcnode() for h in headers if not h in ignoreHeaders]
headers.extend(targetConfig)

if envDragengine['with_static_internalmodules']:
	envDragengine.Append(CPPFLAGS=['-DWITH_STATIC_INTERNALMODULES'])
	
	envDragengine['InternalModuleCreateFunctions'] = []
	
	def createInternalModulesBuild(target, source, env):
		with open(target[0].abspath, 'w') as f:
			f.write('/* Generated File. Do not edit */\n')
			for cf in env['InternalModuleCreateFunctions']:
				f.write('extern deInternalModule *{}(deModuleSystem*);\n'.format(cf))
			f.write('static deModuleSystem::FPRegisterInternalModule vInternalModuleFunctions[]{\n')
			for cf in env['InternalModuleCreateFunctions']:
				f.write('\t{},\n'.format(cf))
			f.write('\tnullptr};\n')
	
	targetCreateInternalModules = envDragengine.Command(
		'deModuleSystem_generated.cpp', targetConfig, envDragengine.Action(
			createInternalModulesBuild, 'Generate Internal Modules Source'))
	
	envDragengine.Depends('src/systems/deModuleSystem.cpp', targetCreateInternalModules)

objects = [envDragengine.SharedObject(s) for s in sources]

if envDragengine['HostOSWindows']:
	cut = len(objects) // 2
	objgroup1 = envDragengine.StaticLibrary(target='objgroup1', source=objects[:cut])
	objgroup2 = envDragengine.StaticLibrary(target='objgroup2', source=objects[cut:])
	objects = objgroup1 + objgroup2

libs.extend(parent_targets['lib_zlib']['libs'])
envDragengine.Append(CPPPATH = parent_targets['lib_zlib']['cpppath'])
envDragengine.Append(LIBPATH = parent_targets['lib_zlib']['libpath'])

if envDragengine['OSPosix']:
	envDragengine.Replace(SHLIBVERSION = libVersionString)

envDragengine.Depends(sources, targetConfig)

library = envDragengine.SharedLibrary(target='dragengine', source=objects, LIBS=libs)
targetBuild = envDragengine.Alias('dragengine_build', library)

copyHeaders = []
refDir = envDragengine.Dir('src').srcnode()
for h in headers:
	copyHeaders.append(envDragengine.Command(
		os.path.join('include', 'dragengine', refDir.rel_path(h)),
		h, Copy('$TARGET', '$SOURCE')))
envDragengine.Depends(library, copyHeaders)

installHeaders = [envDragengine.InstallAs(os.path.join(pathInclude, refDir.rel_path(h)), h) for h in headers]
installDevelop = installHeaders[:]

installRuntime = []

archiveDevelop = {os.path.join(pathInclude, refDir.rel_path(h)):h for h in headers}
archiveEngine = {}

if envDragengine['OSPosix'] or envDragengine['OSBeOS']:
	for l in library:
		lname = l.name
		installRuntime.append(envDragengine.InstallVersionedLib(pathLib, l))
		archiveEngine['{}/{}'.format(pathLib, l.name)] = l
		
		lname = '.'.join(lname.split('.')[0:-2])
		archiveEngine['{}/{}'.format(pathLib, lname)] = envDragengine.File(lname)
		
		lname = '.'.join(lname.split('.')[0:-1])
		archiveEngine['{}/{}'.format(pathLib, lname)] = envDragengine.File(lname)

elif envDragengine['OSWindows']:
	installRuntime.append(envDragengine.Install(pathSysLib, 'dragengine.dll'))
	installDevelop.append(envDragengine.Install(pathLib, 'dragengine.lib'))
	installDevelop.append(envDragengine.Install(pathLib, 'dragengine.def'))
	archiveEngine['{}/dragengine.dll'.format(pathSysLib)] = envDragengine.File('dragengine.dll')
	archiveDevelop['{}/dragengine.lib'.format(pathLib)] = envDragengine.File('dragengine.lib')
	archiveDevelop['{}/dragengine.def'.format(pathLib)] = envDragengine.File('dragengine.def')
	
	if envDragengine['CROSSCOMPILE_CLANG'] and envDragengine['with_install_pdb']:
		pathPdb = envDragengine.subst(envDragengine['path_pdb'])
		installRuntime.append(envDragengine.Install(pathPdb, 'dragengine.pdb'))
		archiveEngine['{}/dragengine.pdb'.format(pathPdb)] = envDragengine.File('dragengine.pdb')


if envDragengine['OSPosix'] and not envDragengine['OSBeOS'] and envDragengine['platform_android'] == 'no':
	pathDataDir = envDragengine.subst('${datadir}')
	
	for s in ['128', '64', '32']:
		target = os.path.join(pathDataDir, 'icons', 'hicolor',
			'{}x{}'.format(s, s), 'mimetypes', 'dragengine-delga.png')
		source = 'data/mime-dragengine-delga{}.png'.format(s)
		installRuntime.append(envDragengine.InstallAs(target, source))
		archiveEngine[target] = envDragengine.File(source).srcnode()
		
		target = os.path.join(pathDataDir, 'icons', 'hicolor',
			'{}x{}'.format(s, s), 'mimetypes', 'dragengine-game.png')
		source = 'data/mime-dragengine-game{}.png'.format(s)
		installRuntime.append(envDragengine.InstallAs(target, source))
		archiveEngine[target] = envDragengine.File(source).srcnode()
	
	target = os.path.join(pathDataDir, 'mime', 'packages', 'dragengine-dragengine.xml')
	source = 'data/mimetypes.xml'
	installRuntime.append(envDragengine.InstallAs(target, source))
	archiveEngine[target] = envDragengine.File(source).srcnode()


targetInstallDevelop = envDragengine.Alias('dragengine_develop', installDevelop)
targetInstallRuntime = envDragengine.Alias('dragengine_runtime', installRuntime)
targetInstall = envDragengine.Alias('dragengine', [targetInstallRuntime, targetInstallDevelop])

# source directory required for special commands
srcdir = Dir('src').srcnode().abspath

# doxygen
doxyfile = envDragengine.Command(envDragengine.File('Doxyfile').srcnode(), 'Doxyfile.in',
	Action(UpdateModuleManifest),
	ManifestUpdates=[{'action': 'text', 'value': versionString, 'keyword': '%VERSION%'}] )

targetDoxygen = envDragengine.Alias('dragengine_doc', envDragengine.Command(
	'doc/html/index.html', doxyfile, 'cd {} && doxygen ../Doxyfile'.format(srcdir)))
#parent_targets['dragengine_doc'] = ['Drag[en]gine Documentation', targetDoxygen]

# cloc
targetClocBare = BuildCLOC(envDragengine, [srcdir], '{}/clocreport.csv'.format(srcdir), ['doc'])
Depends(targetClocBare, sources)
Depends(targetClocBare, headers)
targetCloc = envDragengine.Alias('dragengine_cloc', targetClocBare)

# add the targets to the targets list
cpppath = [envDragengine.Dir('include')]
libpath = [library[0].get_dir()]
binlibs = []

if not 'mingw' in envDragengine['TOOLS']:
	cpppath.extend(parent_targets['lib_zlib']['cpppath'])
	libpath.extend(parent_targets['lib_zlib']['libpath'])
	binlibs.extend(parent_targets['lib_zlib']['libs'])

parent_targets['dragengine'] = {
	'name': 'Drag[en]gine Game Engine',
	'cpppath': cpppath,
	'libpath': libpath,
	'binlibs': binlibs,
	'libs': linklibs,
	'build': targetBuild,
	'install': targetInstall,
	'install-runtime': targetInstallRuntime,
	'install-engine-runtime': targetInstallRuntime,
	'headers': copyHeaders,
	'library': library,
	'archive-engine': archiveEngine,
	'archive-engine-develop': archiveDevelop,
	'doxygen': targetDoxygen,
	'cloc': targetCloc,
	'clocReport': '{}/clocreport.csv'.format(srcdir)}

# internal module handling
if not envDragengine['with_static_internalmodules']:
	envModules = parent_env.Clone()
	
	modulesPath = '{}/modules'.format(envModules.subst(envModules['path_de_data']))
	
	modulesLibs = []
	appendLibrary(envModules, parent_targets['dragengine'], modulesLibs)
	
	modulesInstall = []
	modulesArchive = {}
	
	envModules['InternalModuleCreateFunctions'] = []
	
	def createInternalModulesBuild(target, source, env):
		with open(target[0].abspath, 'w') as f:
			f.write('/* Generated File. Do not edit */\n')
			f.write('#include <dragengine/systems/deModuleSystem.h>\n')
			for cf in env['InternalModuleCreateFunctions']:
				f.write('extern deInternalModule *{}(deModuleSystem*);\n'.format(cf))
			f.write('static const deModuleSystem::FPRegisterInternalModule vInternalModuleFunctions[]{\n')
			for cf in env['InternalModuleCreateFunctions']:
				f.write('\t{},\n'.format(cf))
			f.write('\tnullptr};\n')
			f.write('extern "C" {\n')
			f.write('MOD_ENTRY_POINT_ATTR const deModuleSystem::FPRegisterInternalModule* DEInternalModuleFunctions(){\n')
			f.write('\treturn (deModuleSystem::FPRegisterInternalModule*)&vInternalModuleFunctions;\n')
			f.write('}\n')
			f.write('}\n')
	
	envModules.Append(CPPFLAGS = parent_env['MODULE_CPPFLAGS'])
	envModules.Append(LINKFLAGS = parent_env['MODULE_LINKFLAGS'])
	
	if not envModules['OSMacOS']:
		envModules.Append(MODULE_LINKFLAGS = ['-Wl,--version-script=modules.version'])
	
	modulesTargetCreateInternalModules = envModules.Command(
		'deInternalModulesMain_generated.cpp', targetConfig, envModules.Action(
			createInternalModulesBuild, 'Generate Internal Modules Source'))
	
	modulesObjects = [envModules.SharedObject(modulesTargetCreateInternalModules)]
	
	modulesLibrary = envModules.LoadableModule(target='demodules', source=modulesObjects, LIBS=modulesLibs)
	modulesTargetBuild = envModules.Alias('deinternalmodules_build', modulesLibrary)
	
	for l in modulesLibrary:
		if l.name.endswith(envModules['SHLIBSUFFIX']):
			modulesInstall.append(envModules.Install(modulesPath, l))
			modulesArchive[os.path.join(modulesPath, l.name)] = l
		
		if envModules['OSWindows'] and envModules['CROSSCOMPILE_CLANG'] and envModules['with_install_pdb']:
			pathPdb = os.path.join(envModules.subst(envModules['path_pdb']), 'EngineModules')
			modulesInstall.append(envModules.Install(pathPdb, 'demodules.pdb'))
			modulesArchive['{}/demodules.pdb'.format(pathPdb)] = envModules.File('demodules.pdb')
	
	modulesTargetInstall = envModules.Alias('deinternalmodules', modulesInstall)

def addInternalModule(env, nodes, externLibs, createFunc, syslibs=[]):
	if parent_env['with_static_internalmodules']:
		targetLibrary = library
		targetDepend = targetCreateInternalModules
		targetCppPath = cpppath
	else:
		targetLibrary = modulesLibrary
		targetDepend = modulesTargetCreateInternalModules
		targetCppPath = []
	
	libenv = targetLibrary[0].get_env()
	
	libenv['LIBS'].extend(syslibs)
	"""
	for x in reversed(syslibs):
		if not x in libenv['LIBS']:
			libenv['LIBS'].insert(0, x)
	"""
	
	for el in externLibs:
		elt = parent_targets[el]
		if 'libs' in elt:
			for x in reversed(elt['libs']):
				if not x in libenv['LIBS']:
					libenv['LIBS'].insert(0, x)
			#libenv['LIBS'].extend(elt['libs'])
			#binlibs.extend(parent_targets['lib_zlib']['libs'])
		if 'libpath' in elt:
			for x in elt['libpath']:
				if not x in libenv['LIBPATH']:
					libenv['LIBPATH'].append(x)
				if not x in libpath:
					libpath.append(x)
		if 'cpppath' in elt:
			for x in elt['cpppath']:
				if not x in libenv['CPPPATH']:
					libenv['CPPPATH'].append(x)
				if not x in targetCppPath:
					targetCppPath.append(x)
		if 'cppflags' in elt:
			for x in elt['cppflags']:
				if not x in libenv['CPPFLAGS']:
					libenv['CPPFLAGS'].append(x)
		if 'linkflags' in elt:
			for x in elt['linkflags']:
				if not x in libenv['LINKFLAGS']:
					libenv['LINKFLAGS'].append(x)
	
	for n in nodes:
		#libenv['LINKFLAGS'].extend(['-Wl,--whole-archive', n, '-Wl,--no-whole-archive'])
		libenv['LIBS'].insert(0, n)
	
	env.Depends(targetLibrary, nodes)
	
	libenv['InternalModuleCreateFunctions'].append(createFunc)
	libenv.Depends(targetDepend, nodes)
	
	"""
	print('LIBS: ', libenv['LIBS'])
	print('LIBPATH: ', libenv['LIBPATH'])
	print('CPPPATH: ', libenv['CPPPATH'])
	print('CPPFLAGS: ', libenv['CPPFLAGS'])
	print('LINKFLAGS: ', libenv['LINKFLAGS'])
	"""

parent_targets['dragengine']['add internal module'] = addInternalModule

if not envDragengine['with_static_internalmodules']:
	parent_targets['deinternalmodules'] = {
		'name': 'Drag[en]gine Internal Modules',
		'build': modulesTargetBuild,
		'install': modulesTargetInstall,
		'install-engine-runtime': modulesTargetInstall,
		'archive-engine': modulesArchive}

# report
if envDragengine['OSPosix'] or envDragengine['OSMacOS']:
	if hasDL:
		parent_report['use dynamic libraries'] = 'yes'
	else:
		parent_report['use dynamic libraries'] = 'no'
	if hasX11:
		parent_report['use X Window System'] = 'yes'
	else:
		parent_report['use dynamic libraries'] = 'no'
