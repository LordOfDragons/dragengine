/* 
 * Drag[en]gine Game Engine
 *
 * Copyright (C) 2020, Roland Pl√ºss (roland@rptd.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

#ifndef _DEINPUTEVENT_H_
#define _DEINPUTEVENT_H_

#include "../dragengine_configuration.h"

#ifdef OS_W32_VS
#include "../app/include_windows.h"
#else
#include <sys/time.h>
#endif


/**
 * \brief Input event.
 * 
 * Event objects are generated by the <em>input module</em> and placed in the
 * game engine event queue. The <em>script module</em> then reads those events
 * and processes them.
 */
class deInputEvent{
public:
	/** \brief Event Codes. */
	enum eEvents{
		/** \brief Key pressed on keyboard. */
		eeKeyPress,
		
		/** \brief Key released on keyboard. */
		eeKeyRelease,
		
		/** \brief Mouse button pressed. */
		eeMousePress,
		
		/** \brief Mouse button released. */
		eeMouseRelease,
		
		/** \brief Mouse moved. */
		eeMouseMove,
		
		/** \brief Mouse wheele moved. */
		eeMouseWheel,
		
		/** \brief Device axis moved. */
		eeAxisMove,
		
		/** \brief Device button pressed. */
		eeButtonPress,
		
		/** \brief Device button released. */
		eeButtonRelease,
		
		/** \brief Input device has been attached to host system. */
		eeDeviceAttached,
		
		/** \brief Input device has been detatched from host system. */
		eeDeviceDetached,
		
		/** \brief Input device parameters changed. */
		eeDeviceParamsChanged,
		
		/**
		 * \brief Device button touched.
		 * \version 1.6
		 */
		eeButtonTouch,
		
		/**
		 * \brief Device button untouched.
		 * \version 1.6
		 */
		eeButtonUntouch
	};
	
	/** \brief State modifiers. */
	enum eStateModifiers{
		/** \brief No modifier. */
		esmNone = 0x0,
		
		/** \brief Shift modifier. */
		esmShift = 0x1,
		
		/** \brief Control modifier. */
		esmControl = 0x2,
		
		/** \brief Alt modifier. */
		esmAlt = 0x4,
		
		/**
		 * \brief Meta modifier.
		 * 
		 * Sometimes used for example apple combine key or haiku.
		 */
		esmMeta = 0x8,
		
		/**
		 * \brief Super modifier.
		 * 
		 * Usually not used.
		 */
		esmSuper = 0x10,
		
		/**
		 * \brief Hyper modifier.
		 * 
		 * Usually not used.
		 */
		esmHyper = 0x20
	};
	
	/**
	 * \brief Keyboard key codes.
	 * 
	 * Identify keyboard keys without matching particular OS or hardware. This is used in
	 * situations like UI where keyboard input has to be used without the user assinging
	 * first a binding to input device buttons. Multiple keys can return the same key code.
	 * For example keypad number or arrow keys return the same code as regular number and
	 * arrow keys. Game scripts should use key character or button ID using bindings to
	 * listen to specific keys on a keyboard if possible.
	 * 
	 * Key codes are provided for eeKeyPress and eeKeyRelease only.
	 */
	enum eKeyCodes{
		ekcUndefined,
		
		ekcA,
		ekcB,
		ekcC,
		ekcD,
		ekcE,
		ekcF,
		ekcG,
		ekcH,
		ekcI,
		ekcJ,
		ekcK,
		ekcL,
		ekcM,
		ekcN,
		ekcO,
		ekcP,
		ekcQ,
		ekcR,
		ekcS,
		ekcT,
		ekcU,
		ekcV,
		ekcW,
		ekcX,
		ekcY,
		ekcZ,
		
		ekc0,
		ekc1,
		ekc2,
		ekc3,
		ekc4,
		ekc5,
		ekc6,
		ekc7,
		ekc8,
		ekc9,
		
		ekcSpace,
		ekcBackSpace,
		ekcTab,
		ekcReturn,
		ekcPause,
		ekcEscape,
		ekcInsert,
		ekcDelete,
		
		ekcShift,
		ekcControl,
		ekcAlt,
		ekcMeta,
		ekcSuper,
		ekcHyper,
		
		ekcArrowLeft,
		ekcArrowUp,
		ekcArrowRight,
		ekcArrowDown,
		ekcPageUp,
		ekcPageDown,
		ekcHome,
		ekcEnd,
		
		ekcF1,
		ekcF2,
		ekcF3,
		ekcF4,
		ekcF5,
		ekcF6,
		ekcF7,
		ekcF8,
		ekcF9,
		ekcF10,
		ekcF11,
		ekcF12
	};
	
	/**
	 * \brief Mouse button codes.
	 * 
	 * All mouse input devices have to provide at least these button codes.
	 */
	enum eMouseButtonCodes{
		embcLeft,
		embcRight,
		embcMiddle
	};
	
	/**
	 * \brief Source of the input event.
	 * \version 1.6
	 */
	enum eSources{
		esInput, //<! Originates from Input System
		esVR //<! Originates from VR System
	};
	
	/**
	 * \brief Location of key on keyboard.
	 * \version 1.7
	 * 
	 * Used to distinguish between multiple keys producing the same key code.
	 */
	enum eKeyLocation{
		/**
		 * \brief No location information.
		 * 
		 * Used for all keys existing only once on the keyboard and primary keys located
		 * in the large key block on keyboards.
		 */
		eklNone,
		
		/** \brief Left side key, for example left shift key. */
		eklLeft,
		
		/** \brief Right side key, for example right shift key. */
		eklRight,
		
		/** \brief Key is located in the number pad. */
		eklNumberPad
	};
	
	
	
private:
	eEvents pType;
	int pDevice;
	int pCode;
	int pState;
	eKeyCodes pKeyCode;
	int pKeyChar;
	int pX;
	int pY;
	float pValue;
	timeval pTime;
	eSources pSource;
	eKeyLocation pKeyLocation;
	
	
	
public:
	/** \name Constructors and Destructors */
	/*@{*/
	/** \brief Create input event. */
	deInputEvent();
	
	/** \brief Create copy of input event. */
	deInputEvent( const deInputEvent &event );
	
	/** \brief Clean up the event object. */
	~deInputEvent();
	/*@}*/
	
	
	
	/** \name Management */
	/*@{*/
	/** \brief Event type. */
	inline eEvents GetType() const{ return pType; }
	
	/**
	 * \brief Set event type.
	 * \throws deeInvalidParam \em type is not a member of deInputEvent::eEvents.
	 */
	void SetType( eEvents type );
	
	/** \brief Event device. */
	inline int GetDevice() const{ return pDevice; }
	
	/**
	 * \brief Set event device.
	 * \throws deeInvalidParam \em device is less than 0.
	 */
	void SetDevice( int device );
	
	/**
	 * \brief Event code.
	 * 
	 * This is a button or axis index.
	 */
	inline int GetCode() const{ return pCode; }
	
	/**
	 * \brief Set event code.
	 * 
	 * This is a button or axis index.
	 */
	void SetCode( int code );
	
	/**
	 * \brief Event state.
	 * 
	 * ORed combination of members of deInputEvent::eStateModifiers.
	 */
	inline int GetState() const{ return pState; }
	
	/**
	 * \brief Set event state.
	 * 
	 * \param[in] code ORed combination of members of deInputEvent::eStateModifiers.
	 */
	void SetState( int state );
	
	/**
	 * \brief Key code to identify important keys.
	 * 
	 * Used for eeKeyPress and eeKeyRelease only.
	 */
	inline eKeyCodes GetKeyCode() const{ return pKeyCode; }
	
	/**
	 * \brief Set key code to identify important keys.
	 * 
	 * Used for eeKeyPress and eeKeyRelease only.
	 */
	void SetKeyCode( eKeyCodes keyCode );
	
	/** \brief Key character if a keyboard event. */
	inline int GetKeyChar() const{ return pKeyChar; }
	
	/** \brief Set key character if a keyboard event. */
	void SetKeyChar( int keyChar );
	
	/** \brief X position if a mouse event. */
	inline int GetX() const{ return pX; }
	
	/** \brief Set X position if a mouse event. */
	void SetX( int x );
	
	/** \brief Y position if a mouse event. */
	inline int GetY() const{ return pY; }
	
	/** \brief Set Y position if a mouse event. */
	void SetY( int y );
	
	/** \brief Value if axis event. */
	inline float GetValue() const{ return pValue; }
	
	/** \brief Set value if axis event. */
	void SetValue( float value );
	
	/** \brief Time the event occurred. */
	inline const timeval &GetTime() const{ return pTime; }
	
	/** \brief Set time the event occurred. */
	void SetTime( const timeval &eventTime );
	
	/**
	 * \brief Source of the input event.
	 * \version 1.6
	 */
	inline eSources GetSource() const{ return pSource; }
	
	/**
	 * \brief Set source of the input event.
	 * \version 1.6
	 */
	void SetSource( eSources source );
	
	/**
	 * \brief Location of key on keyboard.
	 * \version 1.7
	 * 
	 * Used to distinguish between multiple keys producing the same key code.
	 */
	inline eKeyLocation GetKeyLocation() const{ return pKeyLocation; }
	
	/**
	 * \brief Set location of key on keyboard.
	 * \version 1.7
	 * 
	 * Used to distinguish between multiple keys producing the same key code.
	 */
	void SetKeyLocation( eKeyLocation location );
	
	/** \brief Copies properties of another event to this event. */
	void SetFrom( const deInputEvent &event );
	/*@}*/
	
	
	
	/** \name Operators */
	/*@{*/
	/** \brief Two events are equal. */
	bool operator==( const deInputEvent &event ) const;
	
	/** \brief Copy input event. */
	deInputEvent &operator=( const deInputEvent &event );
	/*@}*/
};

#endif
