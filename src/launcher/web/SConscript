from SConsCommon import *

# import whatever is given by the parent builder
Import('parent_env parent_targets parent_report')

if not parent_env['platform_webwasm']:
	Return()

# setup the environment matching the OS
envLauncher = parent_env.Clone()

libs = []

# fetch values in expanded form for later use
pathBin = envLauncher.subst(envLauncher['path_launcher_bin'])
pathConfig = envLauncher.subst(envLauncher['path_launcher_config'])
pathData = envLauncher.subst(envLauncher['path_launcher_data'])
pathGames = envLauncher.subst(envLauncher['path_launcher_games'])
pathShare = envLauncher.subst(envLauncher['path_launcher_share'])

# update the compile flags
envLauncher.Append(CXXFLAGS = [
	cmdlineDefinePath(envLauncher, 'LAUNCHER_SHARE_PATH', pathShare),
	cmdlineDefinePath(envLauncher, 'LAUNCHER_GAMES_PATH', pathGames),
	cmdlineDefinePath(envLauncher, 'LAUNCHER_CONFIG_PATH', pathConfig)])

libs.append('embind')
#libs.append('idbfs.js')
#libs.append('opfs.js')

envLauncher.Append(CXXFLAGS = ['-fPIC'])
# envLauncher.Append(LINKFLAGS = ['-error-limit=0'])
envLauncher.Append(LINKFLAGS = ['-sMAIN_MODULE'])
# envLauncher.Append(LINKFLAGS = ['-sPTHREAD_POOL_SIZE="navigator.hardwareConcurrency"'])
envLauncher.Append(LINKFLAGS = ['-sPTHREAD_POOL_SIZE="navigator.hardwareConcurrency+4"'])
# envLauncher.Append(LINKFLAGS = ['-sALLOW_BLOCKING_ON_MAIN_THREAD=0'])
envLauncher.Append(LINKFLAGS = ['-sENVIRONMENT=web,worker'])
# envLauncher.Append(LINKFLAGS = ['-s TOTAL_MEMORY=256MB'])
envLauncher.Append(LINKFLAGS = ['-sWASMFS'])
envLauncher.Append(LINKFLAGS = ['-sOFFSCREEN_FRAMEBUFFER=1'])

# setup the builders
sources = []
headers = []
globFiles(envLauncher, 'src', '*.cpp', sources)
globFiles(envLauncher, 'src', '*.h', headers)

objects = [envLauncher.StaticObject(s) for s in sources]

appendLibrary(envLauncher, parent_targets['delauncher'], libs)

for t in parent_targets.values():
	if 'wasm-preload-files' in t:
		for (vfs,node) in t['wasm-preload-files'].items():
			envLauncher.Append(LINKFLAGS = ['--preload-file',
				'{}@{}'.format(node.abspath, vfs)])
			envLauncher.Depends(objects, node)

program = envLauncher.Program(target='delauncher-web.js', source=objects, LIBS=libs)

targetBuild = envLauncher.Alias('launcher_web_build', program)

install = []
archive = {}

install.append(envLauncher.Install(pathBin, program))
for p in program:
	archive[os.path.join(pathBin, p.name)] = p

targetInstall = envLauncher.Alias('launcher_web', install)

# source directory required for special commands
srcdir = Dir('.').srcnode().abspath

# cloc
buildClocBare = BuildCLOC(envLauncher, ['{}/src'.format(srcdir)], '{}/clocreport.csv'.format(srcdir), ['doc'])
Depends(buildClocBare, sources)
Depends(buildClocBare, headers)
buildCloc = envLauncher.Alias('launcher_web_cloc', buildClocBare)

# add the targets to the targets list
parent_targets['launcher_web'] = {
	'name' : 'Drag[en]gine Web Launcher',
	'build' : targetBuild,
	'install' : targetInstall,
	'install-engine-runtime' : targetInstall,
	'archive-launcher' : archive,
	'cloc' : buildCloc,
	'clocReport' : '{}/clocreport.csv'.format(srcdir)}
