from SConsCommon import *

Import('parent_env parent_targets parent_report')

envLauncher = parent_env.Clone()
envLauncher.Tool('symlink')

buildLauncher = envLauncher['build_guilauncher'] != TernaryVariableNo

parent_report['build GUI Launcher'] = 'yes' if buildLauncher else 'no'
if not buildLauncher or parent_env['platform_android'] != 'no':
	Return()

# fetch values in expanded form for later use
pathBin = envLauncher.subst(envLauncher['path_launcher_bin'])
pathBinLib = envLauncher.subst(envLauncher['path_launcher_bin_lib'])
pathConfig = envLauncher.subst(envLauncher['path_launcher_config'])
pathData = envLauncher.subst(envLauncher['path_launcher_data'])
pathShare = envLauncher.subst(envLauncher['path_launcher_share'])
pathGames = envLauncher.subst(envLauncher['path_launcher_games'])

if envLauncher['OSBeOS']:
	pathMan1 = os.path.join(envLauncher.subst(envLauncher['docdir']), 'man', 'man1')
elif envLauncher['OSPosix']:
	pathMan1 = os.path.join(envLauncher.subst(envLauncher['datadir']), 'man', 'man1')

libs = []

appendLibrary(envLauncher, parent_targets['delauncher'], libs)
appendLibrary(envLauncher, parent_targets['lib_fox'], libs)
libs.extend(parent_targets['delauncher']['binlibs'])

if envLauncher['OSPosix'] or envLauncher['OSMacOS']:
	envLauncher.Append(CXXFLAGS = '-DHAS_LIB_DL')
	
elif envLauncher['OSBeOS']:
	libs.extend(['root', 'be'])

elif envLauncher['OSWindows']:
	envLauncher.Append(LINKFLAGS = '-Wl,-subsystem,windows')
	envLauncher.Append(LINKFLAGS = '-mwindows')  # prevent dos window to appear

if not envLauncher['with_debug']:
	envLauncher.Append(LINKFLAGS = ['-s'])  # strip unneded

# create environment for the progam
envLauncher.Append(CXXFLAGS = ['-I{}'.format(envLauncher.Dir('shared/src').srcnode().abspath)])

envLauncher.Append(CXXFLAGS = [
	cmdlineDefinePath(envLauncher, 'LAUNCHER_SHARE_PATH', pathShare),
	cmdlineDefinePath(envLauncher, 'LAUNCHER_GAMES_PATH', pathGames),
	cmdlineDefinePath(envLauncher, 'LAUNCHER_CONFIG_PATH', pathConfig)])

if envLauncher['OSWindows']:
	envLauncher.Append(CXXFLAGS = ['-DDEBUG_RELOCATE_STDOUT'])

envLauncher.Append(CXXFLAGS = ['-I{}'.format(envLauncher.Dir('src').srcnode().abspath)])

envLauncher.Append(CPPFLAGS = envLauncher['SANITIZE_FLAGS'])
envLauncher.Append(LINKFLAGS = envLauncher['SANITIZE_FLAGS'])

# determine the source files
sources = []
headers = []
globFiles(envLauncher, 'src', '*.cpp', sources)
globFiles(envLauncher, 'src', '*.h', headers)

# setup the builders
objects = [envLauncher.StaticObject(s) for s in sources]

programs = []
if envLauncher['OSWindows']:
	envEngine = envLauncher.Clone()
	envEngine.Append(CXXFLAGS = ['-DOS_W32_HELPER'])
	
	libsEngine = []
	appendLibrary(envEngine, parent_targets['delauncher'], libsEngine)
	libsEngine.extend(parent_targets['delauncher']['binlibs'])
	
	objectsEngine = [envEngine.StaticObject('src/engine/deglEngineProcessHelper-helper',
		'src/engine/deglEngineProcessHelper.cpp')]
	
	programEngine = envEngine.Program(target='delauncher-gui-engine', source=objectsEngine, LIBS=libsEngine)
	programs.append(programEngine)
	
	objects.append(envLauncher.RES('src/guilaunch-res.rc'))

program = envLauncher.Program(target='delauncher-gui', source=objects, LIBS=libs)
programs.append(program)

if envLauncher['OSPosix']:
	linkProgram = envLauncher.SymLink(envLauncher.File('delauncher'), program)
	programs.append(linkProgram)

targetBuild = parent_env.Alias('launcher_gui_build', programs)

install = []
archive = {}

install.append(envLauncher.Install(pathBin, program))
for p in program:
	archive[os.path.join(pathBin, p.name)] = p

if envLauncher['OSPosix']:
	for l in linkProgram:
		target = os.path.join(pathBin, 'delauncher')
		installSandbox = GetOption('install_sandbox')
		if installSandbox:
			target = os.path.join(installSandbox, SCons.Util.make_path_relative(target))
		source = l
		install.append(envLauncher.Command(target, l, Copy('$TARGET', '$SOURCE')))
		
		archive[os.path.join(pathBin, l.name)] = l

if envLauncher['OSWindows']:
	install.append(envEngine.Install(pathBin, programEngine))
	for p in programEngine:
		archive[os.path.join(pathBin, p.name)] = p

if 'lib_mingw_runtime' in parent_targets:
	for l in parent_targets['lib_mingw_runtime']['runtimelibs']:
		archive[os.path.join(pathBin, l.name)] = l
	
for l in reversed(parent_targets['lib_fox']['runtimelibs']):
	key = '{}/{}'.format(pathBinLib, l)
	if not key in parent_targets['lib_fox']['globalInstallTracker']:
		parent_targets['lib_fox']['globalInstallTracker'].append(key)
		envLauncher.Depends(install, envLauncher.Install(pathBinLib, l))
		archive[os.path.join(pathBinLib, l.name)] = l


if envLauncher['OSPosix'] and not envLauncher['OSBeOS']:
	pathDataDir = envLauncher.subst('${datadir}')
	
	for s in ['128', '64', '32']:
		target = os.path.join(pathDataDir, 'icons', 'hicolor',
			'{}x{}'.format(s, s), 'apps', 'dragengine-delauncher-gui.png')
		source = 'data/delauncher-gui{}.png'.format(s)
		install.append(envLauncher.InstallAs(target, source))
		archive[target] = envLauncher.File(source).srcnode()
	
	target = os.path.join(pathDataDir, 'pixmaps', 'dragengine-delauncher-gui.png')
	source = 'data/delauncher-gui128.png'
	install.append(envLauncher.InstallAs(target, source))
	archive[target] = envLauncher.File(source).srcnode()
	
	target = os.path.join(pathDataDir, 'applications', 'dragengine-delauncher-gui.desktop')
	source = 'data/delauncher-gui.desktop'
	install.append(envLauncher.InstallAs(target, source))
	archive[target] = envLauncher.File(source).srcnode()
	
	target = os.path.join(pathDataDir, 'kservices5', 'dragengine-delauncher-gui-install.desktop')
	source = 'data/delauncher-gui-install.desktop'
	install.append(envLauncher.InstallAs(target, source))
	archive[target] = envLauncher.File(source).srcnode()

if envLauncher['OSPosix']:
	target = os.path.join(pathMan1, 'delauncher-gui.1')
	source = 'man/delauncher-gui.1'
	install.append(envLauncher.InstallAs(target, source))
	archive[target] = envLauncher.File(source).srcnode()
	
if envLauncher['OSWindows'] and envLauncher['CROSSCOMPILE_CLANG'] and envLauncher['with_install_pdb']:
	install.append(envLauncher.Install(pathBin, 'delauncher-gui.pdb'))
	archive['{}/delauncher-gui.pdb'.format(pathBin)] = envLauncher.File('delauncher-gui.pdb')

targetInstall = parent_env.Alias('launcher_gui', install)

# source directory required for special commands
srcdir = Dir('.').srcnode().abspath

# cloc
buildClocBare = BuildCLOC(envLauncher, ['{}/src'.format(srcdir)], '{}/clocreport.csv'.format(srcdir), ['doc'])
Depends(buildClocBare, sources)
Depends(buildClocBare, headers)
buildCloc = envLauncher.Alias('launcher_gui_cloc', buildClocBare)

# add the targets to the targets list
parent_targets['launcher_gui'] = {
	'name' : 'Drag[en]gine GUI Launcher',
	'build' : targetBuild,
	'install' : targetInstall,
	'install-engine-runtime' : targetInstall,
	'archive-launcher' : archive,
	'cloc' : buildCloc,
	'clocReport' : '{}/clocreport.csv'.format(srcdir)}
