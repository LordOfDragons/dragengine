from SConsCommon import *
import zipfile
import hashlib

Import('parent_env parent_targets parent_report')

if parent_env['platform_android'] == 'no':
	Return()

envSpecial = parent_env.Clone()

def archiveZip(env, target, source):
	with zipfile.ZipFile(target[0].abspath, 'w', zipfile.ZIP_DEFLATED) as arcfile:
		for path, node in env['ArchiveFiles'].items():
			try:
				arcfile.write(node.abspath, os.path.normpath(path))
			except Exception:
				print('PROBLEM', node, path)
				raise

def shasumZip(env, target, source):
	with open(source[0].abspath, 'rb') as f:
		hasher = hashlib.sha1()
		bytes = f.read(1024)
		while bytes:
			hasher.update(bytes)
			bytes = f.read(1024)
	with open(target[0].abspath, 'wb') as f:
		f.write('{}  {}\n'.format(hasher.hexdigest(), source[0].name).encode())

def gradleBuildApk(env, target, source):
	buildDir = source[0].get_dir()
	script = []
	script.append('cd "{}" || exit 1'.format(buildDir.abspath))
	
	# gradle bug: https://github.com/gradle/gradle/issues/4426
	script.append('unset TERM')
	
	# another gradle bug:
	script.append('export ANDROID_NDK_HOME="{}"'.format(env.subst(env['ndkroot'])))
	
	script.append('./gradlew assembleDebug || exit 1')
	return 1 if os.system('\n'.join(script)) else None


# create engine zip archive. include only the necessary files. the files to zip include
# - /<arch>/include : header files. not required in android only other platforms
# - /<arch>/lib : libraries required
# - /<arch>/share : shared files
filesEngine = {}
for target in parent_targets.values():
	if 'archive-engine' in target:
		filesEngine.update(target['archive-engine'])
	elif 'archive-launcher' in target:
		filesEngine.update(target['archive-launcher'])

filename = 'DELauncher/app/src/main/assets/install_{}.zip'.format(envSpecial['ANDROID_JNIDIR'])
zipEngine = envSpecial.Command(envSpecial.File(filename).srcnode(), filesEngine.values(),
	envSpecial.Action(archiveZip, 'Archiving install_{}.zip'.format(envSpecial['ANDROID_JNIDIR'])),
		ArchiveFiles = filesEngine)

filename = 'DELauncher/app/src/main/assets/install_{}.sha1sum'.format(envSpecial['ANDROID_JNIDIR'])
zipEngine.extend(envSpecial.Command(envSpecial.File(filename).srcnode(), zipEngine,
	envSpecial.Action(shasumZip, 'Checksum install_{}.zip'.format(envSpecial['ANDROID_JNIDIR']))))

# copy launcher libraries
libsLauncher = []
for l in parent_targets['launcher_android']['android-libs']:
	filename = 'DELauncher/app/src/main/jniLibs/armeabi-v7a/{}'.format(l.name)
	libsLauncher.extend(envSpecial.Command(envSpecial.File(filename).srcnode(), l,
		envSpecial.Action(Copy('$TARGET', '$SOURCE'), 'Copy {}'.format(l.name))))

# build apk
apkDeps = []
apkDeps.append('DELauncher/build.gradle')
apkDeps.append('DELauncher/settings.gradle')
apkDeps.append('DELauncher/gradle.properties')
apkDeps.append('DELauncher/app/build.gradle')
apkDeps.append('DELauncher/app/src/main/AndroidManifest.xml')
globFiles(envSpecial, 'DELauncher/app/src/main/assets', '*', apkDeps)
globFiles(envSpecial, 'DELauncher/app/src/main/jniLibs', '*.so', apkDeps)
globFiles(envSpecial, 'DELauncher/app/src/main/res', '*', apkDeps)
apkDeps.extend(libsLauncher)
apkDeps.extend(zipEngine)

apk = envSpecial.Command(envSpecial.File('DELauncher/app/build/outputs/apk/debug/app-debug.apk').srcnode(),
	'DELauncher/gradlew', envSpecial.Action(gradleBuildApk, 'Build DELauncher.apk'))
envSpecial.Depends(apk, apkDeps)

apk = envSpecial.Command('#archive/build/DELauncher.apk', apk, envSpecial.Action(
		Copy('$TARGET', '$SOURCE'), 'Copy DELauncher.apk'))

targetApk = envSpecial.Alias('android_apk', apk)

parent_targets['android_apk'] = { 'name' : 'Drag[en]gine Android Test APK' }
