from SConsCommon import *

Import( 'parent_env parent_targets parent_report' )

envLauncher = parent_env.Clone()

buildLauncher = envLauncher[ 'platform_android' ] != 'no' and envLauncher[ 'build_launcher_android' ] != TernaryVariableNo

parent_report[ 'build Android Launcher' ] = 'yes' if buildLauncher else 'no'
if not buildLauncher:
	Return()

libs = []
libs.extend( envLauncher[ 'ANDROID_LIBS' ] )
libs.extend( [ 'dl' ] )
libs.extend( [ 'GLESv2', 'GLESv1_CM', 'EGL' ] ) # use both or it fails. most probably a fallback strategy of android

libsEngine = []
appendLibrary( envLauncher, parent_targets[ 'dragengine' ], libsEngine )
libsEngine.extend( envLauncher[ 'ANDROID_LIBS' ] )
libsEngine.extend( [ 'dl' ] )
libsEngine.extend( [ 'GLESv2', 'GLESv1_CM', 'EGL' ] ) # use both or it fails. most probably a fallback strategy of android

envLauncher.Append( CPPFLAGS = [ '-DHAS_LIB_DL' ] )
envLauncher.Append( LINKFLAGS = [ '-s' ] )  # strip unneded

# DEPRECATED write the configuration file required by a few source files
configFilePath = '{}/src/alconfig.h'.format( Dir( '.' ).srcnode().abspath )
configFileDefines = {}
configFileDefines[ 'OS_UNIX' ] = envLauncher[ 'OSPosix' ]
configFileDefines[ 'OS_W32' ] = envLauncher[ 'OSWindows' ]

if WriteConfigFile( configFilePath, configFileDefines, envLauncher ):
	Exit( 'Writing configuration file failed' )

# fetch values in expanded form for later use
pathBin = envLauncher.subst( envLauncher[ 'path_launcher_bin' ] )
pathConfig = envLauncher.subst( envLauncher[ 'path_launcher_config' ] )
pathData = envLauncher.subst( envLauncher[ 'path_launcher_data' ] )
pathShare = envLauncher.subst( envLauncher[ 'path_launcher_share' ] )

# minizip special environment
envMiniZip = envLauncher.Clone()
envMiniZip.Append( CFLAGS = [ '-DUSE_FILE32API' ] )
envMiniZip.Append( CFLAGS = [ '-Wno-all', '-Wno-error' ] )

envLauncher.Append( CPPPATH = [ envLauncher.Dir( 'minizip' ).srcnode().abspath ] )

envLauncher.Append( CPPFLAGS = [ '-DANDROID_ARCH=\\""{}"\\"'.format( envLauncher[ 'platform_android' ] ) ] )
envLauncher.Append( CPPFLAGS = [ cmdlineDefinePath( envLauncher, 'ANDROID_JNIDIR', envLauncher[ 'ANDROID_JNIDIR' ] ) ] )

# create environment for the progam
envLauncher.Append( CPPFLAGS = [
	cmdlineDefinePath( envLauncher, 'LAUNCHER_SHARE_PATH', pathShare ),
	cmdlineDefinePath( envLauncher, 'LAUNCHER_CONFIG_PATH', pathConfig ) ] )

envLauncher.Append( CPPPATH = [ envLauncher.Dir( 'src' ).srcnode().abspath ] )

# setup the builders
sources = []
headers = []
globFiles( envLauncher, 'src', '*.cpp', sources )
globFiles( envLauncher, 'src', '*.h', headers )

objects = [ envLauncher.SharedObject( s ) for s in sources ]
objects.append( envMiniZip.SharedObject( 'minizip/unzip.c' ) )
objects.append( envMiniZip.SharedObject( 'minizip/ioapi.c' ) )

library = envLauncher.SharedLibrary( target='delauncher', source=objects, LIBS=libs )

install = []
archive = {}

#install.append( envLauncher.Install( '{}/DEAndroidLauncher/app/src/main/jniLibs/{}'.format(
#	Dir( '.' ).srcnode().abspath, envLauncher[ 'ANDROID_JNIDIR' ] ), library ) )

# engine glue library
envEngine = envLauncher.Clone()

sourcesEngine = []
headersEngine = []
globFiles( envEngine, 'srcengine', '*.cpp', sourcesEngine )
globFiles( envEngine, 'srcengine', '*.h', headersEngine )

objectsEngine = [ envEngine.SharedObject( s ) for s in sourcesEngine ]
objectsEngine.append( envMiniZip.SharedObject( 'minizip/unzip.c' ) )
objectsEngine.append( envMiniZip.SharedObject( 'minizip/ioapi.c' ) )

libraryEngine = envEngine.SharedLibrary( target='delauncher_engine', source=objectsEngine, LIBS=libsEngine )

pathLibEngine = envEngine.subst( envEngine[ 'path_de_lib' ] )
install.append( envEngine.Install( pathLibEngine, libraryEngine ) )
for l in libraryEngine:
	archive[ os.path.join( pathLibEngine, l.name ) ] = l

# all together is the installation
targetBuild = envLauncher.Alias( 'lauchner_android_build', library + libraryEngine )
targetInstall = envLauncher.Alias( 'launcher_android', install )

# graddle:
# cd DEAndroidLauncher
# ./gradlew assemble

# source directory required for special commands
srcdir = Dir( '.' ).srcnode().abspath

# cloc
buildClocBare = BuildCLOC( envLauncher, [ '{}/src'.format( srcdir ) ], '{}/clocreport.csv'.format( srcdir ), [ 'doc' ] )
Depends( buildClocBare, [ sources, sourcesEngine ] )
Depends( buildClocBare, [ headers, headersEngine ] )
buildCloc = envLauncher.Alias( 'launcher_android_cloc', buildClocBare )

# add the targets to the targets list
parent_targets[ 'launcher_android' ] = {
	'name' : 'Drag[en]gine Android Launcher',
	'build' : targetBuild,
	'install' : targetInstall,
	'install-engine-runtime' : targetInstall,
	'archive-launcher' : archive,
	'android-libs' : library,
	'cloc' : buildCloc,
	'clocReport' : '{}/clocreport.csv'.format( srcdir ) }

# TEST
"""
envLauncher.Append(CXXFLAGS = ['-std=c++11'])
natact = envLauncher.SharedLibrary(
	target='native-activity',
	source=[envLauncher.SharedObject(x) for x in [
		'native-activity/app/src/main/cpp/main.cpp',
		envLauncher.subst('${ndkroot}/sources/android/native_app_glue/android_native_app_glue.c')]],
	LIBS=libs)
natact = envLauncher.Command( envLauncher.File( 'native-activity/app/src/main/jniLibs/armeabi-v7a/libnative-activity.so' ).srcnode(), natact[0],
		envLauncher.Action( Copy( '$TARGET', '$SOURCE' ), 'Copy' ) )
test = envLauncher.Alias('android_test', natact)
"""
