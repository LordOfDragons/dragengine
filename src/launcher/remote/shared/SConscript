from SConsCommon import *

Import('parent_env parent_targets parent_report')

envLibrary = parent_env.Clone()

pathInclude = envLibrary.subst(envLibrary['path_remotelauncher_include'])

versionString = envLibrary['version']
if envLibrary['force_version']:
	versionString = envLibrary['force_version']

libVersionString = versionString
while len(libVersionString.split('.')) < 3:
	libVersionString = '{}.0'.format(libVersionString)

sources = []
headers = []
globFiles(envLibrary, 'src', '*.cpp', sources)
globFiles(envLibrary, 'src', '*.h', headers)

ignoreHeaders = []
ignoreHeaders.append('src/doxy_main.h')

headers = [envLibrary.File(h).srcnode() for h in headers if not h in ignoreHeaders]

libsLib = []
appendLibrary(envLibrary, parent_targets['dragengine'], libsLib)
pathLib = envLibrary.subst(envLibrary['path_de_lib'])

buildLibrary = envLibrary.StaticLibrary(target='deremotelauncher', source=sources, LIBS=libsLib)
targetBuildLib = envLibrary.Alias('deremotelauncher_build', buildLibrary)

copyHeaders = []
refDir = envLibrary.Dir('src').srcnode()
for h in headers:
	copyHeaders.append(envLibrary.Command(
		os.path.join('include', 'deremotelauncher', refDir.rel_path(h)),
		h, Copy('$TARGET', '$SOURCE')))
envLibrary.Depends(buildLibrary, copyHeaders)

installLibDevelop = [] # [envLibrary.InstallAs(os.path.join(pathInclude, refDir.rel_path(h)), h) for h in headers]

archiveLibDevelop = {os.path.join(pathInclude, refDir.rel_path(h)):h for h in headers}
archiveLib = {}

if envLibrary['OSPosix']:
	l = buildLibrary[0]
	lname = l.name
	# installLibDevelop.append(envLibrary.Install(pathLib, l))
	archiveLibDevelop['{}/{}'.format(pathLib, l.name)] = l
	
elif envLibrary['OSWindows']:
	# installLibDevelop.append(envLibrary.Install(pathLib, 'deremotelauncher.lib'))
	# installLibDevelop.append(envLibrary.Install(pathLib, 'deremotelauncher.def'))
	
	archiveLibDevelop[os.path.join(pathLib, 'deremotelauncher.lib')] = envLibrary.File('deremotelauncher.lib')
	archiveLibDevelop[os.path.join(pathLib, 'deremotelauncher.def')] = envLibrary.File('deremotelauncher.def')

targetInstallLibDevelop = envLibrary.Alias('deremotelauncher_develop', installLibDevelop)
targetInstallLib = envLibrary.Alias('deremotelauncher', [targetInstallLibDevelop])

cpppath = [envLibrary.Dir('include')]
cpppath.extend(parent_targets['dragengine']['cpppath'])

libpath = [buildLibrary[0].get_dir()]
libpath.extend(parent_targets['dragengine']['libpath'])

linklibs = ['deremotelauncher']
linklibs.extend(parent_targets['dragengine']['libs'])

# source directory required for special commands
srcdir = Dir('.').srcnode().abspath

# doxygen
doxyfile = envLibrary.Command(envLibrary.File('Doxyfile').srcnode(), 'Doxyfile.in',
	Action(UpdateModuleManifest),
	ManifestUpdates=[{'action': 'text', 'value': versionString, 'keyword': '%VERSION%'}] )

targetDoxygen = envLibrary.Alias('deremotelauncher_doc', envLibrary.Command(
	'doc/html/index.html', doxyfile, 'cd {} && doxygen Doxyfile'.format(srcdir)))

# cloc
buildClocBare = BuildCLOC(envLibrary,
	['{}/src'.format(srcdir), '{}/shared'.format(srcdir)],
	'{}/clocreport.csv'.format(srcdir), ['doc'])
Depends(buildClocBare, sources)
Depends(buildClocBare, headers)
Depends(buildClocBare, sources)
Depends(buildClocBare, headers)
buildCloc = envLibrary.Alias('deremotelauncher_cloc', buildClocBare)

# add the targets to the targets list
parent_targets['deremotelauncher'] = {
	'name' : 'Drag[en]gine Launcher Shared',
	'cpppath' : cpppath,
	'libpath' : libpath,
	'libs' : linklibs,
	'binlibs' : [],
	'build' : targetBuildLib,
	'install' : targetInstallLib,
	'install-runtime' : [],
	'install-launcher-runtime' : [],
	'archive-engine' : archiveLib,
	'archive-engine-develop' : archiveLibDevelop,
	'doxygen' : targetDoxygen,
	'cloc' : buildCloc,
	'clocReport' : '{}/clocreport.csv'.format(srcdir)}
